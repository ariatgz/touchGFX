
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000244a8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003224  08024748  08024748  00025748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000025f6  0802796c  0802796c  0002896c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08029f64  08029f64  0002af64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00119400  90000000  90000000  00035000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000028  90119400  90119400  0014e400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08029f7c  08029f7c  0014e428  2**0
                  CONTENTS
  8 .ARM          00000008  08029f7c  08029f7c  0002af7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08029f84  08029f84  0014e428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  08029f84  08029f84  0002af84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08029fa0  08029fa0  0002afa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  08029fa8  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_MCU_Data_OutBuffer1 00004b00  24000140  0802a0e4  0002b140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_MCU_Data_OutBuffer0 00004b00  24004c40  0802ebe4  0002fc40  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 TouchGFX_ScratchbufferA 00000100  24009740  080336e4  00034740  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 16 TouchGFX_ScratchbufferB 00000100  24009840  080337e4  00034840  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 17 .bss          0001c9ac  24009940  080338e4  00034940  2**2
                  ALLOC
 18 ._user_heap_stack 00002004  240262ec  080338e4  000352ec  2**0
                  ALLOC
 19 .ARM.attributes 0000002e  00000000  00000000  0014e428  2**0
                  CONTENTS, READONLY
 20 BufferSection 00232800  d0000000  d0000000  0014f000  2**2
                  ALLOC
 21 .debug_info   000d112b  00000000  00000000  0014e456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 0001725c  00000000  00000000  0021f581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00003d58  00000000  00000000  002367e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 0000406a  00000000  00000000  0023a538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00053dc3  00000000  00000000  0023e5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   0006dccc  00000000  00000000  00292365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    001e72d8  00000000  00000000  00300031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .comment      000000c2  00000000  00000000  004e7309  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000aff0  00000000  00000000  004e73cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 000285dc  00000000  00000000  004f23bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_line_str 0000006c  00000000  00000000  0051a998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24009940 	.word	0x24009940
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08024730 	.word	0x08024730

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24009944 	.word	0x24009944
 80002dc:	08024730 	.word	0x08024730

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b988 	b.w	8000a20 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	468e      	mov	lr, r1
 8000730:	4604      	mov	r4, r0
 8000732:	4688      	mov	r8, r1
 8000734:	2b00      	cmp	r3, #0
 8000736:	d14a      	bne.n	80007ce <__udivmoddi4+0xa6>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d962      	bls.n	8000804 <__udivmoddi4+0xdc>
 800073e:	fab2 f682 	clz	r6, r2
 8000742:	b14e      	cbz	r6, 8000758 <__udivmoddi4+0x30>
 8000744:	f1c6 0320 	rsb	r3, r6, #32
 8000748:	fa01 f806 	lsl.w	r8, r1, r6
 800074c:	fa20 f303 	lsr.w	r3, r0, r3
 8000750:	40b7      	lsls	r7, r6
 8000752:	ea43 0808 	orr.w	r8, r3, r8
 8000756:	40b4      	lsls	r4, r6
 8000758:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800075c:	fa1f fc87 	uxth.w	ip, r7
 8000760:	fbb8 f1fe 	udiv	r1, r8, lr
 8000764:	0c23      	lsrs	r3, r4, #16
 8000766:	fb0e 8811 	mls	r8, lr, r1, r8
 800076a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800076e:	fb01 f20c 	mul.w	r2, r1, ip
 8000772:	429a      	cmp	r2, r3
 8000774:	d909      	bls.n	800078a <__udivmoddi4+0x62>
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	f101 30ff 	add.w	r0, r1, #4294967295
 800077c:	f080 80ea 	bcs.w	8000954 <__udivmoddi4+0x22c>
 8000780:	429a      	cmp	r2, r3
 8000782:	f240 80e7 	bls.w	8000954 <__udivmoddi4+0x22c>
 8000786:	3902      	subs	r1, #2
 8000788:	443b      	add	r3, r7
 800078a:	1a9a      	subs	r2, r3, r2
 800078c:	b2a3      	uxth	r3, r4
 800078e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000792:	fb0e 2210 	mls	r2, lr, r0, r2
 8000796:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800079a:	fb00 fc0c 	mul.w	ip, r0, ip
 800079e:	459c      	cmp	ip, r3
 80007a0:	d909      	bls.n	80007b6 <__udivmoddi4+0x8e>
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007a8:	f080 80d6 	bcs.w	8000958 <__udivmoddi4+0x230>
 80007ac:	459c      	cmp	ip, r3
 80007ae:	f240 80d3 	bls.w	8000958 <__udivmoddi4+0x230>
 80007b2:	443b      	add	r3, r7
 80007b4:	3802      	subs	r0, #2
 80007b6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007ba:	eba3 030c 	sub.w	r3, r3, ip
 80007be:	2100      	movs	r1, #0
 80007c0:	b11d      	cbz	r5, 80007ca <__udivmoddi4+0xa2>
 80007c2:	40f3      	lsrs	r3, r6
 80007c4:	2200      	movs	r2, #0
 80007c6:	e9c5 3200 	strd	r3, r2, [r5]
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d905      	bls.n	80007de <__udivmoddi4+0xb6>
 80007d2:	b10d      	cbz	r5, 80007d8 <__udivmoddi4+0xb0>
 80007d4:	e9c5 0100 	strd	r0, r1, [r5]
 80007d8:	2100      	movs	r1, #0
 80007da:	4608      	mov	r0, r1
 80007dc:	e7f5      	b.n	80007ca <__udivmoddi4+0xa2>
 80007de:	fab3 f183 	clz	r1, r3
 80007e2:	2900      	cmp	r1, #0
 80007e4:	d146      	bne.n	8000874 <__udivmoddi4+0x14c>
 80007e6:	4573      	cmp	r3, lr
 80007e8:	d302      	bcc.n	80007f0 <__udivmoddi4+0xc8>
 80007ea:	4282      	cmp	r2, r0
 80007ec:	f200 8105 	bhi.w	80009fa <__udivmoddi4+0x2d2>
 80007f0:	1a84      	subs	r4, r0, r2
 80007f2:	eb6e 0203 	sbc.w	r2, lr, r3
 80007f6:	2001      	movs	r0, #1
 80007f8:	4690      	mov	r8, r2
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d0e5      	beq.n	80007ca <__udivmoddi4+0xa2>
 80007fe:	e9c5 4800 	strd	r4, r8, [r5]
 8000802:	e7e2      	b.n	80007ca <__udivmoddi4+0xa2>
 8000804:	2a00      	cmp	r2, #0
 8000806:	f000 8090 	beq.w	800092a <__udivmoddi4+0x202>
 800080a:	fab2 f682 	clz	r6, r2
 800080e:	2e00      	cmp	r6, #0
 8000810:	f040 80a4 	bne.w	800095c <__udivmoddi4+0x234>
 8000814:	1a8a      	subs	r2, r1, r2
 8000816:	0c03      	lsrs	r3, r0, #16
 8000818:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800081c:	b280      	uxth	r0, r0
 800081e:	b2bc      	uxth	r4, r7
 8000820:	2101      	movs	r1, #1
 8000822:	fbb2 fcfe 	udiv	ip, r2, lr
 8000826:	fb0e 221c 	mls	r2, lr, ip, r2
 800082a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800082e:	fb04 f20c 	mul.w	r2, r4, ip
 8000832:	429a      	cmp	r2, r3
 8000834:	d907      	bls.n	8000846 <__udivmoddi4+0x11e>
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	f10c 38ff 	add.w	r8, ip, #4294967295
 800083c:	d202      	bcs.n	8000844 <__udivmoddi4+0x11c>
 800083e:	429a      	cmp	r2, r3
 8000840:	f200 80e0 	bhi.w	8000a04 <__udivmoddi4+0x2dc>
 8000844:	46c4      	mov	ip, r8
 8000846:	1a9b      	subs	r3, r3, r2
 8000848:	fbb3 f2fe 	udiv	r2, r3, lr
 800084c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000850:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000854:	fb02 f404 	mul.w	r4, r2, r4
 8000858:	429c      	cmp	r4, r3
 800085a:	d907      	bls.n	800086c <__udivmoddi4+0x144>
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000862:	d202      	bcs.n	800086a <__udivmoddi4+0x142>
 8000864:	429c      	cmp	r4, r3
 8000866:	f200 80ca 	bhi.w	80009fe <__udivmoddi4+0x2d6>
 800086a:	4602      	mov	r2, r0
 800086c:	1b1b      	subs	r3, r3, r4
 800086e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000872:	e7a5      	b.n	80007c0 <__udivmoddi4+0x98>
 8000874:	f1c1 0620 	rsb	r6, r1, #32
 8000878:	408b      	lsls	r3, r1
 800087a:	fa22 f706 	lsr.w	r7, r2, r6
 800087e:	431f      	orrs	r7, r3
 8000880:	fa0e f401 	lsl.w	r4, lr, r1
 8000884:	fa20 f306 	lsr.w	r3, r0, r6
 8000888:	fa2e fe06 	lsr.w	lr, lr, r6
 800088c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000890:	4323      	orrs	r3, r4
 8000892:	fa00 f801 	lsl.w	r8, r0, r1
 8000896:	fa1f fc87 	uxth.w	ip, r7
 800089a:	fbbe f0f9 	udiv	r0, lr, r9
 800089e:	0c1c      	lsrs	r4, r3, #16
 80008a0:	fb09 ee10 	mls	lr, r9, r0, lr
 80008a4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80008a8:	fb00 fe0c 	mul.w	lr, r0, ip
 80008ac:	45a6      	cmp	lr, r4
 80008ae:	fa02 f201 	lsl.w	r2, r2, r1
 80008b2:	d909      	bls.n	80008c8 <__udivmoddi4+0x1a0>
 80008b4:	193c      	adds	r4, r7, r4
 80008b6:	f100 3aff 	add.w	sl, r0, #4294967295
 80008ba:	f080 809c 	bcs.w	80009f6 <__udivmoddi4+0x2ce>
 80008be:	45a6      	cmp	lr, r4
 80008c0:	f240 8099 	bls.w	80009f6 <__udivmoddi4+0x2ce>
 80008c4:	3802      	subs	r0, #2
 80008c6:	443c      	add	r4, r7
 80008c8:	eba4 040e 	sub.w	r4, r4, lr
 80008cc:	fa1f fe83 	uxth.w	lr, r3
 80008d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008d4:	fb09 4413 	mls	r4, r9, r3, r4
 80008d8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008dc:	fb03 fc0c 	mul.w	ip, r3, ip
 80008e0:	45a4      	cmp	ip, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x1ce>
 80008e4:	193c      	adds	r4, r7, r4
 80008e6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008ea:	f080 8082 	bcs.w	80009f2 <__udivmoddi4+0x2ca>
 80008ee:	45a4      	cmp	ip, r4
 80008f0:	d97f      	bls.n	80009f2 <__udivmoddi4+0x2ca>
 80008f2:	3b02      	subs	r3, #2
 80008f4:	443c      	add	r4, r7
 80008f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008fa:	eba4 040c 	sub.w	r4, r4, ip
 80008fe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000902:	4564      	cmp	r4, ip
 8000904:	4673      	mov	r3, lr
 8000906:	46e1      	mov	r9, ip
 8000908:	d362      	bcc.n	80009d0 <__udivmoddi4+0x2a8>
 800090a:	d05f      	beq.n	80009cc <__udivmoddi4+0x2a4>
 800090c:	b15d      	cbz	r5, 8000926 <__udivmoddi4+0x1fe>
 800090e:	ebb8 0203 	subs.w	r2, r8, r3
 8000912:	eb64 0409 	sbc.w	r4, r4, r9
 8000916:	fa04 f606 	lsl.w	r6, r4, r6
 800091a:	fa22 f301 	lsr.w	r3, r2, r1
 800091e:	431e      	orrs	r6, r3
 8000920:	40cc      	lsrs	r4, r1
 8000922:	e9c5 6400 	strd	r6, r4, [r5]
 8000926:	2100      	movs	r1, #0
 8000928:	e74f      	b.n	80007ca <__udivmoddi4+0xa2>
 800092a:	fbb1 fcf2 	udiv	ip, r1, r2
 800092e:	0c01      	lsrs	r1, r0, #16
 8000930:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000934:	b280      	uxth	r0, r0
 8000936:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800093a:	463b      	mov	r3, r7
 800093c:	4638      	mov	r0, r7
 800093e:	463c      	mov	r4, r7
 8000940:	46b8      	mov	r8, r7
 8000942:	46be      	mov	lr, r7
 8000944:	2620      	movs	r6, #32
 8000946:	fbb1 f1f7 	udiv	r1, r1, r7
 800094a:	eba2 0208 	sub.w	r2, r2, r8
 800094e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000952:	e766      	b.n	8000822 <__udivmoddi4+0xfa>
 8000954:	4601      	mov	r1, r0
 8000956:	e718      	b.n	800078a <__udivmoddi4+0x62>
 8000958:	4610      	mov	r0, r2
 800095a:	e72c      	b.n	80007b6 <__udivmoddi4+0x8e>
 800095c:	f1c6 0220 	rsb	r2, r6, #32
 8000960:	fa2e f302 	lsr.w	r3, lr, r2
 8000964:	40b7      	lsls	r7, r6
 8000966:	40b1      	lsls	r1, r6
 8000968:	fa20 f202 	lsr.w	r2, r0, r2
 800096c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000970:	430a      	orrs	r2, r1
 8000972:	fbb3 f8fe 	udiv	r8, r3, lr
 8000976:	b2bc      	uxth	r4, r7
 8000978:	fb0e 3318 	mls	r3, lr, r8, r3
 800097c:	0c11      	lsrs	r1, r2, #16
 800097e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000982:	fb08 f904 	mul.w	r9, r8, r4
 8000986:	40b0      	lsls	r0, r6
 8000988:	4589      	cmp	r9, r1
 800098a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800098e:	b280      	uxth	r0, r0
 8000990:	d93e      	bls.n	8000a10 <__udivmoddi4+0x2e8>
 8000992:	1879      	adds	r1, r7, r1
 8000994:	f108 3cff 	add.w	ip, r8, #4294967295
 8000998:	d201      	bcs.n	800099e <__udivmoddi4+0x276>
 800099a:	4589      	cmp	r9, r1
 800099c:	d81f      	bhi.n	80009de <__udivmoddi4+0x2b6>
 800099e:	eba1 0109 	sub.w	r1, r1, r9
 80009a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009a6:	fb09 f804 	mul.w	r8, r9, r4
 80009aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80009ae:	b292      	uxth	r2, r2
 80009b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009b4:	4542      	cmp	r2, r8
 80009b6:	d229      	bcs.n	8000a0c <__udivmoddi4+0x2e4>
 80009b8:	18ba      	adds	r2, r7, r2
 80009ba:	f109 31ff 	add.w	r1, r9, #4294967295
 80009be:	d2c4      	bcs.n	800094a <__udivmoddi4+0x222>
 80009c0:	4542      	cmp	r2, r8
 80009c2:	d2c2      	bcs.n	800094a <__udivmoddi4+0x222>
 80009c4:	f1a9 0102 	sub.w	r1, r9, #2
 80009c8:	443a      	add	r2, r7
 80009ca:	e7be      	b.n	800094a <__udivmoddi4+0x222>
 80009cc:	45f0      	cmp	r8, lr
 80009ce:	d29d      	bcs.n	800090c <__udivmoddi4+0x1e4>
 80009d0:	ebbe 0302 	subs.w	r3, lr, r2
 80009d4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009d8:	3801      	subs	r0, #1
 80009da:	46e1      	mov	r9, ip
 80009dc:	e796      	b.n	800090c <__udivmoddi4+0x1e4>
 80009de:	eba7 0909 	sub.w	r9, r7, r9
 80009e2:	4449      	add	r1, r9
 80009e4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009e8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ec:	fb09 f804 	mul.w	r8, r9, r4
 80009f0:	e7db      	b.n	80009aa <__udivmoddi4+0x282>
 80009f2:	4673      	mov	r3, lr
 80009f4:	e77f      	b.n	80008f6 <__udivmoddi4+0x1ce>
 80009f6:	4650      	mov	r0, sl
 80009f8:	e766      	b.n	80008c8 <__udivmoddi4+0x1a0>
 80009fa:	4608      	mov	r0, r1
 80009fc:	e6fd      	b.n	80007fa <__udivmoddi4+0xd2>
 80009fe:	443b      	add	r3, r7
 8000a00:	3a02      	subs	r2, #2
 8000a02:	e733      	b.n	800086c <__udivmoddi4+0x144>
 8000a04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a08:	443b      	add	r3, r7
 8000a0a:	e71c      	b.n	8000846 <__udivmoddi4+0x11e>
 8000a0c:	4649      	mov	r1, r9
 8000a0e:	e79c      	b.n	800094a <__udivmoddi4+0x222>
 8000a10:	eba1 0109 	sub.w	r1, r1, r9
 8000a14:	46c4      	mov	ip, r8
 8000a16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a1a:	fb09 f804 	mul.w	r8, r9, r4
 8000a1e:	e7c4      	b.n	80009aa <__udivmoddi4+0x282>

08000a20 <__aeabi_idiv0>:
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000a24:	4901      	ldr	r1, [pc, #4]	@ (8000a2c <vApplicationIdleHook+0x8>)
 8000a26:	2000      	movs	r0, #0
 8000a28:	f00d be8c 	b.w	800e744 <vTaskSetApplicationTaskTag>
 8000a2c:	08002505 	.word	0x08002505

08000a30 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	RxData[Size] = '\0';

	if(osMessageQueueGetSpace(uartQueueHandle)>0){
 8000a34:	4d12      	ldr	r5, [pc, #72]	@ (8000a80 <HAL_UARTEx_RxEventCallback+0x50>)
	RxData[Size] = '\0';
 8000a36:	2700      	movs	r7, #0
 8000a38:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 8000a88 <HAL_UARTEx_RxEventCallback+0x58>
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000a3c:	460c      	mov	r4, r1
	if(osMessageQueueGetSpace(uartQueueHandle)>0){
 8000a3e:	6828      	ldr	r0, [r5, #0]
	RxData[Size] = '\0';
 8000a40:	f809 7001 	strb.w	r7, [r9, r1]
	if(osMessageQueueGetSpace(uartQueueHandle)>0){
 8000a44:	f00c fafa 	bl	800d03c <osMessageQueueGetSpace>
 8000a48:	b188      	cbz	r0, 8000a6e <HAL_UARTEx_RxEventCallback+0x3e>

		strncpy (data->Data,(char *)RxData,Size+1);
 8000a4a:	4e0e      	ldr	r6, [pc, #56]	@ (8000a84 <HAL_UARTEx_RxEventCallback+0x54>)
 8000a4c:	3401      	adds	r4, #1
 8000a4e:	4649      	mov	r1, r9
 8000a50:	f8d6 8000 	ldr.w	r8, [r6]
 8000a54:	4622      	mov	r2, r4
 8000a56:	f108 0004 	add.w	r0, r8, #4
 8000a5a:	f023 f8db 	bl	8023c14 <strncpy>
		data->size = Size+1;
		osMessageQueuePut(uartQueueHandle, &data, 0, 0);
 8000a5e:	463b      	mov	r3, r7
 8000a60:	463a      	mov	r2, r7
 8000a62:	4631      	mov	r1, r6
 8000a64:	6828      	ldr	r0, [r5, #0]
		data->size = Size+1;
 8000a66:	f8c8 4000 	str.w	r4, [r8]
		osMessageQueuePut(uartQueueHandle, &data, 0, 0);
 8000a6a:	f00c fa84 	bl	800cf76 <osMessageQueuePut>


	}

	HAL_UARTEx_ReceiveToIdle_IT(&huart1,RxData,256);
 8000a6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a72:	4905      	ldr	r1, [pc, #20]	@ (8000a88 <HAL_UARTEx_RxEventCallback+0x58>)
 8000a74:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <HAL_UARTEx_RxEventCallback+0x5c>)


}
 8000a76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_UARTEx_ReceiveToIdle_IT(&huart1,RxData,256);
 8000a7a:	f00b bfe9 	b.w	800ca50 <HAL_UARTEx_ReceiveToIdle_IT>
 8000a7e:	bf00      	nop
 8000a80:	2400998c 	.word	0x2400998c
 8000a84:	24009d2c 	.word	0x24009d2c
 8000a88:	24009d30 	.word	0x24009d30
 8000a8c:	240099cc 	.word	0x240099cc

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a92:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a94:	224c      	movs	r2, #76	@ 0x4c
 8000a96:	2100      	movs	r1, #0
 8000a98:	a809      	add	r0, sp, #36	@ 0x24
 8000a9a:	f023 f8a1 	bl	8023be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	a801      	add	r0, sp, #4
 8000aa4:	f023 f89c 	bl	8023be0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000aa8:	2004      	movs	r0, #4
 8000aaa:	f008 fe45 	bl	8009738 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aae:	2300      	movs	r3, #0
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	4b26      	ldr	r3, [pc, #152]	@ (8000b4c <SystemClock_Config+0xbc>)
 8000ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ab6:	f022 0201 	bic.w	r2, r2, #1
 8000aba:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	4b22      	ldr	r3, [pc, #136]	@ (8000b50 <SystemClock_Config+0xc0>)
 8000ac6:	699a      	ldr	r2, [r3, #24]
 8000ac8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000acc:	619a      	str	r2, [r3, #24]
 8000ace:	699a      	ldr	r2, [r3, #24]
 8000ad0:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000ad4:	9200      	str	r2, [sp, #0]
 8000ad6:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ad8:	699a      	ldr	r2, [r3, #24]
 8000ada:	0491      	lsls	r1, r2, #18
 8000adc:	d5fc      	bpl.n	8000ad8 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ade:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ae2:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae4:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000ae6:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aea:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aec:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aee:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af0:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000afa:	23a0      	movs	r3, #160	@ 0xa0
 8000afc:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b00:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b02:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b06:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b0a:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b0e:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b10:	f009 f90c 	bl	8009d2c <HAL_RCC_OscConfig>
 8000b14:	b108      	cbz	r0, 8000b1a <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b16:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1c:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b26:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b2a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b2c:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b30:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b34:	f009 fc92 	bl	800a45c <HAL_RCC_ClockConfig>
 8000b38:	4601      	mov	r1, r0
 8000b3a:	b108      	cbz	r0, 8000b40 <SystemClock_Config+0xb0>
 8000b3c:	b672      	cpsid	i
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000b40:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b44:	f009 fb9a 	bl	800a27c <HAL_RCC_MCOConfig>
}
 8000b48:	b01d      	add	sp, #116	@ 0x74
 8000b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b4c:	58000400 	.word	0x58000400
 8000b50:	58024800 	.word	0x58024800

08000b54 <main>:
{
 8000b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b58:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b5a:	2210      	movs	r2, #16
 8000b5c:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b5e:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b60:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000b62:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b64:	f023 f83c 	bl	8023be0 <memset>
  HAL_MPU_Disable();
 8000b68:	f005 fe4a 	bl	8006800 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000b6c:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 8000b70:	4bbe      	ldr	r3, [pc, #760]	@ (8000e6c <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b72:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b74:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b78:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000b7a:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b7e:	f005 fe5d 	bl	800683c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000b82:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b84:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b86:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000b8a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b8e:	f005 fe55 	bl	800683c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b92:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b94:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000b96:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b9a:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000b9e:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000ba2:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000ba4:	2318      	movs	r3, #24
 8000ba6:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000baa:	f005 fe47 	bl	800683c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000bae:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bb0:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000bb2:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000bb6:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000bba:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000bbc:	2312      	movs	r3, #18
 8000bbe:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bc8:	f005 fe38 	bl	800683c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000bcc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bd0:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000bd2:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000bd6:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000bd8:	2311      	movs	r3, #17
 8000bda:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bde:	f005 fe2d 	bl	800683c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000be2:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000be4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000be6:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000bea:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000bee:	4ba0      	ldr	r3, [pc, #640]	@ (8000e70 <main+0x31c>)
 8000bf0:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000bf2:	230e      	movs	r3, #14
 8000bf4:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bf8:	f005 fe20 	bl	800683c <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bfc:	4628      	mov	r0, r5
 8000bfe:	f005 fe0d 	bl	800681c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c02:	4b9c      	ldr	r3, [pc, #624]	@ (8000e74 <main+0x320>)
 8000c04:	695a      	ldr	r2, [r3, #20]
 8000c06:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000c0a:	d111      	bne.n	8000c30 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c10:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c14:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c1c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c20:	695a      	ldr	r2, [r3, #20]
 8000c22:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000c26:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c2c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c30:	4a90      	ldr	r2, [pc, #576]	@ (8000e74 <main+0x320>)
 8000c32:	6953      	ldr	r3, [r2, #20]
 8000c34:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000c38:	d123      	bne.n	8000c82 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000c3a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c3e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c42:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c46:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c4a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c4e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000c52:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c54:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c58:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c5a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c5e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c60:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8000c64:	d2f9      	bcs.n	8000c5a <main+0x106>
    } while(sets-- != 0U);
 8000c66:	3b20      	subs	r3, #32
 8000c68:	f113 0f20 	cmn.w	r3, #32
 8000c6c:	d1f2      	bne.n	8000c54 <main+0x100>
 8000c6e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c72:	6953      	ldr	r3, [r2, #20]
 8000c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c78:	6153      	str	r3, [r2, #20]
 8000c7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c7e:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 8000c82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c86:	4d7c      	ldr	r5, [pc, #496]	@ (8000e78 <main+0x324>)
 8000c88:	682c      	ldr	r4, [r5, #0]
 8000c8a:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000c8e:	f000 8325 	beq.w	80012dc <main+0x788>
 8000c92:	3b01      	subs	r3, #1
 8000c94:	d2f8      	bcs.n	8000c88 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c96:	b672      	cpsid	i
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <main+0x144>
 8000c9a:	b672      	cpsid	i
 8000c9c:	e7fe      	b.n	8000c9c <main+0x148>
  hqspi.Instance = QUADSPI;
 8000c9e:	4877      	ldr	r0, [pc, #476]	@ (8000e7c <main+0x328>)
 8000ca0:	4a77      	ldr	r2, [pc, #476]	@ (8000e80 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ca2:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000ca4:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000ca6:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000caa:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cae:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cb2:	f008 fe5d 	bl	8009970 <HAL_QSPI_Init>
 8000cb6:	b108      	cbz	r0, 8000cbc <main+0x168>
 8000cb8:	b672      	cpsid	i
  while (1)
 8000cba:	e7fe      	b.n	8000cba <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000cbc:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000cc0:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000cc2:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000cc6:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000cca:	f005 f879 	bl	8005dc0 <BSP_QSPI_Init>
 8000cce:	b108      	cbz	r0, 8000cd4 <main+0x180>
 8000cd0:	b672      	cpsid	i
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000cd4:	f005 f820 	bl	8005d18 <BSP_QSPI_EnableMemoryMappedMode>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	b108      	cbz	r0, 8000ce0 <main+0x18c>
 8000cdc:	b672      	cpsid	i
  while (1)
 8000cde:	e7fe      	b.n	8000cde <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000ce0:	4868      	ldr	r0, [pc, #416]	@ (8000e84 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000ce2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ce6:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000e90 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 8000cea:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000cee:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000cf2:	f005 ffd5 	bl	8006ca0 <HAL_DMA2D_Init>
 8000cf6:	4604      	mov	r4, r0
 8000cf8:	b108      	cbz	r0, 8000cfe <main+0x1aa>
 8000cfa:	b672      	cpsid	i
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000cfe:	4602      	mov	r2, r0
 8000d00:	4639      	mov	r1, r7
 8000d02:	4861      	ldr	r0, [pc, #388]	@ (8000e88 <main+0x334>)
 8000d04:	f006 feae 	bl	8007a64 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8000d08:	2014      	movs	r0, #20
 8000d0a:	f005 fcfd 	bl	8006708 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000d0e:	4639      	mov	r1, r7
 8000d10:	462a      	mov	r2, r5
 8000d12:	485d      	ldr	r0, [pc, #372]	@ (8000e88 <main+0x334>)
 8000d14:	f006 fea6 	bl	8007a64 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8000d18:	200a      	movs	r0, #10
 8000d1a:	f005 fcf5 	bl	8006708 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000d1e:	2224      	movs	r2, #36	@ 0x24
 8000d20:	4621      	mov	r1, r4
 8000d22:	a817      	add	r0, sp, #92	@ 0x5c
 8000d24:	f022 ff5c 	bl	8023be0 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000d28:	2218      	movs	r2, #24
 8000d2a:	4621      	mov	r1, r4
 8000d2c:	a811      	add	r0, sp, #68	@ 0x44
 8000d2e:	f022 ff57 	bl	8023be0 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8000d32:	2234      	movs	r2, #52	@ 0x34
 8000d34:	4621      	mov	r1, r4
 8000d36:	a82d      	add	r0, sp, #180	@ 0xb4
 8000d38:	f022 ff52 	bl	8023be0 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000d3c:	4621      	mov	r1, r4
 8000d3e:	222c      	movs	r2, #44	@ 0x2c
 8000d40:	a820      	add	r0, sp, #128	@ 0x80
 8000d42:	f022 ff4d 	bl	8023be0 <memset>
  hdsi.Instance = DSI;
 8000d46:	4f51      	ldr	r7, [pc, #324]	@ (8000e8c <main+0x338>)
 8000d48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000d4c:	a90e      	add	r1, sp, #56	@ 0x38
 8000d4e:	4638      	mov	r0, r7
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000d50:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000d52:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLNDIV = 119;
 8000d56:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000d58:	e9c7 8502 	strd	r8, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 8000d5c:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000d60:	f006 f8ea 	bl	8006f38 <HAL_DSI_Init>
 8000d64:	b108      	cbz	r0, 8000d6a <main+0x216>
 8000d66:	b672      	cpsid	i
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000d6a:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000d6e:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000d72:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000d76:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 8000d7a:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000d7c:	a917      	add	r1, sp, #92	@ 0x5c
 8000d7e:	4638      	mov	r0, r7
 8000d80:	f006 fb46 	bl	8007410 <HAL_DSI_ConfigHostTimeouts>
 8000d84:	b108      	cbz	r0, 8000d8a <main+0x236>
 8000d86:	b672      	cpsid	i
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000d8a:	2321      	movs	r3, #33	@ 0x21
 8000d8c:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d8e:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d90:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000d92:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d96:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000d98:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d9c:	4638      	mov	r0, r7
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d9e:	e9cd 6313 	strd	r6, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000da2:	f006 faf8 	bl	8007396 <HAL_DSI_ConfigPhyTimer>
 8000da6:	b108      	cbz	r0, 8000dac <main+0x258>
 8000da8:	b672      	cpsid	i
  while (1)
 8000daa:	e7fe      	b.n	8000daa <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000dac:	2104      	movs	r1, #4
 8000dae:	4837      	ldr	r0, [pc, #220]	@ (8000e8c <main+0x338>)
 8000db0:	f006 fae0 	bl	8007374 <HAL_DSI_ConfigFlowControl>
 8000db4:	b108      	cbz	r0, 8000dba <main+0x266>
 8000db6:	b672      	cpsid	i
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000dba:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000dbe:	4833      	ldr	r0, [pc, #204]	@ (8000e8c <main+0x338>)
 8000dc0:	f006 fcaf 	bl	8007722 <HAL_DSI_SetLowPowerRXFilter>
 8000dc4:	4601      	mov	r1, r0
 8000dc6:	b108      	cbz	r0, 8000dcc <main+0x278>
 8000dc8:	b672      	cpsid	i
  while (1)
 8000dca:	e7fe      	b.n	8000dca <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000dcc:	482f      	ldr	r0, [pc, #188]	@ (8000e8c <main+0x338>)
 8000dce:	f006 f851 	bl	8006e74 <HAL_DSI_ConfigErrorMonitor>
 8000dd2:	b108      	cbz	r0, 8000dd8 <main+0x284>
 8000dd4:	b672      	cpsid	i
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000dd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ddc:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000de0:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000de4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000de8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000dec:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000df0:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000df4:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000df8:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000dfc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000e00:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000e04:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000e08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e0c:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000e10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e14:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000e18:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000e1c:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000e1e:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000e22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000e26:	4819      	ldr	r0, [pc, #100]	@ (8000e8c <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000e28:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000e2c:	f006 fa6e 	bl	800730c <HAL_DSI_ConfigCommand>
 8000e30:	b108      	cbz	r0, 8000e36 <main+0x2e2>
 8000e32:	b672      	cpsid	i
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000e36:	2305      	movs	r3, #5
 8000e38:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000e3c:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000e3e:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000e40:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000e42:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000e44:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000e48:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000e4a:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000e4e:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000e50:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000e54:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000e58:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000e5c:	480b      	ldr	r0, [pc, #44]	@ (8000e8c <main+0x338>)
 8000e5e:	f006 f9e3 	bl	8007228 <HAL_DSI_ConfigAdaptedCommandMode>
 8000e62:	4601      	mov	r1, r0
 8000e64:	b1b0      	cbz	r0, 8000e94 <main+0x340>
 8000e66:	b672      	cpsid	i
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <main+0x314>
 8000e6a:	bf00      	nop
 8000e6c:	0300001b 	.word	0x0300001b
 8000e70:	10040000 	.word	0x10040000
 8000e74:	e000ed00 	.word	0xe000ed00
 8000e78:	58024400 	.word	0x58024400
 8000e7c:	24009a60 	.word	0x24009a60
 8000e80:	52005000 	.word	0x52005000
 8000e84:	24009ca0 	.word	0x24009ca0
 8000e88:	58021800 	.word	0x58021800
 8000e8c:	24009c84 	.word	0x24009c84
 8000e90:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000e94:	4877      	ldr	r0, [pc, #476]	@ (8001074 <main+0x520>)
 8000e96:	f006 f9b6 	bl	8007206 <HAL_DSI_SetGenericVCID>
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	b108      	cbz	r0, 8000ea2 <main+0x34e>
 8000e9e:	b672      	cpsid	i
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ea2:	2234      	movs	r2, #52	@ 0x34
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000ea8:	4d73      	ldr	r5, [pc, #460]	@ (8001078 <main+0x524>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000eaa:	f022 fe99 	bl	8023be0 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000eae:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 80010cc <main+0x578>
 8000eb2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000eb6:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000eba:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ebe:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000ec0:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000ec2:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000ec6:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000eca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ece:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000ed2:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000ed6:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000eda:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000ede:	f240 1893 	movw	r8, #403	@ 0x193
 8000ee2:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000ee6:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000eea:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000eee:	f008 f919 	bl	8009124 <HAL_LTDC_Init>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	b108      	cbz	r0, 8000efa <main+0x3a6>
 8000ef6:	b672      	cpsid	i
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000efa:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000efc:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8000efe:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000f02:	f8ad 20b0 	strh.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000f06:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000f0a:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000f0c:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.WindowX1 = 400;
 8000f10:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f14:	2107      	movs	r1, #7
 8000f16:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000f1a:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000f1e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f22:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000f24:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f28:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000f2a:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f2e:	f008 f9ae 	bl	800928e <HAL_LTDC_ConfigLayer>
 8000f32:	4604      	mov	r4, r0
 8000f34:	b108      	cbz	r0, 8000f3a <main+0x3e6>
 8000f36:	b672      	cpsid	i
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000f3a:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000f3c:	484d      	ldr	r0, [pc, #308]	@ (8001074 <main+0x520>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000f3e:	6993      	ldr	r3, [r2, #24]
 8000f40:	f023 0301 	bic.w	r3, r3, #1
 8000f44:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000f46:	f006 fac9 	bl	80074dc <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000f4a:	494c      	ldr	r1, [pc, #304]	@ (800107c <main+0x528>)
  IOCtx.GetTick     = BSP_GetTick;
 8000f4c:	4b4c      	ldr	r3, [pc, #304]	@ (8001080 <main+0x52c>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000f4e:	484d      	ldr	r0, [pc, #308]	@ (8001084 <main+0x530>)
  IOCtx.GetTick     = BSP_GetTick;
 8000f50:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000f52:	4b4d      	ldr	r3, [pc, #308]	@ (8001088 <main+0x534>)
  IOCtx.Address     = 0;
 8000f54:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000f56:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000f58:	4b4c      	ldr	r3, [pc, #304]	@ (800108c <main+0x538>)
 8000f5a:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000f5c:	f004 fcd2 	bl	8005904 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000f60:	4632      	mov	r2, r6
 8000f62:	4621      	mov	r1, r4
 8000f64:	4847      	ldr	r0, [pc, #284]	@ (8001084 <main+0x530>)
 8000f66:	f004 f93d 	bl	80051e4 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000f6a:	2328      	movs	r3, #40	@ 0x28
 8000f6c:	2215      	movs	r2, #21
 8000f6e:	4621      	mov	r1, r4
 8000f70:	4840      	ldr	r0, [pc, #256]	@ (8001074 <main+0x520>)
 8000f72:	9400      	str	r4, [sp, #0]
 8000f74:	f006 fae5 	bl	8007542 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000f78:	a92d      	add	r1, sp, #180	@ 0xb4
 8000f7a:	483e      	ldr	r0, [pc, #248]	@ (8001074 <main+0x520>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000f7c:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000f7e:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000f82:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000f86:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000f8a:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000f8e:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000f92:	f006 f9bb 	bl	800730c <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000f96:	4622      	mov	r2, r4
 8000f98:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	f008 f9a3 	bl	80092e8 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000fa2:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000fa4:	483a      	ldr	r0, [pc, #232]	@ (8001090 <main+0x53c>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000fa6:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fa8:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000fb0:	4b38      	ldr	r3, [pc, #224]	@ (8001094 <main+0x540>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fb2:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000fb4:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fb6:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fba:	f005 fc6b 	bl	8006894 <HAL_CRC_Init>
 8000fbe:	b108      	cbz	r0, 8000fc4 <main+0x470>
 8000fc0:	b672      	cpsid	i
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000fc4:	4834      	ldr	r0, [pc, #208]	@ (8001098 <main+0x544>)
 8000fc6:	4b35      	ldr	r3, [pc, #212]	@ (800109c <main+0x548>)
 8000fc8:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000fca:	f007 faa5 	bl	8008518 <HAL_JPEG_Init>
 8000fce:	b108      	cbz	r0, 8000fd4 <main+0x480>
 8000fd0:	b672      	cpsid	i
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <main+0x47e>
  huart1.Instance = USART1;
 8000fd4:	4c32      	ldr	r4, [pc, #200]	@ (80010a0 <main+0x54c>)
  huart1.Init.BaudRate = 115200;
 8000fd6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000fda:	4932      	ldr	r1, [pc, #200]	@ (80010a4 <main+0x550>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fdc:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fde:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 8000fe0:	e9c4 1300 	strd	r1, r3, [r4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe4:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe6:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fea:	6123      	str	r3, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fec:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff0:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff4:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff8:	f00b fbf0 	bl	800c7dc <HAL_UART_Init>
 8000ffc:	4601      	mov	r1, r0
 8000ffe:	b108      	cbz	r0, 8001004 <main+0x4b0>
 8001000:	b672      	cpsid	i
  while (1)
 8001002:	e7fe      	b.n	8001002 <main+0x4ae>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001004:	4620      	mov	r0, r4
 8001006:	f00b fce3 	bl	800c9d0 <HAL_UARTEx_SetTxFifoThreshold>
 800100a:	4601      	mov	r1, r0
 800100c:	b108      	cbz	r0, 8001012 <main+0x4be>
 800100e:	b672      	cpsid	i
  while (1)
 8001010:	e7fe      	b.n	8001010 <main+0x4bc>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001012:	4620      	mov	r0, r4
 8001014:	f00b fcfc 	bl	800ca10 <HAL_UARTEx_SetRxFifoThreshold>
 8001018:	b108      	cbz	r0, 800101e <main+0x4ca>
 800101a:	b672      	cpsid	i
  while (1)
 800101c:	e7fe      	b.n	800101c <main+0x4c8>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800101e:	4620      	mov	r0, r4
 8001020:	f00b fcbb 	bl	800c99a <HAL_UARTEx_DisableFifoMode>
 8001024:	4605      	mov	r5, r0
 8001026:	b108      	cbz	r0, 800102c <main+0x4d8>
 8001028:	b672      	cpsid	i
  while (1)
 800102a:	e7fe      	b.n	800102a <main+0x4d6>
  MX_TouchGFX_Init();
 800102c:	f000 fdfc 	bl	8001c28 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8001030:	f000 fdf9 	bl	8001c26 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8001034:	f00b fdd2 	bl	800cbdc <osKernelInitialize>
  uartQueueHandle = osMessageQueueNew (2, sizeof(uint16_t), &uartQueue_attributes);
 8001038:	2102      	movs	r1, #2
 800103a:	4a1b      	ldr	r2, [pc, #108]	@ (80010a8 <main+0x554>)
 800103c:	4608      	mov	r0, r1
 800103e:	f00b ff5f 	bl	800cf00 <osMessageQueueNew>
 8001042:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <main+0x558>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001044:	4a1a      	ldr	r2, [pc, #104]	@ (80010b0 <main+0x55c>)
 8001046:	4629      	mov	r1, r5
  uartQueueHandle = osMessageQueueNew (2, sizeof(uint16_t), &uartQueue_attributes);
 8001048:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800104a:	481a      	ldr	r0, [pc, #104]	@ (80010b4 <main+0x560>)
 800104c:	f00b fdf2 	bl	800cc34 <osThreadNew>
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <main+0x564>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001052:	4a1a      	ldr	r2, [pc, #104]	@ (80010bc <main+0x568>)
 8001054:	4629      	mov	r1, r5
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001056:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001058:	4819      	ldr	r0, [pc, #100]	@ (80010c0 <main+0x56c>)
 800105a:	f00b fdeb 	bl	800cc34 <osThreadNew>
 800105e:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <main+0x570>)
	HAL_UARTEx_ReceiveToIdle_IT(&huart1,RxData,256);
 8001060:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001064:	4918      	ldr	r1, [pc, #96]	@ (80010c8 <main+0x574>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001066:	6018      	str	r0, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1,RxData,256);
 8001068:	4620      	mov	r0, r4
 800106a:	f00b fcf1 	bl	800ca50 <HAL_UARTEx_ReceiveToIdle_IT>
  osKernelStart();
 800106e:	f00b fdc7 	bl	800cc00 <osKernelStart>
  while (1)
 8001072:	e7fe      	b.n	8001072 <main+0x51e>
 8001074:	24009c84 	.word	0x24009c84
 8001078:	24009aac 	.word	0x24009aac
 800107c:	2400995c 	.word	0x2400995c
 8001080:	08005ce9 	.word	0x08005ce9
 8001084:	2400996c 	.word	0x2400996c
 8001088:	080021fd 	.word	0x080021fd
 800108c:	08002235 	.word	0x08002235
 8001090:	24009d08 	.word	0x24009d08
 8001094:	58024c00 	.word	0x58024c00
 8001098:	24009c2c 	.word	0x24009c2c
 800109c:	52003000 	.word	0x52003000
 80010a0:	240099cc 	.word	0x240099cc
 80010a4:	40011000 	.word	0x40011000
 80010a8:	0802664c 	.word	0x0802664c
 80010ac:	2400998c 	.word	0x2400998c
 80010b0:	08026688 	.word	0x08026688
 80010b4:	08001c37 	.word	0x08001c37
 80010b8:	24009994 	.word	0x24009994
 80010bc:	08026664 	.word	0x08026664
 80010c0:	08003d91 	.word	0x08003d91
 80010c4:	24009990 	.word	0x24009990
 80010c8:	24009d30 	.word	0x24009d30
 80010cc:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	2214      	movs	r2, #20
 80010d2:	2100      	movs	r1, #0
 80010d4:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d6:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f022 fd82 	bl	8023be0 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010dc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80010ea:	488d      	ldr	r0, [pc, #564]	@ (8001320 <main+0x7cc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	f04f 0900 	mov.w	r9, #0
 80010f0:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010f2:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010fa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001102:	2708      	movs	r7, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001108:	9304      	str	r3, [sp, #16]
 800110a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001118:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	9305      	str	r3, [sp, #20]
 8001122:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001124:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800112c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001130:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001138:	9306      	str	r3, [sp, #24]
 800113a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800113c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001148:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	9307      	str	r3, [sp, #28]
 8001152:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001154:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800115c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001160:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001168:	9308      	str	r3, [sp, #32]
 800116a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001178:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	9309      	str	r3, [sp, #36]	@ 0x24
 8001182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001184:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001188:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800118c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001190:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001194:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001198:	930a      	str	r3, [sp, #40]	@ 0x28
 800119a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80011a8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80011b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80011c0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80011ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011cc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80011d8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011dc:	f003 0320 	and.w	r3, r3, #32
 80011e0:	930d      	str	r3, [sp, #52]	@ 0x34
 80011e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80011e4:	f006 fc3e 	bl	8007a64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2108      	movs	r1, #8
 80011ec:	484d      	ldr	r0, [pc, #308]	@ (8001324 <main+0x7d0>)
 80011ee:	f006 fc39 	bl	8007a64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f8:	484b      	ldr	r0, [pc, #300]	@ (8001328 <main+0x7d4>)
 80011fa:	f006 fc33 	bl	8007a64 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001202:	a92d      	add	r1, sp, #180	@ 0xb4
 8001204:	4846      	ldr	r0, [pc, #280]	@ (8001320 <main+0x7cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800120e:	f006 fa9f 	bl	8007750 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	a92d      	add	r1, sp, #180	@ 0xb4
 8001214:	4845      	ldr	r0, [pc, #276]	@ (800132c <main+0x7d8>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001216:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	e9cd 992f 	strd	r9, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f006 fa95 	bl	8007750 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001226:	a92d      	add	r1, sp, #180	@ 0xb4
 8001228:	483e      	ldr	r0, [pc, #248]	@ (8001324 <main+0x7d0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	e9cd 562f 	strd	r5, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001232:	f006 fa8d 	bl	8007750 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8001236:	a92d      	add	r1, sp, #180	@ 0xb4
 8001238:	483b      	ldr	r0, [pc, #236]	@ (8001328 <main+0x7d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8001242:	f006 fa85 	bl	8007750 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001246:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 800124a:	464a      	mov	r2, r9
 800124c:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 800124e:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8001250:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001252:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001256:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 800125a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800125e:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001260:	402b      	ands	r3, r5
 8001262:	9303      	str	r3, [sp, #12]
 8001264:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8001266:	f005 fa79 	bl	800675c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800126a:	207a      	movs	r0, #122	@ 0x7a
 800126c:	f005 faa8 	bl	80067c0 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8001270:	4a2f      	ldr	r2, [pc, #188]	@ (8001330 <main+0x7dc>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001272:	4830      	ldr	r0, [pc, #192]	@ (8001334 <main+0x7e0>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001274:	a92d      	add	r1, sp, #180	@ 0xb4
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8001276:	6813      	ldr	r3, [r2, #0]
 8001278:	f023 0301 	bic.w	r3, r3, #1
 800127c:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800127e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001282:	4b2d      	ldr	r3, [pc, #180]	@ (8001338 <main+0x7e4>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001284:	f8c0 901c 	str.w	r9, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001288:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800128c:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 800128e:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001292:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001296:	2320      	movs	r3, #32
 8001298:	e9c0 8303 	strd	r8, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800129c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80012a0:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80012a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a8:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80012ac:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 80012ae:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  SdramTiming.SelfRefreshTime = 4;
 80012b2:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 80012b6:	e9cd 3630 	strd	r3, r6, [sp, #192]	@ 0xc0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80012ba:	f00a f9c1 	bl	800b640 <HAL_SDRAM_Init>
 80012be:	4681      	mov	r9, r0
 80012c0:	2800      	cmp	r0, #0
 80012c2:	f47f acea 	bne.w	8000c9a <main+0x146>
  BSP_SDRAM_DeInit(0);
 80012c6:	f004 ff35 	bl	8006134 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 80012ca:	4648      	mov	r0, r9
 80012cc:	f004 ff80 	bl	80061d0 <BSP_SDRAM_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2800      	cmp	r0, #0
 80012d4:	f43f ace3 	beq.w	8000c9e <main+0x14a>
 80012d8:	b672      	cpsid	i
  while (1)
 80012da:	e7fe      	b.n	80012da <main+0x786>
  HAL_Init();
 80012dc:	f005 f9d4 	bl	8006688 <HAL_Init>
  SystemClock_Config();
 80012e0:	f7ff fbd6 	bl	8000a90 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 80012e4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 80012e8:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 80012ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012ee:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80012f2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80012f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 80012fe:	f006 fbbf 	bl	8007a80 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8001302:	4621      	mov	r1, r4
 8001304:	4620      	mov	r0, r4
 8001306:	f006 fbc9 	bl	8007a9c <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800130a:	4c0c      	ldr	r4, [pc, #48]	@ (800133c <main+0x7e8>)
timeout = 0xFFFF;
 800130c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001310:	6822      	ldr	r2, [r4, #0]
 8001312:	0412      	lsls	r2, r2, #16
 8001314:	f53f aedc 	bmi.w	80010d0 <main+0x57c>
 8001318:	3b01      	subs	r3, #1
 800131a:	d2f9      	bcs.n	8001310 <main+0x7bc>
 800131c:	b672      	cpsid	i
  while (1)
 800131e:	e7fe      	b.n	800131e <main+0x7ca>
 8001320:	58022400 	.word	0x58022400
 8001324:	58021800 	.word	0x58021800
 8001328:	58021400 	.word	0x58021400
 800132c:	58020000 	.word	0x58020000
 8001330:	52004000 	.word	0x52004000
 8001334:	24009998 	.word	0x24009998
 8001338:	52004140 	.word	0x52004140
 800133c:	58024400 	.word	0x58024400

08001340 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6)
 8001340:	6802      	ldr	r2, [r0, #0]
 8001342:	4b03      	ldr	r3, [pc, #12]	@ (8001350 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001344:	429a      	cmp	r2, r3
 8001346:	d101      	bne.n	800134c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001348:	f005 b9cc 	b.w	80066e4 <HAL_IncTick>
}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40001000 	.word	0x40001000

08001354 <Error_Handler>:
 8001354:	b672      	cpsid	i
  while (1)
 8001356:	e7fe      	b.n	8001356 <Error_Handler+0x2>

08001358 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <HAL_MspInit+0x2c>)
{
 800135a:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800135c:	210f      	movs	r1, #15
 800135e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8001366:	f042 0202 	orr.w	r2, r2, #2
 800136a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800136e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001370:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800137e:	f005 b9ed 	b.w	800675c <HAL_NVIC_SetPriority>
 8001382:	bf00      	nop
 8001384:	58024400 	.word	0x58024400

08001388 <HAL_CRC_MspInit>:
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001388:	6802      	ldr	r2, [r0, #0]
{
 800138a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800138c:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <HAL_CRC_MspInit+0x2c>)
 800138e:	429a      	cmp	r2, r3
 8001390:	d10d      	bne.n	80013ae <HAL_CRC_MspInit+0x26>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001392:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001396:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800139a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800139e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80013ae:	b002      	add	sp, #8
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	58024c00 	.word	0x58024c00

080013b8 <HAL_DMA2D_MspInit>:
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80013b8:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <HAL_DMA2D_MspInit+0x40>)
{
 80013ba:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80013bc:	6802      	ldr	r2, [r0, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d117      	bne.n	80013f2 <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 80013c4:	2107      	movs	r1, #7
 80013c6:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013c8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80013cc:	f042 0210 	orr.w	r2, r2, #16
 80013d0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 80013d4:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 80013e2:	f005 f9bb 	bl	800675c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80013e6:	205a      	movs	r0, #90	@ 0x5a

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80013e8:	b003      	add	sp, #12
 80013ea:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80013ee:	f005 b9e7 	b.w	80067c0 <HAL_NVIC_EnableIRQ>
}
 80013f2:	b003      	add	sp, #12
 80013f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80013f8:	52001000 	.word	0x52001000
 80013fc:	58024400 	.word	0x58024400

08001400 <HAL_DSI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdsi: DSI handle pointer
  * @retval None
  */
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001400:	b510      	push	{r4, lr}
 8001402:	b0ba      	sub	sp, #232	@ 0xe8
 8001404:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	2214      	movs	r2, #20
 8001408:	2100      	movs	r1, #0
 800140a:	a803      	add	r0, sp, #12
 800140c:	f022 fbe8 	bl	8023be0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001410:	22c8      	movs	r2, #200	@ 0xc8
 8001412:	2100      	movs	r1, #0
 8001414:	a808      	add	r0, sp, #32
 8001416:	f022 fbe3 	bl	8023be0 <memset>
  if(hdsi->Instance==DSI)
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001420:	d138      	bne.n	8001494 <HAL_DSI_MspInit+0x94>

    /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001422:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001426:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001428:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800142a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142e:	f009 fa97 	bl	800a960 <HAL_RCCEx_PeriphCLKConfig>
 8001432:	b108      	cbz	r0, 8001438 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001434:	f7ff ff8e 	bl	8001354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001438:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800143c:	a903      	add	r1, sp, #12
 800143e:	4817      	ldr	r0, [pc, #92]	@ (800149c <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001440:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001444:	f042 0210 	orr.w	r2, r2, #16
 8001448:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800144c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001450:	f002 0210 	and.w	r2, r2, #16
 8001454:	9201      	str	r2, [sp, #4]
 8001456:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001458:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800145c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001460:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001478:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800147e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001480:	f006 f966 	bl	8007750 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001484:	207b      	movs	r0, #123	@ 0x7b
 8001486:	4622      	mov	r2, r4
 8001488:	2107      	movs	r1, #7
 800148a:	f005 f967 	bl	800675c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800148e:	207b      	movs	r0, #123	@ 0x7b
 8001490:	f005 f996 	bl	80067c0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DSI_MspInit 1 */

  }

}
 8001494:	b03a      	add	sp, #232	@ 0xe8
 8001496:	bd10      	pop	{r4, pc}
 8001498:	58024400 	.word	0x58024400
 800149c:	58022400 	.word	0x58022400

080014a0 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80014a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 80014a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001594 <HAL_JPEG_MspInit+0xf4>)
{
 80014a4:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 80014a6:	6802      	ldr	r2, [r0, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d170      	bne.n	800158e <HAL_JPEG_MspInit+0xee>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80014ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001598 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80014ae:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80014b0:	4c3a      	ldr	r4, [pc, #232]	@ (800159c <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80014b2:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 80014b6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80014ba:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 80015a8 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80014be:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 80014c0:	f042 0220 	orr.w	r2, r2, #32
 80014c4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80014c8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 80014ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80014d6:	2311      	movs	r3, #17
 80014d8:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80014dc:	2300      	movs	r3, #0
 80014de:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80014e2:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80014e6:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80014e8:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80014ea:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80014ee:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80014f2:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80014f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80014fa:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80014fe:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001502:	f007 ff4e 	bl	80093a2 <HAL_MDMA_Init>
 8001506:	b108      	cbz	r0, 800150c <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 8001508:	f7ff ff24 	bl	8001354 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 800150c:	2200      	movs	r2, #0
 800150e:	4823      	ldr	r0, [pc, #140]	@ (800159c <HAL_JPEG_MspInit+0xfc>)
 8001510:	4611      	mov	r1, r2
 8001512:	f007 ffd4 	bl	80094be <HAL_MDMA_ConfigPostRequestMask>
 8001516:	b108      	cbz	r0, 800151c <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 8001518:	f7ff ff1c 	bl	8001354 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800151c:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800151e:	2313      	movs	r3, #19
 8001520:	4a1f      	ldr	r2, [pc, #124]	@ (80015a0 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001522:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001524:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001526:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800152a:	4c1e      	ldr	r4, [pc, #120]	@ (80015a4 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800152c:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001530:	2300      	movs	r3, #0
 8001532:	22c0      	movs	r2, #192	@ 0xc0
 8001534:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001538:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800153a:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800153c:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001540:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001544:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001548:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800154c:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001550:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001552:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8001556:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800155a:	f007 ff22 	bl	80093a2 <HAL_MDMA_Init>
 800155e:	b108      	cbz	r0, 8001564 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 8001560:	f7ff fef8 	bl	8001354 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001564:	2200      	movs	r2, #0
 8001566:	480f      	ldr	r0, [pc, #60]	@ (80015a4 <HAL_JPEG_MspInit+0x104>)
 8001568:	4611      	mov	r1, r2
 800156a:	f007 ffa8 	bl	80094be <HAL_MDMA_ConfigPostRequestMask>
 800156e:	b108      	cbz	r0, 8001574 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 8001570:	f7ff fef0 	bl	8001354 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001574:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2105      	movs	r1, #5
 800157a:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 800157c:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800157e:	f005 f8ed 	bl	800675c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001582:	2079      	movs	r0, #121	@ 0x79

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001584:	b003      	add	sp, #12
 8001586:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800158a:	f005 b919 	b.w	80067c0 <HAL_NVIC_EnableIRQ>
}
 800158e:	b003      	add	sp, #12
 8001590:	bd30      	pop	{r4, r5, pc}
 8001592:	bf00      	nop
 8001594:	52003000 	.word	0x52003000
 8001598:	58024400 	.word	0x58024400
 800159c:	24009bc0 	.word	0x24009bc0
 80015a0:	520001c0 	.word	0x520001c0
 80015a4:	24009b54 	.word	0x24009b54
 80015a8:	52000200 	.word	0x52000200

080015ac <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80015ac:	b510      	push	{r4, lr}
 80015ae:	b0b4      	sub	sp, #208	@ 0xd0
 80015b0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b2:	22c8      	movs	r2, #200	@ 0xc8
 80015b4:	2100      	movs	r1, #0
 80015b6:	a802      	add	r0, sp, #8
 80015b8:	f022 fb12 	bl	8023be0 <memset>
  if(hltdc->Instance==LTDC)
 80015bc:	6822      	ldr	r2, [r4, #0]
 80015be:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <HAL_LTDC_MspInit+0x74>)
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d12b      	bne.n	800161c <HAL_LTDC_MspInit+0x70>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80015c4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80015c8:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80015ca:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015cc:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80015ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 80015d2:	23a1      	movs	r3, #161	@ 0xa1
 80015d4:	2205      	movs	r2, #5
 80015d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80015da:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80015dc:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80015e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015e4:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e8:	f009 f9ba 	bl	800a960 <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	b108      	cbz	r0, 80015f2 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 80015ee:	f7ff feb1 	bl	8001354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80015f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80015f4:	2058      	movs	r0, #88	@ 0x58
 80015f6:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 80015f8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80015fc:	f042 0208 	orr.w	r2, r2, #8
 8001600:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001604:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001606:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001612:	f005 f8a3 	bl	800675c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001616:	2058      	movs	r0, #88	@ 0x58
 8001618:	f005 f8d2 	bl	80067c0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800161c:	b034      	add	sp, #208	@ 0xd0
 800161e:	bd10      	pop	{r4, pc}
 8001620:	50001000 	.word	0x50001000
 8001624:	58024400 	.word	0x58024400

08001628 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162a:	b0bf      	sub	sp, #252	@ 0xfc
 800162c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	2214      	movs	r2, #20
 8001630:	2100      	movs	r1, #0
 8001632:	a807      	add	r0, sp, #28
 8001634:	f022 fad4 	bl	8023be0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001638:	22c8      	movs	r2, #200	@ 0xc8
 800163a:	2100      	movs	r1, #0
 800163c:	a80c      	add	r0, sp, #48	@ 0x30
 800163e:	f022 facf 	bl	8023be0 <memset>
  if(hqspi->Instance==QUADSPI)
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	4b53      	ldr	r3, [pc, #332]	@ (8001794 <HAL_QSPI_MspInit+0x16c>)
 8001646:	429a      	cmp	r2, r3
 8001648:	f040 80a1 	bne.w	800178e <HAL_QSPI_MspInit+0x166>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800164c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001650:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001652:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001654:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001658:	f009 f982 	bl	800a960 <HAL_RCCEx_PeriphCLKConfig>
 800165c:	b108      	cbz	r0, 8001662 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800165e:	f7ff fe79 	bl	8001354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001662:	4b4d      	ldr	r3, [pc, #308]	@ (8001798 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001668:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800166a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800166e:	a907      	add	r1, sp, #28
 8001670:	484a      	ldr	r0, [pc, #296]	@ (800179c <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001672:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001674:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001678:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800167c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001680:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001684:	9201      	str	r2, [sp, #4]
 8001686:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001688:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800168c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001690:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001694:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001698:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800169c:	9202      	str	r2, [sp, #8]
 800169e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016a4:	f042 0220 	orr.w	r2, r2, #32
 80016a8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80016ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016b0:	f002 0220 	and.w	r2, r2, #32
 80016b4:	9203      	str	r2, [sp, #12]
 80016b6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016c0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80016c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016c8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80016cc:	9204      	str	r2, [sp, #16]
 80016ce:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016d4:	f042 0202 	orr.w	r2, r2, #2
 80016d8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80016dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016e0:	f002 0202 	and.w	r2, r2, #2
 80016e4:	9205      	str	r2, [sp, #20]
 80016e6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016ec:	f042 0208 	orr.w	r2, r2, #8
 80016f0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	9306      	str	r3, [sp, #24]
 80016fe:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001704:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800170c:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800170e:	f006 f81f 	bl	8007750 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001712:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001714:	a907      	add	r1, sp, #28
 8001716:	4821      	ldr	r0, [pc, #132]	@ (800179c <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001718:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001722:	f006 f815 	bl	8007750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001726:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001728:	a907      	add	r1, sp, #28
 800172a:	481d      	ldr	r0, [pc, #116]	@ (80017a0 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800172c:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001736:	f006 f80b 	bl	8007750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800173a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800173e:	a907      	add	r1, sp, #28
 8001740:	4817      	ldr	r0, [pc, #92]	@ (80017a0 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001742:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800174c:	f006 f800 	bl	8007750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001750:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001752:	a907      	add	r1, sp, #28
 8001754:	4813      	ldr	r0, [pc, #76]	@ (80017a4 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001756:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001760:	f005 fff6 	bl	8007750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001764:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	a907      	add	r1, sp, #28
 8001768:	480f      	ldr	r0, [pc, #60]	@ (80017a8 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800176a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	f005 ffec 	bl	8007750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001778:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800177c:	a907      	add	r1, sp, #28
 800177e:	480b      	ldr	r0, [pc, #44]	@ (80017ac <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001780:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178a:	f005 ffe1 	bl	8007750 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800178e:	b03f      	add	sp, #252	@ 0xfc
 8001790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001792:	bf00      	nop
 8001794:	52005000 	.word	0x52005000
 8001798:	58024400 	.word	0x58024400
 800179c:	58021800 	.word	0x58021800
 80017a0:	58021400 	.word	0x58021400
 80017a4:	58021c00 	.word	0x58021c00
 80017a8:	58020400 	.word	0x58020400
 80017ac:	58020c00 	.word	0x58020c00

080017b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b0:	b510      	push	{r4, lr}
 80017b2:	b0ba      	sub	sp, #232	@ 0xe8
 80017b4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	2214      	movs	r2, #20
 80017b8:	2100      	movs	r1, #0
 80017ba:	a803      	add	r0, sp, #12
 80017bc:	f022 fa10 	bl	8023be0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017c0:	22c8      	movs	r2, #200	@ 0xc8
 80017c2:	2100      	movs	r1, #0
 80017c4:	a808      	add	r0, sp, #32
 80017c6:	f022 fa0b 	bl	8023be0 <memset>
  if(huart->Instance==USART1)
 80017ca:	6822      	ldr	r2, [r4, #0]
 80017cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <HAL_UART_MspInit+0x98>)
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d138      	bne.n	8001844 <HAL_UART_MspInit+0x94>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017d2:	2201      	movs	r2, #1
 80017d4:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d6:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017dc:	f009 f8c0 	bl	800a960 <HAL_RCCEx_PeriphCLKConfig>
 80017e0:	b108      	cbz	r0, 80017e6 <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 80017e2:	f7ff fdb7 	bl	8001354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <HAL_UART_MspInit+0x9c>)
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	a903      	add	r1, sp, #12
 80017ec:	4818      	ldr	r0, [pc, #96]	@ (8001850 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ee:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80017f2:	f042 0210 	orr.w	r2, r2, #16
 80017f6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80017fa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80017fe:	f002 0210 	and.w	r2, r2, #16
 8001802:	9201      	str	r2, [sp, #4]
 8001804:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	9302      	str	r3, [sp, #8]
 8001820:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001828:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800182e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f005 ff8e 	bl	8007750 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001834:	2025      	movs	r0, #37	@ 0x25
 8001836:	4622      	mov	r2, r4
 8001838:	2105      	movs	r1, #5
 800183a:	f004 ff8f 	bl	800675c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800183e:	2025      	movs	r0, #37	@ 0x25
 8001840:	f004 ffbe 	bl	80067c0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001844:	b03a      	add	sp, #232	@ 0xe8
 8001846:	bd10      	pop	{r4, pc}
 8001848:	40011000 	.word	0x40011000
 800184c:	58024400 	.word	0x58024400
 8001850:	58020000 	.word	0x58020000

08001854 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001856:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001858:	2100      	movs	r1, #0
 800185a:	2214      	movs	r2, #20
 800185c:	a801      	add	r0, sp, #4
 800185e:	f022 f9bf 	bl	8023be0 <memset>
  if (FMC_Initialized) {
 8001862:	4b3f      	ldr	r3, [pc, #252]	@ (8001960 <HAL_SDRAM_MspInit+0x10c>)
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	2900      	cmp	r1, #0
 8001868:	d177      	bne.n	800195a <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 800186a:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800186c:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 800186e:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001870:	22c0      	movs	r2, #192	@ 0xc0
 8001872:	f022 f9b5 	bl	8023be0 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001876:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800187a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187c:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800187e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001882:	f009 f86d 	bl	800a960 <HAL_RCCEx_PeriphCLKConfig>
 8001886:	b108      	cbz	r0, 800188c <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001888:	f7ff fd64 	bl	8001354 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 800188c:	4b35      	ldr	r3, [pc, #212]	@ (8001964 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2600      	movs	r6, #0
 8001892:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001894:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001898:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800189a:	a901      	add	r1, sp, #4
 800189c:	4832      	ldr	r0, [pc, #200]	@ (8001968 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800189e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80018a2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80018a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018aa:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80018ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018c0:	f005 ff46 	bl	8007750 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018c4:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c6:	a901      	add	r1, sp, #4
 80018c8:	4828      	ldr	r0, [pc, #160]	@ (800196c <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018ca:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	f005 ff3c 	bl	8007750 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80018d8:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018dc:	a901      	add	r1, sp, #4
 80018de:	4824      	ldr	r0, [pc, #144]	@ (8001970 <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018e0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ea:	f005 ff31 	bl	8007750 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 80018ee:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018f2:	a901      	add	r1, sp, #4
 80018f4:	481f      	ldr	r0, [pc, #124]	@ (8001974 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018f6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001900:	f005 ff26 	bl	8007750 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001904:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001908:	a901      	add	r1, sp, #4
 800190a:	481b      	ldr	r0, [pc, #108]	@ (8001978 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800190c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001916:	f005 ff1b 	bl	8007750 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800191a:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800191e:	a901      	add	r1, sp, #4
 8001920:	4816      	ldr	r0, [pc, #88]	@ (800197c <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001922:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192c:	f005 ff10 	bl	8007750 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001930:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001934:	a901      	add	r1, sp, #4
 8001936:	4812      	ldr	r0, [pc, #72]	@ (8001980 <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001938:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001942:	f005 ff05 	bl	8007750 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001946:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001948:	a901      	add	r1, sp, #4
 800194a:	480e      	ldr	r0, [pc, #56]	@ (8001984 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800194c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001956:	f005 fefb 	bl	8007750 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800195a:	b039      	add	sp, #228	@ 0xe4
 800195c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195e:	bf00      	nop
 8001960:	24009e38 	.word	0x24009e38
 8001964:	58024400 	.word	0x58024400
 8001968:	58022000 	.word	0x58022000
 800196c:	58020400 	.word	0x58020400
 8001970:	58021000 	.word	0x58021000
 8001974:	58021c00 	.word	0x58021c00
 8001978:	58021800 	.word	0x58021800
 800197c:	58020c00 	.word	0x58020c00
 8001980:	58021400 	.word	0x58021400
 8001984:	58020800 	.word	0x58020800

08001988 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001988:	4b1a      	ldr	r3, [pc, #104]	@ (80019f4 <HAL_SDRAM_MspDeInit+0x6c>)
 800198a:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 800198c:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 800198e:	bb82      	cbnz	r2, 80019f2 <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 8001990:	4a19      	ldr	r2, [pc, #100]	@ (80019f8 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 8001992:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001994:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 8001998:	4818      	ldr	r0, [pc, #96]	@ (80019fc <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 800199a:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 800199c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 80019a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019a4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80019a8:	f005 ffba 	bl	8007920 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 80019ac:	2160      	movs	r1, #96	@ 0x60
 80019ae:	4814      	ldr	r0, [pc, #80]	@ (8001a00 <HAL_SDRAM_MspDeInit+0x78>)
 80019b0:	f005 ffb6 	bl	8007920 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80019b4:	f64f 7183 	movw	r1, #65411	@ 0xff83
 80019b8:	4812      	ldr	r0, [pc, #72]	@ (8001a04 <HAL_SDRAM_MspDeInit+0x7c>)
 80019ba:	f005 ffb1 	bl	8007920 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 80019be:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 80019c2:	4811      	ldr	r0, [pc, #68]	@ (8001a08 <HAL_SDRAM_MspDeInit+0x80>)
 80019c4:	f005 ffac 	bl	8007920 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80019c8:	f248 1133 	movw	r1, #33075	@ 0x8133
 80019cc:	480f      	ldr	r0, [pc, #60]	@ (8001a0c <HAL_SDRAM_MspDeInit+0x84>)
 80019ce:	f005 ffa7 	bl	8007920 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80019d2:	f24c 7103 	movw	r1, #50947	@ 0xc703
 80019d6:	480e      	ldr	r0, [pc, #56]	@ (8001a10 <HAL_SDRAM_MspDeInit+0x88>)
 80019d8:	f005 ffa2 	bl	8007920 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80019dc:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 80019e0:	480c      	ldr	r0, [pc, #48]	@ (8001a14 <HAL_SDRAM_MspDeInit+0x8c>)
 80019e2:	f005 ff9d 	bl	8007920 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 80019e6:	4621      	mov	r1, r4
 80019e8:	480b      	ldr	r0, [pc, #44]	@ (8001a18 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80019ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 80019ee:	f005 bf97 	b.w	8007920 <HAL_GPIO_DeInit>
}
 80019f2:	bd10      	pop	{r4, pc}
 80019f4:	24009e34 	.word	0x24009e34
 80019f8:	58024400 	.word	0x58024400
 80019fc:	58022000 	.word	0x58022000
 8001a00:	58020400 	.word	0x58020400
 8001a04:	58021000 	.word	0x58021000
 8001a08:	58021c00 	.word	0x58021c00
 8001a0c:	58021800 	.word	0x58021800
 8001a10:	58020c00 	.word	0x58020c00
 8001a14:	58021400 	.word	0x58021400
 8001a18:	58020800 	.word	0x58020800

08001a1c <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1c:	280f      	cmp	r0, #15
{
 8001a1e:	b510      	push	{r4, lr}
 8001a20:	4604      	mov	r4, r0
 8001a22:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a24:	d902      	bls.n	8001a2c <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001a26:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001a28:	b00a      	add	sp, #40	@ 0x28
 8001a2a:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001a2c:	4601      	mov	r1, r0
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2036      	movs	r0, #54	@ 0x36
 8001a32:	f004 fe93 	bl	800675c <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a36:	2036      	movs	r0, #54	@ 0x36
 8001a38:	f004 fec2 	bl	80067c0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001a3c:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a3e:	4669      	mov	r1, sp
 8001a40:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 8001a42:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a44:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <HAL_InitTick+0x88>)
 8001a46:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001a4a:	f042 0210 	orr.w	r2, r2, #16
 8001a4e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001a52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a5e:	f008 fe69 	bl	800a734 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a62:	9b07      	ldr	r3, [sp, #28]
 8001a64:	b9c3      	cbnz	r3, 8001a98 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a66:	f008 fe41 	bl	800a6ec <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001a6a:	4c0f      	ldr	r4, [pc, #60]	@ (8001aa8 <HAL_InitTick+0x8c>)
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <HAL_InitTick+0x90>)
 8001a6e:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a70:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001a74:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a76:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <HAL_InitTick+0x94>)
 8001a78:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a7c:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001a7e:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a80:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a82:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001a84:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a86:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a88:	f009 ffb8 	bl	800b9fc <HAL_TIM_Base_Init>
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	d1ca      	bne.n	8001a26 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001a90:	4620      	mov	r0, r4
 8001a92:	f009 fe7d 	bl	800b790 <HAL_TIM_Base_Start_IT>
 8001a96:	e7c7      	b.n	8001a28 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a98:	f008 fe28 	bl	800a6ec <HAL_RCC_GetPCLK1Freq>
 8001a9c:	0040      	lsls	r0, r0, #1
 8001a9e:	e7e4      	b.n	8001a6a <HAL_InitTick+0x4e>
 8001aa0:	24000074 	.word	0x24000074
 8001aa4:	58024400 	.word	0x58024400
 8001aa8:	24009e3c 	.word	0x24009e3c
 8001aac:	40001000 	.word	0x40001000
 8001ab0:	000f4240 	.word	0x000f4240

08001ab4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <NMI_Handler>

08001ab6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <HardFault_Handler>

08001ab8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <MemManage_Handler>

08001aba <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <BusFault_Handler>

08001abc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <UsageFault_Handler>

08001abe <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001abe:	4770      	bx	lr

08001ac0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ac0:	4801      	ldr	r0, [pc, #4]	@ (8001ac8 <USART1_IRQHandler+0x8>)
 8001ac2:	f00a b807 	b.w	800bad4 <HAL_UART_IRQHandler>
 8001ac6:	bf00      	nop
 8001ac8:	240099cc 	.word	0x240099cc

08001acc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001acc:	4801      	ldr	r0, [pc, #4]	@ (8001ad4 <TIM6_DAC_IRQHandler+0x8>)
 8001ace:	f009 bea1 	b.w	800b814 <HAL_TIM_IRQHandler>
 8001ad2:	bf00      	nop
 8001ad4:	24009e3c 	.word	0x24009e3c

08001ad8 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ad8:	4801      	ldr	r0, [pc, #4]	@ (8001ae0 <LTDC_IRQHandler+0x8>)
 8001ada:	f007 bb7b 	b.w	80091d4 <HAL_LTDC_IRQHandler>
 8001ade:	bf00      	nop
 8001ae0:	24009aac 	.word	0x24009aac

08001ae4 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001ae4:	4801      	ldr	r0, [pc, #4]	@ (8001aec <DMA2D_IRQHandler+0x8>)
 8001ae6:	f005 b91a 	b.w	8006d1e <HAL_DMA2D_IRQHandler>
 8001aea:	bf00      	nop
 8001aec:	24009ca0 	.word	0x24009ca0

08001af0 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001af0:	4801      	ldr	r0, [pc, #4]	@ (8001af8 <JPEG_IRQHandler+0x8>)
 8001af2:	f007 ba47 	b.w	8008f84 <HAL_JPEG_IRQHandler>
 8001af6:	bf00      	nop
 8001af8:	24009c2c 	.word	0x24009c2c

08001afc <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001afc:	4804      	ldr	r0, [pc, #16]	@ (8001b10 <MDMA_IRQHandler+0x14>)
{
 8001afe:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001b00:	f007 fd62 	bl	80095c8 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001b04:	4803      	ldr	r0, [pc, #12]	@ (8001b14 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001b06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001b0a:	f007 bd5d 	b.w	80095c8 <HAL_MDMA_IRQHandler>
 8001b0e:	bf00      	nop
 8001b10:	24009b54 	.word	0x24009b54
 8001b14:	24009bc0 	.word	0x24009bc0

08001b18 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001b18:	4801      	ldr	r0, [pc, #4]	@ (8001b20 <DSI_IRQHandler+0x8>)
 8001b1a:	f005 bb02 	b.w	8007122 <HAL_DSI_IRQHandler>
 8001b1e:	bf00      	nop
 8001b20:	24009c84 	.word	0x24009c84

08001b24 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001b24:	2001      	movs	r0, #1
 8001b26:	4770      	bx	lr

08001b28 <_kill>:

int _kill(int pid, int sig)
{
 8001b28:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001b2a:	f022 f921 	bl	8023d70 <__errno>
 8001b2e:	2316      	movs	r3, #22
 8001b30:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001b32:	f04f 30ff 	mov.w	r0, #4294967295
 8001b36:	bd08      	pop	{r3, pc}

08001b38 <_exit>:

void _exit (int status)
{
 8001b38:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001b3a:	f022 f919 	bl	8023d70 <__errno>
 8001b3e:	2316      	movs	r3, #22
 8001b40:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001b42:	e7fe      	b.n	8001b42 <_exit+0xa>

08001b44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b44:	b570      	push	{r4, r5, r6, lr}
 8001b46:	460d      	mov	r5, r1
 8001b48:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4a:	460e      	mov	r6, r1
 8001b4c:	1b73      	subs	r3, r6, r5
 8001b4e:	429c      	cmp	r4, r3
 8001b50:	dc01      	bgt.n	8001b56 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001b52:	4620      	mov	r0, r4
 8001b54:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001b56:	f3af 8000 	nop.w
 8001b5a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5e:	e7f5      	b.n	8001b4c <_read+0x8>

08001b60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b60:	b570      	push	{r4, r5, r6, lr}
 8001b62:	460d      	mov	r5, r1
 8001b64:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b66:	460e      	mov	r6, r1
 8001b68:	1b73      	subs	r3, r6, r5
 8001b6a:	429c      	cmp	r4, r3
 8001b6c:	dc01      	bgt.n	8001b72 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001b6e:	4620      	mov	r0, r4
 8001b70:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001b72:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001b76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7a:	e7f5      	b.n	8001b68 <_write+0x8>

08001b7c <_close>:

int _close(int file)
{
	return -1;
}
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	4770      	bx	lr

08001b82 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001b82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8001b86:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001b88:	604b      	str	r3, [r1, #4]
}
 8001b8a:	4770      	bx	lr

08001b8c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	4770      	bx	lr

08001b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001b90:	2000      	movs	r0, #0
 8001b92:	4770      	bx	lr

08001b94 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b94:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc4 <_sbrk+0x30>)
{
 8001b96:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001b98:	6811      	ldr	r1, [r2, #0]
{
 8001b9a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001b9c:	b909      	cbnz	r1, 8001ba2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001b9e:	490a      	ldr	r1, [pc, #40]	@ (8001bc8 <_sbrk+0x34>)
 8001ba0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba2:	6810      	ldr	r0, [r2, #0]
 8001ba4:	4909      	ldr	r1, [pc, #36]	@ (8001bcc <_sbrk+0x38>)
 8001ba6:	4c0a      	ldr	r4, [pc, #40]	@ (8001bd0 <_sbrk+0x3c>)
 8001ba8:	4403      	add	r3, r0
 8001baa:	1b09      	subs	r1, r1, r4
 8001bac:	428b      	cmp	r3, r1
 8001bae:	d906      	bls.n	8001bbe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001bb0:	f022 f8de 	bl	8023d70 <__errno>
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001bbc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001bbe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001bc0:	e7fc      	b.n	8001bbc <_sbrk+0x28>
 8001bc2:	bf00      	nop
 8001bc4:	24009e88 	.word	0x24009e88
 8001bc8:	240262f0 	.word	0x240262f0
 8001bcc:	24080000 	.word	0x24080000
 8001bd0:	00001000 	.word	0x00001000

08001bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bd8:	f004 fce6 	bl	80065a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bdc:	480c      	ldr	r0, [pc, #48]	@ (8001c10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bde:	490d      	ldr	r1, [pc, #52]	@ (8001c14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001be0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be4:	e002      	b.n	8001bec <LoopCopyDataInit>

08001be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bea:	3304      	adds	r3, #4

08001bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf0:	d3f9      	bcc.n	8001be6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bf4:	4c0a      	ldr	r4, [pc, #40]	@ (8001c20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf8:	e001      	b.n	8001bfe <LoopFillZerobss>

08001bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bfc:	3204      	adds	r2, #4

08001bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c00:	d3fb      	bcc.n	8001bfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c02:	f022 f8bb 	bl	8023d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c06:	f7fe ffa5 	bl	8000b54 <main>
  bx  lr
 8001c0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c0c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c14:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001c18:	08029fa8 	.word	0x08029fa8
  ldr r2, =_sbss
 8001c1c:	24009940 	.word	0x24009940
  ldr r4, =_ebss
 8001c20:	240262ec 	.word	0x240262ec

08001c24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC3_IRQHandler>

08001c26 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001c26:	4770      	bx	lr

08001c28 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001c28:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8001c2a:	f001 fd25 	bl	8003678 <touchgfx_components_init>
    touchgfx_init();
}
 8001c2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001c32:	f001 bca9 	b.w	8003588 <touchgfx_init>

08001c36 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001c36:	f001 bd21 	b.w	800367c <touchgfx_taskEntry>

08001c3a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001c3a:	6840      	ldr	r0, [r0, #4]
    }
 8001c3c:	4770      	bx	lr

08001c3e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001c3e:	6041      	str	r1, [r0, #4]
    }
 8001c40:	4770      	bx	lr

08001c42 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001c42:	1a52      	subs	r2, r2, r1
 8001c44:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001c48:	fbb2 f0f3 	udiv	r0, r2, r3
 8001c4c:	4770      	bx	lr
	...

08001c50 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001c50:	4b02      	ldr	r3, [pc, #8]	@ (8001c5c <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001c52:	68c0      	ldr	r0, [r0, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001c58:	4358      	muls	r0, r3
 8001c5a:	4770      	bx	lr
 8001c5c:	24009e8c 	.word	0x24009e8c

08001c60 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001c60:	4770      	bx	lr
	...

08001c64 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c66:	4a1e      	ldr	r2, [pc, #120]	@ (8001ce0 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001c68:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 8001c6c:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 8001c6e:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c72:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c7e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 8001c8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ce4 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001c8c:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8e:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001c90:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c92:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c94:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001c96:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001c98:	2101      	movs	r1, #1
 8001c9a:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001c9c:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	2210      	movs	r2, #16
 8001ca0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ca4:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001ca8:	fab2 f282 	clz	r2, r2
 8001cac:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001cae:	4a0e      	ldr	r2, [pc, #56]	@ (8001ce8 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001cb0:	5cd3      	ldrb	r3, [r2, r3]
 8001cb2:	b983      	cbnz	r3, 8001cd6 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001cb4:	f008 fcf8 	bl	800a6a8 <HAL_RCC_GetHCLKFreq>
 8001cb8:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001cba:	f008 fb2d 	bl	800a318 <HAL_RCC_GetSysClockFreq>
 8001cbe:	fbb0 f0f4 	udiv	r0, r0, r4
 8001cc2:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001cc4:	4807      	ldr	r0, [pc, #28]	@ (8001ce4 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001cc6:	f009 fe99 	bl	800b9fc <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 8001cca:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001ccc:	b003      	add	sp, #12
 8001cce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001cd2:	f009 bd23 	b.w	800b71c <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001cd6:	f008 fd09 	bl	800a6ec <HAL_RCC_GetPCLK1Freq>
 8001cda:	0044      	lsls	r4, r0, #1
 8001cdc:	e7ed      	b.n	8001cba <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 8001cde:	bf00      	nop
 8001ce0:	58024400 	.word	0x58024400
 8001ce4:	24009e8c 	.word	0x24009e8c
 8001ce8:	08026eac 	.word	0x08026eac

08001cec <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001cec:	b510      	push	{r4, lr}
 8001cee:	4604      	mov	r4, r0
 8001cf0:	2110      	movs	r1, #16
 8001cf2:	f021 f962 	bl	8022fba <_ZdlPvj>
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	bd10      	pop	{r4, pc}

08001cfa <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 8001cfa:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001cfc:	6803      	ldr	r3, [r0, #0]
{
 8001cfe:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001d00:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001d02:	b131      	cbz	r1, 8001d12 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001d04:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001d06:	4798      	blx	r3
 8001d08:	6863      	ldr	r3, [r4, #4]
 8001d0a:	1b5b      	subs	r3, r3, r5
 8001d0c:	4403      	add	r3, r0
 8001d0e:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001d10:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001d12:	4798      	blx	r3
 8001d14:	60a0      	str	r0, [r4, #8]
}
 8001d16:	e7fb      	b.n	8001d10 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001d18 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001d18:	4770      	bx	lr
	...

08001d1c <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001d20:	460f      	mov	r7, r1
 8001d22:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001d24:	781d      	ldrb	r5, [r3, #0]
 8001d26:	b915      	cbnz	r5, 8001d2e <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001d28:	2500      	movs	r5, #0
}
 8001d2a:	4628      	mov	r0, r5
 8001d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 8001d2e:	4c07      	ldr	r4, [pc, #28]	@ (8001d4c <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001d30:	2000      	movs	r0, #0
 8001d32:	4621      	mov	r1, r4
 8001d34:	f004 fbdc 	bl	80064f0 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f4      	beq.n	8001d28 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 8001d3e:	6863      	ldr	r3, [r4, #4]
 8001d40:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001d42:	68a3      	ldr	r3, [r4, #8]
 8001d44:	6033      	str	r3, [r6, #0]
            return true;
 8001d46:	e7f0      	b.n	8001d2a <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001d48:	24009ee8 	.word	0x24009ee8
 8001d4c:	24009ed8 	.word	0x24009ed8

08001d50 <_ZN20STM32TouchControllerD0Ev>:
 8001d50:	b510      	push	{r4, lr}
 8001d52:	4604      	mov	r4, r0
 8001d54:	2104      	movs	r1, #4
 8001d56:	f021 f930 	bl	8022fba <_ZdlPvj>
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	bd10      	pop	{r4, pc}
	...

08001d60 <_ZN20STM32TouchController4initEv>:
{
 8001d60:	b508      	push	{r3, lr}
    hTS->Width = 800;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 8001d64:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 8001d68:	2000      	movs	r0, #0
    hTS->Width = 800;
 8001d6a:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 8001d6c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001d70:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 8001d74:	230c      	movs	r3, #12
 8001d76:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 8001d7a:	f004 fb29 	bl	80063d0 <BSP_TS_Init>
 8001d7e:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <_ZN20STM32TouchController4initEv+0x40>)
 8001d80:	b910      	cbnz	r0, 8001d88 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
}
 8001d86:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1fb      	bne.n	8001d86 <_ZN20STM32TouchController4initEv+0x26>
 8001d8e:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <_ZN20STM32TouchController4initEv+0x44>)
 8001d90:	212e      	movs	r1, #46	@ 0x2e
 8001d92:	4a05      	ldr	r2, [pc, #20]	@ (8001da8 <_ZN20STM32TouchController4initEv+0x48>)
 8001d94:	4805      	ldr	r0, [pc, #20]	@ (8001dac <_ZN20STM32TouchController4initEv+0x4c>)
 8001d96:	f021 fc87 	bl	80236a8 <__assert_func>
 8001d9a:	bf00      	nop
 8001d9c:	24009ee4 	.word	0x24009ee4
 8001da0:	24009ee8 	.word	0x24009ee8
 8001da4:	080247a9 	.word	0x080247a9
 8001da8:	080247bc 	.word	0x080247bc
 8001dac:	080247e6 	.word	0x080247e6

08001db0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001db0:	2803      	cmp	r0, #3
 8001db2:	d825      	bhi.n	8001e00 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001db4:	e8df f000 	tbb	[pc, r0]
 8001db8:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001dbe:	2108      	movs	r1, #8
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	fab2 f282 	clz	r2, r2
 8001dc6:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001dc8:	480f      	ldr	r0, [pc, #60]	@ (8001e08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001dca:	f005 be4b 	b.w	8007a64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001dd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	fab2 f282 	clz	r2, r2
 8001dda:	0952      	lsrs	r2, r2, #5
 8001ddc:	e7f4      	b.n	8001dc8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001de0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	fab2 f282 	clz	r2, r2
 8001dea:	0952      	lsrs	r2, r2, #5
 8001dec:	e7ec      	b.n	8001dc8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001dee:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001df0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	fab2 f282 	clz	r2, r2
 8001dfc:	0952      	lsrs	r2, r2, #5
 8001dfe:	e7e4      	b.n	8001dca <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	24009eec 	.word	0x24009eec
 8001e08:	58022400 	.word	0x58022400
 8001e0c:	58021400 	.word	0x58021400

08001e10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001e10:	2803      	cmp	r0, #3
 8001e12:	d825      	bhi.n	8001e60 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001e14:	e8df f000 	tbb	[pc, r0]
 8001e18:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001e1c:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001e1e:	2108      	movs	r1, #8
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	3a00      	subs	r2, #0
 8001e24:	bf18      	it	ne
 8001e26:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001e28:	480f      	ldr	r0, [pc, #60]	@ (8001e68 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001e2a:	f005 be1b 	b.w	8007a64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001e30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	3a00      	subs	r2, #0
 8001e38:	bf18      	it	ne
 8001e3a:	2201      	movne	r2, #1
 8001e3c:	e7f4      	b.n	8001e28 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001e3e:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001e40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	3a00      	subs	r2, #0
 8001e48:	bf18      	it	ne
 8001e4a:	2201      	movne	r2, #1
 8001e4c:	e7ec      	b.n	8001e28 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001e4e:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001e50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e54:	4805      	ldr	r0, [pc, #20]	@ (8001e6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	3a00      	subs	r2, #0
 8001e5a:	bf18      	it	ne
 8001e5c:	2201      	movne	r2, #1
 8001e5e:	e7e4      	b.n	8001e2a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	24009eec 	.word	0x24009eec
 8001e68:	58022400 	.word	0x58022400
 8001e6c:	58021400 	.word	0x58021400

08001e70 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001e70:	2803      	cmp	r0, #3
 8001e72:	d811      	bhi.n	8001e98 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001e74:	e8df f000 	tbb	[pc, r0]
 8001e78:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001e7c:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e7e:	4807      	ldr	r0, [pc, #28]	@ (8001e9c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e80:	f005 bdf5 	b.w	8007a6e <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e88:	e7f9      	b.n	8001e7e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001e8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e8e:	e7f6      	b.n	8001e7e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e94:	4802      	ldr	r0, [pc, #8]	@ (8001ea0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001e96:	e7f3      	b.n	8001e80 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	58022400 	.word	0x58022400
 8001ea0:	58021400 	.word	0x58021400

08001ea4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001ea4:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001ea6:	2803      	cmp	r0, #3
 8001ea8:	d815      	bhi.n	8001ed6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001eaa:	e8df f000 	tbb	[pc, r0]
 8001eae:	0a02      	.short	0x0a02
 8001eb0:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001eb2:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001eb4:	4809      	ldr	r0, [pc, #36]	@ (8001edc <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001eb6:	f005 fdcf 	bl	8007a58 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001eba:	1e43      	subs	r3, r0, #1
 8001ebc:	4258      	negs	r0, r3
 8001ebe:	4158      	adcs	r0, r3
 8001ec0:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001ec2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ec6:	e7f5      	b.n	8001eb4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001ec8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ecc:	e7f2      	b.n	8001eb4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001ece:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ed2:	4803      	ldr	r0, [pc, #12]	@ (8001ee0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001ed4:	e7ef      	b.n	8001eb6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	e7ef      	b.n	8001eba <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001eda:	bf00      	nop
 8001edc:	58022400 	.word	0x58022400
 8001ee0:	58021400 	.word	0x58021400

08001ee4 <_ZN8touchgfx4GPIO4initEv>:
{
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	4d08      	ldr	r5, [pc, #32]	@ (8001f08 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001ee8:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001eea:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001eec:	b2e0      	uxtb	r0, r4
 8001eee:	f7ff ffd9 	bl	8001ea4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001ef2:	b118      	cbz	r0, 8001efc <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001ef4:	682b      	ldr	r3, [r5, #0]
 8001ef6:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001ef8:	bf18      	it	ne
 8001efa:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001efc:	3401      	adds	r4, #1
 8001efe:	3504      	adds	r5, #4
 8001f00:	2c05      	cmp	r4, #5
 8001f02:	d1f3      	bne.n	8001eec <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001f04:	bd70      	pop	{r4, r5, r6, pc}
 8001f06:	bf00      	nop
 8001f08:	24009eec 	.word	0x24009eec

08001f0c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001f0c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001f0e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001f12:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001f16:	4770      	bx	lr

08001f18 <_ZN8touchgfx3HAL11submitGPU2DEv>:
     *
     * Only implemented on systems with the GPU2D IP.
     */
    virtual void submitGPU2D()
    {
    }
 8001f18:	4770      	bx	lr

08001f1a <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	4770      	bx	lr
	...

08001f20 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001f20:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001f22:	3900      	subs	r1, #0
 8001f24:	4b02      	ldr	r3, [pc, #8]	@ (8001f30 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001f26:	bf18      	it	ne
 8001f28:	2101      	movne	r1, #1
 8001f2a:	7019      	strb	r1, [r3, #0]
    }
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	240255cb 	.word	0x240255cb

08001f34 <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
    {
    }
 8001f34:	4770      	bx	lr

08001f36 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001f36:	2000      	movs	r0, #0
 8001f38:	4770      	bx	lr

08001f3a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001f3a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001f3c:	b10b      	cbz	r3, 8001f42 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001f3e:	4608      	mov	r0, r1
 8001f40:	4718      	bx	r3
        }
    }
 8001f42:	4770      	bx	lr

08001f44 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001f44:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001f48:	4770      	bx	lr

08001f4a <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001f4a:	6840      	ldr	r0, [r0, #4]
 8001f4c:	6803      	ldr	r3, [r0, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4718      	bx	r3

08001f52 <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
    {
    }
 8001f52:	4770      	bx	lr

08001f54 <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
    {
    }
 8001f54:	4770      	bx	lr
	...

08001f58 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001f58:	4b01      	ldr	r3, [pc, #4]	@ (8001f60 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	24009f10 	.word	0x24009f10

08001f64 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001f64:	4770      	bx	lr

08001f66 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001f66:	f001 bc86 	b.w	8003876 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001f6a <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001f6a:	f001 bc17 	b.w	800379c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001f6e <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001f6e:	f001 bde7 	b.w	8003b40 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001f72 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001f72:	f001 bdd9 	b.w	8003b28 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001f78 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001f78:	b510      	push	{r4, lr}
 8001f7a:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001f7c:	f001 fd9c 	bl	8003ab8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001f80:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001f84:	b113      	cbz	r3, 8001f8c <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001f86:	4b02      	ldr	r3, [pc, #8]	@ (8001f90 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
    }
}
 8001f8c:	bd10      	pop	{r4, pc}
 8001f8e:	bf00      	nop
 8001f90:	2400000c 	.word	0x2400000c

08001f94 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001f94:	f001 bc0a 	b.w	80037ac <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001f98 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001f98:	b510      	push	{r4, lr}
 8001f9a:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001f9c:	f00e f8bc 	bl	8010118 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
    }
 8001fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001fac:	4718      	bx	r3

08001fae <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001fae:	b510      	push	{r4, lr}
 8001fb0:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001fb2:	f00d fc17 	bl	800f7e4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001fb6:	6860      	ldr	r0, [r4, #4]
 8001fb8:	6803      	ldr	r3, [r0, #0]
    }
 8001fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	4718      	bx	r3

08001fc2 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001fc2:	f00d bad7 	b.w	800f574 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001fc6 <_ZN11TouchGFXHALD0Ev>:
 8001fc6:	b510      	push	{r4, lr}
 8001fc8:	4604      	mov	r4, r0
 8001fca:	2184      	movs	r1, #132	@ 0x84
 8001fcc:	f020 fff5 	bl	8022fba <_ZdlPvj>
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	bd10      	pop	{r4, pc}

08001fd4 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001fd4:	4b02      	ldr	r3, [pc, #8]	@ (8001fe0 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001fda:	f00d bb07 	b.w	800f5ec <_ZN8touchgfx3HAL10beginFrameEv>
 8001fde:	bf00      	nop
 8001fe0:	2400000c 	.word	0x2400000c

08001fe4 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001fe4:	b538      	push	{r3, r4, r5, lr}
 8001fe6:	4604      	mov	r4, r0
    mcuInstr.init();
 8001fe8:	4d06      	ldr	r5, [pc, #24]	@ (8002004 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001fea:	f001 fc05 	bl	80037f8 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001fee:	2300      	movs	r3, #0
    mcuInstr.init();
 8001ff0:	4628      	mov	r0, r5
 8001ff2:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001ff6:	f7ff fe35 	bl	8001c64 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001ffa:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001ffc:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001ffe:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8002002:	bd38      	pop	{r3, r4, r5, pc}
 8002004:	24009f00 	.word	0x24009f00

08002008 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8002008:	6803      	ldr	r3, [r0, #0]
{
 800200a:	4604      	mov	r4, r0
 800200c:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 800200e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002012:	4798      	blx	r3
    enableInterrupts();
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	4620      	mov	r0, r4
 8002018:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800201a:	4798      	blx	r3
    OSWrappers::waitForVSync();
 800201c:	f000 ff66 	bl	8002eec <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	4620      	mov	r0, r4
 8002024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002026:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8002028:	2100      	movs	r1, #0
 800202a:	2329      	movs	r3, #41	@ 0x29
 800202c:	2215      	movs	r2, #21
 800202e:	4805      	ldr	r0, [pc, #20]	@ (8002044 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8002030:	9100      	str	r1, [sp, #0]
 8002032:	f005 fa86 	bl	8007542 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8002036:	f000 ff59 	bl	8002eec <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	4620      	mov	r0, r4
 800203e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002040:	4798      	blx	r3
    for (;;)
 8002042:	e7f8      	b.n	8002036 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8002044:	24009c84 	.word	0x24009c84

08002048 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
        if (requestedOrientation != nativeDisplayOrientation)
 8002048:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
            if (DISPLAY_ROTATION == rotate0)
 800204c:	4b0d      	ldr	r3, [pc, #52]	@ (8002084 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 800204e:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8002050:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8002054:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8002056:	428c      	cmp	r4, r1
 8002058:	d009      	beq.n	800206e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 800205a:	b93a      	cbnz	r2, 800206c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                const uint16_t tmp = DISPLAY_HEIGHT;
 800205c:	490a      	ldr	r1, [pc, #40]	@ (8002088 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800205e:	4a0b      	ldr	r2, [pc, #44]	@ (800208c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002060:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002062:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8002064:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8002066:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002068:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 800206a:	701a      	strb	r2, [r3, #0]
    }
 800206c:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 800206e:	2a00      	cmp	r2, #0
 8002070:	d0fc      	beq.n	800206c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002072:	4a06      	ldr	r2, [pc, #24]	@ (800208c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002074:	4904      	ldr	r1, [pc, #16]	@ (8002088 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002076:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002078:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800207a:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 800207c:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800207e:	2200      	movs	r2, #0
 8002080:	e7f3      	b.n	800206a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8002082:	bf00      	nop
 8002084:	240255c4 	.word	0x240255c4
 8002088:	240255c2 	.word	0x240255c2
 800208c:	240255c0 	.word	0x240255c0

08002090 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002090:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8002092:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	428b      	cmp	r3, r1
 8002098:	d803      	bhi.n	80020a2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 800209a:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	4293      	cmp	r3, r2
 80020a0:	d905      	bls.n	80020ae <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 80020a2:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80020a4:	21a3      	movs	r1, #163	@ 0xa3
 80020a6:	4a07      	ldr	r2, [pc, #28]	@ (80020c4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80020a8:	4807      	ldr	r0, [pc, #28]	@ (80020c8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80020aa:	f021 fafd 	bl	80236a8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80020ae:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 80020b0:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80020b2:	4b07      	ldr	r3, [pc, #28]	@ (80020d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 80020b4:	801a      	strh	r2, [r3, #0]
    }
 80020b6:	bd08      	pop	{r3, pc}
 80020b8:	240255c0 	.word	0x240255c0
 80020bc:	240255c2 	.word	0x240255c2
 80020c0:	08024834 	.word	0x08024834
 80020c4:	08024897 	.word	0x08024897
 80020c8:	080248da 	.word	0x080248da
 80020cc:	240255c6 	.word	0x240255c6
 80020d0:	240255c8 	.word	0x240255c8

080020d4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 80020d4:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 80020d6:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 80020da:	b118      	cbz	r0, 80020e4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 80020dc:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 80020de:	6803      	ldr	r3, [r0, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4718      	bx	r3
    }
 80020e4:	4770      	bx	lr
	...

080020e8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 80020e8:	b570      	push	{r4, r5, r6, lr}
 80020ea:	460d      	mov	r5, r1
 80020ec:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 80020ee:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 80020f0:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80020f2:	b935      	cbnz	r5, 8002102 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 80020f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 80020f6:	f240 21ff 	movw	r1, #767	@ 0x2ff
 80020fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 80020fc:	480a      	ldr	r0, [pc, #40]	@ (8002128 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 80020fe:	f021 fad3 	bl	80236a8 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8002102:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002106:	3a00      	subs	r2, #0
 8002108:	4b08      	ldr	r3, [pc, #32]	@ (800212c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 800210a:	bf18      	it	ne
 800210c:	2201      	movne	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8002110:	6803      	ldr	r3, [r0, #0]
}
 8002112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211a:	4718      	bx	r3
 800211c:	24009f10 	.word	0x24009f10
 8002120:	0802492d 	.word	0x0802492d
 8002124:	08024965 	.word	0x08024965
 8002128:	080248da 	.word	0x080248da
 800212c:	240255ca 	.word	0x240255ca

08002130 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8002130:	b570      	push	{r4, r5, r6, lr}
          lcdRef(display),
 8002132:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8002136:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8002138:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 800213c:	2300      	movs	r3, #0
 800213e:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8002142:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8002146:	2103      	movs	r1, #3
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8002148:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 800214a:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 800214e:	3520      	adds	r5, #32
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002150:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8002152:	8603      	strh	r3, [r0, #48]	@ 0x30
 8002154:	b2ad      	uxth	r5, r5
          useAuxiliaryLCD(false),
 8002156:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 800215a:	6643      	str	r3, [r0, #100]	@ 0x64
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800215c:	42b5      	cmp	r5, r6
          updateMCULoad(0),
 800215e:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          auxiliaryLCD(0),
 8002162:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8002166:	4a1c      	ldr	r2, [pc, #112]	@ (80021d8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
          vSyncCompensationEnabled(false),
 8002168:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800216c:	4a1b      	ldr	r2, [pc, #108]	@ (80021dc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xac>)
          buttonController(0),
 800216e:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8002172:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8002176:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 800217a:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 800217e:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8002182:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8002186:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          cc_begin(0),
 800218a:	6743      	str	r3, [r0, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800218c:	6782      	str	r2, [r0, #120]	@ 0x78
          isFrontPorchEntered(false),
 800218e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002192:	f8a0 207c 	strh.w	r2, [r0, #124]	@ 0x7c
          maxDrawingHeight(height / numberOfBlocks), // Best guess based on testing (but not ideal in all cases)
 8002196:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800219a:	f8a0 207e 	strh.w	r2, [r0, #126]	@ 0x7e
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 800219e:	fbb2 f2f1 	udiv	r2, r2, r1
 80021a2:	f8a0 2080 	strh.w	r2, [r0, #128]	@ 0x80
          maxBlockLines(20)
 80021a6:	f04f 0214 	mov.w	r2, #20
 80021aa:	f8a0 2082 	strh.w	r2, [r0, #130]	@ 0x82
        instance = this;
 80021ae:	4a0c      	ldr	r2, [pc, #48]	@ (80021e0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb0>)
 80021b0:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80021b2:	4a0c      	ldr	r2, [pc, #48]	@ (80021e4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb4>)
 80021b4:	8015      	strh	r5, [r2, #0]
 80021b6:	4a0c      	ldr	r2, [pc, #48]	@ (80021e8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb8>)
 80021b8:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80021ba:	bf28      	it	cs
 80021bc:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80021be:	4a0b      	ldr	r2, [pc, #44]	@ (80021ec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xbc>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80021c0:	bf38      	it	cc
 80021c2:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80021c4:	8016      	strh	r6, [r2, #0]
 80021c6:	4a0a      	ldr	r2, [pc, #40]	@ (80021f0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80021c8:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80021cc:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80021ce:	4a09      	ldr	r2, [pc, #36]	@ (80021f4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc4>)
 80021d0:	7013      	strb	r3, [r2, #0]
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc8>)
 80021d4:	6003      	str	r3, [r0, #0]
}
 80021d6:	bd70      	pop	{r4, r5, r6, pc}
 80021d8:	01000001 	.word	0x01000001
 80021dc:	01010000 	.word	0x01010000
 80021e0:	240255cc 	.word	0x240255cc
 80021e4:	240255c0 	.word	0x240255c0
 80021e8:	240255c6 	.word	0x240255c6
 80021ec:	240255c2 	.word	0x240255c2
 80021f0:	240255c8 	.word	0x240255c8
 80021f4:	240255c4 	.word	0x240255c4
 80021f8:	080266f4 	.word	0x080266f4

080021fc <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 80021fc:	2b01      	cmp	r3, #1
    {
 80021fe:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8002200:	d80e      	bhi.n	8002220 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	2215      	movs	r2, #21
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	460b      	mov	r3, r1
 800220a:	4601      	mov	r1, r0
 800220c:	4808      	ldr	r0, [pc, #32]	@ (8002230 <DSI_IO_Write+0x34>)
 800220e:	f005 f998 	bl	8007542 <HAL_DSI_ShortWrite>
 8002212:	b118      	cbz	r0, 800221c <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002214:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8002218:	b002      	add	sp, #8
 800221a:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 800221c:	2000      	movs	r0, #0
 800221e:	e7fb      	b.n	8002218 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8002220:	e9cd 1200 	strd	r1, r2, [sp]
 8002224:	4601      	mov	r1, r0
 8002226:	2239      	movs	r2, #57	@ 0x39
 8002228:	4801      	ldr	r0, [pc, #4]	@ (8002230 <DSI_IO_Write+0x34>)
 800222a:	f005 f99b 	bl	8007564 <HAL_DSI_LongWrite>
 800222e:	e7f0      	b.n	8002212 <DSI_IO_Write+0x16>
 8002230:	24009c84 	.word	0x24009c84

08002234 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8002234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8002236:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800223a:	2106      	movs	r1, #6
 800223c:	9100      	str	r1, [sp, #0]
 800223e:	4601      	mov	r1, r0
 8002240:	4805      	ldr	r0, [pc, #20]	@ (8002258 <DSI_IO_Read+0x24>)
 8002242:	f005 f9ef 	bl	8007624 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8002246:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8002248:	bf14      	ite	ne
 800224a:	f06f 0007 	mvnne.w	r0, #7
 800224e:	2000      	moveq	r0, #0
 8002250:	b005      	add	sp, #20
 8002252:	f85d fb04 	ldr.w	pc, [sp], #4
 8002256:	bf00      	nop
 8002258:	24009c84 	.word	0x24009c84

0800225c <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 800225c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 800225e:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8002262:	4c0b      	ldr	r4, [pc, #44]	@ (8002290 <LCD_ReqTear+0x34>)
 8002264:	2239      	movs	r2, #57	@ 0x39
 8002266:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8002268:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 800226c:	ab03      	add	r3, sp, #12
 800226e:	4620      	mov	r0, r4
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	2344      	movs	r3, #68	@ 0x44
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2302      	movs	r3, #2
 8002278:	f005 f974 	bl	8007564 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 800227c:	2100      	movs	r1, #0
 800227e:	2335      	movs	r3, #53	@ 0x35
 8002280:	2215      	movs	r2, #21
 8002282:	4620      	mov	r0, r4
 8002284:	9100      	str	r1, [sp, #0]
 8002286:	f005 f95c 	bl	8007542 <HAL_DSI_ShortWrite>
    }
 800228a:	b004      	add	sp, #16
 800228c:	bd10      	pop	{r4, pc}
 800228e:	bf00      	nop
 8002290:	24009c84 	.word	0x24009c84

08002294 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8002294:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8002296:	f7ff ffe1 	bl	800225c <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 800229a:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 800229c:	2202      	movs	r2, #2
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 80022a4:	2201      	movs	r2, #1
 80022a6:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 80022aa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 80022b6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80022ba:	f042 0202 	orr.w	r2, r2, #2
 80022be:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 80022c2:	2203      	movs	r2, #3
 80022c4:	4b02      	ldr	r3, [pc, #8]	@ (80022d0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 80022c6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80022c8:	bd08      	pop	{r3, pc}
 80022ca:	bf00      	nop
 80022cc:	24009c84 	.word	0x24009c84
 80022d0:	50001000 	.word	0x50001000

080022d4 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 80022d4:	4b07      	ldr	r3, [pc, #28]	@ (80022f4 <LCD_ReqEnable+0x20>)
    {
 80022d6:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 80022d8:	7819      	ldrb	r1, [r3, #0]
 80022da:	b939      	cbnz	r1, 80022ec <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 80022dc:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 80022de:	4806      	ldr	r0, [pc, #24]	@ (80022f8 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 80022e0:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 80022e2:	2329      	movs	r3, #41	@ 0x29
 80022e4:	2215      	movs	r2, #21
 80022e6:	9100      	str	r1, [sp, #0]
 80022e8:	f005 f92b 	bl	8007542 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 80022ec:	b003      	add	sp, #12
 80022ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80022f2:	bf00      	nop
 80022f4:	24009efc 	.word	0x24009efc
 80022f8:	24009c84 	.word	0x24009c84

080022fc <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 80022fc:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 80022fe:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	232a      	movs	r3, #42	@ 0x2a
 8002304:	2239      	movs	r2, #57	@ 0x39
 8002306:	2100      	movs	r1, #0
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2304      	movs	r3, #4
 800230c:	4803      	ldr	r0, [pc, #12]	@ (800231c <LCD_SetUpdateRegionLeft+0x20>)
 800230e:	f005 f929 	bl	8007564 <HAL_DSI_LongWrite>
    }
 8002312:	b003      	add	sp, #12
 8002314:	f85d fb04 	ldr.w	pc, [sp], #4
 8002318:	24000008 	.word	0x24000008
 800231c:	24009c84 	.word	0x24009c84

08002320 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002320:	4b06      	ldr	r3, [pc, #24]	@ (800233c <LCD_SetUpdateRegionRight+0x1c>)
    {
 8002322:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	232a      	movs	r3, #42	@ 0x2a
 8002328:	2239      	movs	r2, #57	@ 0x39
 800232a:	2100      	movs	r1, #0
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	2304      	movs	r3, #4
 8002330:	4803      	ldr	r0, [pc, #12]	@ (8002340 <LCD_SetUpdateRegionRight+0x20>)
 8002332:	f005 f917 	bl	8007564 <HAL_DSI_LongWrite>
    }
 8002336:	b003      	add	sp, #12
 8002338:	f85d fb04 	ldr.w	pc, [sp], #4
 800233c:	24000004 	.word	0x24000004
 8002340:	24009c84 	.word	0x24009c84

08002344 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8002344:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8002346:	4d15      	ldr	r5, [pc, #84]	@ (800239c <HAL_DSI_TearingEffectCallback+0x58>)
 8002348:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 800234a:	2000      	movs	r0, #0
 800234c:	f7ff fd30 	bl	8001db0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8002350:	682b      	ldr	r3, [r5, #0]
        vSyncCnt++;
 8002352:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 8002356:	3201      	adds	r2, #1
 8002358:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        isFrontPorchEntered = false;
 800235c:	2200      	movs	r2, #0
 800235e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8002362:	f000 fdb7 	bl	8002ed4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8002366:	4b0e      	ldr	r3, [pc, #56]	@ (80023a0 <HAL_DSI_TearingEffectCallback+0x5c>)
        lockDMAToPorch = enableLock;
 8002368:	682a      	ldr	r2, [r5, #0]
 800236a:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 8002372:	b173      	cbz	r3, 8002392 <HAL_DSI_TearingEffectCallback+0x4e>
 8002374:	4d0b      	ldr	r5, [pc, #44]	@ (80023a4 <HAL_DSI_TearingEffectCallback+0x60>)
 8002376:	782b      	ldrb	r3, [r5, #0]
 8002378:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800237c:	b94b      	cbnz	r3, 8002392 <HAL_DSI_TearingEffectCallback+0x4e>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 800237e:	4b0a      	ldr	r3, [pc, #40]	@ (80023a8 <HAL_DSI_TearingEffectCallback+0x64>)
 8002380:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8002382:	f7ff ffbb 	bl	80022fc <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8002386:	4620      	mov	r0, r4
 8002388:	f005 f8cb 	bl	8007522 <HAL_DSI_Refresh>
            displayRefreshing = true;
 800238c:	2301      	movs	r3, #1
 800238e:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8002390:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002392:	2000      	movs	r0, #0
    }
 8002394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002398:	f7ff bd3a 	b.w	8001e10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800239c:	240255cc 	.word	0x240255cc
 80023a0:	2400000c 	.word	0x2400000c
 80023a4:	24009f18 	.word	0x24009f18
 80023a8:	24009f14 	.word	0x24009f14

080023ac <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 80023ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 80023b0:	4e49      	ldr	r6, [pc, #292]	@ (80024d8 <HAL_DSI_EndOfRefreshCallback+0x12c>)
    {
 80023b2:	b085      	sub	sp, #20
 80023b4:	4604      	mov	r4, r0
        if (displayRefreshing)
 80023b6:	7833      	ldrb	r3, [r6, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 8089 	beq.w	80024d0 <HAL_DSI_EndOfRefreshCallback+0x124>
        {
            if (updateRegion == 0)
 80023be:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 80024fc <HAL_DSI_EndOfRefreshCallback+0x150>
 80023c2:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8002500 <HAL_DSI_EndOfRefreshCallback+0x154>
 80023c6:	f8d9 5000 	ldr.w	r5, [r9]
 80023ca:	4f44      	ldr	r7, [pc, #272]	@ (80024dc <HAL_DSI_EndOfRefreshCallback+0x130>)
 80023cc:	2d00      	cmp	r5, #0
 80023ce:	d13e      	bne.n	800244e <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 80023d0:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 80023d2:	4e43      	ldr	r6, [pc, #268]	@ (80024e0 <HAL_DSI_EndOfRefreshCallback+0x134>)
                HAL_Delay(1);
 80023d4:	f004 f998 	bl	8006708 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	9500      	str	r5, [sp, #0]
 80023dc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 80023e0:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80023e2:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 80023e6:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80023ea:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80023ee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80023f2:	f002 0208 	and.w	r2, r2, #8
 80023f6:	9200      	str	r2, [sp, #0]
 80023f8:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 80023fa:	f8d8 2000 	ldr.w	r2, [r8]
 80023fe:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002402:	4838      	ldr	r0, [pc, #224]	@ (80024e4 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8002404:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8002406:	4e38      	ldr	r6, [pc, #224]	@ (80024e8 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8002408:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 800240a:	4838      	ldr	r0, [pc, #224]	@ (80024ec <HAL_DSI_EndOfRefreshCallback+0x140>)
 800240c:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8002410:	4837      	ldr	r0, [pc, #220]	@ (80024f0 <HAL_DSI_EndOfRefreshCallback+0x144>)
 8002412:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8002416:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002418:	f041 0101 	orr.w	r1, r1, #1
 800241c:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800241e:	9501      	str	r5, [sp, #4]
 8002420:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002424:	f042 0208 	orr.w	r2, r2, #8
 8002428:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800242c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8002438:	f7ff ff72 	bl	8002320 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 800243c:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 800243e:	4620      	mov	r0, r4
                updateRegion = 1;
 8002440:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8002444:	b005      	add	sp, #20
 8002446:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 800244a:	f005 b86a 	b.w	8007522 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800244e:	6803      	ldr	r3, [r0, #0]
 8002450:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8002452:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002454:	9502      	str	r5, [sp, #8]
 8002456:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 800245a:	4c26      	ldr	r4, [pc, #152]	@ (80024f4 <HAL_DSI_EndOfRefreshCallback+0x148>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800245c:	f022 0208 	bic.w	r2, r2, #8
 8002460:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002464:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002468:	f002 0208 	and.w	r2, r2, #8
 800246c:	9202      	str	r2, [sp, #8]
 800246e:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8002470:	f8d8 2000 	ldr.w	r2, [r8]
 8002474:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8002478:	481a      	ldr	r0, [pc, #104]	@ (80024e4 <HAL_DSI_EndOfRefreshCallback+0x138>)
 800247a:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 800247c:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8002480:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 8002482:	481a      	ldr	r0, [pc, #104]	@ (80024ec <HAL_DSI_EndOfRefreshCallback+0x140>)
 8002484:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 8002488:	4819      	ldr	r0, [pc, #100]	@ (80024f0 <HAL_DSI_EndOfRefreshCallback+0x144>)
 800248a:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 800248e:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8002490:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002492:	f041 0101 	orr.w	r1, r1, #1
 8002496:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002498:	9503      	str	r5, [sp, #12]
 800249a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800249e:	f042 0208 	orr.w	r2, r2, #8
 80024a2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80024a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	9303      	str	r3, [sp, #12]
 80024b0:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 80024b2:	f7ff fcad 	bl	8001e10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 80024b6:	f7ff ff0d 	bl	80022d4 <LCD_ReqEnable>
        return instance;
 80024ba:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <HAL_DSI_EndOfRefreshCallback+0x14c>)
                displayRefreshing = false;
 80024bc:	7035      	strb	r5, [r6, #0]
 80024be:	681c      	ldr	r4, [r3, #0]
                if (HAL::getInstance())
 80024c0:	b134      	cbz	r4, 80024d0 <HAL_DSI_EndOfRefreshCallback+0x124>
        allowDMATransfers();
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	4620      	mov	r0, r4
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4798      	blx	r3
        isFrontPorchEntered = true;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    }
 80024d0:	b005      	add	sp, #20
 80024d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024d6:	bf00      	nop
 80024d8:	24009f18 	.word	0x24009f18
 80024dc:	24009f10 	.word	0x24009f10
 80024e0:	01b201e2 	.word	0x01b201e2
 80024e4:	50001000 	.word	0x50001000
 80024e8:	019201e3 	.word	0x019201e3
 80024ec:	01920003 	.word	0x01920003
 80024f0:	09c004b3 	.word	0x09c004b3
 80024f4:	019201e2 	.word	0x019201e2
 80024f8:	240255cc 	.word	0x240255cc
 80024fc:	24009f14 	.word	0x24009f14
 8002500:	24009aac 	.word	0x24009aac

08002504 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002504:	4601      	mov	r1, r0
 8002506:	b508      	push	{r3, lr}
        return instance;
 8002508:	4b03      	ldr	r3, [pc, #12]	@ (8002518 <IdleTaskHook+0x14>)
 800250a:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 800250c:	b101      	cbz	r1, 8002510 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800250e:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8002510:	f00d fe1c 	bl	801014c <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002514:	2001      	movs	r0, #1
 8002516:	bd08      	pop	{r3, pc}
 8002518:	240255cc 	.word	0x240255cc

0800251c <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 800251c:	4b03      	ldr	r3, [pc, #12]	@ (800252c <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800251e:	2200      	movs	r2, #0
 8002520:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	4a02      	ldr	r2, [pc, #8]	@ (8002530 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002526:	601a      	str	r2, [r3, #0]

}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	24009f00 	.word	0x24009f00
 8002530:	080266b4 	.word	0x080266b4

08002534 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002534:	6940      	ldr	r0, [r0, #20]
 8002536:	4770      	bx	lr

08002538 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8002538:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 800253c:	4770      	bx	lr

0800253e <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800253e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002540:	b923      	cbnz	r3, 800254c <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 8002542:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002544:	3800      	subs	r0, #0
 8002546:	bf18      	it	ne
 8002548:	2001      	movne	r0, #1
 800254a:	4770      	bx	lr
 800254c:	2001      	movs	r0, #1
}
 800254e:	4770      	bx	lr

08002550 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8002550:	6880      	ldr	r0, [r0, #8]
 8002552:	4770      	bx	lr

08002554 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002554:	4770      	bx	lr

08002556 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002556:	3004      	adds	r0, #4
{
 8002558:	b510      	push	{r4, lr}
 800255a:	460c      	mov	r4, r1
    *data = videoInfo;
 800255c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800255e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002562:	bd10      	pop	{r4, pc}

08002564 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002564:	4770      	bx	lr
	...

08002568 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002568:	b508      	push	{r3, lr}
    assert(0);
 800256a:	4a03      	ldr	r2, [pc, #12]	@ (8002578 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 800256c:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 8002570:	4b02      	ldr	r3, [pc, #8]	@ (800257c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 8002572:	4803      	ldr	r0, [pc, #12]	@ (8002580 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002574:	f021 f898 	bl	80236a8 <__assert_func>
 8002578:	080249b3 	.word	0x080249b3
 800257c:	080263e4 	.word	0x080263e4
 8002580:	08024a0e 	.word	0x08024a0e

08002584 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8002584:	b510      	push	{r4, lr}
 8002586:	4604      	mov	r4, r0
 8002588:	2148      	movs	r1, #72	@ 0x48
 800258a:	f020 fd16 	bl	8022fba <_ZdlPvj>
 800258e:	4620      	mov	r0, r4
 8002590:	bd10      	pop	{r4, pc}
	...

08002594 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002594:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002596:	4b0e      	ldr	r3, [pc, #56]	@ (80025d0 <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002598:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 800259a:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 800259c:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800259e:	6003      	str	r3, [r0, #0]
 80025a0:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80025a2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80025a6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80025aa:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80025ae:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80025b2:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80025b6:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 80025ba:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80025be:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 80025c2:	2001      	movs	r0, #1
 80025c4:	f00a fbf4 	bl	800cdb0 <osSemaphoreNew>
 80025c8:	4b02      	ldr	r3, [pc, #8]	@ (80025d4 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 80025ca:	6018      	str	r0, [r3, #0]
}
 80025cc:	4620      	mov	r0, r4
 80025ce:	bd10      	pop	{r4, pc}
 80025d0:	080267e0 	.word	0x080267e0
 80025d4:	24009f38 	.word	0x24009f38

080025d8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 80025d8:	b410      	push	{r4}
 80025da:	460c      	mov	r4, r1
 80025dc:	4611      	mov	r1, r2
 80025de:	461a      	mov	r2, r3
    if (reader != 0)
 80025e0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80025e2:	b13b      	cbz	r3, 80025f4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80025e4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80025e6:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80025e8:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 80025ea:	4420      	add	r0, r4
}
 80025ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 80025f0:	f021 bafe 	b.w	8023bf0 <strncmp>
        src = (const char*)movieData + offset;
 80025f4:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80025f6:	e7f8      	b.n	80025ea <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

080025f8 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 80025f8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 80025fa:	b510      	push	{r4, lr}
    if (reader != 0)
 80025fc:	b173      	cbz	r3, 800261c <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 80025fe:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002600:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 8002602:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002604:	1853      	adds	r3, r2, r1
 8002606:	5c52      	ldrb	r2, [r2, r1]
 8002608:	7898      	ldrb	r0, [r3, #2]
 800260a:	785c      	ldrb	r4, [r3, #1]
 800260c:	0400      	lsls	r0, r0, #16
 800260e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 8002612:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002614:	78db      	ldrb	r3, [r3, #3]
 8002616:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800261a:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 800261c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800261e:	1853      	adds	r3, r2, r1
        val |= d[0];
 8002620:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 8002622:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002624:	7898      	ldrb	r0, [r3, #2]
 8002626:	0400      	lsls	r0, r0, #16
 8002628:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800262c:	e7f1      	b.n	8002612 <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800262e <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800262e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002630:	b143      	cbz	r3, 8002644 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 8002632:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002634:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002636:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002638:	185a      	adds	r2, r3, r1
 800263a:	5c58      	ldrb	r0, [r3, r1]
 800263c:	7852      	ldrb	r2, [r2, #1]
 800263e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002642:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8002644:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002646:	185a      	adds	r2, r3, r1
        val |= d[0];
 8002648:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 800264a:	7853      	ldrb	r3, [r2, #1]
 800264c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8002650:	4770      	bx	lr
	...

08002654 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	4604      	mov	r4, r0
    if (reader != 0)
 8002658:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 800265a:	460d      	mov	r5, r1
 800265c:	4616      	mov	r6, r2
    if (reader != 0)
 800265e:	b1d8      	cbz	r0, 8002698 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002660:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002662:	4293      	cmp	r3, r2
 8002664:	d208      	bcs.n	8002678 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002666:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002668:	4a0d      	ldr	r2, [pc, #52]	@ (80026a0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 800266a:	21a0      	movs	r1, #160	@ 0xa0
 800266c:	480d      	ldr	r0, [pc, #52]	@ (80026a4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800266e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 8002672:	4b0d      	ldr	r3, [pc, #52]	@ (80026a8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8002674:	f021 f818 	bl	80236a8 <__assert_func>
        reader->seek(offset);
 8002678:	6803      	ldr	r3, [r0, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800267e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002680:	4632      	mov	r2, r6
 8002682:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002684:	6803      	ldr	r3, [r0, #0]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	4798      	blx	r3
 800268a:	b910      	cbnz	r0, 8002692 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 800268c:	230d      	movs	r3, #13
 800268e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 8002692:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 8002694:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 8002696:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8002698:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800269a:	4408      	add	r0, r1
 800269c:	e7fb      	b.n	8002696 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 800269e:	bf00      	nop
 80026a0:	08024a79 	.word	0x08024a79
 80026a4:	08024a0e 	.word	0x08024a0e
 80026a8:	08024a66 	.word	0x08024a66

080026ac <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80026ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80026b0:	6943      	ldr	r3, [r0, #20]
{
 80026b2:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80026b4:	b92b      	cbnz	r3, 80026c2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80026b6:	4b22      	ldr	r3, [pc, #136]	@ (8002740 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80026b8:	21e6      	movs	r1, #230	@ 0xe6
 80026ba:	4a22      	ldr	r2, [pc, #136]	@ (8002744 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80026bc:	4822      	ldr	r0, [pc, #136]	@ (8002748 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80026be:	f020 fff3 	bl	80236a8 <__assert_func>
    readData(currentMovieOffset, 8);
 80026c2:	2208      	movs	r2, #8
 80026c4:	6981      	ldr	r1, [r0, #24]
 80026c6:	f7ff ffc5 	bl	8002654 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80026ca:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80026cc:	f243 0630 	movw	r6, #12336	@ 0x3030
 80026d0:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80026d4:	3104      	adds	r1, #4
 80026d6:	4620      	mov	r0, r4
 80026d8:	f7ff ff8e 	bl	80025f8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80026dc:	69a3      	ldr	r3, [r4, #24]
 80026de:	4418      	add	r0, r3
 80026e0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80026e2:	f100 0208 	add.w	r2, r0, #8
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d306      	bcc.n	80026f8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 80026ea:	2301      	movs	r3, #1
    return false;
 80026ec:	2000      	movs	r0, #0
    frameNumber = 1;
 80026ee:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 80026f0:	6a23      	ldr	r3, [r4, #32]
 80026f2:	61a3      	str	r3, [r4, #24]
}
 80026f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 80026f8:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80026fa:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 80026fe:	2208      	movs	r2, #8
 8002700:	4620      	mov	r0, r4
        frameNumber++;
 8002702:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002704:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002708:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800270a:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 800270c:	f7ff ffa2 	bl	8002654 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002710:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002714:	4620      	mov	r0, r4
 8002716:	4649      	mov	r1, r9
 8002718:	f7ff ff89 	bl	800262e <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800271c:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002720:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002722:	4620      	mov	r0, r4
 8002724:	f7ff ff83 	bl	800262e <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002728:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800272c:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800272e:	4620      	mov	r0, r4
 8002730:	f7ff ff62 	bl	80025f8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002734:	45b0      	cmp	r8, r6
 8002736:	d1d1      	bne.n	80026dc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002738:	42bd      	cmp	r5, r7
 800273a:	d1cf      	bne.n	80026dc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 800273c:	2001      	movs	r0, #1
 800273e:	e7d9      	b.n	80026f4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 8002740:	08024abb 	.word	0x08024abb
 8002744:	08024b04 	.word	0x08024b04
 8002748:	08024a0e 	.word	0x08024a0e

0800274c <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 800274c:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800274e:	6803      	ldr	r3, [r0, #0]
 8002750:	bf38      	it	cc
 8002752:	2101      	movcc	r1, #1
 8002754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8002756:	b570      	push	{r4, r5, r6, lr}
 8002758:	460d      	mov	r5, r1
 800275a:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 800275c:	4798      	blx	r3
 800275e:	42a8      	cmp	r0, r5
 8002760:	d204      	bcs.n	800276c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	4620      	mov	r0, r4
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	4798      	blx	r3
 800276a:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 800276c:	1e6b      	subs	r3, r5, #1
 800276e:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8002770:	2210      	movs	r2, #16
 8002772:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002774:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8002778:	f106 0108 	add.w	r1, r6, #8
 800277c:	f7ff ff6a 	bl	8002654 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8002780:	f106 0110 	add.w	r1, r6, #16
 8002784:	4620      	mov	r0, r4
 8002786:	f7ff ff37 	bl	80025f8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800278a:	6a23      	ldr	r3, [r4, #32]
 800278c:	3b04      	subs	r3, #4
 800278e:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002790:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002794:	bd70      	pop	{r4, r5, r6, pc}
	...

08002798 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 8002798:	2100      	movs	r1, #0
    readData(0, 72);
 800279a:	2248      	movs	r2, #72	@ 0x48
{
 800279c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027a0:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80027a2:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80027a4:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 80027a8:	f7ff ff54 	bl	8002654 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80027ac:	69a6      	ldr	r6, [r4, #24]
 80027ae:	2304      	movs	r3, #4
 80027b0:	4a63      	ldr	r2, [pc, #396]	@ (8002940 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80027b2:	4631      	mov	r1, r6
 80027b4:	4620      	mov	r0, r4
 80027b6:	f7ff ff0f 	bl	80025d8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80027ba:	b148      	cbz	r0, 80027d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80027bc:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80027be:	4a61      	ldr	r2, [pc, #388]	@ (8002944 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80027c0:	f44f 7197 	mov.w	r1, #302	@ 0x12e
        lastError = AVI_ERROR_NOT_RIFF;
 80027c4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 80027c8:	4b5f      	ldr	r3, [pc, #380]	@ (8002948 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80027ca:	4860      	ldr	r0, [pc, #384]	@ (800294c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 80027cc:	f020 ff6c 	bl	80236a8 <__assert_func>
    currentMovieOffset += 8;
 80027d0:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80027d4:	2304      	movs	r3, #4
 80027d6:	4a5e      	ldr	r2, [pc, #376]	@ (8002950 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80027d8:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80027da:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80027dc:	f7ff fefc 	bl	80025d8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80027e0:	b138      	cbz	r0, 80027f2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80027e2:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80027e4:	4a57      	ldr	r2, [pc, #348]	@ (8002944 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80027e6:	f44f 719b 	mov.w	r1, #310	@ 0x136
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80027ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 80027ee:	4b59      	ldr	r3, [pc, #356]	@ (8002954 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80027f0:	e7eb      	b.n	80027ca <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 80027f2:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 80027f6:	2304      	movs	r3, #4
 80027f8:	4a57      	ldr	r2, [pc, #348]	@ (8002958 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 80027fa:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 80027fc:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 80027fe:	f7ff feeb 	bl	80025d8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002802:	4607      	mov	r7, r0
 8002804:	b138      	cbz	r0, 8002816 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002806:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002808:	4a4e      	ldr	r2, [pc, #312]	@ (8002944 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800280a:	f240 113d 	movw	r1, #317	@ 0x13d
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800280e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 8002812:	4b52      	ldr	r3, [pc, #328]	@ (800295c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002814:	e7d9      	b.n	80027ca <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002816:	f106 0110 	add.w	r1, r6, #16
 800281a:	4620      	mov	r0, r4
 800281c:	f7ff feec 	bl	80025f8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002820:	4605      	mov	r5, r0
 8002822:	b920      	cbnz	r0, 800282e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002824:	4b4e      	ldr	r3, [pc, #312]	@ (8002960 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002826:	f240 1143 	movw	r1, #323	@ 0x143
 800282a:	4a46      	ldr	r2, [pc, #280]	@ (8002944 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800282c:	e7cd      	b.n	80027ca <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800282e:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 8002832:	2304      	movs	r3, #4
 8002834:	4a4b      	ldr	r2, [pc, #300]	@ (8002964 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002836:	4620      	mov	r0, r4
 8002838:	4641      	mov	r1, r8
 800283a:	f7ff fecd 	bl	80025d8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800283e:	2800      	cmp	r0, #0
 8002840:	d049      	beq.n	80028d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8002842:	2306      	movs	r3, #6
 8002844:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 8002848:	2304      	movs	r3, #4
 800284a:	4a47      	ldr	r2, [pc, #284]	@ (8002968 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 800284c:	f106 0118 	add.w	r1, r6, #24
 8002850:	4620      	mov	r0, r4
 8002852:	f7ff fec1 	bl	80025d8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002856:	2800      	cmp	r0, #0
 8002858:	d03f      	beq.n	80028da <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800285a:	2307      	movs	r3, #7
 800285c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002860:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002862:	4f42      	ldr	r7, [pc, #264]	@ (800296c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002864:	220c      	movs	r2, #12
 8002866:	4620      	mov	r0, r4
 8002868:	4629      	mov	r1, r5
 800286a:	f7ff fef3 	bl	8002654 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800286e:	f105 0608 	add.w	r6, r5, #8
 8002872:	2304      	movs	r3, #4
 8002874:	463a      	mov	r2, r7
 8002876:	4620      	mov	r0, r4
 8002878:	4631      	mov	r1, r6
 800287a:	f7ff fead 	bl	80025d8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800287e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002882:	2800      	cmp	r0, #0
 8002884:	d048      	beq.n	8002918 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002886:	2b00      	cmp	r3, #0
 8002888:	d148      	bne.n	800291c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 800288a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800288c:	42ab      	cmp	r3, r5
 800288e:	d849      	bhi.n	8002924 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002890:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002894:	3504      	adds	r5, #4
 8002896:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002898:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800289a:	4629      	mov	r1, r5
 800289c:	f7ff feac 	bl	80025f8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80028a0:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80028a2:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80028a4:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80028a6:	4620      	mov	r0, r4
 80028a8:	f7ff fea6 	bl	80025f8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80028ac:	4406      	add	r6, r0
    readData(listOffset, 4);
 80028ae:	2204      	movs	r2, #4
 80028b0:	4620      	mov	r0, r4
 80028b2:	4631      	mov	r1, r6
 80028b4:	f7ff fece 	bl	8002654 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80028b8:	2304      	movs	r3, #4
 80028ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002970 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80028bc:	4631      	mov	r1, r6
 80028be:	4620      	mov	r0, r4
 80028c0:	f7ff fe8a 	bl	80025d8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80028c4:	2800      	cmp	r0, #0
 80028c6:	d138      	bne.n	800293a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 80028c8:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80028ca:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 80028cc:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80028ce:	69a3      	ldr	r3, [r4, #24]
 80028d0:	6223      	str	r3, [r4, #32]
}
 80028d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80028d6:	2701      	movs	r7, #1
 80028d8:	e7b6      	b.n	8002848 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 80028da:	2f00      	cmp	r7, #0
 80028dc:	d0c0      	beq.n	8002860 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80028de:	f106 0120 	add.w	r1, r6, #32
 80028e2:	4620      	mov	r0, r4
 80028e4:	f7ff fe88 	bl	80025f8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80028e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 80028ec:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80028f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80028f4:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7ff fe7e 	bl	80025f8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 80028fc:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002900:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002902:	4620      	mov	r0, r4
 8002904:	f7ff fe78 	bl	80025f8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002908:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 800290c:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800290e:	4620      	mov	r0, r4
 8002910:	f7ff fe72 	bl	80025f8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002914:	6120      	str	r0, [r4, #16]
 8002916:	e7a3      	b.n	8002860 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0b9      	beq.n	8002890 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 800291c:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800291e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 8002922:	e7d6      	b.n	80028d2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002924:	1d29      	adds	r1, r5, #4
 8002926:	4620      	mov	r0, r4
 8002928:	f7ff fe66 	bl	80025f8 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 800292c:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800292e:	220c      	movs	r2, #12
 8002930:	4620      	mov	r0, r4
 8002932:	4629      	mov	r1, r5
 8002934:	f7ff fe8e 	bl	8002654 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002938:	e799      	b.n	800286e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800293a:	230b      	movs	r3, #11
 800293c:	e7ef      	b.n	800291e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 800293e:	bf00      	nop
 8002940:	08024b37 	.word	0x08024b37
 8002944:	08024b55 	.word	0x08024b55
 8002948:	08024b3c 	.word	0x08024b3c
 800294c:	08024a0e 	.word	0x08024a0e
 8002950:	08024b82 	.word	0x08024b82
 8002954:	08024b87 	.word	0x08024b87
 8002958:	08024b9f 	.word	0x08024b9f
 800295c:	08024ba4 	.word	0x08024ba4
 8002960:	08024bba 	.word	0x08024bba
 8002964:	08024bc6 	.word	0x08024bc6
 8002968:	08024bcb 	.word	0x08024bcb
 800296c:	08024bd0 	.word	0x08024bd0
 8002970:	08024bd5 	.word	0x08024bd5

08002974 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002974:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 8002978:	2200      	movs	r2, #0
 800297a:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 800297c:	f7ff bf0c 	b.w	8002798 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

08002980 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8002980:	b510      	push	{r4, lr}
    movieData = 0;
 8002982:	2300      	movs	r3, #0
{
 8002984:	4604      	mov	r4, r0
 8002986:	4608      	mov	r0, r1
    movieData = 0;
 8002988:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 800298a:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 800298c:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4798      	blx	r3
 8002992:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 8002994:	4620      	mov	r0, r4
}
 8002996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 800299a:	f7ff befd 	b.w	8002798 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080029a0 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80029a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JPEG_output_is_paused = 0;
 80029a2:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <JPEG_Decode_DMA+0x50>)
 80029a4:	2400      	movs	r4, #0
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 80029a6:	4d13      	ldr	r5, [pc, #76]	@ (80029f4 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
 80029a8:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80029aa:	4b13      	ldr	r3, [pc, #76]	@ (80029f8 <JPEG_Decode_DMA+0x58>)
 80029ac:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80029ae:	4b13      	ldr	r3, [pc, #76]	@ (80029fc <JPEG_Decode_DMA+0x5c>)
        JPEG_OUT_Write_BufferIndex = 0;
 80029b0:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 80029b2:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80029b4:	4b12      	ldr	r3, [pc, #72]	@ (8002a00 <JPEG_Decode_DMA+0x60>)
 80029b6:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80029b8:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <JPEG_Decode_DMA+0x64>)
 80029ba:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 80029bc:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <JPEG_Decode_DMA+0x68>)
 80029be:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80029c0:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <JPEG_Decode_DMA+0x6c>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80029c2:	682a      	ldr	r2, [r5, #0]
 80029c4:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80029c8:	701c      	strb	r4, [r3, #0]
 80029ca:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 80029cc:	e9c3 4402 	strd	r4, r4, [r3, #8]
 80029d0:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80029d4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80029d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a10 <JPEG_Decode_DMA+0x70>)
 80029da:	68d2      	ldr	r2, [r2, #12]
 80029dc:	436a      	muls	r2, r5
 80029de:	9200      	str	r2, [sp, #0]
 80029e0:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f005 ff45 	bl	8008874 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 80029ea:	4620      	mov	r0, r4
 80029ec:	b003      	add	sp, #12
 80029ee:	bd30      	pop	{r4, r5, pc}
 80029f0:	24009f50 	.word	0x24009f50
 80029f4:	24009f40 	.word	0x24009f40
 80029f8:	24009f34 	.word	0x24009f34
 80029fc:	24009f60 	.word	0x24009f60
 8002a00:	24009f58 	.word	0x24009f58
 8002a04:	24009f5c 	.word	0x24009f5c
 8002a08:	24009f3c 	.word	0x24009f3c
 8002a0c:	24000010 	.word	0x24000010
 8002a10:	24009f1c 	.word	0x24009f1c

08002a14 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002a14:	684b      	ldr	r3, [r1, #4]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d115      	bne.n	8002a46 <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 8002a1a:	68cb      	ldr	r3, [r1, #12]
 8002a1c:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002a1e:	bf1e      	ittt	ne
 8002a20:	f023 030f 	bicne.w	r3, r3, #15
 8002a24:	3310      	addne	r3, #16
 8002a26:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 8002a28:	688b      	ldr	r3, [r1, #8]
 8002a2a:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8002a2c:	bf1e      	ittt	ne
 8002a2e:	f023 030f 	bicne.w	r3, r3, #15
 8002a32:	3310      	addne	r3, #16
 8002a34:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002a36:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002a38:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002a3a:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002a3c:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 8002a3e:	4353      	muls	r3, r2
 8002a40:	4a0e      	ldr	r2, [pc, #56]	@ (8002a7c <HAL_JPEG_InfoReadyCallback+0x68>)
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d10e      	bne.n	8002a68 <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 8002a4a:	68cb      	ldr	r3, [r1, #12]
 8002a4c:	071a      	lsls	r2, r3, #28
 8002a4e:	d003      	beq.n	8002a58 <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002a50:	f023 030f 	bic.w	r3, r3, #15
 8002a54:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002a56:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8002a58:	688b      	ldr	r3, [r1, #8]
 8002a5a:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002a5c:	bf1e      	ittt	ne
 8002a5e:	f023 0307 	bicne.w	r3, r3, #7
 8002a62:	3308      	addne	r3, #8
 8002a64:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 8002a66:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1fc      	bne.n	8002a66 <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 8002a6c:	68cb      	ldr	r3, [r1, #12]
 8002a6e:	0758      	lsls	r0, r3, #29
 8002a70:	d0f2      	beq.n	8002a58 <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002a72:	f023 0307 	bic.w	r3, r3, #7
 8002a76:	3308      	adds	r3, #8
 8002a78:	e7ed      	b.n	8002a56 <HAL_JPEG_InfoReadyCallback+0x42>
 8002a7a:	bf00      	nop
 8002a7c:	24009f48 	.word	0x24009f48

08002a80 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8002a80:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab0 <HAL_JPEG_GetDataCallback+0x30>)
 8002a82:	6813      	ldr	r3, [r2, #0]
 8002a84:	440b      	add	r3, r1
    {
 8002a86:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 8002a88:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <HAL_JPEG_GetDataCallback+0x34>)
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d20c      	bcs.n	8002aac <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002a92:	4c09      	ldr	r4, [pc, #36]	@ (8002ab8 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8002a94:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002a96:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002a98:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002a9c:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002a9e:	bf28      	it	cs
 8002aa0:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002aa4:	6021      	str	r1, [r4, #0]
        }
    }
 8002aa6:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002aa8:	f005 bf46 	b.w	8008938 <HAL_JPEG_ConfigInputBuffer>
    }
 8002aac:	bc30      	pop	{r4, r5}
 8002aae:	4770      	bx	lr
 8002ab0:	24009f60 	.word	0x24009f60
 8002ab4:	24009f5c 	.word	0x24009f5c
 8002ab8:	24009f58 	.word	0x24009f58

08002abc <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8002abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002abe:	4c20      	ldr	r4, [pc, #128]	@ (8002b40 <HAL_JPEG_DataReadyCallback+0x84>)
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	4d20      	ldr	r5, [pc, #128]	@ (8002b44 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8002ac4:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002ac6:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002ac8:	4f1f      	ldr	r7, [pc, #124]	@ (8002b48 <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002ad4:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 8002ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b4c <HAL_JPEG_DataReadyCallback+0x90>)
 8002ad8:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 8002ada:	6822      	ldr	r2, [r4, #0]
 8002adc:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8002ae0:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68f9      	ldr	r1, [r7, #12]
 8002ae6:	440a      	add	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	3301      	adds	r3, #1
 8002aee:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d901      	bls.n	8002afa <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	5ceb      	ldrb	r3, [r5, r3]
 8002b00:	b133      	cbz	r3, 8002b10 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002b02:	2102      	movs	r1, #2
 8002b04:	4630      	mov	r0, r6
 8002b06:	f005 fee9 	bl	80088dc <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <HAL_JPEG_DataReadyCallback+0x94>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002b10:	6822      	ldr	r2, [r4, #0]
 8002b12:	4630      	mov	r0, r6
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 8002b1a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002b1e:	6869      	ldr	r1, [r5, #4]
 8002b20:	435a      	muls	r2, r3
 8002b22:	f005 ff0c 	bl	800893e <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 8002b26:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <HAL_JPEG_DataReadyCallback+0x98>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	7a1a      	ldrb	r2, [r3, #8]
 8002b2c:	b93a      	cbnz	r2, 8002b3e <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002b2e:	7a9b      	ldrb	r3, [r3, #10]
 8002b30:	b92b      	cbnz	r3, 8002b3e <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002b32:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <HAL_JPEG_DataReadyCallback+0x9c>)
 8002b34:	6818      	ldr	r0, [r3, #0]
        }
    }
 8002b36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 8002b3a:	f00a b9af 	b.w	800ce9c <osSemaphoreRelease>
    }
 8002b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b40:	24009f40 	.word	0x24009f40
 8002b44:	24000010 	.word	0x24000010
 8002b48:	24009f1c 	.word	0x24009f1c
 8002b4c:	24009f3c 	.word	0x24009f3c
 8002b50:	24009f50 	.word	0x24009f50
 8002b54:	24009f44 	.word	0x24009f44
 8002b58:	24009f38 	.word	0x24009f38

08002b5c <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002b5c:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002b5e:	e7fe      	b.n	8002b5e <HAL_JPEG_ErrorCallback+0x2>

08002b60 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002b60:	4b01      	ldr	r3, [pc, #4]	@ (8002b68 <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
    }
 8002b66:	4770      	bx	lr
 8002b68:	24009f54 	.word	0x24009f54

08002b6c <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002b6c:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002b6e:	4d16      	ldr	r5, [pc, #88]	@ (8002bc8 <JPEG_OutputHandler+0x5c>)
{
 8002b70:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002b72:	682b      	ldr	r3, [r5, #0]
 8002b74:	b113      	cbz	r3, 8002b7c <JPEG_OutputHandler+0x10>
 8002b76:	4b15      	ldr	r3, [pc, #84]	@ (8002bcc <JPEG_OutputHandler+0x60>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	bb1b      	cbnz	r3, 8002bc4 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002b7c:	4b14      	ldr	r3, [pc, #80]	@ (8002bd0 <JPEG_OutputHandler+0x64>)
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	7a03      	ldrb	r3, [r0, #8]
 8002b82:	b963      	cbnz	r3, 8002b9e <JPEG_OutputHandler+0x32>
 8002b84:	4b13      	ldr	r3, [pc, #76]	@ (8002bd4 <JPEG_OutputHandler+0x68>)
 8002b86:	4a14      	ldr	r2, [pc, #80]	@ (8002bd8 <JPEG_OutputHandler+0x6c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d105      	bne.n	8002b9e <JPEG_OutputHandler+0x32>
 8002b92:	4b0e      	ldr	r3, [pc, #56]	@ (8002bcc <JPEG_OutputHandler+0x60>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	b913      	cbnz	r3, 8002b9e <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 8002b98:	6803      	ldr	r3, [r0, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 8002b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8002bdc <JPEG_OutputHandler+0x70>)
 8002ba0:	6813      	ldr	r3, [r2, #0]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d10c      	bne.n	8002bc0 <JPEG_OutputHandler+0x54>
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8002be0 <JPEG_OutputHandler+0x74>)
 8002ba8:	490b      	ldr	r1, [pc, #44]	@ (8002bd8 <JPEG_OutputHandler+0x6c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	b933      	cbnz	r3, 8002bc0 <JPEG_OutputHandler+0x54>
 8002bb2:	682b      	ldr	r3, [r5, #0]
 8002bb4:	b923      	cbnz	r3, 8002bc0 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 8002bba:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002bbc:	f006 f8eb 	bl	8008d96 <HAL_JPEG_Resume>
        return 1;
 8002bc0:	2002      	movs	r0, #2
    }

    return 2;
}
 8002bc2:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	e7fc      	b.n	8002bc2 <JPEG_OutputHandler+0x56>
 8002bc8:	24009f54 	.word	0x24009f54
 8002bcc:	24009f30 	.word	0x24009f30
 8002bd0:	24009f44 	.word	0x24009f44
 8002bd4:	24009f34 	.word	0x24009f34
 8002bd8:	24000010 	.word	0x24000010
 8002bdc:	24009f50 	.word	0x24009f50
 8002be0:	24009f40 	.word	0x24009f40

08002be4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	4605      	mov	r5, r0
    if (length == 0)
 8002be8:	2a00      	cmp	r2, #0
 8002bea:	d037      	beq.n	8002c5c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d035      	beq.n	8002c5c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002bf0:	481b      	ldr	r0, [pc, #108]	@ (8002c60 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002bf2:	2403      	movs	r4, #3
 8002bf4:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002bf6:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8002bf8:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002bfa:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002bfe:	bf18      	it	ne
 8002c00:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002c04:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002c06:	bf18      	it	ne
 8002c08:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002c0a:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002c0c:	0924      	lsrs	r4, r4, #4
 8002c0e:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002c10:	692c      	ldr	r4, [r5, #16]
 8002c12:	f014 040f 	ands.w	r4, r4, #15
 8002c16:	bf18      	it	ne
 8002c18:	f1c4 0410 	rsbne	r4, r4, #16
 8002c1c:	6084      	str	r4, [r0, #8]
        FrameBufferAddress = outputBuffer;
 8002c1e:	4811      	ldr	r0, [pc, #68]	@ (8002c64 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002c20:	4c11      	ldr	r4, [pc, #68]	@ (8002c68 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
        FrameBufferAddress = outputBuffer;
 8002c22:	6003      	str	r3, [r0, #0]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002c24:	4811      	ldr	r0, [pc, #68]	@ (8002c6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002c26:	f7ff febb 	bl	80029a0 <JPEG_Decode_DMA>
        DMA2D_reference = dma;
 8002c2a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8002c2c:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002c2e:	4d0f      	ldr	r5, [pc, #60]	@ (8002c6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
        DMA2D_reference = dma;
 8002c30:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002c32:	4628      	mov	r0, r5
 8002c34:	f7ff ff9a 	bl	8002b6c <JPEG_OutputHandler>
 8002c38:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d105      	bne.n	8002c4c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>
                SEM_WAIT(semDecodingDone);
 8002c40:	4b0c      	ldr	r3, [pc, #48]	@ (8002c74 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 8002c42:	f04f 31ff 	mov.w	r1, #4294967295
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	f00a f8fc 	bl	800ce44 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 8002c4c:	6823      	ldr	r3, [r4, #0]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d1ef      	bne.n	8002c32 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4e>
        Jpeg_HWDecodingEnd = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	4a08      	ldr	r2, [pc, #32]	@ (8002c78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x94>)
 8002c56:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002c58:	4a08      	ldr	r2, [pc, #32]	@ (8002c7c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x98>)
 8002c5a:	6013      	str	r3, [r2, #0]
}
 8002c5c:	bd70      	pop	{r4, r5, r6, pc}
 8002c5e:	bf00      	nop
 8002c60:	24009f1c 	.word	0x24009f1c
 8002c64:	24009f64 	.word	0x24009f64
 8002c68:	24009f4c 	.word	0x24009f4c
 8002c6c:	24009c2c 	.word	0x24009c2c
 8002c70:	24009f44 	.word	0x24009f44
 8002c74:	24009f38 	.word	0x24009f38
 8002c78:	24009f54 	.word	0x24009f54
 8002c7c:	24009f30 	.word	0x24009f30

08002c80 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c84:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002c86:	6943      	ldr	r3, [r0, #20]
{
 8002c88:	b085      	sub	sp, #20
 8002c8a:	4604      	mov	r4, r0
 8002c8c:	460f      	mov	r7, r1
 8002c8e:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002c90:	b92b      	cbnz	r3, 8002c9e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8002c92:	4b29      	ldr	r3, [pc, #164]	@ (8002d38 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 8002c94:	21b2      	movs	r1, #178	@ 0xb2
 8002c96:	4a29      	ldr	r2, [pc, #164]	@ (8002d3c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002c98:	4829      	ldr	r0, [pc, #164]	@ (8002d40 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002c9a:	f020 fd05 	bl	80236a8 <__assert_func>
    readData(currentMovieOffset, 8);
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	6981      	ldr	r1, [r0, #24]
 8002ca2:	f7ff fcd7 	bl	8002654 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002ca6:	69a6      	ldr	r6, [r4, #24]
 8002ca8:	4620      	mov	r0, r4
 8002caa:	4631      	mov	r1, r6
 8002cac:	f7ff fcbf 	bl	800262e <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002cb0:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002cb2:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f7ff fcba 	bl	800262e <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002cba:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002cbc:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f7ff fc9a 	bl	80025f8 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002cc4:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002cc8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002cca:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002ccc:	180a      	adds	r2, r1, r0
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d226      	bcs.n	8002d20 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002cd2:	f243 0330 	movw	r3, #12336	@ 0x3030
 8002cd6:	459b      	cmp	fp, r3
 8002cd8:	d117      	bne.n	8002d0a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002cda:	f246 3364 	movw	r3, #25444	@ 0x6364
 8002cde:	459a      	cmp	sl, r3
 8002ce0:	d113      	bne.n	8002d0a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002ce2:	b190      	cbz	r0, 8002d0a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002ce4:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002ce6:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f7ff fcb3 	bl	8002654 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002cee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002cf0:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002cf2:	462a      	mov	r2, r5
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f8cd 8000 	str.w	r8, [sp]
 8002cfa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002cfe:	463b      	mov	r3, r7
 8002d00:	f7ff ff70 	bl	8002be4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002d04:	6963      	ldr	r3, [r4, #20]
 8002d06:	3301      	adds	r3, #1
 8002d08:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002d0a:	69a3      	ldr	r3, [r4, #24]
 8002d0c:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8002d0e:	b905      	cbnz	r5, 8002d12 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8002d10:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002d12:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002d14:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002d16:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002d1a:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002d1c:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002d1e:	d109      	bne.n	8002d34 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8002d20:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8002d22:	2001      	movs	r0, #1
        frameNumber = 1;
 8002d24:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002d26:	6a23      	ldr	r3, [r4, #32]
 8002d28:	61a3      	str	r3, [r4, #24]
}
 8002d2a:	f080 0001 	eor.w	r0, r0, #1
 8002d2e:	b005      	add	sp, #20
 8002d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002d34:	2000      	movs	r0, #0
 8002d36:	e7f8      	b.n	8002d2a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002d38:	08024abb 	.word	0x08024abb
 8002d3c:	08024bda 	.word	0x08024bda
 8002d40:	08024a0e 	.word	0x08024a0e

08002d44 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d46:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002d48:	6981      	ldr	r1, [r0, #24]
{
 8002d4a:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002d4c:	2208      	movs	r2, #8
 8002d4e:	f7ff fc81 	bl	8002654 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002d52:	69a7      	ldr	r7, [r4, #24]
 8002d54:	4620      	mov	r0, r4
 8002d56:	1d39      	adds	r1, r7, #4
 8002d58:	f7ff fc4e 	bl	80025f8 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002d5c:	f107 0108 	add.w	r1, r7, #8
 8002d60:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002d62:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002d64:	4620      	mov	r0, r4
 8002d66:	f7ff fc75 	bl	8002654 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002d6a:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002d6c:	b16e      	cbz	r6, 8002d8a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002d6e:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002d70:	4c07      	ldr	r4, [pc, #28]	@ (8002d90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8002d72:	4d08      	ldr	r5, [pc, #32]	@ (8002d94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002d74:	4633      	mov	r3, r6
 8002d76:	4807      	ldr	r0, [pc, #28]	@ (8002d94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002d78:	f7ff fe12 	bl	80029a0 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	f7ff fef5 	bl	8002b6c <JPEG_OutputHandler>
 8002d82:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f8      	beq.n	8002d7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	24009f4c 	.word	0x24009f4c
 8002d94:	24009c2c 	.word	0x24009c2c

08002d98 <DMA2D_CopyBuffer>:
 * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
 * @param job: External job reference
 * @retval None
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
 8002d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t yRef, refline;
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002d9a:	68c7      	ldr	r7, [r0, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002d9c:	2201      	movs	r2, #1
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002d9e:	4c15      	ldr	r4, [pc, #84]	@ (8002df4 <DMA2D_CopyBuffer+0x5c>)
 8002da0:	0139      	lsls	r1, r7, #4

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002da2:	4e15      	ldr	r6, [pc, #84]	@ (8002df8 <DMA2D_CopyBuffer+0x60>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	fbb1 f1f3 	udiv	r1, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;
 8002daa:	6863      	ldr	r3, [r4, #4]
 8002dac:	4359      	muls	r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002dae:	4b13      	ldr	r3, [pc, #76]	@ (8002dfc <DMA2D_CopyBuffer+0x64>)
 8002db0:	635a      	str	r2, [r3, #52]	@ 0x34
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;
 8002db2:	0109      	lsls	r1, r1, #4
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002db4:	68e2      	ldr	r2, [r4, #12]
 8002db6:	6836      	ldr	r6, [r6, #0]
    {
        WRITE_REG(DMA2D->NLR, ((MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight) | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002db8:	0515      	lsls	r5, r2, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002dba:	1ab6      	subs	r6, r6, r2
 8002dbc:	42b7      	cmp	r7, r6
 8002dbe:	d315      	bcc.n	8002dec <DMA2D_CopyBuffer+0x54>
        WRITE_REG(DMA2D->NLR, ((MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight) | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002dc0:	68a4      	ldr	r4, [r4, #8]
 8002dc2:	f1c4 0410 	rsb	r4, r4, #16
 8002dc6:	432c      	orrs	r4, r5
 8002dc8:	645c      	str	r4, [r3, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002dca:	4c0d      	ldr	r4, [pc, #52]	@ (8002e00 <DMA2D_CopyBuffer+0x68>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002dcc:	f1c2 0232 	rsb	r2, r2, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002dd0:	6824      	ldr	r4, [r4, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002dd2:	0112      	lsls	r2, r2, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002dd4:	4421      	add	r1, r4
 8002dd6:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002dd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8002dde:	4a09      	ldr	r2, [pc, #36]	@ (8002e04 <DMA2D_CopyBuffer+0x6c>)
 8002de0:	61da      	str	r2, [r3, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002de2:	6842      	ldr	r2, [r0, #4]
 8002de4:	60da      	str	r2, [r3, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002de6:	4a08      	ldr	r2, [pc, #32]	@ (8002e08 <DMA2D_CopyBuffer+0x70>)
 8002de8:	601a      	str	r2, [r3, #0]
}
 8002dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002dec:	f045 0510 	orr.w	r5, r5, #16
 8002df0:	645d      	str	r5, [r3, #68]	@ 0x44
 8002df2:	e7ea      	b.n	8002dca <DMA2D_CopyBuffer+0x32>
 8002df4:	24009f1c 	.word	0x24009f1c
 8002df8:	24009f48 	.word	0x24009f48
 8002dfc:	52001000 	.word	0x52001000
 8002e00:	24009f64 	.word	0x24009f64
 8002e04:	ff09000b 	.word	0xff09000b
 8002e08:	00012301 	.word	0x00012301

08002e0c <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e40 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 8002e0e:	2200      	movs	r2, #0
 8002e10:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002e12:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002e14:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002e16:	3101      	adds	r1, #1
 8002e18:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002e1a:	6819      	ldr	r1, [r3, #0]
 8002e1c:	2901      	cmp	r1, #1
 8002e1e:	d900      	bls.n	8002e22 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002e20:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002e22:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <DMA2D_ExternalJobCompleted+0x38>)
 8002e24:	4a08      	ldr	r2, [pc, #32]	@ (8002e48 <DMA2D_ExternalJobCompleted+0x3c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68d2      	ldr	r2, [r2, #12]
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	68c2      	ldr	r2, [r0, #12]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d302      	bcc.n	8002e38 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002e32:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <DMA2D_ExternalJobCompleted+0x40>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002e38:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <DMA2D_ExternalJobCompleted+0x44>)
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	f00a b82e 	b.w	800ce9c <osSemaphoreRelease>
 8002e40:	24009f34 	.word	0x24009f34
 8002e44:	24009f48 	.word	0x24009f48
 8002e48:	24009f1c 	.word	0x24009f1c
 8002e4c:	24009f30 	.word	0x24009f30
 8002e50:	24009f38 	.word	0x24009f38

08002e54 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002e54:	2101      	movs	r1, #1
 8002e56:	2200      	movs	r2, #0
{
 8002e58:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002e5a:	4608      	mov	r0, r1
 8002e5c:	f009 ffa8 	bl	800cdb0 <osSemaphoreNew>
 8002e60:	4b0a      	ldr	r3, [pc, #40]	@ (8002e8c <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002e62:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002e64:	b928      	cbnz	r0, 8002e72 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002e66:	4b0a      	ldr	r3, [pc, #40]	@ (8002e90 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002e68:	2128      	movs	r1, #40	@ 0x28
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e94 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002e6c:	480a      	ldr	r0, [pc, #40]	@ (8002e98 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002e6e:	f020 fc1b 	bl	80236a8 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2104      	movs	r1, #4
 8002e76:	2001      	movs	r0, #1
 8002e78:	f00a f842 	bl	800cf00 <osMessageQueueNew>
 8002e7c:	4b07      	ldr	r3, [pc, #28]	@ (8002e9c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002e7e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002e80:	b918      	cbnz	r0, 8002e8a <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002e82:	4b07      	ldr	r3, [pc, #28]	@ (8002ea0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002e84:	212c      	movs	r1, #44	@ 0x2c
 8002e86:	4a03      	ldr	r2, [pc, #12]	@ (8002e94 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002e88:	e7f0      	b.n	8002e6c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002e8a:	bd08      	pop	{r3, pc}
 8002e8c:	24009f6c 	.word	0x24009f6c
 8002e90:	08024c35 	.word	0x08024c35
 8002e94:	08024c7e 	.word	0x08024c7e
 8002e98:	08024cad 	.word	0x08024cad
 8002e9c:	24009f68 	.word	0x24009f68
 8002ea0:	08024cfb 	.word	0x08024cfb

08002ea4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002ea4:	4b02      	ldr	r3, [pc, #8]	@ (8002eb0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002ea6:	f04f 31ff 	mov.w	r1, #4294967295
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	f009 bfca 	b.w	800ce44 <osSemaphoreAcquire>
 8002eb0:	24009f6c 	.word	0x24009f6c

08002eb4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002eb4:	4b01      	ldr	r3, [pc, #4]	@ (8002ebc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	f009 bff0 	b.w	800ce9c <osSemaphoreRelease>
 8002ebc:	24009f6c 	.word	0x24009f6c

08002ec0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002ec0:	4b02      	ldr	r3, [pc, #8]	@ (8002ecc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	f009 bfbd 	b.w	800ce44 <osSemaphoreAcquire>
 8002eca:	bf00      	nop
 8002ecc:	24009f6c 	.word	0x24009f6c

08002ed0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002ed0:	f7ff bff0 	b.w	8002eb4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002ed4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	4803      	ldr	r0, [pc, #12]	@ (8002ee4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002ed8:	4903      	ldr	r1, [pc, #12]	@ (8002ee8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002eda:	461a      	mov	r2, r3
 8002edc:	6800      	ldr	r0, [r0, #0]
 8002ede:	f00a b84a 	b.w	800cf76 <osMessageQueuePut>
 8002ee2:	bf00      	nop
 8002ee4:	24009f68 	.word	0x24009f68
 8002ee8:	24000030 	.word	0x24000030

08002eec <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002eec:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	4c07      	ldr	r4, [pc, #28]	@ (8002f10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002ef2:	a901      	add	r1, sp, #4
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6820      	ldr	r0, [r4, #0]
 8002ef8:	f00a f86e 	bl	800cfd8 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002efc:	f04f 33ff 	mov.w	r3, #4294967295
 8002f00:	2200      	movs	r2, #0
 8002f02:	a901      	add	r1, sp, #4
 8002f04:	6820      	ldr	r0, [r4, #0]
 8002f06:	f00a f867 	bl	800cfd8 <osMessageQueueGet>
}
 8002f0a:	b002      	add	sp, #8
 8002f0c:	bd10      	pop	{r4, pc}
 8002f0e:	bf00      	nop
 8002f10:	24009f68 	.word	0x24009f68

08002f14 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002f14:	6803      	ldr	r3, [r0, #0]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f18:	4718      	bx	r3

08002f1a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	4770      	bx	lr

08002f1e <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002f1e:	e7fe      	b.n	8002f1e <DMA2D_XferErrorCallback>

08002f20 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002f20:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002f24:	4770      	bx	lr
	...

08002f28 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f30:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002f34:	f009 fefa 	bl	800cd2c <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002f38:	6860      	ldr	r0, [r4, #4]
 8002f3a:	6803      	ldr	r3, [r0, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4798      	blx	r3
 8002f40:	b978      	cbnz	r0, 8002f62 <_ZN8STM32DMA5startEv+0x3a>
 8002f42:	7a63      	ldrb	r3, [r4, #9]
 8002f44:	b16b      	cbz	r3, 8002f62 <_ZN8STM32DMA5startEv+0x3a>
 8002f46:	7a23      	ldrb	r3, [r4, #8]
 8002f48:	b95b      	cbnz	r3, 8002f62 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002f4a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002f4e:	4620      	mov	r0, r4
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002f56:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002f5e:	f009 bf08 	b.w	800cd72 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002f62:	490b      	ldr	r1, [pc, #44]	@ (8002f90 <_ZN8STM32DMA5startEv+0x68>)
 8002f64:	4a0b      	ldr	r2, [pc, #44]	@ (8002f94 <_ZN8STM32DMA5startEv+0x6c>)
 8002f66:	680b      	ldr	r3, [r1, #0]
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	5cd3      	ldrb	r3, [r2, r3]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d1f2      	bne.n	8002f56 <_ZN8STM32DMA5startEv+0x2e>
 8002f70:	7a20      	ldrb	r0, [r4, #8]
 8002f72:	2800      	cmp	r0, #0
 8002f74:	d1ef      	bne.n	8002f56 <_ZN8STM32DMA5startEv+0x2e>
 8002f76:	7aa0      	ldrb	r0, [r4, #10]
 8002f78:	2800      	cmp	r0, #0
 8002f7a:	d1ec      	bne.n	8002f56 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002f7c:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002f7e:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002f82:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002f86:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002f88:	f7ff ff06 	bl	8002d98 <DMA2D_CopyBuffer>
    }
 8002f8c:	e7e3      	b.n	8002f56 <_ZN8STM32DMA5startEv+0x2e>
 8002f8e:	bf00      	nop
 8002f90:	24009f34 	.word	0x24009f34
 8002f94:	24000010 	.word	0x24000010

08002f98 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002f98:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f9e:	6003      	str	r3, [r0, #0]
 8002fa0:	4b04      	ldr	r3, [pc, #16]	@ (8002fb4 <_ZN8STM32DMAD1Ev+0x1c>)
 8002fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002fa6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002faa:	f3bf 8f6f 	isb	sy
}
 8002fae:	4770      	bx	lr
 8002fb0:	08026824 	.word	0x08026824
 8002fb4:	e000e100 	.word	0xe000e100

08002fb8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002fb8:	b510      	push	{r4, lr}
 8002fba:	4604      	mov	r4, r0
}
 8002fbc:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002fc0:	f7ff ffea 	bl	8002f98 <_ZN8STM32DMAD1Ev>
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f01f fff8 	bl	8022fba <_ZdlPvj>
 8002fca:	4620      	mov	r0, r4
 8002fcc:	bd10      	pop	{r4, pc}
	...

08002fd0 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002fd0:	4b10      	ldr	r3, [pc, #64]	@ (8003014 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002fd2:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002fd4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002fd8:	f042 0210 	orr.w	r2, r2, #16
 8002fdc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002fe0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002fe4:	f002 0210 	and.w	r2, r2, #16
 8002fe8:	9201      	str	r2, [sp, #4]
 8002fea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002fec:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002fee:	f042 0210 	orr.w	r2, r2, #16
 8002ff2:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002ff4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002ff6:	f022 0210 	bic.w	r2, r2, #16
 8002ffa:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	@ (8003018 <_ZN8STM32DMA10initializeEv+0x48>)
 8002ffe:	4a07      	ldr	r2, [pc, #28]	@ (800301c <_ZN8STM32DMA10initializeEv+0x4c>)
 8003000:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8003002:	4a07      	ldr	r2, [pc, #28]	@ (8003020 <_ZN8STM32DMA10initializeEv+0x50>)
 8003004:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003006:	4b07      	ldr	r3, [pc, #28]	@ (8003024 <_ZN8STM32DMA10initializeEv+0x54>)
 8003008:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800300c:	609a      	str	r2, [r3, #8]
}
 800300e:	b002      	add	sp, #8
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	58024400 	.word	0x58024400
 8003018:	24009ca0 	.word	0x24009ca0
 800301c:	0800326d 	.word	0x0800326d
 8003020:	08002f1f 	.word	0x08002f1f
 8003024:	e000e100 	.word	0xe000e100

08003028 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8003028:	b508      	push	{r3, lr}
    switch (format)
 800302a:	280a      	cmp	r0, #10
 800302c:	d809      	bhi.n	8003042 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 800302e:	e8df f000 	tbb	[pc, r0]
 8003032:	1006      	.short	0x1006
 8003034:	0808080e 	.word	0x0808080e
 8003038:	10101008 	.word	0x10101008
 800303c:	10          	.byte	0x10
 800303d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800303e:	2002      	movs	r0, #2
}
 8003040:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8003042:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8003044:	2191      	movs	r1, #145	@ 0x91
 8003046:	4a05      	ldr	r2, [pc, #20]	@ (800305c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8003048:	4805      	ldr	r0, [pc, #20]	@ (8003060 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 800304a:	f020 fb2d 	bl	80236a8 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800304e:	2000      	movs	r0, #0
 8003050:	e7f6      	b.n	8003040 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8003052:	2001      	movs	r0, #1
    return dma2dColorMode;
 8003054:	e7f4      	b.n	8003040 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8003056:	bf00      	nop
 8003058:	08024d3d 	.word	0x08024d3d
 800305c:	08024d58 	.word	0x08024d58
 8003060:	08024da3 	.word	0x08024da3

08003064 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8003064:	b538      	push	{r3, r4, r5, lr}
 8003066:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003068:	7f88      	ldrb	r0, [r1, #30]
 800306a:	f7ff ffdd 	bl	8003028 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800306e:	4b12      	ldr	r3, [pc, #72]	@ (80030b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003070:	8aa5      	ldrh	r5, [r4, #20]
 8003072:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003074:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003076:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800307a:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800307c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800307e:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003080:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003082:	1b52      	subs	r2, r2, r5
 8003084:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8003086:	6825      	ldr	r5, [r4, #0]
 8003088:	2d08      	cmp	r5, #8
 800308a:	d10e      	bne.n	80030aa <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800308c:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800308e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003090:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8003092:	4a0a      	ldr	r2, [pc, #40]	@ (80030bc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8003094:	7f20      	ldrb	r0, [r4, #28]
 8003096:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800309a:	61da      	str	r2, [r3, #28]
        return color;
 800309c:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800309e:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 80030a0:	4a07      	ldr	r2, [pc, #28]	@ (80030c0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030a2:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030a4:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 80030a6:	601a      	str	r2, [r3, #0]
    }
}
 80030a8:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 80030aa:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80030ac:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80030ae:	611a      	str	r2, [r3, #16]
 80030b0:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80030b2:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 80030b4:	4a03      	ldr	r2, [pc, #12]	@ (80030c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 80030b6:	e7f6      	b.n	80030a6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 80030b8:	52001000 	.word	0x52001000
 80030bc:	00010009 	.word	0x00010009
 80030c0:	00022301 	.word	0x00022301
 80030c4:	00032301 	.word	0x00032301

080030c8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 80030c8:	b508      	push	{r3, lr}
    switch (format)
 80030ca:	280b      	cmp	r0, #11
 80030cc:	d80b      	bhi.n	80030e6 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 80030ce:	e8df f000 	tbb	[pc, r0]
 80030d2:	1206      	.short	0x1206
 80030d4:	0a0a0a10 	.word	0x0a0a0a10
 80030d8:	0808080a 	.word	0x0808080a
 80030dc:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80030de:	2002      	movs	r0, #2
}
 80030e0:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 80030e2:	2005      	movs	r0, #5
        break;
 80030e4:	e7fc      	b.n	80030e0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 80030e6:	4b05      	ldr	r3, [pc, #20]	@ (80030fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 80030e8:	2170      	movs	r1, #112	@ 0x70
 80030ea:	4a05      	ldr	r2, [pc, #20]	@ (8003100 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 80030ec:	4805      	ldr	r0, [pc, #20]	@ (8003104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 80030ee:	f020 fadb 	bl	80236a8 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80030f2:	2000      	movs	r0, #0
 80030f4:	e7f4      	b.n	80030e0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 80030f6:	2001      	movs	r0, #1
    return dma2dColorMode;
 80030f8:	e7f2      	b.n	80030e0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 80030fa:	bf00      	nop
 80030fc:	08024d3d 	.word	0x08024d3d
 8003100:	08024def 	.word	0x08024def
 8003104:	08024da3 	.word	0x08024da3

08003108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8003108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800310c:	7f4f      	ldrb	r7, [r1, #29]
{
 800310e:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003110:	4638      	mov	r0, r7
 8003112:	f7ff ffd9 	bl	80030c8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003116:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800311a:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800311c:	4628      	mov	r0, r5
 800311e:	f7ff ffd3 	bl	80030c8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8003122:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003124:	4628      	mov	r0, r5
 8003126:	f7ff ff7f 	bl	8003028 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800312a:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 800312e:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003132:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003136:	4b45      	ldr	r3, [pc, #276]	@ (800324c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003138:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800313a:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800313c:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800313e:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003140:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003142:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003146:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003148:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800314c:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003150:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8003152:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003156:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8003158:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 800315a:	f8d9 4000 	ldr.w	r4, [r9]
 800315e:	f899 201c 	ldrb.w	r2, [r9, #28]
 8003162:	2c80      	cmp	r4, #128	@ 0x80
 8003164:	d022      	beq.n	80031ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8003166:	d80f      	bhi.n	8003188 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8003168:	2c20      	cmp	r4, #32
 800316a:	d066      	beq.n	800323a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 800316c:	2c40      	cmp	r4, #64	@ 0x40
 800316e:	d064      	beq.n	800323a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8003170:	2c04      	cmp	r4, #4
 8003172:	d05c      	beq.n	800322e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003174:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8003178:	4b34      	ldr	r3, [pc, #208]	@ (800324c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 800317a:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800317c:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003180:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8003182:	d060      	beq.n	8003246 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003184:	4a32      	ldr	r2, [pc, #200]	@ (8003250 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8003186:	e03f      	b.n	8003208 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8003188:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 800318c:	d004      	beq.n	8003198 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 800318e:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8003192:	d1ef      	bne.n	8003174 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003194:	482f      	ldr	r0, [pc, #188]	@ (8003254 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8003196:	e000      	b.n	800319a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003198:	482f      	ldr	r0, [pc, #188]	@ (8003258 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800319a:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 800319e:	61da      	str	r2, [r3, #28]
 80031a0:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80031a4:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80031a6:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80031a8:	6159      	str	r1, [r3, #20]
 80031aa:	e02c      	b.n	8003206 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80031ac:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80031b0:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80031b4:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80031b8:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80031ba:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80031bc:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80031be:	1d21      	adds	r1, r4, #4
 80031c0:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 80031c2:	7821      	ldrb	r1, [r4, #0]
 80031c4:	b141      	cbz	r1, 80031d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80031c6:	2901      	cmp	r1, #1
 80031c8:	d021      	beq.n	800320e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 80031ca:	4b24      	ldr	r3, [pc, #144]	@ (800325c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 80031cc:	f240 110b 	movw	r1, #267	@ 0x10b
 80031d0:	4a23      	ldr	r2, [pc, #140]	@ (8003260 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 80031d2:	4824      	ldr	r0, [pc, #144]	@ (8003264 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 80031d4:	f020 fa68 	bl	80236a8 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80031d8:	69da      	ldr	r2, [r3, #28]
 80031da:	8861      	ldrh	r1, [r4, #2]
 80031dc:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80031e0:	3901      	subs	r1, #1
 80031e2:	f022 0210 	bic.w	r2, r2, #16
 80031e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031ea:	61da      	str	r2, [r3, #28]
            bool blend = true;
 80031ec:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80031ee:	4b17      	ldr	r3, [pc, #92]	@ (800324c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80031f0:	69d9      	ldr	r1, [r3, #28]
 80031f2:	f041 0120 	orr.w	r1, r1, #32
 80031f6:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80031f8:	69d9      	ldr	r1, [r3, #28]
 80031fa:	0689      	lsls	r1, r1, #26
 80031fc:	d4fc      	bmi.n	80031f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80031fe:	2110      	movs	r1, #16
 8003200:	6099      	str	r1, [r3, #8]
            if (blend)
 8003202:	2a00      	cmp	r2, #0
 8003204:	d0be      	beq.n	8003184 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003206:	4a18      	ldr	r2, [pc, #96]	@ (8003268 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003208:	601a      	str	r2, [r3, #0]
}
 800320a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800320e:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8003210:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003212:	8860      	ldrh	r0, [r4, #2]
 8003214:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8003218:	bf18      	it	ne
 800321a:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800321c:	3801      	subs	r0, #1
 800321e:	f021 0110 	bic.w	r1, r1, #16
 8003222:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8003226:	f041 0110 	orr.w	r1, r1, #16
 800322a:	61d9      	str	r1, [r3, #28]
                break;
 800322c:	e7df      	b.n	80031ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800322e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8003232:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003236:	61da      	str	r2, [r3, #28]
 8003238:	e7b5      	b.n	80031a6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 800323a:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 800323e:	4b03      	ldr	r3, [pc, #12]	@ (800324c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003240:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003244:	e7f7      	b.n	8003236 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003246:	f242 3201 	movw	r2, #8961	@ 0x2301
 800324a:	e7dd      	b.n	8003208 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 800324c:	52001000 	.word	0x52001000
 8003250:	00012301 	.word	0x00012301
 8003254:	00020009 	.word	0x00020009
 8003258:	0002000a 	.word	0x0002000a
 800325c:	08024e39 	.word	0x08024e39
 8003260:	08024e53 	.word	0x08024e53
 8003264:	08024da3 	.word	0x08024da3
 8003268:	00022301 	.word	0x00022301

0800326c <DMA2D_XferCpltCallback>:
 800326c:	4b02      	ldr	r3, [pc, #8]	@ (8003278 <DMA2D_XferCpltCallback+0xc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8003272:	6803      	ldr	r3, [r0, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	4718      	bx	r3
 8003278:	240255cc 	.word	0x240255cc

0800327c <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 800327c:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8003280:	b510      	push	{r4, lr}
 8003282:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8003284:	b9d3      	cbnz	r3, 80032bc <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8003286:	6803      	ldr	r3, [r0, #0]
 8003288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328a:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 800328c:	4919      	ldr	r1, [pc, #100]	@ (80032f4 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 800328e:	4a1a      	ldr	r2, [pc, #104]	@ (80032f8 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8003290:	680b      	ldr	r3, [r1, #0]
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	5cd3      	ldrb	r3, [r2, r3]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d12a      	bne.n	80032f0 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 800329a:	4818      	ldr	r0, [pc, #96]	@ (80032fc <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 800329c:	6800      	ldr	r0, [r0, #0]
 800329e:	bb38      	cbnz	r0, 80032f0 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 80032a0:	7a20      	ldrb	r0, [r4, #8]
 80032a2:	bb28      	cbnz	r0, 80032f0 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 80032a4:	7aa0      	ldrb	r0, [r4, #10]
 80032a6:	bb18      	cbnz	r0, 80032f0 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 80032a8:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 80032aa:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 80032ae:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 80032b0:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 80032b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 80032b8:	f7ff bd6e 	b.w	8002d98 <DMA2D_CopyBuffer>
        if (isRunning)
 80032bc:	7a03      	ldrb	r3, [r0, #8]
 80032be:	b143      	cbz	r3, 80032d2 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 80032c0:	2300      	movs	r3, #0
 80032c2:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 80032c4:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	4b0b      	ldr	r3, [pc, #44]	@ (80032f8 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 80032ca:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80032ce:	f7ff fd9d 	bl	8002e0c <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 80032d2:	6860      	ldr	r0, [r4, #4]
 80032d4:	6803      	ldr	r3, [r0, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4798      	blx	r3
 80032da:	b948      	cbnz	r0, 80032f0 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 80032dc:	7a63      	ldrb	r3, [r4, #9]
 80032de:	b13b      	cbz	r3, 80032f0 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 80032e0:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 80032e2:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 80032e6:	4620      	mov	r0, r4
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 80032ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 80032ee:	4718      	bx	r3
    }
 80032f0:	bd10      	pop	{r4, pc}
 80032f2:	bf00      	nop
 80032f4:	24009f34 	.word	0x24009f34
 80032f8:	24000010 	.word	0x24000010
 80032fc:	24009f30 	.word	0x24009f30

08003300 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8003304:	4b0e      	ldr	r3, [pc, #56]	@ (8003340 <_ZN8STM32DMAC1Ev+0x40>)
 8003306:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8003308:	2600      	movs	r6, #0
 800330a:	4625      	mov	r5, r4
 800330c:	2260      	movs	r2, #96	@ 0x60
 800330e:	6060      	str	r0, [r4, #4]
 8003310:	7226      	strb	r6, [r4, #8]
 8003312:	7266      	strb	r6, [r4, #9]
 8003314:	f845 3b20 	str.w	r3, [r5], #32
 8003318:	4629      	mov	r1, r5
 800331a:	f00d f859 	bl	80103d0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800331e:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8003322:	60ee      	str	r6, [r5, #12]
 8003324:	3524      	adds	r5, #36	@ 0x24
 8003326:	429d      	cmp	r5, r3
 8003328:	d1fb      	bne.n	8003322 <_ZN8STM32DMAC1Ev+0x22>
 800332a:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 800332e:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8003330:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8003334:	f009 fcc2 	bl	800ccbc <osMutexNew>
 8003338:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 800333c:	4620      	mov	r0, r4
 800333e:	bd70      	pop	{r4, r5, r6, pc}
 8003340:	08026824 	.word	0x08026824

08003344 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003344:	4b03      	ldr	r3, [pc, #12]	@ (8003354 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	07d2      	lsls	r2, r2, #31
 800334a:	d4fc      	bmi.n	8003346 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800334c:	2223      	movs	r2, #35	@ 0x23
 800334e:	609a      	str	r2, [r3, #8]
}
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	52001000 	.word	0x52001000

08003358 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This function is used when decompressing data to flush
    // the currently decoded data in the cache to allow the DMA2D
    // to blend the pixels correctly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003358:	4a0b      	ldr	r2, [pc, #44]	@ (8003388 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 800335a:	6953      	ldr	r3, [r2, #20]
 800335c:	03db      	lsls	r3, r3, #15
 800335e:	d511      	bpl.n	8003384 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8003360:	2900      	cmp	r1, #0
 8003362:	dd0f      	ble.n	8003384 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003364:	f000 031f 	and.w	r3, r0, #31
 8003368:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 800336a:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 800336e:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003370:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003374:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 8003376:	1a0b      	subs	r3, r1, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	dcf9      	bgt.n	8003370 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 800337c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003380:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 800338c:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800338e:	4c10      	ldr	r4, [pc, #64]	@ (80033d0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8003390:	6825      	ldr	r5, [r4, #0]
 8003392:	07ed      	lsls	r5, r5, #31
 8003394:	d4fc      	bmi.n	8003390 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003396:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003398:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 800339a:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800339c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800339e:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033a2:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80033a6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033a8:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80033aa:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 80033ac:	d00c      	beq.n	80033c8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80033ae:	4909      	ldr	r1, [pc, #36]	@ (80033d4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 80033b0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80033b4:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80033b6:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 80033ba:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 80033bc:	4b06      	ldr	r3, [pc, #24]	@ (80033d8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 80033be:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 80033c0:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 80033c2:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 80033c4:	6023      	str	r3, [r4, #0]
    }
}
 80033c6:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80033c8:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 80033ca:	4b04      	ldr	r3, [pc, #16]	@ (80033dc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 80033cc:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 80033ce:	e7f9      	b.n	80033c4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 80033d0:	52001000 	.word	0x52001000
 80033d4:	00010009 	.word	0x00010009
 80033d8:	00020001 	.word	0x00020001
 80033dc:	00030001 	.word	0x00030001

080033e0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 80033e0:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80033e2:	4c0e      	ldr	r4, [pc, #56]	@ (800341c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 80033e4:	6825      	ldr	r5, [r4, #0]
 80033e6:	07ed      	lsls	r5, r5, #31
 80033e8:	d4fc      	bmi.n	80033e4 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033ea:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033ec:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 80033ee:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033f0:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80033f2:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033f6:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80033fa:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033fc:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80033fe:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003400:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8003402:	d007      	beq.n	8003414 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003404:	4a06      	ldr	r2, [pc, #24]	@ (8003420 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8003406:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 800340a:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800340c:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 800340e:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003410:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8003412:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003414:	4b03      	ldr	r3, [pc, #12]	@ (8003424 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8003416:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8003418:	6025      	str	r5, [r4, #0]
}
 800341a:	e7fa      	b.n	8003412 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 800341c:	52001000 	.word	0x52001000
 8003420:	00020001 	.word	0x00020001
 8003424:	ff020001 	.word	0xff020001

08003428 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8003428:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800342a:	4c0b      	ldr	r4, [pc, #44]	@ (8003458 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 800342c:	6825      	ldr	r5, [r4, #0]
 800342e:	07ed      	lsls	r5, r5, #31
 8003430:	d4fc      	bmi.n	800342c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003432:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003434:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003436:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003438:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800343a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800343c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003440:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003442:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003444:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8003446:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003448:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800344a:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 800344c:	4b03      	ldr	r3, [pc, #12]	@ (800345c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800344e:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8003450:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003452:	6023      	str	r3, [r4, #0]
}
 8003454:	bd30      	pop	{r4, r5, pc}
 8003456:	bf00      	nop
 8003458:	52001000 	.word	0x52001000
 800345c:	00020001 	.word	0x00020001

08003460 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8003460:	2001      	movs	r0, #1
 8003462:	4770      	bx	lr

08003464 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8003464:	200c      	movs	r0, #12
 8003466:	4770      	bx	lr

08003468 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8003468:	230c      	movs	r3, #12
 800346a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800346e:	3008      	adds	r0, #8
 8003470:	4770      	bx	lr

08003472 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8003472:	230c      	movs	r3, #12
 8003474:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003478:	3008      	adds	r0, #8
 800347a:	4770      	bx	lr

0800347c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800347c:	2001      	movs	r0, #1
 800347e:	4770      	bx	lr

08003480 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003480:	f44f 703a 	mov.w	r0, #744	@ 0x2e8
 8003484:	4770      	bx	lr

08003486 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003486:	f44f 733a 	mov.w	r3, #744	@ 0x2e8
 800348a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800348e:	3008      	adds	r0, #8
 8003490:	4770      	bx	lr

08003492 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003492:	f44f 733a 	mov.w	r3, #744	@ 0x2e8
 8003496:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800349a:	3008      	adds	r0, #8
 800349c:	4770      	bx	lr

0800349e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800349e:	2001      	movs	r0, #1
 80034a0:	4770      	bx	lr

080034a2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80034a2:	2010      	movs	r0, #16
 80034a4:	4770      	bx	lr

080034a6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80034a6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80034aa:	3008      	adds	r0, #8
 80034ac:	4770      	bx	lr

080034ae <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80034ae:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80034b2:	3008      	adds	r0, #8
 80034b4:	4770      	bx	lr

080034b6 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80034b6:	4608      	mov	r0, r1
 80034b8:	f000 be46 	b.w	8004148 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

080034bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80034bc:	4b03      	ldr	r3, [pc, #12]	@ (80034cc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80034be:	b510      	push	{r4, lr}
 80034c0:	4604      	mov	r4, r0
 80034c2:	6003      	str	r3, [r0, #0]
 80034c4:	f00b fdad 	bl	800f022 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80034c8:	4620      	mov	r0, r4
 80034ca:	bd10      	pop	{r4, pc}
 80034cc:	080268dc 	.word	0x080268dc

080034d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80034d0:	b510      	push	{r4, lr}
 80034d2:	4604      	mov	r4, r0
 80034d4:	f7ff fff2 	bl	80034bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80034d8:	2114      	movs	r1, #20
 80034da:	4620      	mov	r0, r4
 80034dc:	f01f fd6d 	bl	8022fba <_ZdlPvj>
 80034e0:	4620      	mov	r0, r4
 80034e2:	bd10      	pop	{r4, pc}

080034e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80034e4:	4b03      	ldr	r3, [pc, #12]	@ (80034f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80034e6:	b510      	push	{r4, lr}
 80034e8:	4604      	mov	r4, r0
 80034ea:	6003      	str	r3, [r0, #0]
 80034ec:	f00b fd99 	bl	800f022 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80034f0:	4620      	mov	r0, r4
 80034f2:	bd10      	pop	{r4, pc}
 80034f4:	080268a8 	.word	0x080268a8

080034f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80034f8:	b510      	push	{r4, lr}
 80034fa:	4604      	mov	r4, r0
 80034fc:	f7ff fff2 	bl	80034e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003500:	f44f 713c 	mov.w	r1, #752	@ 0x2f0
 8003504:	4620      	mov	r0, r4
 8003506:	f01f fd58 	bl	8022fba <_ZdlPvj>
 800350a:	4620      	mov	r0, r4
 800350c:	bd10      	pop	{r4, pc}
	...

08003510 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003510:	4b03      	ldr	r3, [pc, #12]	@ (8003520 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003512:	b510      	push	{r4, lr}
 8003514:	4604      	mov	r4, r0
 8003516:	6003      	str	r3, [r0, #0]
 8003518:	f00b fd83 	bl	800f022 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800351c:	4620      	mov	r0, r4
 800351e:	bd10      	pop	{r4, pc}
 8003520:	08026874 	.word	0x08026874

08003524 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003524:	b510      	push	{r4, lr}
 8003526:	4604      	mov	r4, r0
 8003528:	f7ff fff2 	bl	8003510 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800352c:	2118      	movs	r1, #24
 800352e:	4620      	mov	r0, r4
 8003530:	f01f fd43 	bl	8022fba <_ZdlPvj>
 8003534:	4620      	mov	r0, r4
 8003536:	bd10      	pop	{r4, pc}

08003538 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8003538:	4b08      	ldr	r3, [pc, #32]	@ (800355c <_ZN12FrontendHeapD1Ev+0x24>)
 800353a:	b510      	push	{r4, lr}
 800353c:	4604      	mov	r4, r0
 800353e:	6003      	str	r3, [r0, #0]
 8003540:	f500 7047 	add.w	r0, r0, #796	@ 0x31c
 8003544:	f7ff ffba 	bl	80034bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003548:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800354c:	f7ff ffca 	bl	80034e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003550:	f104 0014 	add.w	r0, r4, #20
 8003554:	f7ff ffdc 	bl	8003510 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003558:	4620      	mov	r0, r4
 800355a:	bd10      	pop	{r4, pc}
 800355c:	08026910 	.word	0x08026910

08003560 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003560:	b508      	push	{r3, lr}
 8003562:	4802      	ldr	r0, [pc, #8]	@ (800356c <__tcf_0+0xc>)
 8003564:	f7ff ffe8 	bl	8003538 <_ZN12FrontendHeapD1Ev>
 8003568:	bd08      	pop	{r3, pc}
 800356a:	bf00      	nop
 800356c:	2400ae30 	.word	0x2400ae30

08003570 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8003570:	b510      	push	{r4, lr}
 8003572:	4604      	mov	r4, r0
 8003574:	f7ff ffe0 	bl	8003538 <_ZN12FrontendHeapD1Ev>
 8003578:	f44f 61b2 	mov.w	r1, #1424	@ 0x590
 800357c:	4620      	mov	r0, r4
 800357e:	f01f fd1c 	bl	8022fba <_ZdlPvj>
 8003582:	4620      	mov	r0, r4
 8003584:	bd10      	pop	{r4, pc}
	...

08003588 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8003588:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800358c:	f000 fc52 	bl	8003e34 <_ZN14BitmapDatabase11getInstanceEv>
 8003590:	2400      	movs	r4, #0
 8003592:	4605      	mov	r5, r0
 8003594:	f000 fc52 	bl	8003e3c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003598:	4623      	mov	r3, r4
 800359a:	4601      	mov	r1, r0
 800359c:	4622      	mov	r2, r4
 800359e:	4628      	mov	r0, r5
 80035a0:	9400      	str	r4, [sp, #0]
 80035a2:	f014 ff33 	bl	801840c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80035a6:	4b27      	ldr	r3, [pc, #156]	@ (8003644 <touchgfx_init+0xbc>)
 80035a8:	4a27      	ldr	r2, [pc, #156]	@ (8003648 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80035aa:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80035ac:	4d27      	ldr	r5, [pc, #156]	@ (800364c <touchgfx_init+0xc4>)
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	f001 f916 	bl	80047e0 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 80035b4:	4b26      	ldr	r3, [pc, #152]	@ (8003650 <touchgfx_init+0xc8>)
 80035b6:	4a27      	ldr	r2, [pc, #156]	@ (8003654 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 80035b8:	4827      	ldr	r0, [pc, #156]	@ (8003658 <touchgfx_init+0xd0>)
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	f014 fdd2 	bl	8018164 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80035c0:	682b      	ldr	r3, [r5, #0]
 80035c2:	f3bf 8f5b 	dmb	ish
 80035c6:	07db      	lsls	r3, r3, #31
 80035c8:	d435      	bmi.n	8003636 <touchgfx_init+0xae>
 80035ca:	4628      	mov	r0, r5
 80035cc:	f01f fcf7 	bl	8022fbe <__cxa_guard_acquire>
 80035d0:	b388      	cbz	r0, 8003636 <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 80035d2:	4c22      	ldr	r4, [pc, #136]	@ (800365c <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80035d4:	4b22      	ldr	r3, [pc, #136]	@ (8003660 <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80035d6:	f204 4634 	addw	r6, r4, #1076	@ 0x434
        : presenterStorage(pres),
 80035da:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 80035de:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 80035e2:	f504 7747 	add.w	r7, r4, #796	@ 0x31c
 80035e6:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 80035e8:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 80035ea:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 80035ee:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 80035f0:	6126      	str	r6, [r4, #16]
 80035f2:	f00b fd17 	bl	800f024 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80035f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003664 <touchgfx_init+0xdc>)
 80035f8:	4640      	mov	r0, r8
 80035fa:	6163      	str	r3, [r4, #20]
 80035fc:	f00b fd12 	bl	800f024 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003600:	4b19      	ldr	r3, [pc, #100]	@ (8003668 <touchgfx_init+0xe0>)
 8003602:	4638      	mov	r0, r7
 8003604:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003606:	f00b fd0d 	bl	800f024 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800360a:	4b18      	ldr	r3, [pc, #96]	@ (800366c <touchgfx_init+0xe4>)
 800360c:	f504 704c 	add.w	r0, r4, #816	@ 0x330
 8003610:	f8c4 331c 	str.w	r3, [r4, #796]	@ 0x31c
 8003614:	f001 f968 	bl	80048e8 <_ZN5ModelC1Ev>
 8003618:	4622      	mov	r2, r4
 800361a:	f504 714c 	add.w	r1, r4, #816	@ 0x330
 800361e:	4630      	mov	r0, r6
 8003620:	f001 f958 	bl	80048d4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8003624:	4630      	mov	r0, r6
 8003626:	f000 fd8f 	bl	8004148 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800362a:	4811      	ldr	r0, [pc, #68]	@ (8003670 <touchgfx_init+0xe8>)
 800362c:	f020 f85a 	bl	80236e4 <atexit>
 8003630:	4628      	mov	r0, r5
 8003632:	f01f fcd0 	bl	8022fd6 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003636:	480f      	ldr	r0, [pc, #60]	@ (8003674 <touchgfx_init+0xec>)
}
 8003638:	b002      	add	sp, #8
 800363a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800363e:	f7fe bcd1 	b.w	8001fe4 <_ZN11TouchGFXHAL10initializeEv>
 8003642:	bf00      	nop
 8003644:	24025630 	.word	0x24025630
 8003648:	24009ff4 	.word	0x24009ff4
 800364c:	2400ae2c 	.word	0x2400ae2c
 8003650:	2400a014 	.word	0x2400a014
 8003654:	24009ff8 	.word	0x24009ff8
 8003658:	24000034 	.word	0x24000034
 800365c:	2400ae30 	.word	0x2400ae30
 8003660:	08026910 	.word	0x08026910
 8003664:	08026874 	.word	0x08026874
 8003668:	080268a8 	.word	0x080268a8
 800366c:	080268dc 	.word	0x080268dc
 8003670:	08003561 	.word	0x08003561
 8003674:	24009f70 	.word	0x24009f70

08003678 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8003678:	4770      	bx	lr
	...

0800367c <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800367c:	4801      	ldr	r0, [pc, #4]	@ (8003684 <touchgfx_taskEntry+0x8>)
 800367e:	f7fe bcc3 	b.w	8002008 <_ZN11TouchGFXHAL9taskEntryEv>
 8003682:	bf00      	nop
 8003684:	24009f70 	.word	0x24009f70

08003688 <_GLOBAL__sub_I_touchgfx_init>:
}
 8003688:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 800368a:	4c0e      	ldr	r4, [pc, #56]	@ (80036c4 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 800368c:	4b0e      	ldr	r3, [pc, #56]	@ (80036c8 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 800368e:	4e0f      	ldr	r6, [pc, #60]	@ (80036cc <_GLOBAL__sub_I_touchgfx_init+0x44>)
 8003690:	4620      	mov	r0, r4
static LCD24bpp display;
 8003692:	4d0f      	ldr	r5, [pc, #60]	@ (80036d0 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 8003694:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 8003696:	f7ff fe33 	bl	8003300 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800369a:	4628      	mov	r0, r5
 800369c:	f018 fd20 	bl	801c0e0 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80036a0:	480c      	ldr	r0, [pc, #48]	@ (80036d4 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80036a2:	f012 fb1b 	bl	8015cdc <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80036a6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80036aa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80036ae:	4621      	mov	r1, r4
 80036b0:	4809      	ldr	r0, [pc, #36]	@ (80036d8 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 80036b2:	e9cd 3200 	strd	r3, r2, [sp]
 80036b6:	4633      	mov	r3, r6
 80036b8:	462a      	mov	r2, r5
 80036ba:	f7fe fd39 	bl	8002130 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80036be:	b002      	add	sp, #8
 80036c0:	bd70      	pop	{r4, r5, r6, pc}
 80036c2:	bf00      	nop
 80036c4:	2400a080 	.word	0x2400a080
 80036c8:	080266dc 	.word	0x080266dc
 80036cc:	2400ae28 	.word	0x2400ae28
 80036d0:	2400a014 	.word	0x2400a014
 80036d4:	24009ff8 	.word	0x24009ff8
 80036d8:	24009f70 	.word	0x24009f70

080036dc <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 80036dc:	4801      	ldr	r0, [pc, #4]	@ (80036e4 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80036de:	f7ff bc5b 	b.w	8002f98 <_ZN8STM32DMAD1Ev>
 80036e2:	bf00      	nop
 80036e4:	2400a080 	.word	0x2400a080

080036e8 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80036e8:	2000      	movs	r0, #0
 80036ea:	4770      	bx	lr

080036ec <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80036ec:	8081      	strh	r1, [r0, #4]
    }
 80036ee:	4770      	bx	lr

080036f0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80036f0:	80c1      	strh	r1, [r0, #6]
    }
 80036f2:	4770      	bx	lr

080036f4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80036f4:	8101      	strh	r1, [r0, #8]
    }
 80036f6:	4770      	bx	lr

080036f8 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80036f8:	8141      	strh	r1, [r0, #10]
    }
 80036fa:	4770      	bx	lr

080036fc <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80036fc:	4770      	bx	lr

080036fe <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 80036fe:	4770      	bx	lr

08003700 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003700:	4770      	bx	lr

08003702 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003702:	4770      	bx	lr

08003704 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003704:	4770      	bx	lr

08003706 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003706:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003708:	88c4      	ldrh	r4, [r0, #6]
 800370a:	6803      	ldr	r3, [r0, #0]
 800370c:	1b12      	subs	r2, r2, r4
 800370e:	8884      	ldrh	r4, [r0, #4]
 8003710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003712:	1b09      	subs	r1, r1, r4
 8003714:	b212      	sxth	r2, r2
    }
 8003716:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800371a:	b209      	sxth	r1, r1
 800371c:	4718      	bx	r3

0800371e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800371e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003722:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
 8003728:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800372a:	6813      	ldr	r3, [r2, #0]
 800372c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800372e:	6010      	str	r0, [r2, #0]
    }
 8003730:	4770      	bx	lr

08003732 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8003732:	2000      	movs	r0, #0
 8003734:	4770      	bx	lr

08003736 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8003736:	888b      	ldrh	r3, [r1, #4]
 8003738:	8083      	strh	r3, [r0, #4]
        return true;
    }
 800373a:	2001      	movs	r0, #1
 800373c:	4770      	bx	lr

0800373e <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800373e:	4770      	bx	lr

08003740 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003740:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8003744:	4770      	bx	lr

08003746 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8003746:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 800374a:	4770      	bx	lr

0800374c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800374c:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800374e:	2200      	movs	r2, #0
        return rect.width;
 8003750:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8003754:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8003758:	8002      	strh	r2, [r0, #0]
 800375a:	8042      	strh	r2, [r0, #2]
 800375c:	8084      	strh	r4, [r0, #4]
 800375e:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8003760:	bd10      	pop	{r4, pc}

08003762 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8003762:	2200      	movs	r2, #0
 8003764:	8002      	strh	r2, [r0, #0]
 8003766:	8042      	strh	r2, [r0, #2]
 8003768:	8082      	strh	r2, [r0, #4]
 800376a:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800376c:	4770      	bx	lr

0800376e <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 800376e:	7701      	strb	r1, [r0, #28]
    }
 8003770:	4770      	bx	lr

08003772 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 8003772:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 8003776:	4770      	bx	lr

08003778 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 8003778:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 800377c:	4770      	bx	lr

0800377e <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 800377e:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 8003782:	4770      	bx	lr

08003784 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 8003784:	2001      	movs	r0, #1
 8003786:	4770      	bx	lr

08003788 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 8003788:	3098      	adds	r0, #152	@ 0x98
 800378a:	4770      	bx	lr

0800378c <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 800378c:	308c      	adds	r0, #140	@ 0x8c
 800378e:	4770      	bx	lr

08003790 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 8003790:	3084      	adds	r0, #132	@ 0x84
 8003792:	4770      	bx	lr

08003794 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003794:	4770      	bx	lr

08003796 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003796:	4770      	bx	lr

08003798 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 8003798:	4770      	bx	lr
	...

0800379c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379c:	4b02      	ldr	r3, [pc, #8]	@ (80037a8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 800379e:	2290      	movs	r2, #144	@ 0x90
 80037a0:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	e000e100 	.word	0xe000e100

080037ac <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80037ac:	4770      	bx	lr

080037ae <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80037ae:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80037b0:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 80037b4:	4770      	bx	lr

080037b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80037b6:	4770      	bx	lr

080037b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 80037b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80037bc:	4611      	mov	r1, r2
 80037be:	6840      	ldr	r0, [r0, #4]
 80037c0:	6803      	ldr	r3, [r0, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4718      	bx	r3

080037c6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 80037c6:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 80037ca:	4770      	bx	lr

080037cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80037cc:	b510      	push	{r4, lr}
 80037ce:	4604      	mov	r4, r0
 80037d0:	2148      	movs	r1, #72	@ 0x48
 80037d2:	f01f fbf2 	bl	8022fba <_ZdlPvj>
 80037d6:	4620      	mov	r0, r4
 80037d8:	bd10      	pop	{r4, pc}

080037da <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 80037da:	b510      	push	{r4, lr}
 80037dc:	4604      	mov	r4, r0
 80037de:	212c      	movs	r1, #44	@ 0x2c
 80037e0:	f01f fbeb 	bl	8022fba <_ZdlPvj>
 80037e4:	4620      	mov	r0, r4
 80037e6:	bd10      	pop	{r4, pc}

080037e8 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80037e8:	b510      	push	{r4, lr}
 80037ea:	4604      	mov	r4, r0
 80037ec:	21bc      	movs	r1, #188	@ 0xbc
 80037ee:	f01f fbe4 	bl	8022fba <_ZdlPvj>
 80037f2:	4620      	mov	r0, r4
 80037f4:	bd10      	pop	{r4, pc}
	...

080037f8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4604      	mov	r4, r0
    HAL::initialize();
 80037fc:	f00b ff0f 	bl	800f61e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 8003804:	f010 fffc 	bl	8014800 <_ZN8touchgfx11Application11getInstanceEv>
 8003808:	4601      	mov	r1, r0
 800380a:	4620      	mov	r0, r4
 800380c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	4908      	ldr	r1, [pc, #32]	@ (8003834 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8003812:	4620      	mov	r0, r4
 8003814:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 8003818:	2300      	movs	r3, #0
 800381a:	461a      	mov	r2, r3
 800381c:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 800381e:	6863      	ldr	r3, [r4, #4]
 8003820:	4a05      	ldr	r2, [pc, #20]	@ (8003838 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8003822:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 8003824:	4b05      	ldr	r3, [pc, #20]	@ (800383c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003826:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003828:	4a05      	ldr	r2, [pc, #20]	@ (8003840 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 800382a:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 800382c:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 800382e:	4a05      	ldr	r2, [pc, #20]	@ (8003844 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8003830:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003832:	bd38      	pop	{r3, r4, r5, pc}
 8003834:	d0119400 	.word	0xd0119400
 8003838:	2400b4c8 	.word	0x2400b4c8
 800383c:	2400b480 	.word	0x2400b480
 8003840:	d0000000 	.word	0xd0000000
 8003844:	00119400 	.word	0x00119400

08003848 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8003848:	b538      	push	{r3, r4, r5, lr}
 800384a:	4604      	mov	r4, r0
 800384c:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 800384e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003850:	f04f 31ff 	mov.w	r1, #4294967295
 8003854:	f009 fa6a 	bl	800cd2c <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8003858:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800385a:	f009 fa8a 	bl	800cd72 <osMutexRelease>
        streams[handle].isActive = false;
 800385e:	2324      	movs	r3, #36	@ 0x24
 8003860:	fb03 4505 	mla	r5, r3, r5, r4
 8003864:	2300      	movs	r3, #0
 8003866:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 800386a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800386e:	b90b      	cbnz	r3, 8003874 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 8003870:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003872:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 8003874:	bd38      	pop	{r3, r4, r5, pc}

08003876 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8003876:	f00b be83 	b.w	800f580 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

0800387a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 800387a:	f00b bff2 	b.w	800f862 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800387e <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 800387e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003882:	b112      	cbz	r2, 800388a <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8003884:	6803      	ldr	r3, [r0, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	4718      	bx	r3
    }
 800388a:	4770      	bx	lr

0800388c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800388c:	4a12      	ldr	r2, [pc, #72]	@ (80038d8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 800388e:	6953      	ldr	r3, [r2, #20]
 8003890:	03db      	lsls	r3, r3, #15
{
 8003892:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003894:	d51e      	bpl.n	80038d4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003896:	2300      	movs	r3, #0
 8003898:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800389c:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80038a0:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038a4:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80038a8:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80038ac:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80038b0:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038b2:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80038b6:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038b8:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80038bc:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038be:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 80038c2:	d2f9      	bcs.n	80038b8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 80038c4:	3b20      	subs	r3, #32
 80038c6:	f113 0f20 	cmn.w	r3, #32
 80038ca:	d1f2      	bne.n	80038b2 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 80038cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80038d0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 80038d4:	bd70      	pop	{r4, r5, r6, pc}
 80038d6:	bf00      	nop
 80038d8:	e000ed00 	.word	0xe000ed00

080038dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 80038dc:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80038de:	b131      	cbz	r1, 80038ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 80038e0:	4b04      	ldr	r3, [pc, #16]	@ (80038f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 80038e2:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 80038e6:	4a04      	ldr	r2, [pc, #16]	@ (80038f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 80038e8:	4804      	ldr	r0, [pc, #16]	@ (80038fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 80038ea:	f01f fedd 	bl	80236a8 <__assert_func>
    }
 80038ee:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 80038f2:	bd08      	pop	{r3, pc}
 80038f4:	08024e91 	.word	0x08024e91
 80038f8:	08024ea5 	.word	0x08024ea5
 80038fc:	0802502f 	.word	0x0802502f

08003900 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003900:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003902:	b131      	cbz	r1, 8003912 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003904:	4b06      	ldr	r3, [pc, #24]	@ (8003920 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8003906:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 800390a:	4a06      	ldr	r2, [pc, #24]	@ (8003924 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 800390c:	4806      	ldr	r0, [pc, #24]	@ (8003928 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 800390e:	f01f fecb 	bl	80236a8 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8003912:	6840      	ldr	r0, [r0, #4]
 8003914:	4611      	mov	r1, r2
 8003916:	6803      	ldr	r3, [r0, #0]
    }
 8003918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 800391c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391e:	4718      	bx	r3
 8003920:	08024e91 	.word	0x08024e91
 8003924:	08025079 	.word	0x08025079
 8003928:	0802502f 	.word	0x0802502f

0800392c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 800392c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800392e:	b129      	cbz	r1, 800393c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 8003932:	2179      	movs	r1, #121	@ 0x79
 8003934:	4a03      	ldr	r2, [pc, #12]	@ (8003944 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 8003936:	4804      	ldr	r0, [pc, #16]	@ (8003948 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8003938:	f01f feb6 	bl	80236a8 <__assert_func>
    }
 800393c:	68c0      	ldr	r0, [r0, #12]
 800393e:	bd08      	pop	{r3, pc}
 8003940:	08024e91 	.word	0x08024e91
 8003944:	08025227 	.word	0x08025227
 8003948:	0802502f 	.word	0x0802502f

0800394c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 800394c:	b510      	push	{r4, lr}
 800394e:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8003950:	b129      	cbz	r1, 800395e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8003952:	4b19      	ldr	r3, [pc, #100]	@ (80039b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8003954:	21a2      	movs	r1, #162	@ 0xa2
 8003956:	4a19      	ldr	r2, [pc, #100]	@ (80039bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8003958:	4819      	ldr	r0, [pc, #100]	@ (80039c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 800395a:	f01f fea5 	bl	80236a8 <__assert_func>
        switch (cmd)
 800395e:	2a05      	cmp	r2, #5
 8003960:	d815      	bhi.n	800398e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003962:	e8df f002 	tbb	[pc, r2]
 8003966:	1103      	.short	0x1103
 8003968:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 800396c:	6840      	ldr	r0, [r0, #4]
 800396e:	6803      	ldr	r3, [r0, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	4798      	blx	r3
 8003974:	b158      	cbz	r0, 800398e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8003976:	2301      	movs	r3, #1
 8003978:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 800397c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 8003980:	2300      	movs	r3, #0
            stream.tickCount = 0;
 8003982:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 8003986:	e002      	b.n	800398e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8003988:	2300      	movs	r3, #0
 800398a:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 800398e:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8003990:	6203      	str	r3, [r0, #32]
 8003992:	e7f5      	b.n	8003980 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 8003994:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 8003996:	2301      	movs	r3, #1
 8003998:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 800399c:	e7f0      	b.n	8003980 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 800399e:	2300      	movs	r3, #0
 80039a0:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 80039a4:	2301      	movs	r3, #1
 80039a6:	6203      	str	r3, [r0, #32]
            break;
 80039a8:	e7f1      	b.n	800398e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80039aa:	3b00      	subs	r3, #0
 80039ac:	bf18      	it	ne
 80039ae:	2301      	movne	r3, #1
 80039b0:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 80039b4:	e7eb      	b.n	800398e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80039b6:	bf00      	nop
 80039b8:	08024e91 	.word	0x08024e91
 80039bc:	080253dc 	.word	0x080253dc
 80039c0:	0802502f 	.word	0x0802502f

080039c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 80039c4:	b510      	push	{r4, lr}
 80039c6:	460c      	mov	r4, r1
 80039c8:	4611      	mov	r1, r2
 80039ca:	461a      	mov	r2, r3
        assert(handle < no_streams);
 80039cc:	b12c      	cbz	r4, 80039da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 80039ce:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 80039d0:	2190      	movs	r1, #144	@ 0x90
 80039d2:	4a06      	ldr	r2, [pc, #24]	@ (80039ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 80039d4:	4806      	ldr	r0, [pc, #24]	@ (80039f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 80039d6:	f01f fe67 	bl	80236a8 <__assert_func>
        stream.frameNumber = 0;
 80039da:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 80039dc:	6840      	ldr	r0, [r0, #4]
 80039de:	6803      	ldr	r3, [r0, #0]
    }
 80039e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	4718      	bx	r3
 80039e8:	08024e91 	.word	0x08024e91
 80039ec:	080255b0 	.word	0x080255b0
 80039f0:	0802502f 	.word	0x0802502f

080039f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80039f4:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80039f6:	b129      	cbz	r1, 8003a04 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 80039f8:	4b05      	ldr	r3, [pc, #20]	@ (8003a10 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 80039fa:	2182      	movs	r1, #130	@ 0x82
 80039fc:	4a05      	ldr	r2, [pc, #20]	@ (8003a14 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 80039fe:	4806      	ldr	r0, [pc, #24]	@ (8003a18 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003a00:	f01f fe52 	bl	80236a8 <__assert_func>
        stream.tickCount = 0;
 8003a04:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003a08:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8003a0c:	bd08      	pop	{r3, pc}
 8003a0e:	bf00      	nop
 8003a10:	08024e91 	.word	0x08024e91
 8003a14:	0802578b 	.word	0x0802578b
 8003a18:	0802502f 	.word	0x0802502f

08003a1c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8003a1c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8003a20:	b510      	push	{r4, lr}
 8003a22:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8003a24:	b153      	cbz	r3, 8003a3c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8003a26:	f04f 31ff 	mov.w	r1, #4294967295
 8003a2a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003a2c:	f009 f97e 	bl	800cd2c <osMutexAcquire>
            firstDrawThisFrame = false;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 8003a3c:	bd10      	pop	{r4, pc}

08003a3e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8003a3e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003a42:	b11a      	cbz	r2, 8003a4c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003a44:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003a48:	b102      	cbz	r2, 8003a4c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003a4a:	6018      	str	r0, [r3, #0]
        }
    }
 8003a4c:	4770      	bx	lr
	...

08003a50 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8003a50:	b510      	push	{r4, lr}
 8003a52:	4604      	mov	r4, r0
 8003a54:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8003a56:	b129      	cbz	r1, 8003a64 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003a58:	4b13      	ldr	r3, [pc, #76]	@ (8003aa8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8003a5a:	21d0      	movs	r1, #208	@ 0xd0
 8003a5c:	4a13      	ldr	r2, [pc, #76]	@ (8003aac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 8003a5e:	4814      	ldr	r0, [pc, #80]	@ (8003ab0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8003a60:	f01f fe22 	bl	80236a8 <__assert_func>
        if (stream.isPlaying)
 8003a64:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003a68:	b133      	cbz	r3, 8003a78 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8003a6a:	4b12      	ldr	r3, [pc, #72]	@ (8003ab4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8003a72:	6963      	ldr	r3, [r4, #20]
 8003a74:	4413      	add	r3, r2
 8003a76:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8003a78:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8003a7c:	b90b      	cbnz	r3, 8003a82 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 8003a7e:	2001      	movs	r0, #1
    }
 8003a80:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8003a82:	68a3      	ldr	r3, [r4, #8]
 8003a84:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 8003a86:	6803      	ldr	r3, [r0, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8003a8c:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 8003a8e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 8003a92:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8003a96:	2800      	cmp	r0, #0
 8003a98:	d1f1      	bne.n	8003a7e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8003a9a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1ee      	bne.n	8003a80 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 8003aa2:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8003aa6:	e7eb      	b.n	8003a80 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8003aa8:	08024e91 	.word	0x08024e91
 8003aac:	08025947 	.word	0x08025947
 8003ab0:	0802502f 	.word	0x0802502f
 8003ab4:	240255cc 	.word	0x240255cc

08003ab8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003ab8:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8003aba:	4c1a      	ldr	r4, [pc, #104]	@ (8003b24 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8003abc:	4605      	mov	r5, r0
    HAL::endFrame();
 8003abe:	f00b fda1 	bl	800f604 <_ZN8touchgfx3HAL8endFrameEv>
 8003ac2:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003ac6:	b913      	cbnz	r3, 8003ace <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003ac8:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003acc:	b1ab      	cbz	r3, 8003afa <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8003ace:	69e1      	ldr	r1, [r4, #28]
 8003ad0:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003ad4:	4353      	muls	r3, r2
 8003ad6:	6922      	ldr	r2, [r4, #16]
 8003ad8:	434a      	muls	r2, r1
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d30d      	bcc.n	8003afa <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 8003ade:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8003ae2:	b138      	cbz	r0, 8003af4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003aea:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003aec:	bf98      	it	ls
 8003aee:	f102 32ff 	addls.w	r2, r2, #4294967295
 8003af2:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8003afa:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8003afc:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8003afe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8003b02:	f009 f9cb 	bl	800ce9c <osSemaphoreRelease>
        if (uiHasMutex)
 8003b06:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003b0a:	b12b      	cbz	r3, 8003b18 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8003b0c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003b0e:	f009 f930 	bl	800cd72 <osMutexRelease>
            uiHasMutex = false;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003b18:	6868      	ldr	r0, [r5, #4]
 8003b1a:	6803      	ldr	r3, [r0, #0]
}
 8003b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	4718      	bx	r3
 8003b24:	2400b480 	.word	0x2400b480

08003b28 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b28:	4b04      	ldr	r3, [pc, #16]	@ (8003b3c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8003b2a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003b32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003b36:	f3bf 8f6f 	isb	sy
}
 8003b3a:	4770      	bx	lr
 8003b3c:	e000e100 	.word	0xe000e100

08003b40 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8003b42:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003b46:	609a      	str	r2, [r3, #8]
}
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	e000e100 	.word	0xe000e100

08003b50 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003b54:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003b58:	b9d8      	cbnz	r0, 8003b92 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003b5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003b5e:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 8003b60:	2501      	movs	r5, #1
                streams[i] = Stream();
 8003b62:	60d8      	str	r0, [r3, #12]
 8003b64:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003b66:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 8003b6a:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003b6c:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 8003b70:	6158      	str	r0, [r3, #20]
 8003b72:	6198      	str	r0, [r3, #24]
 8003b74:	61d8      	str	r0, [r3, #28]
 8003b76:	6218      	str	r0, [r3, #32]
 8003b78:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 8003b7a:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 8003b7c:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003b80:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 8003b84:	443c      	add	r4, r7
 8003b86:	42a2      	cmp	r2, r4
 8003b88:	d90a      	bls.n	8003ba0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8003b8c:	2152      	movs	r1, #82	@ 0x52
 8003b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8003bbc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 8003b90:	e003      	b.n	8003b9a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003b92:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8003b94:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8003b98:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003b9a:	480b      	ldr	r0, [pc, #44]	@ (8003bc8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003b9c:	f01f fd84 	bl	80236a8 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8003ba0:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003ba2:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003ba4:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8003ba8:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 8003bac:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 8003bae:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 8003bb2:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003bb4:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bb8:	08025c9f 	.word	0x08025c9f
 8003bbc:	08025cda 	.word	0x08025cda
 8003bc0:	08025ae8 	.word	0x08025ae8
 8003bc4:	08025b18 	.word	0x08025b18
 8003bc8:	0802502f 	.word	0x0802502f

08003bcc <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8003bcc:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8003bce:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003bd0:	4e12      	ldr	r6, [pc, #72]	@ (8003c1c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003bd6:	4b12      	ldr	r3, [pc, #72]	@ (8003c20 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003bd8:	6003      	str	r3, [r0, #0]
 8003bda:	6833      	ldr	r3, [r6, #0]
 8003bdc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003be0:	b10a      	cbz	r2, 8003be6 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8003be2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003be4:	b900      	cbnz	r0, 8003be8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003be6:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003be8:	6803      	ldr	r3, [r0, #0]
 8003bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bec:	4798      	blx	r3
 8003bee:	1e43      	subs	r3, r0, #1
 8003bf0:	425d      	negs	r5, r3
 8003bf2:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003bf4:	6833      	ldr	r3, [r6, #0]
 8003bf6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003bf8:	b130      	cbz	r0, 8003c08 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003bfa:	6803      	ldr	r3, [r0, #0]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfe:	4798      	blx	r3
 8003c00:	2801      	cmp	r0, #1
 8003c02:	bf08      	it	eq
 8003c04:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003c08:	b92d      	cbnz	r5, 8003c16 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003c0a:	4b06      	ldr	r3, [pc, #24]	@ (8003c24 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003c0c:	2127      	movs	r1, #39	@ 0x27
 8003c0e:	4a06      	ldr	r2, [pc, #24]	@ (8003c28 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003c10:	4806      	ldr	r0, [pc, #24]	@ (8003c2c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8003c12:	f01f fd49 	bl	80236a8 <__assert_func>
    }
 8003c16:	4620      	mov	r0, r4
 8003c18:	bd70      	pop	{r4, r5, r6, pc}
 8003c1a:	bf00      	nop
 8003c1c:	240255cc 	.word	0x240255cc
 8003c20:	08026924 	.word	0x08026924
 8003c24:	08025e7d 	.word	0x08025e7d
 8003c28:	08025edb 	.word	0x08025edb
 8003c2c:	08025f14 	.word	0x08025f14

08003c30 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003c30:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8003c32:	4e25      	ldr	r6, [pc, #148]	@ (8003cc8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003c34:	6835      	ldr	r5, [r6, #0]
 8003c36:	f3bf 8f5b 	dmb	ish
 8003c3a:	f015 0501 	ands.w	r5, r5, #1
 8003c3e:	d140      	bne.n	8003cc2 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x92>
 8003c40:	4630      	mov	r0, r6
 8003c42:	f01f f9bc 	bl	8022fbe <__cxa_guard_acquire>
 8003c46:	2800      	cmp	r0, #0
 8003c48:	d03b      	beq.n	8003cc2 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x92>
class CWRVectorRenderer : public VectorRenderer
 8003c4a:	4c20      	ldr	r4, [pc, #128]	@ (8003ccc <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003c4c:	4b20      	ldr	r3, [pc, #128]	@ (8003cd0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
 8003c4e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8003c52:	6125      	str	r5, [r4, #16]
 8003c54:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003c56:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003c58:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003c5a:	e9c4 3500 	strd	r3, r5, [r4]
 8003c5e:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8003c62:	f012 fb20 	bl	80162a6 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8003c66:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c6a:	f00d fff1 	bl	8011c50 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003c6e:	4b19      	ldr	r3, [pc, #100]	@ (8003cd4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003c70:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8003c72:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003c74:	4b18      	ldr	r3, [pc, #96]	@ (8003cd8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8003c76:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003c7a:	f7ff ffa7 	bl	8003bcc <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003c7e:	4b17      	ldr	r3, [pc, #92]	@ (8003cdc <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 8003c80:	4817      	ldr	r0, [pc, #92]	@ (8003ce0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8003c82:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8003c86:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003c88:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8003c8c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8003c90:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 8003c94:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8003c98:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8003c9c:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8003ca6:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003caa:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8003cae:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb4>)
 8003cb4:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003cb8:	f01f fd14 	bl	80236e4 <atexit>
 8003cbc:	4630      	mov	r0, r6
 8003cbe:	f01f f98a 	bl	8022fd6 <__cxa_guard_release>
}
 8003cc2:	4802      	ldr	r0, [pc, #8]	@ (8003ccc <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003cc4:	bd70      	pop	{r4, r5, r6, pc}
 8003cc6:	bf00      	nop
 8003cc8:	2400b3c0 	.word	0x2400b3c0
 8003ccc:	2400b3c4 	.word	0x2400b3c4
 8003cd0:	08027258 	.word	0x08027258
 8003cd4:	08026944 	.word	0x08026944
 8003cd8:	080269bc 	.word	0x080269bc
 8003cdc:	080272a4 	.word	0x080272a4
 8003ce0:	08003799 	.word	0x08003799
 8003ce4:	080272dc 	.word	0x080272dc

08003ce8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003ce8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003cec:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8003cee:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003cf0:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003cfa:	f009 f8a3 	bl	800ce44 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8003cfe:	f04f 31ff 	mov.w	r1, #4294967295
 8003d02:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003d04:	f009 f812 	bl	800cd2c <osMutexAcquire>
                if (stream.doDecode)
 8003d08:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003d0c:	b343      	cbz	r3, 8003d60 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8003d0e:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003d10:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003d14:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003d16:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8003d1a:	f1b8 0f00 	cmp.w	r8, #0
 8003d1e:	d023      	beq.n	8003d68 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	4641      	mov	r1, r8
 8003d24:	4628      	mov	r0, r5
 8003d26:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003d2c:	682b      	ldr	r3, [r5, #0]
 8003d2e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003d32:	9700      	str	r7, [sp, #0]
 8003d34:	4628      	mov	r0, r5
 8003d36:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003d3a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003d3e:	68a1      	ldr	r1, [r4, #8]
 8003d40:	47c0      	blx	r8
                    stream.frameCount++;
 8003d42:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003d44:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003d48:	3301      	adds	r3, #1
 8003d4a:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003d4c:	b1f0      	cbz	r0, 8003d8c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003d4e:	682b      	ldr	r3, [r5, #0]
 8003d50:	4628      	mov	r0, r5
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	4798      	blx	r3
 8003d56:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8003d58:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003d5a:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003d5c:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8003d60:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003d62:	f009 f806 	bl	800cd72 <osMutexRelease>
        while (1)
 8003d66:	e7c5      	b.n	8003cf4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8003d68:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003d6a:	2a00      	cmp	r2, #0
 8003d6c:	d0de      	beq.n	8003d2c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003d6e:	4628      	mov	r0, r5
 8003d70:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003d74:	4798      	blx	r3
 8003d76:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003d78:	4401      	add	r1, r0
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8003d7e:	6923      	ldr	r3, [r4, #16]
 8003d80:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 8003d82:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 8003d86:	4413      	add	r3, r2
 8003d88:	6123      	str	r3, [r4, #16]
 8003d8a:	e7cf      	b.n	8003d2c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	e7e3      	b.n	8003d58 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

08003d90 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 8003d90:	4801      	ldr	r0, [pc, #4]	@ (8003d98 <videoTaskFunc+0x8>)
{
 8003d92:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8003d94:	f7ff ffa8 	bl	8003ce8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8003d98:	2400b480 	.word	0x2400b480

08003d9c <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8003d9c:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8003d9e:	4814      	ldr	r0, [pc, #80]	@ (8003df0 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003da0:	2500      	movs	r5, #0
 8003da2:	f7fe fbf7 	bl	8002594 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003da6:	4c13      	ldr	r4, [pc, #76]	@ (8003df4 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8003da8:	4b13      	ldr	r3, [pc, #76]	@ (8003df8 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003daa:	462a      	mov	r2, r5
 8003dac:	4629      	mov	r1, r5
 8003dae:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003db6:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003db8:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003dba:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003dbc:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003dc0:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003dc4:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003dc8:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003dcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003dd0:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003dd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003dd8:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003ddc:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003de0:	f008 ffe6 	bl	800cdb0 <osSemaphoreNew>
 8003de4:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003de6:	4628      	mov	r0, r5
 8003de8:	f008 ff68 	bl	800ccbc <osMutexNew>
 8003dec:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003dee:	bd38      	pop	{r3, r4, r5, pc}
 8003df0:	2400b4c8 	.word	0x2400b4c8
 8003df4:	2400b480 	.word	0x2400b480
 8003df8:	08026a08 	.word	0x08026a08

08003dfc <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003dfc:	4770      	bx	lr

08003dfe <_ZN23ApplicationFontProviderD0Ev>:
 8003dfe:	b510      	push	{r4, lr}
 8003e00:	4604      	mov	r4, r0
 8003e02:	2104      	movs	r1, #4
 8003e04:	f01f f8d9 	bl	8022fba <_ZdlPvj>
 8003e08:	4620      	mov	r0, r4
 8003e0a:	bd10      	pop	{r4, pc}

08003e0c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8003e0c:	2901      	cmp	r1, #1
{
 8003e0e:	b508      	push	{r3, lr}
    switch (typography)
 8003e10:	d006      	beq.n	8003e20 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8003e12:	2902      	cmp	r1, #2
 8003e14:	d008      	beq.n	8003e28 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8003e16:	b959      	cbnz	r1, 8003e30 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdanab_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003e18:	f000 fd2e 	bl	8004878 <_ZN17TypedTextDatabase8getFontsEv>
 8003e1c:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8003e1e:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003e20:	f000 fd2a 	bl	8004878 <_ZN17TypedTextDatabase8getFontsEv>
 8003e24:	6840      	ldr	r0, [r0, #4]
 8003e26:	e7fa      	b.n	8003e1e <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003e28:	f000 fd26 	bl	8004878 <_ZN17TypedTextDatabase8getFontsEv>
 8003e2c:	6880      	ldr	r0, [r0, #8]
 8003e2e:	e7f6      	b.n	8003e1e <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8003e30:	2000      	movs	r0, #0
 8003e32:	e7f4      	b.n	8003e1e <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003e34 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003e34:	4800      	ldr	r0, [pc, #0]	@ (8003e38 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003e36:	4770      	bx	lr
 8003e38:	08026a58 	.word	0x08026a58

08003e3c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	4770      	bx	lr

08003e40 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003e40:	b513      	push	{r0, r1, r4, lr}
 8003e42:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003e44:	b151      	cbz	r1, 8003e5c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003e46:	6803      	ldr	r3, [r0, #0]
 8003e48:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003e4a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003e4c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003e50:	689c      	ldr	r4, [r3, #8]
 8003e52:	f10d 0303 	add.w	r3, sp, #3
 8003e56:	47a0      	blx	r4
        return glyph;
    }
 8003e58:	b002      	add	sp, #8
 8003e5a:	bd10      	pop	{r4, pc}
            return 0;
 8003e5c:	4608      	mov	r0, r1
 8003e5e:	e7fb      	b.n	8003e58 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003e60 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003e60:	89c0      	ldrh	r0, [r0, #14]
 8003e62:	4770      	bx	lr

08003e64 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003e64:	8a00      	ldrh	r0, [r0, #16]
 8003e66:	4770      	bx	lr

08003e68 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003e68:	88c0      	ldrh	r0, [r0, #6]
 8003e6a:	4770      	bx	lr

08003e6c <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003e6c:	8880      	ldrh	r0, [r0, #4]
 8003e6e:	4770      	bx	lr

08003e70 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003e70:	7a80      	ldrb	r0, [r0, #10]
    }
 8003e72:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003e76:	4770      	bx	lr

08003e78 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003e78:	7a80      	ldrb	r0, [r0, #10]
    }
 8003e7a:	09c0      	lsrs	r0, r0, #7
 8003e7c:	4770      	bx	lr

08003e7e <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003e7e:	2000      	movs	r0, #0
 8003e80:	4770      	bx	lr
	...

08003e84 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003e84:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003e8c <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	00000000 	.word	0x00000000

08003e90 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003e90:	4770      	bx	lr

08003e92 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003e92:	b510      	push	{r4, lr}
 8003e94:	4604      	mov	r4, r0
    }
 8003e96:	2108      	movs	r1, #8
 8003e98:	f01f f88f 	bl	8022fba <_ZdlPvj>
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	bd10      	pop	{r4, pc}

08003ea0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003ea0:	4770      	bx	lr

08003ea2 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003ea2:	4770      	bx	lr

08003ea4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003ea4:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003ea8:	6808      	ldr	r0, [r1, #0]
 8003eaa:	6849      	ldr	r1, [r1, #4]
 8003eac:	c303      	stmia	r3!, {r0, r1}
    }
 8003eae:	4770      	bx	lr

08003eb0 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003eb0:	4770      	bx	lr

08003eb2 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003eb2:	4770      	bx	lr

08003eb4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003eb4:	6041      	str	r1, [r0, #4]
    }
 8003eb6:	4770      	bx	lr

08003eb8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003eb8:	4770      	bx	lr

08003eba <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003eba:	4770      	bx	lr

08003ebc <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 8003ebc:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003ebe:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003ec2:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003ecc:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003ed0:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	08003f7d 	.word	0x08003f7d

08003edc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003edc:	2301      	movs	r3, #1
 8003ede:	7203      	strb	r3, [r0, #8]
    }
 8003ee0:	4770      	bx	lr

08003ee2 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003ee2:	4770      	bx	lr

08003ee4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003ee4:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003ee6:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003ee8:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003eea:	68c2      	ldr	r2, [r0, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	1054      	asrs	r4, r2, #1
 8003ef0:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003ef4:	07d2      	lsls	r2, r2, #31
 8003ef6:	bf48      	it	mi
 8003ef8:	590a      	ldrmi	r2, [r1, r4]
    }
 8003efa:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003efe:	bf48      	it	mi
 8003f00:	58d3      	ldrmi	r3, [r2, r3]
 8003f02:	4718      	bx	r3

08003f04 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003f04:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003f06:	6840      	ldr	r0, [r0, #4]
 8003f08:	b130      	cbz	r0, 8003f18 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	b91a      	cbnz	r2, 8003f16 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003f0e:	68d8      	ldr	r0, [r3, #12]
 8003f10:	f000 0001 	and.w	r0, r0, #1
 8003f14:	4770      	bx	lr
 8003f16:	2001      	movs	r0, #1
    }
 8003f18:	4770      	bx	lr

08003f1a <_ZN8touchgfx12NoTransitionD0Ev>:
 8003f1a:	b510      	push	{r4, lr}
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	210c      	movs	r1, #12
 8003f20:	f01f f84b 	bl	8022fba <_ZdlPvj>
 8003f24:	4620      	mov	r0, r4
 8003f26:	bd10      	pop	{r4, pc}

08003f28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	2110      	movs	r1, #16
 8003f2e:	f01f f844 	bl	8022fba <_ZdlPvj>
 8003f32:	4620      	mov	r0, r4
 8003f34:	bd10      	pop	{r4, pc}

08003f36 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003f36:	b510      	push	{r4, lr}
 8003f38:	4604      	mov	r4, r0
 8003f3a:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003f3e:	f01f f83c 	bl	8022fba <_ZdlPvj>
 8003f42:	4620      	mov	r0, r4
 8003f44:	bd10      	pop	{r4, pc}

08003f46 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003f46:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003f48:	f010 fc5a 	bl	8014800 <_ZN8touchgfx11Application11getInstanceEv>
 8003f4c:	6803      	ldr	r3, [r0, #0]
    }
 8003f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f54:	4718      	bx	r3

08003f56 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003f56:	b510      	push	{r4, lr}
 8003f58:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003f5a:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003f5e:	b158      	cbz	r0, 8003f78 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003f60:	6803      	ldr	r3, [r0, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4798      	blx	r3
 8003f66:	b138      	cbz	r0, 8003f78 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003f68:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003f6c:	6803      	ldr	r3, [r0, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003f78:	bd10      	pop	{r4, pc}
	...

08003f7c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003f7c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003f80:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003f84:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003f86:	68b0      	ldr	r0, [r6, #8]
 8003f88:	6803      	ldr	r3, [r0, #0]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	4798      	blx	r3
 8003f8e:	f5b0 7f3a 	cmp.w	r0, #744	@ 0x2e8
 8003f92:	d205      	bcs.n	8003fa0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8003f94:	4b44      	ldr	r3, [pc, #272]	@ (80040a8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003f96:	21a3      	movs	r1, #163	@ 0xa3
 8003f98:	4a44      	ldr	r2, [pc, #272]	@ (80040ac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003f9a:	4845      	ldr	r0, [pc, #276]	@ (80040b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003f9c:	f01f fb84 	bl	80236a8 <__assert_func>
 8003fa0:	6870      	ldr	r0, [r6, #4]
 8003fa2:	6803      	ldr	r3, [r0, #0]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	4798      	blx	r3
 8003fa8:	280f      	cmp	r0, #15
 8003faa:	d803      	bhi.n	8003fb4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8003fac:	4b41      	ldr	r3, [pc, #260]	@ (80040b4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003fae:	21a4      	movs	r1, #164	@ 0xa4
 8003fb0:	4a3e      	ldr	r2, [pc, #248]	@ (80040ac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003fb2:	e7f2      	b.n	8003f9a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003fb4:	68f0      	ldr	r0, [r6, #12]
 8003fb6:	6803      	ldr	r3, [r0, #0]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	4798      	blx	r3
 8003fbc:	280b      	cmp	r0, #11
 8003fbe:	d803      	bhi.n	8003fc8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8003fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80040b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003fc2:	21a5      	movs	r1, #165	@ 0xa5
 8003fc4:	4a39      	ldr	r2, [pc, #228]	@ (80040ac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003fc6:	e7e8      	b.n	8003f9a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003fc8:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 80040c0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003fcc:	f010 fc18 	bl	8014800 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003fd0:	3004      	adds	r0, #4
 8003fd2:	f010 fc3a 	bl	801484a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003fd6:	f8d9 0000 	ldr.w	r0, [r9]
 8003fda:	b110      	cbz	r0, 8003fe2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8003fdc:	6803      	ldr	r3, [r0, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4798      	blx	r3
    if (*currentTrans)
 8003fe2:	f8d9 0000 	ldr.w	r0, [r9]
 8003fe6:	b110      	cbz	r0, 8003fee <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8003fe8:	6803      	ldr	r3, [r0, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4798      	blx	r3
    if (*currentScreen)
 8003fee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8003ff2:	f8d8 0000 	ldr.w	r0, [r8]
 8003ff6:	b110      	cbz	r0, 8003ffe <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8003ff8:	6803      	ldr	r3, [r0, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	4798      	blx	r3
    if (*currentPresenter)
 8003ffe:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004002:	b110      	cbz	r0, 800400a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8004004:	6803      	ldr	r3, [r0, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4798      	blx	r3
    if (*currentScreen)
 800400a:	f8d8 0000 	ldr.w	r0, [r8]
 800400e:	b110      	cbz	r0, 8004016 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8004010:	6803      	ldr	r3, [r0, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4798      	blx	r3
    if (*currentPresenter)
 8004016:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800401a:	b110      	cbz	r0, 8004022 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 800401c:	6803      	ldr	r3, [r0, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004022:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8004024:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8004026:	f04f 0b00 	mov.w	fp, #0
 800402a:	6803      	ldr	r3, [r0, #0]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	4798      	blx	r3
 8004030:	4b22      	ldr	r3, [pc, #136]	@ (80040bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8004032:	4604      	mov	r4, r0
 8004034:	f8c0 b004 	str.w	fp, [r0, #4]
 8004038:	f880 b008 	strb.w	fp, [r0, #8]
 800403c:	4659      	mov	r1, fp
 800403e:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004040:	68b0      	ldr	r0, [r6, #8]
 8004042:	6803      	ldr	r3, [r0, #0]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	4798      	blx	r3
 8004048:	4605      	mov	r5, r0
 800404a:	f000 fcad 	bl	80049a8 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800404e:	6870      	ldr	r0, [r6, #4]
 8004050:	4659      	mov	r1, fp
 8004052:	6803      	ldr	r3, [r0, #0]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	4798      	blx	r3
 8004058:	4606      	mov	r6, r0
 800405a:	4629      	mov	r1, r5
 800405c:	f000 fc82 	bl	8004964 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8004060:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8004062:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8004066:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8004068:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 800406c:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8004070:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004074:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8004076:	f8c6 a008 	str.w	sl, [r6, #8]
 800407a:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 800407c:	63ee      	str	r6, [r5, #60]	@ 0x3c
 800407e:	4798      	blx	r3
    newPresenter->activate();
 8004080:	6833      	ldr	r3, [r6, #0]
 8004082:	4630      	mov	r0, r6
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004088:	4621      	mov	r1, r4
 800408a:	4628      	mov	r0, r5
 800408c:	f012 fd6e 	bl	8016b6c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	4620      	mov	r0, r4
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	4798      	blx	r3
    newTransition->invalidate();
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	4620      	mov	r0, r4
 800409c:	695b      	ldr	r3, [r3, #20]
}
 800409e:	b001      	add	sp, #4
 80040a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a4:	4718      	bx	r3
 80040a6:	bf00      	nop
 80040a8:	08025f84 	.word	0x08025f84
 80040ac:	08026012 	.word	0x08026012
 80040b0:	080260e4 	.word	0x080260e4
 80040b4:	08026139 	.word	0x08026139
 80040b8:	080261dc 	.word	0x080261dc
 80040bc:	08026af0 	.word	0x08026af0
 80040c0:	24025614 	.word	0x24025614
 80040c4:	24025610 	.word	0x24025610

080040c8 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80040c8:	4b04      	ldr	r3, [pc, #16]	@ (80040dc <_ZN8touchgfx3HAL3lcdEv+0x14>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80040d0:	b10a      	cbz	r2, 80040d6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 80040d2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80040d4:	b900      	cbnz	r0, 80040d8 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 80040d6:	6898      	ldr	r0, [r3, #8]
    }
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	240255cc 	.word	0x240255cc

080040e0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80040e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e2:	4617      	mov	r7, r2
 80040e4:	4604      	mov	r4, r0
 80040e6:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80040e8:	f010 fc50 	bl	801498c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80040ec:	4b12      	ldr	r3, [pc, #72]	@ (8004138 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 80040ee:	2500      	movs	r5, #0
        instance = this;
 80040f0:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80040f2:	4629      	mov	r1, r5
      model(m)
 80040f4:	4b11      	ldr	r3, [pc, #68]	@ (800413c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80040f6:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 80040f8:	4b11      	ldr	r3, [pc, #68]	@ (8004140 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 80040fa:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 80040fe:	4b11      	ldr	r3, [pc, #68]	@ (8004144 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004106:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8004108:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 800410c:	689b      	ldr	r3, [r3, #8]
      model(m)
 800410e:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004112:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8004114:	4628      	mov	r0, r5
 8004116:	f000 fb63 	bl	80047e0 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800411a:	f7ff ffd5 	bl	80040c8 <_ZN8touchgfx3HAL3lcdEv>
 800411e:	f019 f8e0 	bl	801d2e2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8004122:	f7ff ffd1 	bl	80040c8 <_ZN8touchgfx3HAL3lcdEv>
 8004126:	f019 f953 	bl	801d3d0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800412a:	f7ff ffcd 	bl	80040c8 <_ZN8touchgfx3HAL3lcdEv>
 800412e:	f019 f95b 	bl	801d3e8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8004132:	4620      	mov	r0, r4
 8004134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004136:	bf00      	nop
 8004138:	24025620 	.word	0x24025620
 800413c:	08026a9c 	.word	0x08026a9c
 8004140:	08026a84 	.word	0x08026a84
 8004144:	240255cc 	.word	0x240255cc

08004148 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004148:	4b06      	ldr	r3, [pc, #24]	@ (8004164 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800414a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800414e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8004152:	2300      	movs	r3, #0
 8004154:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8004158:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800415c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	08003f7d 	.word	0x08003f7d

08004168 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8004168:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800416a:	4770      	bx	lr

0800416c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 800416c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800416e:	4770      	bx	lr

08004170 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8004170:	4770      	bx	lr

08004172 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
    uint32_t offset = dataOffset[0];
 8004172:	880b      	ldrh	r3, [r1, #0]
    offset |= dataOffset[1] << 16;

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8004174:	888a      	ldrh	r2, [r1, #4]
    uint32_t offset = dataOffset[0];
 8004176:	b29b      	uxth	r3, r3
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8004178:	0ad2      	lsrs	r2, r2, #11
{
 800417a:	b510      	push	{r4, lr}
    offset |= dataOffset[1] << 16;
 800417c:	884c      	ldrh	r4, [r1, #2]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 800417e:	69c1      	ldr	r1, [r0, #28]
    offset |= dataOffset[1] << 16;
 8004180:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    return pixels + offset;
 8004184:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
}
 8004188:	4418      	add	r0, r3
 800418a:	bd10      	pop	{r4, pc}

0800418c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800418c:	b510      	push	{r4, lr}
 800418e:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8004190:	b1ba      	cbz	r2, 80041c2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8004192:	7b10      	ldrb	r0, [r2, #12]
 8004194:	b168      	cbz	r0, 80041b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8004196:	7b53      	ldrb	r3, [r2, #13]
 8004198:	7ad2      	ldrb	r2, [r2, #11]
 800419a:	021b      	lsls	r3, r3, #8
 800419c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80041a0:	431a      	orrs	r2, r3
 80041a2:	6a23      	ldr	r3, [r4, #32]
 80041a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 80041a8:	881a      	ldrh	r2, [r3, #0]
 80041aa:	428a      	cmp	r2, r1
 80041ac:	d102      	bne.n	80041b4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80041ae:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 80041b2:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80041b4:	d805      	bhi.n	80041c2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80041b6:	3801      	subs	r0, #1
 80041b8:	3304      	adds	r3, #4
 80041ba:	b280      	uxth	r0, r0
 80041bc:	2800      	cmp	r0, #0
 80041be:	d1f3      	bne.n	80041a8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80041c0:	e7f7      	b.n	80041b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80041c2:	2000      	movs	r0, #0
 80041c4:	e7f5      	b.n	80041b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080041c6 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80041c6:	b510      	push	{r4, lr}
 80041c8:	4604      	mov	r4, r0
 80041ca:	212c      	movs	r1, #44	@ 0x2c
 80041cc:	f01e fef5 	bl	8022fba <_ZdlPvj>
 80041d0:	4620      	mov	r0, r4
 80041d2:	bd10      	pop	{r4, pc}

080041d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80041d4:	b530      	push	{r4, r5, lr}
 80041d6:	b08b      	sub	sp, #44	@ 0x2c
 80041d8:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80041da:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 80041de:	9508      	str	r5, [sp, #32]
 80041e0:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 80041e4:	9507      	str	r5, [sp, #28]
 80041e6:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80041ea:	9506      	str	r5, [sp, #24]
 80041ec:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 80041f0:	9505      	str	r5, [sp, #20]
 80041f2:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80041f6:	9504      	str	r5, [sp, #16]
 80041f8:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80041fc:	9503      	str	r5, [sp, #12]
 80041fe:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8004202:	9502      	str	r5, [sp, #8]
 8004204:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8004208:	9501      	str	r5, [sp, #4]
 800420a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800420e:	9500      	str	r5, [sp, #0]
 8004210:	f012 f906 	bl	8016420 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8004214:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8004216:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8004218:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 800421a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800421c:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 800421e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004220:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8004222:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004224:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8004226:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8004228:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 800422a:	b00b      	add	sp, #44	@ 0x2c
 800422c:	bd30      	pop	{r4, r5, pc}
 800422e:	bf00      	nop
 8004230:	08026b14 	.word	0x08026b14

08004234 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8004234:	4770      	bx	lr

08004236 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8004236:	4770      	bx	lr

08004238 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8004238:	4770      	bx	lr

0800423a <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 800423a:	4770      	bx	lr

0800423c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 800423c:	4770      	bx	lr

0800423e <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 800423e:	b530      	push	{r4, r5, lr}
 8004240:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8004242:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8004244:	4604      	mov	r4, r0
        rect.width = width;
 8004246:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8004248:	466d      	mov	r5, sp
 800424a:	4601      	mov	r1, r0
 800424c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004250:	343c      	adds	r4, #60	@ 0x3c
 8004252:	4628      	mov	r0, r5
 8004254:	4798      	blx	r3
 8004256:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800425a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800425e:	b005      	add	sp, #20
 8004260:	bd30      	pop	{r4, r5, pc}

08004262 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8004262:	b530      	push	{r4, r5, lr}
 8004264:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8004266:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8004268:	4604      	mov	r4, r0
        rect.height = height;
 800426a:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 800426c:	466d      	mov	r5, sp
 800426e:	4601      	mov	r1, r0
 8004270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004274:	343c      	adds	r4, #60	@ 0x3c
 8004276:	4628      	mov	r0, r5
 8004278:	4798      	blx	r3
 800427a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800427e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8004282:	b005      	add	sp, #20
 8004284:	bd30      	pop	{r4, r5, pc}

08004286 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8004286:	2200      	movs	r2, #0
 8004288:	8002      	strh	r2, [r0, #0]
 800428a:	8042      	strh	r2, [r0, #2]
 800428c:	8082      	strh	r2, [r0, #4]
 800428e:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8004290:	4770      	bx	lr

08004292 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004292:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8004296:	4770      	bx	lr

08004298 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8004298:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800429a:	b570      	push	{r4, r5, r6, lr}
 800429c:	4604      	mov	r4, r0
        setX(x);
 800429e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80042a0:	4615      	mov	r5, r2
        setX(x);
 80042a2:	4798      	blx	r3
        setBaselineY(baselineY);
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	4620      	mov	r0, r4
 80042a8:	4629      	mov	r1, r5
 80042aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 80042ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 80042b0:	4718      	bx	r3

080042b2 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 80042b2:	2000      	movs	r0, #0
 80042b4:	4770      	bx	lr

080042b6 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 80042b6:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80042b8:	4770      	bx	lr

080042ba <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80042ba:	4770      	bx	lr

080042bc <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 80042bc:	4770      	bx	lr

080042be <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 80042be:	4770      	bx	lr

080042c0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80042c0:	b510      	push	{r4, lr}
 80042c2:	4604      	mov	r4, r0
 80042c4:	214c      	movs	r1, #76	@ 0x4c
 80042c6:	f01e fe78 	bl	8022fba <_ZdlPvj>
 80042ca:	4620      	mov	r0, r4
 80042cc:	bd10      	pop	{r4, pc}

080042ce <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80042ce:	b510      	push	{r4, lr}
 80042d0:	4604      	mov	r4, r0
}
 80042d2:	f44f 713a 	mov.w	r1, #744	@ 0x2e8
 80042d6:	f01e fe70 	bl	8022fba <_ZdlPvj>
 80042da:	4620      	mov	r0, r4
 80042dc:	bd10      	pop	{r4, pc}

080042de <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 80042de:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80042e0:	f7ff facd 	bl	800387e <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80042e4:	bd08      	pop	{r3, pc}
	...

080042e8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80042e8:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 80042ea:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80042ec:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 80042ee:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80042f0:	4b11      	ldr	r3, [pc, #68]	@ (8004338 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80042f2:	b28d      	uxth	r5, r1
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	b92b      	cbnz	r3, 8004304 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 80042f8:	4b10      	ldr	r3, [pc, #64]	@ (800433c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80042fa:	216c      	movs	r1, #108	@ 0x6c
 80042fc:	4a10      	ldr	r2, [pc, #64]	@ (8004340 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80042fe:	4811      	ldr	r0, [pc, #68]	@ (8004344 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8004300:	f01f f9d2 	bl	80236a8 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8004304:	4910      	ldr	r1, [pc, #64]	@ (8004348 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8004306:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004308:	8809      	ldrh	r1, [r1, #0]
 800430a:	4291      	cmp	r1, r2
 800430c:	d803      	bhi.n	8004316 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800430e:	4b0f      	ldr	r3, [pc, #60]	@ (800434c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8004310:	216d      	movs	r1, #109	@ 0x6d
 8004312:	4a0b      	ldr	r2, [pc, #44]	@ (8004340 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8004314:	e7f3      	b.n	80042fe <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004316:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800431a:	4b0d      	ldr	r3, [pc, #52]	@ (8004350 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004322:	6803      	ldr	r3, [r0, #0]
 8004324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004326:	4798      	blx	r3
 8004328:	1a29      	subs	r1, r5, r0
 800432a:	4633      	mov	r3, r6
 800432c:	4620      	mov	r0, r4
 800432e:	b209      	sxth	r1, r1
    }
 8004330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8004334:	4718      	bx	r3
 8004336:	bf00      	nop
 8004338:	24025624 	.word	0x24025624
 800433c:	0802627f 	.word	0x0802627f
 8004340:	080262c1 	.word	0x080262c1
 8004344:	080262fc 	.word	0x080262fc
 8004348:	24025628 	.word	0x24025628
 800434c:	08026351 	.word	0x08026351
 8004350:	2402562c 	.word	0x2402562c

08004354 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8004354:	2200      	movs	r2, #0
 8004356:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 800435a:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800435c:	e9c0 2100 	strd	r2, r1, [r0]
    }
 8004360:	4770      	bx	lr

08004362 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8004362:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	4604      	mov	r4, r0
        setX(x);
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 800436a:	4615      	mov	r5, r2
        setX(x);
 800436c:	4798      	blx	r3
        setY(y);
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	4620      	mov	r0, r4
 8004372:	4629      	mov	r1, r5
 8004374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8004376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 800437a:	4718      	bx	r3

0800437c <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	4604      	mov	r4, r0
 8004380:	461d      	mov	r5, r3
 8004382:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8004386:	f7ff ffec 	bl	8004362 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	4629      	mov	r1, r5
 800438e:	4620      	mov	r0, r4
 8004390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004392:	4798      	blx	r3
        setHeight(height);
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	4631      	mov	r1, r6
 8004398:	4620      	mov	r0, r4
 800439a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 800439c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 80043a0:	4718      	bx	r3
	...

080043a4 <_ZN8touchgfx6WidgetC1Ev>:
 80043a4:	2200      	movs	r2, #0
 80043a6:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80043aa:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 80043ae:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 80043b2:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 80043b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043ba:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 80043bc:	4a01      	ldr	r2, [pc, #4]	@ (80043c4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80043be:	6002      	str	r2, [r0, #0]
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	08026b7c 	.word	0x08026b7c

080043c8 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 80043c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043cc:	4604      	mov	r4, r0
 80043ce:	b089      	sub	sp, #36	@ 0x24
        : presenter(0)
 80043d0:	2500      	movs	r5, #0
 80043d2:	f012 fa1f 	bl	8016814 <_ZN8touchgfx6ScreenC1Ev>
 80043d6:	46a0      	mov	r8, r4
 80043d8:	4b5e      	ldr	r3, [pc, #376]	@ (8004554 <_ZN15Screen1ViewBaseC1Ev+0x18c>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80043da:	2226      	movs	r2, #38	@ 0x26
 80043dc:	4629      	mov	r1, r5
 80043de:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80043e0:	f104 076c 	add.w	r7, r4, #108	@ 0x6c
 80043e4:	f848 3b40 	str.w	r3, [r8], #64
 80043e8:	4640      	mov	r0, r8
 80043ea:	f01f fbf9 	bl	8023be0 <memset>
 80043ee:	4640      	mov	r0, r8
 80043f0:	f7ff ffd8 	bl	80043a4 <_ZN8touchgfx6WidgetC1Ev>
 80043f4:	26ff      	movs	r6, #255	@ 0xff
 80043f6:	4b58      	ldr	r3, [pc, #352]	@ (8004558 <_ZN15Screen1ViewBaseC1Ev+0x190>)
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80043f8:	f64f 79ff 	movw	r9, #65535	@ 0xffff
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 80043fc:	2226      	movs	r2, #38	@ 0x26
 80043fe:	4629      	mov	r1, r5
 8004400:	6423      	str	r3, [r4, #64]	@ 0x40
 8004402:	4638      	mov	r0, r7
 8004404:	f884 6066 	strb.w	r6, [r4, #102]	@ 0x66
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004408:	f04f 3bff 	mov.w	fp, #4294967295
        : color(col)
 800440c:	66a5      	str	r5, [r4, #104]	@ 0x68
 800440e:	f8ad 9018 	strh.w	r9, [sp, #24]
 8004412:	f01f fbe5 	bl	8023be0 <memset>
 8004416:	4638      	mov	r0, r7
        : typedTextId(id)
 8004418:	f8df a168 	ldr.w	sl, [pc, #360]	@ 8004584 <_ZN15Screen1ViewBaseC1Ev+0x1bc>
 800441c:	f7ff ffc2 	bl	80043a4 <_ZN8touchgfx6WidgetC1Ev>
 8004420:	4b4e      	ldr	r3, [pc, #312]	@ (800455c <_ZN15Screen1ViewBaseC1Ev+0x194>)
 8004422:	f884 6094 	strb.w	r6, [r4, #148]	@ 0x94
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004426:	f104 0698 	add.w	r6, r4, #152	@ 0x98
 800442a:	66e3      	str	r3, [r4, #108]	@ 0x6c
    {
        Image::setBitmap(bmp);
 800442c:	4638      	mov	r0, r7
        : Widget(), bitmap(bmp), alpha(255)
 800442e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
        Image::setBitmap(bmp);
 8004432:	a906      	add	r1, sp, #24
        : Widget(), bitmap(bmp), alpha(255)
 8004434:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
        Image::setBitmap(bmp);
 8004438:	f00d fdf9 	bl	801202e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800443c:	2226      	movs	r2, #38	@ 0x26
 800443e:	4629      	mov	r1, r5
 8004440:	4630      	mov	r0, r6
 8004442:	f01f fbcd 	bl	8023be0 <memset>
 8004446:	4630      	mov	r0, r6
 8004448:	f7ff ffac 	bl	80043a4 <_ZN8touchgfx6WidgetC1Ev>
 800444c:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
    __background.setPosition(0, 0, 800, 480);
 8004450:	462a      	mov	r2, r5
 8004452:	f8a4 90c4 	strh.w	r9, [r4, #196]	@ 0xc4
 8004456:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
 800445a:	4629      	mov	r1, r5
        : TextAreaWithWildcardBase(), wc1(0)
 800445c:	4b40      	ldr	r3, [pc, #256]	@ (8004560 <_ZN15Screen1ViewBaseC1Ev+0x198>)
 800445e:	4640      	mov	r0, r8
 8004460:	f8c4 a0c0 	str.w	sl, [r4, #192]	@ 0xc0
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8004464:	f104 0904 	add.w	r9, r4, #4
 8004468:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 800446c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8004470:	f8c4 50c8 	str.w	r5, [r4, #200]	@ 0xc8
 8004474:	f8a4 50d0 	strh.w	r5, [r4, #208]	@ 0xd0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004478:	f8c4 50d4 	str.w	r5, [r4, #212]	@ 0xd4
 800447c:	f8c4 50e0 	str.w	r5, [r4, #224]	@ 0xe0
              text(0)
 8004480:	e9c4 b536 	strd	fp, r5, [r4, #216]	@ 0xd8
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800448a:	f7ff ff77 	bl	800437c <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 800448e:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8004492:	4641      	mov	r1, r8
 8004494:	4648      	mov	r0, r9
 8004496:	66a3      	str	r3, [r4, #104]	@ 0x68
 8004498:	f00a fdd8 	bl	800f04c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 800449c:	462a      	mov	r2, r5
 800449e:	4638      	mov	r0, r7
 80044a0:	4629      	mov	r1, r5
 80044a2:	f7ff ff5e 	bl	8004362 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_POLY_ID));
 80044a6:	4638      	mov	r0, r7
 80044a8:	a906      	add	r1, sp, #24
 80044aa:	f8ad 5018 	strh.w	r5, [sp, #24]
 80044ae:	f00d fdbe 	bl	801202e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80044b2:	4639      	mov	r1, r7
 80044b4:	4648      	mov	r0, r9
        boundingArea = calculateBoundingArea();
 80044b6:	af02      	add	r7, sp, #8
 80044b8:	f00a fdc8 	bl	800f04c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setPosition(60, 103, 680, 311);
 80044bc:	f240 1337 	movw	r3, #311	@ 0x137
 80044c0:	2267      	movs	r2, #103	@ 0x67
 80044c2:	213c      	movs	r1, #60	@ 0x3c
 80044c4:	4630      	mov	r0, r6
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 80044cc:	f7ff ff56 	bl	800437c <_ZN8touchgfx8Drawable11setPositionEssss>
 80044d0:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80044d4:	4638      	mov	r0, r7
 80044d6:	4631      	mov	r1, r6
 80044d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 80044dc:	f8c4 b0c8 	str.w	fp, [r4, #200]	@ 0xc8
        linespace = space;
 80044e0:	f8a4 50cc 	strh.w	r5, [r4, #204]	@ 0xcc
        boundingArea = calculateBoundingArea();
 80044e4:	4798      	blx	r3
 80044e6:	f104 03d4 	add.w	r3, r4, #212	@ 0xd4
 80044ea:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80044ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80044f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004564 <_ZN15Screen1ViewBaseC1Ev+0x19c>)
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_1YIQ).getText());
 80044f4:	f104 07e4 	add.w	r7, r4, #228	@ 0xe4
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	b92b      	cbnz	r3, 8004508 <_ZN15Screen1ViewBaseC1Ev+0x140>
 80044fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004568 <_ZN15Screen1ViewBaseC1Ev+0x1a0>)
 80044fe:	2160      	movs	r1, #96	@ 0x60
 8004500:	4a1a      	ldr	r2, [pc, #104]	@ (800456c <_ZN15Screen1ViewBaseC1Ev+0x1a4>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004502:	481b      	ldr	r0, [pc, #108]	@ (8004570 <_ZN15Screen1ViewBaseC1Ev+0x1a8>)
 8004504:	f01f f8d0 	bl	80236a8 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8004508:	4b1a      	ldr	r3, [pc, #104]	@ (8004574 <_ZN15Screen1ViewBaseC1Ev+0x1ac>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	b91b      	cbnz	r3, 8004516 <_ZN15Screen1ViewBaseC1Ev+0x14e>
 800450e:	4b1a      	ldr	r3, [pc, #104]	@ (8004578 <_ZN15Screen1ViewBaseC1Ev+0x1b0>)
 8004510:	2161      	movs	r1, #97	@ 0x61
 8004512:	4a16      	ldr	r2, [pc, #88]	@ (800456c <_ZN15Screen1ViewBaseC1Ev+0x1a4>)
 8004514:	e7f5      	b.n	8004502 <_ZN15Screen1ViewBaseC1Ev+0x13a>
        return texts->getText(typedTextId);
 8004516:	4b19      	ldr	r3, [pc, #100]	@ (800457c <_ZN15Screen1ViewBaseC1Ev+0x1b4>)
 8004518:	4629      	mov	r1, r5
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	f000 f99c 	bl	8004858 <_ZNK8touchgfx5Texts7getTextEt>
 8004520:	4a17      	ldr	r2, [pc, #92]	@ (8004580 <_ZN15Screen1ViewBaseC1Ev+0x1b8>)
 8004522:	4603      	mov	r3, r0
 8004524:	f240 1101 	movw	r1, #257	@ 0x101
 8004528:	4638      	mov	r0, r7
 800452a:	f013 fe0d 	bl	8018148 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 800452e:	2301      	movs	r3, #1
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EOC5));
 8004530:	a906      	add	r1, sp, #24
 8004532:	4630      	mov	r0, r6
        wc1 = value;
 8004534:	f8c4 70e0 	str.w	r7, [r4, #224]	@ 0xe0
 8004538:	f8ad 301c 	strh.w	r3, [sp, #28]
 800453c:	f8cd a018 	str.w	sl, [sp, #24]
 8004540:	f00d fcae 	bl	8011ea0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004544:	4648      	mov	r0, r9
 8004546:	4631      	mov	r1, r6
 8004548:	f00a fd80 	bl	800f04c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800454c:	4620      	mov	r0, r4
 800454e:	b009      	add	sp, #36	@ 0x24
 8004550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004554:	08026c74 	.word	0x08026c74
 8004558:	08027374 	.word	0x08027374
 800455c:	080273dc 	.word	0x080273dc
 8004560:	08026be4 	.word	0x08026be4
 8004564:	24025624 	.word	0x24025624
 8004568:	0802627f 	.word	0x0802627f
 800456c:	0802638f 	.word	0x0802638f
 8004570:	080262fc 	.word	0x080262fc
 8004574:	24025628 	.word	0x24025628
 8004578:	08026351 	.word	0x08026351
 800457c:	24025630 	.word	0x24025630
 8004580:	080263da 	.word	0x080263da
 8004584:	08026a74 	.word	0x08026a74

08004588 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004588:	4770      	bx	lr
	...

0800458c <_Z23getFont_verdana_10_4bppv>:
{
 800458c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800458e:	4d16      	ldr	r5, [pc, #88]	@ (80045e8 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8004590:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004592:	682c      	ldr	r4, [r5, #0]
 8004594:	f3bf 8f5b 	dmb	ish
 8004598:	f014 0401 	ands.w	r4, r4, #1
 800459c:	d120      	bne.n	80045e0 <_Z23getFont_verdana_10_4bppv+0x54>
 800459e:	4628      	mov	r0, r5
 80045a0:	f01e fd0d 	bl	8022fbe <__cxa_guard_acquire>
 80045a4:	b1e0      	cbz	r0, 80045e0 <_Z23getFont_verdana_10_4bppv+0x54>
 80045a6:	233f      	movs	r3, #63	@ 0x3f
 80045a8:	2201      	movs	r2, #1
 80045aa:	4910      	ldr	r1, [pc, #64]	@ (80045ec <_Z23getFont_verdana_10_4bppv+0x60>)
 80045ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80045ae:	4b10      	ldr	r3, [pc, #64]	@ (80045f0 <_Z23getFont_verdana_10_4bppv+0x64>)
 80045b0:	4810      	ldr	r0, [pc, #64]	@ (80045f4 <_Z23getFont_verdana_10_4bppv+0x68>)
 80045b2:	9308      	str	r3, [sp, #32]
 80045b4:	4b10      	ldr	r3, [pc, #64]	@ (80045f8 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80045b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80045b8:	9405      	str	r4, [sp, #20]
 80045ba:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80045be:	2304      	movs	r3, #4
 80045c0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80045c4:	230a      	movs	r3, #10
 80045c6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80045d0:	f7ff fe00 	bl	80041d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80045d4:	4809      	ldr	r0, [pc, #36]	@ (80045fc <_Z23getFont_verdana_10_4bppv+0x70>)
 80045d6:	f01f f885 	bl	80236e4 <atexit>
 80045da:	4628      	mov	r0, r5
 80045dc:	f01e fcfb 	bl	8022fd6 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80045e0:	4804      	ldr	r0, [pc, #16]	@ (80045f4 <_Z23getFont_verdana_10_4bppv+0x68>)
 80045e2:	b00f      	add	sp, #60	@ 0x3c
 80045e4:	bd30      	pop	{r4, r5, pc}
 80045e6:	bf00      	nop
 80045e8:	2400b510 	.word	0x2400b510
 80045ec:	08029a10 	.word	0x08029a10
 80045f0:	08029f64 	.word	0x08029f64
 80045f4:	2400b514 	.word	0x2400b514
 80045f8:	08029f70 	.word	0x08029f70
 80045fc:	08004589 	.word	0x08004589

08004600 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004600:	4770      	bx	lr
	...

08004604 <_Z23getFont_verdana_40_4bppv>:
{
 8004604:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004606:	4d16      	ldr	r5, [pc, #88]	@ (8004660 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8004608:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800460a:	682c      	ldr	r4, [r5, #0]
 800460c:	f3bf 8f5b 	dmb	ish
 8004610:	f014 0401 	ands.w	r4, r4, #1
 8004614:	d120      	bne.n	8004658 <_Z23getFont_verdana_40_4bppv+0x54>
 8004616:	4628      	mov	r0, r5
 8004618:	f01e fcd1 	bl	8022fbe <__cxa_guard_acquire>
 800461c:	b1e0      	cbz	r0, 8004658 <_Z23getFont_verdana_40_4bppv+0x54>
 800461e:	233f      	movs	r3, #63	@ 0x3f
 8004620:	2201      	movs	r2, #1
 8004622:	4910      	ldr	r1, [pc, #64]	@ (8004664 <_Z23getFont_verdana_40_4bppv+0x60>)
 8004624:	9309      	str	r3, [sp, #36]	@ 0x24
 8004626:	4b10      	ldr	r3, [pc, #64]	@ (8004668 <_Z23getFont_verdana_40_4bppv+0x64>)
 8004628:	4810      	ldr	r0, [pc, #64]	@ (800466c <_Z23getFont_verdana_40_4bppv+0x68>)
 800462a:	9308      	str	r3, [sp, #32]
 800462c:	4b10      	ldr	r3, [pc, #64]	@ (8004670 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800462e:	940a      	str	r4, [sp, #40]	@ 0x28
 8004630:	9405      	str	r4, [sp, #20]
 8004632:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004636:	2304      	movs	r3, #4
 8004638:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800463c:	2328      	movs	r3, #40	@ 0x28
 800463e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004648:	f7ff fdc4 	bl	80041d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800464c:	4809      	ldr	r0, [pc, #36]	@ (8004674 <_Z23getFont_verdana_40_4bppv+0x70>)
 800464e:	f01f f849 	bl	80236e4 <atexit>
 8004652:	4628      	mov	r0, r5
 8004654:	f01e fcbf 	bl	8022fd6 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8004658:	4804      	ldr	r0, [pc, #16]	@ (800466c <_Z23getFont_verdana_40_4bppv+0x68>)
 800465a:	b00f      	add	sp, #60	@ 0x3c
 800465c:	bd30      	pop	{r4, r5, pc}
 800465e:	bf00      	nop
 8004660:	2400b540 	.word	0x2400b540
 8004664:	08029a20 	.word	0x08029a20
 8004668:	08029f68 	.word	0x08029f68
 800466c:	2400b544 	.word	0x2400b544
 8004670:	08029f74 	.word	0x08029f74
 8004674:	08004601 	.word	0x08004601

08004678 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_20_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_20_4bpp()
{
    static touchgfx::GeneratedFont verdanab_20_4bpp(glyphs_verdanab_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdanab_20_4bpp, kerning_verdanab_20_4bpp, 63, 0, 0, 0);
 8004678:	4770      	bx	lr
	...

0800467c <_Z24getFont_verdanab_20_4bppv>:
{
 800467c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdanab_20_4bpp(glyphs_verdanab_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdanab_20_4bpp, kerning_verdanab_20_4bpp, 63, 0, 0, 0);
 800467e:	4d17      	ldr	r5, [pc, #92]	@ (80046dc <_Z24getFont_verdanab_20_4bppv+0x60>)
{
 8004680:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdanab_20_4bpp(glyphs_verdanab_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdanab_20_4bpp, kerning_verdanab_20_4bpp, 63, 0, 0, 0);
 8004682:	682c      	ldr	r4, [r5, #0]
 8004684:	f3bf 8f5b 	dmb	ish
 8004688:	f014 0401 	ands.w	r4, r4, #1
 800468c:	d122      	bne.n	80046d4 <_Z24getFont_verdanab_20_4bppv+0x58>
 800468e:	4628      	mov	r0, r5
 8004690:	f01e fc95 	bl	8022fbe <__cxa_guard_acquire>
 8004694:	b1f0      	cbz	r0, 80046d4 <_Z24getFont_verdanab_20_4bppv+0x58>
 8004696:	233f      	movs	r3, #63	@ 0x3f
 8004698:	225f      	movs	r2, #95	@ 0x5f
 800469a:	4911      	ldr	r1, [pc, #68]	@ (80046e0 <_Z24getFont_verdanab_20_4bppv+0x64>)
 800469c:	9309      	str	r3, [sp, #36]	@ 0x24
 800469e:	4b11      	ldr	r3, [pc, #68]	@ (80046e4 <_Z24getFont_verdanab_20_4bppv+0x68>)
 80046a0:	4811      	ldr	r0, [pc, #68]	@ (80046e8 <_Z24getFont_verdanab_20_4bppv+0x6c>)
 80046a2:	9308      	str	r3, [sp, #32]
 80046a4:	4b11      	ldr	r3, [pc, #68]	@ (80046ec <_Z24getFont_verdanab_20_4bppv+0x70>)
 80046a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80046a8:	9307      	str	r3, [sp, #28]
 80046aa:	2301      	movs	r3, #1
 80046ac:	9401      	str	r4, [sp, #4]
 80046ae:	9304      	str	r3, [sp, #16]
 80046b0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80046b4:	2304      	movs	r3, #4
 80046b6:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80046ba:	2314      	movs	r3, #20
 80046bc:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	2318      	movs	r3, #24
 80046c4:	f7ff fd86 	bl	80041d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80046c8:	4809      	ldr	r0, [pc, #36]	@ (80046f0 <_Z24getFont_verdanab_20_4bppv+0x74>)
 80046ca:	f01f f80b 	bl	80236e4 <atexit>
 80046ce:	4628      	mov	r0, r5
 80046d0:	f01e fc81 	bl	8022fd6 <__cxa_guard_release>
    return verdanab_20_4bpp;
}
 80046d4:	4804      	ldr	r0, [pc, #16]	@ (80046e8 <_Z24getFont_verdanab_20_4bppv+0x6c>)
 80046d6:	b00f      	add	sp, #60	@ 0x3c
 80046d8:	bd30      	pop	{r4, r5, pc}
 80046da:	bf00      	nop
 80046dc:	2400b570 	.word	0x2400b570
 80046e0:	08029a30 	.word	0x08029a30
 80046e4:	08029f6c 	.word	0x08029f6c
 80046e8:	2400b574 	.word	0x2400b574
 80046ec:	08029f78 	.word	0x08029f78
 80046f0:	08004679 	.word	0x08004679

080046f4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 80046f4:	2000      	movs	r0, #0
 80046f6:	4770      	bx	lr

080046f8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 80046f8:	2000      	movs	r0, #0
 80046fa:	4770      	bx	lr

080046fc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80046fc:	b40e      	push	{r1, r2, r3}
 80046fe:	b503      	push	{r0, r1, lr}
 8004700:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004702:	2100      	movs	r1, #0
{
 8004704:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8004708:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800470a:	f011 f907 	bl	801591c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800470e:	b002      	add	sp, #8
 8004710:	f85d eb04 	ldr.w	lr, [sp], #4
 8004714:	b003      	add	sp, #12
 8004716:	4770      	bx	lr

08004718 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004718:	b40c      	push	{r2, r3}
 800471a:	b507      	push	{r0, r1, r2, lr}
 800471c:	ab04      	add	r3, sp, #16
 800471e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004722:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004724:	f011 f8fa 	bl	801591c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004728:	b003      	add	sp, #12
 800472a:	f85d eb04 	ldr.w	lr, [sp], #4
 800472e:	b002      	add	sp, #8
 8004730:	4770      	bx	lr
	...

08004734 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8004734:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8004736:	b510      	push	{r4, lr}
 8004738:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800473a:	b373      	cbz	r3, 800479a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800473c:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800473e:	b92b      	cbnz	r3, 800474c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8004740:	4b18      	ldr	r3, [pc, #96]	@ (80047a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8004742:	21c5      	movs	r1, #197	@ 0xc5
 8004744:	4a18      	ldr	r2, [pc, #96]	@ (80047a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8004746:	4819      	ldr	r0, [pc, #100]	@ (80047ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004748:	f01e ffae 	bl	80236a8 <__assert_func>
            return buffer[pos];
 800474c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800474e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004752:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004754:	b30b      	cbz	r3, 800479a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8004756:	f012 ff4f 	bl	80175f8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800475a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800475c:	2b01      	cmp	r3, #1
 800475e:	d803      	bhi.n	8004768 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8004760:	4b13      	ldr	r3, [pc, #76]	@ (80047b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8004762:	21cb      	movs	r1, #203	@ 0xcb
 8004764:	4a13      	ldr	r2, [pc, #76]	@ (80047b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8004766:	e7ee      	b.n	8004746 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8004768:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800476a:	f640 103f 	movw	r0, #2367	@ 0x93f
 800476e:	1c53      	adds	r3, r2, #1
 8004770:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8004772:	2b09      	cmp	r3, #9
 8004774:	4619      	mov	r1, r3
 8004776:	bf88      	it	hi
 8004778:	f1a3 010a 	subhi.w	r1, r3, #10
 800477c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004780:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8004782:	4281      	cmp	r1, r0
 8004784:	d109      	bne.n	800479a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8004786:	2b0a      	cmp	r3, #10
 8004788:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800478c:	bf28      	it	cs
 800478e:	2300      	movcs	r3, #0
            return buffer[pos];
 8004790:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 8004792:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8004796:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8004798:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800479a:	4620      	mov	r0, r4
}
 800479c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80047a0:	f012 be2c 	b.w	80173fc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80047a4:	080263dd 	.word	0x080263dd
 80047a8:	080263e6 	.word	0x080263e6
 80047ac:	08026491 	.word	0x08026491
 80047b0:	080264e9 	.word	0x080264e9
 80047b4:	080264f7 	.word	0x080264f7

080047b8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80047b8:	f012 bde9 	b.w	801738e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080047bc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80047bc:	b510      	push	{r4, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	ac02      	add	r4, sp, #8
 80047c2:	e884 0006 	stmia.w	r4, {r1, r2}
 80047c6:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80047c8:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80047ca:	4621      	mov	r1, r4
    va_start(pArg, format);
 80047cc:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	9b08      	ldr	r3, [sp, #32]
 80047d6:	f00f fbb1 	bl	8013f3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80047da:	b006      	add	sp, #24
 80047dc:	bd10      	pop	{r4, pc}
	...

080047e0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80047e0:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80047e2:	bb18      	cbnz	r0, 800482c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80047e4:	4b12      	ldr	r3, [pc, #72]	@ (8004830 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80047e6:	4813      	ldr	r0, [pc, #76]	@ (8004834 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80047e8:	681c      	ldr	r4, [r3, #0]
 80047ea:	4913      	ldr	r1, [pc, #76]	@ (8004838 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80047ec:	b1b4      	cbz	r4, 800481c <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80047ee:	6822      	ldr	r2, [r4, #0]
 80047f0:	4422      	add	r2, r4
 80047f2:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80047f4:	6862      	ldr	r2, [r4, #4]
 80047f6:	4422      	add	r2, r4
 80047f8:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80047fa:	68a2      	ldr	r2, [r4, #8]
 80047fc:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80047fe:	4b0f      	ldr	r3, [pc, #60]	@ (800483c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004800:	2200      	movs	r2, #0
 8004802:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004804:	f000 f838 	bl	8004878 <_ZN17TypedTextDatabase8getFontsEv>
 8004808:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800480a:	f000 f833 	bl	8004874 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800480e:	4b0c      	ldr	r3, [pc, #48]	@ (8004840 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004810:	601c      	str	r4, [r3, #0]
        fonts = f;
 8004812:	4b0c      	ldr	r3, [pc, #48]	@ (8004844 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004814:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8004816:	4b0c      	ldr	r3, [pc, #48]	@ (8004848 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8004818:	8018      	strh	r0, [r3, #0]
    }
}
 800481a:	e007      	b.n	800482c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 800481c:	4b0b      	ldr	r3, [pc, #44]	@ (800484c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800481e:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004820:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004822:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004824:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8004826:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8004828:	2c00      	cmp	r4, #0
 800482a:	d1e8      	bne.n	80047fe <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 800482c:	bd38      	pop	{r3, r4, r5, pc}
 800482e:	bf00      	nop
 8004830:	2400b5ac 	.word	0x2400b5ac
 8004834:	2400b5a4 	.word	0x2400b5a4
 8004838:	2400b5a0 	.word	0x2400b5a0
 800483c:	2400b5a8 	.word	0x2400b5a8
 8004840:	24025624 	.word	0x24025624
 8004844:	2402562c 	.word	0x2402562c
 8004848:	24025628 	.word	0x24025628
 800484c:	90119408 	.word	0x90119408
 8004850:	90119400 	.word	0x90119400
 8004854:	90119420 	.word	0x90119420

08004858 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8004858:	4b04      	ldr	r3, [pc, #16]	@ (800486c <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8004860:	4b03      	ldr	r3, [pc, #12]	@ (8004870 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8004862:	681b      	ldr	r3, [r3, #0]
}
 8004864:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	2400b5a0 	.word	0x2400b5a0
 8004870:	2400b5a4 	.word	0x2400b5a4

08004874 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8004874:	2002      	movs	r0, #2
 8004876:	4770      	bx	lr

08004878 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8004878:	4800      	ldr	r0, [pc, #0]	@ (800487c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800487a:	4770      	bx	lr
 800487c:	2400b5b0 	.word	0x2400b5b0

08004880 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004880:	b510      	push	{r4, lr}
};
 8004882:	4c05      	ldr	r4, [pc, #20]	@ (8004898 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdanab_20_4bpp()),
 8004884:	f7ff fefa 	bl	800467c <_Z24getFont_verdanab_20_4bppv>
};
 8004888:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800488a:	f7ff febb 	bl	8004604 <_Z23getFont_verdana_40_4bppv>
};
 800488e:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8004890:	f7ff fe7c 	bl	800458c <_Z23getFont_verdana_10_4bppv>
};
 8004894:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8004896:	bd10      	pop	{r4, pc}
 8004898:	2400b5b0 	.word	0x2400b5b0

0800489c <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 800489c:	b510      	push	{r4, lr}
    pointArray = 0;
 800489e:	2400      	movs	r4, #0
 80048a0:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 80048a2:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 80048a4:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 80048a6:	601c      	str	r4, [r3, #0]
}
 80048a8:	bd10      	pop	{r4, pc}

080048aa <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80048aa:	4770      	bx	lr

080048ac <_ZN19FrontendApplicationD0Ev>:
 80048ac:	b510      	push	{r4, lr}
 80048ae:	4604      	mov	r4, r0
 80048b0:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80048b4:	f01e fb81 	bl	8022fba <_ZdlPvj>
 80048b8:	4620      	mov	r0, r4
 80048ba:	bd10      	pop	{r4, pc}

080048bc <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80048bc:	b510      	push	{r4, lr}
 80048be:	4604      	mov	r4, r0
    {
        model.tick();
 80048c0:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 80048c4:	f000 f814 	bl	80048f0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80048c8:	4620      	mov	r0, r4
    }
 80048ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80048ce:	f010 b819 	b.w	8014904 <_ZN8touchgfx11Application15handleTickEventEv>
	...

080048d4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80048d4:	b510      	push	{r4, lr}
 80048d6:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80048d8:	f7ff fc02 	bl	80040e0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80048dc:	4b01      	ldr	r3, [pc, #4]	@ (80048e4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80048de:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80048e0:	6023      	str	r3, [r4, #0]
}
 80048e2:	bd10      	pop	{r4, pc}
 80048e4:	08026ca8 	.word	0x08026ca8

080048e8 <_ZN5ModelC1Ev>:
}


#endif

Model::Model() : modelListener(0)
 80048e8:	2200      	movs	r2, #0
 80048ea:	6002      	str	r2, [r0, #0]
{

}
 80048ec:	4770      	bx	lr
	...

080048f0 <_ZN5Model4tickEv>:

void Model::tick()
{
 80048f0:	b570      	push	{r4, r5, r6, lr}
#ifndef SIMULATION

	if(osMessageQueueGetCount(uartQueueHandle)>0){
 80048f2:	4e0f      	ldr	r6, [pc, #60]	@ (8004930 <_ZN5Model4tickEv+0x40>)
{
 80048f4:	4604      	mov	r4, r0
	if(osMessageQueueGetCount(uartQueueHandle)>0){
 80048f6:	6830      	ldr	r0, [r6, #0]
 80048f8:	f008 fb9e 	bl	800d038 <osMessageQueueGetCount>
 80048fc:	b1b0      	cbz	r0, 800492c <_ZN5Model4tickEv+0x3c>
		if(osMessageQueueGet(uartQueueHandle, &newdata, 0, 0) == osOK){
 80048fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004934 <_ZN5Model4tickEv+0x44>)
 8004900:	2300      	movs	r3, #0
 8004902:	6830      	ldr	r0, [r6, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	4629      	mov	r1, r5
 8004908:	f008 fb66 	bl	800cfd8 <osMessageQueueGet>
 800490c:	b970      	cbnz	r0, 800492c <_ZN5Model4tickEv+0x3c>

			strncpy(Rdata, newdata->Data,newdata->size);
 800490e:	1d23      	adds	r3, r4, #4
 8004910:	6829      	ldr	r1, [r5, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f851 2b04 	ldr.w	r2, [r1], #4
 8004918:	f01f f97c 	bl	8023c14 <strncpy>
 800491c:	4603      	mov	r3, r0
			modelListener->GetUart(Rdata);
 800491e:	6820      	ldr	r0, [r4, #0]
 8004920:	4619      	mov	r1, r3
 8004922:	6802      	ldr	r2, [r0, #0]
		}

	}
#endif

}
 8004924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			modelListener->GetUart(Rdata);
 8004928:	6892      	ldr	r2, [r2, #8]
 800492a:	4710      	bx	r2
}
 800492c:	bd70      	pop	{r4, r5, r6, pc}
 800492e:	bf00      	nop
 8004930:	2400998c 	.word	0x2400998c
 8004934:	2400b5bc 	.word	0x2400b5bc

08004938 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8004938:	4770      	bx	lr

0800493a <_ZThn4_N16Screen1PresenterD1Ev>:
 800493a:	3804      	subs	r0, #4
 800493c:	4770      	bx	lr

0800493e <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800493e:	4770      	bx	lr

08004940 <_ZN16Screen1Presenter7GetUartEPc>:

}

void Screen1Presenter::GetUart(char  *data){

	view.GetUart(data);
 8004940:	68c0      	ldr	r0, [r0, #12]
 8004942:	6803      	ldr	r3, [r0, #0]
 8004944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004946:	4718      	bx	r3

08004948 <_ZThn4_N16Screen1Presenter7GetUartEPc>:

    virtual void GetUart(char  *data);
 8004948:	f1a0 0004 	sub.w	r0, r0, #4
 800494c:	f7ff bff8 	b.w	8004940 <_ZN16Screen1Presenter7GetUartEPc>

08004950 <_ZN16Screen1PresenterD0Ev>:
    virtual ~Screen1Presenter() {};
 8004950:	b510      	push	{r4, lr}
 8004952:	4604      	mov	r4, r0
 8004954:	2110      	movs	r1, #16
 8004956:	f01e fb30 	bl	8022fba <_ZdlPvj>
 800495a:	4620      	mov	r0, r4
 800495c:	bd10      	pop	{r4, pc}

0800495e <_ZThn4_N16Screen1PresenterD0Ev>:
 800495e:	f1a0 0004 	sub.w	r0, r0, #4
 8004962:	e7f5      	b.n	8004950 <_ZN16Screen1PresenterD0Ev>

08004964 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8004964:	2200      	movs	r2, #0
    : view(v)
 8004966:	60c1      	str	r1, [r0, #12]
 8004968:	6082      	str	r2, [r0, #8]
 800496a:	4a02      	ldr	r2, [pc, #8]	@ (8004974 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 800496c:	6002      	str	r2, [r0, #0]
 800496e:	321c      	adds	r2, #28
 8004970:	6042      	str	r2, [r0, #4]
}
 8004972:	4770      	bx	lr
 8004974:	08026cfc 	.word	0x08026cfc

08004978 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8004978:	4770      	bx	lr
	...

0800497c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800497c:	4b03      	ldr	r3, [pc, #12]	@ (800498c <_ZN11Screen1ViewD1Ev+0x10>)
 800497e:	b510      	push	{r4, lr}
 8004980:	4604      	mov	r4, r0
 8004982:	6003      	str	r3, [r0, #0]
 8004984:	f7ff fc9a 	bl	80042bc <_ZN15Screen1ViewBaseD1Ev>
 8004988:	4620      	mov	r0, r4
 800498a:	bd10      	pop	{r4, pc}
 800498c:	08026d2c 	.word	0x08026d2c

08004990 <_ZN11Screen1ViewD0Ev>:
 8004990:	b510      	push	{r4, lr}
 8004992:	4604      	mov	r4, r0
 8004994:	f7ff fff2 	bl	800497c <_ZN11Screen1ViewD1Ev>
 8004998:	f44f 713a 	mov.w	r1, #744	@ 0x2e8
 800499c:	4620      	mov	r0, r4
 800499e:	f01e fb0c 	bl	8022fba <_ZdlPvj>
 80049a2:	4620      	mov	r0, r4
 80049a4:	bd10      	pop	{r4, pc}
	...

080049a8 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80049a8:	b510      	push	{r4, lr}
 80049aa:	4604      	mov	r4, r0
 80049ac:	f7ff fd0c 	bl	80043c8 <_ZN15Screen1ViewBaseC1Ev>
 80049b0:	4b01      	ldr	r3, [pc, #4]	@ (80049b8 <_ZN11Screen1ViewC1Ev+0x10>)
}
 80049b2:	4620      	mov	r0, r4
Screen1View::Screen1View()
 80049b4:	6023      	str	r3, [r4, #0]
}
 80049b6:	bd10      	pop	{r4, pc}
 80049b8:	08026d2c 	.word	0x08026d2c

080049bc <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80049bc:	f7ff bc7f 	b.w	80042be <_ZN15Screen1ViewBase11setupScreenEv>

080049c0 <_ZN11Screen1View7GetUartEPc>:
        wideTextAction = action;
 80049c0:	2301      	movs	r3, #1
        boundingArea = calculateBoundingArea();
 80049c2:	f04f 32ff 	mov.w	r2, #4294967295

void Screen1View::GetUart(char  *data){
 80049c6:	b510      	push	{r4, lr}
        wideTextAction = action;
 80049c8:	f880 30d1 	strb.w	r3, [r0, #209]	@ 0xd1
        boundingArea = calculateBoundingArea();
 80049cc:	2300      	movs	r3, #0
 80049ce:	4604      	mov	r4, r0
 80049d0:	f8c0 30dc 	str.w	r3, [r0, #220]	@ 0xdc
 80049d4:	e9c0 3235 	strd	r3, r2, [r0, #212]	@ 0xd4


	textArea1.setWideTextAction(WIDE_TEXT_WORDWRAP);
	Unicode::strncpy(textArea1Buffer, data, TEXTAREA1_SIZE);
 80049d8:	f240 1201 	movw	r2, #257	@ 0x101
 80049dc:	30e4      	adds	r0, #228	@ 0xe4
 80049de:	f013 f854 	bl	8017a8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	textArea1.invalidate();
 80049e2:	f104 0098 	add.w	r0, r4, #152	@ 0x98
}
 80049e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textArea1.invalidate();
 80049ea:	f011 b8c2 	b.w	8015b72 <_ZNK8touchgfx8Drawable10invalidateEv>

080049ee <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80049ee:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80049f0:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 80049f4:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 80049f6:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 80049f8:	2302      	movs	r3, #2
 80049fa:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80049fc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8004a00:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8004a04:	4770      	bx	lr

08004a06 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8004a06:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8004a0a:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8004a0c:	bf04      	itt	eq
 8004a0e:	2300      	moveq	r3, #0
 8004a10:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8004a14:	2000      	movs	r0, #0
 8004a16:	4770      	bx	lr

08004a18 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8004a18:	2000      	movs	r0, #0
 8004a1a:	4770      	bx	lr

08004a1c <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004a1c:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004a1e:	6904      	ldr	r4, [r0, #16]
 8004a20:	8900      	ldrh	r0, [r0, #8]
 8004a22:	46a4      	mov	ip, r4
}
 8004a24:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004a28:	4760      	bx	ip

08004a2a <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004a2a:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004a2c:	68c4      	ldr	r4, [r0, #12]
 8004a2e:	8900      	ldrh	r0, [r0, #8]
 8004a30:	46a4      	mov	ip, r4
}
 8004a32:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004a36:	4760      	bx	ip

08004a38 <FT6X06_GestureConfig>:
{
 8004a38:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004a3a:	f100 0518 	add.w	r5, r0, #24
{
 8004a3e:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004a40:	7809      	ldrb	r1, [r1, #0]
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 f912 	bl	8004c6c <ft6x06_radian_value>
 8004a48:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8004a4a:	7931      	ldrb	r1, [r6, #4]
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f000 f919 	bl	8004c84 <ft6x06_offset_left_right>
 8004a52:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8004a54:	7a31      	ldrb	r1, [r6, #8]
 8004a56:	4628      	mov	r0, r5
 8004a58:	f000 f920 	bl	8004c9c <ft6x06_offset_up_down>
 8004a5c:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8004a5e:	7b31      	ldrb	r1, [r6, #12]
 8004a60:	4628      	mov	r0, r5
 8004a62:	f000 f927 	bl	8004cb4 <ft6x06_disatnce_left_right>
 8004a66:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8004a68:	7c31      	ldrb	r1, [r6, #16]
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	f000 f92e 	bl	8004ccc <ft6x06_distance_up_down>
 8004a70:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8004a72:	7d31      	ldrb	r1, [r6, #20]
 8004a74:	4628      	mov	r0, r5
 8004a76:	f000 f935 	bl	8004ce4 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8004a7a:	42c4      	cmn	r4, r0
}
 8004a7c:	bf14      	ite	ne
 8004a7e:	f04f 30ff 	movne.w	r0, #4294967295
 8004a82:	2000      	moveq	r0, #0
 8004a84:	bd70      	pop	{r4, r5, r6, pc}

08004a86 <FT6X06_ReadID>:
{
 8004a86:	b513      	push	{r0, r1, r4, lr}
 8004a88:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8004a8a:	3018      	adds	r0, #24
 8004a8c:	f10d 0107 	add.w	r1, sp, #7
 8004a90:	f000 f940 	bl	8004d14 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8004a94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004a98:	6023      	str	r3, [r4, #0]
}
 8004a9a:	b002      	add	sp, #8
 8004a9c:	bd10      	pop	{r4, pc}

08004a9e <FT6X06_GetState>:
{
 8004a9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004aa0:	f100 0518 	add.w	r5, r0, #24
{
 8004aa4:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004aa6:	a901      	add	r1, sp, #4
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f000 f8d2 	bl	8004c52 <ft6x06_td_status>
 8004aae:	bb08      	cbnz	r0, 8004af4 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8004ab0:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	bf98      	it	ls
 8004ab8:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004aba:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8004abc:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004abe:	2103      	movs	r1, #3
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	eb0d 0203 	add.w	r2, sp, r3
 8004ac6:	f000 f8b1 	bl	8004c2c <ft6x06_read_reg>
 8004aca:	b9b0      	cbnz	r0, 8004afa <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004acc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004ad0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004ada:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004adc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004ae0:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004ae2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004ae6:	021b      	lsls	r3, r3, #8
 8004ae8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60a3      	str	r3, [r4, #8]
}
 8004af0:	b003      	add	sp, #12
 8004af2:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	e7df      	b.n	8004aba <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8004afa:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004afe:	e7f7      	b.n	8004af0 <FT6X06_GetState+0x52>

08004b00 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8004b00:	3018      	adds	r0, #24
 8004b02:	f000 b8a1 	b.w	8004c48 <ft6x06_gest_id>

08004b06 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8004b06:	2101      	movs	r1, #1
 8004b08:	3018      	adds	r0, #24
 8004b0a:	f000 b8f7 	b.w	8004cfc <ft6x06_g_mode>

08004b0e <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8004b0e:	2100      	movs	r1, #0
 8004b10:	3018      	adds	r0, #24
 8004b12:	f000 b8f3 	b.w	8004cfc <ft6x06_g_mode>

08004b16 <FT6X06_Init>:
{
 8004b16:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8004b18:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8004b1c:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8004b1e:	b96b      	cbnz	r3, 8004b3c <FT6X06_Init+0x26>
    pObj->IO.Init();
 8004b20:	6803      	ldr	r3, [r0, #0]
 8004b22:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8004b24:	4620      	mov	r0, r4
 8004b26:	f7ff fff2 	bl	8004b0e <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8004b2a:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8004b2c:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8004b30:	bf18      	it	ne
 8004b32:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8004b34:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8004b38:	4240      	negs	r0, r0
}
 8004b3a:	bd10      	pop	{r4, pc}
 8004b3c:	2000      	movs	r0, #0
  return ret;
 8004b3e:	e7fc      	b.n	8004b3a <FT6X06_Init+0x24>

08004b40 <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 8004b40:	2000      	movs	r0, #0
 8004b42:	4770      	bx	lr

08004b44 <FT6X06_GetMultiTouchState>:
{
 8004b44:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004b46:	f100 0518 	add.w	r5, r0, #24
{
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004b4e:	4628      	mov	r0, r5
 8004b50:	a901      	add	r1, sp, #4
 8004b52:	f000 f87e 	bl	8004c52 <ft6x06_td_status>
 8004b56:	2800      	cmp	r0, #0
 8004b58:	d145      	bne.n	8004be6 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8004b5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	bf98      	it	ls
 8004b62:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8004b64:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004b66:	230c      	movs	r3, #12
 8004b68:	aa01      	add	r2, sp, #4
 8004b6a:	2103      	movs	r1, #3
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f000 f85d 	bl	8004c2c <ft6x06_read_reg>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d13a      	bne.n	8004bec <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004b76:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004b7a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004b7e:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8004b80:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004b82:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8004b86:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004b88:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004b8a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004b8e:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004b92:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004b94:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004b9e:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004ba0:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004ba4:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8004ba6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004baa:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8004bac:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004bb4:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8004bb6:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004bb8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8004bbc:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004bbe:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8004bc0:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004bc4:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8004bc6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8004bd4:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004bd8:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8004bda:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8004be2:	b005      	add	sp, #20
 8004be4:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004be6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bea:	e7bb      	b.n	8004b64 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8004bec:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8004bf0:	e7f7      	b.n	8004be2 <FT6X06_GetMultiTouchState+0x9e>
	...

08004bf4 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8004bf4:	b190      	cbz	r0, 8004c1c <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8004bf6:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8004bf8:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004bfa:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8004bfc:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8004bfe:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8004c00:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004c02:	68ca      	ldr	r2, [r1, #12]
 8004c04:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004c06:	690a      	ldr	r2, [r1, #16]
 8004c08:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004c0a:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8004c0c:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8004c0e:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004c10:	4a04      	ldr	r2, [pc, #16]	@ (8004c24 <FT6X06_RegisterBusIO+0x30>)
 8004c12:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004c14:	4a04      	ldr	r2, [pc, #16]	@ (8004c28 <FT6X06_RegisterBusIO+0x34>)
 8004c16:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8004c18:	b103      	cbz	r3, 8004c1c <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8004c1a:	4718      	bx	r3
}
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	08004a1d 	.word	0x08004a1d
 8004c28:	08004a2b 	.word	0x08004a2b

08004c2c <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8004c2c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004c2e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004c32:	46a4      	mov	ip, r4
}
 8004c34:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004c38:	4760      	bx	ip

08004c3a <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8004c3a:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004c3c:	6804      	ldr	r4, [r0, #0]
 8004c3e:	6880      	ldr	r0, [r0, #8]
 8004c40:	46a4      	mov	ip, r4
}
 8004c42:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004c46:	4760      	bx	ip

08004c48 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004c48:	2301      	movs	r3, #1
{
 8004c4a:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	f7ff bfed 	b.w	8004c2c <ft6x06_read_reg>

08004c52 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004c52:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004c54:	460a      	mov	r2, r1
{
 8004c56:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004c58:	2301      	movs	r3, #1
 8004c5a:	2102      	movs	r1, #2
 8004c5c:	f7ff ffe6 	bl	8004c2c <ft6x06_read_reg>
  
  if(ret == 0)
 8004c60:	b918      	cbnz	r0, 8004c6a <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8004c62:	7823      	ldrb	r3, [r4, #0]
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8004c6a:	bd10      	pop	{r4, pc}

08004c6c <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004c6c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8004c6e:	2301      	movs	r3, #1
{
 8004c70:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8004c74:	f10d 0207 	add.w	r2, sp, #7
 8004c78:	2191      	movs	r1, #145	@ 0x91
 8004c7a:	f7ff ffde 	bl	8004c3a <ft6x06_write_reg>
}
 8004c7e:	b003      	add	sp, #12
 8004c80:	f85d fb04 	ldr.w	pc, [sp], #4

08004c84 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004c84:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8004c86:	2301      	movs	r3, #1
{
 8004c88:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8004c8c:	f10d 0207 	add.w	r2, sp, #7
 8004c90:	2192      	movs	r1, #146	@ 0x92
 8004c92:	f7ff ffd2 	bl	8004c3a <ft6x06_write_reg>
}
 8004c96:	b003      	add	sp, #12
 8004c98:	f85d fb04 	ldr.w	pc, [sp], #4

08004c9c <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004c9c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004c9e:	2301      	movs	r3, #1
{
 8004ca0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004ca4:	f10d 0207 	add.w	r2, sp, #7
 8004ca8:	2193      	movs	r1, #147	@ 0x93
 8004caa:	f7ff ffc6 	bl	8004c3a <ft6x06_write_reg>
}
 8004cae:	b003      	add	sp, #12
 8004cb0:	f85d fb04 	ldr.w	pc, [sp], #4

08004cb4 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004cb4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8004cb6:	2301      	movs	r3, #1
{
 8004cb8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8004cbc:	f10d 0207 	add.w	r2, sp, #7
 8004cc0:	2194      	movs	r1, #148	@ 0x94
 8004cc2:	f7ff ffba 	bl	8004c3a <ft6x06_write_reg>
}
 8004cc6:	b003      	add	sp, #12
 8004cc8:	f85d fb04 	ldr.w	pc, [sp], #4

08004ccc <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004ccc:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004cce:	2301      	movs	r3, #1
{
 8004cd0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004cd4:	f10d 0207 	add.w	r2, sp, #7
 8004cd8:	2195      	movs	r1, #149	@ 0x95
 8004cda:	f7ff ffae 	bl	8004c3a <ft6x06_write_reg>
}
 8004cde:	b003      	add	sp, #12
 8004ce0:	f85d fb04 	ldr.w	pc, [sp], #4

08004ce4 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004ce4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004ce6:	2301      	movs	r3, #1
{
 8004ce8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004cec:	f10d 0207 	add.w	r2, sp, #7
 8004cf0:	2196      	movs	r1, #150	@ 0x96
 8004cf2:	f7ff ffa2 	bl	8004c3a <ft6x06_write_reg>
}
 8004cf6:	b003      	add	sp, #12
 8004cf8:	f85d fb04 	ldr.w	pc, [sp], #4

08004cfc <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004cfc:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004cfe:	2301      	movs	r3, #1
{
 8004d00:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004d04:	f10d 0207 	add.w	r2, sp, #7
 8004d08:	21a4      	movs	r1, #164	@ 0xa4
 8004d0a:	f7ff ff96 	bl	8004c3a <ft6x06_write_reg>
}
 8004d0e:	b003      	add	sp, #12
 8004d10:	f85d fb04 	ldr.w	pc, [sp], #4

08004d14 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004d14:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8004d16:	2301      	movs	r3, #1
 8004d18:	21a8      	movs	r1, #168	@ 0xa8
 8004d1a:	f7ff bf87 	b.w	8004c2c <ft6x06_read_reg>
	...

08004d20 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004d20:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004d22:	2201      	movs	r2, #1
 8004d24:	4b07      	ldr	r3, [pc, #28]	@ (8004d44 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8004d26:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8004d2a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004d2c:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004d2e:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8004d30:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004d32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d36:	f006 fcb9 	bl	800b6ac <HAL_SDRAM_SendCommand>
 8004d3a:	3800      	subs	r0, #0
 8004d3c:	bf18      	it	ne
 8004d3e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004d40:	4240      	negs	r0, r0
 8004d42:	bd08      	pop	{r3, pc}
 8004d44:	2400b5c0 	.word	0x2400b5c0

08004d48 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004d48:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	4b08      	ldr	r3, [pc, #32]	@ (8004d70 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8004d4e:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8004d52:	2101      	movs	r1, #1
 8004d54:	2200      	movs	r2, #0
 8004d56:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004d5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d5e:	4619      	mov	r1, r3
 8004d60:	f006 fca4 	bl	800b6ac <HAL_SDRAM_SendCommand>
 8004d64:	3800      	subs	r0, #0
 8004d66:	bf18      	it	ne
 8004d68:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004d6a:	4240      	negs	r0, r0
 8004d6c:	bd08      	pop	{r3, pc}
 8004d6e:	bf00      	nop
 8004d70:	2400b5c0 	.word	0x2400b5c0

08004d74 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8004d74:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004d76:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 8004d7a:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004d7c:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8004d7e:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004d80:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8004d82:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8004d84:	6991      	ldr	r1, [r2, #24]
 8004d86:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004d88:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8004d8a:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004d8c:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004d8e:	4907      	ldr	r1, [pc, #28]	@ (8004dac <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8004d90:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8004d92:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004d94:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8004d96:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004d9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d9e:	f006 fc85 	bl	800b6ac <HAL_SDRAM_SendCommand>
 8004da2:	3800      	subs	r0, #0
 8004da4:	bf18      	it	ne
 8004da6:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004da8:	4240      	negs	r0, r0
 8004daa:	bd10      	pop	{r4, pc}
 8004dac:	2400b5c0 	.word	0x2400b5c0

08004db0 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8004db0:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8004db2:	4b08      	ldr	r3, [pc, #32]	@ (8004dd4 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8004db4:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8004db8:	2108      	movs	r1, #8
 8004dba:	2200      	movs	r2, #0
 8004dbc:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004dc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	f006 fc71 	bl	800b6ac <HAL_SDRAM_SendCommand>
 8004dca:	3800      	subs	r0, #0
 8004dcc:	bf18      	it	ne
 8004dce:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004dd0:	4240      	negs	r0, r0
 8004dd2:	bd08      	pop	{r3, pc}
 8004dd4:	2400b5c0 	.word	0x2400b5c0

08004dd8 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8004dd8:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8004dda:	f006 fc86 	bl	800b6ea <HAL_SDRAM_ProgramRefreshRate>
 8004dde:	3800      	subs	r0, #0
 8004de0:	bf18      	it	ne
 8004de2:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004de4:	4240      	negs	r0, r0
 8004de6:	bd08      	pop	{r3, pc}

08004de8 <IS42S32800J_Init>:
{
 8004de8:	b570      	push	{r4, r5, r6, lr}
 8004dea:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004dec:	6809      	ldr	r1, [r1, #0]
{
 8004dee:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004df0:	f7ff ff96 	bl	8004d20 <IS42S32800J_ClockEnable>
 8004df4:	b110      	cbz	r0, 8004dfc <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8004df6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8004dfc:	f001 fc7e 	bl	80066fc <HAL_GetTick>
 8004e00:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004e02:	f001 fc7b 	bl	80066fc <HAL_GetTick>
 8004e06:	4286      	cmp	r6, r0
 8004e08:	d0fb      	beq.n	8004e02 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004e0a:	6821      	ldr	r1, [r4, #0]
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f7ff ff9b 	bl	8004d48 <IS42S32800J_Precharge>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d1ef      	bne.n	8004df6 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8004e16:	4628      	mov	r0, r5
 8004e18:	e9d4 1200 	ldrd	r1, r2, [r4]
 8004e1c:	f7ff ffc8 	bl	8004db0 <IS42S32800J_RefreshMode>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d1e8      	bne.n	8004df6 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8004e24:	4621      	mov	r1, r4
 8004e26:	4628      	mov	r0, r5
 8004e28:	f7ff ffa4 	bl	8004d74 <IS42S32800J_ModeRegConfig>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d1e2      	bne.n	8004df6 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8004e30:	68a1      	ldr	r1, [r4, #8]
 8004e32:	4628      	mov	r0, r5
 8004e34:	f7ff ffd0 	bl	8004dd8 <IS42S32800J_RefreshRate>
 8004e38:	3800      	subs	r0, #0
 8004e3a:	bf18      	it	ne
 8004e3c:	2001      	movne	r0, #1
 8004e3e:	4240      	negs	r0, r0
  return ret;
 8004e40:	e7db      	b.n	8004dfa <IS42S32800J_Init+0x12>

08004e42 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8004e42:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004e46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8004e4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8004e4e:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8004e52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e56:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8004e5a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004e5e:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8004e60:	2000      	movs	r0, #0
 8004e62:	4770      	bx	lr

08004e64 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004e64:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004e66:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8004e6a:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004e6c:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004e70:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8004e72:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004e74:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8004e76:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8004e78:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004e7a:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8004e7c:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e7e:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004e80:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8004e82:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004e84:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8004e86:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e88:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004e8a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004e8e:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8004e92:	2310      	movs	r3, #16
 8004e94:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004e96:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004e9a:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8004e9c:	f240 1301 	movw	r3, #257	@ 0x101
 8004ea0:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ea2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ea6:	f004 feaf 	bl	8009c08 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8004eaa:	2800      	cmp	r0, #0

}
 8004eac:	bf14      	ite	ne
 8004eae:	f06f 0004 	mvnne.w	r0, #4
 8004eb2:	2000      	moveq	r0, #0
 8004eb4:	b015      	add	sp, #84	@ 0x54
 8004eb6:	f85d fb04 	ldr.w	pc, [sp], #4

08004eba <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004eba:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ebc:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004ec0:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004ec2:	bf18      	it	ne
 8004ec4:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004ec8:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004eca:	bf08      	it	eq
 8004ecc:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004ed0:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ed2:	a906      	add	r1, sp, #24
{
 8004ed4:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004ed6:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8004ed8:	2306      	movs	r3, #6
 8004eda:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004edc:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004ede:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8004ee2:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8004ee4:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004ee6:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004ee8:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004eec:	f004 fd8c 	bl	8009a08 <HAL_QSPI_Command>
 8004ef0:	bb20      	cbnz	r0, 8004f3c <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004ef2:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8004ef6:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004ef8:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004efa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004efe:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f00:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004f02:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8004f06:	f04f 0310 	mov.w	r3, #16
 8004f0a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004f0e:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f12:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004f14:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004f18:	bf14      	ite	ne
 8004f1a:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8004f1e:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f22:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004f24:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f26:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004f2a:	f004 fe6d 	bl	8009c08 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	bf14      	ite	ne
 8004f32:	f06f 0004 	mvnne.w	r0, #4
 8004f36:	2000      	moveq	r0, #0
}
 8004f38:	b015      	add	sp, #84	@ 0x54
 8004f3a:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8004f3c:	f06f 0001 	mvn.w	r0, #1
 8004f40:	e7fa      	b.n	8004f38 <MT25TL01G_WriteEnable+0x7e>

08004f42 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004f42:	2903      	cmp	r1, #3
{
 8004f44:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004f46:	bf18      	it	ne
 8004f48:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004f4c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004f4e:	bf08      	it	eq
 8004f50:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004f54:	4604      	mov	r4, r0
 8004f56:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004f58:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8004f5a:	23b7      	movs	r3, #183	@ 0xb7
 8004f5c:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004f5e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004f60:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004f64:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004f66:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004f68:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004f6a:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8004f6e:	f7ff ffa4 	bl	8004eba <MT25TL01G_WriteEnable>
 8004f72:	b118      	cbz	r0, 8004f7c <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8004f74:	f06f 0001 	mvn.w	r0, #1
}
 8004f78:	b00f      	add	sp, #60	@ 0x3c
 8004f7a:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f80:	4669      	mov	r1, sp
 8004f82:	4620      	mov	r0, r4
 8004f84:	f004 fd40 	bl	8009a08 <HAL_QSPI_Command>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	d1f3      	bne.n	8004f74 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f7ff ff68 	bl	8004e64 <MT25TL01G_AutoPollingMemReady>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	d0ef      	beq.n	8004f78 <MT25TL01G_Enter4BytesAddressMode+0x36>
 8004f98:	e7ec      	b.n	8004f74 <MT25TL01G_Enter4BytesAddressMode+0x32>

08004f9a <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004f9a:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004f9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004fa0:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004fa6:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004fa8:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004faa:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004fac:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004fae:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004fb0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004fb4:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004fb6:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004fb8:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004fba:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004fbe:	f004 fd23 	bl	8009a08 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004fc2:	2800      	cmp	r0, #0
}
 8004fc4:	bf14      	ite	ne
 8004fc6:	f06f 0001 	mvnne.w	r0, #1
 8004fca:	2000      	moveq	r0, #0
 8004fcc:	b00f      	add	sp, #60	@ 0x3c
 8004fce:	f85d fb04 	ldr.w	pc, [sp], #4

08004fd2 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004fd2:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004fd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004fd8:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004fda:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004fde:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004fe0:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004fe2:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004fe4:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004fe6:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004fe8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004fec:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004fee:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004ff0:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004ff2:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ff6:	f004 fd07 	bl	8009a08 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004ffa:	2800      	cmp	r0, #0
}
 8004ffc:	bf14      	ite	ne
 8004ffe:	f06f 0001 	mvnne.w	r0, #1
 8005002:	2000      	moveq	r0, #0
 8005004:	b00f      	add	sp, #60	@ 0x3c
 8005006:	f85d fb04 	ldr.w	pc, [sp], #4

0800500a <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800500a:	b500      	push	{lr}
 800500c:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800500e:	2903      	cmp	r1, #3
 8005010:	d80e      	bhi.n	8005030 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8005012:	e8df f001 	tbb	[pc, r1]
 8005016:	2902      	.short	0x2902
 8005018:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800501a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800501e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8005020:	230e      	movs	r3, #14
 8005022:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005024:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005028:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800502a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800502e:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8005030:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005032:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8005036:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800503a:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800503c:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800503e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005042:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005044:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8005046:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800504a:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800504c:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800504e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8005050:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005054:	f004 fe29 	bl	8009caa <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8005058:	2800      	cmp	r0, #0
}
 800505a:	bf14      	ite	ne
 800505c:	f06f 0005 	mvnne.w	r0, #5
 8005060:	2000      	moveq	r0, #0
 8005062:	b011      	add	sp, #68	@ 0x44
 8005064:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005068:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800506c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800506e:	233d      	movs	r3, #61	@ 0x3d
 8005070:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005072:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005076:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8005078:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800507c:	e7d7      	b.n	800502e <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800507e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005082:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8005084:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8005086:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005088:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800508c:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800508e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8005092:	e7cc      	b.n	800502e <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005094:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005098:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800509a:	23ed      	movs	r3, #237	@ 0xed
 800509c:	e7f3      	b.n	8005086 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

0800509e <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800509e:	b500      	push	{lr}
 80050a0:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80050a2:	2903      	cmp	r1, #3
 80050a4:	d80e      	bhi.n	80050c4 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 80050a6:	e8df f001 	tbb	[pc, r1]
 80050aa:	2502      	.short	0x2502
 80050ac:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80050ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050b2:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80050b4:	230c      	movs	r3, #12
 80050b6:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80050b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050bc:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80050be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80050c2:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80050c4:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80050c6:	466a      	mov	r2, sp
 80050c8:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80050ca:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80050cc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80050d0:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80050d2:	2300      	movs	r3, #0
 80050d4:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80050d6:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80050d8:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80050dc:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80050e0:	f004 fde3 	bl	8009caa <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 80050e4:	2800      	cmp	r0, #0
}
 80050e6:	bf14      	ite	ne
 80050e8:	f06f 0005 	mvnne.w	r0, #5
 80050ec:	2000      	moveq	r0, #0
 80050ee:	b011      	add	sp, #68	@ 0x44
 80050f0:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80050f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050f8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80050fa:	23bc      	movs	r3, #188	@ 0xbc
 80050fc:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 80050fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005102:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8005104:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005108:	e7db      	b.n	80050c2 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800510a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800510e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8005110:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8005112:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005114:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005118:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800511a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800511e:	e7d0      	b.n	80050c2 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005120:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005124:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8005126:	23eb      	movs	r3, #235	@ 0xeb
 8005128:	e7f3      	b.n	8005112 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

0800512a <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800512a:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800512c:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8005130:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005132:	bf18      	it	ne
 8005134:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8005138:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800513a:	bf08      	it	eq
 800513c:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005140:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005142:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8005144:	2366      	movs	r3, #102	@ 0x66
 8005146:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005148:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800514a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800514e:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8005150:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005152:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005154:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005158:	f004 fc56 	bl	8009a08 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800515c:	2800      	cmp	r0, #0
}
 800515e:	bf14      	ite	ne
 8005160:	f06f 0001 	mvnne.w	r0, #1
 8005164:	2000      	moveq	r0, #0
 8005166:	b00f      	add	sp, #60	@ 0x3c
 8005168:	f85d fb04 	ldr.w	pc, [sp], #4

0800516c <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800516c:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800516e:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8005172:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005174:	bf18      	it	ne
 8005176:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 800517a:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800517c:	bf08      	it	eq
 800517e:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005182:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005184:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8005186:	2399      	movs	r3, #153	@ 0x99
 8005188:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800518a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800518c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005190:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8005192:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005194:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005196:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800519a:	f004 fc35 	bl	8009a08 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800519e:	2800      	cmp	r0, #0
}
 80051a0:	bf14      	ite	ne
 80051a2:	f06f 0001 	mvnne.w	r0, #1
 80051a6:	2000      	moveq	r0, #0
 80051a8:	b00f      	add	sp, #60	@ 0x3c
 80051aa:	f85d fb04 	ldr.w	pc, [sp], #4

080051ae <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80051ae:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80051b0:	6884      	ldr	r4, [r0, #8]
 80051b2:	8800      	ldrh	r0, [r0, #0]
 80051b4:	46a4      	mov	ip, r4
}
 80051b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80051ba:	4760      	bx	ip

080051bc <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80051bc:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80051be:	6844      	ldr	r4, [r0, #4]
 80051c0:	8800      	ldrh	r0, [r0, #0]
 80051c2:	46a4      	mov	ip, r4
}
 80051c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80051c8:	4760      	bx	ip

080051ca <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 80051ca:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80051cc:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 80051ce:	4604      	mov	r4, r0
 80051d0:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 80051d2:	4798      	blx	r3
 80051d4:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80051d6:	68e3      	ldr	r3, [r4, #12]
 80051d8:	4798      	blx	r3
 80051da:	1b83      	subs	r3, r0, r6
 80051dc:	42ab      	cmp	r3, r5
 80051de:	d3fa      	bcc.n	80051d6 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 80051e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080051e4 <OTM8009A_Init>:
{
 80051e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051e8:	2300      	movs	r3, #0
 80051ea:	f100 0510 	add.w	r5, r0, #16
{
 80051ee:	4607      	mov	r7, r0
 80051f0:	460e      	mov	r6, r1
 80051f2:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051f4:	4619      	mov	r1, r3
 80051f6:	4ade      	ldr	r2, [pc, #888]	@ (8005570 <OTM8009A_Init+0x38c>)
 80051f8:	4628      	mov	r0, r5
 80051fa:	f000 fb99 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80051fe:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005200:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005202:	4adc      	ldr	r2, [pc, #880]	@ (8005574 <OTM8009A_Init+0x390>)
 8005204:	21ff      	movs	r1, #255	@ 0xff
 8005206:	4628      	mov	r0, r5
 8005208:	f000 fb92 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800520c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800520e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005210:	4ad9      	ldr	r2, [pc, #868]	@ (8005578 <OTM8009A_Init+0x394>)
 8005212:	4619      	mov	r1, r3
 8005214:	4628      	mov	r0, r5
 8005216:	f000 fb8b 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800521a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800521c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800521e:	4ad7      	ldr	r2, [pc, #860]	@ (800557c <OTM8009A_Init+0x398>)
 8005220:	21ff      	movs	r1, #255	@ 0xff
 8005222:	4628      	mov	r0, r5
 8005224:	f000 fb84 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005228:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800522a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800522c:	4ad2      	ldr	r2, [pc, #840]	@ (8005578 <OTM8009A_Init+0x394>)
 800522e:	4619      	mov	r1, r3
 8005230:	4628      	mov	r0, r5
 8005232:	f000 fb7d 	bl	8005930 <otm8009a_write_reg>
 8005236:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8005238:	2300      	movs	r3, #0
 800523a:	4ad1      	ldr	r2, [pc, #836]	@ (8005580 <OTM8009A_Init+0x39c>)
 800523c:	21c4      	movs	r1, #196	@ 0xc4
 800523e:	4628      	mov	r0, r5
 8005240:	f000 fb76 	bl	8005930 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005244:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8005246:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005248:	4638      	mov	r0, r7
 800524a:	f7ff ffbe 	bl	80051ca <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800524e:	2300      	movs	r3, #0
 8005250:	4acc      	ldr	r2, [pc, #816]	@ (8005584 <OTM8009A_Init+0x3a0>)
 8005252:	4628      	mov	r0, r5
 8005254:	4619      	mov	r1, r3
 8005256:	f000 fb6b 	bl	8005930 <otm8009a_write_reg>
 800525a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800525c:	2300      	movs	r3, #0
 800525e:	4aca      	ldr	r2, [pc, #808]	@ (8005588 <OTM8009A_Init+0x3a4>)
 8005260:	21c4      	movs	r1, #196	@ 0xc4
 8005262:	4628      	mov	r0, r5
 8005264:	f000 fb64 	bl	8005930 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005268:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800526a:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 800526c:	4638      	mov	r0, r7
 800526e:	f7ff ffac 	bl	80051ca <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8005272:	2300      	movs	r3, #0
 8005274:	4ac5      	ldr	r2, [pc, #788]	@ (800558c <OTM8009A_Init+0x3a8>)
 8005276:	4628      	mov	r0, r5
 8005278:	4619      	mov	r1, r3
 800527a:	f000 fb59 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800527e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8005280:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8005282:	4ac3      	ldr	r2, [pc, #780]	@ (8005590 <OTM8009A_Init+0x3ac>)
 8005284:	21c5      	movs	r1, #197	@ 0xc5
 8005286:	4628      	mov	r0, r5
 8005288:	f000 fb52 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800528c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800528e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005290:	4ac0      	ldr	r2, [pc, #768]	@ (8005594 <OTM8009A_Init+0x3b0>)
 8005292:	4619      	mov	r1, r3
 8005294:	4628      	mov	r0, r5
 8005296:	f000 fb4b 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800529a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800529c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800529e:	4abe      	ldr	r2, [pc, #760]	@ (8005598 <OTM8009A_Init+0x3b4>)
 80052a0:	21c5      	movs	r1, #197	@ 0xc5
 80052a2:	4628      	mov	r0, r5
 80052a4:	f000 fb44 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80052a8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80052aa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80052ac:	4abb      	ldr	r2, [pc, #748]	@ (800559c <OTM8009A_Init+0x3b8>)
 80052ae:	4619      	mov	r1, r3
 80052b0:	4628      	mov	r0, r5
 80052b2:	f000 fb3d 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80052b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80052b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80052ba:	4ab9      	ldr	r2, [pc, #740]	@ (80055a0 <OTM8009A_Init+0x3bc>)
 80052bc:	21c0      	movs	r1, #192	@ 0xc0
 80052be:	4628      	mov	r0, r5
 80052c0:	f000 fb36 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052c4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80052c6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052c8:	4aa9      	ldr	r2, [pc, #676]	@ (8005570 <OTM8009A_Init+0x38c>)
 80052ca:	4619      	mov	r1, r3
 80052cc:	4628      	mov	r0, r5
 80052ce:	f000 fb2f 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80052d2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80052d6:	4ab3      	ldr	r2, [pc, #716]	@ (80055a4 <OTM8009A_Init+0x3c0>)
 80052d8:	21d9      	movs	r1, #217	@ 0xd9
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 fb28 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80052e0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80052e2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80052e4:	4ab0      	ldr	r2, [pc, #704]	@ (80055a8 <OTM8009A_Init+0x3c4>)
 80052e6:	4619      	mov	r1, r3
 80052e8:	4628      	mov	r0, r5
 80052ea:	f000 fb21 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80052ee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80052f0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80052f2:	4aae      	ldr	r2, [pc, #696]	@ (80055ac <OTM8009A_Init+0x3c8>)
 80052f4:	21c1      	movs	r1, #193	@ 0xc1
 80052f6:	4628      	mov	r0, r5
 80052f8:	f000 fb1a 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80052fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80052fe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005300:	4aab      	ldr	r2, [pc, #684]	@ (80055b0 <OTM8009A_Init+0x3cc>)
 8005302:	4619      	mov	r1, r3
 8005304:	4628      	mov	r0, r5
 8005306:	f000 fb13 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800530a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800530c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800530e:	4aa9      	ldr	r2, [pc, #676]	@ (80055b4 <OTM8009A_Init+0x3d0>)
 8005310:	21c5      	movs	r1, #197	@ 0xc5
 8005312:	4628      	mov	r0, r5
 8005314:	f000 fb0c 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005318:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800531a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800531c:	4aa6      	ldr	r2, [pc, #664]	@ (80055b8 <OTM8009A_Init+0x3d4>)
 800531e:	4619      	mov	r1, r3
 8005320:	4628      	mov	r0, r5
 8005322:	f000 fb05 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005326:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005328:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800532a:	4a9b      	ldr	r2, [pc, #620]	@ (8005598 <OTM8009A_Init+0x3b4>)
 800532c:	21c5      	movs	r1, #197	@ 0xc5
 800532e:	4628      	mov	r0, r5
 8005330:	f000 fafe 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005334:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005336:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005338:	4a8d      	ldr	r2, [pc, #564]	@ (8005570 <OTM8009A_Init+0x38c>)
 800533a:	4619      	mov	r1, r3
 800533c:	4628      	mov	r0, r5
 800533e:	f000 faf7 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005342:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005344:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005346:	4a9d      	ldr	r2, [pc, #628]	@ (80055bc <OTM8009A_Init+0x3d8>)
 8005348:	21d8      	movs	r1, #216	@ 0xd8
 800534a:	4628      	mov	r0, r5
 800534c:	f000 faf0 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005350:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005352:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005354:	4a9a      	ldr	r2, [pc, #616]	@ (80055c0 <OTM8009A_Init+0x3dc>)
 8005356:	4619      	mov	r1, r3
 8005358:	4628      	mov	r0, r5
 800535a:	f000 fae9 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800535e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005360:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8005362:	4a98      	ldr	r2, [pc, #608]	@ (80055c4 <OTM8009A_Init+0x3e0>)
 8005364:	21c5      	movs	r1, #197	@ 0xc5
 8005366:	4628      	mov	r0, r5
 8005368:	f000 fae2 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800536c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800536e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005370:	4a95      	ldr	r2, [pc, #596]	@ (80055c8 <OTM8009A_Init+0x3e4>)
 8005372:	4619      	mov	r1, r3
 8005374:	4628      	mov	r0, r5
 8005376:	f000 fadb 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800537a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800537c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800537e:	4a93      	ldr	r2, [pc, #588]	@ (80055cc <OTM8009A_Init+0x3e8>)
 8005380:	21c0      	movs	r1, #192	@ 0xc0
 8005382:	4628      	mov	r0, r5
 8005384:	f000 fad4 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005388:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800538a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800538c:	4a90      	ldr	r2, [pc, #576]	@ (80055d0 <OTM8009A_Init+0x3ec>)
 800538e:	4619      	mov	r1, r3
 8005390:	4628      	mov	r0, r5
 8005392:	f000 facd 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005396:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005398:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800539a:	4a8e      	ldr	r2, [pc, #568]	@ (80055d4 <OTM8009A_Init+0x3f0>)
 800539c:	21c5      	movs	r1, #197	@ 0xc5
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 fac6 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80053a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80053a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80053a8:	4a8b      	ldr	r2, [pc, #556]	@ (80055d8 <OTM8009A_Init+0x3f4>)
 80053aa:	4619      	mov	r1, r3
 80053ac:	4628      	mov	r0, r5
 80053ae:	f000 fabf 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80053b2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80053b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80053b6:	4a89      	ldr	r2, [pc, #548]	@ (80055dc <OTM8009A_Init+0x3f8>)
 80053b8:	21c4      	movs	r1, #196	@ 0xc4
 80053ba:	4628      	mov	r0, r5
 80053bc:	f000 fab8 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80053c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80053c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80053c4:	4a78      	ldr	r2, [pc, #480]	@ (80055a8 <OTM8009A_Init+0x3c4>)
 80053c6:	4619      	mov	r1, r3
 80053c8:	4628      	mov	r0, r5
 80053ca:	f000 fab1 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80053ce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80053d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80053d2:	4a83      	ldr	r2, [pc, #524]	@ (80055e0 <OTM8009A_Init+0x3fc>)
 80053d4:	21c1      	movs	r1, #193	@ 0xc1
 80053d6:	4628      	mov	r0, r5
 80053d8:	f000 faaa 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80053dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80053de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80053e0:	4a80      	ldr	r2, [pc, #512]	@ (80055e4 <OTM8009A_Init+0x400>)
 80053e2:	4619      	mov	r1, r3
 80053e4:	4628      	mov	r0, r5
 80053e6:	f000 faa3 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80053ea:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80053ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80053ee:	4a7e      	ldr	r2, [pc, #504]	@ (80055e8 <OTM8009A_Init+0x404>)
 80053f0:	21b3      	movs	r1, #179	@ 0xb3
 80053f2:	4628      	mov	r0, r5
 80053f4:	f000 fa9c 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80053f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80053fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80053fc:	4a5e      	ldr	r2, [pc, #376]	@ (8005578 <OTM8009A_Init+0x394>)
 80053fe:	4619      	mov	r1, r3
 8005400:	4628      	mov	r0, r5
 8005402:	f000 fa95 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005406:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005408:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800540a:	4a78      	ldr	r2, [pc, #480]	@ (80055ec <OTM8009A_Init+0x408>)
 800540c:	21ce      	movs	r1, #206	@ 0xce
 800540e:	4628      	mov	r0, r5
 8005410:	f000 fa8e 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005414:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005416:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005418:	4a75      	ldr	r2, [pc, #468]	@ (80055f0 <OTM8009A_Init+0x40c>)
 800541a:	4619      	mov	r1, r3
 800541c:	4628      	mov	r0, r5
 800541e:	f000 fa87 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005422:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005424:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005426:	4a73      	ldr	r2, [pc, #460]	@ (80055f4 <OTM8009A_Init+0x410>)
 8005428:	21ce      	movs	r1, #206	@ 0xce
 800542a:	4628      	mov	r0, r5
 800542c:	f000 fa80 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005430:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005432:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005434:	4a70      	ldr	r2, [pc, #448]	@ (80055f8 <OTM8009A_Init+0x414>)
 8005436:	4619      	mov	r1, r3
 8005438:	4628      	mov	r0, r5
 800543a:	f000 fa79 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800543e:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005440:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005442:	4a6e      	ldr	r2, [pc, #440]	@ (80055fc <OTM8009A_Init+0x418>)
 8005444:	21ce      	movs	r1, #206	@ 0xce
 8005446:	4628      	mov	r0, r5
 8005448:	f000 fa72 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800544c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800544e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005450:	4a6b      	ldr	r2, [pc, #428]	@ (8005600 <OTM8009A_Init+0x41c>)
 8005452:	4619      	mov	r1, r3
 8005454:	4628      	mov	r0, r5
 8005456:	f000 fa6b 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800545a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800545c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800545e:	4a69      	ldr	r2, [pc, #420]	@ (8005604 <OTM8009A_Init+0x420>)
 8005460:	21cf      	movs	r1, #207	@ 0xcf
 8005462:	4628      	mov	r0, r5
 8005464:	f000 fa64 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005468:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800546a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800546c:	4a66      	ldr	r2, [pc, #408]	@ (8005608 <OTM8009A_Init+0x424>)
 800546e:	4619      	mov	r1, r3
 8005470:	4628      	mov	r0, r5
 8005472:	f000 fa5d 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005476:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005478:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800547a:	4a64      	ldr	r2, [pc, #400]	@ (800560c <OTM8009A_Init+0x428>)
 800547c:	21cf      	movs	r1, #207	@ 0xcf
 800547e:	4628      	mov	r0, r5
 8005480:	f000 fa56 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005484:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005486:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005488:	4a3b      	ldr	r2, [pc, #236]	@ (8005578 <OTM8009A_Init+0x394>)
 800548a:	4619      	mov	r1, r3
 800548c:	4628      	mov	r0, r5
 800548e:	f000 fa4f 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005492:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005494:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005496:	4a5e      	ldr	r2, [pc, #376]	@ (8005610 <OTM8009A_Init+0x42c>)
 8005498:	21cb      	movs	r1, #203	@ 0xcb
 800549a:	4628      	mov	r0, r5
 800549c:	f000 fa48 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80054a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80054a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80054a4:	4a5b      	ldr	r2, [pc, #364]	@ (8005614 <OTM8009A_Init+0x430>)
 80054a6:	4619      	mov	r1, r3
 80054a8:	4628      	mov	r0, r5
 80054aa:	f000 fa41 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80054ae:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80054b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80054b2:	4a59      	ldr	r2, [pc, #356]	@ (8005618 <OTM8009A_Init+0x434>)
 80054b4:	21cb      	movs	r1, #203	@ 0xcb
 80054b6:	4628      	mov	r0, r5
 80054b8:	f000 fa3a 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80054bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80054be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80054c0:	4a4b      	ldr	r2, [pc, #300]	@ (80055f0 <OTM8009A_Init+0x40c>)
 80054c2:	4619      	mov	r1, r3
 80054c4:	4628      	mov	r0, r5
 80054c6:	f000 fa33 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80054ca:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80054cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80054ce:	4a53      	ldr	r2, [pc, #332]	@ (800561c <OTM8009A_Init+0x438>)
 80054d0:	21cb      	movs	r1, #203	@ 0xcb
 80054d2:	4628      	mov	r0, r5
 80054d4:	f000 fa2c 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80054d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80054da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80054dc:	4a46      	ldr	r2, [pc, #280]	@ (80055f8 <OTM8009A_Init+0x414>)
 80054de:	4619      	mov	r1, r3
 80054e0:	4628      	mov	r0, r5
 80054e2:	f000 fa25 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80054e6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80054e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80054ea:	4a4d      	ldr	r2, [pc, #308]	@ (8005620 <OTM8009A_Init+0x43c>)
 80054ec:	21cb      	movs	r1, #203	@ 0xcb
 80054ee:	4628      	mov	r0, r5
 80054f0:	f000 fa1e 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80054f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80054f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80054f8:	4a41      	ldr	r2, [pc, #260]	@ (8005600 <OTM8009A_Init+0x41c>)
 80054fa:	4619      	mov	r1, r3
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 fa17 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005502:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005504:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005506:	4a47      	ldr	r2, [pc, #284]	@ (8005624 <OTM8009A_Init+0x440>)
 8005508:	21cb      	movs	r1, #203	@ 0xcb
 800550a:	4628      	mov	r0, r5
 800550c:	f000 fa10 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005510:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005512:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005514:	4a3c      	ldr	r2, [pc, #240]	@ (8005608 <OTM8009A_Init+0x424>)
 8005516:	4619      	mov	r1, r3
 8005518:	4628      	mov	r0, r5
 800551a:	f000 fa09 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800551e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005520:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005522:	4a41      	ldr	r2, [pc, #260]	@ (8005628 <OTM8009A_Init+0x444>)
 8005524:	21cb      	movs	r1, #203	@ 0xcb
 8005526:	4628      	mov	r0, r5
 8005528:	f000 fa02 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800552c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800552e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005530:	4a3e      	ldr	r2, [pc, #248]	@ (800562c <OTM8009A_Init+0x448>)
 8005532:	4619      	mov	r1, r3
 8005534:	4628      	mov	r0, r5
 8005536:	f000 f9fb 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800553a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800553c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800553e:	4a3c      	ldr	r2, [pc, #240]	@ (8005630 <OTM8009A_Init+0x44c>)
 8005540:	21cb      	movs	r1, #203	@ 0xcb
 8005542:	4628      	mov	r0, r5
 8005544:	f000 f9f4 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005548:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800554a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800554c:	4a39      	ldr	r2, [pc, #228]	@ (8005634 <OTM8009A_Init+0x450>)
 800554e:	4619      	mov	r1, r3
 8005550:	4628      	mov	r0, r5
 8005552:	f000 f9ed 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005556:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005558:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800555a:	4a37      	ldr	r2, [pc, #220]	@ (8005638 <OTM8009A_Init+0x454>)
 800555c:	21cb      	movs	r1, #203	@ 0xcb
 800555e:	4628      	mov	r0, r5
 8005560:	f000 f9e6 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005564:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005566:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005568:	4a03      	ldr	r2, [pc, #12]	@ (8005578 <OTM8009A_Init+0x394>)
 800556a:	4619      	mov	r1, r3
 800556c:	4628      	mov	r0, r5
 800556e:	e065      	b.n	800563c <OTM8009A_Init+0x458>
 8005570:	08026e69 	.word	0x08026e69
 8005574:	08026e65 	.word	0x08026e65
 8005578:	08026e6a 	.word	0x08026e6a
 800557c:	08026e63 	.word	0x08026e63
 8005580:	08026e6b 	.word	0x08026e6b
 8005584:	08026e6c 	.word	0x08026e6c
 8005588:	08026e6d 	.word	0x08026e6d
 800558c:	08026e6e 	.word	0x08026e6e
 8005590:	08026e6f 	.word	0x08026e6f
 8005594:	08026e70 	.word	0x08026e70
 8005598:	08026e71 	.word	0x08026e71
 800559c:	08026e72 	.word	0x08026e72
 80055a0:	08026e73 	.word	0x08026e73
 80055a4:	08026e74 	.word	0x08026e74
 80055a8:	08026e77 	.word	0x08026e77
 80055ac:	08026e78 	.word	0x08026e78
 80055b0:	08026e79 	.word	0x08026e79
 80055b4:	08026e7a 	.word	0x08026e7a
 80055b8:	08026e7b 	.word	0x08026e7b
 80055bc:	08026e61 	.word	0x08026e61
 80055c0:	08026e7c 	.word	0x08026e7c
 80055c4:	08026e7d 	.word	0x08026e7d
 80055c8:	08026e7e 	.word	0x08026e7e
 80055cc:	08026e7f 	.word	0x08026e7f
 80055d0:	08026e80 	.word	0x08026e80
 80055d4:	08026e81 	.word	0x08026e81
 80055d8:	08026e75 	.word	0x08026e75
 80055dc:	08026e82 	.word	0x08026e82
 80055e0:	08026e83 	.word	0x08026e83
 80055e4:	08026e84 	.word	0x08026e84
 80055e8:	08026e5f 	.word	0x08026e5f
 80055ec:	08026e59 	.word	0x08026e59
 80055f0:	08026e85 	.word	0x08026e85
 80055f4:	08026e4b 	.word	0x08026e4b
 80055f8:	08026e86 	.word	0x08026e86
 80055fc:	08026e3d 	.word	0x08026e3d
 8005600:	08026e87 	.word	0x08026e87
 8005604:	08026e33 	.word	0x08026e33
 8005608:	08026e88 	.word	0x08026e88
 800560c:	08026e95 	.word	0x08026e95
 8005610:	08026e29 	.word	0x08026e29
 8005614:	08026e89 	.word	0x08026e89
 8005618:	08026e1a 	.word	0x08026e1a
 800561c:	08026e0b 	.word	0x08026e0b
 8005620:	08026e01 	.word	0x08026e01
 8005624:	08026df2 	.word	0x08026df2
 8005628:	08026de3 	.word	0x08026de3
 800562c:	08026e8a 	.word	0x08026e8a
 8005630:	08026dd9 	.word	0x08026dd9
 8005634:	08026e8b 	.word	0x08026e8b
 8005638:	08026dcf 	.word	0x08026dcf
 800563c:	f000 f978 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005640:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005642:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005644:	4a8e      	ldr	r2, [pc, #568]	@ (8005880 <OTM8009A_Init+0x69c>)
 8005646:	21cc      	movs	r1, #204	@ 0xcc
 8005648:	4628      	mov	r0, r5
 800564a:	f000 f971 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800564e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005650:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005652:	4a8c      	ldr	r2, [pc, #560]	@ (8005884 <OTM8009A_Init+0x6a0>)
 8005654:	4619      	mov	r1, r3
 8005656:	4628      	mov	r0, r5
 8005658:	f000 f96a 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800565c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800565e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005660:	4a89      	ldr	r2, [pc, #548]	@ (8005888 <OTM8009A_Init+0x6a4>)
 8005662:	21cc      	movs	r1, #204	@ 0xcc
 8005664:	4628      	mov	r0, r5
 8005666:	f000 f963 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800566a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800566c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800566e:	4a87      	ldr	r2, [pc, #540]	@ (800588c <OTM8009A_Init+0x6a8>)
 8005670:	4619      	mov	r1, r3
 8005672:	4628      	mov	r0, r5
 8005674:	f000 f95c 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005678:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800567a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800567c:	4a84      	ldr	r2, [pc, #528]	@ (8005890 <OTM8009A_Init+0x6ac>)
 800567e:	21cc      	movs	r1, #204	@ 0xcc
 8005680:	4628      	mov	r0, r5
 8005682:	f000 f955 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005686:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005688:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800568a:	4a82      	ldr	r2, [pc, #520]	@ (8005894 <OTM8009A_Init+0x6b0>)
 800568c:	4619      	mov	r1, r3
 800568e:	4628      	mov	r0, r5
 8005690:	f000 f94e 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005694:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005696:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005698:	4a7f      	ldr	r2, [pc, #508]	@ (8005898 <OTM8009A_Init+0x6b4>)
 800569a:	21cc      	movs	r1, #204	@ 0xcc
 800569c:	4628      	mov	r0, r5
 800569e:	f000 f947 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80056a2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80056a4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80056a6:	4a7d      	ldr	r2, [pc, #500]	@ (800589c <OTM8009A_Init+0x6b8>)
 80056a8:	4619      	mov	r1, r3
 80056aa:	4628      	mov	r0, r5
 80056ac:	f000 f940 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80056b0:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80056b2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80056b4:	4a7a      	ldr	r2, [pc, #488]	@ (80058a0 <OTM8009A_Init+0x6bc>)
 80056b6:	21cc      	movs	r1, #204	@ 0xcc
 80056b8:	4628      	mov	r0, r5
 80056ba:	f000 f939 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80056be:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80056c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80056c2:	4a78      	ldr	r2, [pc, #480]	@ (80058a4 <OTM8009A_Init+0x6c0>)
 80056c4:	4619      	mov	r1, r3
 80056c6:	4628      	mov	r0, r5
 80056c8:	f000 f932 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80056cc:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80056ce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80056d0:	4a75      	ldr	r2, [pc, #468]	@ (80058a8 <OTM8009A_Init+0x6c4>)
 80056d2:	21cc      	movs	r1, #204	@ 0xcc
 80056d4:	4628      	mov	r0, r5
 80056d6:	f000 f92b 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80056da:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80056dc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80056de:	4a73      	ldr	r2, [pc, #460]	@ (80058ac <OTM8009A_Init+0x6c8>)
 80056e0:	4619      	mov	r1, r3
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 f924 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80056e8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80056ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80056ec:	4a70      	ldr	r2, [pc, #448]	@ (80058b0 <OTM8009A_Init+0x6cc>)
 80056ee:	21c5      	movs	r1, #197	@ 0xc5
 80056f0:	4628      	mov	r0, r5
 80056f2:	f000 f91d 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80056f6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80056f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80056fa:	4a6e      	ldr	r2, [pc, #440]	@ (80058b4 <OTM8009A_Init+0x6d0>)
 80056fc:	4619      	mov	r1, r3
 80056fe:	4628      	mov	r0, r5
 8005700:	f000 f916 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005704:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005706:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005708:	4a6b      	ldr	r2, [pc, #428]	@ (80058b8 <OTM8009A_Init+0x6d4>)
 800570a:	21f5      	movs	r1, #245	@ 0xf5
 800570c:	4628      	mov	r0, r5
 800570e:	f000 f90f 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005712:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005714:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005716:	4a69      	ldr	r2, [pc, #420]	@ (80058bc <OTM8009A_Init+0x6d8>)
 8005718:	4619      	mov	r1, r3
 800571a:	4628      	mov	r0, r5
 800571c:	f000 f908 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005720:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005722:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005724:	4a66      	ldr	r2, [pc, #408]	@ (80058c0 <OTM8009A_Init+0x6dc>)
 8005726:	21c6      	movs	r1, #198	@ 0xc6
 8005728:	4628      	mov	r0, r5
 800572a:	f000 f901 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800572e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005730:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005732:	4a64      	ldr	r2, [pc, #400]	@ (80058c4 <OTM8009A_Init+0x6e0>)
 8005734:	4619      	mov	r1, r3
 8005736:	4628      	mov	r0, r5
 8005738:	f000 f8fa 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800573c:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800573e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005740:	4a61      	ldr	r2, [pc, #388]	@ (80058c8 <OTM8009A_Init+0x6e4>)
 8005742:	21ff      	movs	r1, #255	@ 0xff
 8005744:	4628      	mov	r0, r5
 8005746:	f000 f8f3 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800574a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800574c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800574e:	4a5d      	ldr	r2, [pc, #372]	@ (80058c4 <OTM8009A_Init+0x6e0>)
 8005750:	4619      	mov	r1, r3
 8005752:	4628      	mov	r0, r5
 8005754:	f000 f8ec 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005758:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800575a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800575c:	4a59      	ldr	r2, [pc, #356]	@ (80058c4 <OTM8009A_Init+0x6e0>)
 800575e:	4619      	mov	r1, r3
 8005760:	4628      	mov	r0, r5
 8005762:	f000 f8e5 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005766:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005768:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800576a:	4a58      	ldr	r2, [pc, #352]	@ (80058cc <OTM8009A_Init+0x6e8>)
 800576c:	21e1      	movs	r1, #225	@ 0xe1
 800576e:	4628      	mov	r0, r5
 8005770:	f000 f8de 	bl	8005930 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005774:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005776:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005778:	4a52      	ldr	r2, [pc, #328]	@ (80058c4 <OTM8009A_Init+0x6e0>)
 800577a:	4619      	mov	r1, r3
 800577c:	4628      	mov	r0, r5
 800577e:	f000 f8d7 	bl	8005930 <otm8009a_write_reg>
 8005782:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8005784:	2310      	movs	r3, #16
 8005786:	4a52      	ldr	r2, [pc, #328]	@ (80058d0 <OTM8009A_Init+0x6ec>)
 8005788:	21e2      	movs	r1, #226	@ 0xe2
 800578a:	4628      	mov	r0, r5
 800578c:	f000 f8d0 	bl	8005930 <otm8009a_write_reg>
 8005790:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005792:	2300      	movs	r3, #0
 8005794:	4a4f      	ldr	r2, [pc, #316]	@ (80058d4 <OTM8009A_Init+0x6f0>)
 8005796:	2111      	movs	r1, #17
 8005798:	4628      	mov	r0, r5
 800579a:	f000 f8c9 	bl	8005930 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 800579e:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80057a0:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 80057a2:	4638      	mov	r0, r7
 80057a4:	f7ff fd11 	bl	80051ca <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 80057a8:	4f4b      	ldr	r7, [pc, #300]	@ (80058d8 <OTM8009A_Init+0x6f4>)
 80057aa:	2e00      	cmp	r6, #0
 80057ac:	d061      	beq.n	8005872 <OTM8009A_Init+0x68e>
 80057ae:	2e02      	cmp	r6, #2
 80057b0:	d107      	bne.n	80057c2 <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 80057b2:	2300      	movs	r3, #0
 80057b4:	4a49      	ldr	r2, [pc, #292]	@ (80058dc <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80057b6:	213a      	movs	r1, #58	@ 0x3a
 80057b8:	4628      	mov	r0, r5
 80057ba:	f000 f8b9 	bl	8005930 <otm8009a_write_reg>
 80057be:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80057c0:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80057c2:	f1b8 0f01 	cmp.w	r8, #1
 80057c6:	d157      	bne.n	8005878 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80057c8:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80057ca:	f10d 0207 	add.w	r2, sp, #7
 80057ce:	2136      	movs	r1, #54	@ 0x36
 80057d0:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80057d2:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80057d6:	2300      	movs	r3, #0
 80057d8:	f000 f8aa 	bl	8005930 <otm8009a_write_reg>
 80057dc:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80057de:	2304      	movs	r3, #4
 80057e0:	4a3f      	ldr	r2, [pc, #252]	@ (80058e0 <OTM8009A_Init+0x6fc>)
 80057e2:	212a      	movs	r1, #42	@ 0x2a
 80057e4:	4628      	mov	r0, r5
 80057e6:	f000 f8a3 	bl	8005930 <otm8009a_write_reg>
 80057ea:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80057ec:	2304      	movs	r3, #4
 80057ee:	4a3d      	ldr	r2, [pc, #244]	@ (80058e4 <OTM8009A_Init+0x700>)
 80057f0:	212b      	movs	r1, #43	@ 0x2b
 80057f2:	4628      	mov	r0, r5
 80057f4:	f000 f89c 	bl	8005930 <otm8009a_write_reg>
 80057f8:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80057fa:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80057fe:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8005800:	2300      	movs	r3, #0
 8005802:	4a39      	ldr	r2, [pc, #228]	@ (80058e8 <OTM8009A_Init+0x704>)
 8005804:	2151      	movs	r1, #81	@ 0x51
 8005806:	4628      	mov	r0, r5
 8005808:	f000 f892 	bl	8005930 <otm8009a_write_reg>
 800580c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800580e:	4633      	mov	r3, r6
 8005810:	4a36      	ldr	r2, [pc, #216]	@ (80058ec <OTM8009A_Init+0x708>)
 8005812:	2153      	movs	r1, #83	@ 0x53
 8005814:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005816:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005818:	f000 f88a 	bl	8005930 <otm8009a_write_reg>
 800581c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800581e:	4633      	mov	r3, r6
 8005820:	4a33      	ldr	r2, [pc, #204]	@ (80058f0 <OTM8009A_Init+0x70c>)
 8005822:	2155      	movs	r1, #85	@ 0x55
 8005824:	4628      	mov	r0, r5
 8005826:	f000 f883 	bl	8005930 <otm8009a_write_reg>
 800582a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800582c:	4633      	mov	r3, r6
 800582e:	4a31      	ldr	r2, [pc, #196]	@ (80058f4 <OTM8009A_Init+0x710>)
 8005830:	215e      	movs	r1, #94	@ 0x5e
 8005832:	4628      	mov	r0, r5
 8005834:	f000 f87c 	bl	8005930 <otm8009a_write_reg>
 8005838:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800583a:	4633      	mov	r3, r6
 800583c:	4a2e      	ldr	r2, [pc, #184]	@ (80058f8 <OTM8009A_Init+0x714>)
 800583e:	2129      	movs	r1, #41	@ 0x29
 8005840:	4628      	mov	r0, r5
 8005842:	f000 f875 	bl	8005930 <otm8009a_write_reg>
 8005846:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005848:	4633      	mov	r3, r6
 800584a:	4631      	mov	r1, r6
 800584c:	4a1d      	ldr	r2, [pc, #116]	@ (80058c4 <OTM8009A_Init+0x6e0>)
 800584e:	4628      	mov	r0, r5
 8005850:	f000 f86e 	bl	8005930 <otm8009a_write_reg>
 8005854:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8005856:	4633      	mov	r3, r6
 8005858:	4a28      	ldr	r2, [pc, #160]	@ (80058fc <OTM8009A_Init+0x718>)
 800585a:	212c      	movs	r1, #44	@ 0x2c
 800585c:	4628      	mov	r0, r5
 800585e:	f000 f867 	bl	8005930 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8005862:	42c4      	cmn	r4, r0
}
 8005864:	bf14      	ite	ne
 8005866:	f04f 30ff 	movne.w	r0, #4294967295
 800586a:	4630      	moveq	r0, r6
 800586c:	b002      	add	sp, #8
 800586e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005872:	4633      	mov	r3, r6
 8005874:	4a22      	ldr	r2, [pc, #136]	@ (8005900 <OTM8009A_Init+0x71c>)
 8005876:	e79e      	b.n	80057b6 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8005878:	2300      	movs	r3, #0
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	e7bf      	b.n	80057fe <OTM8009A_Init+0x61a>
 800587e:	bf00      	nop
 8005880:	08026dc5 	.word	0x08026dc5
 8005884:	08026e89 	.word	0x08026e89
 8005888:	08026db6 	.word	0x08026db6
 800588c:	08026e85 	.word	0x08026e85
 8005890:	08026da7 	.word	0x08026da7
 8005894:	08026e86 	.word	0x08026e86
 8005898:	08026d9d 	.word	0x08026d9d
 800589c:	08026e87 	.word	0x08026e87
 80058a0:	08026d8e 	.word	0x08026d8e
 80058a4:	08026e88 	.word	0x08026e88
 80058a8:	08026d7f 	.word	0x08026d7f
 80058ac:	08026e75 	.word	0x08026e75
 80058b0:	08026e96 	.word	0x08026e96
 80058b4:	08026e97 	.word	0x08026e97
 80058b8:	08026e98 	.word	0x08026e98
 80058bc:	08026e99 	.word	0x08026e99
 80058c0:	08026e9a 	.word	0x08026e9a
 80058c4:	08026e69 	.word	0x08026e69
 80058c8:	08026d7c 	.word	0x08026d7c
 80058cc:	08026d6c 	.word	0x08026d6c
 80058d0:	08026d5c 	.word	0x08026d5c
 80058d4:	08026e8c 	.word	0x08026e8c
 80058d8:	2400b5d0 	.word	0x2400b5d0
 80058dc:	08026e8d 	.word	0x08026e8d
 80058e0:	08026e9f 	.word	0x08026e9f
 80058e4:	08026e9b 	.word	0x08026e9b
 80058e8:	08026e8f 	.word	0x08026e8f
 80058ec:	08026e90 	.word	0x08026e90
 80058f0:	08026e91 	.word	0x08026e91
 80058f4:	08026e92 	.word	0x08026e92
 80058f8:	08026e93 	.word	0x08026e93
 80058fc:	08026e94 	.word	0x08026e94
 8005900:	08026e8e 	.word	0x08026e8e

08005904 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8005904:	b160      	cbz	r0, 8005920 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005906:	684b      	ldr	r3, [r1, #4]
 8005908:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800590a:	688b      	ldr	r3, [r1, #8]
 800590c:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800590e:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8005910:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8005912:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8005914:	4b04      	ldr	r3, [pc, #16]	@ (8005928 <OTM8009A_RegisterBusIO+0x24>)
 8005916:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005918:	4b04      	ldr	r3, [pc, #16]	@ (800592c <OTM8009A_RegisterBusIO+0x28>)
 800591a:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 800591c:	2000      	movs	r0, #0
 800591e:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8005920:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	080051af 	.word	0x080051af
 800592c:	080051bd 	.word	0x080051bd

08005930 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8005930:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005932:	6804      	ldr	r4, [r0, #0]
 8005934:	6880      	ldr	r0, [r0, #8]
 8005936:	46a4      	mov	ip, r4
}
 8005938:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800593c:	4760      	bx	ip
	...

08005940 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8005940:	4a10      	ldr	r2, [pc, #64]	@ (8005984 <BSP_I2C4_DeInit+0x44>)
{
 8005942:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8005944:	6813      	ldr	r3, [r2, #0]
 8005946:	3b01      	subs	r3, #1
 8005948:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800594a:	b10b      	cbz	r3, 8005950 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 800594c:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800594e:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8005950:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005954:	480c      	ldr	r0, [pc, #48]	@ (8005988 <BSP_I2C4_DeInit+0x48>)
 8005956:	f001 ffe3 	bl	8007920 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800595a:	480b      	ldr	r0, [pc, #44]	@ (8005988 <BSP_I2C4_DeInit+0x48>)
 800595c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005960:	f001 ffde 	bl	8007920 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8005964:	4a09      	ldr	r2, [pc, #36]	@ (800598c <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8005966:	480a      	ldr	r0, [pc, #40]	@ (8005990 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8005968:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 800596c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005970:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8005974:	f002 fa24 	bl	8007dc0 <HAL_I2C_DeInit>
 8005978:	2800      	cmp	r0, #0
 800597a:	d0e7      	beq.n	800594c <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 800597c:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005980:	e7e5      	b.n	800594e <BSP_I2C4_DeInit+0xe>
 8005982:	bf00      	nop
 8005984:	2400c034 	.word	0x2400c034
 8005988:	58020c00 	.word	0x58020c00
 800598c:	58024400 	.word	0x58024400
 8005990:	2400b5dc 	.word	0x2400b5dc

08005994 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005994:	2300      	movs	r3, #0
 8005996:	2201      	movs	r2, #1
{
 8005998:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800599a:	6041      	str	r1, [r0, #4]
{
 800599c:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800599e:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80059a0:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 80059a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80059a8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80059ac:	f002 f9b2 	bl	8007d14 <HAL_I2C_Init>
 80059b0:	4601      	mov	r1, r0
 80059b2:	b108      	cbz	r0, 80059b8 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 80059b4:	2001      	movs	r0, #1
}
 80059b6:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80059b8:	4620      	mov	r0, r4
 80059ba:	f002 fbd8 	bl	800816e <HAL_I2CEx_ConfigAnalogFilter>
 80059be:	4601      	mov	r1, r0
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d1f7      	bne.n	80059b4 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80059c4:	4620      	mov	r0, r4
 80059c6:	f002 fbf8 	bl	80081ba <HAL_I2CEx_ConfigDigitalFilter>
 80059ca:	3800      	subs	r0, #0
 80059cc:	bf18      	it	ne
 80059ce:	2001      	movne	r0, #1
 80059d0:	e7f1      	b.n	80059b6 <MX_I2C4_Init+0x22>
	...

080059d4 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 80059d4:	4ba2      	ldr	r3, [pc, #648]	@ (8005c60 <BSP_I2C4_Init+0x28c>)
 80059d6:	48a3      	ldr	r0, [pc, #652]	@ (8005c64 <BSP_I2C4_Init+0x290>)
{
 80059d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059dc:	b093      	sub	sp, #76	@ 0x4c
  hbus_i2c4.Instance = BUS_I2C4;
 80059de:	6003      	str	r3, [r0, #0]
  if (I2c4InitCounter == 0U)
 80059e0:	4ba1      	ldr	r3, [pc, #644]	@ (8005c68 <BSP_I2C4_Init+0x294>)
 80059e2:	681c      	ldr	r4, [r3, #0]
 80059e4:	b11c      	cbz	r4, 80059ee <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 80059e6:	2000      	movs	r0, #0
}
 80059e8:	b013      	add	sp, #76	@ 0x4c
 80059ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 80059ee:	2201      	movs	r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80059f2:	f002 fbb7 	bl	8008164 <HAL_I2C_GetState>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d1f5      	bne.n	80059e6 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80059fa:	4d9c      	ldr	r5, [pc, #624]	@ (8005c6c <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80059fc:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005a00:	2702      	movs	r7, #2
 8005a02:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005a04:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005a08:	a90d      	add	r1, sp, #52	@ 0x34
 8005a0a:	4899      	ldr	r0, [pc, #612]	@ (8005c70 <BSP_I2C4_Init+0x29c>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005a0c:	f043 0308 	orr.w	r3, r3, #8
 8005a10:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8005a14:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005a20:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8005a24:	f043 0308 	orr.w	r3, r3, #8
 8005a28:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8005a2c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005a30:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005a3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005a3e:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005a42:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005a46:	f001 fe83 	bl	8007750 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8005a4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005a4e:	a90d      	add	r1, sp, #52	@ 0x34
 8005a50:	4887      	ldr	r0, [pc, #540]	@ (8005c70 <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8005a52:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005a54:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005a58:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005a5c:	f001 fe78 	bl	8007750 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8005a60:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8005a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a68:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 8005a6c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8005a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a74:	930c      	str	r3, [sp, #48]	@ 0x30
 8005a76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 8005a78:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8005a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a80:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 8005a84:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8005a88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a8c:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005a90:	f004 fe3e 	bl	800a710 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d06d      	beq.n	8005b74 <BSP_I2C4_Init+0x1a0>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005a98:	4b76      	ldr	r3, [pc, #472]	@ (8005c74 <BSP_I2C4_Init+0x2a0>)
  if (tsdadel_max <= 0)
 8005a9a:	4622      	mov	r2, r4
 8005a9c:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 8005a9e:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005aa2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005aa6:	f8df b1d4 	ldr.w	fp, [pc, #468]	@ 8005c7c <BSP_I2C4_Init+0x2a8>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005aaa:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005aae:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8005ab2:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 8005ab6:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005ab8:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005abc:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 8005ac0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8005ac4:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 8005ac8:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005aca:	4b6b      	ldr	r3, [pc, #428]	@ (8005c78 <BSP_I2C4_Init+0x2a4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
{
 8005ace:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005ad0:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8005ad4:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8005ad8:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8005adc:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8005ae0:	d35b      	bcc.n	8005b9a <BSP_I2C4_Init+0x1c6>
 8005ae2:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005ae4:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8005ae6:	9d00      	ldr	r5, [sp, #0]
 8005ae8:	42bd      	cmp	r5, r7
 8005aea:	d850      	bhi.n	8005b8e <BSP_I2C4_Init+0x1ba>
 8005aec:	42be      	cmp	r6, r7
 8005aee:	d34e      	bcc.n	8005b8e <BSP_I2C4_Init+0x1ba>
            if(presc != prev_presc)
 8005af0:	4591      	cmp	r9, r2
 8005af2:	d04c      	beq.n	8005b8e <BSP_I2C4_Init+0x1ba>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005af4:	2514      	movs	r5, #20
 8005af6:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 8005afa:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8005afc:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005afe:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005b02:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005b04:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005b08:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005b0c:	d93c      	bls.n	8005b88 <BSP_I2C4_Init+0x1b4>
 8005b0e:	4a5a      	ldr	r2, [pc, #360]	@ (8005c78 <BSP_I2C4_Init+0x2a4>)
 8005b10:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005b12:	4b59      	ldr	r3, [pc, #356]	@ (8005c78 <BSP_I2C4_Init+0x2a4>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005b14:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8005b18:	4958      	ldr	r1, [pc, #352]	@ (8005c7c <BSP_I2C4_Init+0x2a8>)
 8005b1a:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005b20:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8005b24:	9304      	str	r3, [sp, #16]
 8005b26:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	f10b 0332 	add.w	r3, fp, #50	@ 0x32
 8005b30:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b32:	f5cb 6380 	rsb	r3, fp, #1024	@ 0x400
 8005b36:	3301      	adds	r3, #1
 8005b38:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005b3a:	9b06      	ldr	r3, [sp, #24]
 8005b3c:	429f      	cmp	r7, r3
 8005b3e:	d138      	bne.n	8005bb2 <BSP_I2C4_Init+0x1de>
        if (idx < I2C_VALID_TIMING_NBR)
 8005b40:	9b00      	ldr	r3, [sp, #0]
 8005b42:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b44:	d816      	bhi.n	8005b74 <BSP_I2C4_Init+0x1a0>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005b46:	2114      	movs	r1, #20
 8005b48:	9a00      	ldr	r2, [sp, #0]
 8005b4a:	4b4c      	ldr	r3, [pc, #304]	@ (8005c7c <BSP_I2C4_Init+0x2a8>)
 8005b4c:	434a      	muls	r2, r1
 8005b4e:	1899      	adds	r1, r3, r2
 8005b50:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8005b52:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005b54:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005b58:	684b      	ldr	r3, [r1, #4]
 8005b5a:	051b      	lsls	r3, r3, #20
 8005b5c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005b60:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8005b62:	688b      	ldr	r3, [r1, #8]
 8005b64:	041b      	lsls	r3, r3, #16
 8005b66:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005b6a:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8005b6c:	68cb      	ldr	r3, [r1, #12]
 8005b6e:	021b      	lsls	r3, r3, #8
 8005b70:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005b72:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005b74:	4621      	mov	r1, r4
 8005b76:	483b      	ldr	r0, [pc, #236]	@ (8005c64 <BSP_I2C4_Init+0x290>)
 8005b78:	f7ff ff0c 	bl	8005994 <MX_I2C4_Init>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	f43f af32 	beq.w	80059e6 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 8005b82:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005b86:	e72f      	b.n	80059e8 <BSP_I2C4_Init+0x14>
              prev_presc = presc;
 8005b88:	4691      	mov	r9, r2
 8005b8a:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005b8e:	f10e 0e01 	add.w	lr, lr, #1
 8005b92:	440f      	add	r7, r1
 8005b94:	f1be 0f10 	cmp.w	lr, #16
 8005b98:	d1a5      	bne.n	8005ae6 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005b9a:	f1bc 0f10 	cmp.w	ip, #16
 8005b9e:	4488      	add	r8, r1
 8005ba0:	d198      	bne.n	8005ad4 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005ba2:	3201      	adds	r2, #1
 8005ba4:	4401      	add	r1, r0
 8005ba6:	2a10      	cmp	r2, #16
 8005ba8:	d191      	bne.n	8005ace <BSP_I2C4_Init+0xfa>
 8005baa:	f1ba 0f00 	cmp.w	sl, #0
 8005bae:	d1ae      	bne.n	8005b0e <BSP_I2C4_Init+0x13a>
 8005bb0:	e7af      	b.n	8005b12 <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005bb2:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005bb4:	f04f 0c00 	mov.w	ip, #0
 8005bb8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005bba:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005bbe:	441d      	add	r5, r3
 8005bc0:	eb03 060b 	add.w	r6, r3, fp
 8005bc4:	9503      	str	r5, [sp, #12]
 8005bc6:	f6a6 0634 	subw	r6, r6, #2100	@ 0x834
 8005bca:	9d02      	ldr	r5, [sp, #8]
 8005bcc:	9608      	str	r6, [sp, #32]
 8005bce:	1aed      	subs	r5, r5, r3
 8005bd0:	006d      	lsls	r5, r5, #1
 8005bd2:	9501      	str	r5, [sp, #4]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005bd4:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005bd6:	f240 5214 	movw	r2, #1300	@ 0x514
 8005bda:	f8cd c014 	str.w	ip, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005bde:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005be2:	4295      	cmp	r5, r2
 8005be4:	d930      	bls.n	8005c48 <BSP_I2C4_Init+0x274>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005be6:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005bea:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8005bee:	d22b      	bcs.n	8005c48 <BSP_I2C4_Init+0x274>
 8005bf0:	9e08      	ldr	r6, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005bf2:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005bf6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005bfa:	442e      	add	r6, r5
 8005bfc:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005c00:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8005c04:	f240 4212 	movw	r2, #1042	@ 0x412
 8005c08:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8005c0c:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005c10:	4592      	cmp	sl, r2
 8005c12:	d812      	bhi.n	8005c3a <BSP_I2C4_Init+0x266>
 8005c14:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8005c18:	d30f      	bcc.n	8005c3a <BSP_I2C4_Init+0x266>
 8005c1a:	4540      	cmp	r0, r8
 8005c1c:	d20d      	bcs.n	8005c3a <BSP_I2C4_Init+0x266>
              error = -error;
 8005c1e:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8005c22:	bf28      	it	cs
 8005c24:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8005c26:	9a04      	ldr	r2, [sp, #16]
 8005c28:	4592      	cmp	sl, r2
 8005c2a:	d206      	bcs.n	8005c3a <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 8005c2c:	9a05      	ldr	r2, [sp, #20]
              prev_error = (uint32_t)error;
 8005c2e:	f8cd a010 	str.w	sl, [sp, #16]
              I2c_valid_timing[count].scll = scll;
 8005c32:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8005c34:	9a07      	ldr	r2, [sp, #28]
              ret = count;
 8005c36:	9700      	str	r7, [sp, #0]
              I2c_valid_timing[count].sclh = sclh;
 8005c38:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005c3a:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 8005c3e:	4498      	add	r8, r3
 8005c40:	441e      	add	r6, r3
 8005c42:	eba9 0903 	sub.w	r9, r9, r3
 8005c46:	d1db      	bne.n	8005c00 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005c48:	9a01      	ldr	r2, [sp, #4]
 8005c4a:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8005c4e:	441d      	add	r5, r3
 8005c50:	eba2 0203 	sub.w	r2, r2, r3
 8005c54:	9201      	str	r2, [sp, #4]
 8005c56:	d1be      	bne.n	8005bd6 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005c58:	3701      	adds	r7, #1
 8005c5a:	3114      	adds	r1, #20
 8005c5c:	e76d      	b.n	8005b3a <BSP_I2C4_Init+0x166>
 8005c5e:	bf00      	nop
 8005c60:	58001c00 	.word	0x58001c00
 8005c64:	2400b5dc 	.word	0x2400b5dc
 8005c68:	2400c034 	.word	0x2400c034
 8005c6c:	58024400 	.word	0x58024400
 8005c70:	58020c00 	.word	0x58020c00
 8005c74:	3b9aca00 	.word	0x3b9aca00
 8005c78:	2400b630 	.word	0x2400b630
 8005c7c:	2400b634 	.word	0x2400b634

08005c80 <BSP_I2C4_WriteReg>:
{
 8005c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005c82:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8005c86:	9200      	str	r2, [sp, #0]
 8005c88:	460a      	mov	r2, r1
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	4808      	ldr	r0, [pc, #32]	@ (8005cb0 <BSP_I2C4_WriteReg+0x30>)
 8005c8e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c92:	2301      	movs	r3, #1
 8005c94:	f002 f8ae 	bl	8007df4 <HAL_I2C_Mem_Write>
 8005c98:	b140      	cbz	r0, 8005cac <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005c9a:	4805      	ldr	r0, [pc, #20]	@ (8005cb0 <BSP_I2C4_WriteReg+0x30>)
 8005c9c:	f002 fa65 	bl	800816a <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005ca0:	2804      	cmp	r0, #4
 8005ca2:	bf14      	ite	ne
 8005ca4:	f06f 0003 	mvnne.w	r0, #3
 8005ca8:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8005cac:	b004      	add	sp, #16
 8005cae:	bd10      	pop	{r4, pc}
 8005cb0:	2400b5dc 	.word	0x2400b5dc

08005cb4 <BSP_I2C4_ReadReg>:
{
 8005cb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005cb6:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8005cba:	9200      	str	r2, [sp, #0]
 8005cbc:	460a      	mov	r2, r1
 8005cbe:	4601      	mov	r1, r0
 8005cc0:	4808      	ldr	r0, [pc, #32]	@ (8005ce4 <BSP_I2C4_ReadReg+0x30>)
 8005cc2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f002 f96e 	bl	8007fa8 <HAL_I2C_Mem_Read>
 8005ccc:	b140      	cbz	r0, 8005ce0 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005cce:	4805      	ldr	r0, [pc, #20]	@ (8005ce4 <BSP_I2C4_ReadReg+0x30>)
 8005cd0:	f002 fa4b 	bl	800816a <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005cd4:	2804      	cmp	r0, #4
 8005cd6:	bf14      	ite	ne
 8005cd8:	f06f 0003 	mvnne.w	r0, #3
 8005cdc:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8005ce0:	b004      	add	sp, #16
 8005ce2:	bd10      	pop	{r4, pc}
 8005ce4:	2400b5dc 	.word	0x2400b5dc

08005ce8 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8005ce8:	f000 bd08 	b.w	80066fc <HAL_GetTick>

08005cec <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8005cec:	4a09      	ldr	r2, [pc, #36]	@ (8005d14 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005cee:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 8005cf2:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8005cf4:	684a      	ldr	r2, [r1, #4]
 8005cf6:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8005cfc:	688a      	ldr	r2, [r1, #8]
 8005cfe:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8005d00:	680a      	ldr	r2, [r1, #0]
 8005d02:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005d04:	2200      	movs	r2, #0
 8005d06:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8005d0a:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8005d0c:	68ca      	ldr	r2, [r1, #12]
 8005d0e:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8005d10:	f003 be2e 	b.w	8009970 <HAL_QSPI_Init>
 8005d14:	52005000 	.word	0x52005000

08005d18 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8005d18:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005d1a:	b988      	cbnz	r0, 8005d40 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8005d48 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8005d1e:	480b      	ldr	r0, [pc, #44]	@ (8005d4c <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005d20:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005d22:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005d24:	b94b      	cbnz	r3, 8005d3a <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005d26:	f7ff f9ba 	bl	800509e <MT25TL01G_EnableMemoryMappedModeSTR>
 8005d2a:	b110      	cbz	r0, 8005d32 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d2c:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8005d30:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8005d32:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8005d34:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8005d36:	7023      	strb	r3, [r4, #0]
 8005d38:	e7fa      	b.n	8005d30 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005d3a:	f7ff f966 	bl	800500a <MT25TL01G_EnableMemoryMappedModeDTR>
 8005d3e:	e7f4      	b.n	8005d2a <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8005d40:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005d44:	e7f4      	b.n	8005d30 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8005d46:	bf00      	nop
 8005d48:	2400c038 	.word	0x2400c038
 8005d4c:	24009a60 	.word	0x24009a60

08005d50 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	460c      	mov	r4, r1
 8005d54:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005d56:	bb30      	cbnz	r0, 8005da6 <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8005d58:	4d17      	ldr	r5, [pc, #92]	@ (8005db8 <BSP_QSPI_ConfigFlash+0x68>)
 8005d5a:	782b      	ldrb	r3, [r5, #0]
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d025      	beq.n	8005dac <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005d60:	fab2 f382 	clz	r3, r2
 8005d64:	4e15      	ldr	r6, [pc, #84]	@ (8005dbc <BSP_QSPI_ConfigFlash+0x6c>)
 8005d66:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8005d68:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8005d6e:	f003 fdff 	bl	8009970 <HAL_QSPI_Init>
 8005d72:	b9f0      	cbnz	r0, 8005db2 <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8005d74:	786b      	ldrb	r3, [r5, #1]
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d10f      	bne.n	8005d9a <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8005d7a:	2c03      	cmp	r4, #3
 8005d7c:	d105      	bne.n	8005d8a <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8005d7e:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005d80:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8005d82:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8005d84:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005d86:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8005d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	f7ff f921 	bl	8004fd2 <MT25TL01G_ExitQPIMode>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d0f4      	beq.n	8005d7e <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d94:	f06f 0004 	mvn.w	r0, #4
 8005d98:	e7f6      	b.n	8005d88 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 8005d9a:	2c03      	cmp	r4, #3
 8005d9c:	d1ef      	bne.n	8005d7e <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8005d9e:	4630      	mov	r0, r6
 8005da0:	f7ff f8fb 	bl	8004f9a <MT25TL01G_EnterQPIMode>
 8005da4:	e7f4      	b.n	8005d90 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 8005da6:	f06f 0001 	mvn.w	r0, #1
 8005daa:	e7ed      	b.n	8005d88 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8005dac:	f06f 0019 	mvn.w	r0, #25
 8005db0:	e7ea      	b.n	8005d88 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005db2:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005db6:	e7e7      	b.n	8005d88 <BSP_QSPI_ConfigFlash+0x38>
 8005db8:	2400c038 	.word	0x2400c038
 8005dbc:	24009a60 	.word	0x24009a60

08005dc0 <BSP_QSPI_Init>:
{
 8005dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	f040 81ac 	bne.w	8006126 <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8005dce:	4d03      	ldr	r5, [pc, #12]	@ (8005ddc <BSP_QSPI_Init+0x1c>)
 8005dd0:	782f      	ldrb	r7, [r5, #0]
 8005dd2:	b12f      	cbz	r7, 8005de0 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8005dd4:	2000      	movs	r0, #0
}
 8005dd6:	b024      	add	sp, #144	@ 0x90
 8005dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ddc:	2400c038 	.word	0x2400c038
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8005de0:	4bc3      	ldr	r3, [pc, #780]	@ (80060f0 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005de2:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005de6:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005de8:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8005dea:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005dee:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005df2:	48c0      	ldr	r0, [pc, #768]	@ (80060f4 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005df4:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8005df8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dfc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005e00:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005e04:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8005e08:	9201      	str	r2, [sp, #4]
 8005e0a:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8005e0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005e0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e12:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8005e14:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005e16:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005e1a:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8005e1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e20:	f042 0202 	orr.w	r2, r2, #2
 8005e24:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e2c:	f002 0202 	and.w	r2, r2, #2
 8005e30:	9202      	str	r2, [sp, #8]
 8005e32:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8005e34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e3c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e44:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005e48:	9203      	str	r2, [sp, #12]
 8005e4a:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8005e4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e50:	f042 0208 	orr.w	r2, r2, #8
 8005e54:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e5c:	f002 0208 	and.w	r2, r2, #8
 8005e60:	9204      	str	r2, [sp, #16]
 8005e62:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8005e64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e68:	f042 0220 	orr.w	r2, r2, #32
 8005e6c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e74:	f002 0220 	and.w	r2, r2, #32
 8005e78:	9205      	str	r2, [sp, #20]
 8005e7a:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8005e7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e80:	f042 0220 	orr.w	r2, r2, #32
 8005e84:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e8c:	f002 0220 	and.w	r2, r2, #32
 8005e90:	9206      	str	r2, [sp, #24]
 8005e92:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8005e94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e98:	f042 0220 	orr.w	r2, r2, #32
 8005e9c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005ea0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ea4:	f002 0220 	and.w	r2, r2, #32
 8005ea8:	9207      	str	r2, [sp, #28]
 8005eaa:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8005eac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005eb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005eb4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005eb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ebc:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005ec0:	9208      	str	r2, [sp, #32]
 8005ec2:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8005ec4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ec8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ecc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005ed0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ed4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005ed8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8005edc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ee0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ee4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005ee8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005eec:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005ef0:	920a      	str	r2, [sp, #40]	@ 0x28
 8005ef2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8005ef4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ef8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005efc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005f00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005f04:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005f08:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005f0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8005f0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005f10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f14:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f20:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005f24:	2302      	movs	r3, #2
 8005f26:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f2a:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005f2c:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005f2e:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005f32:	f001 fc0d 	bl	8007750 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005f36:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005f38:	a916      	add	r1, sp, #88	@ 0x58
 8005f3a:	486f      	ldr	r0, [pc, #444]	@ (80060f8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005f3c:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005f3e:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005f42:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005f46:	f001 fc03 	bl	8007750 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005f4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005f4e:	a916      	add	r1, sp, #88	@ 0x58
 8005f50:	486a      	ldr	r0, [pc, #424]	@ (80060fc <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005f52:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005f54:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005f56:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005f58:	f001 fbfa 	bl	8007750 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005f5c:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8005f5e:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005f62:	4867      	ldr	r0, [pc, #412]	@ (8006100 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005f64:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005f68:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005f6a:	f001 fbf1 	bl	8007750 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005f6e:	a916      	add	r1, sp, #88	@ 0x58
 8005f70:	4864      	ldr	r0, [pc, #400]	@ (8006104 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005f72:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005f76:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005f7a:	f001 fbe9 	bl	8007750 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005f7e:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005f80:	a916      	add	r1, sp, #88	@ 0x58
 8005f82:	485f      	ldr	r0, [pc, #380]	@ (8006100 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005f84:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005f86:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005f88:	f001 fbe2 	bl	8007750 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005f8c:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005f8e:	a916      	add	r1, sp, #88	@ 0x58
 8005f90:	485c      	ldr	r0, [pc, #368]	@ (8006104 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005f92:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005f94:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005f96:	f001 fbdb 	bl	8007750 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005f9a:	a916      	add	r1, sp, #88	@ 0x58
 8005f9c:	4856      	ldr	r0, [pc, #344]	@ (80060f8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8005f9e:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005fa2:	f001 fbd5 	bl	8007750 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005fa6:	a916      	add	r1, sp, #88	@ 0x58
 8005fa8:	4856      	ldr	r0, [pc, #344]	@ (8006104 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8005faa:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005fae:	f001 fbcf 	bl	8007750 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005fb2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005fb6:	a916      	add	r1, sp, #88	@ 0x58
 8005fb8:	484f      	ldr	r0, [pc, #316]	@ (80060f8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005fba:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005fbc:	f001 fbc8 	bl	8007750 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8005fc0:	463a      	mov	r2, r7
 8005fc2:	210f      	movs	r1, #15
 8005fc4:	205c      	movs	r0, #92	@ 0x5c
 8005fc6:	f000 fbc9 	bl	800675c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005fca:	205c      	movs	r0, #92	@ 0x5c
 8005fcc:	f000 fbf8 	bl	80067c0 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8005fd0:	a811      	add	r0, sp, #68	@ 0x44
 8005fd2:	f7fe ff36 	bl	8004e42 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005fd6:	7863      	ldrb	r3, [r4, #1]
 8005fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8006108 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8005fda:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005fde:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005fe2:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005fe6:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005fea:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8005fee:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005ff2:	a90d      	add	r1, sp, #52	@ 0x34
 8005ff4:	4845      	ldr	r0, [pc, #276]	@ (800610c <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005ff6:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005ff8:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005ffa:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005ffc:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005ffe:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8006000:	f7ff fe74 	bl	8005cec <MX_QSPI_Init>
 8006004:	2800      	cmp	r0, #0
 8006006:	f040 8091 	bne.w	800612c <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800600a:	2103      	movs	r1, #3
 800600c:	483f      	ldr	r0, [pc, #252]	@ (800610c <BSP_QSPI_Init+0x34c>)
 800600e:	f7ff f88c 	bl	800512a <MT25TL01G_ResetEnable>
 8006012:	2800      	cmp	r0, #0
 8006014:	f040 8084 	bne.w	8006120 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8006018:	2103      	movs	r1, #3
 800601a:	483c      	ldr	r0, [pc, #240]	@ (800610c <BSP_QSPI_Init+0x34c>)
 800601c:	f7ff f8a6 	bl	800516c <MT25TL01G_ResetMemory>
 8006020:	2800      	cmp	r0, #0
 8006022:	d17d      	bne.n	8006120 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006024:	7869      	ldrb	r1, [r5, #1]
 8006026:	4839      	ldr	r0, [pc, #228]	@ (800610c <BSP_QSPI_Init+0x34c>)
 8006028:	f7fe ff1c 	bl	8004e64 <MT25TL01G_AutoPollingMemReady>
 800602c:	4601      	mov	r1, r0
 800602e:	2800      	cmp	r0, #0
 8006030:	d176      	bne.n	8006120 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8006032:	4836      	ldr	r0, [pc, #216]	@ (800610c <BSP_QSPI_Init+0x34c>)
 8006034:	f7ff f879 	bl	800512a <MT25TL01G_ResetEnable>
 8006038:	4601      	mov	r1, r0
 800603a:	2800      	cmp	r0, #0
 800603c:	d170      	bne.n	8006120 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800603e:	4833      	ldr	r0, [pc, #204]	@ (800610c <BSP_QSPI_Init+0x34c>)
 8006040:	f7ff f894 	bl	800516c <MT25TL01G_ResetMemory>
 8006044:	4601      	mov	r1, r0
 8006046:	2800      	cmp	r0, #0
 8006048:	d16a      	bne.n	8006120 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800604a:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800604c:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800604e:	482f      	ldr	r0, [pc, #188]	@ (800610c <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8006050:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006052:	f7fe ff07 	bl	8004e64 <MT25TL01G_AutoPollingMemReady>
 8006056:	2800      	cmp	r0, #0
 8006058:	d162      	bne.n	8006120 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800605a:	7869      	ldrb	r1, [r5, #1]
 800605c:	482b      	ldr	r0, [pc, #172]	@ (800610c <BSP_QSPI_Init+0x34c>)
 800605e:	f7fe ff70 	bl	8004f42 <MT25TL01G_Enter4BytesAddressMode>
 8006062:	2800      	cmp	r0, #0
 8006064:	d15c      	bne.n	8006120 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006066:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 800606a:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 800606e:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006070:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006074:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8006076:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006078:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800607a:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800607c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8006080:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 8006082:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006084:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006088:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800608c:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006090:	481e      	ldr	r0, [pc, #120]	@ (800610c <BSP_QSPI_Init+0x34c>)
 8006092:	f003 fcb9 	bl	8009a08 <HAL_QSPI_Command>
 8006096:	2800      	cmp	r0, #0
 8006098:	d142      	bne.n	8006120 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800609a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800609e:	f10d 0102 	add.w	r1, sp, #2
 80060a2:	481a      	ldr	r0, [pc, #104]	@ (800610c <BSP_QSPI_Init+0x34c>)
 80060a4:	f003 fd50 	bl	8009b48 <HAL_QSPI_Receive>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d139      	bne.n	8006120 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80060ac:	7869      	ldrb	r1, [r5, #1]
 80060ae:	4817      	ldr	r0, [pc, #92]	@ (800610c <BSP_QSPI_Init+0x34c>)
 80060b0:	f7fe ff03 	bl	8004eba <MT25TL01G_WriteEnable>
 80060b4:	bba0      	cbnz	r0, 8006120 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80060b6:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80060b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060bc:	a916      	add	r1, sp, #88	@ 0x58
 80060be:	4813      	ldr	r0, [pc, #76]	@ (800610c <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80060c0:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 80060c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80060c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060ca:	051b      	lsls	r3, r3, #20
 80060cc:	0d1b      	lsrs	r3, r3, #20
 80060ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060d6:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80060da:	f003 fc95 	bl	8009a08 <HAL_QSPI_Command>
 80060de:	b9f8      	cbnz	r0, 8006120 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80060e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e4:	f10d 0102 	add.w	r1, sp, #2
 80060e8:	4808      	ldr	r0, [pc, #32]	@ (800610c <BSP_QSPI_Init+0x34c>)
 80060ea:	f003 fcd1 	bl	8009a90 <HAL_QSPI_Transmit>
 80060ee:	e00f      	b.n	8006110 <BSP_QSPI_Init+0x350>
 80060f0:	58024400 	.word	0x58024400
 80060f4:	58020400 	.word	0x58020400
 80060f8:	58021800 	.word	0x58021800
 80060fc:	58020c00 	.word	0x58020c00
 8006100:	58021c00 	.word	0x58021c00
 8006104:	58021400 	.word	0x58021400
 8006108:	08026ea4 	.word	0x08026ea4
 800610c:	24009a60 	.word	0x24009a60
 8006110:	b930      	cbnz	r0, 8006120 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8006112:	7862      	ldrb	r2, [r4, #1]
 8006114:	7821      	ldrb	r1, [r4, #0]
 8006116:	f7ff fe1b 	bl	8005d50 <BSP_QSPI_ConfigFlash>
 800611a:	2800      	cmp	r0, #0
 800611c:	f43f ae5a 	beq.w	8005dd4 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8006120:	f06f 0004 	mvn.w	r0, #4
 8006124:	e657      	b.n	8005dd6 <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 8006126:	f06f 0001 	mvn.w	r0, #1
 800612a:	e654      	b.n	8005dd6 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800612c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8006130:	e651      	b.n	8005dd6 <BSP_QSPI_Init+0x16>
 8006132:	bf00      	nop

08006134 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8006134:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8006136:	4604      	mov	r4, r0
 8006138:	b970      	cbnz	r0, 8006158 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 800613a:	4b09      	ldr	r3, [pc, #36]	@ (8006160 <BSP_SDRAM_DeInit+0x2c>)
 800613c:	4809      	ldr	r0, [pc, #36]	@ (8006164 <BSP_SDRAM_DeInit+0x30>)
 800613e:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8006140:	f005 faa6 	bl	800b690 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8006144:	207a      	movs	r0, #122	@ 0x7a
 8006146:	f000 fb49 	bl	80067dc <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800614a:	4807      	ldr	r0, [pc, #28]	@ (8006168 <BSP_SDRAM_DeInit+0x34>)
 800614c:	4b07      	ldr	r3, [pc, #28]	@ (800616c <BSP_SDRAM_DeInit+0x38>)
 800614e:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006150:	f003 f996 	bl	8009480 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8006154:	4620      	mov	r0, r4
}
 8006156:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8006158:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800615c:	e7fb      	b.n	8006156 <BSP_SDRAM_DeInit+0x22>
 800615e:	bf00      	nop
 8006160:	52004140 	.word	0x52004140
 8006164:	2400c13c 	.word	0x2400c13c
 8006168:	2400c044 	.word	0x2400c044
 800616c:	52000040 	.word	0x52000040

08006170 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8006170:	2201      	movs	r2, #1
 8006172:	4915      	ldr	r1, [pc, #84]	@ (80061c8 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006174:	4b15      	ldr	r3, [pc, #84]	@ (80061cc <MX_SDRAM_Init+0x5c>)
{
 8006176:	b510      	push	{r4, lr}
 8006178:	b088      	sub	sp, #32
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800617a:	6082      	str	r2, [r0, #8]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800617c:	2440      	movs	r4, #64	@ 0x40
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800617e:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8006182:	2104      	movs	r1, #4
 8006184:	2220      	movs	r2, #32
 8006186:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800618a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800618e:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8006192:	2200      	movs	r2, #0
 8006194:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8006198:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800619c:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 80061a0:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80061a2:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 80061a4:	2207      	movs	r2, #7
 80061a6:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 80061a8:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80061ac:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 80061ae:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80061b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 80061b4:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80061b8:	f005 fa42 	bl	800b640 <HAL_SDRAM_Init>
}
 80061bc:	3800      	subs	r0, #0
 80061be:	bf18      	it	ne
 80061c0:	2001      	movne	r0, #1
 80061c2:	b008      	add	sp, #32
 80061c4:	bd10      	pop	{r4, pc}
 80061c6:	bf00      	nop
 80061c8:	52004140 	.word	0x52004140
 80061cc:	2400c13c 	.word	0x2400c13c

080061d0 <BSP_SDRAM_Init>:
{
 80061d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 80061d2:	4605      	mov	r5, r0
{
 80061d4:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 80061d6:	2800      	cmp	r0, #0
 80061d8:	f040 80dd 	bne.w	8006396 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 80061dc:	4b71      	ldr	r3, [pc, #452]	@ (80063a4 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80061de:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80061e0:	a909      	add	r1, sp, #36	@ 0x24
 80061e2:	4871      	ldr	r0, [pc, #452]	@ (80063a8 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80061e4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80061e8:	4c70      	ldr	r4, [pc, #448]	@ (80063ac <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80061ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80061ee:	4e70      	ldr	r6, [pc, #448]	@ (80063b0 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80061f0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80061f4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80061f8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80061fc:	9201      	str	r2, [sp, #4]
 80061fe:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8006200:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006204:	f042 0201 	orr.w	r2, r2, #1
 8006208:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800620c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006210:	f002 0201 	and.w	r2, r2, #1
 8006214:	9202      	str	r2, [sp, #8]
 8006216:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006218:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800621c:	f042 0208 	orr.w	r2, r2, #8
 8006220:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006224:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006228:	f002 0208 	and.w	r2, r2, #8
 800622c:	9203      	str	r2, [sp, #12]
 800622e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006230:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006234:	f042 0210 	orr.w	r2, r2, #16
 8006238:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800623c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006240:	f002 0210 	and.w	r2, r2, #16
 8006244:	9204      	str	r2, [sp, #16]
 8006246:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006248:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800624c:	f042 0220 	orr.w	r2, r2, #32
 8006250:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006254:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006258:	f002 0220 	and.w	r2, r2, #32
 800625c:	9205      	str	r2, [sp, #20]
 800625e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006260:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006268:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800626c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006270:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006274:	9206      	str	r2, [sp, #24]
 8006276:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006278:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800627c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006280:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006284:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006288:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800628c:	9207      	str	r2, [sp, #28]
 800628e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006290:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006294:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006298:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800629c:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800629e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a6:	9308      	str	r3, [sp, #32]
 80062a8:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80062b0:	230c      	movs	r3, #12
 80062b2:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80062b6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80062ba:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80062bc:	f001 fa48 	bl	8007750 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80062c0:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80062c4:	a909      	add	r1, sp, #36	@ 0x24
 80062c6:	483b      	ldr	r0, [pc, #236]	@ (80063b4 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80062c8:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80062ca:	f001 fa41 	bl	8007750 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80062ce:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80062d2:	a909      	add	r1, sp, #36	@ 0x24
 80062d4:	4838      	ldr	r0, [pc, #224]	@ (80063b8 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80062d6:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80062d8:	f001 fa3a 	bl	8007750 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80062dc:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80062e0:	a909      	add	r1, sp, #36	@ 0x24
 80062e2:	4836      	ldr	r0, [pc, #216]	@ (80063bc <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80062e4:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80062e6:	f001 fa33 	bl	8007750 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80062ea:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80062ee:	a909      	add	r1, sp, #36	@ 0x24
 80062f0:	4833      	ldr	r0, [pc, #204]	@ (80063c0 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80062f2:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80062f4:	f001 fa2c 	bl	8007750 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80062f8:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80062fc:	a909      	add	r1, sp, #36	@ 0x24
 80062fe:	4831      	ldr	r0, [pc, #196]	@ (80063c4 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006300:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006302:	f001 fa25 	bl	8007750 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8006306:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800630a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800630e:	f240 2002 	movw	r0, #514	@ 0x202
 8006312:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8006316:	6334      	str	r4, [r6, #48]	@ 0x30
 8006318:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800631a:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800631e:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8006322:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8006324:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006326:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8006328:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800632a:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800632e:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8006332:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8006336:	4b24      	ldr	r3, [pc, #144]	@ (80063c8 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8006338:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800633a:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800633c:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8006340:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006344:	f003 f89c 	bl	8009480 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8006348:	4620      	mov	r0, r4
 800634a:	f003 f82a 	bl	80093a2 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 800634e:	462a      	mov	r2, r5
 8006350:	210f      	movs	r1, #15
 8006352:	207a      	movs	r0, #122	@ 0x7a
 8006354:	f000 fa02 	bl	800675c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8006358:	207a      	movs	r0, #122	@ 0x7a
 800635a:	f000 fa31 	bl	80067c0 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 800635e:	4630      	mov	r0, r6
 8006360:	f7ff ff06 	bl	8006170 <MX_SDRAM_Init>
 8006364:	b9d0      	cbnz	r0, 800639c <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006366:	4919      	ldr	r1, [pc, #100]	@ (80063cc <BSP_SDRAM_Init+0x1fc>)
 8006368:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 800636a:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800636e:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8006372:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8006374:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8006378:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 800637a:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800637e:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006382:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8006384:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006386:	f7fe fd2f 	bl	8004de8 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800638a:	2800      	cmp	r0, #0
 800638c:	bf18      	it	ne
 800638e:	f06f 0004 	mvnne.w	r0, #4
}
 8006392:	b00f      	add	sp, #60	@ 0x3c
 8006394:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8006396:	f06f 0001 	mvn.w	r0, #1
 800639a:	e7fa      	b.n	8006392 <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 800639c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80063a0:	e7f7      	b.n	8006392 <BSP_SDRAM_Init+0x1c2>
 80063a2:	bf00      	nop
 80063a4:	58024400 	.word	0x58024400
 80063a8:	58020c00 	.word	0x58020c00
 80063ac:	2400c0b0 	.word	0x2400c0b0
 80063b0:	2400c13c 	.word	0x2400c13c
 80063b4:	58021000 	.word	0x58021000
 80063b8:	58021400 	.word	0x58021400
 80063bc:	58021800 	.word	0x58021800
 80063c0:	58021c00 	.word	0x58021c00
 80063c4:	58022000 	.word	0x58022000
 80063c8:	52000040 	.word	0x52000040
 80063cc:	2400c11c 	.word	0x2400c11c

080063d0 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 80063d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d4:	460c      	mov	r4, r1
 80063d6:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80063d8:	4606      	mov	r6, r0
 80063da:	2800      	cmp	r0, #0
 80063dc:	d15c      	bne.n	8006498 <BSP_TS_Init+0xc8>
 80063de:	680b      	ldr	r3, [r1, #0]
 80063e0:	1e5a      	subs	r2, r3, #1
 80063e2:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 80063e6:	d257      	bcs.n	8006498 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80063e8:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80063ea:	1e51      	subs	r1, r2, #1
 80063ec:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80063f0:	d252      	bcs.n	8006498 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80063f2:	4293      	cmp	r3, r2
 80063f4:	bf28      	it	cs
 80063f6:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80063f8:	68e2      	ldr	r2, [r4, #12]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d84c      	bhi.n	8006498 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 80063fe:	2370      	movs	r3, #112	@ 0x70
 8006400:	2254      	movs	r2, #84	@ 0x54
 8006402:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006406:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80064dc <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800640a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 800640e:	4b2e      	ldr	r3, [pc, #184]	@ (80064c8 <BSP_TS_Init+0xf8>)
 8006410:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8006412:	4b2e      	ldr	r3, [pc, #184]	@ (80064cc <BSP_TS_Init+0xfc>)
 8006414:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8006416:	4b2e      	ldr	r3, [pc, #184]	@ (80064d0 <BSP_TS_Init+0x100>)
 8006418:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800641a:	4b2e      	ldr	r3, [pc, #184]	@ (80064d4 <BSP_TS_Init+0x104>)
 800641c:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 800641e:	4b2e      	ldr	r3, [pc, #184]	@ (80064d8 <BSP_TS_Init+0x108>)
 8006420:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8006422:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006426:	a906      	add	r1, sp, #24
 8006428:	482c      	ldr	r0, [pc, #176]	@ (80064dc <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800642a:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800642e:	f7fe fbe1 	bl	8004bf4 <FT6X06_RegisterBusIO>
 8006432:	b9c0      	cbnz	r0, 8006466 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8006434:	4669      	mov	r1, sp
 8006436:	4829      	ldr	r0, [pc, #164]	@ (80064dc <BSP_TS_Init+0x10c>)
 8006438:	f7fe fb25 	bl	8004a86 <FT6X06_ReadID>
 800643c:	b998      	cbnz	r0, 8006466 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 800643e:	9b00      	ldr	r3, [sp, #0]
 8006440:	2b11      	cmp	r3, #17
 8006442:	d110      	bne.n	8006466 <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8006444:	a903      	add	r1, sp, #12
 8006446:	4825      	ldr	r0, [pc, #148]	@ (80064dc <BSP_TS_Init+0x10c>)
 8006448:	f7fe fad1 	bl	80049ee <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 800644c:	4f24      	ldr	r7, [pc, #144]	@ (80064e0 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800644e:	4b25      	ldr	r3, [pc, #148]	@ (80064e4 <BSP_TS_Init+0x114>)
 8006450:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80064ec <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8006454:	4821      	ldr	r0, [pc, #132]	@ (80064dc <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8006456:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 800645a:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4798      	blx	r3
 8006462:	4605      	mov	r5, r0
 8006464:	b1d8      	cbz	r0, 800649e <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 8006466:	b116      	cbz	r6, 800646e <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 8006468:	f04f 35ff 	mov.w	r5, #4294967295
 800646c:	e010      	b.n	8006490 <BSP_TS_Init+0xc0>
 800646e:	2601      	movs	r6, #1
 8006470:	e7d7      	b.n	8006422 <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006472:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006474:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006476:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006478:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800647a:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800647c:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800647e:	68e3      	ldr	r3, [r4, #12]
 8006480:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006482:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006484:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006486:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006488:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800648a:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800648c:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8006490:	4628      	mov	r0, r5
 8006492:	b00c      	add	sp, #48	@ 0x30
 8006494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006498:	f06f 0501 	mvn.w	r5, #1
  return ret;
 800649c:	e7f8      	b.n	8006490 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800649e:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80064a0:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80064a2:	4e11      	ldr	r6, [pc, #68]	@ (80064e8 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80064a4:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80064a6:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 80064a8:	6863      	ldr	r3, [r4, #4]
 80064aa:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 80064ac:	68a3      	ldr	r3, [r4, #8]
 80064ae:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 80064b0:	68e3      	ldr	r3, [r4, #12]
 80064b2:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80064b4:	f8d8 3000 	ldr.w	r3, [r8]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	4798      	blx	r3
 80064bc:	2800      	cmp	r0, #0
 80064be:	dad8      	bge.n	8006472 <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80064c0:	f06f 0504 	mvn.w	r5, #4
 80064c4:	e7e4      	b.n	8006490 <BSP_TS_Init+0xc0>
 80064c6:	bf00      	nop
 80064c8:	080059d5 	.word	0x080059d5
 80064cc:	08005941 	.word	0x08005941
 80064d0:	08005cb5 	.word	0x08005cb5
 80064d4:	08005c81 	.word	0x08005c81
 80064d8:	08005ce9 	.word	0x08005ce9
 80064dc:	2400c170 	.word	0x2400c170
 80064e0:	2400c198 	.word	0x2400c198
 80064e4:	24000038 	.word	0x24000038
 80064e8:	2400c19c 	.word	0x2400c19c
 80064ec:	2400c1c4 	.word	0x2400c1c4

080064f0 <BSP_TS_GetState>:
{
 80064f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064f2:	460c      	mov	r4, r1
 80064f4:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 80064f6:	2800      	cmp	r0, #0
 80064f8:	d14d      	bne.n	8006596 <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 80064fa:	4b28      	ldr	r3, [pc, #160]	@ (800659c <BSP_TS_GetState+0xac>)
 80064fc:	a901      	add	r1, sp, #4
 80064fe:	4a28      	ldr	r2, [pc, #160]	@ (80065a0 <BSP_TS_GetState+0xb0>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6810      	ldr	r0, [r2, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	4798      	blx	r3
 8006508:	2800      	cmp	r0, #0
 800650a:	db41      	blt.n	8006590 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800650c:	4925      	ldr	r1, [pc, #148]	@ (80065a4 <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 800650e:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006510:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8006512:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8006514:	2e00      	cmp	r6, #0
 8006516:	d037      	beq.n	8006588 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006518:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800651a:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800651e:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 8006522:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006526:	bf02      	ittt	eq
 8006528:	4694      	moveq	ip, r2
      x_oriented = state.TouchX;
 800652a:	461a      	moveq	r2, r3
      y_oriented = state.TouchY;
 800652c:	4663      	moveq	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800652e:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006532:	bf1c      	itt	ne
 8006534:	f10e 3cff 	addne.w	ip, lr, #4294967295
 8006538:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800653c:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8006540:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006542:	bf44      	itt	mi
 8006544:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 8006548:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800654a:	680f      	ldr	r7, [r1, #0]
 800654c:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800654e:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8006550:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006552:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006554:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006556:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800655a:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800655e:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006560:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006562:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006564:	bf8c      	ite	hi
 8006566:	eba2 0c05 	subhi.w	ip, r2, r5
 800656a:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800656e:	4283      	cmp	r3, r0
 8006570:	bf8c      	ite	hi
 8006572:	1a1e      	subhi	r6, r3, r0
 8006574:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006576:	4567      	cmp	r7, ip
 8006578:	d301      	bcc.n	800657e <BSP_TS_GetState+0x8e>
 800657a:	42b7      	cmp	r7, r6
 800657c:	d205      	bcs.n	800658a <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800657e:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8006580:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8006582:	2000      	movs	r0, #0
}
 8006584:	b005      	add	sp, #20
 8006586:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8006588:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800658a:	e9c4 5001 	strd	r5, r0, [r4, #4]
 800658e:	e7f8      	b.n	8006582 <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006590:	f06f 0004 	mvn.w	r0, #4
 8006594:	e7f6      	b.n	8006584 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8006596:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800659a:	e7f3      	b.n	8006584 <BSP_TS_GetState+0x94>
 800659c:	2400c1c4 	.word	0x2400c1c4
 80065a0:	2400c198 	.word	0x2400c198
 80065a4:	2400c19c 	.word	0x2400c19c

080065a8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80065a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006660 <SystemInit+0xb8>)
 80065aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80065ae:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80065b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80065b6:	691a      	ldr	r2, [r3, #16]
 80065b8:	f042 0210 	orr.w	r2, r2, #16
 80065bc:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80065be:	4a29      	ldr	r2, [pc, #164]	@ (8006664 <SystemInit+0xbc>)
 80065c0:	6813      	ldr	r3, [r2, #0]
 80065c2:	f003 030f 	and.w	r3, r3, #15
 80065c6:	2b06      	cmp	r3, #6
 80065c8:	d805      	bhi.n	80065d6 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80065ca:	6813      	ldr	r3, [r2, #0]
 80065cc:	f023 030f 	bic.w	r3, r3, #15
 80065d0:	f043 0307 	orr.w	r3, r3, #7
 80065d4:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80065d6:	4b24      	ldr	r3, [pc, #144]	@ (8006668 <SystemInit+0xc0>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	f042 0201 	orr.w	r2, r2, #1
 80065de:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80065e0:	2200      	movs	r2, #0
 80065e2:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80065e4:	4a21      	ldr	r2, [pc, #132]	@ (800666c <SystemInit+0xc4>)
 80065e6:	6819      	ldr	r1, [r3, #0]
 80065e8:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80065ea:	491e      	ldr	r1, [pc, #120]	@ (8006664 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 80065ec:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80065ee:	680a      	ldr	r2, [r1, #0]
 80065f0:	0712      	lsls	r2, r2, #28
 80065f2:	d505      	bpl.n	8006600 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80065f4:	680a      	ldr	r2, [r1, #0]
 80065f6:	f022 020f 	bic.w	r2, r2, #15
 80065fa:	f042 0207 	orr.w	r2, r2, #7
 80065fe:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006600:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006602:	491b      	ldr	r1, [pc, #108]	@ (8006670 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8006604:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006606:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006608:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800660a:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800660c:	4919      	ldr	r1, [pc, #100]	@ (8006674 <SystemInit+0xcc>)
 800660e:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006610:	4919      	ldr	r1, [pc, #100]	@ (8006678 <SystemInit+0xd0>)
 8006612:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006614:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006616:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006618:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800661a:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800661c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800661e:	6819      	ldr	r1, [r3, #0]
 8006620:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8006624:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006626:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8006628:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800662c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8006630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006634:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006638:	4b10      	ldr	r3, [pc, #64]	@ (800667c <SystemInit+0xd4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f36f 030f 	bfc	r3, #0, #16
 8006640:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006644:	d203      	bcs.n	800664e <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006646:	4b0e      	ldr	r3, [pc, #56]	@ (8006680 <SystemInit+0xd8>)
 8006648:	2201      	movs	r2, #1
 800664a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800664e:	4b0d      	ldr	r3, [pc, #52]	@ (8006684 <SystemInit+0xdc>)
 8006650:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8006654:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8006656:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800665a:	4b01      	ldr	r3, [pc, #4]	@ (8006660 <SystemInit+0xb8>)
 800665c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800665e:	4770      	bx	lr
 8006660:	e000ed00 	.word	0xe000ed00
 8006664:	52002000 	.word	0x52002000
 8006668:	58024400 	.word	0x58024400
 800666c:	eaf6ed7f 	.word	0xeaf6ed7f
 8006670:	02020200 	.word	0x02020200
 8006674:	01ff0000 	.word	0x01ff0000
 8006678:	01010280 	.word	0x01010280
 800667c:	5c001000 	.word	0x5c001000
 8006680:	51008000 	.word	0x51008000
 8006684:	52004000 	.word	0x52004000

08006688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006688:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800668a:	2003      	movs	r0, #3
 800668c:	f000 f854 	bl	8006738 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006690:	f003 fe42 	bl	800a318 <HAL_RCC_GetSysClockFreq>
 8006694:	490f      	ldr	r1, [pc, #60]	@ (80066d4 <HAL_Init+0x4c>)
 8006696:	4a10      	ldr	r2, [pc, #64]	@ (80066d8 <HAL_Init+0x50>)
 8006698:	698b      	ldr	r3, [r1, #24]
 800669a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800669e:	5cd3      	ldrb	r3, [r2, r3]
 80066a0:	f003 031f 	and.w	r3, r3, #31
 80066a4:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066a6:	698b      	ldr	r3, [r1, #24]
 80066a8:	f003 030f 	and.w	r3, r3, #15
 80066ac:	5cd3      	ldrb	r3, [r2, r3]
 80066ae:	4a0b      	ldr	r2, [pc, #44]	@ (80066dc <HAL_Init+0x54>)
 80066b0:	f003 031f 	and.w	r3, r3, #31
 80066b4:	fa20 f303 	lsr.w	r3, r0, r3
 80066b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066ba:	4b09      	ldr	r3, [pc, #36]	@ (80066e0 <HAL_Init+0x58>)
 80066bc:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80066be:	2000      	movs	r0, #0
 80066c0:	f7fb f9ac 	bl	8001a1c <HAL_InitTick>
 80066c4:	4604      	mov	r4, r0
 80066c6:	b918      	cbnz	r0, 80066d0 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80066c8:	f7fa fe46 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80066cc:	4620      	mov	r0, r4
 80066ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80066d0:	2401      	movs	r4, #1
 80066d2:	e7fb      	b.n	80066cc <HAL_Init+0x44>
 80066d4:	58024400 	.word	0x58024400
 80066d8:	08026eac 	.word	0x08026eac
 80066dc:	24000068 	.word	0x24000068
 80066e0:	2400006c 	.word	0x2400006c

080066e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80066e4:	4a03      	ldr	r2, [pc, #12]	@ (80066f4 <HAL_IncTick+0x10>)
 80066e6:	4b04      	ldr	r3, [pc, #16]	@ (80066f8 <HAL_IncTick+0x14>)
 80066e8:	6811      	ldr	r1, [r2, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	440b      	add	r3, r1
 80066ee:	6013      	str	r3, [r2, #0]
}
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	2400c1c8 	.word	0x2400c1c8
 80066f8:	24000070 	.word	0x24000070

080066fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80066fc:	4b01      	ldr	r3, [pc, #4]	@ (8006704 <HAL_GetTick+0x8>)
 80066fe:	6818      	ldr	r0, [r3, #0]
}
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	2400c1c8 	.word	0x2400c1c8

08006708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800670c:	f7ff fff6 	bl	80066fc <HAL_GetTick>
 8006710:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006712:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006714:	bf1e      	ittt	ne
 8006716:	4b04      	ldrne	r3, [pc, #16]	@ (8006728 <HAL_Delay+0x20>)
 8006718:	781b      	ldrbne	r3, [r3, #0]
 800671a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800671c:	f7ff ffee 	bl	80066fc <HAL_GetTick>
 8006720:	1b43      	subs	r3, r0, r5
 8006722:	42a3      	cmp	r3, r4
 8006724:	d3fa      	bcc.n	800671c <HAL_Delay+0x14>
  {
  }
}
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	24000070 	.word	0x24000070

0800672c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800672c:	4b01      	ldr	r3, [pc, #4]	@ (8006734 <HAL_GetREVID+0x8>)
 800672e:	6818      	ldr	r0, [r3, #0]
}
 8006730:	0c00      	lsrs	r0, r0, #16
 8006732:	4770      	bx	lr
 8006734:	5c001000 	.word	0x5c001000

08006738 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006738:	4907      	ldr	r1, [pc, #28]	@ (8006758 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800673a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800673c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800673e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006742:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006746:	0412      	lsls	r2, r2, #16
 8006748:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800674a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800674c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8006754:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006756:	4770      	bx	lr
 8006758:	e000ed00 	.word	0xe000ed00

0800675c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800675c:	4b16      	ldr	r3, [pc, #88]	@ (80067b8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800675e:	b530      	push	{r4, r5, lr}
 8006760:	68dc      	ldr	r4, [r3, #12]
 8006762:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006766:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800676a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800676c:	2b04      	cmp	r3, #4
 800676e:	bf28      	it	cs
 8006770:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006772:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006774:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006778:	bf8c      	ite	hi
 800677a:	3c03      	subhi	r4, #3
 800677c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800677e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8006782:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006784:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006788:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800678c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006790:	fa03 f304 	lsl.w	r3, r3, r4
 8006794:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006798:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800679c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800679e:	db06      	blt.n	80067ae <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067a0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80067a4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80067a8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80067ac:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ae:	f000 000f 	and.w	r0, r0, #15
 80067b2:	4a02      	ldr	r2, [pc, #8]	@ (80067bc <HAL_NVIC_SetPriority+0x60>)
 80067b4:	5413      	strb	r3, [r2, r0]
 80067b6:	e7f9      	b.n	80067ac <HAL_NVIC_SetPriority+0x50>
 80067b8:	e000ed00 	.word	0xe000ed00
 80067bc:	e000ed14 	.word	0xe000ed14

080067c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80067c0:	2800      	cmp	r0, #0
 80067c2:	db07      	blt.n	80067d4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067c4:	2301      	movs	r3, #1
 80067c6:	0941      	lsrs	r1, r0, #5
 80067c8:	f000 001f 	and.w	r0, r0, #31
 80067cc:	4a02      	ldr	r2, [pc, #8]	@ (80067d8 <HAL_NVIC_EnableIRQ+0x18>)
 80067ce:	4083      	lsls	r3, r0
 80067d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	e000e100 	.word	0xe000e100

080067dc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80067dc:	2800      	cmp	r0, #0
 80067de:	db0c      	blt.n	80067fa <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067e0:	0943      	lsrs	r3, r0, #5
 80067e2:	2201      	movs	r2, #1
 80067e4:	f000 001f 	and.w	r0, r0, #31
 80067e8:	4904      	ldr	r1, [pc, #16]	@ (80067fc <HAL_NVIC_DisableIRQ+0x20>)
 80067ea:	3320      	adds	r3, #32
 80067ec:	4082      	lsls	r2, r0
 80067ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80067f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80067f6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80067fa:	4770      	bx	lr
 80067fc:	e000e100 	.word	0xe000e100

08006800 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006800:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006804:	4b04      	ldr	r3, [pc, #16]	@ (8006818 <HAL_MPU_Disable+0x18>)
 8006806:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006808:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800680c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800680e:	2200      	movs	r2, #0
 8006810:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	e000ed00 	.word	0xe000ed00

0800681c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800681c:	4b06      	ldr	r3, [pc, #24]	@ (8006838 <HAL_MPU_Enable+0x1c>)
 800681e:	f040 0001 	orr.w	r0, r0, #1
 8006822:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006826:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006828:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800682c:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800682e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006832:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006836:	4770      	bx	lr
 8006838:	e000ed00 	.word	0xe000ed00

0800683c <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800683c:	7843      	ldrb	r3, [r0, #1]
 800683e:	4a14      	ldr	r2, [pc, #80]	@ (8006890 <HAL_MPU_ConfigRegion+0x54>)
 8006840:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006844:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8006848:	f023 0301 	bic.w	r3, r3, #1
 800684c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006850:	6843      	ldr	r3, [r0, #4]
 8006852:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006856:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006858:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800685a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800685c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006860:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006862:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006864:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006866:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800686a:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800686c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006870:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006872:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006876:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006878:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800687c:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800687e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006882:	7a01      	ldrb	r1, [r0, #8]
 8006884:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006888:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	e000ed00 	.word	0xe000ed00

08006894 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006894:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006896:	4604      	mov	r4, r0
 8006898:	b908      	cbnz	r0, 800689e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800689a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800689c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800689e:	7f43      	ldrb	r3, [r0, #29]
 80068a0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80068a4:	b913      	cbnz	r3, 80068ac <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80068a6:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80068a8:	f7fa fd6e 	bl	8001388 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80068ac:	2302      	movs	r3, #2
 80068ae:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80068b0:	7923      	ldrb	r3, [r4, #4]
 80068b2:	b9e3      	cbnz	r3, 80068ee <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	4a13      	ldr	r2, [pc, #76]	@ (8006904 <HAL_CRC_Init+0x70>)
 80068b8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	f022 0218 	bic.w	r2, r2, #24
 80068c0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80068c2:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80068c4:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80068c6:	b9d2      	cbnz	r2, 80068fe <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80068c8:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80068cc:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80068ce:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	6961      	ldr	r1, [r4, #20]
 80068d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80068d8:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80068da:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80068dc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068e4:	430a      	orrs	r2, r1
 80068e6:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80068e8:	2301      	movs	r3, #1
 80068ea:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80068ec:	e7d6      	b.n	800689c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80068ee:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 f808 	bl	8006908 <HAL_CRCEx_Polynomial_Set>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d0e2      	beq.n	80068c2 <HAL_CRC_Init+0x2e>
 80068fc:	e7cd      	b.n	800689a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80068fe:	6922      	ldr	r2, [r4, #16]
 8006900:	e7e4      	b.n	80068cc <HAL_CRC_Init+0x38>
 8006902:	bf00      	nop
 8006904:	04c11db7 	.word	0x04c11db7

08006908 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006908:	07cb      	lsls	r3, r1, #31
{
 800690a:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800690c:	d50d      	bpl.n	800692a <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800690e:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006910:	3b01      	subs	r3, #1
 8006912:	d31d      	bcc.n	8006950 <HAL_CRCEx_Polynomial_Set+0x48>
 8006914:	fa21 f403 	lsr.w	r4, r1, r3
 8006918:	07e4      	lsls	r4, r4, #31
 800691a:	d5f9      	bpl.n	8006910 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 800691c:	2a10      	cmp	r2, #16
 800691e:	d013      	beq.n	8006948 <HAL_CRCEx_Polynomial_Set+0x40>
 8006920:	2a10      	cmp	r2, #16
 8006922:	d804      	bhi.n	800692e <HAL_CRCEx_Polynomial_Set+0x26>
 8006924:	b13a      	cbz	r2, 8006936 <HAL_CRCEx_Polynomial_Set+0x2e>
 8006926:	2a08      	cmp	r2, #8
 8006928:	d010      	beq.n	800694c <HAL_CRCEx_Polynomial_Set+0x44>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
        {
          status =   HAL_ERROR;
 800692a:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800692c:	e00b      	b.n	8006946 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 800692e:	2a18      	cmp	r2, #24
 8006930:	d1fb      	bne.n	800692a <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 8006932:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8006934:	d8f9      	bhi.n	800692a <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006936:	6800      	ldr	r0, [r0, #0]
 8006938:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800693a:	6883      	ldr	r3, [r0, #8]
 800693c:	f023 0318 	bic.w	r3, r3, #24
 8006940:	4313      	orrs	r3, r2
 8006942:	6083      	str	r3, [r0, #8]
 8006944:	2000      	movs	r0, #0
}
 8006946:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8006948:	2b07      	cmp	r3, #7
 800694a:	e7f3      	b.n	8006934 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 800694c:	2b0f      	cmp	r3, #15
 800694e:	e7f1      	b.n	8006934 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8006950:	2a10      	cmp	r2, #16
 8006952:	d1e5      	bne.n	8006920 <HAL_CRCEx_Polynomial_Set+0x18>
 8006954:	e7e9      	b.n	800692a <HAL_CRCEx_Polynomial_Set+0x22>
	...

08006958 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695a:	4605      	mov	r5, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800695c:	f7ff fece 	bl	80066fc <HAL_GetTick>
 8006960:	4607      	mov	r7, r0

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006962:	b145      	cbz	r5, 8006976 <HAL_DMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006964:	f895 3035 	ldrb.w	r3, [r5, #53]	@ 0x35
 8006968:	2b02      	cmp	r3, #2
 800696a:	d006      	beq.n	800697a <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800696c:	2380      	movs	r3, #128	@ 0x80
 800696e:	656b      	str	r3, [r5, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006970:	2300      	movs	r3, #0
 8006972:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_ERROR;
 8006976:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }

  return HAL_OK;
}
 8006978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800697a:	682c      	ldr	r4, [r5, #0]
 800697c:	4e7c      	ldr	r6, [pc, #496]	@ (8006b70 <HAL_DMA_Abort+0x218>)
 800697e:	42b4      	cmp	r4, r6
 8006980:	d05b      	beq.n	8006a3a <HAL_DMA_Abort+0xe2>
 8006982:	4b7c      	ldr	r3, [pc, #496]	@ (8006b74 <HAL_DMA_Abort+0x21c>)
 8006984:	429c      	cmp	r4, r3
 8006986:	d058      	beq.n	8006a3a <HAL_DMA_Abort+0xe2>
 8006988:	3318      	adds	r3, #24
 800698a:	429c      	cmp	r4, r3
 800698c:	d055      	beq.n	8006a3a <HAL_DMA_Abort+0xe2>
 800698e:	3318      	adds	r3, #24
 8006990:	429c      	cmp	r4, r3
 8006992:	d052      	beq.n	8006a3a <HAL_DMA_Abort+0xe2>
 8006994:	3318      	adds	r3, #24
 8006996:	429c      	cmp	r4, r3
 8006998:	d04f      	beq.n	8006a3a <HAL_DMA_Abort+0xe2>
 800699a:	3318      	adds	r3, #24
 800699c:	429c      	cmp	r4, r3
 800699e:	d04c      	beq.n	8006a3a <HAL_DMA_Abort+0xe2>
 80069a0:	3318      	adds	r3, #24
 80069a2:	429c      	cmp	r4, r3
 80069a4:	d049      	beq.n	8006a3a <HAL_DMA_Abort+0xe2>
 80069a6:	3318      	adds	r3, #24
 80069a8:	429c      	cmp	r4, r3
 80069aa:	d046      	beq.n	8006a3a <HAL_DMA_Abort+0xe2>
 80069ac:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80069b0:	429c      	cmp	r4, r3
 80069b2:	d042      	beq.n	8006a3a <HAL_DMA_Abort+0xe2>
 80069b4:	3318      	adds	r3, #24
 80069b6:	429c      	cmp	r4, r3
 80069b8:	d03f      	beq.n	8006a3a <HAL_DMA_Abort+0xe2>
 80069ba:	3318      	adds	r3, #24
 80069bc:	429c      	cmp	r4, r3
 80069be:	d03c      	beq.n	8006a3a <HAL_DMA_Abort+0xe2>
 80069c0:	3318      	adds	r3, #24
 80069c2:	429c      	cmp	r4, r3
 80069c4:	d039      	beq.n	8006a3a <HAL_DMA_Abort+0xe2>
 80069c6:	3318      	adds	r3, #24
 80069c8:	429c      	cmp	r4, r3
 80069ca:	d036      	beq.n	8006a3a <HAL_DMA_Abort+0xe2>
 80069cc:	3318      	adds	r3, #24
 80069ce:	429c      	cmp	r4, r3
 80069d0:	d033      	beq.n	8006a3a <HAL_DMA_Abort+0xe2>
 80069d2:	3318      	adds	r3, #24
 80069d4:	429c      	cmp	r4, r3
 80069d6:	d030      	beq.n	8006a3a <HAL_DMA_Abort+0xe2>
 80069d8:	3318      	adds	r3, #24
 80069da:	429c      	cmp	r4, r3
 80069dc:	d02d      	beq.n	8006a3a <HAL_DMA_Abort+0xe2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	f023 030e 	bic.w	r3, r3, #14
 80069e4:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069e6:	4b64      	ldr	r3, [pc, #400]	@ (8006b78 <HAL_DMA_Abort+0x220>)
 80069e8:	429c      	cmp	r4, r3
 80069ea:	d12f      	bne.n	8006a4c <HAL_DMA_Abort+0xf4>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80069ec:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
    __HAL_DMA_DISABLE(hdma);
 80069ee:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80069f0:	6813      	ldr	r3, [r2, #0]
 80069f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069f6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80069f8:	d03d      	beq.n	8006a76 <HAL_DMA_Abort+0x11e>
 80069fa:	4b5e      	ldr	r3, [pc, #376]	@ (8006b74 <HAL_DMA_Abort+0x21c>)
 80069fc:	429c      	cmp	r4, r3
 80069fe:	d03a      	beq.n	8006a76 <HAL_DMA_Abort+0x11e>
 8006a00:	3318      	adds	r3, #24
 8006a02:	429c      	cmp	r4, r3
 8006a04:	d037      	beq.n	8006a76 <HAL_DMA_Abort+0x11e>
 8006a06:	3318      	adds	r3, #24
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	d034      	beq.n	8006a76 <HAL_DMA_Abort+0x11e>
 8006a0c:	3318      	adds	r3, #24
 8006a0e:	429c      	cmp	r4, r3
 8006a10:	d031      	beq.n	8006a76 <HAL_DMA_Abort+0x11e>
 8006a12:	3318      	adds	r3, #24
 8006a14:	429c      	cmp	r4, r3
 8006a16:	d02e      	beq.n	8006a76 <HAL_DMA_Abort+0x11e>
 8006a18:	3318      	adds	r3, #24
 8006a1a:	429c      	cmp	r4, r3
 8006a1c:	d02b      	beq.n	8006a76 <HAL_DMA_Abort+0x11e>
 8006a1e:	3318      	adds	r3, #24
 8006a20:	429c      	cmp	r4, r3
 8006a22:	d028      	beq.n	8006a76 <HAL_DMA_Abort+0x11e>
 8006a24:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006a28:	429c      	cmp	r4, r3
 8006a2a:	d024      	beq.n	8006a76 <HAL_DMA_Abort+0x11e>
 8006a2c:	3318      	adds	r3, #24
 8006a2e:	429c      	cmp	r4, r3
 8006a30:	d021      	beq.n	8006a76 <HAL_DMA_Abort+0x11e>
 8006a32:	3318      	adds	r3, #24
 8006a34:	429c      	cmp	r4, r3
 8006a36:	d01e      	beq.n	8006a76 <HAL_DMA_Abort+0x11e>
 8006a38:	e01d      	b.n	8006a76 <HAL_DMA_Abort+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	f023 031e 	bic.w	r3, r3, #30
 8006a40:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a42:	6963      	ldr	r3, [r4, #20]
 8006a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a48:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a4a:	e7cf      	b.n	80069ec <HAL_DMA_Abort+0x94>
 8006a4c:	4b4b      	ldr	r3, [pc, #300]	@ (8006b7c <HAL_DMA_Abort+0x224>)
 8006a4e:	429c      	cmp	r4, r3
 8006a50:	d0cc      	beq.n	80069ec <HAL_DMA_Abort+0x94>
 8006a52:	3314      	adds	r3, #20
 8006a54:	429c      	cmp	r4, r3
 8006a56:	d0c9      	beq.n	80069ec <HAL_DMA_Abort+0x94>
 8006a58:	3314      	adds	r3, #20
 8006a5a:	429c      	cmp	r4, r3
 8006a5c:	d0c6      	beq.n	80069ec <HAL_DMA_Abort+0x94>
 8006a5e:	3314      	adds	r3, #20
 8006a60:	429c      	cmp	r4, r3
 8006a62:	d0c3      	beq.n	80069ec <HAL_DMA_Abort+0x94>
 8006a64:	3314      	adds	r3, #20
 8006a66:	429c      	cmp	r4, r3
 8006a68:	d0c0      	beq.n	80069ec <HAL_DMA_Abort+0x94>
 8006a6a:	3314      	adds	r3, #20
 8006a6c:	429c      	cmp	r4, r3
 8006a6e:	d0bd      	beq.n	80069ec <HAL_DMA_Abort+0x94>
 8006a70:	3314      	adds	r3, #20
 8006a72:	429c      	cmp	r4, r3
 8006a74:	d0ba      	beq.n	80069ec <HAL_DMA_Abort+0x94>
    __HAL_DMA_DISABLE(hdma);
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	f023 0301 	bic.w	r3, r3, #1
 8006a7c:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	07db      	lsls	r3, r3, #31
 8006a82:	d447      	bmi.n	8006b14 <HAL_DMA_Abort+0x1bc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a84:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a86:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a88:	42b3      	cmp	r3, r6
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a8a:	6da8      	ldr	r0, [r5, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a8c:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a90:	d04b      	beq.n	8006b2a <HAL_DMA_Abort+0x1d2>
 8006a92:	4938      	ldr	r1, [pc, #224]	@ (8006b74 <HAL_DMA_Abort+0x21c>)
 8006a94:	428b      	cmp	r3, r1
 8006a96:	d048      	beq.n	8006b2a <HAL_DMA_Abort+0x1d2>
 8006a98:	3118      	adds	r1, #24
 8006a9a:	428b      	cmp	r3, r1
 8006a9c:	d045      	beq.n	8006b2a <HAL_DMA_Abort+0x1d2>
 8006a9e:	3118      	adds	r1, #24
 8006aa0:	428b      	cmp	r3, r1
 8006aa2:	d042      	beq.n	8006b2a <HAL_DMA_Abort+0x1d2>
 8006aa4:	3118      	adds	r1, #24
 8006aa6:	428b      	cmp	r3, r1
 8006aa8:	d03f      	beq.n	8006b2a <HAL_DMA_Abort+0x1d2>
 8006aaa:	3118      	adds	r1, #24
 8006aac:	428b      	cmp	r3, r1
 8006aae:	d03c      	beq.n	8006b2a <HAL_DMA_Abort+0x1d2>
 8006ab0:	3118      	adds	r1, #24
 8006ab2:	428b      	cmp	r3, r1
 8006ab4:	d039      	beq.n	8006b2a <HAL_DMA_Abort+0x1d2>
 8006ab6:	3118      	adds	r1, #24
 8006ab8:	428b      	cmp	r3, r1
 8006aba:	d036      	beq.n	8006b2a <HAL_DMA_Abort+0x1d2>
 8006abc:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8006ac0:	428b      	cmp	r3, r1
 8006ac2:	d032      	beq.n	8006b2a <HAL_DMA_Abort+0x1d2>
 8006ac4:	3118      	adds	r1, #24
 8006ac6:	428b      	cmp	r3, r1
 8006ac8:	d02f      	beq.n	8006b2a <HAL_DMA_Abort+0x1d2>
 8006aca:	3118      	adds	r1, #24
 8006acc:	428b      	cmp	r3, r1
 8006ace:	d02c      	beq.n	8006b2a <HAL_DMA_Abort+0x1d2>
 8006ad0:	3118      	adds	r1, #24
 8006ad2:	428b      	cmp	r3, r1
 8006ad4:	d029      	beq.n	8006b2a <HAL_DMA_Abort+0x1d2>
 8006ad6:	3118      	adds	r1, #24
 8006ad8:	428b      	cmp	r3, r1
 8006ada:	d026      	beq.n	8006b2a <HAL_DMA_Abort+0x1d2>
 8006adc:	3118      	adds	r1, #24
 8006ade:	428b      	cmp	r3, r1
 8006ae0:	d023      	beq.n	8006b2a <HAL_DMA_Abort+0x1d2>
 8006ae2:	3118      	adds	r1, #24
 8006ae4:	428b      	cmp	r3, r1
 8006ae6:	d020      	beq.n	8006b2a <HAL_DMA_Abort+0x1d2>
 8006ae8:	3118      	adds	r1, #24
 8006aea:	428b      	cmp	r3, r1
 8006aec:	d01d      	beq.n	8006b2a <HAL_DMA_Abort+0x1d2>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006aee:	2101      	movs	r1, #1
 8006af0:	fa01 f202 	lsl.w	r2, r1, r2
 8006af4:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006af6:	4a20      	ldr	r2, [pc, #128]	@ (8006b78 <HAL_DMA_Abort+0x220>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d11a      	bne.n	8006b32 <HAL_DMA_Abort+0x1da>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006afc:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	@ 0x64
 8006b00:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8006b02:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8006b04:	bb5b      	cbnz	r3, 8006b5e <HAL_DMA_Abort+0x206>
    hdma->State = HAL_DMA_STATE_READY;
 8006b06:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8006b08:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8006b0a:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8006b0e:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  return HAL_OK;
 8006b12:	e731      	b.n	8006978 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b14:	f7ff fdf2 	bl	80066fc <HAL_GetTick>
 8006b18:	1bc0      	subs	r0, r0, r7
 8006b1a:	2805      	cmp	r0, #5
 8006b1c:	d9af      	bls.n	8006a7e <HAL_DMA_Abort+0x126>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b1e:	2320      	movs	r3, #32
 8006b20:	656b      	str	r3, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8006b22:	2303      	movs	r3, #3
 8006b24:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8006b28:	e722      	b.n	8006970 <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b2a:	233f      	movs	r3, #63	@ 0x3f
 8006b2c:	4093      	lsls	r3, r2
 8006b2e:	6083      	str	r3, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b30:	e7e4      	b.n	8006afc <HAL_DMA_Abort+0x1a4>
 8006b32:	4a12      	ldr	r2, [pc, #72]	@ (8006b7c <HAL_DMA_Abort+0x224>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d0e1      	beq.n	8006afc <HAL_DMA_Abort+0x1a4>
 8006b38:	3214      	adds	r2, #20
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d0de      	beq.n	8006afc <HAL_DMA_Abort+0x1a4>
 8006b3e:	3214      	adds	r2, #20
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d0db      	beq.n	8006afc <HAL_DMA_Abort+0x1a4>
 8006b44:	3214      	adds	r2, #20
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d0d8      	beq.n	8006afc <HAL_DMA_Abort+0x1a4>
 8006b4a:	3214      	adds	r2, #20
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d0d5      	beq.n	8006afc <HAL_DMA_Abort+0x1a4>
 8006b50:	3214      	adds	r2, #20
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d0d2      	beq.n	8006afc <HAL_DMA_Abort+0x1a4>
 8006b56:	3214      	adds	r2, #20
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d1d4      	bne.n	8006b06 <HAL_DMA_Abort+0x1ae>
 8006b5c:	e7ce      	b.n	8006afc <HAL_DMA_Abort+0x1a4>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b64:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b66:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 8006b6a:	605a      	str	r2, [r3, #4]
 8006b6c:	e7cb      	b.n	8006b06 <HAL_DMA_Abort+0x1ae>
 8006b6e:	bf00      	nop
 8006b70:	40020010 	.word	0x40020010
 8006b74:	40020028 	.word	0x40020028
 8006b78:	58025408 	.word	0x58025408
 8006b7c:	5802541c 	.word	0x5802541c

08006b80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b80:	b508      	push	{r3, lr}
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b82:	b128      	cbz	r0, 8006b90 <HAL_DMA_Abort_IT+0x10>
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b84:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d003      	beq.n	8006b94 <HAL_DMA_Abort_IT+0x14>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b8c:	2380      	movs	r3, #128	@ 0x80
 8006b8e:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8006b90:	2001      	movs	r0, #1
 8006b92:	e05d      	b.n	8006c50 <HAL_DMA_Abort_IT+0xd0>
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b94:	6803      	ldr	r3, [r0, #0]
 8006b96:	4a3f      	ldr	r2, [pc, #252]	@ (8006c94 <HAL_DMA_Abort_IT+0x114>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d051      	beq.n	8006c40 <HAL_DMA_Abort_IT+0xc0>
 8006b9c:	3218      	adds	r2, #24
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d04e      	beq.n	8006c40 <HAL_DMA_Abort_IT+0xc0>
 8006ba2:	3218      	adds	r2, #24
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d04b      	beq.n	8006c40 <HAL_DMA_Abort_IT+0xc0>
 8006ba8:	3218      	adds	r2, #24
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d048      	beq.n	8006c40 <HAL_DMA_Abort_IT+0xc0>
 8006bae:	3218      	adds	r2, #24
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d045      	beq.n	8006c40 <HAL_DMA_Abort_IT+0xc0>
 8006bb4:	3218      	adds	r2, #24
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d042      	beq.n	8006c40 <HAL_DMA_Abort_IT+0xc0>
 8006bba:	3218      	adds	r2, #24
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d03f      	beq.n	8006c40 <HAL_DMA_Abort_IT+0xc0>
 8006bc0:	3218      	adds	r2, #24
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d03c      	beq.n	8006c40 <HAL_DMA_Abort_IT+0xc0>
 8006bc6:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d038      	beq.n	8006c40 <HAL_DMA_Abort_IT+0xc0>
 8006bce:	3218      	adds	r2, #24
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d035      	beq.n	8006c40 <HAL_DMA_Abort_IT+0xc0>
 8006bd4:	3218      	adds	r2, #24
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d032      	beq.n	8006c40 <HAL_DMA_Abort_IT+0xc0>
 8006bda:	3218      	adds	r2, #24
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d02f      	beq.n	8006c40 <HAL_DMA_Abort_IT+0xc0>
 8006be0:	3218      	adds	r2, #24
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d02c      	beq.n	8006c40 <HAL_DMA_Abort_IT+0xc0>
 8006be6:	3218      	adds	r2, #24
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d029      	beq.n	8006c40 <HAL_DMA_Abort_IT+0xc0>
 8006bec:	3218      	adds	r2, #24
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d026      	beq.n	8006c40 <HAL_DMA_Abort_IT+0xc0>
 8006bf2:	3218      	adds	r2, #24
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d023      	beq.n	8006c40 <HAL_DMA_Abort_IT+0xc0>
      __HAL_DMA_DISABLE(hdma);
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	f022 020e 	bic.w	r2, r2, #14
 8006bfe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	f022 0201 	bic.w	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c08:	4a23      	ldr	r2, [pc, #140]	@ (8006c98 <HAL_DMA_Abort_IT+0x118>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d121      	bne.n	8006c52 <HAL_DMA_Abort_IT+0xd2>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c0e:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8006c10:	6813      	ldr	r3, [r2, #0]
 8006c12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c16:	6013      	str	r3, [r2, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006c18:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	@ 0x58
 8006c1c:	f003 021f 	and.w	r2, r3, #31
 8006c20:	2301      	movs	r3, #1
 8006c22:	4093      	lsls	r3, r2
 8006c24:	604b      	str	r3, [r1, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c26:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	@ 0x64
 8006c2a:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006c2c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006c2e:	b32b      	cbz	r3, 8006c7c <HAL_DMA_Abort_IT+0xfc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c36:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c38:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	@ 0x70
 8006c3c:	605a      	str	r2, [r3, #4]
 8006c3e:	e01d      	b.n	8006c7c <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c40:	2204      	movs	r2, #4
 8006c42:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	f022 0201 	bic.w	r2, r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 8006c4e:	2000      	movs	r0, #0
}
 8006c50:	bd08      	pop	{r3, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c52:	4a12      	ldr	r2, [pc, #72]	@ (8006c9c <HAL_DMA_Abort_IT+0x11c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d0da      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x8e>
 8006c58:	3214      	adds	r2, #20
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d0d7      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x8e>
 8006c5e:	3214      	adds	r2, #20
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d0d4      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x8e>
 8006c64:	3214      	adds	r2, #20
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d0d1      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x8e>
 8006c6a:	3214      	adds	r2, #20
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d0ce      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x8e>
 8006c70:	3214      	adds	r2, #20
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d0cb      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x8e>
 8006c76:	3214      	adds	r2, #20
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d0c8      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8006c82:	2300      	movs	r3, #0
 8006c84:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8006c88:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d0df      	beq.n	8006c4e <HAL_DMA_Abort_IT+0xce>
        hdma->XferAbortCallback(hdma);
 8006c8e:	4798      	blx	r3
 8006c90:	e7dd      	b.n	8006c4e <HAL_DMA_Abort_IT+0xce>
 8006c92:	bf00      	nop
 8006c94:	40020010 	.word	0x40020010
 8006c98:	58025408 	.word	0x58025408
 8006c9c:	5802541c 	.word	0x5802541c

08006ca0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006ca0:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d036      	beq.n	8006d16 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006ca8:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8006cac:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006cb0:	b91b      	cbnz	r3, 8006cba <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006cb2:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006cb6:	f7fa fb7f 	bl	80013b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006cba:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006cbc:	69e0      	ldr	r0, [r4, #28]
 8006cbe:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006cc0:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006cc8:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006cca:	6819      	ldr	r1, [r3, #0]
 8006ccc:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8006cd0:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006cd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006cda:	68a2      	ldr	r2, [r4, #8]
 8006cdc:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 8006ce0:	4302      	orrs	r2, r0
 8006ce2:	f021 0101 	bic.w	r1, r1, #1
 8006ce6:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006ce8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006cea:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006cec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cee:	f36f 020f 	bfc	r2, #0, #16
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006cf6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006cf8:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8006cfc:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006d00:	0552      	lsls	r2, r2, #21
 8006d02:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006d06:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006d0c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006d0e:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006d10:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8006d14:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006d16:	2001      	movs	r0, #1
 8006d18:	e7fc      	b.n	8006d14 <HAL_DMA2D_Init+0x74>

08006d1a <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8006d1a:	4770      	bx	lr

08006d1c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8006d1c:	4770      	bx	lr

08006d1e <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006d1e:	6803      	ldr	r3, [r0, #0]
{
 8006d20:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006d22:	685e      	ldr	r6, [r3, #4]
{
 8006d24:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006d26:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006d28:	07f2      	lsls	r2, r6, #31
 8006d2a:	d514      	bpl.n	8006d56 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006d2c:	05e9      	lsls	r1, r5, #23
 8006d2e:	d512      	bpl.n	8006d56 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d36:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006d38:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8006d3a:	f042 0201 	orr.w	r2, r2, #1
 8006d3e:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006d40:	2201      	movs	r2, #1
 8006d42:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006d44:	2304      	movs	r3, #4
 8006d46:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8006d50:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006d52:	b103      	cbz	r3, 8006d56 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8006d54:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006d56:	06b2      	lsls	r2, r6, #26
 8006d58:	d516      	bpl.n	8006d88 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006d5a:	04ab      	lsls	r3, r5, #18
 8006d5c:	d514      	bpl.n	8006d88 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d66:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006d68:	2220      	movs	r2, #32
 8006d6a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006d6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d6e:	f043 0302 	orr.w	r3, r3, #2
 8006d72:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006d74:	2304      	movs	r3, #4
 8006d76:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8006d80:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006d82:	b10b      	cbz	r3, 8006d88 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8006d84:	4620      	mov	r0, r4
 8006d86:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006d88:	0730      	lsls	r0, r6, #28
 8006d8a:	d516      	bpl.n	8006dba <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006d8c:	0529      	lsls	r1, r5, #20
 8006d8e:	d514      	bpl.n	8006dba <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d98:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006d9a:	2208      	movs	r2, #8
 8006d9c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006d9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006da0:	f043 0304 	orr.w	r3, r3, #4
 8006da4:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006da6:	2304      	movs	r3, #4
 8006da8:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006dac:	2300      	movs	r3, #0
 8006dae:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8006db2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006db4:	b10b      	cbz	r3, 8006dba <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8006db6:	4620      	mov	r0, r4
 8006db8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006dba:	0772      	lsls	r2, r6, #29
 8006dbc:	d50b      	bpl.n	8006dd6 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006dbe:	056b      	lsls	r3, r5, #21
 8006dc0:	d509      	bpl.n	8006dd6 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006dc2:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006dc4:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dcc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006dce:	2204      	movs	r2, #4
 8006dd0:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006dd2:	f7ff ffa2 	bl	8006d1a <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006dd6:	07b0      	lsls	r0, r6, #30
 8006dd8:	d514      	bpl.n	8006e04 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006dda:	05a9      	lsls	r1, r5, #22
 8006ddc:	d512      	bpl.n	8006e04 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006de6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006de8:	2202      	movs	r2, #2
 8006dea:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006dec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dee:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006df0:	2301      	movs	r3, #1
 8006df2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006df6:	2300      	movs	r3, #0
 8006df8:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8006dfc:	6a23      	ldr	r3, [r4, #32]
 8006dfe:	b10b      	cbz	r3, 8006e04 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8006e00:	4620      	mov	r0, r4
 8006e02:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006e04:	06f2      	lsls	r2, r6, #27
 8006e06:	d513      	bpl.n	8006e30 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006e08:	04eb      	lsls	r3, r5, #19
 8006e0a:	d511      	bpl.n	8006e30 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006e0c:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006e0e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e16:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006e18:	2210      	movs	r2, #16
 8006e1a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006e1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e1e:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006e20:	2301      	movs	r3, #1
 8006e22:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006e26:	2300      	movs	r3, #0
 8006e28:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006e2c:	f7ff ff76 	bl	8006d1c <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8006e30:	bd70      	pop	{r4, r5, r6, pc}

08006e32 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8006e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e36:	4607      	mov	r7, r0
 8006e38:	460d      	mov	r5, r1
 8006e3a:	4614      	mov	r4, r2
 8006e3c:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e3e:	f7ff fc5d 	bl	80066fc <HAL_GetTick>
 8006e42:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006e48:	07d2      	lsls	r2, r2, #31
 8006e4a:	d50a      	bpl.n	8006e62 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006e4c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8006e50:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8006e52:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006e58:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8006e5c:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8006e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006e62:	f7ff fc4b 	bl	80066fc <HAL_GetTick>
 8006e66:	eba0 0008 	sub.w	r0, r0, r8
 8006e6a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006e6e:	d9e9      	bls.n	8006e44 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 8006e70:	2003      	movs	r0, #3
 8006e72:	e7f4      	b.n	8006e5e <DSI_ShortWrite.constprop.0+0x2c>

08006e74 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006e74:	7c03      	ldrb	r3, [r0, #16]
{
 8006e76:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d05b      	beq.n	8006f34 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8006e7c:	6803      	ldr	r3, [r0, #0]
 8006e7e:	2000      	movs	r0, #0
 8006e80:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006e84:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006e88:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8006e8a:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006e8c:	d507      	bpl.n	8006e9e <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8006e8e:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8006e92:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 8006e96:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 8006e9a:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8006e9e:	0788      	lsls	r0, r1, #30
 8006ea0:	d505      	bpl.n	8006eae <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8006ea2:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8006ea6:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 8006eaa:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8006eae:	0748      	lsls	r0, r1, #29
 8006eb0:	d505      	bpl.n	8006ebe <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8006eb2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006eb6:	f040 0001 	orr.w	r0, r0, #1
 8006eba:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8006ebe:	0708      	lsls	r0, r1, #28
 8006ec0:	d505      	bpl.n	8006ece <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8006ec2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006ec6:	f040 0002 	orr.w	r0, r0, #2
 8006eca:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8006ece:	06c8      	lsls	r0, r1, #27
 8006ed0:	d505      	bpl.n	8006ede <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8006ed2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006ed6:	f040 000c 	orr.w	r0, r0, #12
 8006eda:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8006ede:	0688      	lsls	r0, r1, #26
 8006ee0:	d505      	bpl.n	8006eee <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8006ee2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006ee6:	f040 0010 	orr.w	r0, r0, #16
 8006eea:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8006eee:	0648      	lsls	r0, r1, #25
 8006ef0:	d505      	bpl.n	8006efe <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8006ef2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006ef6:	f040 0020 	orr.w	r0, r0, #32
 8006efa:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8006efe:	0608      	lsls	r0, r1, #24
 8006f00:	d505      	bpl.n	8006f0e <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006f02:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006f06:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8006f0a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8006f0e:	05c8      	lsls	r0, r1, #23
 8006f10:	d505      	bpl.n	8006f1e <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8006f12:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006f16:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8006f1a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8006f1e:	0589      	lsls	r1, r1, #22
 8006f20:	d505      	bpl.n	8006f2e <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8006f22:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8006f26:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8006f2a:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8006f2e:	2000      	movs	r0, #0
 8006f30:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8006f32:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006f34:	2002      	movs	r0, #2
}
 8006f36:	4770      	bx	lr

08006f38 <HAL_DSI_Init>:
{
 8006f38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006f3a:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	f000 80ea 	beq.w	8007118 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006f44:	7c43      	ldrb	r3, [r0, #17]
 8006f46:	b90b      	cbnz	r3, 8006f4c <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8006f48:	f7fa fa5a 	bl	8001400 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8006f50:	2300      	movs	r3, #0
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006f5a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006f5e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8006f62:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006f66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8006f6e:	f7ff fbc5 	bl	80066fc <HAL_GetTick>
 8006f72:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006f74:	6822      	ldr	r2, [r4, #0]
 8006f76:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8006f7a:	04d9      	lsls	r1, r3, #19
 8006f7c:	d56e      	bpl.n	800705c <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006f7e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8006f82:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8006f86:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8006f8a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006f8e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006f92:	e9d5 0300 	ldrd	r0, r3, [r5]
 8006f96:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006f98:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8006f9c:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006f9e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8006fa2:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8006faa:	2300      	movs	r3, #0
 8006fac:	9301      	str	r3, [sp, #4]
 8006fae:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8006fb2:	f043 0301 	orr.w	r3, r3, #1
 8006fb6:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 8006fba:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	9301      	str	r3, [sp, #4]
 8006fc4:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8006fc6:	f7ff fb9f 	bl	8006708 <HAL_Delay>
  tickstart = HAL_GetTick();
 8006fca:	f7ff fb97 	bl	80066fc <HAL_GetTick>
 8006fce:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8006fd6:	05d2      	lsls	r2, r2, #23
 8006fd8:	d548      	bpl.n	800706c <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 8006fda:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006fdc:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 8006fde:	9202      	str	r2, [sp, #8]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	f042 0201 	orr.w	r2, r2, #1
 8006fe6:	605a      	str	r2, [r3, #4]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	f002 0201 	and.w	r2, r2, #1
 8006fee:	9202      	str	r2, [sp, #8]
 8006ff0:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006ff8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006ffe:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007000:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8007002:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007006:	f042 0202 	orr.w	r2, r2, #2
 800700a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 800700e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007012:	f042 0204 	orr.w	r2, r2, #4
 8007016:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800701a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800701e:	f022 0203 	bic.w	r2, r2, #3
 8007022:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007026:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800702a:	430a      	orrs	r2, r1
 800702c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 8007030:	f7ff fb64 	bl	80066fc <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8007034:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8007036:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8007038:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800703c:	079b      	lsls	r3, r3, #30
 800703e:	d025      	beq.n	800708c <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007046:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800704a:	2b94      	cmp	r3, #148	@ 0x94
 800704c:	d025      	beq.n	800709a <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800704e:	f7ff fb55 	bl	80066fc <HAL_GetTick>
 8007052:	1b80      	subs	r0, r0, r6
 8007054:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007058:	d9f2      	bls.n	8007040 <HAL_DSI_Init+0x108>
 800705a:	e014      	b.n	8007086 <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800705c:	f7ff fb4e 	bl	80066fc <HAL_GetTick>
 8007060:	1b80      	subs	r0, r0, r6
 8007062:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007066:	d985      	bls.n	8006f74 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8007068:	2003      	movs	r0, #3
 800706a:	e053      	b.n	8007114 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800706c:	f7ff fb46 	bl	80066fc <HAL_GetTick>
 8007070:	1b80      	subs	r0, r0, r6
 8007072:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007076:	d9ab      	bls.n	8006fd0 <HAL_DSI_Init+0x98>
 8007078:	e7f6      	b.n	8007068 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800707a:	f7ff fb3f 	bl	80066fc <HAL_GetTick>
 800707e:	1b80      	subs	r0, r0, r6
 8007080:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007084:	d902      	bls.n	800708c <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 8007086:	2300      	movs	r3, #0
 8007088:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 800708a:	e7ed      	b.n	8007068 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007092:	f003 0314 	and.w	r3, r3, #20
 8007096:	2b14      	cmp	r3, #20
 8007098:	d1ef      	bne.n	800707a <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800709a:	686b      	ldr	r3, [r5, #4]
 800709c:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 80070a0:	4a1e      	ldr	r2, [pc, #120]	@ (800711c <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 80070a2:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	bf38      	it	cc
 80070a8:	2301      	movcc	r3, #1
 80070aa:	435a      	muls	r2, r3
 80070ac:	68ab      	ldr	r3, [r5, #8]
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	409a      	lsls	r2, r3
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	434b      	muls	r3, r1
 80070b8:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80070c2:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80070c6:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80070ca:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80070ce:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80070d0:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80070d2:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 80070d6:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80070da:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 80070de:	9003      	str	r0, [sp, #12]
 80070e0:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 80070e2:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 80070e4:	f022 0201 	bic.w	r2, r2, #1
 80070e8:	605a      	str	r2, [r3, #4]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	f002 0201 	and.w	r2, r2, #1
 80070f0:	9203      	str	r2, [sp, #12]
 80070f2:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80070f4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80070f8:	f022 0203 	bic.w	r2, r2, #3
 80070fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007100:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8007104:	430a      	orrs	r2, r1
 8007106:	f042 0201 	orr.w	r2, r2, #1
 800710a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 800710e:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8007110:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8007112:	7463      	strb	r3, [r4, #17]
}
 8007114:	b004      	add	sp, #16
 8007116:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007118:	2001      	movs	r0, #1
 800711a:	e7fb      	b.n	8007114 <HAL_DSI_Init+0x1dc>
 800711c:	003d0900 	.word	0x003d0900

08007120 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 8007120:	4770      	bx	lr

08007122 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007122:	6803      	ldr	r3, [r0, #0]
 8007124:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8007128:	07d1      	lsls	r1, r2, #31
{
 800712a:	b510      	push	{r4, lr}
 800712c:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800712e:	d508      	bpl.n	8007142 <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8007130:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007134:	07d2      	lsls	r2, r2, #31
 8007136:	d504      	bpl.n	8007142 <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8007138:	2201      	movs	r2, #1
 800713a:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800713e:	f7fb f901 	bl	8002344 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8007148:	0791      	lsls	r1, r2, #30
 800714a:	d509      	bpl.n	8007160 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800714c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007150:	0792      	lsls	r2, r2, #30
 8007152:	d505      	bpl.n	8007160 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007154:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007156:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007158:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800715c:	f7fb f926 	bl	80023ac <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8007160:	69a3      	ldr	r3, [r4, #24]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d04e      	beq.n	8007204 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8007166:	6821      	ldr	r1, [r4, #0]
 8007168:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800716c:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8007170:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8007172:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007176:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 800717a:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800717c:	b291      	uxth	r1, r2
 800717e:	b119      	cbz	r1, 8007188 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8007180:	6961      	ldr	r1, [r4, #20]
 8007182:	f041 0101 	orr.w	r1, r1, #1
 8007186:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8007188:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 800718c:	d003      	beq.n	8007196 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800718e:	6962      	ldr	r2, [r4, #20]
 8007190:	f042 0202 	orr.w	r2, r2, #2
 8007194:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8007196:	07d8      	lsls	r0, r3, #31
 8007198:	d503      	bpl.n	80071a2 <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800719a:	6962      	ldr	r2, [r4, #20]
 800719c:	f042 0204 	orr.w	r2, r2, #4
 80071a0:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80071a2:	0799      	lsls	r1, r3, #30
 80071a4:	d503      	bpl.n	80071ae <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80071a6:	6962      	ldr	r2, [r4, #20]
 80071a8:	f042 0208 	orr.w	r2, r2, #8
 80071ac:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80071ae:	f013 0f0c 	tst.w	r3, #12
 80071b2:	d003      	beq.n	80071bc <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80071b4:	6962      	ldr	r2, [r4, #20]
 80071b6:	f042 0210 	orr.w	r2, r2, #16
 80071ba:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80071bc:	06da      	lsls	r2, r3, #27
 80071be:	d503      	bpl.n	80071c8 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80071c0:	6962      	ldr	r2, [r4, #20]
 80071c2:	f042 0220 	orr.w	r2, r2, #32
 80071c6:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80071c8:	0698      	lsls	r0, r3, #26
 80071ca:	d503      	bpl.n	80071d4 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80071cc:	6962      	ldr	r2, [r4, #20]
 80071ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071d2:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80071d4:	0659      	lsls	r1, r3, #25
 80071d6:	d503      	bpl.n	80071e0 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80071d8:	6962      	ldr	r2, [r4, #20]
 80071da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80071de:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80071e0:	061a      	lsls	r2, r3, #24
 80071e2:	d503      	bpl.n	80071ec <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80071e4:	6962      	ldr	r2, [r4, #20]
 80071e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071ea:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80071ec:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 80071f0:	d003      	beq.n	80071fa <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80071f2:	6963      	ldr	r3, [r4, #20]
 80071f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80071f8:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80071fa:	6963      	ldr	r3, [r4, #20]
 80071fc:	b113      	cbz	r3, 8007204 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 80071fe:	4620      	mov	r0, r4
 8007200:	f7ff ff8e 	bl	8007120 <HAL_DSI_ErrorCallback>
}
 8007204:	bd10      	pop	{r4, pc}

08007206 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007206:	7c02      	ldrb	r2, [r0, #16]
{
 8007208:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800720a:	2a01      	cmp	r2, #1
 800720c:	d00a      	beq.n	8007224 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800720e:	6802      	ldr	r2, [r0, #0]
 8007210:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8007212:	f020 0003 	bic.w	r0, r0, #3
 8007216:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8007218:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800721a:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800721c:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800721e:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 8007220:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007222:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007224:	2002      	movs	r0, #2
}
 8007226:	4770      	bx	lr

08007228 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8007228:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800722a:	7c03      	ldrb	r3, [r0, #16]
{
 800722c:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800722e:	2b01      	cmp	r3, #1
 8007230:	d069      	beq.n	8007306 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8007232:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8007234:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8007236:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007238:	f042 0201 	orr.w	r2, r2, #1
 800723c:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800723e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007242:	f022 0201 	bic.w	r2, r2, #1
 8007246:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800724a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800724e:	f042 0201 	orr.w	r2, r2, #1
 8007252:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8007256:	68da      	ldr	r2, [r3, #12]
 8007258:	f022 0203 	bic.w	r2, r2, #3
 800725c:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	4302      	orrs	r2, r0
 8007262:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007264:	695a      	ldr	r2, [r3, #20]
 8007266:	f022 0207 	bic.w	r2, r2, #7
 800726a:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800726c:	6958      	ldr	r0, [r3, #20]
 800726e:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8007272:	432a      	orrs	r2, r5
 8007274:	694d      	ldr	r5, [r1, #20]
 8007276:	432a      	orrs	r2, r5
 8007278:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800727a:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800727c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800727e:	691a      	ldr	r2, [r3, #16]
 8007280:	f022 020f 	bic.w	r2, r2, #15
 8007284:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8007286:	691a      	ldr	r2, [r3, #16]
 8007288:	4302      	orrs	r2, r0
 800728a:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800728c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007290:	f022 020e 	bic.w	r2, r2, #14
 8007294:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007298:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800729c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80072a0:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80072a2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80072a6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80072a8:	f36f 020f 	bfc	r2, #0, #16
 80072ac:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80072ae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80072b0:	4302      	orrs	r2, r0
 80072b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80072b4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80072b8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80072bc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80072c0:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80072c4:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 80072c8:	432a      	orrs	r2, r5
 80072ca:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80072cc:	432a      	orrs	r2, r5
 80072ce:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80072d0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80072d2:	432a      	orrs	r2, r5
 80072d4:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80072d6:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80072d8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80072dc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80072de:	f022 0201 	bic.w	r2, r2, #1
 80072e2:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80072e4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80072e6:	430a      	orrs	r2, r1
 80072e8:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80072ea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80072ee:	f042 0201 	orr.w	r2, r2, #1
 80072f2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80072f6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80072fa:	f042 0202 	orr.w	r2, r2, #2
 80072fe:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 8007302:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8007304:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007306:	2002      	movs	r0, #2
 8007308:	e7fc      	b.n	8007304 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

0800730c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800730c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800730e:	7c03      	ldrb	r3, [r0, #16]
{
 8007310:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8007312:	2b01      	cmp	r3, #1
 8007314:	d029      	beq.n	800736a <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8007316:	6800      	ldr	r0, [r0, #0]
 8007318:	4b15      	ldr	r3, [pc, #84]	@ (8007370 <HAL_DSI_ConfigCommand+0x64>)
 800731a:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800731c:	4023      	ands	r3, r4
 800731e:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007320:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8007322:	e9d1 3500 	ldrd	r3, r5, [r1]
 8007326:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8007328:	688d      	ldr	r5, [r1, #8]
 800732a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800732c:	68cd      	ldr	r5, [r1, #12]
 800732e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8007330:	690d      	ldr	r5, [r1, #16]
 8007332:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8007334:	694d      	ldr	r5, [r1, #20]
 8007336:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8007338:	698d      	ldr	r5, [r1, #24]
 800733a:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800733c:	69cd      	ldr	r5, [r1, #28]
 800733e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8007340:	6a0d      	ldr	r5, [r1, #32]
 8007342:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8007344:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8007346:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8007348:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800734a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800734c:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800734e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 8007350:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007352:	4323      	orrs	r3, r4
 8007354:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8007356:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8007358:	f023 0302 	bic.w	r3, r3, #2
 800735c:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800735e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8007360:	430b      	orrs	r3, r1
 8007362:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007364:	2000      	movs	r0, #0
 8007366:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8007368:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800736a:	2002      	movs	r0, #2
 800736c:	e7fc      	b.n	8007368 <HAL_DSI_ConfigCommand+0x5c>
 800736e:	bf00      	nop
 8007370:	fef080ff 	.word	0xfef080ff

08007374 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007374:	7c02      	ldrb	r2, [r0, #16]
{
 8007376:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8007378:	2a01      	cmp	r2, #1
 800737a:	d00a      	beq.n	8007392 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800737c:	6802      	ldr	r2, [r0, #0]
 800737e:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8007380:	f020 001f 	bic.w	r0, r0, #31
 8007384:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8007386:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8007388:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800738a:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 800738c:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 800738e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007390:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007392:	2002      	movs	r0, #2
}
 8007394:	4770      	bx	lr

08007396 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8007396:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007398:	7c03      	ldrb	r3, [r0, #16]
{
 800739a:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800739c:	2b01      	cmp	r3, #1
 800739e:	d034      	beq.n	800740a <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80073a0:	e9d1 0300 	ldrd	r0, r3, [r1]
 80073a4:	4298      	cmp	r0, r3
 80073a6:	bf38      	it	cc
 80073a8:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80073b0:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80073b4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80073b8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80073bc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80073c0:	4302      	orrs	r2, r0
 80073c2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80073c6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80073ca:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80073ce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80073d2:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80073d6:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80073da:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80073dc:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80073e0:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80073e2:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80073e4:	432a      	orrs	r2, r5
 80073e6:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80073e8:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80073ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80073ee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80073f2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80073f6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80073fa:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80073fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007402:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 8007406:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8007408:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800740a:	2002      	movs	r0, #2
 800740c:	e7fc      	b.n	8007408 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08007410 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8007410:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007412:	7c03      	ldrb	r3, [r0, #16]
{
 8007414:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007416:	2b01      	cmp	r3, #1
 8007418:	d05b      	beq.n	80074d2 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800741a:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800741c:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800741e:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007420:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8007422:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8007426:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007428:	689a      	ldr	r2, [r3, #8]
 800742a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800742e:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007430:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8007432:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007434:	b292      	uxth	r2, r2
 8007436:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8007438:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800743a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800743e:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8007440:	4a25      	ldr	r2, [pc, #148]	@ (80074d8 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8007442:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8007444:	4010      	ands	r0, r2
 8007446:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007448:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800744a:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800744c:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800744e:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8007450:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007452:	4010      	ands	r0, r2
 8007454:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007456:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007458:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800745a:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800745c:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800745e:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007462:	4010      	ands	r0, r2
 8007464:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007468:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800746c:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800746e:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007470:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8007474:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007478:	4010      	ands	r0, r2
 800747a:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800747e:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007482:	4328      	orrs	r0, r5
 8007484:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8007488:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800748c:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8007490:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007494:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007498:	698d      	ldr	r5, [r1, #24]
 800749a:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800749c:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800749e:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80074a0:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80074a4:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80074a8:	4010      	ands	r0, r2
 80074aa:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80074ae:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80074b2:	4328      	orrs	r0, r5
 80074b4:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80074b8:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 80074bc:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80074be:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80074c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80074c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80074c8:	430a      	orrs	r2, r1
 80074ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 80074ce:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80074d0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80074d2:	2002      	movs	r0, #2
 80074d4:	e7fc      	b.n	80074d0 <HAL_DSI_ConfigHostTimeouts+0xc0>
 80074d6:	bf00      	nop
 80074d8:	ffff0000 	.word	0xffff0000

080074dc <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80074dc:	7c03      	ldrb	r3, [r0, #16]
{
 80074de:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d01c      	beq.n	800751e <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80074e4:	6802      	ldr	r2, [r0, #0]
 80074e6:	2300      	movs	r3, #0
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	6851      	ldr	r1, [r2, #4]
 80074ec:	f041 0101 	orr.w	r1, r1, #1
 80074f0:	6051      	str	r1, [r2, #4]
 80074f2:	6851      	ldr	r1, [r2, #4]
 80074f4:	f001 0101 	and.w	r1, r1, #1
 80074f8:	9100      	str	r1, [sp, #0]
 80074fa:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80074fc:	9301      	str	r3, [sp, #4]
 80074fe:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 8007502:	f041 0108 	orr.w	r1, r1, #8
 8007506:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 800750a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800750e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007510:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007512:	f002 0208 	and.w	r2, r2, #8
 8007516:	9201      	str	r2, [sp, #4]
 8007518:	9a01      	ldr	r2, [sp, #4]
}
 800751a:	b002      	add	sp, #8
 800751c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800751e:	2002      	movs	r0, #2
 8007520:	e7fb      	b.n	800751a <HAL_DSI_Start+0x3e>

08007522 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007522:	7c02      	ldrb	r2, [r0, #16]
{
 8007524:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8007526:	2a01      	cmp	r2, #1
 8007528:	d009      	beq.n	800753e <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800752a:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800752c:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800752e:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 8007532:	f042 0204 	orr.w	r2, r2, #4
 8007536:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 800753a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800753c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800753e:	2002      	movs	r0, #2
}
 8007540:	4770      	bx	lr

08007542 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8007542:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007544:	7c05      	ldrb	r5, [r0, #16]
{
 8007546:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007548:	2d01      	cmp	r5, #1
 800754a:	d009      	beq.n	8007560 <HAL_DSI_ShortWrite+0x1e>
 800754c:	2501      	movs	r5, #1
 800754e:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007550:	9d06      	ldr	r5, [sp, #24]
 8007552:	9500      	str	r5, [sp, #0]
 8007554:	f7ff fc6d 	bl	8006e32 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007558:	2300      	movs	r3, #0
 800755a:	7423      	strb	r3, [r4, #16]

  return status;
}
 800755c:	b003      	add	sp, #12
 800755e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007560:	2002      	movs	r0, #2
 8007562:	e7fb      	b.n	800755c <HAL_DSI_ShortWrite+0x1a>

08007564 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8007564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007568:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800756a:	7c03      	ldrb	r3, [r0, #16]
{
 800756c:	4606      	mov	r6, r0
 800756e:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8007570:	2b01      	cmp	r3, #1
{
 8007572:	4615      	mov	r5, r2
 8007574:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8007578:	d052      	beq.n	8007620 <HAL_DSI_LongWrite+0xbc>
 800757a:	2301      	movs	r3, #1
 800757c:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800757e:	f7ff f8bd 	bl	80066fc <HAL_GetTick>
 8007582:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007584:	6832      	ldr	r2, [r6, #0]
 8007586:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8007588:	f013 0a01 	ands.w	sl, r3, #1
 800758c:	d019      	beq.n	80075c2 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800758e:	2c03      	cmp	r4, #3
 8007590:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8007592:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007596:	bf28      	it	cs
 8007598:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 800759a:	4283      	cmp	r3, r0
 800759c:	d11d      	bne.n	80075da <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800759e:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 80075a0:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 80075a2:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80075a6:	bb10      	cbnz	r0, 80075ee <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80075a8:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80075aa:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 80075ae:	0223      	lsls	r3, r4, #8
 80075b0:	0224      	lsls	r4, r4, #8
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 80075b8:	431d      	orrs	r5, r3
 80075ba:	4325      	orrs	r5, r4
 80075bc:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80075be:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 80075c0:	e009      	b.n	80075d6 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80075c2:	f7ff f89b 	bl	80066fc <HAL_GetTick>
 80075c6:	eba0 000b 	sub.w	r0, r0, fp
 80075ca:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80075ce:	d9d9      	bls.n	8007584 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 80075d0:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80075d2:	f886 a010 	strb.w	sl, [r6, #16]
}
 80075d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80075da:	f818 1003 	ldrb.w	r1, [r8, r3]
 80075de:	3301      	adds	r3, #1
 80075e0:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 80075e4:	fa01 f10c 	lsl.w	r1, r1, ip
 80075e8:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 80075ec:	e7d5      	b.n	800759a <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80075ee:	2804      	cmp	r0, #4
    fifoword = 0U;
 80075f0:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80075f4:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 80075f6:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80075f8:	bf28      	it	cs
 80075fa:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80075fe:	f813 8001 	ldrb.w	r8, [r3, r1]
 8007602:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8007606:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007608:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800760c:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800760e:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8007612:	d1f4      	bne.n	80075fe <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8007614:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8007618:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 800761a:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 800761e:	e7c2      	b.n	80075a6 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8007620:	2002      	movs	r0, #2
 8007622:	e7d8      	b.n	80075d6 <HAL_DSI_LongWrite+0x72>

08007624 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8007624:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007628:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800762a:	7c03      	ldrb	r3, [r0, #16]
{
 800762c:	4605      	mov	r5, r0
 800762e:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8007630:	2b01      	cmp	r3, #1
{
 8007632:	4617      	mov	r7, r2
 8007634:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007638:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 800763c:	d06f      	beq.n	800771e <HAL_DSI_Read+0xfa>
 800763e:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8007640:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8007642:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8007644:	d90d      	bls.n	8007662 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8007646:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800764a:	2237      	movs	r2, #55	@ 0x37
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	b2f3      	uxtb	r3, r6
 8007650:	f7ff fbef 	bl	8006e32 <DSI_ShortWrite.constprop.0>
 8007654:	b128      	cbz	r0, 8007662 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8007656:	2300      	movs	r3, #0

      return HAL_ERROR;
 8007658:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800765a:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800765c:	b003      	add	sp, #12
 800765e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8007662:	f1b9 0f06 	cmp.w	r9, #6
 8007666:	d10f      	bne.n	8007688 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007668:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800766a:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800766c:	021b      	lsls	r3, r3, #8
 800766e:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8007672:	f043 0306 	orr.w	r3, r3, #6
 8007676:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8007678:	f7ff f840 	bl	80066fc <HAL_GetTick>
 800767c:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 800767e:	2e00      	cmp	r6, #0
 8007680:	dc27      	bgt.n	80076d2 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8007682:	2000      	movs	r0, #0
 8007684:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8007686:	e7e9      	b.n	800765c <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8007688:	f1b9 0f04 	cmp.w	r9, #4
 800768c:	d105      	bne.n	800769a <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800768e:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8007690:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007692:	f044 0404 	orr.w	r4, r4, #4
 8007696:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8007698:	e7ee      	b.n	8007678 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800769a:	f1b9 0f14 	cmp.w	r9, #20
 800769e:	d108      	bne.n	80076b2 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80076a0:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80076a4:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80076a6:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80076a8:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80076ac:	f044 0414 	orr.w	r4, r4, #20
 80076b0:	e7f1      	b.n	8007696 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80076b2:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 80076b6:	d1ce      	bne.n	8007656 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80076b8:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80076bc:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80076be:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80076c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80076c4:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80076c8:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80076cc:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 80076d0:	e7e1      	b.n	8007696 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 80076d2:	682a      	ldr	r2, [r5, #0]
 80076d4:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80076d6:	f013 0310 	ands.w	r3, r3, #16
 80076da:	d10d      	bne.n	80076f8 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80076dc:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 80076de:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80076e0:	4632      	mov	r2, r6
 80076e2:	bf28      	it	cs
 80076e4:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 80076e6:	00d9      	lsls	r1, r3, #3
 80076e8:	fa20 f101 	lsr.w	r1, r0, r1
 80076ec:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 80076ee:	3301      	adds	r3, #1
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d1f8      	bne.n	80076e6 <HAL_DSI_Read+0xc2>
 80076f4:	4417      	add	r7, r2
 80076f6:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80076f8:	f7ff f800 	bl	80066fc <HAL_GetTick>
 80076fc:	1b00      	subs	r0, r0, r4
 80076fe:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007702:	d903      	bls.n	800770c <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8007704:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8007706:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8007708:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 800770a:	e7a7      	b.n	800765c <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007710:	0652      	lsls	r2, r2, #25
 8007712:	d4b4      	bmi.n	800767e <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8007714:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007718:	069b      	lsls	r3, r3, #26
 800771a:	d49c      	bmi.n	8007656 <HAL_DSI_Read+0x32>
 800771c:	e7af      	b.n	800767e <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 800771e:	2002      	movs	r0, #2
 8007720:	e79c      	b.n	800765c <HAL_DSI_Read+0x38>

08007722 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007722:	7c02      	ldrb	r2, [r0, #16]
{
 8007724:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8007726:	2a01      	cmp	r2, #1
 8007728:	d00f      	beq.n	800774a <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800772a:	6802      	ldr	r2, [r0, #0]
 800772c:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8007730:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8007734:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8007738:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 800773c:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007740:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8007742:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 8007746:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007748:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800774a:	2002      	movs	r0, #2
}
 800774c:	4770      	bx	lr
	...

08007750 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007754:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007756:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 800791c <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800775a:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800775e:	680a      	ldr	r2, [r1, #0]
 8007760:	fa32 f503 	lsrs.w	r5, r2, r3
 8007764:	d102      	bne.n	800776c <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8007766:	b003      	add	sp, #12
 8007768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800776c:	2501      	movs	r5, #1
 800776e:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8007772:	ea18 0202 	ands.w	r2, r8, r2
 8007776:	f000 80bb 	beq.w	80078f0 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800777a:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800777c:	2703      	movs	r7, #3
 800777e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007782:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007786:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800778a:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800778c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007790:	2f01      	cmp	r7, #1
 8007792:	d834      	bhi.n	80077fe <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8007794:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007796:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800779a:	68cf      	ldr	r7, [r1, #12]
 800779c:	fa07 f70e 	lsl.w	r7, r7, lr
 80077a0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80077a4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80077a6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80077a8:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80077ac:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80077b0:	409f      	lsls	r7, r3
 80077b2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80077b6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80077b8:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077ba:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80077bc:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077c0:	688f      	ldr	r7, [r1, #8]
 80077c2:	fa07 f70e 	lsl.w	r7, r7, lr
 80077c6:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 80077ca:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077cc:	d119      	bne.n	8007802 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 80077ce:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077d2:	f003 0a07 	and.w	sl, r3, #7
 80077d6:	f04f 0b0f 	mov.w	fp, #15
 80077da:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80077de:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80077e2:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077e6:	fa0b fb0a 	lsl.w	fp, fp, sl
 80077ea:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80077ee:	690f      	ldr	r7, [r1, #16]
 80077f0:	fa07 f70a 	lsl.w	r7, r7, sl
 80077f4:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 80077f8:	f8c8 7020 	str.w	r7, [r8, #32]
 80077fc:	e001      	b.n	8007802 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077fe:	2d03      	cmp	r5, #3
 8007800:	d1da      	bne.n	80077b8 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8007802:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007804:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007808:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800780c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007810:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8007814:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007816:	d06b      	beq.n	80078f0 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007818:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 800781c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007820:	f003 0c03 	and.w	ip, r3, #3
 8007824:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007828:	f045 0502 	orr.w	r5, r5, #2
 800782c:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007830:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007834:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8007838:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800783c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007840:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007844:	f005 0502 	and.w	r5, r5, #2
 8007848:	9501      	str	r5, [sp, #4]
 800784a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800784c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800784e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007852:	4d31      	ldr	r5, [pc, #196]	@ (8007918 <HAL_GPIO_Init+0x1c8>)
 8007854:	42a8      	cmp	r0, r5
 8007856:	d04d      	beq.n	80078f4 <HAL_GPIO_Init+0x1a4>
 8007858:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800785c:	42a8      	cmp	r0, r5
 800785e:	d04b      	beq.n	80078f8 <HAL_GPIO_Init+0x1a8>
 8007860:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007864:	42a8      	cmp	r0, r5
 8007866:	d049      	beq.n	80078fc <HAL_GPIO_Init+0x1ac>
 8007868:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800786c:	42a8      	cmp	r0, r5
 800786e:	d047      	beq.n	8007900 <HAL_GPIO_Init+0x1b0>
 8007870:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007874:	42a8      	cmp	r0, r5
 8007876:	d045      	beq.n	8007904 <HAL_GPIO_Init+0x1b4>
 8007878:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800787c:	42a8      	cmp	r0, r5
 800787e:	d043      	beq.n	8007908 <HAL_GPIO_Init+0x1b8>
 8007880:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007884:	42a8      	cmp	r0, r5
 8007886:	d041      	beq.n	800790c <HAL_GPIO_Init+0x1bc>
 8007888:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800788c:	42a8      	cmp	r0, r5
 800788e:	d03f      	beq.n	8007910 <HAL_GPIO_Init+0x1c0>
 8007890:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007894:	42a8      	cmp	r0, r5
 8007896:	d03d      	beq.n	8007914 <HAL_GPIO_Init+0x1c4>
 8007898:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800789c:	42a8      	cmp	r0, r5
 800789e:	bf14      	ite	ne
 80078a0:	250a      	movne	r5, #10
 80078a2:	2509      	moveq	r5, #9
 80078a4:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80078a8:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80078ac:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078b0:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80078b2:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 80078b6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80078b8:	bf0c      	ite	eq
 80078ba:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80078bc:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80078be:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 80078c2:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80078c4:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 80078c6:	bf0c      	ite	eq
 80078c8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80078ca:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80078cc:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 80078d0:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80078d2:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 80078d6:	bf0c      	ite	eq
 80078d8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80078da:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80078dc:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80078de:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80078e2:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 80078e6:	bf54      	ite	pl
 80078e8:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80078ea:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80078ec:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 80078f0:	3301      	adds	r3, #1
 80078f2:	e734      	b.n	800775e <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80078f4:	2500      	movs	r5, #0
 80078f6:	e7d5      	b.n	80078a4 <HAL_GPIO_Init+0x154>
 80078f8:	2501      	movs	r5, #1
 80078fa:	e7d3      	b.n	80078a4 <HAL_GPIO_Init+0x154>
 80078fc:	2502      	movs	r5, #2
 80078fe:	e7d1      	b.n	80078a4 <HAL_GPIO_Init+0x154>
 8007900:	2503      	movs	r5, #3
 8007902:	e7cf      	b.n	80078a4 <HAL_GPIO_Init+0x154>
 8007904:	2504      	movs	r5, #4
 8007906:	e7cd      	b.n	80078a4 <HAL_GPIO_Init+0x154>
 8007908:	2505      	movs	r5, #5
 800790a:	e7cb      	b.n	80078a4 <HAL_GPIO_Init+0x154>
 800790c:	2506      	movs	r5, #6
 800790e:	e7c9      	b.n	80078a4 <HAL_GPIO_Init+0x154>
 8007910:	2507      	movs	r5, #7
 8007912:	e7c7      	b.n	80078a4 <HAL_GPIO_Init+0x154>
 8007914:	2508      	movs	r5, #8
 8007916:	e7c5      	b.n	80078a4 <HAL_GPIO_Init+0x154>
 8007918:	58020000 	.word	0x58020000
 800791c:	58024400 	.word	0x58024400

08007920 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007924:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007926:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800792a:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800792e:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007932:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8007936:	fa31 f302 	lsrs.w	r3, r1, r2
 800793a:	d101      	bne.n	8007940 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 800793c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007940:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8007944:	ea1c 0601 	ands.w	r6, ip, r1
 8007948:	d070      	beq.n	8007a2c <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800794a:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800794e:	f002 0703 	and.w	r7, r2, #3
 8007952:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 8007956:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007958:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800795c:	fa08 f907 	lsl.w	r9, r8, r7
 8007960:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007964:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007968:	4b3a      	ldr	r3, [pc, #232]	@ (8007a54 <HAL_GPIO_DeInit+0x134>)
 800796a:	4298      	cmp	r0, r3
 800796c:	d060      	beq.n	8007a30 <HAL_GPIO_DeInit+0x110>
 800796e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007972:	4298      	cmp	r0, r3
 8007974:	d05e      	beq.n	8007a34 <HAL_GPIO_DeInit+0x114>
 8007976:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800797a:	4298      	cmp	r0, r3
 800797c:	d05c      	beq.n	8007a38 <HAL_GPIO_DeInit+0x118>
 800797e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007982:	4298      	cmp	r0, r3
 8007984:	d05a      	beq.n	8007a3c <HAL_GPIO_DeInit+0x11c>
 8007986:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800798a:	4298      	cmp	r0, r3
 800798c:	d058      	beq.n	8007a40 <HAL_GPIO_DeInit+0x120>
 800798e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007992:	4298      	cmp	r0, r3
 8007994:	d056      	beq.n	8007a44 <HAL_GPIO_DeInit+0x124>
 8007996:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800799a:	4298      	cmp	r0, r3
 800799c:	d054      	beq.n	8007a48 <HAL_GPIO_DeInit+0x128>
 800799e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079a2:	4298      	cmp	r0, r3
 80079a4:	d052      	beq.n	8007a4c <HAL_GPIO_DeInit+0x12c>
 80079a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079aa:	4298      	cmp	r0, r3
 80079ac:	d050      	beq.n	8007a50 <HAL_GPIO_DeInit+0x130>
 80079ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079b2:	4298      	cmp	r0, r3
 80079b4:	bf14      	ite	ne
 80079b6:	230a      	movne	r3, #10
 80079b8:	2309      	moveq	r3, #9
 80079ba:	40bb      	lsls	r3, r7
 80079bc:	4573      	cmp	r3, lr
 80079be:	d117      	bne.n	80079f0 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80079c0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80079c4:	ea23 0306 	bic.w	r3, r3, r6
 80079c8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80079cc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80079d0:	ea23 0306 	bic.w	r3, r3, r6
 80079d4:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 80079d8:	6863      	ldr	r3, [r4, #4]
 80079da:	ea23 0306 	bic.w	r3, r3, r6
 80079de:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	ea23 0306 	bic.w	r3, r3, r6
 80079e6:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80079e8:	68ab      	ldr	r3, [r5, #8]
 80079ea:	ea23 0309 	bic.w	r3, r3, r9
 80079ee:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80079f0:	0053      	lsls	r3, r2, #1
 80079f2:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80079f4:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80079f6:	fa0b f303 	lsl.w	r3, fp, r3
 80079fa:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80079fe:	431d      	orrs	r5, r3
 8007a00:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007a02:	f002 0507 	and.w	r5, r2, #7
 8007a06:	6a37      	ldr	r7, [r6, #32]
 8007a08:	00ad      	lsls	r5, r5, #2
 8007a0a:	fa08 f505 	lsl.w	r5, r8, r5
 8007a0e:	ea27 0705 	bic.w	r7, r7, r5
 8007a12:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a14:	68c5      	ldr	r5, [r0, #12]
 8007a16:	ea25 0503 	bic.w	r5, r5, r3
 8007a1a:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a1c:	6845      	ldr	r5, [r0, #4]
 8007a1e:	ea25 050c 	bic.w	r5, r5, ip
 8007a22:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a24:	6885      	ldr	r5, [r0, #8]
 8007a26:	ea25 0303 	bic.w	r3, r5, r3
 8007a2a:	6083      	str	r3, [r0, #8]
    position++;
 8007a2c:	3201      	adds	r2, #1
 8007a2e:	e782      	b.n	8007936 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007a30:	2300      	movs	r3, #0
 8007a32:	e7c2      	b.n	80079ba <HAL_GPIO_DeInit+0x9a>
 8007a34:	2301      	movs	r3, #1
 8007a36:	e7c0      	b.n	80079ba <HAL_GPIO_DeInit+0x9a>
 8007a38:	2302      	movs	r3, #2
 8007a3a:	e7be      	b.n	80079ba <HAL_GPIO_DeInit+0x9a>
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e7bc      	b.n	80079ba <HAL_GPIO_DeInit+0x9a>
 8007a40:	2304      	movs	r3, #4
 8007a42:	e7ba      	b.n	80079ba <HAL_GPIO_DeInit+0x9a>
 8007a44:	2305      	movs	r3, #5
 8007a46:	e7b8      	b.n	80079ba <HAL_GPIO_DeInit+0x9a>
 8007a48:	2306      	movs	r3, #6
 8007a4a:	e7b6      	b.n	80079ba <HAL_GPIO_DeInit+0x9a>
 8007a4c:	2307      	movs	r3, #7
 8007a4e:	e7b4      	b.n	80079ba <HAL_GPIO_DeInit+0x9a>
 8007a50:	2308      	movs	r3, #8
 8007a52:	e7b2      	b.n	80079ba <HAL_GPIO_DeInit+0x9a>
 8007a54:	58020000 	.word	0x58020000

08007a58 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007a58:	6903      	ldr	r3, [r0, #16]
 8007a5a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007a5c:	bf14      	ite	ne
 8007a5e:	2001      	movne	r0, #1
 8007a60:	2000      	moveq	r0, #0
 8007a62:	4770      	bx	lr

08007a64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a64:	b10a      	cbz	r2, 8007a6a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a66:	6181      	str	r1, [r0, #24]
  }
}
 8007a68:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a6a:	0409      	lsls	r1, r1, #16
 8007a6c:	e7fb      	b.n	8007a66 <HAL_GPIO_WritePin+0x2>

08007a6e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007a6e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007a70:	ea01 0203 	and.w	r2, r1, r3
 8007a74:	ea21 0103 	bic.w	r1, r1, r3
 8007a78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a7c:	6181      	str	r1, [r0, #24]
}
 8007a7e:	4770      	bx	lr

08007a80 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007a80:	4b04      	ldr	r3, [pc, #16]	@ (8007a94 <HAL_HSEM_FastTake+0x14>)
 8007a82:	3020      	adds	r0, #32
 8007a84:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8007a88:	4b03      	ldr	r3, [pc, #12]	@ (8007a98 <HAL_HSEM_FastTake+0x18>)
 8007a8a:	1ac0      	subs	r0, r0, r3
 8007a8c:	bf18      	it	ne
 8007a8e:	2001      	movne	r0, #1
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	58026400 	.word	0x58026400
 8007a98:	80000300 	.word	0x80000300

08007a9c <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007a9c:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 8007aa0:	4b01      	ldr	r3, [pc, #4]	@ (8007aa8 <HAL_HSEM_Release+0xc>)
 8007aa2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8007aa6:	4770      	bx	lr
 8007aa8:	58026400 	.word	0x58026400

08007aac <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007aac:	6803      	ldr	r3, [r0, #0]
 8007aae:	699a      	ldr	r2, [r3, #24]
 8007ab0:	0791      	lsls	r1, r2, #30
 8007ab2:	d501      	bpl.n	8007ab8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ab8:	699a      	ldr	r2, [r3, #24]
 8007aba:	07d2      	lsls	r2, r2, #31
 8007abc:	d403      	bmi.n	8007ac6 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007abe:	699a      	ldr	r2, [r3, #24]
 8007ac0:	f042 0201 	orr.w	r2, r2, #1
 8007ac4:	619a      	str	r2, [r3, #24]
  }
}
 8007ac6:	4770      	bx	lr

08007ac8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007ac8:	b530      	push	{r4, r5, lr}
 8007aca:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007acc:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ad0:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ad2:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ad4:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ada:	4a05      	ldr	r2, [pc, #20]	@ (8007af0 <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007adc:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ade:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ae2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ae6:	ea20 0002 	bic.w	r0, r0, r2
 8007aea:	4303      	orrs	r3, r0
 8007aec:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007aee:	bd30      	pop	{r4, r5, pc}
 8007af0:	03ff63ff 	.word	0x03ff63ff

08007af4 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8007af4:	6803      	ldr	r3, [r0, #0]
{
 8007af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8007afa:	699c      	ldr	r4, [r3, #24]
{
 8007afc:	4605      	mov	r5, r0
 8007afe:	460f      	mov	r7, r1
 8007b00:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007b02:	f014 0410 	ands.w	r4, r4, #16
 8007b06:	d06f      	beq.n	8007be8 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8007b08:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b0a:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8007b0c:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b0e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	699a      	ldr	r2, [r3, #24]
 8007b14:	0690      	lsls	r0, r2, #26
 8007b16:	d461      	bmi.n	8007bdc <I2C_IsErrorOccurred+0xe8>
 8007b18:	f1b8 0f00 	cmp.w	r8, #0
 8007b1c:	d035      	beq.n	8007b8a <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8007b1e:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8007b22:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8007b24:	682e      	ldr	r6, [r5, #0]
 8007b26:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007b28:	05d9      	lsls	r1, r3, #23
 8007b2a:	d505      	bpl.n	8007b38 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007b2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8007b30:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8007b34:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007b36:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007b38:	055a      	lsls	r2, r3, #21
 8007b3a:	d505      	bpl.n	8007b48 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007b3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8007b40:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8007b44:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007b46:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007b48:	059b      	lsls	r3, r3, #22
 8007b4a:	d54f      	bpl.n	8007bec <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8007b50:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b54:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8007b56:	4628      	mov	r0, r5
 8007b58:	f7ff ffa8 	bl	8007aac <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007b5c:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8007b5e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8007b60:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8007b64:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8007b68:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8007b6c:	f023 0301 	bic.w	r3, r3, #1
 8007b70:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8007b72:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8007b74:	4323      	orrs	r3, r4
 8007b76:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007b78:	2320      	movs	r3, #32
 8007b7a:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8007b84:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8007b88:	e032      	b.n	8007bf0 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8007b8a:	1c7a      	adds	r2, r7, #1
 8007b8c:	d0c1      	beq.n	8007b12 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b8e:	f7fe fdb5 	bl	80066fc <HAL_GetTick>
 8007b92:	1b80      	subs	r0, r0, r6
 8007b94:	42b8      	cmp	r0, r7
 8007b96:	d801      	bhi.n	8007b9c <I2C_IsErrorOccurred+0xa8>
 8007b98:	2f00      	cmp	r7, #0
 8007b9a:	d1b9      	bne.n	8007b10 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007b9c:	682b      	ldr	r3, [r5, #0]
 8007b9e:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8007ba0:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007ba4:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8007ba6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007ba8:	0400      	lsls	r0, r0, #16
 8007baa:	d50a      	bpl.n	8007bc2 <I2C_IsErrorOccurred+0xce>
 8007bac:	0449      	lsls	r1, r1, #17
 8007bae:	d408      	bmi.n	8007bc2 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8007bb0:	2a20      	cmp	r2, #32
 8007bb2:	d006      	beq.n	8007bc2 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007bba:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8007bbc:	f7fe fd9e 	bl	80066fc <HAL_GetTick>
 8007bc0:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007bc2:	682b      	ldr	r3, [r5, #0]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	069b      	lsls	r3, r3, #26
 8007bc8:	d4a2      	bmi.n	8007b10 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007bca:	f7fe fd97 	bl	80066fc <HAL_GetTick>
 8007bce:	1b80      	subs	r0, r0, r6
 8007bd0:	2819      	cmp	r0, #25
 8007bd2:	d9f6      	bls.n	8007bc2 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007bd4:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8007bd6:	f04f 0801 	mov.w	r8, #1
 8007bda:	e799      	b.n	8007b10 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8007bdc:	f1b8 0f00 	cmp.w	r8, #0
 8007be0:	d19d      	bne.n	8007b1e <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007be2:	2220      	movs	r2, #32
 8007be4:	61da      	str	r2, [r3, #28]
 8007be6:	e79a      	b.n	8007b1e <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8007be8:	4620      	mov	r0, r4
 8007bea:	e79b      	b.n	8007b24 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d1b2      	bne.n	8007b56 <I2C_IsErrorOccurred+0x62>
}
 8007bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007bf4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	460d      	mov	r5, r1
 8007bfa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	079b      	lsls	r3, r3, #30
 8007c02:	d501      	bpl.n	8007c08 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8007c04:	2000      	movs	r0, #0
 8007c06:	e01f      	b.n	8007c48 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c08:	4632      	mov	r2, r6
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f7ff ff71 	bl	8007af4 <I2C_IsErrorOccurred>
 8007c12:	b9c0      	cbnz	r0, 8007c46 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8007c14:	1c6a      	adds	r2, r5, #1
 8007c16:	d0f1      	beq.n	8007bfc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c18:	f7fe fd70 	bl	80066fc <HAL_GetTick>
 8007c1c:	1b80      	subs	r0, r0, r6
 8007c1e:	42a8      	cmp	r0, r5
 8007c20:	d801      	bhi.n	8007c26 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8007c22:	2d00      	cmp	r5, #0
 8007c24:	d1ea      	bne.n	8007bfc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	f013 0302 	ands.w	r3, r3, #2
 8007c2e:	d1e5      	bne.n	8007bfc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c30:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8007c32:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c36:	f042 0220 	orr.w	r2, r2, #32
 8007c3a:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c42:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8007c46:	2001      	movs	r0, #1
}
 8007c48:	bd70      	pop	{r4, r5, r6, pc}

08007c4a <I2C_WaitOnFlagUntilTimeout>:
{
 8007c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c4e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007c52:	4604      	mov	r4, r0
 8007c54:	460f      	mov	r7, r1
 8007c56:	4616      	mov	r6, r2
 8007c58:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	ea37 0303 	bics.w	r3, r7, r3
 8007c62:	bf0c      	ite	eq
 8007c64:	2301      	moveq	r3, #1
 8007c66:	2300      	movne	r3, #0
 8007c68:	42b3      	cmp	r3, r6
 8007c6a:	d001      	beq.n	8007c70 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	e025      	b.n	8007cbc <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c70:	4642      	mov	r2, r8
 8007c72:	4629      	mov	r1, r5
 8007c74:	4620      	mov	r0, r4
 8007c76:	f7ff ff3d 	bl	8007af4 <I2C_IsErrorOccurred>
 8007c7a:	b9f0      	cbnz	r0, 8007cba <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8007c7c:	1c6b      	adds	r3, r5, #1
 8007c7e:	d0ec      	beq.n	8007c5a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c80:	f7fe fd3c 	bl	80066fc <HAL_GetTick>
 8007c84:	eba0 0008 	sub.w	r0, r0, r8
 8007c88:	42a8      	cmp	r0, r5
 8007c8a:	d801      	bhi.n	8007c90 <I2C_WaitOnFlagUntilTimeout+0x46>
 8007c8c:	2d00      	cmp	r5, #0
 8007c8e:	d1e4      	bne.n	8007c5a <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	ea37 0303 	bics.w	r3, r7, r3
 8007c98:	bf0c      	ite	eq
 8007c9a:	2301      	moveq	r3, #1
 8007c9c:	2300      	movne	r3, #0
 8007c9e:	42b3      	cmp	r3, r6
 8007ca0:	d1db      	bne.n	8007c5a <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ca2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007ca4:	f043 0320 	orr.w	r3, r3, #32
 8007ca8:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007caa:	2320      	movs	r3, #32
 8007cac:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8007cb6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007cba:	2001      	movs	r0, #1
}
 8007cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007cc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	460d      	mov	r5, r1
 8007cc6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cc8:	6823      	ldr	r3, [r4, #0]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	069b      	lsls	r3, r3, #26
 8007cce:	d501      	bpl.n	8007cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	e01d      	b.n	8007d10 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cd4:	4632      	mov	r2, r6
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f7ff ff0b 	bl	8007af4 <I2C_IsErrorOccurred>
 8007cde:	b9b0      	cbnz	r0, 8007d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ce0:	f7fe fd0c 	bl	80066fc <HAL_GetTick>
 8007ce4:	1b80      	subs	r0, r0, r6
 8007ce6:	42a8      	cmp	r0, r5
 8007ce8:	d801      	bhi.n	8007cee <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8007cea:	2d00      	cmp	r5, #0
 8007cec:	d1ec      	bne.n	8007cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	f013 0320 	ands.w	r3, r3, #32
 8007cf6:	d1e7      	bne.n	8007cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cf8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007cfa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cfe:	f042 0220 	orr.w	r2, r2, #32
 8007d02:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d04:	2220      	movs	r2, #32
 8007d06:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d0a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8007d0e:	2001      	movs	r0, #1
}
 8007d10:	bd70      	pop	{r4, r5, r6, pc}

08007d12 <HAL_I2C_MspInit>:
}
 8007d12:	4770      	bx	lr

08007d14 <HAL_I2C_Init>:
{
 8007d14:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8007d16:	4604      	mov	r4, r0
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d04e      	beq.n	8007dba <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d1c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007d20:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007d24:	b91b      	cbnz	r3, 8007d2e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8007d26:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8007d2a:	f7ff fff2 	bl	8007d12 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d2e:	2324      	movs	r3, #36	@ 0x24
 8007d30:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	f022 0201 	bic.w	r2, r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d3e:	6862      	ldr	r2, [r4, #4]
 8007d40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007d44:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d4c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d4e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d52:	2901      	cmp	r1, #1
 8007d54:	d106      	bne.n	8007d64 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d5a:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d62:	e007      	b.n	8007d74 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d64:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d68:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d6a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d6c:	d1f6      	bne.n	8007d5c <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d74:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d76:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8007d7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d82:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d8a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d8c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8007d90:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007d92:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d94:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007d98:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007d9a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	f042 0201 	orr.w	r2, r2, #1
 8007da8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8007daa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dac:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007dae:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007db2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007db4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8007db8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007dba:	2001      	movs	r0, #1
 8007dbc:	e7fc      	b.n	8007db8 <HAL_I2C_Init+0xa4>

08007dbe <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 8007dbe:	4770      	bx	lr

08007dc0 <HAL_I2C_DeInit>:
{
 8007dc0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	b198      	cbz	r0, 8007dee <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8007dc6:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007dc8:	2324      	movs	r3, #36	@ 0x24
 8007dca:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007dce:	6813      	ldr	r3, [r2, #0]
 8007dd0:	f023 0301 	bic.w	r3, r3, #1
 8007dd4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8007dd6:	f7ff fff2 	bl	8007dbe <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dda:	2000      	movs	r0, #0
 8007ddc:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8007dde:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8007de2:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007de6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007de8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8007dec:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007dee:	2001      	movs	r0, #1
 8007df0:	e7fc      	b.n	8007dec <HAL_I2C_DeInit+0x2c>
	...

08007df4 <HAL_I2C_Mem_Write>:
{
 8007df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dfa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8007dfe:	4604      	mov	r4, r0
 8007e00:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e02:	2b20      	cmp	r3, #32
{
 8007e04:	4616      	mov	r6, r2
 8007e06:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8007e0a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e0e:	f040 80c6 	bne.w	8007f9e <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8007e12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e14:	b113      	cbz	r3, 8007e1c <HAL_I2C_Mem_Write+0x28>
 8007e16:	f1ba 0f00 	cmp.w	sl, #0
 8007e1a:	d106      	bne.n	8007e2a <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007e1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e20:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8007e22:	2001      	movs	r0, #1
}
 8007e24:	b003      	add	sp, #12
 8007e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007e2a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	f000 80b5 	beq.w	8007f9e <HAL_I2C_Mem_Write+0x1aa>
 8007e34:	f04f 0b01 	mov.w	fp, #1
 8007e38:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8007e3c:	f7fe fc5e 	bl	80066fc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e40:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8007e42:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e44:	9000      	str	r0, [sp, #0]
 8007e46:	465a      	mov	r2, fp
 8007e48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f7ff fefc 	bl	8007c4a <I2C_WaitOnFlagUntilTimeout>
 8007e52:	2800      	cmp	r0, #0
 8007e54:	d1e5      	bne.n	8007e22 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e56:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8007e58:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007e5a:	fa5f f289 	uxtb.w	r2, r9
 8007e5e:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e60:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e64:	2340      	movs	r3, #64	@ 0x40
 8007e66:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8007e6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e6c:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007e6e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8007e70:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007e72:	4b4c      	ldr	r3, [pc, #304]	@ (8007fa4 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8007e74:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007e7e:	f7ff fe23 	bl	8007ac8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e82:	462a      	mov	r2, r5
 8007e84:	4641      	mov	r1, r8
 8007e86:	4620      	mov	r0, r4
 8007e88:	f7ff feb4 	bl	8007bf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e8c:	bb18      	cbnz	r0, 8007ed6 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e8e:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007e92:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e94:	d115      	bne.n	8007ec2 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007e96:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2180      	movs	r1, #128	@ 0x80
 8007e9c:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007e9e:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007ea0:	4643      	mov	r3, r8
 8007ea2:	9500      	str	r5, [sp, #0]
 8007ea4:	f7ff fed1 	bl	8007c4a <I2C_WaitOnFlagUntilTimeout>
 8007ea8:	b9a8      	cbnz	r0, 8007ed6 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007eaa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2bff      	cmp	r3, #255	@ 0xff
 8007eb0:	d815      	bhi.n	8007ede <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8007eb2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007eb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8007eb8:	b292      	uxth	r2, r2
 8007eba:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007ebc:	b2d2      	uxtb	r2, r2
 8007ebe:	9000      	str	r0, [sp, #0]
 8007ec0:	e012      	b.n	8007ee8 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007ec2:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ec4:	4641      	mov	r1, r8
 8007ec6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007ec8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eca:	462a      	mov	r2, r5
 8007ecc:	f7ff fe92 	bl	8007bf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ed0:	b908      	cbnz	r0, 8007ed6 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	e7df      	b.n	8007e96 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007edc:	e7a1      	b.n	8007e22 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ede:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ee0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ee4:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ee6:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007ee8:	4639      	mov	r1, r7
 8007eea:	4620      	mov	r0, r4
 8007eec:	f7ff fdec 	bl	8007ac8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ef0:	462a      	mov	r2, r5
 8007ef2:	4641      	mov	r1, r8
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f7ff fe7d 	bl	8007bf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	d191      	bne.n	8007e22 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007efe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007f00:	6822      	ldr	r2, [r4, #0]
 8007f02:	f813 1b01 	ldrb.w	r1, [r3], #1
 8007f06:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8007f08:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007f0a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007f0c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007f0e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007f10:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8007f12:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8007f14:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007f16:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f18:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007f1a:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	b1b3      	cbz	r3, 8007f4e <HAL_I2C_Mem_Write+0x15a>
 8007f20:	b9aa      	cbnz	r2, 8007f4e <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f22:	4643      	mov	r3, r8
 8007f24:	2180      	movs	r1, #128	@ 0x80
 8007f26:	4620      	mov	r0, r4
 8007f28:	9500      	str	r5, [sp, #0]
 8007f2a:	f7ff fe8e 	bl	8007c4a <I2C_WaitOnFlagUntilTimeout>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	f47f af77 	bne.w	8007e22 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f34:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	2bff      	cmp	r3, #255	@ 0xff
 8007f3a:	d928      	bls.n	8007f8e <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f3c:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f42:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f44:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f46:	4639      	mov	r1, r7
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f7ff fdbd 	bl	8007ac8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007f4e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1cc      	bne.n	8007ef0 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f56:	462a      	mov	r2, r5
 8007f58:	4641      	mov	r1, r8
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f7ff feb0 	bl	8007cc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	f47f af5e 	bne.w	8007e22 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	2120      	movs	r1, #32
 8007f6a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8007f72:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8007f76:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8007f7a:	f022 0201 	bic.w	r2, r2, #1
 8007f7e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007f80:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007f84:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f88:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8007f8c:	e74a      	b.n	8007e24 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8007f8e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8007f94:	b292      	uxth	r2, r2
 8007f96:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f98:	b2d2      	uxtb	r2, r2
 8007f9a:	9000      	str	r0, [sp, #0]
 8007f9c:	e7d3      	b.n	8007f46 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8007f9e:	2002      	movs	r0, #2
 8007fa0:	e740      	b.n	8007e24 <HAL_I2C_Mem_Write+0x30>
 8007fa2:	bf00      	nop
 8007fa4:	80002000 	.word	0x80002000

08007fa8 <HAL_I2C_Mem_Read>:
{
 8007fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fac:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fae:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fb6:	2b20      	cmp	r3, #32
{
 8007fb8:	4616      	mov	r6, r2
 8007fba:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8007fbe:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fc2:	f040 80c9 	bne.w	8008158 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8007fc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007fc8:	b113      	cbz	r3, 8007fd0 <HAL_I2C_Mem_Read+0x28>
 8007fca:	f1ba 0f00 	cmp.w	sl, #0
 8007fce:	d106      	bne.n	8007fde <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007fd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007fd4:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8007fd6:	2001      	movs	r0, #1
}
 8007fd8:	b003      	add	sp, #12
 8007fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007fde:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	f000 80b8 	beq.w	8008158 <HAL_I2C_Mem_Read+0x1b0>
 8007fe8:	f04f 0b01 	mov.w	fp, #1
 8007fec:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8007ff0:	f7fe fb84 	bl	80066fc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ff4:	2319      	movs	r3, #25
 8007ff6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8007ff8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ffa:	465a      	mov	r2, fp
 8007ffc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008000:	4620      	mov	r0, r4
 8008002:	f7ff fe22 	bl	8007c4a <I2C_WaitOnFlagUntilTimeout>
 8008006:	4603      	mov	r3, r0
 8008008:	2800      	cmp	r0, #0
 800800a:	d1e4      	bne.n	8007fd6 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800800c:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 800800e:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008010:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008012:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008016:	2240      	movs	r2, #64	@ 0x40
 8008018:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800801c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800801e:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008020:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008022:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008024:	4a4d      	ldr	r2, [pc, #308]	@ (800815c <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8008026:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800802a:	9200      	str	r2, [sp, #0]
 800802c:	fa5f f289 	uxtb.w	r2, r9
 8008030:	f7ff fd4a 	bl	8007ac8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008034:	462a      	mov	r2, r5
 8008036:	4641      	mov	r1, r8
 8008038:	4620      	mov	r0, r4
 800803a:	f7ff fddb 	bl	8007bf4 <I2C_WaitOnTXISFlagUntilTimeout>
 800803e:	bb20      	cbnz	r0, 800808a <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008040:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008044:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008046:	d116      	bne.n	8008076 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008048:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800804a:	2200      	movs	r2, #0
 800804c:	2140      	movs	r1, #64	@ 0x40
 800804e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008050:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008052:	4643      	mov	r3, r8
 8008054:	9500      	str	r5, [sp, #0]
 8008056:	f7ff fdf8 	bl	8007c4a <I2C_WaitOnFlagUntilTimeout>
 800805a:	b9b0      	cbnz	r0, 800808a <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800805c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800805e:	b29b      	uxth	r3, r3
 8008060:	2bff      	cmp	r3, #255	@ 0xff
 8008062:	4b3f      	ldr	r3, [pc, #252]	@ (8008160 <HAL_I2C_Mem_Read+0x1b8>)
 8008064:	d815      	bhi.n	8008092 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8008066:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8008068:	b292      	uxth	r2, r2
 800806a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800806c:	b2d2      	uxtb	r2, r2
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008074:	e012      	b.n	800809c <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008076:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008078:	4641      	mov	r1, r8
 800807a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800807c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800807e:	462a      	mov	r2, r5
 8008080:	f7ff fdb8 	bl	8007bf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008084:	b908      	cbnz	r0, 800808a <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	e7de      	b.n	8008048 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800808a:	2300      	movs	r3, #0
 800808c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008090:	e7a1      	b.n	8007fd6 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008092:	22ff      	movs	r2, #255	@ 0xff
 8008094:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800809c:	4639      	mov	r1, r7
 800809e:	4620      	mov	r0, r4
 80080a0:	f7ff fd12 	bl	8007ac8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80080a4:	4643      	mov	r3, r8
 80080a6:	2200      	movs	r2, #0
 80080a8:	2104      	movs	r1, #4
 80080aa:	4620      	mov	r0, r4
 80080ac:	9500      	str	r5, [sp, #0]
 80080ae:	f7ff fdcc 	bl	8007c4a <I2C_WaitOnFlagUntilTimeout>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d18f      	bne.n	8007fd6 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80080bc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80080be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80080c0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80080c2:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80080c4:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80080c6:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80080c8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80080ca:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80080cc:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80080ce:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80080d4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	b1b3      	cbz	r3, 8008108 <HAL_I2C_Mem_Read+0x160>
 80080da:	b9aa      	cbnz	r2, 8008108 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80080dc:	4643      	mov	r3, r8
 80080de:	2180      	movs	r1, #128	@ 0x80
 80080e0:	4620      	mov	r0, r4
 80080e2:	9500      	str	r5, [sp, #0]
 80080e4:	f7ff fdb1 	bl	8007c4a <I2C_WaitOnFlagUntilTimeout>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	f47f af74 	bne.w	8007fd6 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080ee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	2bff      	cmp	r3, #255	@ 0xff
 80080f4:	d928      	bls.n	8008148 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80080f6:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80080f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80080fc:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80080fe:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008100:	4639      	mov	r1, r7
 8008102:	4620      	mov	r0, r4
 8008104:	f7ff fce0 	bl	8007ac8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008108:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800810a:	b29b      	uxth	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1c9      	bne.n	80080a4 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008110:	462a      	mov	r2, r5
 8008112:	4641      	mov	r1, r8
 8008114:	4620      	mov	r0, r4
 8008116:	f7ff fdd3 	bl	8007cc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800811a:	2800      	cmp	r0, #0
 800811c:	f47f af5b 	bne.w	8007fd6 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	2120      	movs	r1, #32
 8008124:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800812c:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8008130:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8008134:	f022 0201 	bic.w	r2, r2, #1
 8008138:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800813a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800813e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008142:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8008146:	e747      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8008148:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800814a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800814e:	b292      	uxth	r2, r2
 8008150:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008152:	b2d2      	uxtb	r2, r2
 8008154:	9000      	str	r0, [sp, #0]
 8008156:	e7d3      	b.n	8008100 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8008158:	2002      	movs	r0, #2
 800815a:	e73d      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x30>
 800815c:	80002000 	.word	0x80002000
 8008160:	80002400 	.word	0x80002400

08008164 <HAL_I2C_GetState>:
  return hi2c->State;
 8008164:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8008168:	4770      	bx	lr

0800816a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800816a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800816c:	4770      	bx	lr

0800816e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800816e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008170:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8008174:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008176:	2a20      	cmp	r2, #32
 8008178:	b2d4      	uxtb	r4, r2
 800817a:	d11c      	bne.n	80081b6 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800817c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008180:	2a01      	cmp	r2, #1
 8008182:	d018      	beq.n	80081b6 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008184:	2224      	movs	r2, #36	@ 0x24
 8008186:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800818a:	6802      	ldr	r2, [r0, #0]
 800818c:	6810      	ldr	r0, [r2, #0]
 800818e:	f020 0001 	bic.w	r0, r0, #1
 8008192:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008194:	6810      	ldr	r0, [r2, #0]
 8008196:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800819a:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800819c:	6810      	ldr	r0, [r2, #0]
 800819e:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081a0:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 80081a2:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80081a4:	6811      	ldr	r1, [r2, #0]
 80081a6:	f041 0101 	orr.w	r1, r1, #1
 80081aa:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80081ac:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80081b0:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80081b4:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80081b6:	2002      	movs	r0, #2
 80081b8:	e7fc      	b.n	80081b4 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080081ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80081ba:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081bc:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80081c0:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80081c2:	2a20      	cmp	r2, #32
 80081c4:	b2d4      	uxtb	r4, r2
 80081c6:	d11b      	bne.n	8008200 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081c8:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80081cc:	2a01      	cmp	r2, #1
 80081ce:	d017      	beq.n	8008200 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081d0:	2224      	movs	r2, #36	@ 0x24
 80081d2:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081d6:	6802      	ldr	r2, [r0, #0]
 80081d8:	6810      	ldr	r0, [r2, #0]
 80081da:	f020 0001 	bic.w	r0, r0, #1
 80081de:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80081e0:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80081e2:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80081e6:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081ea:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 80081ec:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80081ee:	6811      	ldr	r1, [r2, #0]
 80081f0:	f041 0101 	orr.w	r1, r1, #1
 80081f4:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80081f6:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80081fa:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80081fe:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8008200:	2002      	movs	r0, #2
 8008202:	e7fc      	b.n	80081fe <HAL_I2CEx_ConfigDigitalFilter+0x44>

08008204 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8008204:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8008206:	2401      	movs	r4, #1
 8008208:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 800820a:	2500      	movs	r5, #0
 800820c:	194e      	adds	r6, r1, r5
 800820e:	443d      	add	r5, r7
 8008210:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 8008212:	42be      	cmp	r6, r7
 8008214:	d112      	bne.n	800823c <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 8008216:	2c10      	cmp	r4, #16
 8008218:	d108      	bne.n	800822c <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 800821a:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800821c:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 800821e:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 8008220:	601d      	str	r5, [r3, #0]
  p = 0;
 8008222:	4623      	mov	r3, r4
  si = Huffsize[0];
 8008224:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 8008226:	5cc8      	ldrb	r0, [r1, r3]
 8008228:	b9d8      	cbnz	r0, 8008262 <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800822a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 800822c:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 800822e:	3401      	adds	r4, #1
 8008230:	197e      	adds	r6, r7, r5
 8008232:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8008236:	d9e9      	bls.n	800820c <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 8008238:	2001      	movs	r0, #1
 800823a:	e7f6      	b.n	800822a <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 800823c:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 8008240:	e7e7      	b.n	8008212 <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 8008242:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 8008246:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8008248:	5cc8      	ldrb	r0, [r1, r3]
 800824a:	19dc      	adds	r4, r3, r7
 800824c:	42a8      	cmp	r0, r5
 800824e:	d0f8      	beq.n	8008242 <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 8008250:	2d1f      	cmp	r5, #31
 8008252:	d8f1      	bhi.n	8008238 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8008254:	fa06 f005 	lsl.w	r0, r6, r5
 8008258:	42a0      	cmp	r0, r4
 800825a:	d9ed      	bls.n	8008238 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 800825c:	0064      	lsls	r4, r4, #1
    si++;
 800825e:	3501      	adds	r5, #1
 8008260:	e7e1      	b.n	8008226 <JPEG_Bits_To_SizeCodes+0x22>
 8008262:	1ae7      	subs	r7, r4, r3
 8008264:	e7f0      	b.n	8008248 <JPEG_Bits_To_SizeCodes+0x44>

08008266 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8008266:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008268:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 800826c:	460d      	mov	r5, r1
 800826e:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008270:	ab01      	add	r3, sp, #4
 8008272:	aa43      	add	r2, sp, #268	@ 0x10c
 8008274:	a902      	add	r1, sp, #8
 8008276:	f7ff ffc5 	bl	8008204 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800827a:	b940      	cbnz	r0, 800828e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>
 800827c:	9e01      	ldr	r6, [sp, #4]
 800827e:	4613      	mov	r3, r2
 8008280:	460a      	mov	r2, r1
 8008282:	f104 010f 	add.w	r1, r4, #15
 8008286:	360f      	adds	r6, #15
 8008288:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800828a:	42a1      	cmp	r1, r4
 800828c:	d102      	bne.n	8008294 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800828e:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8008292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 8008294:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8008298:	2e0b      	cmp	r6, #11
 800829a:	d80a      	bhi.n	80082b2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800829c:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 80082a0:	f853 cb04 	ldr.w	ip, [r3], #4
 80082a4:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80082a8:	f812 7b01 	ldrb.w	r7, [r2], #1
 80082ac:	3f01      	subs	r7, #1
 80082ae:	55af      	strb	r7, [r5, r6]
      k++;
 80082b0:	e7eb      	b.n	800828a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x24>
      return HAL_ERROR; /* Huffman Table overflow error*/
 80082b2:	2001      	movs	r0, #1
 80082b4:	e7eb      	b.n	800828e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>

080082b6 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80082b6:	4603      	mov	r3, r0
 80082b8:	4608      	mov	r0, r1
 80082ba:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80082bc:	681c      	ldr	r4, [r3, #0]
{
 80082be:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80082c0:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d125      	bne.n	8008314 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80082c8:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80082cc:	a901      	add	r1, sp, #4
 80082ce:	f7ff ffca 	bl	8008266 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 80082d2:	b9e8      	cbnz	r0, 8008310 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 80082d4:	aa01      	add	r2, sp, #4
 80082d6:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 80082da:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 80082de:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 80082e0:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 80082e2:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80082e4:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 80082e6:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80082e8:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 80082ec:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80082ee:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80082f0:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80082f4:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 80082f8:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80082fa:	7b13      	ldrb	r3, [r2, #12]
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008302:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8008304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008308:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800830c:	42b4      	cmp	r4, r6
 800830e:	d1e9      	bne.n	80082e4 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8008310:	b011      	add	sp, #68	@ 0x44
 8008312:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8008314:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 8008318:	429a      	cmp	r2, r3
 800831a:	d102      	bne.n	8008322 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800831c:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 8008320:	e7d4      	b.n	80082cc <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 8008322:	2001      	movs	r0, #1
 8008324:	e7f4      	b.n	8008310 <JPEG_Set_HuffDC_Mem+0x5a>

08008326 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8008326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800832a:	6804      	ldr	r4, [r0, #0]
{
 800832c:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 8008330:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8008332:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8008336:	429a      	cmp	r2, r3
 8008338:	d149      	bne.n	80083ce <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800833a:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800833e:	466b      	mov	r3, sp
 8008340:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 8008344:	a901      	add	r1, sp, #4
 8008346:	4630      	mov	r0, r6
 8008348:	f7ff ff5c 	bl	8008204 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800834c:	2800      	cmp	r0, #0
 800834e:	d13a      	bne.n	80083c6 <JPEG_Set_HuffAC_Mem+0xa0>
 8008350:	9b00      	ldr	r3, [sp, #0]
 8008352:	460d      	mov	r5, r1
 8008354:	f106 0c0f 	add.w	ip, r6, #15
 8008358:	4617      	mov	r7, r2
 800835a:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800835c:	f04f 0e0a 	mov.w	lr, #10
 8008360:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008362:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 8008364:	4561      	cmp	r1, ip
 8008366:	d139      	bne.n	80083dc <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8008368:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800836c:	a942      	add	r1, sp, #264	@ 0x108
 800836e:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 8008372:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8008374:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8008376:	6063      	str	r3, [r4, #4]
 8008378:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800837a:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800837e:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 8008382:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8008384:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8008388:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800838a:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800838e:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8008390:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8008394:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008396:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 800839a:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800839c:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 80083a0:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80083a2:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80083a4:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80083a8:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 80083ac:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80083ae:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 80083b2:	021b      	lsls	r3, r3, #8
 80083b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80083b8:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80083ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083be:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80083c2:	42b4      	cmp	r4, r6
 80083c4:	d1e7      	bne.n	8008396 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80083c6:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 80083ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80083ce:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d10f      	bne.n	80083f6 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80083d6:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 80083da:	e7b0      	b.n	800833e <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 80083dc:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 80083e0:	b15b      	cbz	r3, 80083fa <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80083e2:	2bf0      	cmp	r3, #240	@ 0xf0
 80083e4:	d015      	beq.n	8008412 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 80083e6:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 80083e8:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 80083ec:	3b01      	subs	r3, #1
 80083ee:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80083f2:	2ba1      	cmp	r3, #161	@ 0xa1
 80083f4:	d902      	bls.n	80083fc <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 80083f6:	2001      	movs	r0, #1
 80083f8:	e7e5      	b.n	80083c6 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 80083fa:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80083fc:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8008400:	f857 8b04 	ldr.w	r8, [r7], #4
 8008404:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008408:	f815 2b01 	ldrb.w	r2, [r5], #1
 800840c:	3a01      	subs	r2, #1
 800840e:	54f2      	strb	r2, [r6, r3]
      k++;
 8008410:	e7a8      	b.n	8008364 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 8008412:	23a1      	movs	r3, #161	@ 0xa1
 8008414:	e7f2      	b.n	80083fc <JPEG_Set_HuffAC_Mem+0xd6>

08008416 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8008416:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008418:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800841c:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800841e:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8008420:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008422:	f002 0203 	and.w	r2, r2, #3
 8008426:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	bf0c      	ite	eq
 800842c:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8008430:	f022 0208 	bicne.w	r2, r2, #8
 8008434:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	f022 0201 	bic.w	r2, r2, #1
 800843c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800843e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008440:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008444:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8008446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008448:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800844c:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800844e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008450:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008454:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008456:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008458:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800845c:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	f042 0201 	orr.w	r2, r2, #1
 8008464:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008466:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8008468:	f002 020c 	and.w	r2, r2, #12
 800846c:	2a08      	cmp	r2, #8
 800846e:	d104      	bne.n	800847a <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8008470:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008472:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008476:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8008478:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800847a:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800847c:	f002 020c 	and.w	r2, r2, #12
 8008480:	2a0c      	cmp	r2, #12
 8008482:	d1f9      	bne.n	8008478 <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008484:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008486:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800848a:	e7f4      	b.n	8008476 <JPEG_Init_Process+0x60>

0800848c <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800848c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800848e:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 8008490:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008492:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008494:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008496:	42aa      	cmp	r2, r5
 8008498:	d313      	bcc.n	80084c2 <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800849a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800849c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800849e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80084a0:	428b      	cmp	r3, r1
 80084a2:	d30e      	bcc.n	80084c2 <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 80084a4:	4f18      	ldr	r7, [pc, #96]	@ (8008508 <JPEG_DMA_StartProcess+0x7c>)
 80084a6:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 80084a8:	4f18      	ldr	r7, [pc, #96]	@ (800850c <JPEG_DMA_StartProcess+0x80>)
 80084aa:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80084ac:	4e18      	ldr	r6, [pc, #96]	@ (8008510 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 80084ae:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80084b0:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 80084b2:	4e18      	ldr	r6, [pc, #96]	@ (8008514 <JPEG_DMA_StartProcess+0x88>)
 80084b4:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 80084b6:	b105      	cbz	r5, 80084ba <JPEG_DMA_StartProcess+0x2e>
 80084b8:	b931      	cbnz	r1, 80084c8 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80084ba:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80084bc:	f043 0304 	orr.w	r3, r3, #4
 80084c0:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80084c2:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80084c4:	b003      	add	sp, #12
 80084c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80084c8:	fbb2 f6f5 	udiv	r6, r2, r5
 80084cc:	fb05 2516 	mls	r5, r5, r6, r2
 80084d0:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80084d2:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80084d4:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80084d6:	fbb3 f2f1 	udiv	r2, r3, r1
 80084da:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80084de:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80084e0:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80084e2:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80084e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80084e6:	9500      	str	r5, [sp, #0]
 80084e8:	69e2      	ldr	r2, [r4, #28]
 80084ea:	f001 f810 	bl	800950e <HAL_MDMA_Start_IT>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d1e3      	bne.n	80084ba <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80084f2:	6822      	ldr	r2, [r4, #0]
 80084f4:	9500      	str	r5, [sp, #0]
 80084f6:	3240      	adds	r2, #64	@ 0x40
 80084f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80084fa:	69a1      	ldr	r1, [r4, #24]
 80084fc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80084fe:	f001 f806 	bl	800950e <HAL_MDMA_Start_IT>
 8008502:	2800      	cmp	r0, #0
 8008504:	d0de      	beq.n	80084c4 <JPEG_DMA_StartProcess+0x38>
 8008506:	e7d8      	b.n	80084ba <JPEG_DMA_StartProcess+0x2e>
 8008508:	08008a4b 	.word	0x08008a4b
 800850c:	08008947 	.word	0x08008947
 8008510:	08008f09 	.word	0x08008f09
 8008514:	08008efb 	.word	0x08008efb

08008518 <HAL_JPEG_Init>:
{
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800851a:	4605      	mov	r5, r0
 800851c:	2800      	cmp	r0, #0
 800851e:	f000 80f2 	beq.w	8008706 <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8008522:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8008526:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800852a:	b91b      	cbnz	r3, 8008534 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800852c:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8008530:	f7f8 ffb6 	bl	80014a0 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8008534:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8008536:	2302      	movs	r3, #2
 8008538:	4a86      	ldr	r2, [pc, #536]	@ (8008754 <HAL_JPEG_Init+0x23c>)
 800853a:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800853e:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 8008542:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008544:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 8008548:	f043 0301 	orr.w	r3, r3, #1
 800854c:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	f023 0301 	bic.w	r3, r3, #1
 8008554:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008556:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008558:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800855c:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800855e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008560:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008564:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8008566:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800856c:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800856e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008570:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008574:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8008576:	4b78      	ldr	r3, [pc, #480]	@ (8008758 <HAL_JPEG_Init+0x240>)
 8008578:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800857a:	4b78      	ldr	r3, [pc, #480]	@ (800875c <HAL_JPEG_Init+0x244>)
 800857c:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800857e:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8008580:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008584:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 8008586:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008588:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800858a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800858c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8008590:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8008592:	4333      	orrs	r3, r6
 8008594:	7c56      	ldrb	r6, [r2, #17]
 8008596:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800859a:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800859e:	4281      	cmp	r1, r0
 80085a0:	d1f0      	bne.n	8008584 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80085a2:	4b6f      	ldr	r3, [pc, #444]	@ (8008760 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80085a4:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 80085a8:	4a6e      	ldr	r2, [pc, #440]	@ (8008764 <HAL_JPEG_Init+0x24c>)
 80085aa:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80085ae:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 80085b2:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80085b6:	4610      	mov	r0, r2
 80085b8:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80085ba:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 80085be:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 80085c2:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80085c6:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 80085c8:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80085ca:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80085ce:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80085d0:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80085d4:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80085d8:	ea43 030c 	orr.w	r3, r3, ip
 80085dc:	f890 c011 	ldrb.w	ip, [r0, #17]
 80085e0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80085e4:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 80085e8:	42be      	cmp	r6, r7
 80085ea:	d1ec      	bne.n	80085c6 <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 80085ec:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80085f0:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 80085f4:	f36f 030f 	bfc	r3, #0, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80085f8:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 80085fc:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 8008600:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8008604:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8008608:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800860a:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800860e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008610:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8008614:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8008618:	4333      	orrs	r3, r6
 800861a:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 800861e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008622:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8008626:	4281      	cmp	r1, r0
 8008628:	d1ec      	bne.n	8008604 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 800862a:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800862e:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 8008632:	4a4d      	ldr	r2, [pc, #308]	@ (8008768 <HAL_JPEG_Init+0x250>)
 8008634:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 8008638:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800863a:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800863e:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8008642:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8008646:	4013      	ands	r3, r2
  *address = value;
 8008648:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800864c:	2301      	movs	r3, #1
 800864e:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 8008652:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8008656:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 800865a:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 800865e:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8008662:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8008664:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8008668:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 800866c:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8008670:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8008672:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8008676:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800867a:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800867e:	4b3b      	ldr	r3, [pc, #236]	@ (800876c <HAL_JPEG_Init+0x254>)
 8008680:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8008684:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8008688:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 800868c:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8008690:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8008692:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8008696:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 800869a:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800869e:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80086a0:	4a33      	ldr	r2, [pc, #204]	@ (8008770 <HAL_JPEG_Init+0x258>)
 80086a2:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80086a6:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 80086aa:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80086ae:	4b31      	ldr	r3, [pc, #196]	@ (8008774 <HAL_JPEG_Init+0x25c>)
 80086b0:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 80086b4:	4b30      	ldr	r3, [pc, #192]	@ (8008778 <HAL_JPEG_Init+0x260>)
 80086b6:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 80086ba:	4b30      	ldr	r3, [pc, #192]	@ (800877c <HAL_JPEG_Init+0x264>)
 80086bc:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 80086c0:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 80086c4:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80086c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 80086ca:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80086ce:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 80086d2:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80086d4:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80086d8:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80086da:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80086de:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80086e2:	4333      	orrs	r3, r6
 80086e4:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 80086e8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80086ec:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 80086f0:	4281      	cmp	r1, r0
 80086f2:	d1ec      	bne.n	80086ce <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80086f4:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 80086f8:	491a      	ldr	r1, [pc, #104]	@ (8008764 <HAL_JPEG_Init+0x24c>)
 80086fa:	4628      	mov	r0, r5
 80086fc:	f7ff fe13 	bl	8008326 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8008700:	b118      	cbz	r0, 800870a <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8008702:	2301      	movs	r3, #1
 8008704:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 8008706:	2001      	movs	r0, #1
}
 8008708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800870a:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 800870e:	4918      	ldr	r1, [pc, #96]	@ (8008770 <HAL_JPEG_Init+0x258>)
 8008710:	4628      	mov	r0, r5
 8008712:	f7ff fe08 	bl	8008326 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8008716:	2800      	cmp	r0, #0
 8008718:	d1f3      	bne.n	8008702 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800871a:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 800871e:	490d      	ldr	r1, [pc, #52]	@ (8008754 <HAL_JPEG_Init+0x23c>)
 8008720:	4628      	mov	r0, r5
 8008722:	f7ff fdc8 	bl	80082b6 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8008726:	2800      	cmp	r0, #0
 8008728:	d1eb      	bne.n	8008702 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800872a:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 800872e:	4914      	ldr	r1, [pc, #80]	@ (8008780 <HAL_JPEG_Init+0x268>)
 8008730:	4628      	mov	r0, r5
 8008732:	f7ff fdc0 	bl	80082b6 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8008736:	2800      	cmp	r0, #0
 8008738:	d1e3      	bne.n	8008702 <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800873a:	6863      	ldr	r3, [r4, #4]
 800873c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008740:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008742:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8008744:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8008746:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008748:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800874c:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 800874e:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 8008750:	e7da      	b.n	8008708 <HAL_JPEG_Init+0x1f0>
 8008752:	bf00      	nop
 8008754:	080270fc 	.word	0x080270fc
 8008758:	08026efc 	.word	0x08026efc
 800875c:	08026ebc 	.word	0x08026ebc
 8008760:	0b0a0908 	.word	0x0b0a0908
 8008764:	0802702e 	.word	0x0802702e
 8008768:	ffff0000 	.word	0xffff0000
 800876c:	09080706 	.word	0x09080706
 8008770:	08026f7c 	.word	0x08026f7c
 8008774:	01000404 	.word	0x01000404
 8008778:	05070403 	.word	0x05070403
 800877c:	04040201 	.word	0x04040201
 8008780:	080270e0 	.word	0x080270e0

08008784 <HAL_JPEG_GetInfo>:
{
 8008784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8008788:	2800      	cmp	r0, #0
 800878a:	d06f      	beq.n	800886c <HAL_JPEG_GetInfo+0xe8>
 800878c:	2900      	cmp	r1, #0
 800878e:	d06d      	beq.n	800886c <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8008790:	6804      	ldr	r4, [r0, #0]
 8008792:	6863      	ldr	r3, [r4, #4]
 8008794:	f003 0303 	and.w	r3, r3, #3
 8008798:	2b02      	cmp	r3, #2
 800879a:	d047      	beq.n	800882c <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800879c:	6863      	ldr	r3, [r4, #4]
 800879e:	f013 0303 	ands.w	r3, r3, #3
 80087a2:	d005      	beq.n	80087b0 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80087a4:	6863      	ldr	r3, [r4, #4]
 80087a6:	f003 0303 	and.w	r3, r3, #3
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	d15e      	bne.n	800886c <HAL_JPEG_GetInfo+0xe8>
 80087ae:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80087b0:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80087b2:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80087b4:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80087b8:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80087ba:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80087bc:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80087be:	68e2      	ldr	r2, [r4, #12]
 80087c0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80087c4:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80087c6:	d13c      	bne.n	8008842 <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80087c8:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80087ca:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80087cc:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80087d0:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80087d2:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80087d4:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80087d6:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80087da:	d129      	bne.n	8008830 <HAL_JPEG_GetInfo+0xac>
 80087dc:	4313      	orrs	r3, r2
 80087de:	f013 0f0f 	tst.w	r3, #15
 80087e2:	bf0c      	ite	eq
 80087e4:	2301      	moveq	r3, #1
 80087e6:	2300      	movne	r3, #0
 80087e8:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80087ea:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 80087ec:	2300      	movs	r3, #0
 80087ee:	3450      	adds	r4, #80	@ 0x50
 80087f0:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8008870 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 80087f4:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80087f6:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 80087fa:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 80087fe:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 8008802:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 8008806:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8008808:	fa29 f206 	lsr.w	r2, r9, r6
 800880c:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800880e:	2a01      	cmp	r2, #1
 8008810:	d119      	bne.n	8008846 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 8008812:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 8008814:	3608      	adds	r6, #8
 8008816:	3701      	adds	r7, #1
 8008818:	2e20      	cmp	r6, #32
 800881a:	d1f5      	bne.n	8008808 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 800881c:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800881e:	2d40      	cmp	r5, #64	@ 0x40
 8008820:	d1ed      	bne.n	80087fe <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 8008822:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8008824:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8008826:	610b      	str	r3, [r1, #16]
}
 8008828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882c:	2310      	movs	r3, #16
 800882e:	e7bf      	b.n	80087b0 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008830:	2d03      	cmp	r5, #3
 8008832:	d106      	bne.n	8008842 <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008834:	4313      	orrs	r3, r2
 8008836:	f013 0f0f 	tst.w	r3, #15
 800883a:	bf0c      	ite	eq
 800883c:	2301      	moveq	r3, #1
 800883e:	2300      	movne	r3, #0
 8008840:	e7d3      	b.n	80087ea <HAL_JPEG_GetInfo+0x66>
 8008842:	2300      	movs	r3, #0
 8008844:	e7d1      	b.n	80087ea <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8008846:	fb0e fb02 	mul.w	fp, lr, r2
 800884a:	f897 a000 	ldrb.w	sl, [r7]
 800884e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008850:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8008854:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8008858:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 800885a:	bf8b      	itete	hi
 800885c:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 8008860:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8008864:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8008866:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800886a:	e7d3      	b.n	8008814 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 800886c:	2001      	movs	r0, #1
 800886e:	e7db      	b.n	8008828 <HAL_JPEG_GetInfo+0xa4>
 8008870:	08026f3c 	.word	0x08026f3c

08008874 <HAL_JPEG_Decode_DMA>:
{
 8008874:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8008876:	4604      	mov	r4, r0
 8008878:	b348      	cbz	r0, 80088ce <HAL_JPEG_Decode_DMA+0x5a>
 800887a:	b341      	cbz	r1, 80088ce <HAL_JPEG_Decode_DMA+0x5a>
 800887c:	b33b      	cbz	r3, 80088ce <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800887e:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 8008882:	2d01      	cmp	r5, #1
 8008884:	d028      	beq.n	80088d8 <HAL_JPEG_Decode_DMA+0x64>
 8008886:	2501      	movs	r5, #1
 8008888:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800888c:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 8008890:	2d01      	cmp	r5, #1
 8008892:	d11e      	bne.n	80088d2 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8008894:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 8008896:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8008898:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800889c:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800889e:	f025 050f 	bic.w	r5, r5, #15
 80088a2:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80088a4:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80088a6:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 80088aa:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80088ae:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 80088b0:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 80088b2:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 80088b4:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 80088b6:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 80088b8:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 80088ba:	f7ff fdac 	bl	8008416 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 80088be:	f7ff fde5 	bl	800848c <JPEG_DMA_StartProcess>
 80088c2:	b128      	cbz	r0, 80088d0 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80088c4:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 80088c6:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80088ca:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 80088ce:	2001      	movs	r0, #1
}
 80088d0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 80088d2:	2300      	movs	r3, #0
 80088d4:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 80088d8:	2002      	movs	r0, #2
 80088da:	e7f9      	b.n	80088d0 <HAL_JPEG_Decode_DMA+0x5c>

080088dc <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80088dc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80088de:	f003 030c 	and.w	r3, r3, #12
 80088e2:	2b0c      	cmp	r3, #12
 80088e4:	d10d      	bne.n	8008902 <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80088e6:	07cb      	lsls	r3, r1, #31
 80088e8:	d503      	bpl.n	80088f2 <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80088ea:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80088ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80088f0:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80088f2:	0789      	lsls	r1, r1, #30
 80088f4:	d503      	bpl.n	80088fe <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80088f6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80088f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80088fc:	6543      	str	r3, [r0, #84]	@ 0x54
}
 80088fe:	2000      	movs	r0, #0
 8008900:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008902:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008904:	f003 030c 	and.w	r3, r3, #12
 8008908:	2b08      	cmp	r3, #8
 800890a:	d1f8      	bne.n	80088fe <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800890c:	f011 0301 	ands.w	r3, r1, #1
 8008910:	d004      	beq.n	800891c <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008912:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008914:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008918:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800891a:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800891c:	078a      	lsls	r2, r1, #30
 800891e:	d505      	bpl.n	800892c <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008920:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008922:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008926:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800892a:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800892c:	6801      	ldr	r1, [r0, #0]
 800892e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008930:	ea22 0303 	bic.w	r3, r2, r3
 8008934:	630b      	str	r3, [r1, #48]	@ 0x30
 8008936:	e7e2      	b.n	80088fe <HAL_JPEG_Pause+0x22>

08008938 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8008938:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800893a:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800893c:	4770      	bx	lr

0800893e <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800893e:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8008940:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8008942:	4770      	bx	lr

08008944 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8008944:	4770      	bx	lr

08008946 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008946:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 8008948:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800894a:	6803      	ldr	r3, [r0, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	f022 0201 	bic.w	r2, r2, #1
 8008952:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008954:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008956:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800895a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 800895c:	2301      	movs	r3, #1
 800895e:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008962:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008964:	f043 0304 	orr.w	r3, r3, #4
 8008968:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 800896a:	f7fa f8f7 	bl	8002b5c <HAL_JPEG_ErrorCallback>
}
 800896e:	bd08      	pop	{r3, pc}

08008970 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008970:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8008972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008974:	4604      	mov	r4, r0
 8008976:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008978:	b922      	cbnz	r2, 8008984 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800897a:	2101      	movs	r1, #1
 800897c:	f7ff ffae 	bl	80088dc <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 8008980:	2200      	movs	r2, #0
 8008982:	e004      	b.n	800898e <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008984:	6a03      	ldr	r3, [r0, #32]
 8008986:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008988:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800898a:	d924      	bls.n	80089d6 <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800898c:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800898e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008990:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8008994:	d11e      	bne.n	80089d4 <JPEG_ReadInputData+0x64>
 8008996:	b1ea      	cbz	r2, 80089d4 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 8008998:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800899c:	69a0      	ldr	r0, [r4, #24]
    nb_words = nb_bytes / 4UL;
 800899e:	ea4f 0692 	mov.w	r6, r2, lsr #2
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80089a2:	6821      	ldr	r1, [r4, #0]
    if (nb_words >= nbRequestWords)
 80089a4:	d826      	bhi.n	80089f4 <JPEG_ReadInputData+0x84>
        input_count = hjpeg->JpegInCount;
 80089a6:	6a27      	ldr	r7, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80089a8:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80089aa:	19c6      	adds	r6, r0, r7
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80089ac:	5dc7      	ldrb	r7, [r0, r7]
      for (index = 0; index < nbRequestWords; index++)
 80089ae:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80089b0:	78b2      	ldrb	r2, [r6, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80089b2:	f896 c001 	ldrb.w	ip, [r6, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80089b6:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80089ba:	78f6      	ldrb	r6, [r6, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80089bc:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80089c0:	ea42 0207 	orr.w	r2, r2, r7
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80089c4:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80089c8:	640a      	str	r2, [r1, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80089ca:	6a22      	ldr	r2, [r4, #32]
 80089cc:	f102 0204 	add.w	r2, r2, #4
 80089d0:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80089d2:	d1e8      	bne.n	80089a6 <JPEG_ReadInputData+0x36>
}
 80089d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d1d2      	bne.n	8008980 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80089da:	6a01      	ldr	r1, [r0, #32]
 80089dc:	f7fa f850 	bl	8002a80 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 80089e0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80089e2:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80089e4:	bf84      	itt	hi
 80089e6:	f023 0303 	bichi.w	r3, r3, #3
 80089ea:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 80089ec:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 80089ee:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 80089f0:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 80089f2:	e7cc      	b.n	800898e <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 80089f4:	2a03      	cmp	r2, #3
 80089f6:	d917      	bls.n	8008a28 <JPEG_ReadInputData+0xb8>
          input_count = hjpeg->JpegInCount;
 80089f8:	6a27      	ldr	r7, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80089fa:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80089fc:	19c5      	adds	r5, r0, r7
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80089fe:	5dc7      	ldrb	r7, [r0, r7]
        for (index = 0; index < nb_words; index++)
 8008a00:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008a02:	78aa      	ldrb	r2, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008a04:	f895 c001 	ldrb.w	ip, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008a08:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008a0c:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008a0e:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8008a12:	ea42 0207 	orr.w	r2, r2, r7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008a16:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008a1a:	640a      	str	r2, [r1, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8008a1c:	6a22      	ldr	r2, [r4, #32]
 8008a1e:	f102 0204 	add.w	r2, r2, #4
 8008a22:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008a24:	d8e8      	bhi.n	80089f8 <JPEG_ReadInputData+0x88>
 8008a26:	e7d5      	b.n	80089d4 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 8008a28:	461d      	mov	r5, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008a2a:	6a26      	ldr	r6, [r4, #32]
 8008a2c:	00ef      	lsls	r7, r5, #3
        for (index = 0; index < nb_bytes; index++)
 8008a2e:	3501      	adds	r5, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008a30:	5d86      	ldrb	r6, [r0, r6]
        for (index = 0; index < nb_bytes; index++)
 8008a32:	42aa      	cmp	r2, r5
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008a34:	fa06 f607 	lsl.w	r6, r6, r7
 8008a38:	ea43 0306 	orr.w	r3, r3, r6
          hjpeg->JpegInCount++;
 8008a3c:	6a26      	ldr	r6, [r4, #32]
 8008a3e:	f106 0601 	add.w	r6, r6, #1
 8008a42:	6226      	str	r6, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008a44:	d1f1      	bne.n	8008a2a <JPEG_ReadInputData+0xba>
        hjpeg->Instance->DIR = dataword;
 8008a46:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8008a48:	e7c4      	b.n	80089d4 <JPEG_ReadInputData+0x64>

08008a4a <JPEG_MDMAInCpltCallback>:
{
 8008a4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008a4c:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008a4e:	6822      	ldr	r2, [r4, #0]
 8008a50:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008a52:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8008a56:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8008a58:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008a5a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008a5e:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 8008a62:	041b      	lsls	r3, r3, #16
 8008a64:	0c1b      	lsrs	r3, r3, #16
 8008a66:	2b0c      	cmp	r3, #12
 8008a68:	d11a      	bne.n	8008aa0 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008a6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008a6c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008a6e:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008a70:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008a72:	695a      	ldr	r2, [r3, #20]
 8008a74:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008a76:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8008a7a:	1a9b      	subs	r3, r3, r2
 8008a7c:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008a7e:	6a21      	ldr	r1, [r4, #32]
 8008a80:	f7f9 fffe 	bl	8002a80 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8008a84:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008a86:	42ab      	cmp	r3, r5
 8008a88:	d327      	bcc.n	8008ada <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 8008a8a:	b95d      	cbnz	r5, 8008aa4 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008a8c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 8008a8e:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008a90:	f043 0304 	orr.w	r3, r3, #4
 8008a94:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008a96:	2306      	movs	r3, #6
 8008a98:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8008a9c:	f7fa f85e 	bl	8002b5c <HAL_JPEG_ErrorCallback>
}
 8008aa0:	b003      	add	sp, #12
 8008aa2:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8008aa4:	fbb3 f2f5 	udiv	r2, r3, r5
 8008aa8:	fb05 3212 	mls	r2, r5, r2, r3
 8008aac:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8008aae:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8008ab0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008ab2:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8008ab4:	04db      	lsls	r3, r3, #19
 8008ab6:	d40a      	bmi.n	8008ace <JPEG_MDMAInCpltCallback+0x84>
 8008ab8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008aba:	b143      	cbz	r3, 8008ace <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008abc:	2101      	movs	r1, #1
 8008abe:	3240      	adds	r2, #64	@ 0x40
 8008ac0:	9100      	str	r1, [sp, #0]
 8008ac2:	69a1      	ldr	r1, [r4, #24]
 8008ac4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008ac6:	f000 fd22 	bl	800950e <HAL_MDMA_Start_IT>
 8008aca:	2800      	cmp	r0, #0
 8008acc:	d1de      	bne.n	8008a8c <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008ace:	6822      	ldr	r2, [r4, #0]
 8008ad0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008ad2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008ad6:	6313      	str	r3, [r2, #48]	@ 0x30
 8008ad8:	e7e2      	b.n	8008aa0 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0e8      	beq.n	8008ab0 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8008ade:	079a      	lsls	r2, r3, #30
 8008ae0:	d0e6      	beq.n	8008ab0 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8008ae2:	f023 0303 	bic.w	r3, r3, #3
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	e7e1      	b.n	8008aae <JPEG_MDMAInCpltCallback+0x64>

08008aea <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008aea:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8008aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008aee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008af2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 8008af4:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d32a      	bcc.n	8008b50 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 8008afa:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8008afc:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 8008afe:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008b00:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 8008b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 8008b04:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008b06:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008b08:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008b0a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008b0c:	69e0      	ldr	r0, [r4, #28]
 8008b0e:	4428      	add	r0, r5
 8008b10:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8008b14:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008b16:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008b18:	69e0      	ldr	r0, [r4, #28]
 8008b1a:	4428      	add	r0, r5
 8008b1c:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008b20:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008b24:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008b26:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008b28:	69e0      	ldr	r0, [r4, #28]
 8008b2a:	4428      	add	r0, r5
 8008b2c:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 8008b2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008b30:	f103 0304 	add.w	r3, r3, #4
 8008b34:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8008b36:	d1e1      	bne.n	8008afc <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008b38:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008b3a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d106      	bne.n	8008b4e <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008b40:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008b42:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008b44:	4620      	mov	r0, r4
 8008b46:	f7f9 ffb9 	bl	8002abc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8008b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8008b50:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d9fb      	bls.n	8008b4e <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8008b56:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8008b58:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 8008b5e:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008b60:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 8008b62:	d105      	bne.n	8008b70 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008b64:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008b66:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008b68:	429f      	cmp	r7, r3
 8008b6a:	d119      	bne.n	8008ba0 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008b6c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008b6e:	e7e9      	b.n	8008b44 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 8008b70:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 8008b72:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 8008b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008b76:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008b78:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008b7a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008b7c:	69e1      	ldr	r1, [r4, #28]
 8008b7e:	4429      	add	r1, r5
 8008b80:	0a1d      	lsrs	r5, r3, #8
 8008b82:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008b84:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008b86:	69e1      	ldr	r1, [r4, #28]
 8008b88:	4429      	add	r1, r5
 8008b8a:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008b8c:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008b8e:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008b90:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008b92:	69e1      	ldr	r1, [r4, #28]
 8008b94:	4429      	add	r1, r5
 8008b96:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 8008b98:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8008b9e:	e7de      	b.n	8008b5e <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8008ba0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008ba2:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8008ba4:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8008ba6:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 8008ba8:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 8008baa:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008bac:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 8008bae:	d114      	bne.n	8008bda <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008bb0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f7f9 ff82 	bl	8002abc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8008bbc:	1d2b      	adds	r3, r5, #4
 8008bbe:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 8008bc0:	2b03      	cmp	r3, #3
 8008bc2:	d8c4      	bhi.n	8008b4e <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008bc4:	00da      	lsls	r2, r3, #3
 8008bc6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008bc8:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 8008bca:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008bcc:	fa26 f202 	lsr.w	r2, r6, r2
 8008bd0:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 8008bd2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008bd4:	3201      	adds	r2, #1
 8008bd6:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8008bd8:	e7f2      	b.n	8008bc0 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008bda:	f002 0303 	and.w	r3, r2, #3
 8008bde:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008be2:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008be4:	00db      	lsls	r3, r3, #3
 8008be6:	fa26 f303 	lsr.w	r3, r6, r3
 8008bea:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 8008bee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008bf4:	e7d9      	b.n	8008baa <JPEG_StoreOutputData+0xc0>

08008bf6 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008bf6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008bf8:	f003 0303 	and.w	r3, r3, #3
 8008bfc:	2b02      	cmp	r3, #2
{
 8008bfe:	b510      	push	{r4, lr}
 8008c00:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008c02:	d114      	bne.n	8008c2e <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8008c04:	6803      	ldr	r3, [r0, #0]
 8008c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c08:	065b      	lsls	r3, r3, #25
 8008c0a:	d510      	bpl.n	8008c2e <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8008c0c:	1d01      	adds	r1, r0, #4
 8008c0e:	f7ff fdb9 	bl	8008784 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8008c12:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008c14:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8008c16:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008c18:	f7f9 fefc 	bl	8002a14 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c24:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8008c26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c2c:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8008c2e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008c30:	04d9      	lsls	r1, r3, #19
 8008c32:	d407      	bmi.n	8008c44 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c38:	0792      	lsls	r2, r2, #30
 8008c3a:	d544      	bpl.n	8008cc6 <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8008c3c:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f7ff fe96 	bl	8008970 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008c44:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008c46:	0499      	lsls	r1, r3, #18
 8008c48:	d407      	bmi.n	8008c5a <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c4e:	0712      	lsls	r2, r2, #28
 8008c50:	d53e      	bpl.n	8008cd0 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8008c52:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 8008c54:	4620      	mov	r0, r4
 8008c56:	f7ff ff48 	bl	8008aea <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c5e:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8008c62:	2a20      	cmp	r2, #32
 8008c64:	d13c      	bne.n	8008ce0 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	f022 0201 	bic.w	r2, r2, #1
 8008c6c:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008c6e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c70:	f002 020c 	and.w	r2, r2, #12
 8008c74:	2a08      	cmp	r2, #8
 8008c76:	d103      	bne.n	8008c80 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008c78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c7a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008c7e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008c80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c82:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008c86:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8008c88:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008c8a:	b133      	cbz	r3, 8008c9a <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008c8c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008c8e:	4620      	mov	r0, r4
 8008c90:	69e1      	ldr	r1, [r4, #28]
 8008c92:	f7f9 ff13 	bl	8002abc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8008c9a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008c9c:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008c9e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008ca0:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008ca4:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008ca8:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008caa:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008cac:	f04f 0200 	mov.w	r2, #0
 8008cb0:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008cb4:	f04f 0201 	mov.w	r2, #1
 8008cb8:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008cbc:	d10d      	bne.n	8008cda <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008cbe:	f7f9 ff4f 	bl	8002b60 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 8008cc2:	2001      	movs	r0, #1
}
 8008cc4:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8008cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cc8:	0758      	lsls	r0, r3, #29
 8008cca:	d5bb      	bpl.n	8008c44 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 8008ccc:	2101      	movs	r1, #1
 8008cce:	e7b6      	b.n	8008c3e <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8008cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cd2:	06db      	lsls	r3, r3, #27
 8008cd4:	d5c1      	bpl.n	8008c5a <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	e7bc      	b.n	8008c54 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008cda:	f7ff fe33 	bl	8008944 <HAL_JPEG_EncodeCpltCallback>
 8008cde:	e7f0      	b.n	8008cc2 <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	e7ef      	b.n	8008cc4 <JPEG_Process+0xce>

08008ce4 <JPEG_DMA_PollResidualData>:
{
 8008ce4:	b570      	push	{r4, r5, r6, lr}
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008cea:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8008cec:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008cee:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 8008cf2:	d122      	bne.n	8008d3a <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8008cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cf6:	06d0      	lsls	r0, r2, #27
 8008cf8:	d51f      	bpl.n	8008d3a <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 8008cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8008cfc:	69e1      	ldr	r1, [r4, #28]
 8008cfe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008d00:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8008d02:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008d04:	69e2      	ldr	r2, [r4, #28]
 8008d06:	440a      	add	r2, r1
 8008d08:	0a19      	lsrs	r1, r3, #8
 8008d0a:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8008d0c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008d0e:	69e2      	ldr	r2, [r4, #28]
 8008d10:	440a      	add	r2, r1
 8008d12:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8008d14:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8008d16:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8008d18:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008d1a:	69e2      	ldr	r2, [r4, #28]
 8008d1c:	440a      	add	r2, r1
 8008d1e:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 8008d20:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008d22:	3304      	adds	r3, #4
 8008d24:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8008d26:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008d28:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d105      	bne.n	8008d3a <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008d2e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008d30:	4620      	mov	r0, r4
 8008d32:	69e1      	ldr	r1, [r4, #28]
 8008d34:	f7f9 fec2 	bl	8002abc <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 8008d38:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8008d3a:	3e01      	subs	r6, #1
 8008d3c:	d1d5      	bne.n	8008cea <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8008d3e:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 8008d40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8008d42:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008d44:	06c9      	lsls	r1, r1, #27
 8008d46:	d501      	bpl.n	8008d4c <JPEG_DMA_PollResidualData+0x68>
 8008d48:	0492      	lsls	r2, r2, #18
 8008d4a:	d420      	bmi.n	8008d8e <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	f022 0201 	bic.w	r2, r2, #1
 8008d52:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8008d54:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008d56:	b133      	cbz	r3, 8008d66 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008d58:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	69e1      	ldr	r1, [r4, #28]
 8008d5e:	f7f9 fead 	bl	8002abc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008d62:	2300      	movs	r3, #0
 8008d64:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8008d66:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008d68:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008d6a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008d6c:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008d70:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008d74:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008d76:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008d78:	f04f 0200 	mov.w	r2, #0
 8008d7c:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008d80:	f04f 0201 	mov.w	r2, #1
 8008d84:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008d88:	d102      	bne.n	8008d90 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008d8a:	f7f9 fee9 	bl	8002b60 <HAL_JPEG_DecodeCpltCallback>
}
 8008d8e:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008d90:	f7ff fdd8 	bl	8008944 <HAL_JPEG_EncodeCpltCallback>
}
 8008d94:	e7fb      	b.n	8008d8e <JPEG_DMA_PollResidualData+0xaa>

08008d96 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8008d96:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008d98:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 8008d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d9e:	4604      	mov	r4, r0
 8008da0:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8008da2:	d014      	beq.n	8008dce <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008da4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008da6:	f003 030c 	and.w	r3, r3, #12
 8008daa:	2b0c      	cmp	r3, #12
 8008dac:	d146      	bne.n	8008e3c <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008dae:	07cb      	lsls	r3, r1, #31
 8008db0:	d520      	bpl.n	8008df4 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8008db2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008db4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008db8:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008dba:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8008dbc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 8008dbe:	b941      	cbnz	r1, 8008dd2 <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008dc0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008dc2:	f043 0304 	orr.w	r3, r3, #4
 8008dc6:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008dc8:	2306      	movs	r3, #6
 8008dca:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8008dce:	2001      	movs	r0, #1
 8008dd0:	e01d      	b.n	8008e0e <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 8008dd2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008dd4:	fbb3 f2f1 	udiv	r2, r3, r1
 8008dd8:	fb01 3212 	mls	r2, r1, r2, r3
 8008ddc:	1a9b      	subs	r3, r3, r2
 8008dde:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 8008de0:	b143      	cbz	r3, 8008df4 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008de2:	6822      	ldr	r2, [r4, #0]
 8008de4:	2101      	movs	r1, #1
 8008de6:	3240      	adds	r2, #64	@ 0x40
 8008de8:	9100      	str	r1, [sp, #0]
 8008dea:	69a1      	ldr	r1, [r4, #24]
 8008dec:	f000 fb8f 	bl	800950e <HAL_MDMA_Start_IT>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d1e5      	bne.n	8008dc0 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008df4:	07a8      	lsls	r0, r5, #30
 8008df6:	d509      	bpl.n	8008e0c <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008df8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008dfa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008dfe:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8008e00:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008e02:	0419      	lsls	r1, r3, #16
 8008e04:	d505      	bpl.n	8008e12 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 8008e06:	4620      	mov	r0, r4
 8008e08:	f7ff ff6c 	bl	8008ce4 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 8008e0c:	2000      	movs	r0, #0
}
 8008e0e:	b003      	add	sp, #12
 8008e10:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8008e12:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008e14:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 8008e16:	2900      	cmp	r1, #0
 8008e18:	d0d2      	beq.n	8008dc0 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8008e1a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008e1c:	fbb3 f2f1 	udiv	r2, r3, r1
 8008e20:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008e24:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8008e26:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008e28:	2201      	movs	r2, #1
 8008e2a:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8008e2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008e2e:	9200      	str	r2, [sp, #0]
 8008e30:	69e2      	ldr	r2, [r4, #28]
 8008e32:	f000 fb6c 	bl	800950e <HAL_MDMA_Start_IT>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d0e8      	beq.n	8008e0c <HAL_JPEG_Resume+0x76>
 8008e3a:	e7c1      	b.n	8008dc0 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008e3c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008e3e:	f003 030c 	and.w	r3, r3, #12
 8008e42:	2b08      	cmp	r3, #8
 8008e44:	d1e2      	bne.n	8008e0c <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008e46:	f011 0301 	ands.w	r3, r1, #1
 8008e4a:	d004      	beq.n	8008e56 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8008e4c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008e4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e52:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008e54:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008e56:	07aa      	lsls	r2, r5, #30
 8008e58:	d505      	bpl.n	8008e66 <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008e5a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008e5c:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008e60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e64:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 8008e66:	6821      	ldr	r1, [r4, #0]
 8008e68:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	630b      	str	r3, [r1, #48]	@ 0x30
 8008e6e:	e7cd      	b.n	8008e0c <HAL_JPEG_Resume+0x76>

08008e70 <JPEG_DMA_EndProcess>:
{
 8008e70:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008e72:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 8008e74:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008e76:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8008e84:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d105      	bne.n	8008e96 <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008e8a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8008e8c:	69c1      	ldr	r1, [r0, #28]
 8008e8e:	f7f9 fe15 	bl	8002abc <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 8008e9a:	f015 0510 	ands.w	r5, r5, #16
 8008e9e:	d124      	bne.n	8008eea <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 8008ea0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008ea2:	b12b      	cbz	r3, 8008eb0 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008ea4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	69e1      	ldr	r1, [r4, #28]
 8008eaa:	f7f9 fe07 	bl	8002abc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008eae:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008eb0:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008eb2:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008eb4:	6813      	ldr	r3, [r2, #0]
 8008eb6:	f023 0301 	bic.w	r3, r3, #1
 8008eba:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8008ebc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008ebe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008ec0:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008ec4:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008ec8:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008eca:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008ecc:	f04f 0200 	mov.w	r2, #0
 8008ed0:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008ed4:	f04f 0201 	mov.w	r2, #1
 8008ed8:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008edc:	d102      	bne.n	8008ee4 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008ede:	f7f9 fe3f 	bl	8002b60 <HAL_JPEG_DecodeCpltCallback>
}
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008ee4:	f7ff fd2e 	bl	8008944 <HAL_JPEG_EncodeCpltCallback>
 8008ee8:	e7fb      	b.n	8008ee2 <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008eea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008eec:	049b      	lsls	r3, r3, #18
 8008eee:	d4f8      	bmi.n	8008ee2 <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 8008ef0:	4620      	mov	r0, r4
}
 8008ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 8008ef6:	f7ff bef5 	b.w	8008ce4 <JPEG_DMA_PollResidualData>

08008efa <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008efa:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8008efc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008efe:	041b      	lsls	r3, r3, #16
 8008f00:	d501      	bpl.n	8008f06 <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 8008f02:	f7ff bfb5 	b.w	8008e70 <JPEG_DMA_EndProcess>
}
 8008f06:	4770      	bx	lr

08008f08 <JPEG_MDMAOutCpltCallback>:
{
 8008f08:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008f0a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f10:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008f14:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8008f16:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f18:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 8008f1c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8008f20:	0412      	lsls	r2, r2, #16
 8008f22:	0c12      	lsrs	r2, r2, #16
 8008f24:	2a0c      	cmp	r2, #12
 8008f26:	d125      	bne.n	8008f74 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8008f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f2a:	069a      	lsls	r2, r3, #26
 8008f2c:	d424      	bmi.n	8008f78 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008f2e:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008f30:	4620      	mov	r0, r4
 8008f32:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008f34:	695a      	ldr	r2, [r3, #20]
 8008f36:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008f38:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8008f3c:	1a9b      	subs	r3, r3, r2
 8008f3e:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008f40:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008f42:	f7f9 fdbb 	bl	8002abc <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008f46:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008f48:	049b      	lsls	r3, r3, #18
 8008f4a:	d415      	bmi.n	8008f78 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008f4c:	6821      	ldr	r1, [r4, #0]
 8008f4e:	2301      	movs	r3, #1
 8008f50:	3144      	adds	r1, #68	@ 0x44
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008f56:	69e2      	ldr	r2, [r4, #28]
 8008f58:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008f5a:	f000 fad8 	bl	800950e <HAL_MDMA_Start_IT>
 8008f5e:	b158      	cbz	r0, 8008f78 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008f60:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 8008f62:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008f64:	f043 0304 	orr.w	r3, r3, #4
 8008f68:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008f6a:	2306      	movs	r3, #6
 8008f6c:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8008f70:	f7f9 fdf4 	bl	8002b5c <HAL_JPEG_ErrorCallback>
}
 8008f74:	b002      	add	sp, #8
 8008f76:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008f78:	6822      	ldr	r2, [r4, #0]
 8008f7a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008f7c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8008f82:	e7f7      	b.n	8008f74 <JPEG_MDMAOutCpltCallback+0x6c>

08008f84 <HAL_JPEG_IRQHandler>:
{
 8008f84:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 8008f86:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 8008f8a:	4604      	mov	r4, r0
  switch (hjpeg->State)
 8008f8c:	3b03      	subs	r3, #3
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d850      	bhi.n	8009034 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008f92:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008f94:	f003 030c 	and.w	r3, r3, #12
 8008f98:	2b08      	cmp	r3, #8
 8008f9a:	d103      	bne.n	8008fa4 <HAL_JPEG_IRQHandler+0x20>
}
 8008f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 8008fa0:	f7ff be29 	b.w	8008bf6 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008fa4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008fa6:	f003 030c 	and.w	r3, r3, #12
 8008faa:	2b0c      	cmp	r3, #12
 8008fac:	d142      	bne.n	8009034 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008fae:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008fb0:	f003 0303 	and.w	r3, r3, #3
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d114      	bne.n	8008fe2 <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8008fb8:	6803      	ldr	r3, [r0, #0]
 8008fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fbc:	0659      	lsls	r1, r3, #25
 8008fbe:	d510      	bpl.n	8008fe2 <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8008fc0:	1d01      	adds	r1, r0, #4
 8008fc2:	f7ff fbdf 	bl	8008784 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8008fc6:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008fc8:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8008fca:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008fcc:	f7f9 fd22 	bl	8002a14 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008fd8:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8008fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fe0:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fe6:	0692      	lsls	r2, r2, #26
 8008fe8:	d524      	bpl.n	8009034 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8008fea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8008fec:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8008fee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ff2:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	f022 0201 	bic.w	r2, r2, #1
 8008ffa:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008ffc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ffe:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009002:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009006:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800900a:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800900c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009010:	2b02      	cmp	r3, #2
 8009012:	d101      	bne.n	8009018 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8009014:	f000 fac4 	bl	80095a0 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8009018:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800901a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800901e:	2b02      	cmp	r3, #2
 8009020:	d103      	bne.n	800902a <HAL_JPEG_IRQHandler+0xa6>
}
 8009022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8009026:	f000 babb 	b.w	80095a0 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800902a:	4620      	mov	r0, r4
}
 800902c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 8009030:	f7ff bf1e 	b.w	8008e70 <JPEG_DMA_EndProcess>
}
 8009034:	bd10      	pop	{r4, pc}
	...

08009038 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009038:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800903a:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800903c:	3284      	adds	r2, #132	@ 0x84
 800903e:	1883      	adds	r3, r0, r2
{
 8009040:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009042:	68c7      	ldr	r7, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009044:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009046:	684c      	ldr	r4, [r1, #4]
 8009048:	f3c7 470b 	ubfx	r7, r7, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800904c:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009050:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009052:	4427      	add	r7, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009054:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009056:	f106 0c01 	add.w	ip, r6, #1
 800905a:	68c5      	ldr	r5, [r0, #12]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800905c:	1ba4      	subs	r4, r4, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800905e:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8009062:	4465      	add	r5, ip
 8009064:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009068:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800906a:	68c7      	ldr	r7, [r0, #12]
 800906c:	68cd      	ldr	r5, [r1, #12]
 800906e:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8009072:	442f      	add	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009074:	689d      	ldr	r5, [r3, #8]
 8009076:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800907a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800907c:	688d      	ldr	r5, [r1, #8]
 800907e:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8009082:	3501      	adds	r5, #1
 8009084:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 8009088:	4465      	add	r5, ip
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800908a:	f8d1 c010 	ldr.w	ip, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800908e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009092:	698f      	ldr	r7, [r1, #24]
 8009094:	f1bc 0f07 	cmp.w	ip, #7
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009098:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800909a:	691d      	ldr	r5, [r3, #16]
 800909c:	f025 0507 	bic.w	r5, r5, #7
 80090a0:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80090a2:	f8c3 c010 	str.w	ip, [r3, #16]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80090a6:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80090aa:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80090ae:	f891 7031 	ldrb.w	r7, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80090b2:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80090b6:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80090ba:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80090be:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80090c0:	695d      	ldr	r5, [r3, #20]
 80090c2:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 80090c6:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80090c8:	694d      	ldr	r5, [r1, #20]
 80090ca:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80090cc:	69dd      	ldr	r5, [r3, #28]
 80090ce:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 80090d2:	f025 0507 	bic.w	r5, r5, #7
 80090d6:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80090d8:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80090dc:	ea45 0507 	orr.w	r5, r5, r7
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80090e0:	bf88      	it	hi
 80090e2:	2701      	movhi	r7, #1
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80090e4:	61dd      	str	r5, [r3, #28]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80090e6:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80090e8:	629d      	str	r5, [r3, #40]	@ 0x28
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80090ea:	bf9c      	itt	ls
 80090ec:	4d0c      	ldrls	r5, [pc, #48]	@ (8009120 <LTDC_SetConfig+0xe8>)
 80090ee:	f815 700c 	ldrbls.w	r7, [r5, ip]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80090f2:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80090f4:	437c      	muls	r4, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80090f6:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80090fa:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80090fc:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80090fe:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009100:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8009102:	437d      	muls	r5, r7
 8009104:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009108:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800910a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800910c:	f36f 040a 	bfc	r4, #0, #11
 8009110:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009112:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009114:	5883      	ldr	r3, [r0, r2]
 8009116:	f043 0301 	orr.w	r3, r3, #1
 800911a:	5083      	str	r3, [r0, r2]
}
 800911c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800911e:	bf00      	nop
 8009120:	08027118 	.word	0x08027118

08009124 <HAL_LTDC_Init>:
{
 8009124:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8009126:	4604      	mov	r4, r0
 8009128:	2800      	cmp	r0, #0
 800912a:	d04e      	beq.n	80091ca <HAL_LTDC_Init+0xa6>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800912c:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8009130:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009134:	b91b      	cbnz	r3, 800913e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8009136:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800913a:	f7f8 fa37 	bl	80015ac <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800913e:	2302      	movs	r3, #2
 8009140:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009144:	6823      	ldr	r3, [r4, #0]
 8009146:	699a      	ldr	r2, [r3, #24]
 8009148:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800914c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800914e:	6999      	ldr	r1, [r3, #24]
 8009150:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8009154:	4302      	orrs	r2, r0
 8009156:	68e0      	ldr	r0, [r4, #12]
 8009158:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800915a:	6920      	ldr	r0, [r4, #16]
 800915c:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800915e:	430a      	orrs	r2, r1
 8009160:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8009162:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 8009166:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800916a:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800916c:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8009170:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009174:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8009176:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 800917a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800917e:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009180:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 8009184:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009188:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800918a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800918c:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009190:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009194:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009198:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800919a:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800919c:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 80091a0:	432a      	orrs	r2, r5
 80091a2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80091a6:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80091a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80091ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80091ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091b0:	f042 0206 	orr.w	r2, r2, #6
 80091b4:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80091b6:	699a      	ldr	r2, [r3, #24]
 80091b8:	f042 0201 	orr.w	r2, r2, #1
 80091bc:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80091be:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80091c0:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80091c4:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 80091c8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80091ca:	2001      	movs	r0, #1
 80091cc:	e7fc      	b.n	80091c8 <HAL_LTDC_Init+0xa4>

080091ce <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 80091ce:	4770      	bx	lr

080091d0 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 80091d0:	4770      	bx	lr

080091d2 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 80091d2:	4770      	bx	lr

080091d4 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80091d4:	6803      	ldr	r3, [r0, #0]
{
 80091d6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80091d8:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 80091da:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80091dc:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80091de:	0772      	lsls	r2, r6, #29
 80091e0:	d514      	bpl.n	800920c <HAL_LTDC_IRQHandler+0x38>
 80091e2:	0769      	lsls	r1, r5, #29
 80091e4:	d512      	bpl.n	800920c <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80091e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091e8:	f022 0204 	bic.w	r2, r2, #4
 80091ec:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80091ee:	2204      	movs	r2, #4
 80091f0:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80091f2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80091f6:	f043 0301 	orr.w	r3, r3, #1
 80091fa:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 80091fe:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009200:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009204:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8009208:	f7ff ffe1 	bl	80091ce <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800920c:	07b2      	lsls	r2, r6, #30
 800920e:	d516      	bpl.n	800923e <HAL_LTDC_IRQHandler+0x6a>
 8009210:	07ab      	lsls	r3, r5, #30
 8009212:	d514      	bpl.n	800923e <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009214:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8009216:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800921a:	f022 0202 	bic.w	r2, r2, #2
 800921e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009220:	2202      	movs	r2, #2
 8009222:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009224:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8009228:	4313      	orrs	r3, r2
 800922a:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800922e:	2304      	movs	r3, #4
 8009230:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009234:	2300      	movs	r3, #0
 8009236:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800923a:	f7ff ffc8 	bl	80091ce <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800923e:	07f0      	lsls	r0, r6, #31
 8009240:	d510      	bpl.n	8009264 <HAL_LTDC_IRQHandler+0x90>
 8009242:	07e9      	lsls	r1, r5, #31
 8009244:	d50e      	bpl.n	8009264 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009246:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8009248:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800924a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800924c:	f022 0201 	bic.w	r2, r2, #1
 8009250:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009252:	2201      	movs	r2, #1
 8009254:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8009256:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8009258:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800925c:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8009260:	f7ff ffb6 	bl	80091d0 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009264:	0732      	lsls	r2, r6, #28
 8009266:	d511      	bpl.n	800928c <HAL_LTDC_IRQHandler+0xb8>
 8009268:	072b      	lsls	r3, r5, #28
 800926a:	d50f      	bpl.n	800928c <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800926c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800926e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009272:	f022 0208 	bic.w	r2, r2, #8
 8009276:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009278:	2208      	movs	r2, #8
 800927a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800927c:	2301      	movs	r3, #1
 800927e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009282:	2300      	movs	r3, #0
 8009284:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009288:	f7ff ffa3 	bl	80091d2 <HAL_LTDC_ReloadEventCallback>
}
 800928c:	bd70      	pop	{r4, r5, r6, pc}

0800928e <HAL_LTDC_ConfigLayer>:
{
 800928e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8009292:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 8009296:	4606      	mov	r6, r0
 8009298:	460f      	mov	r7, r1
 800929a:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800929c:	2b01      	cmp	r3, #1
 800929e:	f04f 0002 	mov.w	r0, #2
 80092a2:	d01f      	beq.n	80092e4 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80092a4:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 80092a6:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80092aa:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80092ac:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80092b0:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80092b4:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80092b8:	3438      	adds	r4, #56	@ 0x38
 80092ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80092bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80092be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80092c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80092c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80092c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80092c6:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80092c8:	4630      	mov	r0, r6
 80092ca:	4662      	mov	r2, ip
 80092cc:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80092ce:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80092d0:	f7ff feb2 	bl	8009038 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80092d4:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80092d6:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80092d8:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80092dc:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80092e0:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 80092e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080092e8 <HAL_LTDC_SetPitch>:
{
 80092e8:	4603      	mov	r3, r0
 80092ea:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 80092ec:	f890 00a0 	ldrb.w	r0, [r0, #160]	@ 0xa0
 80092f0:	2801      	cmp	r0, #1
 80092f2:	f04f 0002 	mov.w	r0, #2
 80092f6:	d026      	beq.n	8009346 <HAL_LTDC_SetPitch+0x5e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80092f8:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80092fc:	2034      	movs	r0, #52	@ 0x34
 80092fe:	fb00 3002 	mla	r0, r0, r2, r3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8009302:	01d2      	lsls	r2, r2, #7
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8009304:	6c80      	ldr	r0, [r0, #72]	@ 0x48
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8009306:	3284      	adds	r2, #132	@ 0x84
 8009308:	2807      	cmp	r0, #7
 800930a:	bf96      	itet	ls
 800930c:	4c0e      	ldrls	r4, [pc, #56]	@ (8009348 <HAL_LTDC_SetPitch+0x60>)
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800930e:	2401      	movhi	r4, #1
 8009310:	5c24      	ldrbls	r4, [r4, r0]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8009312:	6818      	ldr	r0, [r3, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8009314:	434c      	muls	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8009316:	4402      	add	r2, r0
 8009318:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800931a:	f36f 401c 	bfc	r0, #16, #13
 800931e:	62d0      	str	r0, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8009320:	480a      	ldr	r0, [pc, #40]	@ (800934c <HAL_LTDC_SetPitch+0x64>)
 8009322:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8009324:	f045 0501 	orr.w	r5, r5, #1
 8009328:	6245      	str	r5, [r0, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800932a:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800932c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8009330:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8009332:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8009334:	f042 0201 	orr.w	r2, r2, #1
 8009338:	6242      	str	r2, [r0, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800933a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hltdc);
 800933c:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800933e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8009342:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 8009346:	bd30      	pop	{r4, r5, pc}
 8009348:	08027118 	.word	0x08027118
 800934c:	50001000 	.word	0x50001000

08009350 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8009350:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8009352:	6804      	ldr	r4, [r0, #0]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8009354:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8009358:	6965      	ldr	r5, [r4, #20]
 800935a:	f363 0510 	bfi	r5, r3, #0, #17
 800935e:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8009360:	9d03      	ldr	r5, [sp, #12]
 8009362:	6963      	ldr	r3, [r4, #20]
 8009364:	f105 35ff 	add.w	r5, r5, #4294967295
 8009368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800936c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8009370:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8009372:	f04f 031f 	mov.w	r3, #31
 8009376:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 8009378:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800937a:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800937c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800937e:	bf0c      	ite	eq
 8009380:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8009384:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8009388:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800938c:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800938e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009390:	bf0c      	ite	eq
 8009392:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8009396:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800939a:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800939c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800939e:	6263      	str	r3, [r4, #36]	@ 0x24
}
 80093a0:	bd30      	pop	{r4, r5, pc}

080093a2 <HAL_MDMA_Init>:
{
 80093a2:	b538      	push	{r3, r4, r5, lr}
 80093a4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80093a6:	f7fd f9a9 	bl	80066fc <HAL_GetTick>
 80093aa:	4605      	mov	r5, r0
  if(hmdma == NULL)
 80093ac:	2c00      	cmp	r4, #0
 80093ae:	d061      	beq.n	8009474 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 80093b0:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 80093b2:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 80093b4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80093b8:	2302      	movs	r3, #2
 80093ba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 80093be:	68d3      	ldr	r3, [r2, #12]
 80093c0:	f023 0301 	bic.w	r3, r3, #1
 80093c4:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	68da      	ldr	r2, [r3, #12]
 80093ca:	07d2      	lsls	r2, r2, #31
 80093cc:	d448      	bmi.n	8009460 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80093ce:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80093d6:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 80093da:	430a      	orrs	r2, r1
 80093dc:	69e1      	ldr	r1, [r4, #28]
 80093de:	430a      	orrs	r2, r1
 80093e0:	6a21      	ldr	r1, [r4, #32]
 80093e2:	430a      	orrs	r2, r1
 80093e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80093e6:	430a      	orrs	r2, r1
 80093e8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80093ea:	430a      	orrs	r2, r1
 80093ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80093ee:	430a      	orrs	r2, r1
 80093f0:	68a1      	ldr	r1, [r4, #8]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80093f6:	3901      	subs	r1, #1
 80093f8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80093fc:	6861      	ldr	r1, [r4, #4]
 80093fe:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009402:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8009404:	d103      	bne.n	800940e <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8009406:	691a      	ldr	r2, [r3, #16]
 8009408:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800940c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800940e:	2200      	movs	r2, #0
 8009410:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8009412:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009414:	2a00      	cmp	r2, #0
 8009416:	da04      	bge.n	8009422 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8009418:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800941a:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800941c:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8009420:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8009422:	b292      	uxth	r2, r2
 8009424:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8009426:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009428:	2a00      	cmp	r2, #0
 800942a:	da25      	bge.n	8009478 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800942c:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800942e:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8009430:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 8009434:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009436:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009438:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800943c:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009440:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8009442:	f04f 0200 	mov.w	r2, #0
 8009446:	d019      	beq.n	800947c <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8009448:	b2c9      	uxtb	r1, r1
 800944a:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800944c:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 800944e:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8009450:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 8009452:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 8009454:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8009456:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800945a:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 800945e:	e00a      	b.n	8009476 <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8009460:	f7fd f94c 	bl	80066fc <HAL_GetTick>
 8009464:	1b40      	subs	r0, r0, r5
 8009466:	2805      	cmp	r0, #5
 8009468:	d9ad      	bls.n	80093c6 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800946a:	2340      	movs	r3, #64	@ 0x40
 800946c:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800946e:	2303      	movs	r3, #3
 8009470:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8009474:	2001      	movs	r0, #1
}
 8009476:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009478:	6a18      	ldr	r0, [r3, #32]
 800947a:	e7dd      	b.n	8009438 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800947c:	629a      	str	r2, [r3, #40]	@ 0x28
 800947e:	e7e5      	b.n	800944c <HAL_MDMA_Init+0xaa>

08009480 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8009480:	b1d8      	cbz	r0, 80094ba <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 8009482:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8009484:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 8009486:	68d3      	ldr	r3, [r2, #12]
 8009488:	f023 0301 	bic.w	r3, r3, #1
 800948c:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800948e:	2300      	movs	r3, #0
 8009490:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8009492:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8009494:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8009496:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8009498:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800949a:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800949c:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800949e:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 80094a0:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 80094a2:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80094a4:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80094a6:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 80094a8:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 80094aa:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 80094ae:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 80094b2:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 80094b6:	4618      	mov	r0, r3
 80094b8:	4770      	bx	lr
    return HAL_ERROR;
 80094ba:	2001      	movs	r0, #1
}
 80094bc:	4770      	bx	lr

080094be <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 80094be:	4603      	mov	r3, r0
{
 80094c0:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 80094c2:	b300      	cbz	r0, 8009506 <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 80094c4:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 80094c8:	2801      	cmp	r0, #1
 80094ca:	d01e      	beq.n	800950a <HAL_MDMA_ConfigPostRequestMask+0x4c>
 80094cc:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80094ce:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 80094d2:	42a5      	cmp	r5, r4
 80094d4:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 80094d6:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80094da:	d112      	bne.n	8009502 <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 80094dc:	681c      	ldr	r4, [r3, #0]
 80094de:	6925      	ldr	r5, [r4, #16]
 80094e0:	006d      	lsls	r5, r5, #1
 80094e2:	d407      	bmi.n	80094f4 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 80094e4:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 80094e6:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80094e8:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 80094ea:	b939      	cbnz	r1, 80094fc <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80094ec:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 80094f0:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80094f2:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80094fa:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 80094fc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8009500:	e7f6      	b.n	80094f0 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 8009502:	4620      	mov	r0, r4
 8009504:	e7f6      	b.n	80094f4 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 8009506:	2001      	movs	r0, #1
 8009508:	e7f7      	b.n	80094fa <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 800950a:	2002      	movs	r0, #2
 800950c:	e7f5      	b.n	80094fa <HAL_MDMA_ConfigPostRequestMask+0x3c>

0800950e <HAL_MDMA_Start_IT>:
{
 800950e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 8009510:	4604      	mov	r4, r0
 8009512:	2800      	cmp	r0, #0
 8009514:	d042      	beq.n	800959c <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 8009516:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 800951a:	2d01      	cmp	r5, #1
 800951c:	d03c      	beq.n	8009598 <HAL_MDMA_Start_IT+0x8a>
 800951e:	2501      	movs	r5, #1
 8009520:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8009524:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 8009528:	2d01      	cmp	r5, #1
 800952a:	f04f 0500 	mov.w	r5, #0
 800952e:	d131      	bne.n	8009594 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8009530:	2602      	movs	r6, #2
 8009532:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8009536:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8009538:	6805      	ldr	r5, [r0, #0]
 800953a:	68ee      	ldr	r6, [r5, #12]
 800953c:	f026 0601 	bic.w	r6, r6, #1
 8009540:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8009542:	9e06      	ldr	r6, [sp, #24]
 8009544:	9600      	str	r6, [sp, #0]
 8009546:	f7ff ff03 	bl	8009350 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800954a:	68eb      	ldr	r3, [r5, #12]
 800954c:	f043 0306 	orr.w	r3, r3, #6
 8009550:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 8009552:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8009554:	b11b      	cbz	r3, 800955e <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8009556:	68eb      	ldr	r3, [r5, #12]
 8009558:	f043 0310 	orr.w	r3, r3, #16
 800955c:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800955e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009560:	b11b      	cbz	r3, 800956a <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8009562:	68eb      	ldr	r3, [r5, #12]
 8009564:	f043 0308 	orr.w	r3, r3, #8
 8009568:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800956a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800956c:	b11b      	cbz	r3, 8009576 <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800956e:	68eb      	ldr	r3, [r5, #12]
 8009570:	f043 0320 	orr.w	r3, r3, #32
 8009574:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 8009576:	68eb      	ldr	r3, [r5, #12]
 8009578:	f043 0301 	orr.w	r3, r3, #1
 800957c:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800957e:	6863      	ldr	r3, [r4, #4]
 8009580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009584:	d103      	bne.n	800958e <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8009586:	68eb      	ldr	r3, [r5, #12]
 8009588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800958c:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800958e:	2000      	movs	r0, #0
}
 8009590:	b002      	add	sp, #8
 8009592:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 8009594:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 8009598:	2002      	movs	r0, #2
 800959a:	e7f9      	b.n	8009590 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 800959c:	2001      	movs	r0, #1
 800959e:	e7f7      	b.n	8009590 <HAL_MDMA_Start_IT+0x82>

080095a0 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 80095a0:	b128      	cbz	r0, 80095ae <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80095a2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d003      	beq.n	80095b2 <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80095aa:	2380      	movs	r3, #128	@ 0x80
 80095ac:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 80095ae:	2001      	movs	r0, #1
 80095b0:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 80095b2:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80095b4:	2304      	movs	r3, #4
 80095b6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 80095ba:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 80095bc:	68d3      	ldr	r3, [r2, #12]
 80095be:	f023 0301 	bic.w	r3, r3, #1
 80095c2:	60d3      	str	r3, [r2, #12]
}
 80095c4:	4770      	bx	lr
	...

080095c8 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 80095c8:	2300      	movs	r3, #0
{
 80095ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 80095cc:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80095ce:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 80095d2:	4b58      	ldr	r3, [pc, #352]	@ (8009734 <HAL_MDMA_IRQHandler+0x16c>)
{
 80095d4:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80095d6:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80095d8:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80095da:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80095dc:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80095de:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 80095e2:	3a40      	subs	r2, #64	@ 0x40
 80095e4:	f3c2 1284 	ubfx	r2, r2, #6, #5
 80095e8:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80095ec:	4202      	tst	r2, r0
 80095ee:	f000 809e 	beq.w	800972e <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	07d1      	lsls	r1, r2, #31
 80095f6:	d529      	bpl.n	800964c <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 80095f8:	68da      	ldr	r2, [r3, #12]
 80095fa:	0792      	lsls	r2, r2, #30
 80095fc:	d526      	bpl.n	800964c <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	f022 0202 	bic.w	r2, r2, #2
 8009604:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 8009606:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8009608:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800960a:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800960c:	bf54      	ite	pl
 800960e:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8009612:	f041 0102 	orrmi.w	r1, r1, #2
 8009616:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8009618:	0591      	lsls	r1, r2, #22
 800961a:	d503      	bpl.n	8009624 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800961c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800961e:	f041 0104 	orr.w	r1, r1, #4
 8009622:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8009624:	05d0      	lsls	r0, r2, #23
 8009626:	d503      	bpl.n	8009630 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8009628:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800962a:	f041 0108 	orr.w	r1, r1, #8
 800962e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8009630:	0551      	lsls	r1, r2, #21
 8009632:	d503      	bpl.n	800963c <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8009634:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009636:	f041 0110 	orr.w	r1, r1, #16
 800963a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800963c:	0512      	lsls	r2, r2, #20
 800963e:	d503      	bpl.n	8009648 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8009640:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8009642:	f042 0220 	orr.w	r2, r2, #32
 8009646:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8009648:	2201      	movs	r2, #1
 800964a:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	06d0      	lsls	r0, r2, #27
 8009650:	d508      	bpl.n	8009664 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8009652:	68da      	ldr	r2, [r3, #12]
 8009654:	0691      	lsls	r1, r2, #26
 8009656:	d505      	bpl.n	8009664 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8009658:	2210      	movs	r2, #16
 800965a:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800965c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800965e:	b10b      	cbz	r3, 8009664 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 8009660:	4620      	mov	r0, r4
 8009662:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	0712      	lsls	r2, r2, #28
 800966a:	d508      	bpl.n	800967e <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	06d0      	lsls	r0, r2, #27
 8009670:	d505      	bpl.n	800967e <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8009672:	2208      	movs	r2, #8
 8009674:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 8009676:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009678:	b10b      	cbz	r3, 800967e <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 800967a:	4620      	mov	r0, r4
 800967c:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	0751      	lsls	r1, r2, #29
 8009684:	d508      	bpl.n	8009698 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8009686:	68da      	ldr	r2, [r3, #12]
 8009688:	0712      	lsls	r2, r2, #28
 800968a:	d505      	bpl.n	8009698 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800968c:	2204      	movs	r2, #4
 800968e:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8009690:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009692:	b10b      	cbz	r3, 8009698 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8009694:	4620      	mov	r0, r4
 8009696:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8009698:	6823      	ldr	r3, [r4, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	0790      	lsls	r0, r2, #30
 800969e:	d524      	bpl.n	80096ea <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80096a0:	68da      	ldr	r2, [r3, #12]
 80096a2:	0751      	lsls	r1, r2, #29
 80096a4:	d521      	bpl.n	80096ea <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80096a6:	68da      	ldr	r2, [r3, #12]
 80096a8:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 80096ac:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80096ae:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80096b2:	2a04      	cmp	r2, #4
 80096b4:	f04f 0200 	mov.w	r2, #0
 80096b8:	d10c      	bne.n	80096d4 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 80096ba:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 80096bc:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 80096c0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 80096c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d031      	beq.n	800972e <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 80096ca:	4620      	mov	r0, r4
}
 80096cc:	b003      	add	sp, #12
 80096ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 80096d2:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80096d4:	2102      	movs	r1, #2
 80096d6:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 80096d8:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 80096da:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 80096de:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 80096e2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80096e4:	b10b      	cbz	r3, 80096ea <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 80096e6:	4620      	mov	r0, r4
 80096e8:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80096ea:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80096ec:	b1fb      	cbz	r3, 800972e <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 80096ee:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80096f2:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80096f6:	2304      	movs	r3, #4
 80096f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	68da      	ldr	r2, [r3, #12]
 8009700:	f022 0201 	bic.w	r2, r2, #1
 8009704:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 8009706:	9a01      	ldr	r2, [sp, #4]
 8009708:	3201      	adds	r2, #1
 800970a:	42aa      	cmp	r2, r5
 800970c:	9201      	str	r2, [sp, #4]
 800970e:	d802      	bhi.n	8009716 <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8009710:	68da      	ldr	r2, [r3, #12]
 8009712:	07d2      	lsls	r2, r2, #31
 8009714:	d4f7      	bmi.n	8009706 <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 8009716:	2200      	movs	r2, #0
 8009718:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8009720:	bf4c      	ite	mi
 8009722:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8009724:	2301      	movpl	r3, #1
 8009726:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800972a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800972c:	e7cb      	b.n	80096c6 <HAL_MDMA_IRQHandler+0xfe>
}
 800972e:	b003      	add	sp, #12
 8009730:	bd30      	pop	{r4, r5, pc}
 8009732:	bf00      	nop
 8009734:	2400006c 	.word	0x2400006c

08009738 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009738:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800973a:	4d1c      	ldr	r5, [pc, #112]	@ (80097ac <HAL_PWREx_ConfigSupply+0x74>)
{
 800973c:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800973e:	68eb      	ldr	r3, [r5, #12]
 8009740:	f003 0307 	and.w	r3, r3, #7
 8009744:	2b06      	cmp	r3, #6
 8009746:	d006      	beq.n	8009756 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009748:	68e8      	ldr	r0, [r5, #12]
 800974a:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800974e:	1b00      	subs	r0, r0, r4
 8009750:	bf18      	it	ne
 8009752:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8009754:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009756:	68eb      	ldr	r3, [r5, #12]
 8009758:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800975c:	4303      	orrs	r3, r0
 800975e:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8009760:	f7fc ffcc 	bl	80066fc <HAL_GetTick>
 8009764:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009766:	686b      	ldr	r3, [r5, #4]
 8009768:	049a      	lsls	r2, r3, #18
 800976a:	d508      	bpl.n	800977e <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800976c:	f1a4 031d 	sub.w	r3, r4, #29
 8009770:	2b01      	cmp	r3, #1
 8009772:	d90c      	bls.n	800978e <HAL_PWREx_ConfigSupply+0x56>
 8009774:	3c2d      	subs	r4, #45	@ 0x2d
 8009776:	2c01      	cmp	r4, #1
 8009778:	d909      	bls.n	800978e <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 800977a:	2000      	movs	r0, #0
 800977c:	e7ea      	b.n	8009754 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800977e:	f7fc ffbd 	bl	80066fc <HAL_GetTick>
 8009782:	1b80      	subs	r0, r0, r6
 8009784:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009788:	d9ed      	bls.n	8009766 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800978a:	2001      	movs	r0, #1
 800978c:	e7e2      	b.n	8009754 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800978e:	f7fc ffb5 	bl	80066fc <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009792:	4d06      	ldr	r5, [pc, #24]	@ (80097ac <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8009794:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009796:	68eb      	ldr	r3, [r5, #12]
 8009798:	03db      	lsls	r3, r3, #15
 800979a:	d4ee      	bmi.n	800977a <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800979c:	f7fc ffae 	bl	80066fc <HAL_GetTick>
 80097a0:	1b00      	subs	r0, r0, r4
 80097a2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80097a6:	d9f6      	bls.n	8009796 <HAL_PWREx_ConfigSupply+0x5e>
 80097a8:	e7ef      	b.n	800978a <HAL_PWREx_ConfigSupply+0x52>
 80097aa:	bf00      	nop
 80097ac:	58024800 	.word	0x58024800

080097b0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80097b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80097b4:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 80097b6:	b134      	cbz	r4, 80097c6 <QSPI_Config+0x16>
 80097b8:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 80097bc:	d003      	beq.n	80097c6 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80097be:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80097c0:	6805      	ldr	r5, [r0, #0]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	612b      	str	r3, [r5, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80097c6:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80097ca:	e9d1 c607 	ldrd	ip, r6, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80097ce:	f1ba 0f00 	cmp.w	sl, #0
 80097d2:	d052      	beq.n	800987a <QSPI_Config+0xca>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80097d4:	694f      	ldr	r7, [r1, #20]
 80097d6:	ea44 0a0a 	orr.w	sl, r4, sl
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80097da:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80097dc:	04bf      	lsls	r7, r7, #18
 80097de:	680b      	ldr	r3, [r1, #0]
 80097e0:	f8d1 e034 	ldr.w	lr, [r1, #52]	@ 0x34
 80097e4:	ea4a 0a02 	orr.w	sl, sl, r2
 80097e8:	e9d1 980b 	ldrd	r9, r8, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80097ec:	b34e      	cbz	r6, 8009842 <QSPI_Config+0x92>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80097ee:	688c      	ldr	r4, [r1, #8]
 80097f0:	ea4a 0006 	orr.w	r0, sl, r6
 80097f4:	61ec      	str	r4, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80097f6:	690c      	ldr	r4, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80097f8:	f1bc 0f00 	cmp.w	ip, #0
 80097fc:	d013      	beq.n	8009826 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80097fe:	ea43 030c 	orr.w	r3, r3, ip
 8009802:	ea43 0309 	orr.w	r3, r3, r9
 8009806:	ea43 0308 	orr.w	r3, r3, r8
 800980a:	ea43 030e 	orr.w	r3, r3, lr
 800980e:	4323      	orrs	r3, r4
 8009810:	68cc      	ldr	r4, [r1, #12]
 8009812:	4323      	orrs	r3, r4
 8009814:	433b      	orrs	r3, r7
 8009816:	4303      	orrs	r3, r0
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009818:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800981c:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800981e:	d00e      	beq.n	800983e <QSPI_Config+0x8e>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009820:	684b      	ldr	r3, [r1, #4]
 8009822:	61ab      	str	r3, [r5, #24]
 8009824:	e00b      	b.n	800983e <QSPI_Config+0x8e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009826:	ea43 0309 	orr.w	r3, r3, r9
 800982a:	ea43 0308 	orr.w	r3, r3, r8
 800982e:	ea43 030e 	orr.w	r3, r3, lr
 8009832:	4323      	orrs	r3, r4
 8009834:	433b      	orrs	r3, r7
 8009836:	4303      	orrs	r3, r0
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009838:	616b      	str	r3, [r5, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800983a:	f8c5 c018 	str.w	ip, [r5, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800983e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009842:	f1bc 0f00 	cmp.w	ip, #0
 8009846:	d00d      	beq.n	8009864 <QSPI_Config+0xb4>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009848:	ea43 030c 	orr.w	r3, r3, ip
 800984c:	68c8      	ldr	r0, [r1, #12]
 800984e:	ea43 0309 	orr.w	r3, r3, r9
 8009852:	ea43 0308 	orr.w	r3, r3, r8
 8009856:	ea43 030e 	orr.w	r3, r3, lr
 800985a:	4303      	orrs	r3, r0
 800985c:	433b      	orrs	r3, r7
 800985e:	ea43 030a 	orr.w	r3, r3, sl
 8009862:	e7d9      	b.n	8009818 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009864:	ea43 0309 	orr.w	r3, r3, r9
 8009868:	ea43 0308 	orr.w	r3, r3, r8
 800986c:	ea43 000e 	orr.w	r0, r3, lr
 8009870:	ea40 0307 	orr.w	r3, r0, r7
 8009874:	ea43 030a 	orr.w	r3, r3, sl
 8009878:	e7de      	b.n	8009838 <QSPI_Config+0x88>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800987a:	b316      	cbz	r6, 80098c2 <QSPI_Config+0x112>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800987c:	688b      	ldr	r3, [r1, #8]
 800987e:	4326      	orrs	r6, r4
 8009880:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009882:	694f      	ldr	r7, [r1, #20]
 8009884:	4316      	orrs	r6, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009886:	61eb      	str	r3, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009888:	04bf      	lsls	r7, r7, #18
 800988a:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800988c:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800988e:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009892:	f1bc 0f00 	cmp.w	ip, #0
 8009896:	d00b      	beq.n	80098b0 <QSPI_Config+0x100>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009898:	ea43 030c 	orr.w	r3, r3, ip
 800989c:	68c8      	ldr	r0, [r1, #12]
 800989e:	ea43 0308 	orr.w	r3, r3, r8
 80098a2:	ea43 030e 	orr.w	r3, r3, lr
 80098a6:	4323      	orrs	r3, r4
 80098a8:	4303      	orrs	r3, r0
 80098aa:	433b      	orrs	r3, r7
 80098ac:	4333      	orrs	r3, r6
 80098ae:	e7b3      	b.n	8009818 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80098b0:	ea43 0208 	orr.w	r2, r3, r8
 80098b4:	ea42 020e 	orr.w	r2, r2, lr
 80098b8:	4322      	orrs	r2, r4
 80098ba:	433a      	orrs	r2, r7
 80098bc:	4332      	orrs	r2, r6
 80098be:	616a      	str	r2, [r5, #20]
        CLEAR_REG(hqspi->Instance->AR);
 80098c0:	e7bb      	b.n	800983a <QSPI_Config+0x8a>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80098c2:	f1bc 0f00 	cmp.w	ip, #0
 80098c6:	d01a      	beq.n	80098fe <QSPI_Config+0x14e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80098c8:	ea44 030c 	orr.w	r3, r4, ip
 80098cc:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 80098ce:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80098d0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80098d4:	ea43 0302 	orr.w	r3, r3, r2
 80098d8:	ea43 0304 	orr.w	r3, r3, r4
 80098dc:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 80098de:	ea43 0304 	orr.w	r3, r3, r4
 80098e2:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 80098e4:	ea43 0304 	orr.w	r3, r3, r4
 80098e8:	68cc      	ldr	r4, [r1, #12]
 80098ea:	ea43 0304 	orr.w	r3, r3, r4
 80098ee:	694c      	ldr	r4, [r1, #20]
 80098f0:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80098f4:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80098f6:	d0a2      	beq.n	800983e <QSPI_Config+0x8e>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80098f8:	684b      	ldr	r3, [r1, #4]
 80098fa:	6183      	str	r3, [r0, #24]
 80098fc:	e79f      	b.n	800983e <QSPI_Config+0x8e>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80098fe:	2c00      	cmp	r4, #0
 8009900:	d09d      	beq.n	800983e <QSPI_Config+0x8e>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009902:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8009904:	6800      	ldr	r0, [r0, #0]
 8009906:	4323      	orrs	r3, r4
 8009908:	4313      	orrs	r3, r2
 800990a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800990c:	4313      	orrs	r3, r2
 800990e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8009910:	4313      	orrs	r3, r2
 8009912:	694a      	ldr	r2, [r1, #20]
 8009914:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8009918:	6143      	str	r3, [r0, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800991a:	f8c0 c018 	str.w	ip, [r0, #24]
}
 800991e:	e78e      	b.n	800983e <QSPI_Config+0x8e>

08009920 <QSPI_WaitFlagStateUntilTimeout>:
{
 8009920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009924:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009928:	4604      	mov	r4, r0
 800992a:	460e      	mov	r6, r1
 800992c:	4615      	mov	r5, r2
 800992e:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009930:	6822      	ldr	r2, [r4, #0]
 8009932:	6893      	ldr	r3, [r2, #8]
 8009934:	4233      	tst	r3, r6
 8009936:	bf14      	ite	ne
 8009938:	2301      	movne	r3, #1
 800993a:	2300      	moveq	r3, #0
 800993c:	42ab      	cmp	r3, r5
 800993e:	d101      	bne.n	8009944 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8009940:	2000      	movs	r0, #0
 8009942:	e00f      	b.n	8009964 <QSPI_WaitFlagStateUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8009944:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009948:	d0f3      	beq.n	8009932 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800994a:	f7fc fed7 	bl	80066fc <HAL_GetTick>
 800994e:	1bc0      	subs	r0, r0, r7
 8009950:	4540      	cmp	r0, r8
 8009952:	d909      	bls.n	8009968 <QSPI_WaitFlagStateUntilTimeout+0x48>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009954:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009956:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009958:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800995c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800995e:	f043 0301 	orr.w	r3, r3, #1
 8009962:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8009964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009968:	f1b8 0f00 	cmp.w	r8, #0
 800996c:	d1e0      	bne.n	8009930 <QSPI_WaitFlagStateUntilTimeout+0x10>
 800996e:	e7f1      	b.n	8009954 <QSPI_WaitFlagStateUntilTimeout+0x34>

08009970 <HAL_QSPI_Init>:
{
 8009970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009972:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009974:	f7fc fec2 	bl	80066fc <HAL_GetTick>
 8009978:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800997a:	2c00      	cmp	r4, #0
 800997c:	d03f      	beq.n	80099fe <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800997e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009982:	b92b      	cbnz	r3, 8009990 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 8009984:	4620      	mov	r0, r4
 8009986:	f7f7 fe4f 	bl	8001628 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800998a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800998e:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009990:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009992:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009994:	68a3      	ldr	r3, [r4, #8]
 8009996:	680a      	ldr	r2, [r1, #0]
 8009998:	3b01      	subs	r3, #1
 800999a:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800999e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80099a2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80099a4:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80099a6:	2200      	movs	r2, #0
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	2120      	movs	r1, #32
 80099ac:	462b      	mov	r3, r5
 80099ae:	f7ff ffb7 	bl	8009920 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80099b2:	bb10      	cbnz	r0, 80099fa <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80099b4:	6822      	ldr	r2, [r4, #0]
 80099b6:	69e5      	ldr	r5, [r4, #28]
 80099b8:	68e3      	ldr	r3, [r4, #12]
 80099ba:	6811      	ldr	r1, [r2, #0]
 80099bc:	432b      	orrs	r3, r5
 80099be:	6a25      	ldr	r5, [r4, #32]
 80099c0:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80099c4:	432b      	orrs	r3, r5
 80099c6:	6865      	ldr	r5, [r4, #4]
 80099c8:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 80099cc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80099d0:	430b      	orrs	r3, r1
 80099d2:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80099d4:	6855      	ldr	r5, [r2, #4]
 80099d6:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80099da:	430b      	orrs	r3, r1
 80099dc:	6921      	ldr	r1, [r4, #16]
 80099de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80099e2:	4908      	ldr	r1, [pc, #32]	@ (8009a04 <HAL_QSPI_Init+0x94>)
 80099e4:	4029      	ands	r1, r5
 80099e6:	430b      	orrs	r3, r1
 80099e8:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80099ea:	6813      	ldr	r3, [r2, #0]
 80099ec:	f043 0301 	orr.w	r3, r3, #1
 80099f0:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80099f2:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80099f4:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80099f6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 80099fa:	b003      	add	sp, #12
 80099fc:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80099fe:	2001      	movs	r0, #1
 8009a00:	e7fb      	b.n	80099fa <HAL_QSPI_Init+0x8a>
 8009a02:	bf00      	nop
 8009a04:	ffe0f8fe 	.word	0xffe0f8fe

08009a08 <HAL_QSPI_Command>:
{
 8009a08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	468a      	mov	sl, r1
 8009a10:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8009a12:	f7fc fe73 	bl	80066fc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009a16:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009a1a:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d035      	beq.n	8009a8c <HAL_QSPI_Command+0x84>
 8009a20:	2301      	movs	r3, #1
 8009a22:	2602      	movs	r6, #2
 8009a24:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009a28:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	fa5f f983 	uxtb.w	r9, r3
 8009a32:	d129      	bne.n	8009a88 <HAL_QSPI_Command+0x80>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009a34:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009a36:	4603      	mov	r3, r0
 8009a38:	2120      	movs	r1, #32
 8009a3a:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009a3c:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8009a3e:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009a42:	f8cd 8000 	str.w	r8, [sp]
 8009a46:	f7ff ff6b 	bl	8009920 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009a4a:	4605      	mov	r5, r0
 8009a4c:	b9a8      	cbnz	r0, 8009a7a <HAL_QSPI_Command+0x72>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009a4e:	4602      	mov	r2, r0
 8009a50:	4651      	mov	r1, sl
 8009a52:	4620      	mov	r0, r4
 8009a54:	f7ff feac 	bl	80097b0 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8009a58:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8009a5c:	b95b      	cbnz	r3, 8009a76 <HAL_QSPI_Command+0x6e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009a5e:	463b      	mov	r3, r7
 8009a60:	464a      	mov	r2, r9
 8009a62:	4631      	mov	r1, r6
 8009a64:	4620      	mov	r0, r4
 8009a66:	f8cd 8000 	str.w	r8, [sp]
 8009a6a:	f7ff ff59 	bl	8009920 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009a6e:	4605      	mov	r5, r0
 8009a70:	b918      	cbnz	r0, 8009a7a <HAL_QSPI_Command+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009a76:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009a80:	4628      	mov	r0, r5
 8009a82:	b002      	add	sp, #8
 8009a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 8009a88:	4635      	mov	r5, r6
 8009a8a:	e7f6      	b.n	8009a7a <HAL_QSPI_Command+0x72>
  __HAL_LOCK(hqspi);
 8009a8c:	2502      	movs	r5, #2
 8009a8e:	e7f7      	b.n	8009a80 <HAL_QSPI_Command+0x78>

08009a90 <HAL_QSPI_Transmit>:
{
 8009a90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009a94:	4604      	mov	r4, r0
 8009a96:	4688      	mov	r8, r1
 8009a98:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8009a9a:	f7fc fe2f 	bl	80066fc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009a9e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009aa2:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8009aa4:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d04c      	beq.n	8009b44 <HAL_QSPI_Transmit+0xb4>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009ab0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	b2d8      	uxtb	r0, r3
 8009ab8:	d142      	bne.n	8009b40 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009aba:	2300      	movs	r3, #0
 8009abc:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8009abe:	f1b8 0f00 	cmp.w	r8, #0
 8009ac2:	d038      	beq.n	8009b36 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8009ac4:	2312      	movs	r3, #18
 8009ac6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009aca:	692b      	ldr	r3, [r5, #16]
 8009acc:	3301      	adds	r3, #1
 8009ace:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009ad0:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8009ad2:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009ada:	696b      	ldr	r3, [r5, #20]
 8009adc:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8009ae0:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8009ae2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009ae4:	b99b      	cbnz	r3, 8009b0e <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009ae6:	4633      	mov	r3, r6
 8009ae8:	2201      	movs	r2, #1
 8009aea:	2102      	movs	r1, #2
 8009aec:	4620      	mov	r0, r4
 8009aee:	9700      	str	r7, [sp, #0]
 8009af0:	f7ff ff16 	bl	8009920 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009af4:	b910      	cbnz	r0, 8009afc <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	2202      	movs	r2, #2
 8009afa:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009afc:	2301      	movs	r3, #1
 8009afe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009b02:	2300      	movs	r3, #0
 8009b04:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009b08:	b002      	add	sp, #8
 8009b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8009b0e:	4633      	mov	r3, r6
 8009b10:	2201      	movs	r2, #1
 8009b12:	2104      	movs	r1, #4
 8009b14:	4620      	mov	r0, r4
 8009b16:	9700      	str	r7, [sp, #0]
 8009b18:	f7ff ff02 	bl	8009920 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d1ed      	bne.n	8009afc <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8009b20:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 8009b28:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 8009b2e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009b30:	3b01      	subs	r3, #1
 8009b32:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b34:	e7d5      	b.n	8009ae2 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009b36:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009b38:	f043 0308 	orr.w	r3, r3, #8
 8009b3c:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 8009b3e:	e7e0      	b.n	8009b02 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8009b40:	2002      	movs	r0, #2
 8009b42:	e7de      	b.n	8009b02 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8009b44:	2002      	movs	r0, #2
 8009b46:	e7df      	b.n	8009b08 <HAL_QSPI_Transmit+0x78>

08009b48 <HAL_QSPI_Receive>:
{
 8009b48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	4617      	mov	r7, r2
 8009b50:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8009b52:	f7fc fdd3 	bl	80066fc <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009b56:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8009b58:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009b5a:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 8009b5c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d04f      	beq.n	8009c04 <HAL_QSPI_Receive+0xbc>
 8009b64:	2301      	movs	r3, #1
 8009b66:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009b6a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	b2d8      	uxtb	r0, r3
 8009b72:	d145      	bne.n	8009c00 <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009b74:	2300      	movs	r3, #0
 8009b76:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8009b78:	f1b8 0f00 	cmp.w	r8, #0
 8009b7c:	d03b      	beq.n	8009bf6 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8009b7e:	2322      	movs	r3, #34	@ 0x22
 8009b80:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009b84:	692b      	ldr	r3, [r5, #16]
 8009b86:	3301      	adds	r3, #1
 8009b88:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009b8a:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8009b8c:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009b90:	3301      	adds	r3, #1
 8009b92:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8009b94:	6969      	ldr	r1, [r5, #20]
 8009b96:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 8009b9a:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8009b9e:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8009ba0:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8009ba2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009ba4:	b99b      	cbnz	r3, 8009bce <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009ba6:	4633      	mov	r3, r6
 8009ba8:	2201      	movs	r2, #1
 8009baa:	2102      	movs	r1, #2
 8009bac:	4620      	mov	r0, r4
 8009bae:	9700      	str	r7, [sp, #0]
 8009bb0:	f7ff feb6 	bl	8009920 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8009bb4:	b910      	cbnz	r0, 8009bbc <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	2202      	movs	r2, #2
 8009bba:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009bc8:	b002      	add	sp, #8
 8009bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8009bce:	4633      	mov	r3, r6
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	2106      	movs	r1, #6
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	9700      	str	r7, [sp, #0]
 8009bd8:	f7ff fea2 	bl	8009920 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d1ed      	bne.n	8009bbc <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009be0:	f895 2020 	ldrb.w	r2, [r5, #32]
 8009be4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009be6:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8009be8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009bea:	3301      	adds	r3, #1
 8009bec:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 8009bee:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009bf4:	e7d5      	b.n	8009ba2 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009bf6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009bf8:	f043 0308 	orr.w	r3, r3, #8
 8009bfc:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 8009bfe:	e7e0      	b.n	8009bc2 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 8009c00:	2002      	movs	r0, #2
 8009c02:	e7de      	b.n	8009bc2 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 8009c04:	2002      	movs	r0, #2
 8009c06:	e7df      	b.n	8009bc8 <HAL_QSPI_Receive+0x80>

08009c08 <HAL_QSPI_AutoPolling>:
{
 8009c08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	461f      	mov	r7, r3
 8009c10:	4689      	mov	r9, r1
 8009c12:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8009c14:	f7fc fd72 	bl	80066fc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009c18:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009c1c:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d041      	beq.n	8009ca6 <HAL_QSPI_AutoPolling+0x9e>
 8009c22:	2301      	movs	r3, #1
 8009c24:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009c28:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	fa5f f883 	uxtb.w	r8, r3
 8009c32:	d136      	bne.n	8009ca2 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009c34:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009c36:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009c38:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009c3a:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009c3c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009c40:	4603      	mov	r3, r0
 8009c42:	9700      	str	r7, [sp, #0]
 8009c44:	4620      	mov	r0, r4
 8009c46:	f7ff fe6b 	bl	8009920 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009c4a:	bb20      	cbnz	r0, 8009c96 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009c4c:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009c4e:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009c50:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009c52:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009c54:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8009c56:	686b      	ldr	r3, [r5, #4]
 8009c58:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8009c5a:	68ab      	ldr	r3, [r5, #8]
 8009c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009c5e:	6813      	ldr	r3, [r2, #0]
 8009c60:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8009c64:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009c66:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009c68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009c6c:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009c6e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 8009c72:	68eb      	ldr	r3, [r5, #12]
 8009c74:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009c78:	f7ff fd9a 	bl	80097b0 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8009c7c:	4633      	mov	r3, r6
 8009c7e:	4642      	mov	r2, r8
 8009c80:	2108      	movs	r1, #8
 8009c82:	4620      	mov	r0, r4
 8009c84:	9700      	str	r7, [sp, #0]
 8009c86:	f7ff fe4b 	bl	8009920 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8009c8a:	b920      	cbnz	r0, 8009c96 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8009c8c:	6823      	ldr	r3, [r4, #0]
 8009c8e:	2208      	movs	r2, #8
 8009c90:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009c92:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009c96:	2300      	movs	r3, #0
 8009c98:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009c9c:	b003      	add	sp, #12
 8009c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8009ca2:	2002      	movs	r0, #2
 8009ca4:	e7f7      	b.n	8009c96 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 8009ca6:	2002      	movs	r0, #2
 8009ca8:	e7f8      	b.n	8009c9c <HAL_QSPI_AutoPolling+0x94>

08009caa <HAL_QSPI_MemoryMapped>:
{
 8009caa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cac:	4604      	mov	r4, r0
 8009cae:	4616      	mov	r6, r2
 8009cb0:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8009cb2:	f7fc fd23 	bl	80066fc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009cb6:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009cba:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8009cbc:	2a01      	cmp	r2, #1
 8009cbe:	d033      	beq.n	8009d28 <HAL_QSPI_MemoryMapped+0x7e>
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009cc6:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8009cca:	2a01      	cmp	r2, #1
 8009ccc:	d12a      	bne.n	8009d24 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009cce:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8009cd0:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009cd2:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009cd4:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8009cd6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009cda:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009cdc:	9100      	str	r1, [sp, #0]
 8009cde:	2120      	movs	r1, #32
 8009ce0:	f7ff fe1e 	bl	8009920 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009ce4:	4605      	mov	r5, r0
 8009ce6:	b9b8      	cbnz	r0, 8009d18 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	6872      	ldr	r2, [r6, #4]
 8009cec:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8009cee:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8009cf0:	f020 0008 	bic.w	r0, r0, #8
 8009cf4:	ea40 0002 	orr.w	r0, r0, r2
 8009cf8:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8009cfa:	d107      	bne.n	8009d0c <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8009cfc:	6832      	ldr	r2, [r6, #0]
 8009cfe:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8009d00:	2210      	movs	r2, #16
 8009d02:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8009d0a:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8009d0c:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8009d10:	4639      	mov	r1, r7
 8009d12:	4620      	mov	r0, r4
 8009d14:	f7ff fd4c 	bl	80097b0 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009d1e:	4628      	mov	r0, r5
 8009d20:	b003      	add	sp, #12
 8009d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8009d24:	2502      	movs	r5, #2
 8009d26:	e7f7      	b.n	8009d18 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8009d28:	2502      	movs	r5, #2
 8009d2a:	e7f8      	b.n	8009d1e <HAL_QSPI_MemoryMapped+0x74>

08009d2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009d2e:	4604      	mov	r4, r0
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d074      	beq.n	8009e1e <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d34:	6803      	ldr	r3, [r0, #0]
 8009d36:	07d8      	lsls	r0, r3, #31
 8009d38:	d45e      	bmi.n	8009df8 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	0799      	lsls	r1, r3, #30
 8009d3e:	f100 80ad 	bmi.w	8009e9c <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	06da      	lsls	r2, r3, #27
 8009d46:	d527      	bpl.n	8009d98 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d48:	4a9c      	ldr	r2, [pc, #624]	@ (8009fbc <HAL_RCC_OscConfig+0x290>)
 8009d4a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d4c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009d52:	2b08      	cmp	r3, #8
 8009d54:	d007      	beq.n	8009d66 <HAL_RCC_OscConfig+0x3a>
 8009d56:	2b18      	cmp	r3, #24
 8009d58:	f040 8103 	bne.w	8009f62 <HAL_RCC_OscConfig+0x236>
 8009d5c:	f001 0303 	and.w	r3, r1, #3
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	f040 80fe 	bne.w	8009f62 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d66:	6813      	ldr	r3, [r2, #0]
 8009d68:	05db      	lsls	r3, r3, #23
 8009d6a:	d502      	bpl.n	8009d72 <HAL_RCC_OscConfig+0x46>
 8009d6c:	69e3      	ldr	r3, [r4, #28]
 8009d6e:	2b80      	cmp	r3, #128	@ 0x80
 8009d70:	d155      	bne.n	8009e1e <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d72:	f7fc fcdb 	bl	800672c <HAL_GetREVID>
 8009d76:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009d7a:	6a21      	ldr	r1, [r4, #32]
 8009d7c:	4298      	cmp	r0, r3
 8009d7e:	4b8f      	ldr	r3, [pc, #572]	@ (8009fbc <HAL_RCC_OscConfig+0x290>)
 8009d80:	f200 80e8 	bhi.w	8009f54 <HAL_RCC_OscConfig+0x228>
 8009d84:	685a      	ldr	r2, [r3, #4]
 8009d86:	2920      	cmp	r1, #32
 8009d88:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8009d8c:	bf0c      	ite	eq
 8009d8e:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 8009d92:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8009d96:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d98:	6823      	ldr	r3, [r4, #0]
 8009d9a:	0719      	lsls	r1, r3, #28
 8009d9c:	f100 8123 	bmi.w	8009fe6 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	069a      	lsls	r2, r3, #26
 8009da4:	f100 8144 	bmi.w	800a030 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	075d      	lsls	r5, r3, #29
 8009dac:	d51e      	bpl.n	8009dec <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009dae:	4d84      	ldr	r5, [pc, #528]	@ (8009fc0 <HAL_RCC_OscConfig+0x294>)
 8009db0:	682b      	ldr	r3, [r5, #0]
 8009db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009db6:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009db8:	f7fc fca0 	bl	80066fc <HAL_GetTick>
 8009dbc:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dbe:	682b      	ldr	r3, [r5, #0]
 8009dc0:	05da      	lsls	r2, r3, #23
 8009dc2:	f140 815a 	bpl.w	800a07a <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dc6:	68a3      	ldr	r3, [r4, #8]
 8009dc8:	4d7c      	ldr	r5, [pc, #496]	@ (8009fbc <HAL_RCC_OscConfig+0x290>)
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	f040 815c 	bne.w	800a088 <HAL_RCC_OscConfig+0x35c>
 8009dd0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009dd2:	f043 0301 	orr.w	r3, r3, #1
 8009dd6:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dd8:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8009ddc:	f7fc fc8e 	bl	80066fc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009de0:	4e76      	ldr	r6, [pc, #472]	@ (8009fbc <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8009de2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009de4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8009de6:	079b      	lsls	r3, r3, #30
 8009de8:	f140 8174 	bpl.w	800a0d4 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009dec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009dee:	2900      	cmp	r1, #0
 8009df0:	f040 8177 	bne.w	800a0e2 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8009df4:	2000      	movs	r0, #0
 8009df6:	e02b      	b.n	8009e50 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009df8:	4a70      	ldr	r2, [pc, #448]	@ (8009fbc <HAL_RCC_OscConfig+0x290>)
 8009dfa:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009dfc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009e02:	2b10      	cmp	r3, #16
 8009e04:	d005      	beq.n	8009e12 <HAL_RCC_OscConfig+0xe6>
 8009e06:	2b18      	cmp	r3, #24
 8009e08:	d10b      	bne.n	8009e22 <HAL_RCC_OscConfig+0xf6>
 8009e0a:	f001 0303 	and.w	r3, r1, #3
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d107      	bne.n	8009e22 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e12:	6813      	ldr	r3, [r2, #0]
 8009e14:	039a      	lsls	r2, r3, #14
 8009e16:	d590      	bpl.n	8009d3a <HAL_RCC_OscConfig+0xe>
 8009e18:	6863      	ldr	r3, [r4, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d18d      	bne.n	8009d3a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8009e1e:	2001      	movs	r0, #1
 8009e20:	e016      	b.n	8009e50 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e22:	6863      	ldr	r3, [r4, #4]
 8009e24:	4d65      	ldr	r5, [pc, #404]	@ (8009fbc <HAL_RCC_OscConfig+0x290>)
 8009e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e2a:	d112      	bne.n	8009e52 <HAL_RCC_OscConfig+0x126>
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e32:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009e34:	f7fc fc62 	bl	80066fc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e38:	4e60      	ldr	r6, [pc, #384]	@ (8009fbc <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8009e3a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e3c:	6833      	ldr	r3, [r6, #0]
 8009e3e:	039b      	lsls	r3, r3, #14
 8009e40:	f53f af7b 	bmi.w	8009d3a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e44:	f7fc fc5a 	bl	80066fc <HAL_GetTick>
 8009e48:	1b40      	subs	r0, r0, r5
 8009e4a:	2864      	cmp	r0, #100	@ 0x64
 8009e4c:	d9f6      	bls.n	8009e3c <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8009e4e:	2003      	movs	r0, #3
}
 8009e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e52:	b9a3      	cbnz	r3, 8009e7e <HAL_RCC_OscConfig+0x152>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e5a:	602b      	str	r3, [r5, #0]
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009e62:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009e64:	f7fc fc4a 	bl	80066fc <HAL_GetTick>
 8009e68:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009e6a:	682b      	ldr	r3, [r5, #0]
 8009e6c:	039f      	lsls	r7, r3, #14
 8009e6e:	f57f af64 	bpl.w	8009d3a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e72:	f7fc fc43 	bl	80066fc <HAL_GetTick>
 8009e76:	1b80      	subs	r0, r0, r6
 8009e78:	2864      	cmp	r0, #100	@ 0x64
 8009e7a:	d9f6      	bls.n	8009e6a <HAL_RCC_OscConfig+0x13e>
 8009e7c:	e7e7      	b.n	8009e4e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e82:	682b      	ldr	r3, [r5, #0]
 8009e84:	d103      	bne.n	8009e8e <HAL_RCC_OscConfig+0x162>
 8009e86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009e8a:	602b      	str	r3, [r5, #0]
 8009e8c:	e7ce      	b.n	8009e2c <HAL_RCC_OscConfig+0x100>
 8009e8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e92:	602b      	str	r3, [r5, #0]
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009e9a:	e7ca      	b.n	8009e32 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e9c:	4947      	ldr	r1, [pc, #284]	@ (8009fbc <HAL_RCC_OscConfig+0x290>)
 8009e9e:	68e2      	ldr	r2, [r4, #12]
 8009ea0:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ea2:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009ea4:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8009ea8:	d003      	beq.n	8009eb2 <HAL_RCC_OscConfig+0x186>
 8009eaa:	2b18      	cmp	r3, #24
 8009eac:	d12a      	bne.n	8009f04 <HAL_RCC_OscConfig+0x1d8>
 8009eae:	0780      	lsls	r0, r0, #30
 8009eb0:	d128      	bne.n	8009f04 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009eb2:	680b      	ldr	r3, [r1, #0]
 8009eb4:	075b      	lsls	r3, r3, #29
 8009eb6:	d501      	bpl.n	8009ebc <HAL_RCC_OscConfig+0x190>
 8009eb8:	2a00      	cmp	r2, #0
 8009eba:	d0b0      	beq.n	8009e1e <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ebc:	4d3f      	ldr	r5, [pc, #252]	@ (8009fbc <HAL_RCC_OscConfig+0x290>)
 8009ebe:	682b      	ldr	r3, [r5, #0]
 8009ec0:	f023 0319 	bic.w	r3, r3, #25
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009ec8:	f7fc fc18 	bl	80066fc <HAL_GetTick>
 8009ecc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ece:	682b      	ldr	r3, [r5, #0]
 8009ed0:	075f      	lsls	r7, r3, #29
 8009ed2:	d511      	bpl.n	8009ef8 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ed4:	f7fc fc2a 	bl	800672c <HAL_GetREVID>
 8009ed8:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009edc:	6922      	ldr	r2, [r4, #16]
 8009ede:	4298      	cmp	r0, r3
 8009ee0:	686b      	ldr	r3, [r5, #4]
 8009ee2:	d822      	bhi.n	8009f2a <HAL_RCC_OscConfig+0x1fe>
 8009ee4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009ee8:	2a40      	cmp	r2, #64	@ 0x40
 8009eea:	bf0c      	ite	eq
 8009eec:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8009ef0:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8009ef4:	606b      	str	r3, [r5, #4]
 8009ef6:	e724      	b.n	8009d42 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ef8:	f7fc fc00 	bl	80066fc <HAL_GetTick>
 8009efc:	1b80      	subs	r0, r0, r6
 8009efe:	2802      	cmp	r0, #2
 8009f00:	d9e5      	bls.n	8009ece <HAL_RCC_OscConfig+0x1a2>
 8009f02:	e7a4      	b.n	8009e4e <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009f04:	4d2d      	ldr	r5, [pc, #180]	@ (8009fbc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f06:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009f08:	b1a2      	cbz	r2, 8009f34 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f0a:	f023 0319 	bic.w	r3, r3, #25
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009f12:	f7fc fbf3 	bl	80066fc <HAL_GetTick>
 8009f16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f18:	682b      	ldr	r3, [r5, #0]
 8009f1a:	0758      	lsls	r0, r3, #29
 8009f1c:	d4da      	bmi.n	8009ed4 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f1e:	f7fc fbed 	bl	80066fc <HAL_GetTick>
 8009f22:	1b80      	subs	r0, r0, r6
 8009f24:	2802      	cmp	r0, #2
 8009f26:	d9f7      	bls.n	8009f18 <HAL_RCC_OscConfig+0x1ec>
 8009f28:	e791      	b.n	8009e4e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f2a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009f2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009f32:	e7df      	b.n	8009ef4 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 8009f34:	f023 0301 	bic.w	r3, r3, #1
 8009f38:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009f3a:	f7fc fbdf 	bl	80066fc <HAL_GetTick>
 8009f3e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	0759      	lsls	r1, r3, #29
 8009f44:	f57f aefd 	bpl.w	8009d42 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f48:	f7fc fbd8 	bl	80066fc <HAL_GetTick>
 8009f4c:	1b80      	subs	r0, r0, r6
 8009f4e:	2802      	cmp	r0, #2
 8009f50:	d9f6      	bls.n	8009f40 <HAL_RCC_OscConfig+0x214>
 8009f52:	e77c      	b.n	8009e4e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f54:	68da      	ldr	r2, [r3, #12]
 8009f56:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8009f5a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009f5e:	60da      	str	r2, [r3, #12]
 8009f60:	e71a      	b.n	8009d98 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009f62:	69e3      	ldr	r3, [r4, #28]
 8009f64:	4d15      	ldr	r5, [pc, #84]	@ (8009fbc <HAL_RCC_OscConfig+0x290>)
 8009f66:	b36b      	cbz	r3, 8009fc4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8009f68:	682b      	ldr	r3, [r5, #0]
 8009f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009f70:	f7fc fbc4 	bl	80066fc <HAL_GetTick>
 8009f74:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f76:	682b      	ldr	r3, [r5, #0]
 8009f78:	05df      	lsls	r7, r3, #23
 8009f7a:	d511      	bpl.n	8009fa0 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f7c:	f7fc fbd6 	bl	800672c <HAL_GetREVID>
 8009f80:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009f84:	6a22      	ldr	r2, [r4, #32]
 8009f86:	4298      	cmp	r0, r3
 8009f88:	d810      	bhi.n	8009fac <HAL_RCC_OscConfig+0x280>
 8009f8a:	686b      	ldr	r3, [r5, #4]
 8009f8c:	2a20      	cmp	r2, #32
 8009f8e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009f92:	bf0c      	ite	eq
 8009f94:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8009f98:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8009f9c:	606b      	str	r3, [r5, #4]
 8009f9e:	e6fb      	b.n	8009d98 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009fa0:	f7fc fbac 	bl	80066fc <HAL_GetTick>
 8009fa4:	1b80      	subs	r0, r0, r6
 8009fa6:	2802      	cmp	r0, #2
 8009fa8:	d9e5      	bls.n	8009f76 <HAL_RCC_OscConfig+0x24a>
 8009faa:	e750      	b.n	8009e4e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009fac:	68eb      	ldr	r3, [r5, #12]
 8009fae:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8009fb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009fb6:	60eb      	str	r3, [r5, #12]
 8009fb8:	e6ee      	b.n	8009d98 <HAL_RCC_OscConfig+0x6c>
 8009fba:	bf00      	nop
 8009fbc:	58024400 	.word	0x58024400
 8009fc0:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009fcc:	f7fc fb96 	bl	80066fc <HAL_GetTick>
 8009fd0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009fd2:	682b      	ldr	r3, [r5, #0]
 8009fd4:	05d8      	lsls	r0, r3, #23
 8009fd6:	f57f aedf 	bpl.w	8009d98 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009fda:	f7fc fb8f 	bl	80066fc <HAL_GetTick>
 8009fde:	1b80      	subs	r0, r0, r6
 8009fe0:	2802      	cmp	r0, #2
 8009fe2:	d9f6      	bls.n	8009fd2 <HAL_RCC_OscConfig+0x2a6>
 8009fe4:	e733      	b.n	8009e4e <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009fe6:	6963      	ldr	r3, [r4, #20]
 8009fe8:	4da3      	ldr	r5, [pc, #652]	@ (800a278 <HAL_RCC_OscConfig+0x54c>)
 8009fea:	b183      	cbz	r3, 800a00e <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 8009fec:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009fee:	f043 0301 	orr.w	r3, r3, #1
 8009ff2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8009ff4:	f7fc fb82 	bl	80066fc <HAL_GetTick>
 8009ff8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ffa:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009ffc:	079b      	lsls	r3, r3, #30
 8009ffe:	f53f aecf 	bmi.w	8009da0 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a002:	f7fc fb7b 	bl	80066fc <HAL_GetTick>
 800a006:	1b80      	subs	r0, r0, r6
 800a008:	2802      	cmp	r0, #2
 800a00a:	d9f6      	bls.n	8009ffa <HAL_RCC_OscConfig+0x2ce>
 800a00c:	e71f      	b.n	8009e4e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800a00e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a010:	f023 0301 	bic.w	r3, r3, #1
 800a014:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800a016:	f7fc fb71 	bl	80066fc <HAL_GetTick>
 800a01a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a01c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a01e:	079f      	lsls	r7, r3, #30
 800a020:	f57f aebe 	bpl.w	8009da0 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a024:	f7fc fb6a 	bl	80066fc <HAL_GetTick>
 800a028:	1b80      	subs	r0, r0, r6
 800a02a:	2802      	cmp	r0, #2
 800a02c:	d9f6      	bls.n	800a01c <HAL_RCC_OscConfig+0x2f0>
 800a02e:	e70e      	b.n	8009e4e <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a030:	69a3      	ldr	r3, [r4, #24]
 800a032:	4d91      	ldr	r5, [pc, #580]	@ (800a278 <HAL_RCC_OscConfig+0x54c>)
 800a034:	b183      	cbz	r3, 800a058 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800a036:	682b      	ldr	r3, [r5, #0]
 800a038:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a03c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a03e:	f7fc fb5d 	bl	80066fc <HAL_GetTick>
 800a042:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a044:	682b      	ldr	r3, [r5, #0]
 800a046:	0498      	lsls	r0, r3, #18
 800a048:	f53f aeae 	bmi.w	8009da8 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a04c:	f7fc fb56 	bl	80066fc <HAL_GetTick>
 800a050:	1b80      	subs	r0, r0, r6
 800a052:	2802      	cmp	r0, #2
 800a054:	d9f6      	bls.n	800a044 <HAL_RCC_OscConfig+0x318>
 800a056:	e6fa      	b.n	8009e4e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a05e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a060:	f7fc fb4c 	bl	80066fc <HAL_GetTick>
 800a064:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a066:	682b      	ldr	r3, [r5, #0]
 800a068:	0499      	lsls	r1, r3, #18
 800a06a:	f57f ae9d 	bpl.w	8009da8 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a06e:	f7fc fb45 	bl	80066fc <HAL_GetTick>
 800a072:	1b80      	subs	r0, r0, r6
 800a074:	2802      	cmp	r0, #2
 800a076:	d9f6      	bls.n	800a066 <HAL_RCC_OscConfig+0x33a>
 800a078:	e6e9      	b.n	8009e4e <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a07a:	f7fc fb3f 	bl	80066fc <HAL_GetTick>
 800a07e:	1b80      	subs	r0, r0, r6
 800a080:	2864      	cmp	r0, #100	@ 0x64
 800a082:	f67f ae9c 	bls.w	8009dbe <HAL_RCC_OscConfig+0x92>
 800a086:	e6e2      	b.n	8009e4e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a088:	b9b3      	cbnz	r3, 800a0b8 <HAL_RCC_OscConfig+0x38c>
 800a08a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a08c:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a090:	f023 0301 	bic.w	r3, r3, #1
 800a094:	672b      	str	r3, [r5, #112]	@ 0x70
 800a096:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a098:	f023 0304 	bic.w	r3, r3, #4
 800a09c:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800a09e:	f7fc fb2d 	bl	80066fc <HAL_GetTick>
 800a0a2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a0a4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a0a6:	0798      	lsls	r0, r3, #30
 800a0a8:	f57f aea0 	bpl.w	8009dec <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0ac:	f7fc fb26 	bl	80066fc <HAL_GetTick>
 800a0b0:	1b80      	subs	r0, r0, r6
 800a0b2:	42b8      	cmp	r0, r7
 800a0b4:	d9f6      	bls.n	800a0a4 <HAL_RCC_OscConfig+0x378>
 800a0b6:	e6ca      	b.n	8009e4e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0b8:	2b05      	cmp	r3, #5
 800a0ba:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a0bc:	d103      	bne.n	800a0c6 <HAL_RCC_OscConfig+0x39a>
 800a0be:	f043 0304 	orr.w	r3, r3, #4
 800a0c2:	672b      	str	r3, [r5, #112]	@ 0x70
 800a0c4:	e684      	b.n	8009dd0 <HAL_RCC_OscConfig+0xa4>
 800a0c6:	f023 0301 	bic.w	r3, r3, #1
 800a0ca:	672b      	str	r3, [r5, #112]	@ 0x70
 800a0cc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a0ce:	f023 0304 	bic.w	r3, r3, #4
 800a0d2:	e680      	b.n	8009dd6 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0d4:	f7fc fb12 	bl	80066fc <HAL_GetTick>
 800a0d8:	1b40      	subs	r0, r0, r5
 800a0da:	42b8      	cmp	r0, r7
 800a0dc:	f67f ae82 	bls.w	8009de4 <HAL_RCC_OscConfig+0xb8>
 800a0e0:	e6b5      	b.n	8009e4e <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a0e2:	4d65      	ldr	r5, [pc, #404]	@ (800a278 <HAL_RCC_OscConfig+0x54c>)
 800a0e4:	692b      	ldr	r3, [r5, #16]
 800a0e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0ea:	2b18      	cmp	r3, #24
 800a0ec:	d078      	beq.n	800a1e0 <HAL_RCC_OscConfig+0x4b4>
        __HAL_RCC_PLL_DISABLE();
 800a0ee:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a0f0:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800a0f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a0f6:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a0f8:	d165      	bne.n	800a1c6 <HAL_RCC_OscConfig+0x49a>
        tickstart = HAL_GetTick();
 800a0fa:	f7fc faff 	bl	80066fc <HAL_GetTick>
 800a0fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a100:	682b      	ldr	r3, [r5, #0]
 800a102:	0199      	lsls	r1, r3, #6
 800a104:	d459      	bmi.n	800a1ba <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a106:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800a108:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a10a:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800a10e:	f023 0303 	bic.w	r3, r3, #3
 800a112:	4313      	orrs	r3, r2
 800a114:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a116:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800a11a:	62ab      	str	r3, [r5, #40]	@ 0x28
 800a11c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a11e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a120:	3b01      	subs	r3, #1
 800a122:	3a01      	subs	r2, #1
 800a124:	025b      	lsls	r3, r3, #9
 800a126:	0412      	lsls	r2, r2, #16
 800a128:	b29b      	uxth	r3, r3
 800a12a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a12e:	4313      	orrs	r3, r2
 800a130:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a132:	3a01      	subs	r2, #1
 800a134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a138:	4313      	orrs	r3, r2
 800a13a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a13c:	3a01      	subs	r2, #1
 800a13e:	0612      	lsls	r2, r2, #24
 800a140:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a144:	4313      	orrs	r3, r2
 800a146:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800a148:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a14a:	f023 0301 	bic.w	r3, r3, #1
 800a14e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a150:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800a152:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800a154:	f36f 03cf 	bfc	r3, #3, #13
 800a158:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a15c:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a15e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a160:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a162:	f023 030c 	bic.w	r3, r3, #12
 800a166:	4313      	orrs	r3, r2
 800a168:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a16a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a16c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a16e:	f023 0302 	bic.w	r3, r3, #2
 800a172:	4313      	orrs	r3, r2
 800a174:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a176:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a17c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a17e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a184:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a186:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a188:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a18c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800a18e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a190:	f043 0301 	orr.w	r3, r3, #1
 800a194:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800a196:	682b      	ldr	r3, [r5, #0]
 800a198:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a19c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a19e:	f7fc faad 	bl	80066fc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1a2:	4d35      	ldr	r5, [pc, #212]	@ (800a278 <HAL_RCC_OscConfig+0x54c>)
        tickstart = HAL_GetTick();
 800a1a4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1a6:	682b      	ldr	r3, [r5, #0]
 800a1a8:	019a      	lsls	r2, r3, #6
 800a1aa:	f53f ae23 	bmi.w	8009df4 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1ae:	f7fc faa5 	bl	80066fc <HAL_GetTick>
 800a1b2:	1b00      	subs	r0, r0, r4
 800a1b4:	2802      	cmp	r0, #2
 800a1b6:	d9f6      	bls.n	800a1a6 <HAL_RCC_OscConfig+0x47a>
 800a1b8:	e649      	b.n	8009e4e <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1ba:	f7fc fa9f 	bl	80066fc <HAL_GetTick>
 800a1be:	1b80      	subs	r0, r0, r6
 800a1c0:	2802      	cmp	r0, #2
 800a1c2:	d99d      	bls.n	800a100 <HAL_RCC_OscConfig+0x3d4>
 800a1c4:	e643      	b.n	8009e4e <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800a1c6:	f7fc fa99 	bl	80066fc <HAL_GetTick>
 800a1ca:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1cc:	682b      	ldr	r3, [r5, #0]
 800a1ce:	019b      	lsls	r3, r3, #6
 800a1d0:	f57f ae10 	bpl.w	8009df4 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1d4:	f7fc fa92 	bl	80066fc <HAL_GetTick>
 800a1d8:	1b00      	subs	r0, r0, r4
 800a1da:	2802      	cmp	r0, #2
 800a1dc:	d9f6      	bls.n	800a1cc <HAL_RCC_OscConfig+0x4a0>
 800a1de:	e636      	b.n	8009e4e <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1e0:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a1e2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a1e4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1e6:	f43f ae1a 	beq.w	8009e1e <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1ea:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1ee:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a1f0:	4281      	cmp	r1, r0
 800a1f2:	f47f ae14 	bne.w	8009e1e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a1f6:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a1fc:	428a      	cmp	r2, r1
 800a1fe:	f47f ae0e 	bne.w	8009e1e <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a202:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a204:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800a208:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a20a:	4291      	cmp	r1, r2
 800a20c:	f47f ae07 	bne.w	8009e1e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a210:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a212:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800a216:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a218:	4291      	cmp	r1, r2
 800a21a:	f47f ae00 	bne.w	8009e1e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a21e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a220:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800a224:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a226:	4291      	cmp	r1, r2
 800a228:	f47f adf9 	bne.w	8009e1e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a22c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a22e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a232:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a234:	4293      	cmp	r3, r2
 800a236:	f47f adf2 	bne.w	8009e1e <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a23a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a23c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a23e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a242:	429a      	cmp	r2, r3
 800a244:	f43f add6 	beq.w	8009df4 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800a248:	4d0b      	ldr	r5, [pc, #44]	@ (800a278 <HAL_RCC_OscConfig+0x54c>)
 800a24a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a24c:	f023 0301 	bic.w	r3, r3, #1
 800a250:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800a252:	f7fc fa53 	bl	80066fc <HAL_GetTick>
 800a256:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a258:	f7fc fa50 	bl	80066fc <HAL_GetTick>
 800a25c:	42b0      	cmp	r0, r6
 800a25e:	d0fb      	beq.n	800a258 <HAL_RCC_OscConfig+0x52c>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a260:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800a262:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800a264:	f36f 03cf 	bfc	r3, #3, #13
 800a268:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a26c:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800a26e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a270:	f043 0301 	orr.w	r3, r3, #1
 800a274:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800a276:	e5bd      	b.n	8009df4 <HAL_RCC_OscConfig+0xc8>
 800a278:	58024400 	.word	0x58024400

0800a27c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a27c:	b570      	push	{r4, r5, r6, lr}
 800a27e:	4c23      	ldr	r4, [pc, #140]	@ (800a30c <HAL_RCC_MCOConfig+0x90>)
 800a280:	b088      	sub	sp, #32
 800a282:	460e      	mov	r6, r1
 800a284:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a286:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800a28a:	b9f8      	cbnz	r0, 800a2cc <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800a28c:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a290:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a294:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800a296:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800a29a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a29e:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800a2a0:	f003 0301 	and.w	r3, r3, #1
 800a2a4:	9301      	str	r3, [sp, #4]
 800a2a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2ae:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2b0:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a2b4:	4816      	ldr	r0, [pc, #88]	@ (800a310 <HAL_RCC_MCOConfig+0x94>)
 800a2b6:	f7fd fa4b 	bl	8007750 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a2ba:	6923      	ldr	r3, [r4, #16]
 800a2bc:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800a2c0:	ea43 0106 	orr.w	r1, r3, r6
 800a2c4:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a2c6:	6121      	str	r1, [r4, #16]
  }
}
 800a2c8:	b008      	add	sp, #32
 800a2ca:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800a2cc:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2d4:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a2d6:	480f      	ldr	r0, [pc, #60]	@ (800a314 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800a2d8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800a2dc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800a2e0:	f003 0304 	and.w	r3, r3, #4
 800a2e4:	9302      	str	r3, [sp, #8]
 800a2e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a2f4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a2f6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a2f8:	f7fd fa2a 	bl	8007750 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a2fc:	6923      	ldr	r3, [r4, #16]
 800a2fe:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800a302:	ea43 0106 	orr.w	r1, r3, r6
 800a306:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800a30a:	e7dc      	b.n	800a2c6 <HAL_RCC_MCOConfig+0x4a>
 800a30c:	58024400 	.word	0x58024400
 800a310:	58020000 	.word	0x58020000
 800a314:	58020800 	.word	0x58020800

0800a318 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a318:	4b49      	ldr	r3, [pc, #292]	@ (800a440 <HAL_RCC_GetSysClockFreq+0x128>)
 800a31a:	691a      	ldr	r2, [r3, #16]
 800a31c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800a320:	2a10      	cmp	r2, #16
{
 800a322:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a324:	f000 8088 	beq.w	800a438 <HAL_RCC_GetSysClockFreq+0x120>
 800a328:	2a18      	cmp	r2, #24
 800a32a:	d00c      	beq.n	800a346 <HAL_RCC_GetSysClockFreq+0x2e>
 800a32c:	2a00      	cmp	r2, #0
 800a32e:	f040 8085 	bne.w	800a43c <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	4843      	ldr	r0, [pc, #268]	@ (800a444 <HAL_RCC_GetSysClockFreq+0x12c>)
 800a336:	f012 0f20 	tst.w	r2, #32
 800a33a:	d003      	beq.n	800a344 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a342:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800a344:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a346:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a348:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a34a:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800a34c:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a350:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a354:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800a356:	d0f5      	beq.n	800a344 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a358:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a35c:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a360:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a364:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a368:	4362      	muls	r2, r4
 800a36a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
        switch (pllsource)
 800a36e:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a374:	ee06 2a90 	vmov	s13, r2
 800a378:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 800a37c:	d04e      	beq.n	800a41c <HAL_RCC_GetSysClockFreq+0x104>
 800a37e:	2902      	cmp	r1, #2
 800a380:	d03e      	beq.n	800a400 <HAL_RCC_GetSysClockFreq+0xe8>
 800a382:	2900      	cmp	r1, #0
 800a384:	d14a      	bne.n	800a41c <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	0692      	lsls	r2, r2, #26
 800a38a:	d527      	bpl.n	800a3dc <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a38c:	6819      	ldr	r1, [r3, #0]
 800a38e:	4a2d      	ldr	r2, [pc, #180]	@ (800a444 <HAL_RCC_GetSysClockFreq+0x12c>)
 800a390:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a396:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a39c:	ee07 2a90 	vmov	s15, r2
 800a3a0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800a3a4:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800a3a8:	ee07 3a10 	vmov	s14, r3
 800a3ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a3b0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a3b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a3b8:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a3bc:	4b20      	ldr	r3, [pc, #128]	@ (800a440 <HAL_RCC_GetSysClockFreq+0x128>)
 800a3be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3c0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a3c4:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a3c6:	ee07 3a10 	vmov	s14, r3
 800a3ca:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800a3ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a3d2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800a3d6:	ee17 0a90 	vmov	r0, s15
 800a3da:	e7b3      	b.n	800a344 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e2:	ee07 3a90 	vmov	s15, r3
 800a3e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a3f2:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800a448 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3f6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a3fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800a3fe:	e7dd      	b.n	800a3bc <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a406:	ee07 3a90 	vmov	s15, r3
 800a40a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a412:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a416:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800a44c <HAL_RCC_GetSysClockFreq+0x134>
 800a41a:	e7ec      	b.n	800a3f6 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a41c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a41e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a422:	ee07 3a90 	vmov	s15, r3
 800a426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a42a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a42e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a432:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800a450 <HAL_RCC_GetSysClockFreq+0x138>
 800a436:	e7de      	b.n	800a3f6 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a438:	4806      	ldr	r0, [pc, #24]	@ (800a454 <HAL_RCC_GetSysClockFreq+0x13c>)
 800a43a:	e783      	b.n	800a344 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800a43c:	4806      	ldr	r0, [pc, #24]	@ (800a458 <HAL_RCC_GetSysClockFreq+0x140>)
 800a43e:	e781      	b.n	800a344 <HAL_RCC_GetSysClockFreq+0x2c>
 800a440:	58024400 	.word	0x58024400
 800a444:	03d09000 	.word	0x03d09000
 800a448:	4c742400 	.word	0x4c742400
 800a44c:	4bbebc20 	.word	0x4bbebc20
 800a450:	4a742400 	.word	0x4a742400
 800a454:	017d7840 	.word	0x017d7840
 800a458:	003d0900 	.word	0x003d0900

0800a45c <HAL_RCC_ClockConfig>:
{
 800a45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a460:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800a462:	4604      	mov	r4, r0
 800a464:	b910      	cbnz	r0, 800a46c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800a466:	2001      	movs	r0, #1
}
 800a468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a46c:	4a88      	ldr	r2, [pc, #544]	@ (800a690 <HAL_RCC_ClockConfig+0x234>)
 800a46e:	6813      	ldr	r3, [r2, #0]
 800a470:	f003 030f 	and.w	r3, r3, #15
 800a474:	428b      	cmp	r3, r1
 800a476:	f0c0 8093 	bcc.w	800a5a0 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	075f      	lsls	r7, r3, #29
 800a47e:	f100 809b 	bmi.w	800a5b8 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a482:	071e      	lsls	r6, r3, #28
 800a484:	d50b      	bpl.n	800a49e <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a486:	4983      	ldr	r1, [pc, #524]	@ (800a694 <HAL_RCC_ClockConfig+0x238>)
 800a488:	6960      	ldr	r0, [r4, #20]
 800a48a:	69ca      	ldr	r2, [r1, #28]
 800a48c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a490:	4290      	cmp	r0, r2
 800a492:	d904      	bls.n	800a49e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a494:	69ca      	ldr	r2, [r1, #28]
 800a496:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a49a:	4302      	orrs	r2, r0
 800a49c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a49e:	06d8      	lsls	r0, r3, #27
 800a4a0:	d50b      	bpl.n	800a4ba <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a4a2:	497c      	ldr	r1, [pc, #496]	@ (800a694 <HAL_RCC_ClockConfig+0x238>)
 800a4a4:	69a0      	ldr	r0, [r4, #24]
 800a4a6:	69ca      	ldr	r2, [r1, #28]
 800a4a8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a4ac:	4290      	cmp	r0, r2
 800a4ae:	d904      	bls.n	800a4ba <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a4b0:	69ca      	ldr	r2, [r1, #28]
 800a4b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a4b6:	4302      	orrs	r2, r0
 800a4b8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a4ba:	0699      	lsls	r1, r3, #26
 800a4bc:	d50b      	bpl.n	800a4d6 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a4be:	4975      	ldr	r1, [pc, #468]	@ (800a694 <HAL_RCC_ClockConfig+0x238>)
 800a4c0:	69e0      	ldr	r0, [r4, #28]
 800a4c2:	6a0a      	ldr	r2, [r1, #32]
 800a4c4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a4c8:	4290      	cmp	r0, r2
 800a4ca:	d904      	bls.n	800a4d6 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a4cc:	6a0a      	ldr	r2, [r1, #32]
 800a4ce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a4d2:	4302      	orrs	r2, r0
 800a4d4:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4d6:	079a      	lsls	r2, r3, #30
 800a4d8:	d50b      	bpl.n	800a4f2 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a4da:	496e      	ldr	r1, [pc, #440]	@ (800a694 <HAL_RCC_ClockConfig+0x238>)
 800a4dc:	68e0      	ldr	r0, [r4, #12]
 800a4de:	698a      	ldr	r2, [r1, #24]
 800a4e0:	f002 020f 	and.w	r2, r2, #15
 800a4e4:	4290      	cmp	r0, r2
 800a4e6:	d904      	bls.n	800a4f2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4e8:	698a      	ldr	r2, [r1, #24]
 800a4ea:	f022 020f 	bic.w	r2, r2, #15
 800a4ee:	4302      	orrs	r2, r0
 800a4f0:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4f2:	07df      	lsls	r7, r3, #31
 800a4f4:	d46e      	bmi.n	800a5d4 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	079e      	lsls	r6, r3, #30
 800a4fa:	f100 80a1 	bmi.w	800a640 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a4fe:	4964      	ldr	r1, [pc, #400]	@ (800a690 <HAL_RCC_ClockConfig+0x234>)
 800a500:	680a      	ldr	r2, [r1, #0]
 800a502:	f002 020f 	and.w	r2, r2, #15
 800a506:	42aa      	cmp	r2, r5
 800a508:	f200 80a8 	bhi.w	800a65c <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a50c:	0758      	lsls	r0, r3, #29
 800a50e:	f100 80b1 	bmi.w	800a674 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a512:	0719      	lsls	r1, r3, #28
 800a514:	d50b      	bpl.n	800a52e <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a516:	495f      	ldr	r1, [pc, #380]	@ (800a694 <HAL_RCC_ClockConfig+0x238>)
 800a518:	6960      	ldr	r0, [r4, #20]
 800a51a:	69ca      	ldr	r2, [r1, #28]
 800a51c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a520:	4290      	cmp	r0, r2
 800a522:	d204      	bcs.n	800a52e <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a524:	69ca      	ldr	r2, [r1, #28]
 800a526:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a52a:	4302      	orrs	r2, r0
 800a52c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a52e:	06da      	lsls	r2, r3, #27
 800a530:	d50b      	bpl.n	800a54a <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a532:	4958      	ldr	r1, [pc, #352]	@ (800a694 <HAL_RCC_ClockConfig+0x238>)
 800a534:	69a0      	ldr	r0, [r4, #24]
 800a536:	69ca      	ldr	r2, [r1, #28]
 800a538:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a53c:	4290      	cmp	r0, r2
 800a53e:	d204      	bcs.n	800a54a <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a540:	69ca      	ldr	r2, [r1, #28]
 800a542:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a546:	4302      	orrs	r2, r0
 800a548:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a54a:	069b      	lsls	r3, r3, #26
 800a54c:	d50b      	bpl.n	800a566 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a54e:	4a51      	ldr	r2, [pc, #324]	@ (800a694 <HAL_RCC_ClockConfig+0x238>)
 800a550:	69e1      	ldr	r1, [r4, #28]
 800a552:	6a13      	ldr	r3, [r2, #32]
 800a554:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a558:	4299      	cmp	r1, r3
 800a55a:	d204      	bcs.n	800a566 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a55c:	6a13      	ldr	r3, [r2, #32]
 800a55e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a562:	430b      	orrs	r3, r1
 800a564:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a566:	f7ff fed7 	bl	800a318 <HAL_RCC_GetSysClockFreq>
 800a56a:	494a      	ldr	r1, [pc, #296]	@ (800a694 <HAL_RCC_ClockConfig+0x238>)
 800a56c:	4a4a      	ldr	r2, [pc, #296]	@ (800a698 <HAL_RCC_ClockConfig+0x23c>)
 800a56e:	698b      	ldr	r3, [r1, #24]
 800a570:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800a574:	5cd3      	ldrb	r3, [r2, r3]
 800a576:	f003 031f 	and.w	r3, r3, #31
 800a57a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a57c:	698b      	ldr	r3, [r1, #24]
 800a57e:	f003 030f 	and.w	r3, r3, #15
 800a582:	5cd3      	ldrb	r3, [r2, r3]
 800a584:	4a45      	ldr	r2, [pc, #276]	@ (800a69c <HAL_RCC_ClockConfig+0x240>)
 800a586:	f003 031f 	and.w	r3, r3, #31
 800a58a:	fa20 f303 	lsr.w	r3, r0, r3
 800a58e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800a590:	4b43      	ldr	r3, [pc, #268]	@ (800a6a0 <HAL_RCC_ClockConfig+0x244>)
 800a592:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800a594:	4b43      	ldr	r3, [pc, #268]	@ (800a6a4 <HAL_RCC_ClockConfig+0x248>)
}
 800a596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800a59a:	6818      	ldr	r0, [r3, #0]
 800a59c:	f7f7 ba3e 	b.w	8001a1c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5a0:	6813      	ldr	r3, [r2, #0]
 800a5a2:	f023 030f 	bic.w	r3, r3, #15
 800a5a6:	430b      	orrs	r3, r1
 800a5a8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5aa:	6813      	ldr	r3, [r2, #0]
 800a5ac:	f003 030f 	and.w	r3, r3, #15
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	f47f af58 	bne.w	800a466 <HAL_RCC_ClockConfig+0xa>
 800a5b6:	e760      	b.n	800a47a <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a5b8:	4936      	ldr	r1, [pc, #216]	@ (800a694 <HAL_RCC_ClockConfig+0x238>)
 800a5ba:	6920      	ldr	r0, [r4, #16]
 800a5bc:	698a      	ldr	r2, [r1, #24]
 800a5be:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a5c2:	4290      	cmp	r0, r2
 800a5c4:	f67f af5d 	bls.w	800a482 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a5c8:	698a      	ldr	r2, [r1, #24]
 800a5ca:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a5ce:	4302      	orrs	r2, r0
 800a5d0:	618a      	str	r2, [r1, #24]
 800a5d2:	e756      	b.n	800a482 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a5d4:	4b2f      	ldr	r3, [pc, #188]	@ (800a694 <HAL_RCC_ClockConfig+0x238>)
 800a5d6:	68a1      	ldr	r1, [r4, #8]
 800a5d8:	699a      	ldr	r2, [r3, #24]
 800a5da:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800a5de:	430a      	orrs	r2, r1
 800a5e0:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5e2:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a5e4:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5e6:	2902      	cmp	r1, #2
 800a5e8:	d11d      	bne.n	800a626 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a5ea:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5ee:	f43f af3a 	beq.w	800a466 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a5f2:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5f4:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5f8:	4f26      	ldr	r7, [pc, #152]	@ (800a694 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a5fa:	f022 0207 	bic.w	r2, r2, #7
 800a5fe:	430a      	orrs	r2, r1
 800a600:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800a602:	f7fc f87b 	bl	80066fc <HAL_GetTick>
 800a606:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	6862      	ldr	r2, [r4, #4]
 800a60c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a610:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800a614:	f43f af6f 	beq.w	800a4f6 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a618:	f7fc f870 	bl	80066fc <HAL_GetTick>
 800a61c:	1b80      	subs	r0, r0, r6
 800a61e:	4540      	cmp	r0, r8
 800a620:	d9f2      	bls.n	800a608 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800a622:	2003      	movs	r0, #3
 800a624:	e720      	b.n	800a468 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a626:	2903      	cmp	r1, #3
 800a628:	d102      	bne.n	800a630 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a62a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800a62e:	e7de      	b.n	800a5ee <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a630:	2901      	cmp	r1, #1
 800a632:	d102      	bne.n	800a63a <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a634:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a638:	e7d9      	b.n	800a5ee <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a63a:	f012 0f04 	tst.w	r2, #4
 800a63e:	e7d6      	b.n	800a5ee <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a640:	4914      	ldr	r1, [pc, #80]	@ (800a694 <HAL_RCC_ClockConfig+0x238>)
 800a642:	68e0      	ldr	r0, [r4, #12]
 800a644:	698a      	ldr	r2, [r1, #24]
 800a646:	f002 020f 	and.w	r2, r2, #15
 800a64a:	4290      	cmp	r0, r2
 800a64c:	f4bf af57 	bcs.w	800a4fe <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a650:	698a      	ldr	r2, [r1, #24]
 800a652:	f022 020f 	bic.w	r2, r2, #15
 800a656:	4302      	orrs	r2, r0
 800a658:	618a      	str	r2, [r1, #24]
 800a65a:	e750      	b.n	800a4fe <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a65c:	680a      	ldr	r2, [r1, #0]
 800a65e:	f022 020f 	bic.w	r2, r2, #15
 800a662:	432a      	orrs	r2, r5
 800a664:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a666:	680a      	ldr	r2, [r1, #0]
 800a668:	f002 020f 	and.w	r2, r2, #15
 800a66c:	42aa      	cmp	r2, r5
 800a66e:	f47f aefa 	bne.w	800a466 <HAL_RCC_ClockConfig+0xa>
 800a672:	e74b      	b.n	800a50c <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a674:	4907      	ldr	r1, [pc, #28]	@ (800a694 <HAL_RCC_ClockConfig+0x238>)
 800a676:	6920      	ldr	r0, [r4, #16]
 800a678:	698a      	ldr	r2, [r1, #24]
 800a67a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a67e:	4290      	cmp	r0, r2
 800a680:	f4bf af47 	bcs.w	800a512 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a684:	698a      	ldr	r2, [r1, #24]
 800a686:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a68a:	4302      	orrs	r2, r0
 800a68c:	618a      	str	r2, [r1, #24]
 800a68e:	e740      	b.n	800a512 <HAL_RCC_ClockConfig+0xb6>
 800a690:	52002000 	.word	0x52002000
 800a694:	58024400 	.word	0x58024400
 800a698:	08026eac 	.word	0x08026eac
 800a69c:	24000068 	.word	0x24000068
 800a6a0:	2400006c 	.word	0x2400006c
 800a6a4:	24000074 	.word	0x24000074

0800a6a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6a8:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a6aa:	f7ff fe35 	bl	800a318 <HAL_RCC_GetSysClockFreq>
 800a6ae:	4a0b      	ldr	r2, [pc, #44]	@ (800a6dc <HAL_RCC_GetHCLKFreq+0x34>)
 800a6b0:	490b      	ldr	r1, [pc, #44]	@ (800a6e0 <HAL_RCC_GetHCLKFreq+0x38>)
 800a6b2:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a6b4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a6b6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a6ba:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a6be:	5ccb      	ldrb	r3, [r1, r3]
 800a6c0:	f003 031f 	and.w	r3, r3, #31
 800a6c4:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a6c8:	5c88      	ldrb	r0, [r1, r2]
 800a6ca:	4a06      	ldr	r2, [pc, #24]	@ (800a6e4 <HAL_RCC_GetHCLKFreq+0x3c>)
 800a6cc:	f000 001f 	and.w	r0, r0, #31
 800a6d0:	fa23 f000 	lsr.w	r0, r3, r0
 800a6d4:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a6d6:	4a04      	ldr	r2, [pc, #16]	@ (800a6e8 <HAL_RCC_GetHCLKFreq+0x40>)
 800a6d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800a6da:	bd08      	pop	{r3, pc}
 800a6dc:	58024400 	.word	0x58024400
 800a6e0:	08026eac 	.word	0x08026eac
 800a6e4:	24000068 	.word	0x24000068
 800a6e8:	2400006c 	.word	0x2400006c

0800a6ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6ec:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a6ee:	f7ff ffdb 	bl	800a6a8 <HAL_RCC_GetHCLKFreq>
 800a6f2:	4b05      	ldr	r3, [pc, #20]	@ (800a708 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a6f4:	4a05      	ldr	r2, [pc, #20]	@ (800a70c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a6f6:	69db      	ldr	r3, [r3, #28]
 800a6f8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a6fc:	5cd3      	ldrb	r3, [r2, r3]
 800a6fe:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a702:	40d8      	lsrs	r0, r3
 800a704:	bd08      	pop	{r3, pc}
 800a706:	bf00      	nop
 800a708:	58024400 	.word	0x58024400
 800a70c:	08026eac 	.word	0x08026eac

0800a710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a710:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a712:	f7ff ffc9 	bl	800a6a8 <HAL_RCC_GetHCLKFreq>
 800a716:	4b05      	ldr	r3, [pc, #20]	@ (800a72c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a718:	4a05      	ldr	r2, [pc, #20]	@ (800a730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a71a:	69db      	ldr	r3, [r3, #28]
 800a71c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a720:	5cd3      	ldrb	r3, [r2, r3]
 800a722:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a726:	40d8      	lsrs	r0, r3
 800a728:	bd08      	pop	{r3, pc}
 800a72a:	bf00      	nop
 800a72c:	58024400 	.word	0x58024400
 800a730:	08026eac 	.word	0x08026eac

0800a734 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a734:	233f      	movs	r3, #63	@ 0x3f
 800a736:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a738:	4b11      	ldr	r3, [pc, #68]	@ (800a780 <HAL_RCC_GetClockConfig+0x4c>)
 800a73a:	691a      	ldr	r2, [r3, #16]
 800a73c:	f002 0207 	and.w	r2, r2, #7
 800a740:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a742:	699a      	ldr	r2, [r3, #24]
 800a744:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800a748:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a74a:	699a      	ldr	r2, [r3, #24]
 800a74c:	f002 020f 	and.w	r2, r2, #15
 800a750:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a752:	699a      	ldr	r2, [r3, #24]
 800a754:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a758:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a75a:	69da      	ldr	r2, [r3, #28]
 800a75c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a760:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a762:	69da      	ldr	r2, [r3, #28]
 800a764:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a768:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a76a:	6a1b      	ldr	r3, [r3, #32]
 800a76c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a770:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a772:	4b04      	ldr	r3, [pc, #16]	@ (800a784 <HAL_RCC_GetClockConfig+0x50>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f003 030f 	and.w	r3, r3, #15
 800a77a:	600b      	str	r3, [r1, #0]
}
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	58024400 	.word	0x58024400
 800a784:	52002000 	.word	0x52002000

0800a788 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a78a:	4c39      	ldr	r4, [pc, #228]	@ (800a870 <RCCEx_PLL2_Config+0xe8>)
{
 800a78c:	4606      	mov	r6, r0
 800a78e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a790:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a792:	f003 0303 	and.w	r3, r3, #3
 800a796:	2b03      	cmp	r3, #3
 800a798:	d067      	beq.n	800a86a <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a7a0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7a2:	f7fb ffab 	bl	80066fc <HAL_GetTick>
 800a7a6:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a7a8:	6823      	ldr	r3, [r4, #0]
 800a7aa:	011a      	lsls	r2, r3, #4
 800a7ac:	d449      	bmi.n	800a842 <RCCEx_PLL2_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a7ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a7b0:	6832      	ldr	r2, [r6, #0]
 800a7b2:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a7b6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800a7ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a7bc:	68b3      	ldr	r3, [r6, #8]
 800a7be:	68f2      	ldr	r2, [r6, #12]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	3a01      	subs	r2, #1
 800a7c4:	025b      	lsls	r3, r3, #9
 800a7c6:	0412      	lsls	r2, r2, #16
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	6872      	ldr	r2, [r6, #4]
 800a7d2:	3a01      	subs	r2, #1
 800a7d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	6932      	ldr	r2, [r6, #16]
 800a7dc:	3a01      	subs	r2, #1
 800a7de:	0612      	lsls	r2, r2, #24
 800a7e0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a7e8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a7ea:	6972      	ldr	r2, [r6, #20]
 800a7ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a7f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a7f6:	69b2      	ldr	r2, [r6, #24]
 800a7f8:	f023 0320 	bic.w	r3, r3, #32
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a800:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a802:	f023 0310 	bic.w	r3, r3, #16
 800a806:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a808:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a80a:	69f2      	ldr	r2, [r6, #28]
 800a80c:	f36f 03cf 	bfc	r3, #3, #13
 800a810:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a814:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a816:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a818:	f043 0310 	orr.w	r3, r3, #16
 800a81c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a81e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a820:	b9b5      	cbnz	r5, 800a850 <RCCEx_PLL2_Config+0xc8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a822:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a826:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a828:	4c11      	ldr	r4, [pc, #68]	@ (800a870 <RCCEx_PLL2_Config+0xe8>)
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a830:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a832:	f7fb ff63 	bl	80066fc <HAL_GetTick>
 800a836:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	011b      	lsls	r3, r3, #4
 800a83c:	d50f      	bpl.n	800a85e <RCCEx_PLL2_Config+0xd6>
    }

  }


  return status;
 800a83e:	2000      	movs	r0, #0
 800a840:	e005      	b.n	800a84e <RCCEx_PLL2_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a842:	f7fb ff5b 	bl	80066fc <HAL_GetTick>
 800a846:	1bc0      	subs	r0, r0, r7
 800a848:	2802      	cmp	r0, #2
 800a84a:	d9ad      	bls.n	800a7a8 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800a84c:	2003      	movs	r0, #3
}
 800a84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800a850:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a852:	bf0c      	ite	eq
 800a854:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a858:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800a85c:	e7e3      	b.n	800a826 <RCCEx_PLL2_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a85e:	f7fb ff4d 	bl	80066fc <HAL_GetTick>
 800a862:	1b40      	subs	r0, r0, r5
 800a864:	2802      	cmp	r0, #2
 800a866:	d9e7      	bls.n	800a838 <RCCEx_PLL2_Config+0xb0>
 800a868:	e7f0      	b.n	800a84c <RCCEx_PLL2_Config+0xc4>
    return HAL_ERROR;
 800a86a:	2001      	movs	r0, #1
 800a86c:	e7ef      	b.n	800a84e <RCCEx_PLL2_Config+0xc6>
 800a86e:	bf00      	nop
 800a870:	58024400 	.word	0x58024400

0800a874 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a876:	4c39      	ldr	r4, [pc, #228]	@ (800a95c <RCCEx_PLL3_Config+0xe8>)
{
 800a878:	4606      	mov	r6, r0
 800a87a:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a87c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a87e:	f003 0303 	and.w	r3, r3, #3
 800a882:	2b03      	cmp	r3, #3
 800a884:	d067      	beq.n	800a956 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a886:	6823      	ldr	r3, [r4, #0]
 800a888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a88c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a88e:	f7fb ff35 	bl	80066fc <HAL_GetTick>
 800a892:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a894:	6823      	ldr	r3, [r4, #0]
 800a896:	009a      	lsls	r2, r3, #2
 800a898:	d449      	bmi.n	800a92e <RCCEx_PLL3_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a89a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a89c:	6832      	ldr	r2, [r6, #0]
 800a89e:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800a8a2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800a8a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a8a8:	68b3      	ldr	r3, [r6, #8]
 800a8aa:	68f2      	ldr	r2, [r6, #12]
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	3a01      	subs	r2, #1
 800a8b0:	025b      	lsls	r3, r3, #9
 800a8b2:	0412      	lsls	r2, r2, #16
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	6872      	ldr	r2, [r6, #4]
 800a8be:	3a01      	subs	r2, #1
 800a8c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	6932      	ldr	r2, [r6, #16]
 800a8c8:	3a01      	subs	r2, #1
 800a8ca:	0612      	lsls	r2, r2, #24
 800a8cc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a8d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a8d6:	6972      	ldr	r2, [r6, #20]
 800a8d8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a8e0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a8e2:	69b2      	ldr	r2, [r6, #24]
 800a8e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a8ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a8ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8f2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a8f4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a8f6:	69f2      	ldr	r2, [r6, #28]
 800a8f8:	f36f 03cf 	bfc	r3, #3, #13
 800a8fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a900:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a902:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a908:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a90a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a90c:	b9b5      	cbnz	r5, 800a93c <RCCEx_PLL3_Config+0xc8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a90e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a912:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a914:	4c11      	ldr	r4, [pc, #68]	@ (800a95c <RCCEx_PLL3_Config+0xe8>)
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a91c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a91e:	f7fb feed 	bl	80066fc <HAL_GetTick>
 800a922:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	d50f      	bpl.n	800a94a <RCCEx_PLL3_Config+0xd6>
    }

  }


  return status;
 800a92a:	2000      	movs	r0, #0
 800a92c:	e005      	b.n	800a93a <RCCEx_PLL3_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a92e:	f7fb fee5 	bl	80066fc <HAL_GetTick>
 800a932:	1bc0      	subs	r0, r0, r7
 800a934:	2802      	cmp	r0, #2
 800a936:	d9ad      	bls.n	800a894 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800a938:	2003      	movs	r0, #3
}
 800a93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800a93c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a93e:	bf0c      	ite	eq
 800a940:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a944:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800a948:	e7e3      	b.n	800a912 <RCCEx_PLL3_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a94a:	f7fb fed7 	bl	80066fc <HAL_GetTick>
 800a94e:	1b40      	subs	r0, r0, r5
 800a950:	2802      	cmp	r0, #2
 800a952:	d9e7      	bls.n	800a924 <RCCEx_PLL3_Config+0xb0>
 800a954:	e7f0      	b.n	800a938 <RCCEx_PLL3_Config+0xc4>
    return HAL_ERROR;
 800a956:	2001      	movs	r0, #1
 800a958:	e7ef      	b.n	800a93a <RCCEx_PLL3_Config+0xc6>
 800a95a:	bf00      	nop
 800a95c:	58024400 	.word	0x58024400

0800a960 <HAL_RCCEx_PeriphCLKConfig>:
{
 800a960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a964:	6803      	ldr	r3, [r0, #0]
{
 800a966:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a968:	011c      	lsls	r4, r3, #4
 800a96a:	d51e      	bpl.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a96c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800a96e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a972:	d02a      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a974:	d80f      	bhi.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800a976:	b1d3      	cbz	r3, 800a9ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800a978:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a97c:	d01d      	beq.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800a97e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a980:	682b      	ldr	r3, [r5, #0]
 800a982:	05d8      	lsls	r0, r3, #23
 800a984:	d54f      	bpl.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a986:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800a988:	2b04      	cmp	r3, #4
 800a98a:	d84b      	bhi.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800a98c:	e8df f003 	tbb	[pc, r3]
 800a990:	27443d22 	.word	0x27443d22
 800a994:	27          	.byte	0x27
 800a995:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a996:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a99a:	d1f0      	bne.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a99c:	4a86      	ldr	r2, [pc, #536]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a99e:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800a9a0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a9a2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a9a6:	430b      	orrs	r3, r1
 800a9a8:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a9aa:	2600      	movs	r6, #0
 800a9ac:	e7e8      	b.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9ae:	4a82      	ldr	r2, [pc, #520]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a9b0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a9b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a9b8:	e7f0      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a9ba:	2102      	movs	r1, #2
 800a9bc:	3008      	adds	r0, #8
 800a9be:	f7ff fee3 	bl	800a788 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9c2:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d1db      	bne.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800a9c8:	e7e8      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9ca:	2102      	movs	r1, #2
 800a9cc:	3028      	adds	r0, #40	@ 0x28
 800a9ce:	f7ff ff51 	bl	800a874 <RCCEx_PLL3_Config>
 800a9d2:	e7f6      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9d4:	4a78      	ldr	r2, [pc, #480]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a9d6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a9d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a9de:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800a9e0:	bb1c      	cbnz	r4, 800aa2a <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a9e2:	4a75      	ldr	r2, [pc, #468]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a9e4:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800a9e6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a9e8:	f023 0307 	bic.w	r3, r3, #7
 800a9ec:	430b      	orrs	r3, r1
 800a9ee:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a9f0:	682b      	ldr	r3, [r5, #0]
 800a9f2:	0599      	lsls	r1, r3, #22
 800a9f4:	d528      	bpl.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a9f6:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800a9f8:	2b80      	cmp	r3, #128	@ 0x80
 800a9fa:	d043      	beq.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800a9fc:	d817      	bhi.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800a9fe:	b3a3      	cbz	r3, 800aa6a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800aa00:	2b40      	cmp	r3, #64	@ 0x40
 800aa02:	d038      	beq.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800aa04:	2601      	movs	r6, #1
 800aa06:	4634      	mov	r4, r6
 800aa08:	e01e      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	f105 0008 	add.w	r0, r5, #8
 800aa10:	f7ff feba 	bl	800a788 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa14:	4604      	mov	r4, r0
        break;
 800aa16:	e7e3      	b.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa18:	2100      	movs	r1, #0
 800aa1a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aa1e:	f7ff ff29 	bl	800a874 <RCCEx_PLL3_Config>
 800aa22:	e7f7      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800aa24:	2601      	movs	r6, #1
 800aa26:	4634      	mov	r4, r6
 800aa28:	e7e2      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
      status = ret;
 800aa2a:	4626      	mov	r6, r4
 800aa2c:	e7e0      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800aa2e:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa30:	d002      	beq.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800aa32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa36:	d1e5      	bne.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800aa38:	bb54      	cbnz	r4, 800aa90 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800aa3a:	4a5f      	ldr	r2, [pc, #380]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aa3c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800aa3e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800aa40:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800aa44:	430b      	orrs	r3, r1
 800aa46:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aa48:	682b      	ldr	r3, [r5, #0]
 800aa4a:	055a      	lsls	r2, r3, #21
 800aa4c:	d531      	bpl.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800aa4e:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800aa52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa56:	d049      	beq.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800aa58:	d81c      	bhi.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d039      	beq.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800aa5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa62:	d03c      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800aa64:	2601      	movs	r6, #1
 800aa66:	4634      	mov	r4, r6
 800aa68:	e023      	b.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa6a:	4a53      	ldr	r2, [pc, #332]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aa6c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800aa6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa72:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800aa74:	e7e0      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa76:	2100      	movs	r1, #0
 800aa78:	f105 0008 	add.w	r0, r5, #8
 800aa7c:	f7ff fe84 	bl	800a788 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa80:	4604      	mov	r4, r0
        break;
 800aa82:	e7d9      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa84:	2100      	movs	r1, #0
 800aa86:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aa8a:	f7ff fef3 	bl	800a874 <RCCEx_PLL3_Config>
 800aa8e:	e7f7      	b.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x120>
      status = ret;
 800aa90:	4626      	mov	r6, r4
 800aa92:	e7d9      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800aa94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aa98:	d002      	beq.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800aa9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aa9e:	d1e1      	bne.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800aaa0:	bb54      	cbnz	r4, 800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aaa2:	4a45      	ldr	r2, [pc, #276]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aaa4:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800aaa8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800aaaa:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800aaae:	430b      	orrs	r3, r1
 800aab0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aab2:	682b      	ldr	r3, [r5, #0]
 800aab4:	051b      	lsls	r3, r3, #20
 800aab6:	d530      	bpl.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800aab8:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800aabc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aac0:	d045      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800aac2:	d81b      	bhi.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800aac4:	b3b3      	cbz	r3, 800ab34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800aac6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aaca:	d039      	beq.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800aacc:	2601      	movs	r6, #1
 800aace:	4634      	mov	r4, r6
 800aad0:	e023      	b.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aad2:	4a39      	ldr	r2, [pc, #228]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aad4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800aad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aada:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800aadc:	e7e0      	b.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aade:	2100      	movs	r1, #0
 800aae0:	f105 0008 	add.w	r0, r5, #8
 800aae4:	f7ff fe50 	bl	800a788 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aae8:	4604      	mov	r4, r0
        break;
 800aaea:	e7d9      	b.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aaec:	2100      	movs	r1, #0
 800aaee:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aaf2:	f7ff febf 	bl	800a874 <RCCEx_PLL3_Config>
 800aaf6:	e7f7      	b.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      status = ret;
 800aaf8:	4626      	mov	r6, r4
 800aafa:	e7da      	b.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800aafc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ab00:	d002      	beq.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ab02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ab06:	d1e1      	bne.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800ab08:	bb3c      	cbnz	r4, 800ab5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab0a:	4a2b      	ldr	r2, [pc, #172]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ab0c:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800ab10:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ab12:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800ab16:	430b      	orrs	r3, r1
 800ab18:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ab1a:	682b      	ldr	r3, [r5, #0]
 800ab1c:	019f      	lsls	r7, r3, #6
 800ab1e:	d528      	bpl.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800ab20:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800ab22:	2b20      	cmp	r3, #32
 800ab24:	d03e      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800ab26:	d81a      	bhi.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800ab28:	b1db      	cbz	r3, 800ab62 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ab2a:	2b10      	cmp	r3, #16
 800ab2c:	d034      	beq.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800ab2e:	2601      	movs	r6, #1
 800ab30:	4634      	mov	r4, r6
 800ab32:	e01e      	b.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab34:	4a20      	ldr	r2, [pc, #128]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ab36:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ab38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ab3e:	e7e3      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab40:	2100      	movs	r1, #0
 800ab42:	f105 0008 	add.w	r0, r5, #8
 800ab46:	f7ff fe1f 	bl	800a788 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab4a:	4604      	mov	r4, r0
        break;
 800ab4c:	e7dc      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab4e:	2100      	movs	r1, #0
 800ab50:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ab54:	f7ff fe8e 	bl	800a874 <RCCEx_PLL3_Config>
 800ab58:	e7f7      	b.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      status = ret;
 800ab5a:	4626      	mov	r6, r4
 800ab5c:	e7dd      	b.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800ab5e:	2b30      	cmp	r3, #48	@ 0x30
 800ab60:	d1e5      	bne.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800ab62:	bb34      	cbnz	r4, 800abb2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ab64:	4a14      	ldr	r2, [pc, #80]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ab66:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ab68:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ab6a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800ab6e:	430b      	orrs	r3, r1
 800ab70:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ab72:	682b      	ldr	r3, [r5, #0]
 800ab74:	04d8      	lsls	r0, r3, #19
 800ab76:	d530      	bpl.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800ab78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab7e:	f000 8095 	beq.w	800acac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800ab82:	d81b      	bhi.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 8084 	beq.w	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800ab8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab8e:	f000 8086 	beq.w	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800ab92:	2601      	movs	r6, #1
 800ab94:	4634      	mov	r4, r6
 800ab96:	e020      	b.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab98:	4a07      	ldr	r2, [pc, #28]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ab9a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ab9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aba0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800aba2:	e7de      	b.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aba4:	2102      	movs	r1, #2
 800aba6:	f105 0008 	add.w	r0, r5, #8
 800abaa:	f7ff fded 	bl	800a788 <RCCEx_PLL2_Config>
 800abae:	4604      	mov	r4, r0
        break;
 800abb0:	e7d7      	b.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x202>
      status = ret;
 800abb2:	4626      	mov	r6, r4
 800abb4:	e7dd      	b.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800abb6:	bf00      	nop
 800abb8:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800abbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800abc0:	d002      	beq.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800abc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abc6:	d1e4      	bne.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800abc8:	2c00      	cmp	r4, #0
 800abca:	d175      	bne.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x358>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800abcc:	4a93      	ldr	r2, [pc, #588]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800abce:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800abd0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800abd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abd6:	430b      	orrs	r3, r1
 800abd8:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800abda:	682b      	ldr	r3, [r5, #0]
 800abdc:	0499      	lsls	r1, r3, #18
 800abde:	d50c      	bpl.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800abe0:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800abe2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abe6:	f000 8081 	beq.w	800acec <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800abea:	d867      	bhi.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800abec:	2b00      	cmp	r3, #0
 800abee:	d06d      	beq.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800abf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abf4:	d073      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800abf6:	2601      	movs	r6, #1
 800abf8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800abfa:	682b      	ldr	r3, [r5, #0]
 800abfc:	045a      	lsls	r2, r3, #17
 800abfe:	d50e      	bpl.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800ac00:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800ac04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac08:	f000 8091 	beq.w	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800ac0c:	d876      	bhi.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x39c>
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d07c      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800ac12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac16:	f000 8083 	beq.w	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800ac1a:	2601      	movs	r6, #1
 800ac1c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800ac1e:	682b      	ldr	r3, [r5, #0]
 800ac20:	015b      	lsls	r3, r3, #5
 800ac22:	d515      	bpl.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800ac24:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800ac26:	b14b      	cbz	r3, 800ac3c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800ac28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac2c:	f040 8087 	bne.w	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac30:	2101      	movs	r1, #1
 800ac32:	f105 0008 	add.w	r0, r5, #8
 800ac36:	f7ff fda7 	bl	800a788 <RCCEx_PLL2_Config>
 800ac3a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ac3c:	2c00      	cmp	r4, #0
 800ac3e:	f040 8081 	bne.w	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800ac42:	4a76      	ldr	r2, [pc, #472]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800ac44:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800ac46:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ac48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac4c:	430b      	orrs	r3, r1
 800ac4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ac50:	682b      	ldr	r3, [r5, #0]
 800ac52:	041f      	lsls	r7, r3, #16
 800ac54:	d511      	bpl.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800ac56:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800ac58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac5c:	d074      	beq.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800ac5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac62:	d077      	beq.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d17c      	bne.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x402>
    if (ret == HAL_OK)
 800ac68:	2c00      	cmp	r4, #0
 800ac6a:	d17d      	bne.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x408>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ac6c:	4a6b      	ldr	r2, [pc, #428]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800ac6e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800ac70:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ac72:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800ac76:	430b      	orrs	r3, r1
 800ac78:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ac7a:	682b      	ldr	r3, [r5, #0]
 800ac7c:	01d8      	lsls	r0, r3, #7
 800ac7e:	f140 8083 	bpl.w	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch (PeriphClkInit->FmcClockSelection)
 800ac82:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800ac84:	2b03      	cmp	r3, #3
 800ac86:	f200 80c4 	bhi.w	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800ac8a:	e8df f003 	tbb	[pc, r3]
 800ac8e:	6f74      	.short	0x6f74
 800ac90:	74bb      	.short	0x74bb
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac92:	4a62      	ldr	r2, [pc, #392]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800ac94:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ac96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ac9c:	e794      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac9e:	2100      	movs	r1, #0
 800aca0:	f105 0008 	add.w	r0, r5, #8
 800aca4:	f7ff fd70 	bl	800a788 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aca8:	4604      	mov	r4, r0
        break;
 800acaa:	e78d      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800acac:	2100      	movs	r1, #0
 800acae:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800acb2:	f7ff fddf 	bl	800a874 <RCCEx_PLL3_Config>
 800acb6:	e7f7      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x348>
      status = ret;
 800acb8:	4626      	mov	r6, r4
 800acba:	e78e      	b.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800acbc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800acc0:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800acc4:	d002      	beq.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800acc6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800acca:	d194      	bne.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800accc:	b9a4      	cbnz	r4, 800acf8 <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800acce:	4a53      	ldr	r2, [pc, #332]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800acd0:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800acd2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800acd4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800acd8:	430b      	orrs	r3, r1
 800acda:	6513      	str	r3, [r2, #80]	@ 0x50
 800acdc:	e78d      	b.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acde:	2101      	movs	r1, #1
 800ace0:	f105 0008 	add.w	r0, r5, #8
 800ace4:	f7ff fd50 	bl	800a788 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ace8:	4604      	mov	r4, r0
        break;
 800acea:	e7ef      	b.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x36c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800acec:	2101      	movs	r1, #1
 800acee:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800acf2:	f7ff fdbf 	bl	800a874 <RCCEx_PLL3_Config>
 800acf6:	e7f7      	b.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x388>
      status = ret;
 800acf8:	4626      	mov	r6, r4
 800acfa:	e77e      	b.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800acfc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ad00:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800ad04:	d002      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800ad06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ad0a:	d186      	bne.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800ad0c:	b9ac      	cbnz	r4, 800ad3a <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ad0e:	4a43      	ldr	r2, [pc, #268]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800ad10:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800ad14:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ad16:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800ad1a:	430b      	orrs	r3, r1
 800ad1c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad1e:	e77e      	b.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad20:	2101      	movs	r1, #1
 800ad22:	f105 0008 	add.w	r0, r5, #8
 800ad26:	f7ff fd2f 	bl	800a788 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad2a:	4604      	mov	r4, r0
        break;
 800ad2c:	e7ee      	b.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad2e:	2101      	movs	r1, #1
 800ad30:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ad34:	f7ff fd9e 	bl	800a874 <RCCEx_PLL3_Config>
 800ad38:	e7f7      	b.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      status = ret;
 800ad3a:	4626      	mov	r6, r4
 800ad3c:	e76f      	b.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800ad3e:	2601      	movs	r6, #1
 800ad40:	4634      	mov	r4, r6
 800ad42:	e785      	b.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      status = ret;
 800ad44:	4626      	mov	r6, r4
 800ad46:	e783      	b.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad48:	4a34      	ldr	r2, [pc, #208]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800ad4a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ad4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad50:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ad52:	e789      	b.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad54:	2101      	movs	r1, #1
 800ad56:	f105 0008 	add.w	r0, r5, #8
 800ad5a:	f7ff fd15 	bl	800a788 <RCCEx_PLL2_Config>
 800ad5e:	4604      	mov	r4, r0
        break;
 800ad60:	e782      	b.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800ad62:	2601      	movs	r6, #1
 800ad64:	4634      	mov	r4, r6
 800ad66:	e788      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x31a>
      status = ret;
 800ad68:	4626      	mov	r6, r4
 800ad6a:	e786      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad6c:	4a2b      	ldr	r2, [pc, #172]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800ad6e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ad70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800ad76:	2c00      	cmp	r4, #0
 800ad78:	d14e      	bne.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ad7a:	4a28      	ldr	r2, [pc, #160]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800ad7c:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800ad7e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ad80:	f023 0303 	bic.w	r3, r3, #3
 800ad84:	430b      	orrs	r3, r1
 800ad86:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	0259      	lsls	r1, r3, #9
 800ad8c:	d554      	bpl.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ad8e:	4f24      	ldr	r7, [pc, #144]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad96:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800ad98:	f7fb fcb0 	bl	80066fc <HAL_GetTick>
 800ad9c:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	05da      	lsls	r2, r3, #23
 800ada2:	d541      	bpl.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if (ret == HAL_OK)
 800ada4:	2c00      	cmp	r4, #0
 800ada6:	d174      	bne.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x532>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ada8:	4b1c      	ldr	r3, [pc, #112]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800adaa:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800adae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800adb0:	4042      	eors	r2, r0
 800adb2:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800adb6:	d00b      	beq.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x470>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800adb8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800adba:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800adbc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800adc0:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800adc4:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800adc6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800adc8:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800adcc:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800adce:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800add0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800add4:	d048      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x508>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800add6:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800adda:	4910      	ldr	r1, [pc, #64]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800addc:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800ade0:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800ade4:	d151      	bne.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800ade6:	6908      	ldr	r0, [r1, #16]
 800ade8:	4a0e      	ldr	r2, [pc, #56]	@ (800ae24 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800adea:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800adee:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800adf2:	4302      	orrs	r2, r0
 800adf4:	610a      	str	r2, [r1, #16]
 800adf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adfa:	4a08      	ldr	r2, [pc, #32]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800adfc:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800adfe:	430b      	orrs	r3, r1
 800ae00:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae02:	e019      	b.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae04:	2102      	movs	r1, #2
 800ae06:	f105 0008 	add.w	r0, r5, #8
 800ae0a:	f7ff fcbd 	bl	800a788 <RCCEx_PLL2_Config>
 800ae0e:	4604      	mov	r4, r0
        break;
 800ae10:	e7b1      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch (PeriphClkInit->FmcClockSelection)
 800ae12:	2601      	movs	r6, #1
 800ae14:	4634      	mov	r4, r6
 800ae16:	e7b7      	b.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x428>
      status = ret;
 800ae18:	4626      	mov	r6, r4
 800ae1a:	e7b5      	b.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800ae1c:	58024400 	.word	0x58024400
 800ae20:	58024800 	.word	0x58024800
 800ae24:	00ffffcf 	.word	0x00ffffcf
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae28:	f7fb fc68 	bl	80066fc <HAL_GetTick>
 800ae2c:	eba0 0008 	sub.w	r0, r0, r8
 800ae30:	2864      	cmp	r0, #100	@ 0x64
 800ae32:	d9b4      	bls.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x43e>
        ret = HAL_TIMEOUT;
 800ae34:	2603      	movs	r6, #3
 800ae36:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ae38:	682b      	ldr	r3, [r5, #0]
 800ae3a:	07d8      	lsls	r0, r3, #31
 800ae3c:	d509      	bpl.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800ae3e:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800ae42:	2b10      	cmp	r3, #16
 800ae44:	d03e      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x564>
 800ae46:	d826      	bhi.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x536>
 800ae48:	b35b      	cbz	r3, 800aea2 <HAL_RCCEx_PeriphCLKConfig+0x542>
 800ae4a:	2b08      	cmp	r3, #8
 800ae4c:	d033      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800ae4e:	2601      	movs	r6, #1
 800ae50:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ae52:	682b      	ldr	r3, [r5, #0]
 800ae54:	0799      	lsls	r1, r3, #30
 800ae56:	d54b      	bpl.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ae58:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800ae5a:	2b05      	cmp	r3, #5
 800ae5c:	d85e      	bhi.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ae5e:	e8df f003 	tbb	[pc, r3]
 800ae62:	393f      	.short	0x393f
 800ae64:	3f3f3f57 	.word	0x3f3f3f57
        tickstart = HAL_GetTick();
 800ae68:	f7fb fc48 	bl	80066fc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae6c:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800af28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
        tickstart = HAL_GetTick();
 800ae70:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae72:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae76:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800ae7a:	079b      	lsls	r3, r3, #30
 800ae7c:	d4ab      	bmi.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x476>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae7e:	f7fb fc3d 	bl	80066fc <HAL_GetTick>
 800ae82:	1bc0      	subs	r0, r0, r7
 800ae84:	4548      	cmp	r0, r9
 800ae86:	d9f6      	bls.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800ae88:	e7d4      	b.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ae8a:	690a      	ldr	r2, [r1, #16]
 800ae8c:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800ae90:	e7b0      	b.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x494>
      status = ret;
 800ae92:	4626      	mov	r6, r4
 800ae94:	e7d0      	b.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    switch (PeriphClkInit->Usart16ClockSelection)
 800ae96:	f023 0208 	bic.w	r2, r3, #8
 800ae9a:	2a20      	cmp	r2, #32
 800ae9c:	d001      	beq.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x542>
 800ae9e:	2b18      	cmp	r3, #24
 800aea0:	d1d5      	bne.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if (ret == HAL_OK)
 800aea2:	b9ac      	cbnz	r4, 800aed0 <HAL_RCCEx_PeriphCLKConfig+0x570>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800aea4:	4a20      	ldr	r2, [pc, #128]	@ (800af28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aea6:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800aeaa:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800aeac:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800aeb0:	430b      	orrs	r3, r1
 800aeb2:	6553      	str	r3, [r2, #84]	@ 0x54
 800aeb4:	e7cd      	b.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aeb6:	2101      	movs	r1, #1
 800aeb8:	f105 0008 	add.w	r0, r5, #8
 800aebc:	f7ff fc64 	bl	800a788 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aec0:	4604      	mov	r4, r0
        break;
 800aec2:	e7ee      	b.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aec4:	2101      	movs	r1, #1
 800aec6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aeca:	f7ff fcd3 	bl	800a874 <RCCEx_PLL3_Config>
 800aece:	e7f7      	b.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = ret;
 800aed0:	4626      	mov	r6, r4
 800aed2:	e7be      	b.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aed4:	2101      	movs	r1, #1
 800aed6:	f105 0008 	add.w	r0, r5, #8
 800aeda:	f7ff fc55 	bl	800a788 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aede:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800aee0:	b9fc      	cbnz	r4, 800af22 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800aee2:	4a11      	ldr	r2, [pc, #68]	@ (800af28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aee4:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800aee6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800aee8:	f023 0307 	bic.w	r3, r3, #7
 800aeec:	430b      	orrs	r3, r1
 800aeee:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	075a      	lsls	r2, r3, #29
 800aef4:	d52b      	bpl.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800aef6:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800aefa:	2b05      	cmp	r3, #5
 800aefc:	f200 816e 	bhi.w	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800af00:	e8df f013 	tbh	[pc, r3, lsl #1]
 800af04:	0014001a 	.word	0x0014001a
 800af08:	001a0166 	.word	0x001a0166
 800af0c:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af10:	2101      	movs	r1, #1
 800af12:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800af16:	f7ff fcad 	bl	800a874 <RCCEx_PLL3_Config>
 800af1a:	e7e0      	b.n	800aede <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800af1c:	2601      	movs	r6, #1
 800af1e:	4634      	mov	r4, r6
 800af20:	e7e6      	b.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x590>
      status = ret;
 800af22:	4626      	mov	r6, r4
 800af24:	e7e4      	b.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x590>
 800af26:	bf00      	nop
 800af28:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af2c:	2101      	movs	r1, #1
 800af2e:	f105 0008 	add.w	r0, r5, #8
 800af32:	f7ff fc29 	bl	800a788 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af36:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800af38:	2c00      	cmp	r4, #0
 800af3a:	f040 8152 	bne.w	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800af3e:	4aaa      	ldr	r2, [pc, #680]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800af40:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800af44:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800af46:	f023 0307 	bic.w	r3, r3, #7
 800af4a:	430b      	orrs	r3, r1
 800af4c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800af4e:	682b      	ldr	r3, [r5, #0]
 800af50:	069b      	lsls	r3, r3, #26
 800af52:	d510      	bpl.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x616>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800af54:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800af58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af5c:	f000 8160 	beq.w	800b220 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800af60:	f200 8144 	bhi.w	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800af64:	2b00      	cmp	r3, #0
 800af66:	f000 814a 	beq.w	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800af6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af6e:	f000 8150 	beq.w	800b212 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 800af72:	2601      	movs	r6, #1
 800af74:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800af76:	682b      	ldr	r3, [r5, #0]
 800af78:	065f      	lsls	r7, r3, #25
 800af7a:	d510      	bpl.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800af7c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800af80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af84:	f000 816e 	beq.w	800b264 <HAL_RCCEx_PeriphCLKConfig+0x904>
 800af88:	f200 8152 	bhi.w	800b230 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 8158 	beq.w	800b242 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800af92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af96:	f000 815e 	beq.w	800b256 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800af9a:	2601      	movs	r6, #1
 800af9c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800af9e:	682b      	ldr	r3, [r5, #0]
 800afa0:	0618      	lsls	r0, r3, #24
 800afa2:	d510      	bpl.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x666>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800afa4:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800afa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800afac:	f000 817c 	beq.w	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x948>
 800afb0:	f200 8160 	bhi.w	800b274 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f000 8166 	beq.w	800b286 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800afba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afbe:	f000 816c 	beq.w	800b29a <HAL_RCCEx_PeriphCLKConfig+0x93a>
 800afc2:	2601      	movs	r6, #1
 800afc4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800afc6:	682b      	ldr	r3, [r5, #0]
 800afc8:	0719      	lsls	r1, r3, #28
 800afca:	d514      	bpl.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x696>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800afcc:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800afd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afd4:	d107      	bne.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x686>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800afd6:	2102      	movs	r1, #2
 800afd8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800afdc:	f7ff fc4a 	bl	800a874 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800afe0:	2800      	cmp	r0, #0
 800afe2:	bf18      	it	ne
 800afe4:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800afe6:	4a80      	ldr	r2, [pc, #512]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800afe8:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800afec:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800afee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800aff2:	430b      	orrs	r3, r1
 800aff4:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aff6:	682b      	ldr	r3, [r5, #0]
 800aff8:	06da      	lsls	r2, r3, #27
 800affa:	d514      	bpl.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800affc:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800b000:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b004:	d107      	bne.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b006:	2102      	movs	r1, #2
 800b008:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b00c:	f7ff fc32 	bl	800a874 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800b010:	2800      	cmp	r0, #0
 800b012:	bf18      	it	ne
 800b014:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b016:	4a74      	ldr	r2, [pc, #464]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b018:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800b01c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b01e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b022:	430b      	orrs	r3, r1
 800b024:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b026:	682b      	ldr	r3, [r5, #0]
 800b028:	031b      	lsls	r3, r3, #12
 800b02a:	d51b      	bpl.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x704>
    switch (PeriphClkInit->AdcClockSelection)
 800b02c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800b030:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800b034:	f000 8140 	beq.w	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x958>
 800b038:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800b03c:	d007      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800b03e:	2900      	cmp	r1, #0
 800b040:	f040 8140 	bne.w	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x964>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b044:	f105 0008 	add.w	r0, r5, #8
 800b048:	f7ff fb9e 	bl	800a788 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b04c:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b04e:	2c00      	cmp	r4, #0
 800b050:	f040 813b 	bne.w	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b054:	4a64      	ldr	r2, [pc, #400]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b056:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800b05a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b05c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800b060:	430b      	orrs	r3, r1
 800b062:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b064:	682b      	ldr	r3, [r5, #0]
 800b066:	035f      	lsls	r7, r3, #13
 800b068:	d50f      	bpl.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x72a>
    switch (PeriphClkInit->UsbClockSelection)
 800b06a:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800b06e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b072:	f000 813b 	beq.w	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b076:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b07a:	f000 812d 	beq.w	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x978>
 800b07e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b082:	f000 8124 	beq.w	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800b086:	2601      	movs	r6, #1
 800b088:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b08a:	682b      	ldr	r3, [r5, #0]
 800b08c:	03d8      	lsls	r0, r3, #15
 800b08e:	d509      	bpl.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    switch (PeriphClkInit->SdmmcClockSelection)
 800b090:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800b092:	2b00      	cmp	r3, #0
 800b094:	f000 8133 	beq.w	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800b098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b09c:	f000 813d 	beq.w	800b31a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b0a0:	2601      	movs	r6, #1
 800b0a2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b0a4:	682b      	ldr	r3, [r5, #0]
 800b0a6:	0099      	lsls	r1, r3, #2
 800b0a8:	d507      	bpl.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x75a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b0aa:	2102      	movs	r1, #2
 800b0ac:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b0b0:	f7ff fbe0 	bl	800a874 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	bf18      	it	ne
 800b0b8:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b0ba:	e9d5 3100 	ldrd	r3, r1, [r5]
 800b0be:	039a      	lsls	r2, r3, #14
 800b0c0:	f140 8143 	bpl.w	800b34a <HAL_RCCEx_PeriphCLKConfig+0x9ea>
    switch (PeriphClkInit->RngClockSelection)
 800b0c4:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800b0c8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800b0cc:	f000 813f 	beq.w	800b34e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800b0d0:	f200 812c 	bhi.w	800b32c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	f000 812f 	beq.w	800b338 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 800b0da:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b0dc:	02df      	lsls	r7, r3, #11
 800b0de:	d506      	bpl.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x78e>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b0e0:	4841      	ldr	r0, [pc, #260]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b0e2:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800b0e4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800b0e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b0ea:	4332      	orrs	r2, r6
 800b0ec:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b0ee:	00de      	lsls	r6, r3, #3
 800b0f0:	d507      	bpl.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b0f2:	483d      	ldr	r0, [pc, #244]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b0f4:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800b0f8:	6902      	ldr	r2, [r0, #16]
 800b0fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b0fe:	4332      	orrs	r2, r6
 800b100:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b102:	0298      	lsls	r0, r3, #10
 800b104:	d506      	bpl.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b106:	4838      	ldr	r0, [pc, #224]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b108:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800b10a:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800b10c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800b110:	4332      	orrs	r2, r6
 800b112:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b114:	005a      	lsls	r2, r3, #1
 800b116:	d509      	bpl.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b118:	4a33      	ldr	r2, [pc, #204]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b11a:	6910      	ldr	r0, [r2, #16]
 800b11c:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800b120:	6110      	str	r0, [r2, #16]
 800b122:	6910      	ldr	r0, [r2, #16]
 800b124:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800b128:	4330      	orrs	r0, r6
 800b12a:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	da06      	bge.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b130:	482d      	ldr	r0, [pc, #180]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b132:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800b134:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800b136:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800b13a:	4332      	orrs	r2, r6
 800b13c:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b13e:	021f      	lsls	r7, r3, #8
 800b140:	d507      	bpl.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b142:	4a29      	ldr	r2, [pc, #164]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b144:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800b148:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b14a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800b14e:	4303      	orrs	r3, r0
 800b150:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b152:	07ce      	lsls	r6, r1, #31
 800b154:	d506      	bpl.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x804>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b156:	2100      	movs	r1, #0
 800b158:	f105 0008 	add.w	r0, r5, #8
 800b15c:	f7ff fb14 	bl	800a788 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b160:	4607      	mov	r7, r0
 800b162:	b900      	cbnz	r0, 800b166 <HAL_RCCEx_PeriphCLKConfig+0x806>
    switch (PeriphClkInit->RngClockSelection)
 800b164:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b166:	686b      	ldr	r3, [r5, #4]
 800b168:	079c      	lsls	r4, r3, #30
 800b16a:	d506      	bpl.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0x81a>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b16c:	2101      	movs	r1, #1
 800b16e:	f105 0008 	add.w	r0, r5, #8
 800b172:	f7ff fb09 	bl	800a788 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b176:	4606      	mov	r6, r0
 800b178:	b900      	cbnz	r0, 800b17c <HAL_RCCEx_PeriphCLKConfig+0x81c>
    switch (PeriphClkInit->RngClockSelection)
 800b17a:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b17c:	686b      	ldr	r3, [r5, #4]
 800b17e:	0758      	lsls	r0, r3, #29
 800b180:	d506      	bpl.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x830>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b182:	2102      	movs	r1, #2
 800b184:	f105 0008 	add.w	r0, r5, #8
 800b188:	f7ff fafe 	bl	800a788 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b18c:	4604      	mov	r4, r0
 800b18e:	b900      	cbnz	r0, 800b192 <HAL_RCCEx_PeriphCLKConfig+0x832>
    switch (PeriphClkInit->RngClockSelection)
 800b190:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b192:	686b      	ldr	r3, [r5, #4]
 800b194:	0719      	lsls	r1, r3, #28
 800b196:	d506      	bpl.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x846>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b198:	2100      	movs	r1, #0
 800b19a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b19e:	f7ff fb69 	bl	800a874 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b1a2:	4606      	mov	r6, r0
 800b1a4:	b900      	cbnz	r0, 800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x848>
    switch (PeriphClkInit->RngClockSelection)
 800b1a6:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b1a8:	686b      	ldr	r3, [r5, #4]
 800b1aa:	06da      	lsls	r2, r3, #27
 800b1ac:	d506      	bpl.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1ae:	2101      	movs	r1, #1
 800b1b0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b1b4:	f7ff fb5e 	bl	800a874 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b1b8:	4604      	mov	r4, r0
 800b1ba:	b900      	cbnz	r0, 800b1be <HAL_RCCEx_PeriphCLKConfig+0x85e>
    switch (PeriphClkInit->RngClockSelection)
 800b1bc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b1be:	686b      	ldr	r3, [r5, #4]
 800b1c0:	069b      	lsls	r3, r3, #26
 800b1c2:	f100 80ca 	bmi.w	800b35a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  if (status == HAL_OK)
 800b1c6:	1e20      	subs	r0, r4, #0
 800b1c8:	bf18      	it	ne
 800b1ca:	2001      	movne	r0, #1
}
 800b1cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b1d6:	f7ff fb4d 	bl	800a874 <RCCEx_PLL3_Config>
 800b1da:	e6ac      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b1dc:	2601      	movs	r6, #1
 800b1de:	4634      	mov	r4, r6
 800b1e0:	e6b5      	b.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 800b1e2:	4626      	mov	r6, r4
 800b1e4:	e6b3      	b.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 800b1e6:	bf00      	nop
 800b1e8:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b1ec:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b1f0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800b1f4:	d003      	beq.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800b1f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b1fa:	f47f aeba 	bne.w	800af72 <HAL_RCCEx_PeriphCLKConfig+0x612>
    if (ret == HAL_OK)
 800b1fe:	b9ac      	cbnz	r4, 800b22c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b200:	4a5b      	ldr	r2, [pc, #364]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b202:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800b206:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b208:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800b20c:	430b      	orrs	r3, r1
 800b20e:	6553      	str	r3, [r2, #84]	@ 0x54
 800b210:	e6b1      	b.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x616>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b212:	2100      	movs	r1, #0
 800b214:	f105 0008 	add.w	r0, r5, #8
 800b218:	f7ff fab6 	bl	800a788 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b21c:	4604      	mov	r4, r0
        break;
 800b21e:	e7ee      	b.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b220:	2102      	movs	r1, #2
 800b222:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b226:	f7ff fb25 	bl	800a874 <RCCEx_PLL3_Config>
 800b22a:	e7f7      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      status = ret;
 800b22c:	4626      	mov	r6, r4
 800b22e:	e6a2      	b.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x616>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b230:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b234:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800b238:	d003      	beq.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b23a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b23e:	f47f aeac 	bne.w	800af9a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    if (ret == HAL_OK)
 800b242:	b9ac      	cbnz	r4, 800b270 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b244:	4a4a      	ldr	r2, [pc, #296]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b246:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800b24a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b24c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800b250:	430b      	orrs	r3, r1
 800b252:	6593      	str	r3, [r2, #88]	@ 0x58
 800b254:	e6a3      	b.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b256:	2100      	movs	r1, #0
 800b258:	f105 0008 	add.w	r0, r5, #8
 800b25c:	f7ff fa94 	bl	800a788 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b260:	4604      	mov	r4, r0
        break;
 800b262:	e7ee      	b.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b264:	2102      	movs	r1, #2
 800b266:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b26a:	f7ff fb03 	bl	800a874 <RCCEx_PLL3_Config>
 800b26e:	e7f7      	b.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x900>
      status = ret;
 800b270:	4626      	mov	r6, r4
 800b272:	e694      	b.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b274:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b278:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800b27c:	d003      	beq.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800b27e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b282:	f47f ae9e 	bne.w	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
    if (ret == HAL_OK)
 800b286:	b9ac      	cbnz	r4, 800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x954>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b288:	4a39      	ldr	r2, [pc, #228]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b28a:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800b28e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b290:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800b294:	430b      	orrs	r3, r1
 800b296:	6593      	str	r3, [r2, #88]	@ 0x58
 800b298:	e695      	b.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b29a:	2100      	movs	r1, #0
 800b29c:	f105 0008 	add.w	r0, r5, #8
 800b2a0:	f7ff fa72 	bl	800a788 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2a4:	4604      	mov	r4, r0
        break;
 800b2a6:	e7ee      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x926>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2a8:	2102      	movs	r1, #2
 800b2aa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b2ae:	f7ff fae1 	bl	800a874 <RCCEx_PLL3_Config>
 800b2b2:	e7f7      	b.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x944>
      status = ret;
 800b2b4:	4626      	mov	r6, r4
 800b2b6:	e686      	b.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2b8:	2102      	movs	r1, #2
 800b2ba:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b2be:	f7ff fad9 	bl	800a874 <RCCEx_PLL3_Config>
 800b2c2:	e6c3      	b.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    switch (PeriphClkInit->AdcClockSelection)
 800b2c4:	2601      	movs	r6, #1
 800b2c6:	4634      	mov	r4, r6
 800b2c8:	e6cc      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x704>
      status = ret;
 800b2ca:	4626      	mov	r6, r4
 800b2cc:	e6ca      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x704>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2ce:	4a28      	ldr	r2, [pc, #160]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b2d0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b2d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b2d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b2d8:	b97c      	cbnz	r4, 800b2fa <HAL_RCCEx_PeriphCLKConfig+0x99a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b2da:	4a25      	ldr	r2, [pc, #148]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b2dc:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800b2e0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b2e2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b2e6:	430b      	orrs	r3, r1
 800b2e8:	6553      	str	r3, [r2, #84]	@ 0x54
 800b2ea:	e6ce      	b.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x72a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2ec:	2101      	movs	r1, #1
 800b2ee:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b2f2:	f7ff fabf 	bl	800a874 <RCCEx_PLL3_Config>
 800b2f6:	4604      	mov	r4, r0
        break;
 800b2f8:	e7ee      	b.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x978>
      status = ret;
 800b2fa:	4626      	mov	r6, r4
 800b2fc:	e6c5      	b.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x72a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2fe:	4a1c      	ldr	r2, [pc, #112]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b300:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b306:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b308:	b974      	cbnz	r4, 800b328 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b30a:	4a19      	ldr	r2, [pc, #100]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b30c:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800b30e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b310:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b314:	430b      	orrs	r3, r1
 800b316:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b318:	e6c4      	b.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b31a:	2102      	movs	r1, #2
 800b31c:	f105 0008 	add.w	r0, r5, #8
 800b320:	f7ff fa32 	bl	800a788 <RCCEx_PLL2_Config>
 800b324:	4604      	mov	r4, r0
        break;
 800b326:	e7ef      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      status = ret;
 800b328:	4626      	mov	r6, r4
 800b32a:	e6bb      	b.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    switch (PeriphClkInit->RngClockSelection)
 800b32c:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800b330:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800b334:	f47f aed1 	bne.w	800b0da <HAL_RCCEx_PeriphCLKConfig+0x77a>
    if (ret == HAL_OK)
 800b338:	2c00      	cmp	r4, #0
 800b33a:	f47f aecf 	bne.w	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x77c>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b33e:	4c0c      	ldr	r4, [pc, #48]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b340:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b342:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b346:	4302      	orrs	r2, r0
 800b348:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800b34a:	4634      	mov	r4, r6
 800b34c:	e6c6      	b.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x77c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b34e:	4f08      	ldr	r7, [pc, #32]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b350:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b352:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b356:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800b358:	e7ee      	b.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b35a:	2102      	movs	r1, #2
 800b35c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b360:	f7ff fa88 	bl	800a874 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b364:	2800      	cmp	r0, #0
 800b366:	f43f af2e 	beq.w	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x866>
  return HAL_ERROR;
 800b36a:	2001      	movs	r0, #1
 800b36c:	e72e      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800b36e:	bf00      	nop
 800b370:	58024400 	.word	0x58024400

0800b374 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800b374:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b376:	f7ff f997 	bl	800a6a8 <HAL_RCC_GetHCLKFreq>
 800b37a:	4b05      	ldr	r3, [pc, #20]	@ (800b390 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800b37c:	4a05      	ldr	r2, [pc, #20]	@ (800b394 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800b37e:	6a1b      	ldr	r3, [r3, #32]
 800b380:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b384:	5cd3      	ldrb	r3, [r2, r3]
 800b386:	f003 031f 	and.w	r3, r3, #31
}
 800b38a:	40d8      	lsrs	r0, r3
 800b38c:	bd08      	pop	{r3, pc}
 800b38e:	bf00      	nop
 800b390:	58024400 	.word	0x58024400
 800b394:	08026eac 	.word	0x08026eac

0800b398 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b398:	494f      	ldr	r1, [pc, #316]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800b39a:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b39c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b39e:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b3a0:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 800b3a2:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b3a6:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b3aa:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 800b3ac:	f000 8090 	beq.w	800b4d0 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3b0:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b3b4:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b3b8:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b3bc:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b3c4:	4353      	muls	r3, r2
    switch (pllsource)
 800b3c6:	2c01      	cmp	r4, #1
 800b3c8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3cc:	ee06 3a90 	vmov	s13, r3
 800b3d0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800b3d4:	d06e      	beq.n	800b4b4 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 800b3d6:	2c02      	cmp	r4, #2
 800b3d8:	d05e      	beq.n	800b498 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800b3da:	2c00      	cmp	r4, #0
 800b3dc:	d16a      	bne.n	800b4b4 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3de:	680b      	ldr	r3, [r1, #0]
 800b3e0:	069b      	lsls	r3, r3, #26
 800b3e2:	d547      	bpl.n	800b474 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3e4:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3e6:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3e8:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800b3ec:	4a3b      	ldr	r2, [pc, #236]	@ (800b4dc <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3f2:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3f4:	ee07 2a90 	vmov	s15, r2
 800b3f8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800b3fc:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800b400:	ee07 3a10 	vmov	s14, r3
 800b404:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b408:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b40c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b410:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b414:	4a30      	ldr	r2, [pc, #192]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800b416:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800b418:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b41c:	ee07 3a10 	vmov	s14, r3
 800b420:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b424:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b428:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b42c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b430:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b434:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800b436:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b43a:	ee07 3a10 	vmov	s14, r3
 800b43e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b442:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b446:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b44a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b44e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b452:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800b454:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b458:	ee06 3a90 	vmov	s13, r3
 800b45c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b460:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b464:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b468:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b46c:	ee17 3a90 	vmov	r3, s15
 800b470:	6083      	str	r3, [r0, #8]
}
 800b472:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b474:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800b476:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800b4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800b47a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b47e:	ee07 3a90 	vmov	s15, r3
 800b482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b48a:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b48e:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800b492:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800b496:	e7bd      	b.n	800b414 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b498:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800b49a:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800b4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800b49e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4a2:	ee07 3a90 	vmov	s15, r3
 800b4a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4ae:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b4b2:	e7ec      	b.n	800b48e <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b4b4:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800b4b6:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800b4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4be:	ee07 3a90 	vmov	s15, r3
 800b4c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4ca:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b4ce:	e7de      	b.n	800b48e <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b4d0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b4d4:	e7cc      	b.n	800b470 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800b4d6:	bf00      	nop
 800b4d8:	58024400 	.word	0x58024400
 800b4dc:	03d09000 	.word	0x03d09000
 800b4e0:	4c742400 	.word	0x4c742400
 800b4e4:	4bbebc20 	.word	0x4bbebc20
 800b4e8:	4a742400 	.word	0x4a742400

0800b4ec <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4ec:	494f      	ldr	r1, [pc, #316]	@ (800b62c <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800b4ee:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4f0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b4f2:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b4f4:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 800b4f6:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b4fa:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b4fe:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 800b500:	f000 8090 	beq.w	800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b504:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b508:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b50c:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b510:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b518:	4353      	muls	r3, r2
    switch (pllsource)
 800b51a:	2c01      	cmp	r4, #1
 800b51c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b520:	ee06 3a90 	vmov	s13, r3
 800b524:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800b528:	d06e      	beq.n	800b608 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 800b52a:	2c02      	cmp	r4, #2
 800b52c:	d05e      	beq.n	800b5ec <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800b52e:	2c00      	cmp	r4, #0
 800b530:	d16a      	bne.n	800b608 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b532:	680b      	ldr	r3, [r1, #0]
 800b534:	069b      	lsls	r3, r3, #26
 800b536:	d547      	bpl.n	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b538:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b53a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b53c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800b540:	4a3b      	ldr	r2, [pc, #236]	@ (800b630 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b542:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b546:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b548:	ee07 2a90 	vmov	s15, r2
 800b54c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800b550:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800b554:	ee07 3a10 	vmov	s14, r3
 800b558:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b55c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b560:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b564:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b568:	4a30      	ldr	r2, [pc, #192]	@ (800b62c <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800b56a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800b56c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b570:	ee07 3a10 	vmov	s14, r3
 800b574:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b578:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b57c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b580:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b584:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b588:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800b58a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b58e:	ee07 3a10 	vmov	s14, r3
 800b592:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b596:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b59a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b59e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b5a2:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b5a6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800b5a8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b5ac:	ee06 3a90 	vmov	s13, r3
 800b5b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b5b4:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b5b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b5bc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b5c0:	ee17 3a90 	vmov	r3, s15
 800b5c4:	6083      	str	r3, [r0, #8]
}
 800b5c6:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b5ca:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800b634 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800b5ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5d2:	ee07 3a90 	vmov	s15, r3
 800b5d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5de:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5e2:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800b5e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800b5ea:	e7bd      	b.n	800b568 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b5ee:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800b638 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800b5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f6:	ee07 3a90 	vmov	s15, r3
 800b5fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b602:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b606:	e7ec      	b.n	800b5e2 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b608:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b60a:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800b63c <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800b60e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b612:	ee07 3a90 	vmov	s15, r3
 800b616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b61a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b61e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b622:	e7de      	b.n	800b5e2 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b624:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b628:	e7cc      	b.n	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800b62a:	bf00      	nop
 800b62c:	58024400 	.word	0x58024400
 800b630:	03d09000 	.word	0x03d09000
 800b634:	4c742400 	.word	0x4c742400
 800b638:	4bbebc20 	.word	0x4bbebc20
 800b63c:	4a742400 	.word	0x4a742400

0800b640 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b644:	4604      	mov	r4, r0
 800b646:	b1f0      	cbz	r0, 800b686 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b648:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800b64c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b650:	b91b      	cbnz	r3, 800b65a <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b652:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b656:	f7f6 f8fd 	bl	8001854 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b65a:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b65c:	1d21      	adds	r1, r4, #4
 800b65e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b660:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b664:	f001 fa17 	bl	800ca96 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b668:	6862      	ldr	r2, [r4, #4]
 800b66a:	4629      	mov	r1, r5
 800b66c:	6820      	ldr	r0, [r4, #0]
 800b66e:	f001 fa48 	bl	800cb02 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b672:	4a06      	ldr	r2, [pc, #24]	@ (800b68c <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800b674:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800b676:	6813      	ldr	r3, [r2, #0]
 800b678:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b67c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b67e:	2301      	movs	r3, #1
 800b680:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800b684:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b686:	2001      	movs	r0, #1
 800b688:	e7fc      	b.n	800b684 <HAL_SDRAM_Init+0x44>
 800b68a:	bf00      	nop
 800b68c:	52004000 	.word	0x52004000

0800b690 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800b690:	b510      	push	{r4, lr}
 800b692:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800b694:	f7f6 f978 	bl	8001988 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800b698:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b69c:	f001 fa67 	bl	800cb6e <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800b6a0:	2000      	movs	r0, #0
 800b6a2:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800b6a6:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800b6aa:	bd10      	pop	{r4, pc}

0800b6ac <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b6ac:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b6ae:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800b6b2:	4605      	mov	r5, r0
 800b6b4:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b6b6:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b6b8:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800b6ba:	d010      	beq.n	800b6de <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b6bc:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800b6c0:	2c01      	cmp	r4, #1
 800b6c2:	d110      	bne.n	800b6e6 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b6c4:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b6c6:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b6c8:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b6cc:	f001 fa5e 	bl	800cb8c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b6d0:	6833      	ldr	r3, [r6, #0]
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	d104      	bne.n	800b6e0 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b6d6:	2305      	movs	r3, #5
 800b6d8:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b6dc:	2000      	movs	r0, #0
}
 800b6de:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b6e0:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800b6e4:	e7fa      	b.n	800b6dc <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800b6e6:	2001      	movs	r0, #1
 800b6e8:	e7f9      	b.n	800b6de <HAL_SDRAM_SendCommand+0x32>

0800b6ea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b6ea:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b6ec:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800b6f0:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b6f2:	2b02      	cmp	r3, #2
 800b6f4:	b2d8      	uxtb	r0, r3
 800b6f6:	d00d      	beq.n	800b714 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b6f8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	b2dd      	uxtb	r5, r3
 800b700:	d109      	bne.n	800b716 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b702:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b704:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b706:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b70a:	f001 fa51 	bl	800cbb0 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b70e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b710:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800b714:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b716:	2001      	movs	r0, #1
 800b718:	e7fc      	b.n	800b714 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800b71a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b71a:	4770      	bx	lr

0800b71c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b71c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b720:	2b01      	cmp	r3, #1
 800b722:	d12f      	bne.n	800b784 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b724:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b726:	4a18      	ldr	r2, [pc, #96]	@ (800b788 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800b728:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b72c:	6803      	ldr	r3, [r0, #0]
 800b72e:	4293      	cmp	r3, r2
 800b730:	d01a      	beq.n	800b768 <HAL_TIM_Base_Start+0x4c>
 800b732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b736:	d017      	beq.n	800b768 <HAL_TIM_Base_Start+0x4c>
 800b738:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d013      	beq.n	800b768 <HAL_TIM_Base_Start+0x4c>
 800b740:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b744:	4293      	cmp	r3, r2
 800b746:	d00f      	beq.n	800b768 <HAL_TIM_Base_Start+0x4c>
 800b748:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d00b      	beq.n	800b768 <HAL_TIM_Base_Start+0x4c>
 800b750:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b754:	4293      	cmp	r3, r2
 800b756:	d007      	beq.n	800b768 <HAL_TIM_Base_Start+0x4c>
 800b758:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d003      	beq.n	800b768 <HAL_TIM_Base_Start+0x4c>
 800b760:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800b764:	4293      	cmp	r3, r2
 800b766:	d107      	bne.n	800b778 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b768:	6899      	ldr	r1, [r3, #8]
 800b76a:	4a08      	ldr	r2, [pc, #32]	@ (800b78c <HAL_TIM_Base_Start+0x70>)
 800b76c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b76e:	2a06      	cmp	r2, #6
 800b770:	d006      	beq.n	800b780 <HAL_TIM_Base_Start+0x64>
 800b772:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800b776:	d003      	beq.n	800b780 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	f042 0201 	orr.w	r2, r2, #1
 800b77e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800b780:	2000      	movs	r0, #0
 800b782:	4770      	bx	lr
    return HAL_ERROR;
 800b784:	2001      	movs	r0, #1
}
 800b786:	4770      	bx	lr
 800b788:	40010000 	.word	0x40010000
 800b78c:	00010007 	.word	0x00010007

0800b790 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b790:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b794:	2b01      	cmp	r3, #1
 800b796:	d133      	bne.n	800b800 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b798:	2302      	movs	r3, #2
 800b79a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b79e:	6803      	ldr	r3, [r0, #0]
 800b7a0:	68da      	ldr	r2, [r3, #12]
 800b7a2:	f042 0201 	orr.w	r2, r2, #1
 800b7a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7a8:	4a16      	ldr	r2, [pc, #88]	@ (800b804 <HAL_TIM_Base_Start_IT+0x74>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d01a      	beq.n	800b7e4 <HAL_TIM_Base_Start_IT+0x54>
 800b7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7b2:	d017      	beq.n	800b7e4 <HAL_TIM_Base_Start_IT+0x54>
 800b7b4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d013      	beq.n	800b7e4 <HAL_TIM_Base_Start_IT+0x54>
 800b7bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d00f      	beq.n	800b7e4 <HAL_TIM_Base_Start_IT+0x54>
 800b7c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d00b      	beq.n	800b7e4 <HAL_TIM_Base_Start_IT+0x54>
 800b7cc:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d007      	beq.n	800b7e4 <HAL_TIM_Base_Start_IT+0x54>
 800b7d4:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d003      	beq.n	800b7e4 <HAL_TIM_Base_Start_IT+0x54>
 800b7dc:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d107      	bne.n	800b7f4 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7e4:	6899      	ldr	r1, [r3, #8]
 800b7e6:	4a08      	ldr	r2, [pc, #32]	@ (800b808 <HAL_TIM_Base_Start_IT+0x78>)
 800b7e8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7ea:	2a06      	cmp	r2, #6
 800b7ec:	d006      	beq.n	800b7fc <HAL_TIM_Base_Start_IT+0x6c>
 800b7ee:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800b7f2:	d003      	beq.n	800b7fc <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	f042 0201 	orr.w	r2, r2, #1
 800b7fa:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	4770      	bx	lr
    return HAL_ERROR;
 800b800:	2001      	movs	r0, #1
}
 800b802:	4770      	bx	lr
 800b804:	40010000 	.word	0x40010000
 800b808:	00010007 	.word	0x00010007

0800b80c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800b80c:	4770      	bx	lr

0800b80e <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800b80e:	4770      	bx	lr

0800b810 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800b810:	4770      	bx	lr

0800b812 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800b812:	4770      	bx	lr

0800b814 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800b814:	6803      	ldr	r3, [r0, #0]
{
 800b816:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800b818:	68dd      	ldr	r5, [r3, #12]
{
 800b81a:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800b81c:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b81e:	07b2      	lsls	r2, r6, #30
 800b820:	d50d      	bpl.n	800b83e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b822:	07a9      	lsls	r1, r5, #30
 800b824:	d50b      	bpl.n	800b83e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b826:	f06f 0202 	mvn.w	r2, #2
 800b82a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b82c:	2201      	movs	r2, #1
 800b82e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b830:	699b      	ldr	r3, [r3, #24]
 800b832:	079a      	lsls	r2, r3, #30
 800b834:	d075      	beq.n	800b922 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800b836:	f7ff ffea 	bl	800b80e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b83a:	2300      	movs	r3, #0
 800b83c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b83e:	0773      	lsls	r3, r6, #29
 800b840:	d510      	bpl.n	800b864 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b842:	0768      	lsls	r0, r5, #29
 800b844:	d50e      	bpl.n	800b864 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b846:	6823      	ldr	r3, [r4, #0]
 800b848:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800b84c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b84e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b850:	2202      	movs	r2, #2
 800b852:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b854:	699b      	ldr	r3, [r3, #24]
 800b856:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800b85a:	d068      	beq.n	800b92e <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800b85c:	f7ff ffd7 	bl	800b80e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b860:	2300      	movs	r3, #0
 800b862:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b864:	0731      	lsls	r1, r6, #28
 800b866:	d50f      	bpl.n	800b888 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b868:	072a      	lsls	r2, r5, #28
 800b86a:	d50d      	bpl.n	800b888 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b86c:	6823      	ldr	r3, [r4, #0]
 800b86e:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800b872:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b876:	2204      	movs	r2, #4
 800b878:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b87a:	69db      	ldr	r3, [r3, #28]
 800b87c:	079b      	lsls	r3, r3, #30
 800b87e:	d05c      	beq.n	800b93a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800b880:	f7ff ffc5 	bl	800b80e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b884:	2300      	movs	r3, #0
 800b886:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b888:	06f1      	lsls	r1, r6, #27
 800b88a:	d510      	bpl.n	800b8ae <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b88c:	06ea      	lsls	r2, r5, #27
 800b88e:	d50e      	bpl.n	800b8ae <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b890:	6823      	ldr	r3, [r4, #0]
 800b892:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800b896:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b89a:	2208      	movs	r2, #8
 800b89c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b89e:	69db      	ldr	r3, [r3, #28]
 800b8a0:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800b8a4:	d04f      	beq.n	800b946 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800b8a6:	f7ff ffb2 	bl	800b80e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b8ae:	07f3      	lsls	r3, r6, #31
 800b8b0:	d508      	bpl.n	800b8c4 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b8b2:	07e8      	lsls	r0, r5, #31
 800b8b4:	d506      	bpl.n	800b8c4 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b8b6:	6823      	ldr	r3, [r4, #0]
 800b8b8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800b8bc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b8be:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b8c0:	f7f5 fd3e 	bl	8001340 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b8c4:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800b8c8:	d008      	beq.n	800b8dc <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b8ca:	0629      	lsls	r1, r5, #24
 800b8cc:	d506      	bpl.n	800b8dc <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b8ce:	6823      	ldr	r3, [r4, #0]
 800b8d0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800b8d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b8d6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b8d8:	f000 f8c1 	bl	800ba5e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b8dc:	05f2      	lsls	r2, r6, #23
 800b8de:	d508      	bpl.n	800b8f2 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b8e0:	062b      	lsls	r3, r5, #24
 800b8e2:	d506      	bpl.n	800b8f2 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b8e4:	6823      	ldr	r3, [r4, #0]
 800b8e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800b8ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b8ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800b8ee:	f000 f8b7 	bl	800ba60 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b8f2:	0670      	lsls	r0, r6, #25
 800b8f4:	d508      	bpl.n	800b908 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b8f6:	0669      	lsls	r1, r5, #25
 800b8f8:	d506      	bpl.n	800b908 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b8fa:	6823      	ldr	r3, [r4, #0]
 800b8fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800b900:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b902:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b904:	f7ff ff85 	bl	800b812 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b908:	06b2      	lsls	r2, r6, #26
 800b90a:	d522      	bpl.n	800b952 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b90c:	06ab      	lsls	r3, r5, #26
 800b90e:	d520      	bpl.n	800b952 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b910:	6823      	ldr	r3, [r4, #0]
 800b912:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800b916:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b918:	611a      	str	r2, [r3, #16]
}
 800b91a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800b91e:	f000 b89d 	b.w	800ba5c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b922:	f7ff ff73 	bl	800b80c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b926:	4620      	mov	r0, r4
 800b928:	f7ff ff72 	bl	800b810 <HAL_TIM_PWM_PulseFinishedCallback>
 800b92c:	e785      	b.n	800b83a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b92e:	f7ff ff6d 	bl	800b80c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b932:	4620      	mov	r0, r4
 800b934:	f7ff ff6c 	bl	800b810 <HAL_TIM_PWM_PulseFinishedCallback>
 800b938:	e792      	b.n	800b860 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b93a:	f7ff ff67 	bl	800b80c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b93e:	4620      	mov	r0, r4
 800b940:	f7ff ff66 	bl	800b810 <HAL_TIM_PWM_PulseFinishedCallback>
 800b944:	e79e      	b.n	800b884 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b946:	f7ff ff61 	bl	800b80c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b94a:	4620      	mov	r0, r4
 800b94c:	f7ff ff60 	bl	800b810 <HAL_TIM_PWM_PulseFinishedCallback>
 800b950:	e7ab      	b.n	800b8aa <HAL_TIM_IRQHandler+0x96>
}
 800b952:	bd70      	pop	{r4, r5, r6, pc}

0800b954 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b954:	4a27      	ldr	r2, [pc, #156]	@ (800b9f4 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 800b956:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b958:	4290      	cmp	r0, r2
 800b95a:	d012      	beq.n	800b982 <TIM_Base_SetConfig+0x2e>
 800b95c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800b960:	d00f      	beq.n	800b982 <TIM_Base_SetConfig+0x2e>
 800b962:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b966:	4290      	cmp	r0, r2
 800b968:	d00b      	beq.n	800b982 <TIM_Base_SetConfig+0x2e>
 800b96a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b96e:	4290      	cmp	r0, r2
 800b970:	d007      	beq.n	800b982 <TIM_Base_SetConfig+0x2e>
 800b972:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b976:	4290      	cmp	r0, r2
 800b978:	d003      	beq.n	800b982 <TIM_Base_SetConfig+0x2e>
 800b97a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b97e:	4290      	cmp	r0, r2
 800b980:	d108      	bne.n	800b994 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800b986:	684a      	ldr	r2, [r1, #4]
 800b988:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b98a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b98e:	68ca      	ldr	r2, [r1, #12]
 800b990:	4313      	orrs	r3, r2
 800b992:	e00a      	b.n	800b9aa <TIM_Base_SetConfig+0x56>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b994:	4a18      	ldr	r2, [pc, #96]	@ (800b9f8 <TIM_Base_SetConfig+0xa4>)
 800b996:	4290      	cmp	r0, r2
 800b998:	d0f7      	beq.n	800b98a <TIM_Base_SetConfig+0x36>
 800b99a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b99e:	4290      	cmp	r0, r2
 800b9a0:	d0f3      	beq.n	800b98a <TIM_Base_SetConfig+0x36>
 800b9a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b9a6:	4290      	cmp	r0, r2
 800b9a8:	d0ef      	beq.n	800b98a <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9aa:	694a      	ldr	r2, [r1, #20]
 800b9ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9b0:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9b2:	688a      	ldr	r2, [r1, #8]
 800b9b4:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9b6:	680a      	ldr	r2, [r1, #0]
 800b9b8:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9ba:	4a0e      	ldr	r2, [pc, #56]	@ (800b9f4 <TIM_Base_SetConfig+0xa0>)
 800b9bc:	4290      	cmp	r0, r2
 800b9be:	d00f      	beq.n	800b9e0 <TIM_Base_SetConfig+0x8c>
 800b9c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b9c4:	4290      	cmp	r0, r2
 800b9c6:	d00b      	beq.n	800b9e0 <TIM_Base_SetConfig+0x8c>
 800b9c8:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800b9cc:	4290      	cmp	r0, r2
 800b9ce:	d007      	beq.n	800b9e0 <TIM_Base_SetConfig+0x8c>
 800b9d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b9d4:	4290      	cmp	r0, r2
 800b9d6:	d003      	beq.n	800b9e0 <TIM_Base_SetConfig+0x8c>
 800b9d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b9dc:	4290      	cmp	r0, r2
 800b9de:	d101      	bne.n	800b9e4 <TIM_Base_SetConfig+0x90>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9e0:	690a      	ldr	r2, [r1, #16]
 800b9e2:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b9e4:	6802      	ldr	r2, [r0, #0]
 800b9e6:	f042 0204 	orr.w	r2, r2, #4
 800b9ea:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800b9f0:	6003      	str	r3, [r0, #0]
}
 800b9f2:	4770      	bx	lr
 800b9f4:	40010000 	.word	0x40010000
 800b9f8:	40014000 	.word	0x40014000

0800b9fc <HAL_TIM_Base_Init>:
{
 800b9fc:	b510      	push	{r4, lr}
  if (htim == NULL)
 800b9fe:	4604      	mov	r4, r0
 800ba00:	b350      	cbz	r0, 800ba58 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ba02:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ba06:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800ba0a:	b91b      	cbnz	r3, 800ba14 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800ba0c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800ba10:	f7ff fe83 	bl	800b71a <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800ba14:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba16:	6820      	ldr	r0, [r4, #0]
 800ba18:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800ba1a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba1e:	f7ff ff99 	bl	800b954 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba22:	2301      	movs	r3, #1
  return HAL_OK;
 800ba24:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba26:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba2a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800ba2e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800ba32:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800ba36:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800ba3a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ba3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba42:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800ba46:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800ba4a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800ba4e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800ba52:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800ba56:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ba58:	2001      	movs	r0, #1
 800ba5a:	e7fc      	b.n	800ba56 <HAL_TIM_Base_Init+0x5a>

0800ba5c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800ba5c:	4770      	bx	lr

0800ba5e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800ba5e:	4770      	bx	lr

0800ba60 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800ba60:	4770      	bx	lr
	...

0800ba64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba64:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba66:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba68:	e852 3f00 	ldrex	r3, [r2]
 800ba6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba70:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800ba74:	6802      	ldr	r2, [r0, #0]
 800ba76:	2900      	cmp	r1, #0
 800ba78:	d1f5      	bne.n	800ba66 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba7a:	4c0f      	ldr	r4, [pc, #60]	@ (800bab8 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba7c:	f102 0308 	add.w	r3, r2, #8
 800ba80:	e853 3f00 	ldrex	r3, [r3]
 800ba84:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba86:	f102 0c08 	add.w	ip, r2, #8
 800ba8a:	e84c 3100 	strex	r1, r3, [ip]
 800ba8e:	2900      	cmp	r1, #0
 800ba90:	d1f4      	bne.n	800ba7c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba92:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d107      	bne.n	800baa8 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba98:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba9c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa0:	e842 3100 	strex	r1, r3, [r2]
 800baa4:	2900      	cmp	r1, #0
 800baa6:	d1f7      	bne.n	800ba98 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800baa8:	2320      	movs	r3, #32
 800baaa:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baae:	2300      	movs	r3, #0
 800bab0:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bab2:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800bab4:	bd10      	pop	{r4, pc}
 800bab6:	bf00      	nop
 800bab8:	effffffe 	.word	0xeffffffe

0800babc <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 800babc:	4770      	bx	lr

0800babe <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 800babe:	4770      	bx	lr

0800bac0 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800bac0:	4770      	bx	lr

0800bac2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bac2:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bac4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 800bac6:	2300      	movs	r3, #0
 800bac8:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bacc:	f7ff fff8 	bl	800bac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bad0:	bd08      	pop	{r3, pc}
	...

0800bad4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bad4:	6803      	ldr	r3, [r0, #0]
{
 800bad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bada:	69d9      	ldr	r1, [r3, #28]
  if (errorflags == 0U)
 800badc:	f640 060f 	movw	r6, #2063	@ 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bae0:	681a      	ldr	r2, [r3, #0]
{
 800bae2:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800bae4:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bae6:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800bae8:	d110      	bne.n	800bb0c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800baea:	068e      	lsls	r6, r1, #26
 800baec:	f140 8097 	bpl.w	800bc1e <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800baf0:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800baf4:	f005 5780 	and.w	r7, r5, #268435456	@ 0x10000000
 800baf8:	433e      	orrs	r6, r7
 800bafa:	f000 8090 	beq.w	800bc1e <HAL_UART_IRQHandler+0x14a>
      if (huart->RxISR != NULL)
 800bafe:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f000 8085 	beq.w	800bc10 <HAL_UART_IRQHandler+0x13c>
}
 800bb06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb0a:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bb0c:	4ea6      	ldr	r6, [pc, #664]	@ (800bda8 <HAL_UART_IRQHandler+0x2d4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bb0e:	48a7      	ldr	r0, [pc, #668]	@ (800bdac <HAL_UART_IRQHandler+0x2d8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bb10:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bb12:	4010      	ands	r0, r2
 800bb14:	4330      	orrs	r0, r6
 800bb16:	f000 8082 	beq.w	800bc1e <HAL_UART_IRQHandler+0x14a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb1a:	07cf      	lsls	r7, r1, #31
 800bb1c:	d509      	bpl.n	800bb32 <HAL_UART_IRQHandler+0x5e>
 800bb1e:	05d0      	lsls	r0, r2, #23
 800bb20:	d507      	bpl.n	800bb32 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bb22:	2001      	movs	r0, #1
 800bb24:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb26:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800bb2a:	f040 0001 	orr.w	r0, r0, #1
 800bb2e:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb32:	078f      	lsls	r7, r1, #30
 800bb34:	d509      	bpl.n	800bb4a <HAL_UART_IRQHandler+0x76>
 800bb36:	07e8      	lsls	r0, r5, #31
 800bb38:	d507      	bpl.n	800bb4a <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bb3a:	2002      	movs	r0, #2
 800bb3c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb3e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800bb42:	f040 0004 	orr.w	r0, r0, #4
 800bb46:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb4a:	074f      	lsls	r7, r1, #29
 800bb4c:	d509      	bpl.n	800bb62 <HAL_UART_IRQHandler+0x8e>
 800bb4e:	07e8      	lsls	r0, r5, #31
 800bb50:	d507      	bpl.n	800bb62 <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb52:	2004      	movs	r0, #4
 800bb54:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb56:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800bb5a:	f040 0002 	orr.w	r0, r0, #2
 800bb5e:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bb62:	070f      	lsls	r7, r1, #28
 800bb64:	d50b      	bpl.n	800bb7e <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb66:	f002 0020 	and.w	r0, r2, #32
 800bb6a:	4330      	orrs	r0, r6
 800bb6c:	d007      	beq.n	800bb7e <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb6e:	2008      	movs	r0, #8
 800bb70:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb72:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800bb76:	f040 0008 	orr.w	r0, r0, #8
 800bb7a:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bb7e:	050e      	lsls	r6, r1, #20
 800bb80:	d50a      	bpl.n	800bb98 <HAL_UART_IRQHandler+0xc4>
 800bb82:	0150      	lsls	r0, r2, #5
 800bb84:	d508      	bpl.n	800bb98 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb86:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800bb8a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bb8c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800bb90:	f043 0320 	orr.w	r3, r3, #32
 800bb94:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb98:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d037      	beq.n	800bc10 <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bba0:	068b      	lsls	r3, r1, #26
 800bba2:	d509      	bpl.n	800bbb8 <HAL_UART_IRQHandler+0xe4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bba4:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bba8:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 800bbac:	432a      	orrs	r2, r5
 800bbae:	d003      	beq.n	800bbb8 <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 800bbb0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800bbb2:	b10b      	cbz	r3, 800bbb8 <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbb8:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 800bbba:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 800bbbc:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbc0:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bbc2:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbca:	ea53 0502 	orrs.w	r5, r3, r2
 800bbce:	d021      	beq.n	800bc14 <HAL_UART_IRQHandler+0x140>
        UART_EndRxTransfer(huart);
 800bbd0:	f7ff ff48 	bl	800ba64 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbd4:	68b3      	ldr	r3, [r6, #8]
 800bbd6:	065f      	lsls	r7, r3, #25
 800bbd8:	d517      	bpl.n	800bc0a <HAL_UART_IRQHandler+0x136>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbda:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbdc:	f102 0308 	add.w	r3, r2, #8
 800bbe0:	e853 3f00 	ldrex	r3, [r3]
 800bbe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe8:	3208      	adds	r2, #8
 800bbea:	e842 3100 	strex	r1, r3, [r2]
 800bbee:	2900      	cmp	r1, #0
 800bbf0:	d1f3      	bne.n	800bbda <HAL_UART_IRQHandler+0x106>
          if (huart->hdmarx != NULL)
 800bbf2:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800bbf6:	b140      	cbz	r0, 800bc0a <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbf8:	4b6d      	ldr	r3, [pc, #436]	@ (800bdb0 <HAL_UART_IRQHandler+0x2dc>)
 800bbfa:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbfc:	f7fa ffc0 	bl	8006b80 <HAL_DMA_Abort_IT>
 800bc00:	b130      	cbz	r0, 800bc10 <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc02:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800bc06:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800bc08:	e77d      	b.n	800bb06 <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	f7ff ff58 	bl	800bac0 <HAL_UART_ErrorCallback>
}
 800bc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 800bc14:	f7ff ff54 	bl	800bac0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc18:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 800bc1c:	e7f8      	b.n	800bc10 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc1e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800bc20:	2801      	cmp	r0, #1
 800bc22:	f040 80b5 	bne.w	800bd90 <HAL_UART_IRQHandler+0x2bc>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bc26:	06ce      	lsls	r6, r1, #27
 800bc28:	f140 80b2 	bpl.w	800bd90 <HAL_UART_IRQHandler+0x2bc>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bc2c:	06d0      	lsls	r0, r2, #27
 800bc2e:	f140 80af 	bpl.w	800bd90 <HAL_UART_IRQHandler+0x2bc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc32:	2210      	movs	r2, #16
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc34:	f8b4 005c 	ldrh.w	r0, [r4, #92]	@ 0x5c
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc38:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc3a:	689a      	ldr	r2, [r3, #8]
 800bc3c:	0652      	lsls	r2, r2, #25
 800bc3e:	d577      	bpl.n	800bd30 <HAL_UART_IRQHandler+0x25c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc40:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 800bc44:	495b      	ldr	r1, [pc, #364]	@ (800bdb4 <HAL_UART_IRQHandler+0x2e0>)
 800bc46:	682a      	ldr	r2, [r5, #0]
 800bc48:	428a      	cmp	r2, r1
 800bc4a:	d01e      	beq.n	800bc8a <HAL_UART_IRQHandler+0x1b6>
 800bc4c:	3118      	adds	r1, #24
 800bc4e:	428a      	cmp	r2, r1
 800bc50:	d01b      	beq.n	800bc8a <HAL_UART_IRQHandler+0x1b6>
 800bc52:	3118      	adds	r1, #24
 800bc54:	428a      	cmp	r2, r1
 800bc56:	d018      	beq.n	800bc8a <HAL_UART_IRQHandler+0x1b6>
 800bc58:	3118      	adds	r1, #24
 800bc5a:	428a      	cmp	r2, r1
 800bc5c:	d015      	beq.n	800bc8a <HAL_UART_IRQHandler+0x1b6>
 800bc5e:	3118      	adds	r1, #24
 800bc60:	428a      	cmp	r2, r1
 800bc62:	d012      	beq.n	800bc8a <HAL_UART_IRQHandler+0x1b6>
 800bc64:	3118      	adds	r1, #24
 800bc66:	428a      	cmp	r2, r1
 800bc68:	d00f      	beq.n	800bc8a <HAL_UART_IRQHandler+0x1b6>
 800bc6a:	3118      	adds	r1, #24
 800bc6c:	428a      	cmp	r2, r1
 800bc6e:	d00c      	beq.n	800bc8a <HAL_UART_IRQHandler+0x1b6>
 800bc70:	3118      	adds	r1, #24
 800bc72:	428a      	cmp	r2, r1
 800bc74:	d009      	beq.n	800bc8a <HAL_UART_IRQHandler+0x1b6>
 800bc76:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800bc7a:	428a      	cmp	r2, r1
 800bc7c:	d005      	beq.n	800bc8a <HAL_UART_IRQHandler+0x1b6>
 800bc7e:	3118      	adds	r1, #24
 800bc80:	428a      	cmp	r2, r1
 800bc82:	d002      	beq.n	800bc8a <HAL_UART_IRQHandler+0x1b6>
 800bc84:	3118      	adds	r1, #24
 800bc86:	428a      	cmp	r2, r1
 800bc88:	d0ff      	beq.n	800bc8a <HAL_UART_IRQHandler+0x1b6>
 800bc8a:	6851      	ldr	r1, [r2, #4]
 800bc8c:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 800bc8e:	2900      	cmp	r1, #0
 800bc90:	d043      	beq.n	800bd1a <HAL_UART_IRQHandler+0x246>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc92:	4281      	cmp	r1, r0
 800bc94:	d241      	bcs.n	800bd1a <HAL_UART_IRQHandler+0x246>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc96:	69ea      	ldr	r2, [r5, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 800bc98:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc9c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800bca0:	d02f      	beq.n	800bd02 <HAL_UART_IRQHandler+0x22e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca2:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bca6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcaa:	e843 2100 	strex	r1, r2, [r3]
 800bcae:	2900      	cmp	r1, #0
 800bcb0:	d1f7      	bne.n	800bca2 <HAL_UART_IRQHandler+0x1ce>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb2:	f103 0208 	add.w	r2, r3, #8
 800bcb6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcba:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcbe:	f103 0008 	add.w	r0, r3, #8
 800bcc2:	e840 2100 	strex	r1, r2, [r0]
 800bcc6:	2900      	cmp	r1, #0
 800bcc8:	d1f3      	bne.n	800bcb2 <HAL_UART_IRQHandler+0x1de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcca:	f103 0208 	add.w	r2, r3, #8
 800bcce:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd6:	f103 0008 	add.w	r0, r3, #8
 800bcda:	e840 2100 	strex	r1, r2, [r0]
 800bcde:	2900      	cmp	r1, #0
 800bce0:	d1f3      	bne.n	800bcca <HAL_UART_IRQHandler+0x1f6>
          huart->RxState = HAL_UART_STATE_READY;
 800bce2:	2220      	movs	r2, #32
 800bce4:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bce8:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcea:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcee:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf2:	e843 2100 	strex	r1, r2, [r3]
 800bcf6:	2900      	cmp	r1, #0
 800bcf8:	d1f7      	bne.n	800bcea <HAL_UART_IRQHandler+0x216>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bcfa:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800bcfe:	f7fa fe2b 	bl	8006958 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd02:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd04:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd08:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd0a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800bd0e:	1ac9      	subs	r1, r1, r3
 800bd10:	b289      	uxth	r1, r1
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd12:	4620      	mov	r0, r4
 800bd14:	f7f4 fe8c 	bl	8000a30 <HAL_UARTEx_RxEventCallback>
 800bd18:	e77a      	b.n	800bc10 <HAL_UART_IRQHandler+0x13c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bd1a:	4281      	cmp	r1, r0
 800bd1c:	f47f af78 	bne.w	800bc10 <HAL_UART_IRQHandler+0x13c>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800bd20:	69eb      	ldr	r3, [r5, #28]
 800bd22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd26:	f47f af73 	bne.w	800bc10 <HAL_UART_IRQHandler+0x13c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd2a:	2302      	movs	r3, #2
 800bd2c:	6723      	str	r3, [r4, #112]	@ 0x70
 800bd2e:	e7f0      	b.n	800bd12 <HAL_UART_IRQHandler+0x23e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd30:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 800bd34:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd38:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 800bd3a:	b289      	uxth	r1, r1
 800bd3c:	2900      	cmp	r1, #0
 800bd3e:	f43f af67 	beq.w	800bc10 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd42:	1a80      	subs	r0, r0, r2
 800bd44:	b281      	uxth	r1, r0
          && (nb_rx_data > 0U))
 800bd46:	2900      	cmp	r1, #0
 800bd48:	f43f af62 	beq.w	800bc10 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd50:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd54:	e843 2000 	strex	r0, r2, [r3]
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d1f7      	bne.n	800bd4c <HAL_UART_IRQHandler+0x278>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd5c:	4d16      	ldr	r5, [pc, #88]	@ (800bdb8 <HAL_UART_IRQHandler+0x2e4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5e:	f103 0208 	add.w	r2, r3, #8
 800bd62:	e852 2f00 	ldrex	r2, [r2]
 800bd66:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd68:	f103 0608 	add.w	r6, r3, #8
 800bd6c:	e846 2000 	strex	r0, r2, [r6]
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d1f4      	bne.n	800bd5e <HAL_UART_IRQHandler+0x28a>
        huart->RxState = HAL_UART_STATE_READY;
 800bd74:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800bd76:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800bd78:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd7c:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd82:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd86:	e843 2000 	strex	r0, r2, [r3]
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	d1f7      	bne.n	800bd7e <HAL_UART_IRQHandler+0x2aa>
 800bd8e:	e7cc      	b.n	800bd2a <HAL_UART_IRQHandler+0x256>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bd90:	02cf      	lsls	r7, r1, #11
 800bd92:	d513      	bpl.n	800bdbc <HAL_UART_IRQHandler+0x2e8>
 800bd94:	026e      	lsls	r6, r5, #9
 800bd96:	d511      	bpl.n	800bdbc <HAL_UART_IRQHandler+0x2e8>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bd98:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800bd9c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bd9e:	621a      	str	r2, [r3, #32]
}
 800bda0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800bda4:	f000 bdf6 	b.w	800c994 <HAL_UARTEx_WakeupCallback>
 800bda8:	10000001 	.word	0x10000001
 800bdac:	04000120 	.word	0x04000120
 800bdb0:	0800bac3 	.word	0x0800bac3
 800bdb4:	40020010 	.word	0x40020010
 800bdb8:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bdbc:	0608      	lsls	r0, r1, #24
 800bdbe:	d50b      	bpl.n	800bdd8 <HAL_UART_IRQHandler+0x304>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bdc0:	f002 0080 	and.w	r0, r2, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bdc4:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
 800bdc8:	4328      	orrs	r0, r5
 800bdca:	d005      	beq.n	800bdd8 <HAL_UART_IRQHandler+0x304>
    if (huart->TxISR != NULL)
 800bdcc:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f43f af1e 	beq.w	800bc10 <HAL_UART_IRQHandler+0x13c>
      huart->TxISR(huart);
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	e696      	b.n	800bb06 <HAL_UART_IRQHandler+0x32>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bdd8:	064f      	lsls	r7, r1, #25
 800bdda:	d511      	bpl.n	800be00 <HAL_UART_IRQHandler+0x32c>
 800bddc:	0656      	lsls	r6, r2, #25
 800bdde:	d50f      	bpl.n	800be00 <HAL_UART_IRQHandler+0x32c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde0:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bde4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde8:	e843 2100 	strex	r1, r2, [r3]
 800bdec:	2900      	cmp	r1, #0
 800bdee:	d1f7      	bne.n	800bde0 <HAL_UART_IRQHandler+0x30c>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdf0:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bdf2:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 800bdf4:	67a1      	str	r1, [r4, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_READY;
 800bdf6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  HAL_UART_TxCpltCallback(huart);
 800bdfa:	f7ff fe5f 	bl	800babc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdfe:	e707      	b.n	800bc10 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800be00:	020d      	lsls	r5, r1, #8
 800be02:	d506      	bpl.n	800be12 <HAL_UART_IRQHandler+0x33e>
 800be04:	0050      	lsls	r0, r2, #1
 800be06:	d504      	bpl.n	800be12 <HAL_UART_IRQHandler+0x33e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800be08:	4620      	mov	r0, r4
}
 800be0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800be0e:	f000 bdc3 	b.w	800c998 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800be12:	01cb      	lsls	r3, r1, #7
 800be14:	f57f aefc 	bpl.w	800bc10 <HAL_UART_IRQHandler+0x13c>
 800be18:	2a00      	cmp	r2, #0
 800be1a:	f6bf aef9 	bge.w	800bc10 <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800be1e:	4620      	mov	r0, r4
}
 800be20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800be24:	f000 bdb7 	b.w	800c996 <HAL_UARTEx_RxFifoFullCallback>

0800be28 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be28:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 800be2c:	f8b0 1060 	ldrh.w	r1, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be30:	2a22      	cmp	r2, #34	@ 0x22
{
 800be32:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be34:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be36:	d155      	bne.n	800bee4 <UART_RxISR_8BIT+0xbc>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800be3a:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800be3c:	400b      	ands	r3, r1
 800be3e:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800be40:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800be42:	3301      	adds	r3, #1
 800be44:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 800be46:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800be4a:	3b01      	subs	r3, #1
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800be52:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800be56:	b29b      	uxth	r3, r3
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d142      	bne.n	800bee2 <UART_RxISR_8BIT+0xba>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be5c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be5e:	e852 3f00 	ldrex	r3, [r2]
 800be62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be66:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800be6a:	6803      	ldr	r3, [r0, #0]
 800be6c:	2900      	cmp	r1, #0
 800be6e:	d1f5      	bne.n	800be5c <UART_RxISR_8BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be70:	f103 0208 	add.w	r2, r3, #8
 800be74:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be78:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be7c:	f103 0c08 	add.w	ip, r3, #8
 800be80:	e84c 2100 	strex	r1, r2, [ip]
 800be84:	2900      	cmp	r1, #0
 800be86:	d1f3      	bne.n	800be70 <UART_RxISR_8BIT+0x48>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be88:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800be8a:	6741      	str	r1, [r0, #116]	@ 0x74
      huart->RxState = HAL_UART_STATE_READY;
 800be8c:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be90:	4a17      	ldr	r2, [pc, #92]	@ (800bef0 <UART_RxISR_8BIT+0xc8>)
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be92:	6701      	str	r1, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be94:	4293      	cmp	r3, r2
 800be96:	d105      	bne.n	800bea4 <UART_RxISR_8BIT+0x7c>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be98:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 800be9a:	2a01      	cmp	r2, #1
 800be9c:	d00e      	beq.n	800bebc <UART_RxISR_8BIT+0x94>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800be9e:	f7ff fe0e 	bl	800babe <HAL_UART_RxCpltCallback>
 800bea2:	e01e      	b.n	800bee2 <UART_RxISR_8BIT+0xba>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bea4:	685a      	ldr	r2, [r3, #4]
 800bea6:	0211      	lsls	r1, r2, #8
 800bea8:	d5f6      	bpl.n	800be98 <UART_RxISR_8BIT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beaa:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800beae:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb2:	e843 2100 	strex	r1, r2, [r3]
 800beb6:	2900      	cmp	r1, #0
 800beb8:	d1f7      	bne.n	800beaa <UART_RxISR_8BIT+0x82>
 800beba:	e7ed      	b.n	800be98 <UART_RxISR_8BIT+0x70>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bebc:	2200      	movs	r2, #0
 800bebe:	66c2      	str	r2, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec0:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bec4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec8:	e843 2100 	strex	r1, r2, [r3]
 800becc:	2900      	cmp	r1, #0
 800bece:	d1f7      	bne.n	800bec0 <UART_RxISR_8BIT+0x98>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bed0:	69da      	ldr	r2, [r3, #28]
 800bed2:	06d2      	lsls	r2, r2, #27
 800bed4:	d501      	bpl.n	800beda <UART_RxISR_8BIT+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bed6:	2210      	movs	r2, #16
 800bed8:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800beda:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800bede:	f7f4 fda7 	bl	8000a30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bee2:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bee4:	699a      	ldr	r2, [r3, #24]
 800bee6:	f042 0208 	orr.w	r2, r2, #8
 800beea:	619a      	str	r2, [r3, #24]
}
 800beec:	e7f9      	b.n	800bee2 <UART_RxISR_8BIT+0xba>
 800beee:	bf00      	nop
 800bef0:	58000c00 	.word	0x58000c00

0800bef4 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bef4:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 800bef8:	f8b0 1060 	ldrh.w	r1, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800befc:	2a22      	cmp	r2, #34	@ 0x22
{
 800befe:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf00:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf02:	d152      	bne.n	800bfaa <UART_RxISR_16BIT+0xb6>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 800bf06:	4011      	ands	r1, r2
 800bf08:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800bf0a:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 800bf0e:	6582      	str	r2, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 800bf10:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 800bf14:	3a01      	subs	r2, #1
 800bf16:	b292      	uxth	r2, r2
 800bf18:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bf1c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 800bf20:	b292      	uxth	r2, r2
 800bf22:	2a00      	cmp	r2, #0
 800bf24:	d140      	bne.n	800bfa8 <UART_RxISR_16BIT+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf26:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf2a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2e:	e843 2100 	strex	r1, r2, [r3]
 800bf32:	2900      	cmp	r1, #0
 800bf34:	d1f7      	bne.n	800bf26 <UART_RxISR_16BIT+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf36:	f103 0208 	add.w	r2, r3, #8
 800bf3a:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf3e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf42:	f103 0c08 	add.w	ip, r3, #8
 800bf46:	e84c 2100 	strex	r1, r2, [ip]
 800bf4a:	2900      	cmp	r1, #0
 800bf4c:	d1f3      	bne.n	800bf36 <UART_RxISR_16BIT+0x42>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf4e:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bf50:	6741      	str	r1, [r0, #116]	@ 0x74
      huart->RxState = HAL_UART_STATE_READY;
 800bf52:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf56:	4a17      	ldr	r2, [pc, #92]	@ (800bfb4 <UART_RxISR_16BIT+0xc0>)
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf58:	6701      	str	r1, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d105      	bne.n	800bf6a <UART_RxISR_16BIT+0x76>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf5e:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 800bf60:	2a01      	cmp	r2, #1
 800bf62:	d00e      	beq.n	800bf82 <UART_RxISR_16BIT+0x8e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bf64:	f7ff fdab 	bl	800babe <HAL_UART_RxCpltCallback>
 800bf68:	e01e      	b.n	800bfa8 <UART_RxISR_16BIT+0xb4>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf6a:	685a      	ldr	r2, [r3, #4]
 800bf6c:	0211      	lsls	r1, r2, #8
 800bf6e:	d5f6      	bpl.n	800bf5e <UART_RxISR_16BIT+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf70:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf74:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf78:	e843 2100 	strex	r1, r2, [r3]
 800bf7c:	2900      	cmp	r1, #0
 800bf7e:	d1f7      	bne.n	800bf70 <UART_RxISR_16BIT+0x7c>
 800bf80:	e7ed      	b.n	800bf5e <UART_RxISR_16BIT+0x6a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf82:	2200      	movs	r2, #0
 800bf84:	66c2      	str	r2, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf86:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf8a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8e:	e843 2100 	strex	r1, r2, [r3]
 800bf92:	2900      	cmp	r1, #0
 800bf94:	d1f7      	bne.n	800bf86 <UART_RxISR_16BIT+0x92>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bf96:	69da      	ldr	r2, [r3, #28]
 800bf98:	06d2      	lsls	r2, r2, #27
 800bf9a:	d501      	bpl.n	800bfa0 <UART_RxISR_16BIT+0xac>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bf9c:	2210      	movs	r2, #16
 800bf9e:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bfa0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800bfa4:	f7f4 fd44 	bl	8000a30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bfa8:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bfaa:	699a      	ldr	r2, [r3, #24]
 800bfac:	f042 0208 	orr.w	r2, r2, #8
 800bfb0:	619a      	str	r2, [r3, #24]
}
 800bfb2:	e7f9      	b.n	800bfa8 <UART_RxISR_16BIT+0xb4>
 800bfb4:	58000c00 	.word	0x58000c00

0800bfb8 <UART_RxISR_8BIT_FIFOEN>:
{
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bfb8:	6803      	ldr	r3, [r0, #0]
{
 800bfba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bfbe:	69dd      	ldr	r5, [r3, #28]
{
 800bfc0:	4604      	mov	r4, r0
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bfc2:	f8d3 8000 	ldr.w	r8, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bfc6:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfc8:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t  uhMask = huart->Mask;
 800bfcc:	f8b0 7060 	ldrh.w	r7, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfd0:	2a22      	cmp	r2, #34	@ 0x22
 800bfd2:	f040 80b5 	bne.w	800c140 <UART_RxISR_8BIT_FIFOEN+0x188>
  {
    nb_rx_data = huart->NbRxDataToProcess;
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bfd6:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f000 808b 	beq.w	800c0f6 <UART_RxISR_8BIT_FIFOEN+0x13e>
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfe0:	f04f 0900 	mov.w	r9, #0
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfe4:	f006 0601 	and.w	r6, r6, #1
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bfe8:	f04f 0a04 	mov.w	sl, #4
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bfec:	06ab      	lsls	r3, r5, #26
 800bfee:	f140 8082 	bpl.w	800c0f6 <UART_RxISR_8BIT_FIFOEN+0x13e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bff2:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bff4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bff8:	403b      	ands	r3, r7
 800bffa:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800bffc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bffe:	3301      	adds	r3, #1
 800c000:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 800c002:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800c006:	3b01      	subs	r3, #1
 800c008:	b29b      	uxth	r3, r3
 800c00a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c00e:	6823      	ldr	r3, [r4, #0]
 800c010:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c012:	0768      	lsls	r0, r5, #29
 800c014:	d02a      	beq.n	800c06c <UART_RxISR_8BIT_FIFOEN+0xb4>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c016:	07e9      	lsls	r1, r5, #31
 800c018:	d50a      	bpl.n	800c030 <UART_RxISR_8BIT_FIFOEN+0x78>
 800c01a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c01e:	d007      	beq.n	800c030 <UART_RxISR_8BIT_FIFOEN+0x78>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c020:	2201      	movs	r2, #1
 800c022:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c024:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800c028:	f042 0201 	orr.w	r2, r2, #1
 800c02c:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c030:	07aa      	lsls	r2, r5, #30
 800c032:	d508      	bpl.n	800c046 <UART_RxISR_8BIT_FIFOEN+0x8e>
 800c034:	b13e      	cbz	r6, 800c046 <UART_RxISR_8BIT_FIFOEN+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c036:	2202      	movs	r2, #2
 800c038:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c03a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800c03e:	f042 0204 	orr.w	r2, r2, #4
 800c042:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c046:	0768      	lsls	r0, r5, #29
 800c048:	d508      	bpl.n	800c05c <UART_RxISR_8BIT_FIFOEN+0xa4>
 800c04a:	b13e      	cbz	r6, 800c05c <UART_RxISR_8BIT_FIFOEN+0xa4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c04c:	f8c3 a020 	str.w	sl, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c050:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800c054:	f043 0302 	orr.w	r3, r3, #2
 800c058:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c05c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800c060:	b123      	cbz	r3, 800c06c <UART_RxISR_8BIT_FIFOEN+0xb4>
          HAL_UART_ErrorCallback(huart);
 800c062:	4620      	mov	r0, r4
 800c064:	f7ff fd2c 	bl	800bac0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c068:	f8c4 9090 	str.w	r9, [r4, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c06c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800c070:	b29b      	uxth	r3, r3
 800c072:	2b00      	cmp	r3, #0
 800c074:	d1ba      	bne.n	800bfec <UART_RxISR_8BIT_FIFOEN+0x34>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c076:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c078:	e852 3f00 	ldrex	r3, [r2]
 800c07c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c080:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800c084:	6823      	ldr	r3, [r4, #0]
 800c086:	2900      	cmp	r1, #0
 800c088:	d1f5      	bne.n	800c076 <UART_RxISR_8BIT_FIFOEN+0xbe>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c08a:	4830      	ldr	r0, [pc, #192]	@ (800c14c <UART_RxISR_8BIT_FIFOEN+0x194>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08c:	f103 0208 	add.w	r2, r3, #8
 800c090:	e852 2f00 	ldrex	r2, [r2]
 800c094:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c096:	f103 0508 	add.w	r5, r3, #8
 800c09a:	e845 2100 	strex	r1, r2, [r5]
 800c09e:	2900      	cmp	r1, #0
 800c0a0:	d1f4      	bne.n	800c08c <UART_RxISR_8BIT_FIFOEN+0xd4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c0a2:	2220      	movs	r2, #32

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c0a4:	6761      	str	r1, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c0a6:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c0aa:	4a29      	ldr	r2, [pc, #164]	@ (800c150 <UART_RxISR_8BIT_FIFOEN+0x198>)
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0ac:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d00a      	beq.n	800c0c8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c0b2:	685a      	ldr	r2, [r3, #4]
 800c0b4:	0211      	lsls	r1, r2, #8
 800c0b6:	d507      	bpl.n	800c0c8 <UART_RxISR_8BIT_FIFOEN+0x110>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b8:	e853 2f00 	ldrex	r2, [r3]
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c0bc:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c0:	e843 2100 	strex	r1, r2, [r3]
 800c0c4:	2900      	cmp	r1, #0
 800c0c6:	d1f7      	bne.n	800c0b8 <UART_RxISR_8BIT_FIFOEN+0x100>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0c8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800c0ca:	2a01      	cmp	r2, #1
 800c0cc:	d134      	bne.n	800c138 <UART_RxISR_8BIT_FIFOEN+0x180>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d2:	e853 2f00 	ldrex	r2, [r3]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0d6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0da:	e843 2100 	strex	r1, r2, [r3]
 800c0de:	2900      	cmp	r1, #0
 800c0e0:	d1f7      	bne.n	800c0d2 <UART_RxISR_8BIT_FIFOEN+0x11a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c0e2:	69da      	ldr	r2, [r3, #28]
 800c0e4:	06d2      	lsls	r2, r2, #27
 800c0e6:	d501      	bpl.n	800c0ec <UART_RxISR_8BIT_FIFOEN+0x134>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c0e8:	2210      	movs	r2, #16
 800c0ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0ec:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f7f4 fc9d 	bl	8000a30 <HAL_UARTEx_RxEventCallback>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c0f6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800c0fa:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c0fc:	b1d3      	cbz	r3, 800c134 <UART_RxISR_8BIT_FIFOEN+0x17c>
 800c0fe:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 800c102:	429a      	cmp	r2, r3
 800c104:	d916      	bls.n	800c134 <UART_RxISR_8BIT_FIFOEN+0x17c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c106:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c108:	f102 0308 	add.w	r3, r2, #8
 800c10c:	e853 3f00 	ldrex	r3, [r3]
 800c110:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c114:	3208      	adds	r2, #8
 800c116:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800c11a:	6822      	ldr	r2, [r4, #0]
 800c11c:	2900      	cmp	r1, #0
 800c11e:	d1f2      	bne.n	800c106 <UART_RxISR_8BIT_FIFOEN+0x14e>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c120:	4b0c      	ldr	r3, [pc, #48]	@ (800c154 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 800c122:	6763      	str	r3, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c124:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c128:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12c:	e842 3100 	strex	r1, r3, [r2]
 800c130:	2900      	cmp	r1, #0
 800c132:	d1f7      	bne.n	800c124 <UART_RxISR_8BIT_FIFOEN+0x16c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          HAL_UART_RxCpltCallback(huart);
 800c138:	4620      	mov	r0, r4
 800c13a:	f7ff fcc0 	bl	800babe <HAL_UART_RxCpltCallback>
 800c13e:	e7da      	b.n	800c0f6 <UART_RxISR_8BIT_FIFOEN+0x13e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c140:	699a      	ldr	r2, [r3, #24]
 800c142:	f042 0208 	orr.w	r2, r2, #8
 800c146:	619a      	str	r2, [r3, #24]
}
 800c148:	e7f4      	b.n	800c134 <UART_RxISR_8BIT_FIFOEN+0x17c>
 800c14a:	bf00      	nop
 800c14c:	effffffe 	.word	0xeffffffe
 800c150:	58000c00 	.word	0x58000c00
 800c154:	0800be29 	.word	0x0800be29

0800c158 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c158:	6803      	ldr	r3, [r0, #0]
{
 800c15a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c15e:	69dd      	ldr	r5, [r3, #28]
{
 800c160:	4604      	mov	r4, r0
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c162:	f8d3 8000 	ldr.w	r8, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c166:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c168:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t  uhMask = huart->Mask;
 800c16c:	f8b0 7060 	ldrh.w	r7, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c170:	2a22      	cmp	r2, #34	@ 0x22
 800c172:	f040 80b2 	bne.w	800c2da <UART_RxISR_16BIT_FIFOEN+0x182>
  {
    nb_rx_data = huart->NbRxDataToProcess;
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c176:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f000 8088 	beq.w	800c290 <UART_RxISR_16BIT_FIFOEN+0x138>
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c180:	f04f 0900 	mov.w	r9, #0
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c184:	f006 0601 	and.w	r6, r6, #1
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c188:	f04f 0a04 	mov.w	sl, #4
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c18c:	06ab      	lsls	r3, r5, #26
 800c18e:	d57f      	bpl.n	800c290 <UART_RxISR_16BIT_FIFOEN+0x138>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c190:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c192:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c194:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800c196:	4039      	ands	r1, r7
 800c198:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 800c19c:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 800c19e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 800c1a2:	3a01      	subs	r2, #1
 800c1a4:	b292      	uxth	r2, r2
 800c1a6:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c1aa:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c1ac:	0768      	lsls	r0, r5, #29
 800c1ae:	d02a      	beq.n	800c206 <UART_RxISR_16BIT_FIFOEN+0xae>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c1b0:	07e9      	lsls	r1, r5, #31
 800c1b2:	d50a      	bpl.n	800c1ca <UART_RxISR_16BIT_FIFOEN+0x72>
 800c1b4:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c1b8:	d007      	beq.n	800c1ca <UART_RxISR_16BIT_FIFOEN+0x72>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c1be:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800c1c2:	f042 0201 	orr.w	r2, r2, #1
 800c1c6:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1ca:	07aa      	lsls	r2, r5, #30
 800c1cc:	d508      	bpl.n	800c1e0 <UART_RxISR_16BIT_FIFOEN+0x88>
 800c1ce:	b13e      	cbz	r6, 800c1e0 <UART_RxISR_16BIT_FIFOEN+0x88>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c1d0:	2202      	movs	r2, #2
 800c1d2:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c1d4:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800c1d8:	f042 0204 	orr.w	r2, r2, #4
 800c1dc:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1e0:	0768      	lsls	r0, r5, #29
 800c1e2:	d508      	bpl.n	800c1f6 <UART_RxISR_16BIT_FIFOEN+0x9e>
 800c1e4:	b13e      	cbz	r6, 800c1f6 <UART_RxISR_16BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c1e6:	f8c3 a020 	str.w	sl, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c1ea:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800c1ee:	f043 0302 	orr.w	r3, r3, #2
 800c1f2:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c1f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800c1fa:	b123      	cbz	r3, 800c206 <UART_RxISR_16BIT_FIFOEN+0xae>
          HAL_UART_ErrorCallback(huart);
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	f7ff fc5f 	bl	800bac0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c202:	f8c4 9090 	str.w	r9, [r4, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c206:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1bd      	bne.n	800c18c <UART_RxISR_16BIT_FIFOEN+0x34>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c210:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c212:	e852 3f00 	ldrex	r3, [r2]
 800c216:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c21a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800c21e:	6823      	ldr	r3, [r4, #0]
 800c220:	2900      	cmp	r1, #0
 800c222:	d1f5      	bne.n	800c210 <UART_RxISR_16BIT_FIFOEN+0xb8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c224:	482f      	ldr	r0, [pc, #188]	@ (800c2e4 <UART_RxISR_16BIT_FIFOEN+0x18c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c226:	f103 0208 	add.w	r2, r3, #8
 800c22a:	e852 2f00 	ldrex	r2, [r2]
 800c22e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c230:	f103 0508 	add.w	r5, r3, #8
 800c234:	e845 2100 	strex	r1, r2, [r5]
 800c238:	2900      	cmp	r1, #0
 800c23a:	d1f4      	bne.n	800c226 <UART_RxISR_16BIT_FIFOEN+0xce>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c23c:	2220      	movs	r2, #32

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c23e:	6761      	str	r1, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c240:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c244:	4a28      	ldr	r2, [pc, #160]	@ (800c2e8 <UART_RxISR_16BIT_FIFOEN+0x190>)
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c246:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c248:	4293      	cmp	r3, r2
 800c24a:	d00a      	beq.n	800c262 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c24c:	685a      	ldr	r2, [r3, #4]
 800c24e:	0211      	lsls	r1, r2, #8
 800c250:	d507      	bpl.n	800c262 <UART_RxISR_16BIT_FIFOEN+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c252:	e853 2f00 	ldrex	r2, [r3]
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c256:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c25a:	e843 2100 	strex	r1, r2, [r3]
 800c25e:	2900      	cmp	r1, #0
 800c260:	d1f7      	bne.n	800c252 <UART_RxISR_16BIT_FIFOEN+0xfa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c262:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800c264:	2a01      	cmp	r2, #1
 800c266:	d134      	bne.n	800c2d2 <UART_RxISR_16BIT_FIFOEN+0x17a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c268:	2200      	movs	r2, #0
 800c26a:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26c:	e853 2f00 	ldrex	r2, [r3]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c270:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c274:	e843 2100 	strex	r1, r2, [r3]
 800c278:	2900      	cmp	r1, #0
 800c27a:	d1f7      	bne.n	800c26c <UART_RxISR_16BIT_FIFOEN+0x114>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c27c:	69da      	ldr	r2, [r3, #28]
 800c27e:	06d2      	lsls	r2, r2, #27
 800c280:	d501      	bpl.n	800c286 <UART_RxISR_16BIT_FIFOEN+0x12e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c282:	2210      	movs	r2, #16
 800c284:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c286:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800c28a:	4620      	mov	r0, r4
 800c28c:	f7f4 fbd0 	bl	8000a30 <HAL_UARTEx_RxEventCallback>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c290:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800c294:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c296:	b1d3      	cbz	r3, 800c2ce <UART_RxISR_16BIT_FIFOEN+0x176>
 800c298:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d916      	bls.n	800c2ce <UART_RxISR_16BIT_FIFOEN+0x176>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c2a0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a2:	f102 0308 	add.w	r3, r2, #8
 800c2a6:	e853 3f00 	ldrex	r3, [r3]
 800c2aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ae:	3208      	adds	r2, #8
 800c2b0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800c2b4:	6822      	ldr	r2, [r4, #0]
 800c2b6:	2900      	cmp	r1, #0
 800c2b8:	d1f2      	bne.n	800c2a0 <UART_RxISR_16BIT_FIFOEN+0x148>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c2ba:	4b0c      	ldr	r3, [pc, #48]	@ (800c2ec <UART_RxISR_16BIT_FIFOEN+0x194>)
 800c2bc:	6763      	str	r3, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2be:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c2c2:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c6:	e842 3100 	strex	r1, r3, [r2]
 800c2ca:	2900      	cmp	r1, #0
 800c2cc:	d1f7      	bne.n	800c2be <UART_RxISR_16BIT_FIFOEN+0x166>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          HAL_UART_RxCpltCallback(huart);
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f7ff fbf3 	bl	800babe <HAL_UART_RxCpltCallback>
 800c2d8:	e7da      	b.n	800c290 <UART_RxISR_16BIT_FIFOEN+0x138>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c2da:	699a      	ldr	r2, [r3, #24]
 800c2dc:	f042 0208 	orr.w	r2, r2, #8
 800c2e0:	619a      	str	r2, [r3, #24]
}
 800c2e2:	e7f4      	b.n	800c2ce <UART_RxISR_16BIT_FIFOEN+0x176>
 800c2e4:	effffffe 	.word	0xeffffffe
 800c2e8:	58000c00 	.word	0x58000c00
 800c2ec:	0800bef5 	.word	0x0800bef5

0800c2f0 <UART_SetConfig>:
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c2f0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c2f2:	69c3      	ldr	r3, [r0, #28]
 800c2f4:	6881      	ldr	r1, [r0, #8]
{
 800c2f6:	b530      	push	{r4, r5, lr}
 800c2f8:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c2fa:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c2fc:	6815      	ldr	r5, [r2, #0]
{
 800c2fe:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c300:	4301      	orrs	r1, r0
 800c302:	6960      	ldr	r0, [r4, #20]
 800c304:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c306:	48a5      	ldr	r0, [pc, #660]	@ (800c59c <UART_SetConfig+0x2ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c308:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c30a:	4028      	ands	r0, r5
 800c30c:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c30e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c310:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c312:	6851      	ldr	r1, [r2, #4]
 800c314:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800c318:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c31a:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c31c:	6051      	str	r1, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c31e:	49a0      	ldr	r1, [pc, #640]	@ (800c5a0 <UART_SetConfig+0x2b0>)
 800c320:	428a      	cmp	r2, r1
    tmpreg |= huart->Init.OneBitSampling;
 800c322:	bf1c      	itt	ne
 800c324:	6a21      	ldrne	r1, [r4, #32]
 800c326:	4308      	orrne	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c328:	6891      	ldr	r1, [r2, #8]
 800c32a:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 800c32e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c332:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c334:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c336:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c338:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800c33a:	f021 010f 	bic.w	r1, r1, #15
 800c33e:	4301      	orrs	r1, r0
 800c340:	62d1      	str	r1, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c342:	4998      	ldr	r1, [pc, #608]	@ (800c5a4 <UART_SetConfig+0x2b4>)
 800c344:	428a      	cmp	r2, r1
 800c346:	d112      	bne.n	800c36e <UART_SetConfig+0x7e>
 800c348:	4a97      	ldr	r2, [pc, #604]	@ (800c5a8 <UART_SetConfig+0x2b8>)
 800c34a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800c34c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800c350:	2a18      	cmp	r2, #24
 800c352:	f000 8101 	beq.w	800c558 <UART_SetConfig+0x268>
 800c356:	d83b      	bhi.n	800c3d0 <UART_SetConfig+0xe0>
 800c358:	2a08      	cmp	r2, #8
 800c35a:	f000 80f5 	beq.w	800c548 <UART_SetConfig+0x258>
 800c35e:	2a10      	cmp	r2, #16
 800c360:	f000 813a 	beq.w	800c5d8 <UART_SetConfig+0x2e8>
 800c364:	2a00      	cmp	r2, #0
 800c366:	f000 80e9 	beq.w	800c53c <UART_SetConfig+0x24c>
        ret = HAL_ERROR;
 800c36a:	2001      	movs	r0, #1
 800c36c:	e06a      	b.n	800c444 <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c36e:	498f      	ldr	r1, [pc, #572]	@ (800c5ac <UART_SetConfig+0x2bc>)
 800c370:	428a      	cmp	r2, r1
 800c372:	d10d      	bne.n	800c390 <UART_SetConfig+0xa0>
 800c374:	4a8c      	ldr	r2, [pc, #560]	@ (800c5a8 <UART_SetConfig+0x2b8>)
 800c376:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800c378:	f002 0207 	and.w	r2, r2, #7
 800c37c:	2a05      	cmp	r2, #5
 800c37e:	d8f4      	bhi.n	800c36a <UART_SetConfig+0x7a>
 800c380:	e8df f012 	tbh	[pc, r2, lsl #1]
 800c384:	00e2007e 	.word	0x00e2007e
 800c388:	00ea012a 	.word	0x00ea012a
 800c38c:	002b0107 	.word	0x002b0107
 800c390:	4987      	ldr	r1, [pc, #540]	@ (800c5b0 <UART_SetConfig+0x2c0>)
 800c392:	428a      	cmp	r2, r1
 800c394:	d0ee      	beq.n	800c374 <UART_SetConfig+0x84>
 800c396:	4987      	ldr	r1, [pc, #540]	@ (800c5b4 <UART_SetConfig+0x2c4>)
 800c398:	428a      	cmp	r2, r1
 800c39a:	d0eb      	beq.n	800c374 <UART_SetConfig+0x84>
 800c39c:	4986      	ldr	r1, [pc, #536]	@ (800c5b8 <UART_SetConfig+0x2c8>)
 800c39e:	428a      	cmp	r2, r1
 800c3a0:	d0e8      	beq.n	800c374 <UART_SetConfig+0x84>
 800c3a2:	4986      	ldr	r1, [pc, #536]	@ (800c5bc <UART_SetConfig+0x2cc>)
 800c3a4:	428a      	cmp	r2, r1
 800c3a6:	d0cf      	beq.n	800c348 <UART_SetConfig+0x58>
 800c3a8:	4985      	ldr	r1, [pc, #532]	@ (800c5c0 <UART_SetConfig+0x2d0>)
 800c3aa:	428a      	cmp	r2, r1
 800c3ac:	d0e2      	beq.n	800c374 <UART_SetConfig+0x84>
 800c3ae:	4985      	ldr	r1, [pc, #532]	@ (800c5c4 <UART_SetConfig+0x2d4>)
 800c3b0:	428a      	cmp	r2, r1
 800c3b2:	d0df      	beq.n	800c374 <UART_SetConfig+0x84>
 800c3b4:	4b7a      	ldr	r3, [pc, #488]	@ (800c5a0 <UART_SetConfig+0x2b0>)
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d1d7      	bne.n	800c36a <UART_SetConfig+0x7a>
 800c3ba:	4a7b      	ldr	r2, [pc, #492]	@ (800c5a8 <UART_SetConfig+0x2b8>)
 800c3bc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c3be:	f003 0307 	and.w	r3, r3, #7
 800c3c2:	2b05      	cmp	r3, #5
 800c3c4:	d8d1      	bhi.n	800c36a <UART_SetConfig+0x7a>
 800c3c6:	e8df f003 	tbb	[pc, r3]
 800c3ca:	4538      	.short	0x4538
 800c3cc:	0f594f4a 	.word	0x0f594f4a
 800c3d0:	2a20      	cmp	r2, #32
 800c3d2:	f000 80de 	beq.w	800c592 <UART_SetConfig+0x2a2>
 800c3d6:	2a28      	cmp	r2, #40	@ 0x28
 800c3d8:	d1c7      	bne.n	800c36a <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c3da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c3de:	f000 808a 	beq.w	800c4f6 <UART_SetConfig+0x206>
 800c3e2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800c3e6:	e0c4      	b.n	800c572 <UART_SetConfig+0x282>
        pclk = (uint32_t) LSE_VALUE;
 800c3e8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c3ec:	4b76      	ldr	r3, [pc, #472]	@ (800c5c8 <UART_SetConfig+0x2d8>)
 800c3ee:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3f0:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c3f2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3f6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c3fa:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3fe:	4299      	cmp	r1, r3
 800c400:	d8b3      	bhi.n	800c36a <UART_SetConfig+0x7a>
 800c402:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800c406:	d8b0      	bhi.n	800c36a <UART_SetConfig+0x7a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c408:	2300      	movs	r3, #0
 800c40a:	4619      	mov	r1, r3
 800c40c:	f7f4 f974 	bl	80006f8 <__aeabi_uldivmod>
 800c410:	462a      	mov	r2, r5
 800c412:	0209      	lsls	r1, r1, #8
 800c414:	086b      	lsrs	r3, r5, #1
 800c416:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800c41a:	0200      	lsls	r0, r0, #8
 800c41c:	18c0      	adds	r0, r0, r3
 800c41e:	f04f 0300 	mov.w	r3, #0
 800c422:	f141 0100 	adc.w	r1, r1, #0
 800c426:	f7f4 f967 	bl	80006f8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c42a:	4b68      	ldr	r3, [pc, #416]	@ (800c5cc <UART_SetConfig+0x2dc>)
 800c42c:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c430:	429a      	cmp	r2, r3
 800c432:	d89a      	bhi.n	800c36a <UART_SetConfig+0x7a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c434:	6823      	ldr	r3, [r4, #0]
 800c436:	60d8      	str	r0, [r3, #12]
 800c438:	e003      	b.n	800c442 <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c43a:	f7fe ff9b 	bl	800b374 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800c43e:	2800      	cmp	r0, #0
 800c440:	d1d4      	bne.n	800c3ec <UART_SetConfig+0xfc>
          pclk = (uint32_t) HSI_VALUE;
 800c442:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 800c444:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800c448:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800c44a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800c44c:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 800c450:	b007      	add	sp, #28
 800c452:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c454:	4668      	mov	r0, sp
 800c456:	f7fe ff9f 	bl	800b398 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c45a:	9801      	ldr	r0, [sp, #4]
        break;
 800c45c:	e7ef      	b.n	800c43e <UART_SetConfig+0x14e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c45e:	a803      	add	r0, sp, #12
 800c460:	f7ff f844 	bl	800b4ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c464:	9804      	ldr	r0, [sp, #16]
        break;
 800c466:	e7ea      	b.n	800c43e <UART_SetConfig+0x14e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c468:	6813      	ldr	r3, [r2, #0]
 800c46a:	4859      	ldr	r0, [pc, #356]	@ (800c5d0 <UART_SetConfig+0x2e0>)
 800c46c:	f013 0f20 	tst.w	r3, #32
 800c470:	d0bc      	beq.n	800c3ec <UART_SetConfig+0xfc>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c472:	6813      	ldr	r3, [r2, #0]
 800c474:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c478:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c47a:	e7b7      	b.n	800c3ec <UART_SetConfig+0xfc>
        pclk = (uint32_t) CSI_VALUE;
 800c47c:	4855      	ldr	r0, [pc, #340]	@ (800c5d4 <UART_SetConfig+0x2e4>)
 800c47e:	e7b5      	b.n	800c3ec <UART_SetConfig+0xfc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c484:	d155      	bne.n	800c532 <UART_SetConfig+0x242>
 800c486:	2300      	movs	r3, #0
    switch (clocksource)
 800c488:	2b08      	cmp	r3, #8
 800c48a:	f63f af6e 	bhi.w	800c36a <UART_SetConfig+0x7a>
 800c48e:	a201      	add	r2, pc, #4	@ (adr r2, 800c494 <UART_SetConfig+0x1a4>)
 800c490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c494:	0800c4c1 	.word	0x0800c4c1
 800c498:	0800c4cd 	.word	0x0800c4cd
 800c49c:	0800c36b 	.word	0x0800c36b
 800c4a0:	0800c36b 	.word	0x0800c36b
 800c4a4:	0800c4d3 	.word	0x0800c4d3
 800c4a8:	0800c36b 	.word	0x0800c36b
 800c4ac:	0800c36b 	.word	0x0800c36b
 800c4b0:	0800c36b 	.word	0x0800c36b
 800c4b4:	0800c4dd 	.word	0x0800c4dd
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4b8:	2304      	movs	r3, #4
 800c4ba:	e7e5      	b.n	800c488 <UART_SetConfig+0x198>
 800c4bc:	2308      	movs	r3, #8
 800c4be:	e7e3      	b.n	800c488 <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4c0:	f7fe f914 	bl	800a6ec <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c4c4:	4603      	mov	r3, r0
    if (pclk != 0U)
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d0bb      	beq.n	800c442 <UART_SetConfig+0x152>
 800c4ca:	e014      	b.n	800c4f6 <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c4cc:	f7fe f920 	bl	800a710 <HAL_RCC_GetPCLK2Freq>
 800c4d0:	e7f8      	b.n	800c4c4 <UART_SetConfig+0x1d4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4d2:	4668      	mov	r0, sp
 800c4d4:	f7fe ff60 	bl	800b398 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c4d8:	9b01      	ldr	r3, [sp, #4]
        break;
 800c4da:	e7f4      	b.n	800c4c6 <UART_SetConfig+0x1d6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4dc:	a803      	add	r0, sp, #12
 800c4de:	f7ff f805 	bl	800b4ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c4e2:	9b04      	ldr	r3, [sp, #16]
        break;
 800c4e4:	e7ef      	b.n	800c4c6 <UART_SetConfig+0x1d6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4e6:	f013 0f20 	tst.w	r3, #32
 800c4ea:	4b39      	ldr	r3, [pc, #228]	@ (800c5d0 <UART_SetConfig+0x2e0>)
 800c4ec:	d003      	beq.n	800c4f6 <UART_SetConfig+0x206>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c4ee:	6812      	ldr	r2, [r2, #0]
 800c4f0:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800c4f4:	40d3      	lsrs	r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4f6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c4f8:	4a33      	ldr	r2, [pc, #204]	@ (800c5c8 <UART_SetConfig+0x2d8>)
 800c4fa:	6861      	ldr	r1, [r4, #4]
 800c4fc:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800c500:	fbb3 f3f2 	udiv	r3, r3, r2
 800c504:	084a      	lsrs	r2, r1, #1
 800c506:	eb02 0343 	add.w	r3, r2, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c50a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c50e:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c512:	f1a3 0110 	sub.w	r1, r3, #16
 800c516:	4291      	cmp	r1, r2
 800c518:	f63f af27 	bhi.w	800c36a <UART_SetConfig+0x7a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c51c:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c520:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800c524:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c526:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800c528:	4313      	orrs	r3, r2
 800c52a:	60cb      	str	r3, [r1, #12]
 800c52c:	e789      	b.n	800c442 <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 800c52e:	4b29      	ldr	r3, [pc, #164]	@ (800c5d4 <UART_SetConfig+0x2e4>)
 800c530:	e7e1      	b.n	800c4f6 <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c532:	f7fe f8db 	bl	800a6ec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c536:	2800      	cmp	r0, #0
 800c538:	d083      	beq.n	800c442 <UART_SetConfig+0x152>
 800c53a:	e01a      	b.n	800c572 <UART_SetConfig+0x282>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c53c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c540:	d0c4      	beq.n	800c4cc <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c542:	f7fe f8e5 	bl	800a710 <HAL_RCC_GetPCLK2Freq>
        break;
 800c546:	e7f6      	b.n	800c536 <UART_SetConfig+0x246>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c54c:	d0b4      	beq.n	800c4b8 <UART_SetConfig+0x1c8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c54e:	4668      	mov	r0, sp
 800c550:	f7fe ff22 	bl	800b398 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c554:	9801      	ldr	r0, [sp, #4]
        break;
 800c556:	e7ee      	b.n	800c536 <UART_SetConfig+0x246>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c55c:	4a12      	ldr	r2, [pc, #72]	@ (800c5a8 <UART_SetConfig+0x2b8>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c55e:	6813      	ldr	r3, [r2, #0]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c560:	d0c1      	beq.n	800c4e6 <UART_SetConfig+0x1f6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c562:	f013 0f20 	tst.w	r3, #32
 800c566:	481a      	ldr	r0, [pc, #104]	@ (800c5d0 <UART_SetConfig+0x2e0>)
 800c568:	d003      	beq.n	800c572 <UART_SetConfig+0x282>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c56a:	6813      	ldr	r3, [r2, #0]
 800c56c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c570:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c572:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c574:	4a14      	ldr	r2, [pc, #80]	@ (800c5c8 <UART_SetConfig+0x2d8>)
 800c576:	6863      	ldr	r3, [r4, #4]
 800c578:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800c57c:	fbb0 f0f2 	udiv	r0, r0, r2
 800c580:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c584:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c588:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800c58c:	f1a0 0210 	sub.w	r2, r0, #16
 800c590:	e74e      	b.n	800c430 <UART_SetConfig+0x140>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c596:	d0ca      	beq.n	800c52e <UART_SetConfig+0x23e>
        pclk = (uint32_t) CSI_VALUE;
 800c598:	480e      	ldr	r0, [pc, #56]	@ (800c5d4 <UART_SetConfig+0x2e4>)
 800c59a:	e7ea      	b.n	800c572 <UART_SetConfig+0x282>
 800c59c:	cfff69f3 	.word	0xcfff69f3
 800c5a0:	58000c00 	.word	0x58000c00
 800c5a4:	40011000 	.word	0x40011000
 800c5a8:	58024400 	.word	0x58024400
 800c5ac:	40004400 	.word	0x40004400
 800c5b0:	40004800 	.word	0x40004800
 800c5b4:	40004c00 	.word	0x40004c00
 800c5b8:	40005000 	.word	0x40005000
 800c5bc:	40011400 	.word	0x40011400
 800c5c0:	40007800 	.word	0x40007800
 800c5c4:	40007c00 	.word	0x40007c00
 800c5c8:	08027120 	.word	0x08027120
 800c5cc:	000ffcff 	.word	0x000ffcff
 800c5d0:	03d09000 	.word	0x03d09000
 800c5d4:	003d0900 	.word	0x003d0900
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c5dc:	f43f af6e 	beq.w	800c4bc <UART_SetConfig+0x1cc>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5e0:	a803      	add	r0, sp, #12
 800c5e2:	f7fe ff83 	bl	800b4ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5e6:	9804      	ldr	r0, [sp, #16]
        break;
 800c5e8:	e7a5      	b.n	800c536 <UART_SetConfig+0x246>
 800c5ea:	bf00      	nop

0800c5ec <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c5ec:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c5ee:	071a      	lsls	r2, r3, #28
{
 800c5f0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c5f2:	d506      	bpl.n	800c602 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c5f4:	6801      	ldr	r1, [r0, #0]
 800c5f6:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800c5f8:	684a      	ldr	r2, [r1, #4]
 800c5fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c5fe:	4322      	orrs	r2, r4
 800c600:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c602:	07dc      	lsls	r4, r3, #31
 800c604:	d506      	bpl.n	800c614 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c606:	6801      	ldr	r1, [r0, #0]
 800c608:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800c60a:	684a      	ldr	r2, [r1, #4]
 800c60c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800c610:	4322      	orrs	r2, r4
 800c612:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c614:	0799      	lsls	r1, r3, #30
 800c616:	d506      	bpl.n	800c626 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c618:	6801      	ldr	r1, [r0, #0]
 800c61a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800c61c:	684a      	ldr	r2, [r1, #4]
 800c61e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c622:	4322      	orrs	r2, r4
 800c624:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c626:	075a      	lsls	r2, r3, #29
 800c628:	d506      	bpl.n	800c638 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c62a:	6801      	ldr	r1, [r0, #0]
 800c62c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800c62e:	684a      	ldr	r2, [r1, #4]
 800c630:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c634:	4322      	orrs	r2, r4
 800c636:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c638:	06dc      	lsls	r4, r3, #27
 800c63a:	d506      	bpl.n	800c64a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c63c:	6801      	ldr	r1, [r0, #0]
 800c63e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800c640:	688a      	ldr	r2, [r1, #8]
 800c642:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c646:	4322      	orrs	r2, r4
 800c648:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c64a:	0699      	lsls	r1, r3, #26
 800c64c:	d506      	bpl.n	800c65c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c64e:	6801      	ldr	r1, [r0, #0]
 800c650:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800c652:	688a      	ldr	r2, [r1, #8]
 800c654:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c658:	4322      	orrs	r2, r4
 800c65a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c65c:	065a      	lsls	r2, r3, #25
 800c65e:	d510      	bpl.n	800c682 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c660:	6801      	ldr	r1, [r0, #0]
 800c662:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800c664:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c666:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c66a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800c66e:	ea42 0204 	orr.w	r2, r2, r4
 800c672:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c674:	d105      	bne.n	800c682 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c676:	684a      	ldr	r2, [r1, #4]
 800c678:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800c67a:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800c67e:	4322      	orrs	r2, r4
 800c680:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c682:	061b      	lsls	r3, r3, #24
 800c684:	d506      	bpl.n	800c694 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c686:	6802      	ldr	r2, [r0, #0]
 800c688:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800c68a:	6853      	ldr	r3, [r2, #4]
 800c68c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800c690:	430b      	orrs	r3, r1
 800c692:	6053      	str	r3, [r2, #4]
}
 800c694:	bd10      	pop	{r4, pc}

0800c696 <UART_WaitOnFlagUntilTimeout>:
{
 800c696:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c69a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c69e:	4604      	mov	r4, r0
 800c6a0:	460d      	mov	r5, r1
 800c6a2:	4617      	mov	r7, r2
 800c6a4:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6a6:	6822      	ldr	r2, [r4, #0]
 800c6a8:	69d3      	ldr	r3, [r2, #28]
 800c6aa:	ea35 0303 	bics.w	r3, r5, r3
 800c6ae:	bf0c      	ite	eq
 800c6b0:	2301      	moveq	r3, #1
 800c6b2:	2300      	movne	r3, #0
 800c6b4:	42bb      	cmp	r3, r7
 800c6b6:	d001      	beq.n	800c6bc <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	e022      	b.n	800c702 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800c6bc:	f1b9 3fff 	cmp.w	r9, #4294967295
 800c6c0:	d0f2      	beq.n	800c6a8 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6c2:	f7fa f81b 	bl	80066fc <HAL_GetTick>
 800c6c6:	eba0 0008 	sub.w	r0, r0, r8
 800c6ca:	4548      	cmp	r0, r9
 800c6cc:	d829      	bhi.n	800c722 <UART_WaitOnFlagUntilTimeout+0x8c>
 800c6ce:	f1b9 0f00 	cmp.w	r9, #0
 800c6d2:	d026      	beq.n	800c722 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c6d4:	6821      	ldr	r1, [r4, #0]
 800c6d6:	680b      	ldr	r3, [r1, #0]
 800c6d8:	075a      	lsls	r2, r3, #29
 800c6da:	d5e4      	bpl.n	800c6a6 <UART_WaitOnFlagUntilTimeout+0x10>
 800c6dc:	2d80      	cmp	r5, #128	@ 0x80
 800c6de:	d0e2      	beq.n	800c6a6 <UART_WaitOnFlagUntilTimeout+0x10>
 800c6e0:	2d40      	cmp	r5, #64	@ 0x40
 800c6e2:	d0e0      	beq.n	800c6a6 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c6e4:	69ce      	ldr	r6, [r1, #28]
 800c6e6:	f016 0608 	ands.w	r6, r6, #8
 800c6ea:	d00c      	beq.n	800c706 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6ec:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 800c6ee:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6f0:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 800c6f2:	f7ff f9b7 	bl	800ba64 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 800c6f6:	2300      	movs	r3, #0
          return HAL_ERROR;
 800c6f8:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c6fa:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800c6fe:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800c702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c706:	69cb      	ldr	r3, [r1, #28]
 800c708:	051b      	lsls	r3, r3, #20
 800c70a:	d5cc      	bpl.n	800c6a6 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c70c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 800c710:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c712:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 800c714:	f7ff f9a6 	bl	800ba64 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c718:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 800c71a:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c71e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 800c722:	2003      	movs	r0, #3
 800c724:	e7ed      	b.n	800c702 <UART_WaitOnFlagUntilTimeout+0x6c>

0800c726 <UART_CheckIdleState>:
{
 800c726:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c728:	2600      	movs	r6, #0
{
 800c72a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c72c:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800c730:	f7f9 ffe4 	bl	80066fc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c734:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c736:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	071a      	lsls	r2, r3, #28
 800c73c:	d51c      	bpl.n	800c778 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c73e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c742:	4632      	mov	r2, r6
 800c744:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c748:	9300      	str	r3, [sp, #0]
 800c74a:	4603      	mov	r3, r0
 800c74c:	4620      	mov	r0, r4
 800c74e:	f7ff ffa2 	bl	800c696 <UART_WaitOnFlagUntilTimeout>
 800c752:	b188      	cbz	r0, 800c778 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c754:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c756:	e852 3f00 	ldrex	r3, [r2]
 800c75a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75e:	e842 3100 	strex	r1, r3, [r2]
 800c762:	2900      	cmp	r1, #0
 800c764:	d1f6      	bne.n	800c754 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 800c766:	2320      	movs	r3, #32
 800c768:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800c76c:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800c76e:	2300      	movs	r3, #0
 800c770:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800c774:	b002      	add	sp, #8
 800c776:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c778:	6823      	ldr	r3, [r4, #0]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	075b      	lsls	r3, r3, #29
 800c77e:	d524      	bpl.n	800c7ca <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c780:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c784:	2200      	movs	r2, #0
 800c786:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c78a:	4620      	mov	r0, r4
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	462b      	mov	r3, r5
 800c790:	f7ff ff81 	bl	800c696 <UART_WaitOnFlagUntilTimeout>
 800c794:	b1c8      	cbz	r0, 800c7ca <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c796:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c798:	e852 3f00 	ldrex	r3, [r2]
 800c79c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800c7a4:	6822      	ldr	r2, [r4, #0]
 800c7a6:	2900      	cmp	r1, #0
 800c7a8:	d1f5      	bne.n	800c796 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7aa:	f102 0308 	add.w	r3, r2, #8
 800c7ae:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7b2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b6:	f102 0008 	add.w	r0, r2, #8
 800c7ba:	e840 3100 	strex	r1, r3, [r0]
 800c7be:	2900      	cmp	r1, #0
 800c7c0:	d1f3      	bne.n	800c7aa <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 800c7c2:	2320      	movs	r3, #32
 800c7c4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800c7c8:	e7d0      	b.n	800c76c <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 800c7ca:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7cc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800c7ce:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c7d2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7d6:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7d8:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 800c7da:	e7c8      	b.n	800c76e <UART_CheckIdleState+0x48>

0800c7dc <HAL_UART_Init>:
{
 800c7dc:	b510      	push	{r4, lr}
  if (huart == NULL)
 800c7de:	4604      	mov	r4, r0
 800c7e0:	b350      	cbz	r0, 800c838 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800c7e2:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800c7e6:	b91b      	cbnz	r3, 800c7f0 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800c7e8:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800c7ec:	f7f4 ffe0 	bl	80017b0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800c7f0:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800c7f2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c7f4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800c7f8:	6813      	ldr	r3, [r2, #0]
 800c7fa:	f023 0301 	bic.w	r3, r3, #1
 800c7fe:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c800:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c802:	b113      	cbz	r3, 800c80a <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 800c804:	4620      	mov	r0, r4
 800c806:	f7ff fef1 	bl	800c5ec <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c80a:	4620      	mov	r0, r4
 800c80c:	f7ff fd70 	bl	800c2f0 <UART_SetConfig>
 800c810:	2801      	cmp	r0, #1
 800c812:	d011      	beq.n	800c838 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c814:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800c816:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c818:	685a      	ldr	r2, [r3, #4]
 800c81a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c81e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c820:	689a      	ldr	r2, [r3, #8]
 800c822:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c826:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	f042 0201 	orr.w	r2, r2, #1
}
 800c82e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800c832:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800c834:	f7ff bf77 	b.w	800c726 <UART_CheckIdleState>
}
 800c838:	2001      	movs	r0, #1
 800c83a:	bd10      	pop	{r4, pc}

0800c83c <UART_Start_Receive_IT>:
{
 800c83c:	b530      	push	{r4, r5, lr}
  huart->pRxBuffPtr  = pData;
 800c83e:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxISR       = NULL;
 800c840:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 800c842:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 800c844:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  UART_MASK_COMPUTATION(huart);
 800c848:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
  huart->RxXferCount = Size;
 800c84c:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c850:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 800c852:	d131      	bne.n	800c8b8 <UART_Start_Receive_IT+0x7c>
 800c854:	6903      	ldr	r3, [r0, #16]
 800c856:	2b00      	cmp	r3, #0
 800c858:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800c85c:	bf18      	it	ne
 800c85e:	23ff      	movne	r3, #255	@ 0xff
 800c860:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c864:	2300      	movs	r3, #0
 800c866:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c86a:	2322      	movs	r3, #34	@ 0x22
 800c86c:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c870:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c872:	f101 0308 	add.w	r3, r1, #8
 800c876:	e853 3f00 	ldrex	r3, [r3]
 800c87a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c87e:	3108      	adds	r1, #8
 800c880:	e841 3400 	strex	r4, r3, [r1]
   return(result);
 800c884:	6803      	ldr	r3, [r0, #0]
 800c886:	2c00      	cmp	r4, #0
 800c888:	d1f2      	bne.n	800c870 <UART_Start_Receive_IT+0x34>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c88a:	6e45      	ldr	r5, [r0, #100]	@ 0x64
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c88c:	6884      	ldr	r4, [r0, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c88e:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c892:	6901      	ldr	r1, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c894:	d135      	bne.n	800c902 <UART_Start_Receive_IT+0xc6>
 800c896:	f8b0 5068 	ldrh.w	r5, [r0, #104]	@ 0x68
 800c89a:	4295      	cmp	r5, r2
 800c89c:	d831      	bhi.n	800c902 <UART_Start_Receive_IT+0xc6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c89e:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 800c8a2:	d129      	bne.n	800c8f8 <UART_Start_Receive_IT+0xbc>
 800c8a4:	b1c1      	cbz	r1, 800c8d8 <UART_Start_Receive_IT+0x9c>
 800c8a6:	4a26      	ldr	r2, [pc, #152]	@ (800c940 <UART_Start_Receive_IT+0x104>)
 800c8a8:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8aa:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8b2:	e843 2100 	strex	r1, r2, [r3]
   return(result);
 800c8b6:	e021      	b.n	800c8fc <UART_Start_Receive_IT+0xc0>
  UART_MASK_COMPUTATION(huart);
 800c8b8:	b929      	cbnz	r1, 800c8c6 <UART_Start_Receive_IT+0x8a>
 800c8ba:	6903      	ldr	r3, [r0, #16]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	bf0c      	ite	eq
 800c8c0:	23ff      	moveq	r3, #255	@ 0xff
 800c8c2:	237f      	movne	r3, #127	@ 0x7f
 800c8c4:	e7cc      	b.n	800c860 <UART_Start_Receive_IT+0x24>
 800c8c6:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800c8ca:	d1c9      	bne.n	800c860 <UART_Start_Receive_IT+0x24>
 800c8cc:	6903      	ldr	r3, [r0, #16]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	bf0c      	ite	eq
 800c8d2:	237f      	moveq	r3, #127	@ 0x7f
 800c8d4:	233f      	movne	r3, #63	@ 0x3f
 800c8d6:	e7c3      	b.n	800c860 <UART_Start_Receive_IT+0x24>
 800c8d8:	4a1a      	ldr	r2, [pc, #104]	@ (800c944 <UART_Start_Receive_IT+0x108>)
 800c8da:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8dc:	f103 0208 	add.w	r2, r3, #8
 800c8e0:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c8e4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e8:	f103 0008 	add.w	r0, r3, #8
 800c8ec:	e840 2100 	strex	r1, r2, [r0]
 800c8f0:	2900      	cmp	r1, #0
 800c8f2:	d1f3      	bne.n	800c8dc <UART_Start_Receive_IT+0xa0>
}
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	bd30      	pop	{r4, r5, pc}
 800c8f8:	4a11      	ldr	r2, [pc, #68]	@ (800c940 <UART_Start_Receive_IT+0x104>)
 800c8fa:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c8fc:	2900      	cmp	r1, #0
 800c8fe:	d1d4      	bne.n	800c8aa <UART_Start_Receive_IT+0x6e>
 800c900:	e7ec      	b.n	800c8dc <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c902:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 800c906:	d116      	bne.n	800c936 <UART_Start_Receive_IT+0xfa>
 800c908:	b151      	cbz	r1, 800c920 <UART_Start_Receive_IT+0xe4>
 800c90a:	4a0f      	ldr	r2, [pc, #60]	@ (800c948 <UART_Start_Receive_IT+0x10c>)
 800c90c:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c912:	f442 7290 	orr.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c916:	e843 2100 	strex	r1, r2, [r3]
 800c91a:	2900      	cmp	r1, #0
 800c91c:	d1f7      	bne.n	800c90e <UART_Start_Receive_IT+0xd2>
 800c91e:	e7e9      	b.n	800c8f4 <UART_Start_Receive_IT+0xb8>
 800c920:	4a0a      	ldr	r2, [pc, #40]	@ (800c94c <UART_Start_Receive_IT+0x110>)
 800c922:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c924:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c928:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c92c:	e843 2100 	strex	r1, r2, [r3]
 800c930:	2900      	cmp	r1, #0
 800c932:	d1f7      	bne.n	800c924 <UART_Start_Receive_IT+0xe8>
 800c934:	e7de      	b.n	800c8f4 <UART_Start_Receive_IT+0xb8>
 800c936:	4a04      	ldr	r2, [pc, #16]	@ (800c948 <UART_Start_Receive_IT+0x10c>)
 800c938:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c93a:	2900      	cmp	r1, #0
 800c93c:	d0f2      	beq.n	800c924 <UART_Start_Receive_IT+0xe8>
 800c93e:	e7e6      	b.n	800c90e <UART_Start_Receive_IT+0xd2>
 800c940:	0800bfb9 	.word	0x0800bfb9
 800c944:	0800c159 	.word	0x0800c159
 800c948:	0800be29 	.word	0x0800be29
 800c94c:	0800bef5 	.word	0x0800bef5

0800c950 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c950:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 800c952:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c954:	b92b      	cbnz	r3, 800c962 <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 800c956:	2301      	movs	r3, #1
 800c958:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c95c:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c960:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c962:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c964:	4d09      	ldr	r5, [pc, #36]	@ (800c98c <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c966:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c968:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800c96a:	4c09      	ldr	r4, [pc, #36]	@ (800c990 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c96c:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c970:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c972:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800c974:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c976:	011b      	lsls	r3, r3, #4
 800c978:	fbb3 f3f1 	udiv	r3, r3, r1
 800c97c:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c980:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 800c982:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c984:	011b      	lsls	r3, r3, #4
 800c986:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800c98a:	e7e7      	b.n	800c95c <UARTEx_SetNbDataToProcess+0xc>
 800c98c:	08027140 	.word	0x08027140
 800c990:	08027138 	.word	0x08027138

0800c994 <HAL_UARTEx_WakeupCallback>:
}
 800c994:	4770      	bx	lr

0800c996 <HAL_UARTEx_RxFifoFullCallback>:
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 800c996:	4770      	bx	lr

0800c998 <HAL_UARTEx_TxFifoEmptyCallback>:
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 800c998:	4770      	bx	lr

0800c99a <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800c99a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	d014      	beq.n	800c9cc <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9a2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c9a4:	2324      	movs	r3, #36	@ 0x24
 800c9a6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9aa:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800c9ac:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c9ae:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800c9b2:	f023 0301 	bic.w	r3, r3, #1
 800c9b6:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9bc:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c9be:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800c9c0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800c9c4:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c9cc:	2002      	movs	r0, #2
}
 800c9ce:	4770      	bx	lr

0800c9d0 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800c9d0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800c9d2:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 800c9d6:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d017      	beq.n	800ca0c <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9dc:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c9de:	2324      	movs	r3, #36	@ 0x24
 800c9e0:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9e4:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800c9e6:	682b      	ldr	r3, [r5, #0]
 800c9e8:	f023 0301 	bic.w	r3, r3, #1
 800c9ec:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c9ee:	68ab      	ldr	r3, [r5, #8]
 800c9f0:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800c9f4:	4319      	orrs	r1, r3
 800c9f6:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c9f8:	f7ff ffaa 	bl	800c950 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800c9fc:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9fe:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ca00:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800ca04:	2000      	movs	r0, #0
 800ca06:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800ca0a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800ca0c:	2002      	movs	r0, #2
 800ca0e:	e7fc      	b.n	800ca0a <HAL_UARTEx_SetTxFifoThreshold+0x3a>

0800ca10 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800ca10:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800ca12:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 800ca16:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d017      	beq.n	800ca4c <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca1c:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ca1e:	2324      	movs	r3, #36	@ 0x24
 800ca20:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca24:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800ca26:	682b      	ldr	r3, [r5, #0]
 800ca28:	f023 0301 	bic.w	r3, r3, #1
 800ca2c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ca2e:	68ab      	ldr	r3, [r5, #8]
 800ca30:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800ca34:	4319      	orrs	r1, r3
 800ca36:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800ca38:	f7ff ff8a 	bl	800c950 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800ca3c:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca3e:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ca40:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800ca44:	2000      	movs	r0, #0
 800ca46:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800ca4a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800ca4c:	2002      	movs	r0, #2
 800ca4e:	e7fc      	b.n	800ca4a <HAL_UARTEx_SetRxFifoThreshold+0x3a>

0800ca50 <HAL_UARTEx_ReceiveToIdle_IT>:
{
 800ca50:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca52:	f8d0 608c 	ldr.w	r6, [r0, #140]	@ 0x8c
{
 800ca56:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca58:	2e20      	cmp	r6, #32
 800ca5a:	d11a      	bne.n	800ca92 <HAL_UARTEx_ReceiveToIdle_IT+0x42>
    if ((pData == NULL) || (Size == 0U))
 800ca5c:	b909      	cbnz	r1, 800ca62 <HAL_UARTEx_ReceiveToIdle_IT+0x12>
      return HAL_ERROR;
 800ca5e:	2001      	movs	r0, #1
}
 800ca60:	bd70      	pop	{r4, r5, r6, pc}
    if ((pData == NULL) || (Size == 0U))
 800ca62:	2a00      	cmp	r2, #0
 800ca64:	d0fb      	beq.n	800ca5e <HAL_UARTEx_ReceiveToIdle_IT+0xe>
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ca66:	2301      	movs	r3, #1
 800ca68:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	6703      	str	r3, [r0, #112]	@ 0x70
    (void)UART_Start_Receive_IT(huart, pData, Size);
 800ca6e:	f7ff fee5 	bl	800c83c <UART_Start_Receive_IT>
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca72:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d1f2      	bne.n	800ca5e <HAL_UARTEx_ReceiveToIdle_IT+0xe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca78:	2210      	movs	r2, #16
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	621a      	str	r2, [r3, #32]
 800ca7e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca80:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca84:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca88:	e842 3000 	strex	r0, r3, [r2]
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d1f7      	bne.n	800ca80 <HAL_UARTEx_ReceiveToIdle_IT+0x30>
 800ca90:	e7e6      	b.n	800ca60 <HAL_UARTEx_ReceiveToIdle_IT+0x10>
    return HAL_BUSY;
 800ca92:	2002      	movs	r0, #2
 800ca94:	e7e4      	b.n	800ca60 <HAL_UARTEx_ReceiveToIdle_IT+0x10>

0800ca96 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800ca96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ca9a:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800ca9e:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800caa2:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800caa6:	ea43 0308 	orr.w	r3, r3, r8
 800caaa:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800caae:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cab2:	6809      	ldr	r1, [r1, #0]
 800cab4:	b981      	cbnz	r1, 800cad8 <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cab6:	ea43 030e 	orr.w	r3, r3, lr
 800caba:	6801      	ldr	r1, [r0, #0]
 800cabc:	4313      	orrs	r3, r2
 800cabe:	f36f 010e 	bfc	r1, #0, #15
 800cac2:	ea43 030c 	orr.w	r3, r3, ip
 800cac6:	433b      	orrs	r3, r7
 800cac8:	4333      	orrs	r3, r6
 800caca:	432b      	orrs	r3, r5
 800cacc:	4323      	orrs	r3, r4
 800cace:	430b      	orrs	r3, r1
 800cad0:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800cad2:	2000      	movs	r0, #0
 800cad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cad8:	6801      	ldr	r1, [r0, #0]
 800cada:	ea43 030e 	orr.w	r3, r3, lr
 800cade:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800cae2:	430b      	orrs	r3, r1
 800cae4:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cae6:	ea42 030c 	orr.w	r3, r2, ip
 800caea:	6841      	ldr	r1, [r0, #4]
 800caec:	433b      	orrs	r3, r7
 800caee:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800caf2:	4333      	orrs	r3, r6
 800caf4:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800caf8:	432b      	orrs	r3, r5
 800cafa:	4323      	orrs	r3, r4
 800cafc:	4313      	orrs	r3, r2
 800cafe:	6043      	str	r3, [r0, #4]
 800cb00:	e7e7      	b.n	800cad2 <FMC_SDRAM_Init+0x3c>

0800cb02 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cb02:	68cb      	ldr	r3, [r1, #12]
 800cb04:	f103 3cff 	add.w	ip, r3, #4294967295
 800cb08:	694b      	ldr	r3, [r1, #20]
{
 800cb0a:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cb0c:	3b01      	subs	r3, #1
 800cb0e:	684c      	ldr	r4, [r1, #4]
 800cb10:	688f      	ldr	r7, [r1, #8]
 800cb12:	690e      	ldr	r6, [r1, #16]
 800cb14:	051b      	lsls	r3, r3, #20
 800cb16:	698d      	ldr	r5, [r1, #24]
 800cb18:	3c01      	subs	r4, #1
 800cb1a:	3f01      	subs	r7, #1
 800cb1c:	3e01      	subs	r6, #1
 800cb1e:	3d01      	subs	r5, #1
 800cb20:	6809      	ldr	r1, [r1, #0]
 800cb22:	0124      	lsls	r4, r4, #4
 800cb24:	023f      	lsls	r7, r7, #8
 800cb26:	3901      	subs	r1, #1
 800cb28:	0436      	lsls	r6, r6, #16
 800cb2a:	062d      	lsls	r5, r5, #24
 800cb2c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800cb30:	b95a      	cbnz	r2, 800cb4a <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cb32:	430b      	orrs	r3, r1
 800cb34:	6882      	ldr	r2, [r0, #8]
 800cb36:	4323      	orrs	r3, r4
 800cb38:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800cb3c:	433b      	orrs	r3, r7
 800cb3e:	4333      	orrs	r3, r6
 800cb40:	432b      	orrs	r3, r5
 800cb42:	4313      	orrs	r3, r2
 800cb44:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800cb46:	2000      	movs	r0, #0
 800cb48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cb4a:	6882      	ldr	r2, [r0, #8]
 800cb4c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800cb50:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800cb54:	4313      	orrs	r3, r2
 800cb56:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cb58:	ea44 0307 	orr.w	r3, r4, r7
 800cb5c:	68c2      	ldr	r2, [r0, #12]
 800cb5e:	430b      	orrs	r3, r1
 800cb60:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800cb64:	4333      	orrs	r3, r6
 800cb66:	432b      	orrs	r3, r5
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	60c3      	str	r3, [r0, #12]
 800cb6c:	e7eb      	b.n	800cb46 <FMC_SDRAM_Timing_Init+0x44>

0800cb6e <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800cb6e:	4603      	mov	r3, r0
 800cb70:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800cb74:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800cb78:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800cb7c:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800cb7e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800cb82:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800cb84:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800cb86:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800cb88:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800cb8a:	4770      	bx	lr

0800cb8c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800cb8c:	b510      	push	{r4, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800cb8e:	e9d1 3400 	ldrd	r3, r4, [r1]
 800cb92:	6902      	ldr	r2, [r0, #16]
 800cb94:	4323      	orrs	r3, r4
 800cb96:	68cc      	ldr	r4, [r1, #12]
 800cb98:	f36f 0215 	bfc	r2, #0, #22
 800cb9c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800cba0:	4313      	orrs	r3, r2
 800cba2:	688a      	ldr	r2, [r1, #8]
 800cba4:	3a01      	subs	r2, #1
 800cba6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800cbaa:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800cbac:	2000      	movs	r0, #0
 800cbae:	bd10      	pop	{r4, pc}

0800cbb0 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800cbb0:	6943      	ldr	r3, [r0, #20]
 800cbb2:	f36f 034d 	bfc	r3, #1, #13
 800cbb6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800cbba:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800cbbc:	2000      	movs	r0, #0
 800cbbe:	4770      	bx	lr

0800cbc0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cbc0:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800cbc2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cbc6:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cbc8:	f001 ff38 	bl	800ea3c <xTaskGetSchedulerState>
 800cbcc:	2801      	cmp	r0, #1
 800cbce:	d003      	beq.n	800cbd8 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800cbd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800cbd4:	f000 bc6e 	b.w	800d4b4 <xPortSysTickHandler>
}
 800cbd8:	bd08      	pop	{r3, pc}
	...

0800cbdc <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbdc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800cbe0:	b92b      	cbnz	r3, 800cbee <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800cbe2:	4b06      	ldr	r3, [pc, #24]	@ (800cbfc <osKernelInitialize+0x20>)
 800cbe4:	6818      	ldr	r0, [r3, #0]
 800cbe6:	b928      	cbnz	r0, 800cbf4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cbe8:	2201      	movs	r2, #1
 800cbea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cbec:	4770      	bx	lr
    stat = osErrorISR;
 800cbee:	f06f 0005 	mvn.w	r0, #5
 800cbf2:	4770      	bx	lr
    } else {
      stat = osError;
 800cbf4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	2400c88c 	.word	0x2400c88c

0800cc00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cc00:	b510      	push	{r4, lr}
 800cc02:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc06:	b95c      	cbnz	r4, 800cc20 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800cc08:	4b08      	ldr	r3, [pc, #32]	@ (800cc2c <osKernelStart+0x2c>)
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	2a01      	cmp	r2, #1
 800cc0e:	d10a      	bne.n	800cc26 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc10:	4a07      	ldr	r2, [pc, #28]	@ (800cc30 <osKernelStart+0x30>)
 800cc12:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cc14:	2202      	movs	r2, #2
 800cc16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cc18:	f001 fdb0 	bl	800e77c <vTaskStartScheduler>
      stat = osOK;
 800cc1c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800cc1e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800cc20:	f06f 0005 	mvn.w	r0, #5
 800cc24:	e7fb      	b.n	800cc1e <osKernelStart+0x1e>
      stat = osError;
 800cc26:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800cc2a:	e7f8      	b.n	800cc1e <osKernelStart+0x1e>
 800cc2c:	2400c88c 	.word	0x2400c88c
 800cc30:	e000ed00 	.word	0xe000ed00

0800cc34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cc34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc36:	4614      	mov	r4, r2
 800cc38:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cc3a:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cc3c:	460b      	mov	r3, r1
  hTask = NULL;
 800cc3e:	9205      	str	r2, [sp, #20]
 800cc40:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800cc44:	b9fa      	cbnz	r2, 800cc86 <osThreadNew+0x52>
 800cc46:	b1f0      	cbz	r0, 800cc86 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800cc48:	b354      	cbz	r4, 800cca0 <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800cc4a:	69a5      	ldr	r5, [r4, #24]
 800cc4c:	b125      	cbz	r5, 800cc58 <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cc4e:	1e69      	subs	r1, r5, #1
 800cc50:	2937      	cmp	r1, #55	@ 0x37
 800cc52:	d902      	bls.n	800cc5a <osThreadNew+0x26>
        return (NULL);
 800cc54:	2000      	movs	r0, #0
 800cc56:	e017      	b.n	800cc88 <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 800cc58:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cc5a:	6862      	ldr	r2, [r4, #4]
 800cc5c:	07d2      	lsls	r2, r2, #31
 800cc5e:	d4f9      	bmi.n	800cc54 <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 800cc60:	6966      	ldr	r6, [r4, #20]
 800cc62:	b19e      	cbz	r6, 800cc8c <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cc64:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800cc66:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc68:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
 800cc6c:	b187      	cbz	r7, 800cc90 <osThreadNew+0x5c>
 800cc6e:	f1bc 0f5f 	cmp.w	ip, #95	@ 0x5f
 800cc72:	d908      	bls.n	800cc86 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc74:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc76:	b134      	cbz	r4, 800cc86 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc78:	b12e      	cbz	r6, 800cc86 <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc7a:	9500      	str	r5, [sp, #0]
 800cc7c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800cc80:	f001 fbe1 	bl	800e446 <xTaskCreateStatic>
 800cc84:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cc86:	9805      	ldr	r0, [sp, #20]
}
 800cc88:	b007      	add	sp, #28
 800cc8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800cc8c:	2280      	movs	r2, #128	@ 0x80
 800cc8e:	e7ea      	b.n	800cc66 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cc90:	f1bc 0f00 	cmp.w	ip, #0
 800cc94:	d1f7      	bne.n	800cc86 <osThreadNew+0x52>
 800cc96:	6924      	ldr	r4, [r4, #16]
 800cc98:	2c00      	cmp	r4, #0
 800cc9a:	d1f4      	bne.n	800cc86 <osThreadNew+0x52>
 800cc9c:	460c      	mov	r4, r1
 800cc9e:	e001      	b.n	800cca4 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 800cca0:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 800cca2:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cca4:	a905      	add	r1, sp, #20
 800cca6:	b292      	uxth	r2, r2
 800cca8:	e9cd 5100 	strd	r5, r1, [sp]
 800ccac:	4621      	mov	r1, r4
 800ccae:	f001 fc02 	bl	800e4b6 <xTaskCreate>
 800ccb2:	2801      	cmp	r0, #1
            hTask = NULL;
 800ccb4:	bf1c      	itt	ne
 800ccb6:	2300      	movne	r3, #0
 800ccb8:	9305      	strne	r3, [sp, #20]
 800ccba:	e7e4      	b.n	800cc86 <osThreadNew+0x52>

0800ccbc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ccbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccbe:	4605      	mov	r5, r0
 800ccc0:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800ccc4:	b117      	cbz	r7, 800cccc <osMutexNew+0x10>
  hMutex = NULL;
 800ccc6:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800ccc8:	4620      	mov	r0, r4
 800ccca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (attr != NULL) {
 800cccc:	b320      	cbz	r0, 800cd18 <osMutexNew+0x5c>
      type = attr->attr_bits;
 800ccce:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800ccd0:	0733      	lsls	r3, r6, #28
 800ccd2:	d4f8      	bmi.n	800ccc6 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ccd4:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ccd8:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 800ccdc:	b199      	cbz	r1, 800cd06 <osMutexNew+0x4a>
 800ccde:	2b4f      	cmp	r3, #79	@ 0x4f
 800cce0:	d9f1      	bls.n	800ccc6 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800cce2:	b1be      	cbz	r6, 800cd14 <osMutexNew+0x58>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cce4:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cce6:	f000 feec 	bl	800dac2 <xQueueCreateMutexStatic>
 800ccea:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800ccec:	2800      	cmp	r0, #0
 800ccee:	d0ea      	beq.n	800ccc6 <osMutexNew+0xa>
          name = attr->name;
 800ccf0:	682d      	ldr	r5, [r5, #0]
 800ccf2:	4637      	mov	r7, r6
        vQueueAddToRegistry (hMutex, name);
 800ccf4:	4629      	mov	r1, r5
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	f001 f9e0 	bl	800e0bc <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ccfc:	2f00      	cmp	r7, #0
 800ccfe:	d0e3      	beq.n	800ccc8 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cd00:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800cd04:	e7e0      	b.n	800ccc8 <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d1dd      	bne.n	800ccc6 <osMutexNew+0xa>
            if (rmtx != 0U) {
 800cd0a:	b12e      	cbz	r6, 800cd18 <osMutexNew+0x5c>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800cd0c:	2004      	movs	r0, #4
 800cd0e:	f000 ff0c 	bl	800db2a <xQueueCreateMutex>
 800cd12:	e7ea      	b.n	800ccea <osMutexNew+0x2e>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cd14:	2001      	movs	r0, #1
 800cd16:	e7e6      	b.n	800cce6 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
 800cd18:	2001      	movs	r0, #1
 800cd1a:	f000 ff06 	bl	800db2a <xQueueCreateMutex>
      if (hMutex != NULL) {
 800cd1e:	4604      	mov	r4, r0
 800cd20:	2800      	cmp	r0, #0
 800cd22:	d0d0      	beq.n	800ccc6 <osMutexNew+0xa>
        if (attr != NULL) {
 800cd24:	2d00      	cmp	r5, #0
 800cd26:	d0e5      	beq.n	800ccf4 <osMutexNew+0x38>
 800cd28:	2600      	movs	r6, #0
 800cd2a:	e7e1      	b.n	800ccf0 <osMutexNew+0x34>

0800cd2c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	4603      	mov	r3, r0
 800cd30:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cd32:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800cd36:	f003 0201 	and.w	r2, r3, #1
 800cd3a:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800cd3e:	b995      	cbnz	r5, 800cd66 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d913      	bls.n	800cd6c <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800cd44:	b162      	cbz	r2, 800cd60 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cd46:	f001 f916 	bl	800df76 <xQueueTakeMutexRecursive>
 800cd4a:	2801      	cmp	r0, #1
 800cd4c:	d101      	bne.n	800cd52 <osMutexAcquire+0x26>
  stat = osOK;
 800cd4e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800cd50:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800cd52:	2c00      	cmp	r4, #0
 800cd54:	bf14      	ite	ne
 800cd56:	f06f 0001 	mvnne.w	r0, #1
 800cd5a:	f06f 0002 	mvneq.w	r0, #2
 800cd5e:	e7f7      	b.n	800cd50 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cd60:	f001 f84c 	bl	800ddfc <xQueueSemaphoreTake>
 800cd64:	e7f1      	b.n	800cd4a <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800cd66:	f06f 0005 	mvn.w	r0, #5
 800cd6a:	e7f1      	b.n	800cd50 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800cd6c:	f06f 0003 	mvn.w	r0, #3
 800cd70:	e7ee      	b.n	800cd50 <osMutexAcquire+0x24>

0800cd72 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cd72:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cd74:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cd78:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800cd7a:	f002 0301 	and.w	r3, r2, #1
 800cd7e:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800cd82:	b979      	cbnz	r1, 800cda4 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800cd84:	2a01      	cmp	r2, #1
 800cd86:	d910      	bls.n	800cdaa <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800cd88:	b13b      	cbz	r3, 800cd9a <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cd8a:	f000 feaf 	bl	800daec <xQueueGiveMutexRecursive>
 800cd8e:	2801      	cmp	r0, #1
  stat = osOK;
 800cd90:	bf0c      	ite	eq
 800cd92:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800cd94:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800cd98:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	f000 fdde 	bl	800d95e <xQueueGenericSend>
 800cda2:	e7f4      	b.n	800cd8e <osMutexRelease+0x1c>
    stat = osErrorISR;
 800cda4:	f06f 0005 	mvn.w	r0, #5
 800cda8:	e7f6      	b.n	800cd98 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800cdaa:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cdae:	e7f3      	b.n	800cd98 <osMutexRelease+0x26>

0800cdb0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cdb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	460e      	mov	r6, r1
 800cdb6:	4615      	mov	r5, r2
 800cdb8:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cdbc:	b942      	cbnz	r2, 800cdd0 <osSemaphoreNew+0x20>
 800cdbe:	b138      	cbz	r0, 800cdd0 <osSemaphoreNew+0x20>
 800cdc0:	4288      	cmp	r0, r1
 800cdc2:	d305      	bcc.n	800cdd0 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800cdc4:	b155      	cbz	r5, 800cddc <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cdc6:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800cdca:	b12b      	cbz	r3, 800cdd8 <osSemaphoreNew+0x28>
 800cdcc:	2f4f      	cmp	r7, #79	@ 0x4f
 800cdce:	d822      	bhi.n	800ce16 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800cdd0:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	b003      	add	sp, #12
 800cdd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cdd8:	2f00      	cmp	r7, #0
 800cdda:	d1f9      	bne.n	800cdd0 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800cddc:	2c01      	cmp	r4, #1
 800cdde:	d00c      	beq.n	800cdfa <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cde0:	4620      	mov	r0, r4
 800cde2:	4631      	mov	r1, r6
 800cde4:	f000 fd9d 	bl	800d922 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800cde8:	4604      	mov	r4, r0
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d0f0      	beq.n	800cdd0 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800cdee:	b985      	cbnz	r5, 800ce12 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800cdf0:	4629      	mov	r1, r5
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f001 f962 	bl	800e0bc <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800cdf8:	e7eb      	b.n	800cdd2 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800cdfa:	2203      	movs	r2, #3
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	2001      	movs	r0, #1
 800ce00:	f000 fd46 	bl	800d890 <xQueueGenericCreate>
 800ce04:	e00e      	b.n	800ce24 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ce06:	461a      	mov	r2, r3
 800ce08:	f000 fd69 	bl	800d8de <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800ce0c:	4604      	mov	r4, r0
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	d0de      	beq.n	800cdd0 <osSemaphoreNew+0x20>
          name = attr->name;
 800ce12:	682d      	ldr	r5, [r5, #0]
 800ce14:	e7ec      	b.n	800cdf0 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800ce16:	2801      	cmp	r0, #1
 800ce18:	d1f5      	bne.n	800ce06 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ce1a:	2103      	movs	r1, #3
 800ce1c:	9100      	str	r1, [sp, #0]
 800ce1e:	4611      	mov	r1, r2
 800ce20:	f000 fce8 	bl	800d7f4 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800ce24:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d0d2      	beq.n	800cdd0 <osSemaphoreNew+0x20>
 800ce2a:	2e00      	cmp	r6, #0
 800ce2c:	d0df      	beq.n	800cdee <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ce2e:	2300      	movs	r3, #0
 800ce30:	461a      	mov	r2, r3
 800ce32:	4619      	mov	r1, r3
 800ce34:	f000 fd93 	bl	800d95e <xQueueGenericSend>
 800ce38:	2801      	cmp	r0, #1
 800ce3a:	d0d8      	beq.n	800cdee <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	f001 f967 	bl	800e110 <vQueueDelete>
      if (hSemaphore != NULL) {
 800ce42:	e7c5      	b.n	800cdd0 <osSemaphoreNew+0x20>

0800ce44 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ce44:	b513      	push	{r0, r1, r4, lr}
 800ce46:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ce48:	b328      	cbz	r0, 800ce96 <osSemaphoreAcquire+0x52>
 800ce4a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800ce4e:	b1cb      	cbz	r3, 800ce84 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800ce50:	bb09      	cbnz	r1, 800ce96 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ce52:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800ce54:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ce56:	f001 f8af 	bl	800dfb8 <xQueueReceiveFromISR>
 800ce5a:	2801      	cmp	r0, #1
 800ce5c:	d003      	beq.n	800ce66 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800ce5e:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800ce62:	b002      	add	sp, #8
 800ce64:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800ce66:	9b01      	ldr	r3, [sp, #4]
 800ce68:	b90b      	cbnz	r3, 800ce6e <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	e7f9      	b.n	800ce62 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800ce6e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ce72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce76:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	f3bf 8f6f 	isb	sy
 800ce82:	e7f2      	b.n	800ce6a <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ce84:	f000 ffba 	bl	800ddfc <xQueueSemaphoreTake>
 800ce88:	2801      	cmp	r0, #1
 800ce8a:	d0ee      	beq.n	800ce6a <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800ce8c:	2c00      	cmp	r4, #0
 800ce8e:	d0e6      	beq.n	800ce5e <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800ce90:	f06f 0001 	mvn.w	r0, #1
 800ce94:	e7e5      	b.n	800ce62 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800ce96:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800ce9a:	e7e2      	b.n	800ce62 <osSemaphoreAcquire+0x1e>

0800ce9c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ce9c:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ce9e:	b318      	cbz	r0, 800cee8 <osSemaphoreRelease+0x4c>
 800cea0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800cea4:	b1cb      	cbz	r3, 800ceda <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800cea6:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cea8:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800ceaa:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ceac:	f000 feb7 	bl	800dc1e <xQueueGiveFromISR>
 800ceb0:	2801      	cmp	r0, #1
 800ceb2:	d004      	beq.n	800cebe <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800ceb4:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800ceb8:	b003      	add	sp, #12
 800ceba:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800cebe:	9b01      	ldr	r3, [sp, #4]
 800cec0:	b14b      	cbz	r3, 800ced6 <osSemaphoreRelease+0x3a>
 800cec2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ceca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cece:	f3bf 8f4f 	dsb	sy
 800ced2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800ced6:	2000      	movs	r0, #0
 800ced8:	e7ee      	b.n	800ceb8 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ceda:	461a      	mov	r2, r3
 800cedc:	4619      	mov	r1, r3
 800cede:	f000 fd3e 	bl	800d95e <xQueueGenericSend>
 800cee2:	2801      	cmp	r0, #1
 800cee4:	d0f7      	beq.n	800ced6 <osSemaphoreRelease+0x3a>
 800cee6:	e7e5      	b.n	800ceb4 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800cee8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800ceec:	e7e4      	b.n	800ceb8 <osSemaphoreRelease+0x1c>

0800ceee <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 800ceee:	b130      	cbz	r0, 800cefe <osSemaphoreGetCount+0x10>
 800cef0:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 800cef4:	b10b      	cbz	r3, 800cefa <osSemaphoreGetCount+0xc>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800cef6:	f001 b8d4 	b.w	800e0a2 <uxQueueMessagesWaitingFromISR>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800cefa:	f001 b8aa 	b.w	800e052 <uxQueueMessagesWaiting>
  }

  return (count);
}
 800cefe:	4770      	bx	lr

0800cf00 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cf00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf02:	4605      	mov	r5, r0
 800cf04:	460e      	mov	r6, r1
 800cf06:	4614      	mov	r4, r2
 800cf08:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cf0c:	b11f      	cbz	r7, 800cf16 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800cf0e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800cf10:	4628      	mov	r0, r5
 800cf12:	b003      	add	sp, #12
 800cf14:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cf16:	2800      	cmp	r0, #0
 800cf18:	d0f9      	beq.n	800cf0e <osMessageQueueNew+0xe>
 800cf1a:	2900      	cmp	r1, #0
 800cf1c:	d0f7      	beq.n	800cf0e <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800cf1e:	b1da      	cbz	r2, 800cf58 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cf20:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800cf24:	b183      	cbz	r3, 800cf48 <osMessageQueueNew+0x48>
 800cf26:	2a4f      	cmp	r2, #79	@ 0x4f
 800cf28:	d9f1      	bls.n	800cf0e <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cf2a:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cf2c:	2a00      	cmp	r2, #0
 800cf2e:	d0ee      	beq.n	800cf0e <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cf30:	434d      	muls	r5, r1
 800cf32:	6966      	ldr	r6, [r4, #20]
 800cf34:	42ae      	cmp	r6, r5
 800cf36:	d3ea      	bcc.n	800cf0e <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cf38:	9700      	str	r7, [sp, #0]
 800cf3a:	f000 fc5b 	bl	800d7f4 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800cf3e:	4605      	mov	r5, r0
 800cf40:	2800      	cmp	r0, #0
 800cf42:	d0e4      	beq.n	800cf0e <osMessageQueueNew+0xe>
        name = attr->name;
 800cf44:	6824      	ldr	r4, [r4, #0]
 800cf46:	e011      	b.n	800cf6c <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cf48:	2a00      	cmp	r2, #0
 800cf4a:	d1e0      	bne.n	800cf0e <osMessageQueueNew+0xe>
 800cf4c:	6923      	ldr	r3, [r4, #16]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d1dd      	bne.n	800cf0e <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cf52:	6963      	ldr	r3, [r4, #20]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d1da      	bne.n	800cf0e <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800cf58:	4628      	mov	r0, r5
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	4631      	mov	r1, r6
 800cf5e:	f000 fc97 	bl	800d890 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800cf62:	4605      	mov	r5, r0
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d0d2      	beq.n	800cf0e <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800cf68:	2c00      	cmp	r4, #0
 800cf6a:	d1eb      	bne.n	800cf44 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800cf6c:	4621      	mov	r1, r4
 800cf6e:	4628      	mov	r0, r5
 800cf70:	f001 f8a4 	bl	800e0bc <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800cf74:	e7cc      	b.n	800cf10 <osMessageQueueNew+0x10>

0800cf76 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cf76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf78:	461c      	mov	r4, r3
 800cf7a:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800cf7e:	b1de      	cbz	r6, 800cfb8 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cf80:	b338      	cbz	r0, 800cfd2 <osMessageQueuePut+0x5c>
 800cf82:	b331      	cbz	r1, 800cfd2 <osMessageQueuePut+0x5c>
 800cf84:	bb2b      	cbnz	r3, 800cfd2 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cf86:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800cf88:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cf8a:	f000 fdeb 	bl	800db64 <xQueueGenericSendFromISR>
 800cf8e:	2801      	cmp	r0, #1
 800cf90:	d003      	beq.n	800cf9a <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800cf92:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800cf96:	b002      	add	sp, #8
 800cf98:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800cf9a:	9b01      	ldr	r3, [sp, #4]
 800cf9c:	b90b      	cbnz	r3, 800cfa2 <osMessageQueuePut+0x2c>
  stat = osOK;
 800cf9e:	2000      	movs	r0, #0
 800cfa0:	e7f9      	b.n	800cf96 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800cfa2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cfa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfaa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cfae:	f3bf 8f4f 	dsb	sy
 800cfb2:	f3bf 8f6f 	isb	sy
 800cfb6:	e7f2      	b.n	800cf9e <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cfb8:	b158      	cbz	r0, 800cfd2 <osMessageQueuePut+0x5c>
 800cfba:	b151      	cbz	r1, 800cfd2 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cfbc:	4633      	mov	r3, r6
 800cfbe:	4622      	mov	r2, r4
 800cfc0:	f000 fccd 	bl	800d95e <xQueueGenericSend>
 800cfc4:	2801      	cmp	r0, #1
 800cfc6:	d0ea      	beq.n	800cf9e <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800cfc8:	2c00      	cmp	r4, #0
 800cfca:	d0e2      	beq.n	800cf92 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800cfcc:	f06f 0001 	mvn.w	r0, #1
 800cfd0:	e7e1      	b.n	800cf96 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800cfd2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cfd6:	e7de      	b.n	800cf96 <osMessageQueuePut+0x20>

0800cfd8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cfd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfda:	461c      	mov	r4, r3
 800cfdc:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800cfe0:	b1db      	cbz	r3, 800d01a <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cfe2:	b330      	cbz	r0, 800d032 <osMessageQueueGet+0x5a>
 800cfe4:	b329      	cbz	r1, 800d032 <osMessageQueueGet+0x5a>
 800cfe6:	bb24      	cbnz	r4, 800d032 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cfe8:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800cfea:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cfec:	f000 ffe4 	bl	800dfb8 <xQueueReceiveFromISR>
 800cff0:	2801      	cmp	r0, #1
 800cff2:	d003      	beq.n	800cffc <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800cff4:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800cff8:	b003      	add	sp, #12
 800cffa:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800cffc:	9b01      	ldr	r3, [sp, #4]
 800cffe:	b90b      	cbnz	r3, 800d004 <osMessageQueueGet+0x2c>
  stat = osOK;
 800d000:	2000      	movs	r0, #0
 800d002:	e7f9      	b.n	800cff8 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800d004:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d00c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d010:	f3bf 8f4f 	dsb	sy
 800d014:	f3bf 8f6f 	isb	sy
 800d018:	e7f2      	b.n	800d000 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d01a:	b150      	cbz	r0, 800d032 <osMessageQueueGet+0x5a>
 800d01c:	b149      	cbz	r1, 800d032 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d01e:	4622      	mov	r2, r4
 800d020:	f000 fe4e 	bl	800dcc0 <xQueueReceive>
 800d024:	2801      	cmp	r0, #1
 800d026:	d0eb      	beq.n	800d000 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800d028:	2c00      	cmp	r4, #0
 800d02a:	d0e3      	beq.n	800cff4 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800d02c:	f06f 0001 	mvn.w	r0, #1
 800d030:	e7e2      	b.n	800cff8 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800d032:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800d036:	e7df      	b.n	800cff8 <osMessageQueueGet+0x20>

0800d038 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800d038:	f7ff bf59 	b.w	800ceee <osSemaphoreGetCount>

0800d03c <osMessageQueueGetSpace>:
uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800d03c:	b1a0      	cbz	r0, 800d068 <osMessageQueueGetSpace+0x2c>
 800d03e:	f3ef 8205 	mrs	r2, IPSR
    space = 0U;
  }
  else if (IS_IRQ()) {
 800d042:	b17a      	cbz	r2, 800d064 <osMessageQueueGetSpace+0x28>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d044:	f3ef 8211 	mrs	r2, BASEPRI
 800d048:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800d04c:	f381 8811 	msr	BASEPRI, r1
 800d050:	f3bf 8f6f 	isb	sy
 800d054:	f3bf 8f4f 	dsb	sy
    isrm = taskENTER_CRITICAL_FROM_ISR();

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800d058:	e9d0 010e 	ldrd	r0, r1, [r0, #56]	@ 0x38
 800d05c:	1a08      	subs	r0, r1, r0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d05e:	f382 8811 	msr	BASEPRI, r2
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d062:	4770      	bx	lr

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800d064:	f001 b808 	b.w	800e078 <uxQueueSpacesAvailable>
  }

  return (space);
}
 800d068:	4770      	bx	lr
	...

0800d06c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d06c:	4b03      	ldr	r3, [pc, #12]	@ (800d07c <vApplicationGetIdleTaskMemory+0x10>)
 800d06e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d070:	4b03      	ldr	r3, [pc, #12]	@ (800d080 <vApplicationGetIdleTaskMemory+0x14>)
 800d072:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d074:	2380      	movs	r3, #128	@ 0x80
 800d076:	6013      	str	r3, [r2, #0]
}
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	2400c82c 	.word	0x2400c82c
 800d080:	2400c62c 	.word	0x2400c62c

0800d084 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d084:	4b03      	ldr	r3, [pc, #12]	@ (800d094 <vApplicationGetTimerTaskMemory+0x10>)
 800d086:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d088:	4b03      	ldr	r3, [pc, #12]	@ (800d098 <vApplicationGetTimerTaskMemory+0x14>)
 800d08a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d08c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d090:	6013      	str	r3, [r2, #0]
}
 800d092:	4770      	bx	lr
 800d094:	2400c5cc 	.word	0x2400c5cc
 800d098:	2400c1cc 	.word	0x2400c1cc

0800d09c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d09c:	4b10      	ldr	r3, [pc, #64]	@ (800d0e0 <prvInsertBlockIntoFreeList+0x44>)
{
 800d09e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4283      	cmp	r3, r0
 800d0a6:	d3fb      	bcc.n	800d0a0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d0a8:	6854      	ldr	r4, [r2, #4]
 800d0aa:	1911      	adds	r1, r2, r4
 800d0ac:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d0ae:	bf01      	itttt	eq
 800d0b0:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 800d0b2:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d0b4:	1909      	addeq	r1, r1, r4
 800d0b6:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d0b8:	6844      	ldr	r4, [r0, #4]
 800d0ba:	1901      	adds	r1, r0, r4
 800d0bc:	428b      	cmp	r3, r1
 800d0be:	d10c      	bne.n	800d0da <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d0c0:	4908      	ldr	r1, [pc, #32]	@ (800d0e4 <prvInsertBlockIntoFreeList+0x48>)
 800d0c2:	6809      	ldr	r1, [r1, #0]
 800d0c4:	428b      	cmp	r3, r1
 800d0c6:	d003      	beq.n	800d0d0 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d0c8:	6859      	ldr	r1, [r3, #4]
 800d0ca:	4421      	add	r1, r4
 800d0cc:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d0ce:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d0d0:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d0d2:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d0d4:	bf18      	it	ne
 800d0d6:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0d8:	bd10      	pop	{r4, pc}
 800d0da:	4619      	mov	r1, r3
 800d0dc:	e7f8      	b.n	800d0d0 <prvInsertBlockIntoFreeList+0x34>
 800d0de:	bf00      	nop
 800d0e0:	2400c8a8 	.word	0x2400c8a8
 800d0e4:	2400c8a4 	.word	0x2400c8a4

0800d0e8 <pvPortMalloc>:
{
 800d0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ec:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800d0ee:	f001 fa11 	bl	800e514 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800d0f2:	4940      	ldr	r1, [pc, #256]	@ (800d1f4 <pvPortMalloc+0x10c>)
 800d0f4:	4d40      	ldr	r5, [pc, #256]	@ (800d1f8 <pvPortMalloc+0x110>)
 800d0f6:	680b      	ldr	r3, [r1, #0]
 800d0f8:	b9f3      	cbnz	r3, 800d138 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800d0fa:	4a40      	ldr	r2, [pc, #256]	@ (800d1fc <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800d0fc:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d0fe:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d100:	4e3f      	ldr	r6, [pc, #252]	@ (800d200 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d102:	bf1b      	ittet	ne
 800d104:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d106:	4b3f      	ldrne	r3, [pc, #252]	@ (800d204 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d108:	4b3f      	ldreq	r3, [pc, #252]	@ (800d208 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d10a:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800d10e:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d110:	bf18      	it	ne
 800d112:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d114:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d116:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800d118:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d11a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800d11e:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d122:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800d124:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d126:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d12a:	4b38      	ldr	r3, [pc, #224]	@ (800d20c <pvPortMalloc+0x124>)
 800d12c:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d12e:	4b38      	ldr	r3, [pc, #224]	@ (800d210 <pvPortMalloc+0x128>)
 800d130:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d132:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d136:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d138:	682e      	ldr	r6, [r5, #0]
 800d13a:	4226      	tst	r6, r4
 800d13c:	d155      	bne.n	800d1ea <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800d13e:	2c00      	cmp	r4, #0
 800d140:	d046      	beq.n	800d1d0 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800d142:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d146:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d148:	bf1c      	itt	ne
 800d14a:	f023 0307 	bicne.w	r3, r3, #7
 800d14e:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d150:	2b00      	cmp	r3, #0
 800d152:	d04a      	beq.n	800d1ea <pvPortMalloc+0x102>
 800d154:	4f2e      	ldr	r7, [pc, #184]	@ (800d210 <pvPortMalloc+0x128>)
 800d156:	683c      	ldr	r4, [r7, #0]
 800d158:	429c      	cmp	r4, r3
 800d15a:	d346      	bcc.n	800d1ea <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800d15c:	4a28      	ldr	r2, [pc, #160]	@ (800d200 <pvPortMalloc+0x118>)
 800d15e:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d160:	6868      	ldr	r0, [r5, #4]
 800d162:	4298      	cmp	r0, r3
 800d164:	d204      	bcs.n	800d170 <pvPortMalloc+0x88>
 800d166:	f8d5 c000 	ldr.w	ip, [r5]
 800d16a:	f1bc 0f00 	cmp.w	ip, #0
 800d16e:	d115      	bne.n	800d19c <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800d170:	6809      	ldr	r1, [r1, #0]
 800d172:	42a9      	cmp	r1, r5
 800d174:	d039      	beq.n	800d1ea <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d176:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d178:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d17c:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d17e:	1ac2      	subs	r2, r0, r3
 800d180:	2a10      	cmp	r2, #16
 800d182:	d912      	bls.n	800d1aa <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d184:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d186:	0741      	lsls	r1, r0, #29
 800d188:	d00b      	beq.n	800d1a2 <pvPortMalloc+0xba>
	__asm volatile
 800d18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d18e:	f383 8811 	msr	BASEPRI, r3
 800d192:	f3bf 8f6f 	isb	sy
 800d196:	f3bf 8f4f 	dsb	sy
 800d19a:	e7fe      	b.n	800d19a <pvPortMalloc+0xb2>
					pxPreviousBlock = pxBlock;
 800d19c:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800d19e:	4665      	mov	r5, ip
 800d1a0:	e7de      	b.n	800d160 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d1a2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d1a4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d1a6:	f7ff ff79 	bl	800d09c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d1aa:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d1ac:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d1ae:	4917      	ldr	r1, [pc, #92]	@ (800d20c <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d1b0:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d1b2:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d1b4:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800d1b6:	4a17      	ldr	r2, [pc, #92]	@ (800d214 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d1b8:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800d1ba:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800d1bc:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d1be:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800d1c0:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d1c4:	bf38      	it	cc
 800d1c6:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d1c8:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d1cc:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800d1ce:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800d1d0:	f001 fa44 	bl	800e65c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1d4:	0763      	lsls	r3, r4, #29
 800d1d6:	d00a      	beq.n	800d1ee <pvPortMalloc+0x106>
 800d1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1dc:	f383 8811 	msr	BASEPRI, r3
 800d1e0:	f3bf 8f6f 	isb	sy
 800d1e4:	f3bf 8f4f 	dsb	sy
 800d1e8:	e7fe      	b.n	800d1e8 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800d1ea:	2400      	movs	r4, #0
 800d1ec:	e7f0      	b.n	800d1d0 <pvPortMalloc+0xe8>
}
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1f4:	2400c8a4 	.word	0x2400c8a4
 800d1f8:	2400c890 	.word	0x2400c890
 800d1fc:	2400c8b0 	.word	0x2400c8b0
 800d200:	2400c8a8 	.word	0x2400c8a8
 800d204:	24024f50 	.word	0x24024f50
 800d208:	000186a0 	.word	0x000186a0
 800d20c:	2400c89c 	.word	0x2400c89c
 800d210:	2400c8a0 	.word	0x2400c8a0
 800d214:	2400c898 	.word	0x2400c898

0800d218 <vPortFree>:
{
 800d218:	b510      	push	{r4, lr}
	if( pv != NULL )
 800d21a:	4604      	mov	r4, r0
 800d21c:	b390      	cbz	r0, 800d284 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d21e:	4a1a      	ldr	r2, [pc, #104]	@ (800d288 <vPortFree+0x70>)
 800d220:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d224:	6812      	ldr	r2, [r2, #0]
 800d226:	4213      	tst	r3, r2
 800d228:	d108      	bne.n	800d23c <vPortFree+0x24>
 800d22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22e:	f383 8811 	msr	BASEPRI, r3
 800d232:	f3bf 8f6f 	isb	sy
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	e7fe      	b.n	800d23a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d23c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800d240:	b141      	cbz	r1, 800d254 <vPortFree+0x3c>
 800d242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d246:	f383 8811 	msr	BASEPRI, r3
 800d24a:	f3bf 8f6f 	isb	sy
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	e7fe      	b.n	800d252 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d254:	ea23 0302 	bic.w	r3, r3, r2
 800d258:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800d25c:	f001 f95a 	bl	800e514 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d260:	4a0a      	ldr	r2, [pc, #40]	@ (800d28c <vPortFree+0x74>)
 800d262:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d266:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d26a:	6811      	ldr	r1, [r2, #0]
 800d26c:	440b      	add	r3, r1
 800d26e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d270:	f7ff ff14 	bl	800d09c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d274:	4a06      	ldr	r2, [pc, #24]	@ (800d290 <vPortFree+0x78>)
 800d276:	6813      	ldr	r3, [r2, #0]
 800d278:	3301      	adds	r3, #1
}
 800d27a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800d27e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800d280:	f001 b9ec 	b.w	800e65c <xTaskResumeAll>
}
 800d284:	bd10      	pop	{r4, pc}
 800d286:	bf00      	nop
 800d288:	2400c890 	.word	0x2400c890
 800d28c:	2400c8a0 	.word	0x2400c8a0
 800d290:	2400c894 	.word	0x2400c894

0800d294 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d294:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d298:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d29c:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d29e:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2a0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d2a8:	4770      	bx	lr

0800d2aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d2ae:	4770      	bx	lr

0800d2b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d2b0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d2b2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d2b4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d2b6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d2b8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d2ba:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d2bc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d2be:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	6003      	str	r3, [r0, #0]
}
 800d2c4:	4770      	bx	lr

0800d2c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2c6:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d2c8:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d2ca:	1c63      	adds	r3, r4, #1
 800d2cc:	d10a      	bne.n	800d2e4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d2ce:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d2d0:	685a      	ldr	r2, [r3, #4]
 800d2d2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d2d4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d2d6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d2d8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d2da:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d2dc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d2de:	3301      	adds	r3, #1
 800d2e0:	6003      	str	r3, [r0, #0]
}
 800d2e2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d2e4:	f100 0208 	add.w	r2, r0, #8
 800d2e8:	4613      	mov	r3, r2
 800d2ea:	6852      	ldr	r2, [r2, #4]
 800d2ec:	6815      	ldr	r5, [r2, #0]
 800d2ee:	42a5      	cmp	r5, r4
 800d2f0:	d9fa      	bls.n	800d2e8 <vListInsert+0x22>
 800d2f2:	e7ed      	b.n	800d2d0 <vListInsert+0xa>

0800d2f4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d2f4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d2f6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800d2fa:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d2fc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d2fe:	6859      	ldr	r1, [r3, #4]
 800d300:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d302:	bf08      	it	eq
 800d304:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d306:	2200      	movs	r2, #0
 800d308:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	3a01      	subs	r2, #1
 800d30e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d310:	6818      	ldr	r0, [r3, #0]
}
 800d312:	4770      	bx	lr

0800d314 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d314:	4808      	ldr	r0, [pc, #32]	@ (800d338 <prvPortStartFirstTask+0x24>)
 800d316:	6800      	ldr	r0, [r0, #0]
 800d318:	6800      	ldr	r0, [r0, #0]
 800d31a:	f380 8808 	msr	MSP, r0
 800d31e:	f04f 0000 	mov.w	r0, #0
 800d322:	f380 8814 	msr	CONTROL, r0
 800d326:	b662      	cpsie	i
 800d328:	b661      	cpsie	f
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	f3bf 8f6f 	isb	sy
 800d332:	df00      	svc	0
 800d334:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d336:	0000      	.short	0x0000
 800d338:	e000ed08 	.word	0xe000ed08

0800d33c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d33c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d34c <vPortEnableVFP+0x10>
 800d340:	6801      	ldr	r1, [r0, #0]
 800d342:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d346:	6001      	str	r1, [r0, #0]
 800d348:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d34a:	0000      	.short	0x0000
 800d34c:	e000ed88 	.word	0xe000ed88

0800d350 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800d350:	2300      	movs	r3, #0
{
 800d352:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800d354:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800d356:	4b0d      	ldr	r3, [pc, #52]	@ (800d38c <prvTaskExitError+0x3c>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	3301      	adds	r3, #1
 800d35c:	d008      	beq.n	800d370 <prvTaskExitError+0x20>
 800d35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d362:	f383 8811 	msr	BASEPRI, r3
 800d366:	f3bf 8f6f 	isb	sy
 800d36a:	f3bf 8f4f 	dsb	sy
 800d36e:	e7fe      	b.n	800d36e <prvTaskExitError+0x1e>
 800d370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d374:	f383 8811 	msr	BASEPRI, r3
 800d378:	f3bf 8f6f 	isb	sy
 800d37c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800d380:	9b01      	ldr	r3, [sp, #4]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d0fc      	beq.n	800d380 <prvTaskExitError+0x30>
}
 800d386:	b002      	add	sp, #8
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop
 800d38c:	24000078 	.word	0x24000078

0800d390 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d390:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d394:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d398:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800d39c:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d39e:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d3a0:	4b03      	ldr	r3, [pc, #12]	@ (800d3b0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d3a2:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d3a4:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d3a6:	f06f 0302 	mvn.w	r3, #2
 800d3aa:	6203      	str	r3, [r0, #32]
}
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	0800d351 	.word	0x0800d351
	...

0800d3c0 <SVC_Handler>:
	__asm volatile (
 800d3c0:	4b07      	ldr	r3, [pc, #28]	@ (800d3e0 <pxCurrentTCBConst2>)
 800d3c2:	6819      	ldr	r1, [r3, #0]
 800d3c4:	6808      	ldr	r0, [r1, #0]
 800d3c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ca:	f380 8809 	msr	PSP, r0
 800d3ce:	f3bf 8f6f 	isb	sy
 800d3d2:	f04f 0000 	mov.w	r0, #0
 800d3d6:	f380 8811 	msr	BASEPRI, r0
 800d3da:	4770      	bx	lr
 800d3dc:	f3af 8000 	nop.w

0800d3e0 <pxCurrentTCBConst2>:
 800d3e0:	24025490 	.word	0x24025490

0800d3e4 <vPortEnterCritical>:
 800d3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e8:	f383 8811 	msr	BASEPRI, r3
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800d3f4:	4a0a      	ldr	r2, [pc, #40]	@ (800d420 <vPortEnterCritical+0x3c>)
 800d3f6:	6813      	ldr	r3, [r2, #0]
 800d3f8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800d3fa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800d3fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800d3fe:	d10e      	bne.n	800d41e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d400:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d404:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	b143      	cbz	r3, 800d41e <vPortEnterCritical+0x3a>
 800d40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d410:	f383 8811 	msr	BASEPRI, r3
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	f3bf 8f4f 	dsb	sy
 800d41c:	e7fe      	b.n	800d41c <vPortEnterCritical+0x38>
}
 800d41e:	4770      	bx	lr
 800d420:	24000078 	.word	0x24000078

0800d424 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800d424:	4a08      	ldr	r2, [pc, #32]	@ (800d448 <vPortExitCritical+0x24>)
 800d426:	6813      	ldr	r3, [r2, #0]
 800d428:	b943      	cbnz	r3, 800d43c <vPortExitCritical+0x18>
 800d42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d42e:	f383 8811 	msr	BASEPRI, r3
 800d432:	f3bf 8f6f 	isb	sy
 800d436:	f3bf 8f4f 	dsb	sy
 800d43a:	e7fe      	b.n	800d43a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800d43c:	3b01      	subs	r3, #1
 800d43e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d440:	b90b      	cbnz	r3, 800d446 <vPortExitCritical+0x22>
	__asm volatile
 800d442:	f383 8811 	msr	BASEPRI, r3
}
 800d446:	4770      	bx	lr
 800d448:	24000078 	.word	0x24000078
 800d44c:	00000000 	.word	0x00000000

0800d450 <PendSV_Handler>:
	__asm volatile
 800d450:	f3ef 8009 	mrs	r0, PSP
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	4b15      	ldr	r3, [pc, #84]	@ (800d4b0 <pxCurrentTCBConst>)
 800d45a:	681a      	ldr	r2, [r3, #0]
 800d45c:	f01e 0f10 	tst.w	lr, #16
 800d460:	bf08      	it	eq
 800d462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d46a:	6010      	str	r0, [r2, #0]
 800d46c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d470:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d474:	f380 8811 	msr	BASEPRI, r0
 800d478:	f3bf 8f4f 	dsb	sy
 800d47c:	f3bf 8f6f 	isb	sy
 800d480:	f001 f9ca 	bl	800e818 <vTaskSwitchContext>
 800d484:	f04f 0000 	mov.w	r0, #0
 800d488:	f380 8811 	msr	BASEPRI, r0
 800d48c:	bc09      	pop	{r0, r3}
 800d48e:	6819      	ldr	r1, [r3, #0]
 800d490:	6808      	ldr	r0, [r1, #0]
 800d492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d496:	f01e 0f10 	tst.w	lr, #16
 800d49a:	bf08      	it	eq
 800d49c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d4a0:	f380 8809 	msr	PSP, r0
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop
 800d4ac:	f3af 8000 	nop.w

0800d4b0 <pxCurrentTCBConst>:
 800d4b0:	24025490 	.word	0x24025490

0800d4b4 <xPortSysTickHandler>:
{
 800d4b4:	b508      	push	{r3, lr}
	__asm volatile
 800d4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ba:	f383 8811 	msr	BASEPRI, r3
 800d4be:	f3bf 8f6f 	isb	sy
 800d4c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800d4c6:	f001 f833 	bl	800e530 <xTaskIncrementTick>
 800d4ca:	b128      	cbz	r0, 800d4d8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d4cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d4d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800d4d8:	2300      	movs	r3, #0
 800d4da:	f383 8811 	msr	BASEPRI, r3
}
 800d4de:	bd08      	pop	{r3, pc}

0800d4e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d4e0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800d4e4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d4e6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d4ea:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d4ec:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d4ee:	4b04      	ldr	r3, [pc, #16]	@ (800d500 <vPortSetupTimerInterrupt+0x20>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d4f6:	3b01      	subs	r3, #1
 800d4f8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d4fa:	2307      	movs	r3, #7
 800d4fc:	6113      	str	r3, [r2, #16]
}
 800d4fe:	4770      	bx	lr
 800d500:	2400006c 	.word	0x2400006c

0800d504 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d504:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800d508:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d50a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800d50e:	4a38      	ldr	r2, [pc, #224]	@ (800d5f0 <xPortStartScheduler+0xec>)
 800d510:	4291      	cmp	r1, r2
 800d512:	d108      	bne.n	800d526 <xPortStartScheduler+0x22>
	__asm volatile
 800d514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	e7fe      	b.n	800d524 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d526:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800d52a:	4b32      	ldr	r3, [pc, #200]	@ (800d5f4 <xPortStartScheduler+0xf0>)
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d108      	bne.n	800d542 <xPortStartScheduler+0x3e>
 800d530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d534:	f383 8811 	msr	BASEPRI, r3
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	f3bf 8f4f 	dsb	sy
 800d540:	e7fe      	b.n	800d540 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d542:	4b2d      	ldr	r3, [pc, #180]	@ (800d5f8 <xPortStartScheduler+0xf4>)
 800d544:	781a      	ldrb	r2, [r3, #0]
 800d546:	b2d2      	uxtb	r2, r2
 800d548:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d54a:	22ff      	movs	r2, #255	@ 0xff
 800d54c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d54e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d550:	4a2a      	ldr	r2, [pc, #168]	@ (800d5fc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d552:	b2db      	uxtb	r3, r3
 800d554:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d558:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d55c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d560:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d562:	2307      	movs	r3, #7
 800d564:	4a26      	ldr	r2, [pc, #152]	@ (800d600 <xPortStartScheduler+0xfc>)
 800d566:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d568:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800d56c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d56e:	0609      	lsls	r1, r1, #24
 800d570:	d40a      	bmi.n	800d588 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d572:	2b03      	cmp	r3, #3
 800d574:	d011      	beq.n	800d59a <xPortStartScheduler+0x96>
 800d576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d57a:	f383 8811 	msr	BASEPRI, r3
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f3bf 8f4f 	dsb	sy
 800d586:	e7fe      	b.n	800d586 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800d588:	3b01      	subs	r3, #1
 800d58a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d58c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d590:	005b      	lsls	r3, r3, #1
 800d592:	b2db      	uxtb	r3, r3
 800d594:	f88d 3003 	strb.w	r3, [sp, #3]
 800d598:	e7e6      	b.n	800d568 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d59a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d59e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800d5a2:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d5a4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d5a6:	9b01      	ldr	r3, [sp, #4]
 800d5a8:	4a13      	ldr	r2, [pc, #76]	@ (800d5f8 <xPortStartScheduler+0xf4>)
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d5ae:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d5b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d5b6:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d5ba:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d5be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d5c2:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800d5c6:	f7ff ff8b 	bl	800d4e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800d5ca:	4b0e      	ldr	r3, [pc, #56]	@ (800d604 <xPortStartScheduler+0x100>)
 800d5cc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800d5ce:	f7ff feb5 	bl	800d33c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d5d2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800d5d6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d5da:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800d5de:	f7ff fe99 	bl	800d314 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800d5e2:	f001 f919 	bl	800e818 <vTaskSwitchContext>
}
 800d5e6:	4628      	mov	r0, r5
	prvTaskExitError();
 800d5e8:	f7ff feb2 	bl	800d350 <prvTaskExitError>
}
 800d5ec:	b003      	add	sp, #12
 800d5ee:	bd30      	pop	{r4, r5, pc}
 800d5f0:	410fc271 	.word	0x410fc271
 800d5f4:	410fc270 	.word	0x410fc270
 800d5f8:	e000e400 	.word	0xe000e400
 800d5fc:	24024f54 	.word	0x24024f54
 800d600:	24024f50 	.word	0x24024f50
 800d604:	24000078 	.word	0x24000078

0800d608 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d608:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d60c:	2b0f      	cmp	r3, #15
 800d60e:	d90e      	bls.n	800d62e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d610:	4a11      	ldr	r2, [pc, #68]	@ (800d658 <vPortValidateInterruptPriority+0x50>)
 800d612:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d614:	4a11      	ldr	r2, [pc, #68]	@ (800d65c <vPortValidateInterruptPriority+0x54>)
 800d616:	7812      	ldrb	r2, [r2, #0]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d908      	bls.n	800d62e <vPortValidateInterruptPriority+0x26>
 800d61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d620:	f383 8811 	msr	BASEPRI, r3
 800d624:	f3bf 8f6f 	isb	sy
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	e7fe      	b.n	800d62c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d62e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d632:	4a0b      	ldr	r2, [pc, #44]	@ (800d660 <vPortValidateInterruptPriority+0x58>)
 800d634:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800d638:	6812      	ldr	r2, [r2, #0]
 800d63a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d63e:	4293      	cmp	r3, r2
 800d640:	d908      	bls.n	800d654 <vPortValidateInterruptPriority+0x4c>
 800d642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d646:	f383 8811 	msr	BASEPRI, r3
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	e7fe      	b.n	800d652 <vPortValidateInterruptPriority+0x4a>
	}
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop
 800d658:	e000e3f0 	.word	0xe000e3f0
 800d65c:	24024f54 	.word	0x24024f54
 800d660:	24024f50 	.word	0x24024f50

0800d664 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d664:	b510      	push	{r4, lr}
 800d666:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d668:	f7ff febc 	bl	800d3e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d66c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d66e:	f7ff fed9 	bl	800d424 <vPortExitCritical>

	return xReturn;
}
 800d672:	fab4 f084 	clz	r0, r4
 800d676:	0940      	lsrs	r0, r0, #5
 800d678:	bd10      	pop	{r4, pc}

0800d67a <prvCopyDataToQueue>:
{
 800d67a:	b570      	push	{r4, r5, r6, lr}
 800d67c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d67e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800d680:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d682:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d684:	b942      	cbnz	r2, 800d698 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d686:	6806      	ldr	r6, [r0, #0]
 800d688:	b99e      	cbnz	r6, 800d6b2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d68a:	6880      	ldr	r0, [r0, #8]
 800d68c:	f001 fa24 	bl	800ead8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d690:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d692:	3501      	adds	r5, #1
 800d694:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800d696:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d698:	b96e      	cbnz	r6, 800d6b6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d69a:	6840      	ldr	r0, [r0, #4]
 800d69c:	f016 fb95 	bl	8023dca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6a0:	6863      	ldr	r3, [r4, #4]
 800d6a2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d6a4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6a6:	68a2      	ldr	r2, [r4, #8]
 800d6a8:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6aa:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6ac:	bf24      	itt	cs
 800d6ae:	6823      	ldrcs	r3, [r4, #0]
 800d6b0:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	e7ed      	b.n	800d692 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d6b6:	68c0      	ldr	r0, [r0, #12]
 800d6b8:	f016 fb87 	bl	8023dca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6bc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d6be:	68e3      	ldr	r3, [r4, #12]
 800d6c0:	4251      	negs	r1, r2
 800d6c2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6c4:	6822      	ldr	r2, [r4, #0]
 800d6c6:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6c8:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6ca:	bf3e      	ittt	cc
 800d6cc:	68a3      	ldrcc	r3, [r4, #8]
 800d6ce:	185b      	addcc	r3, r3, r1
 800d6d0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d6d2:	2e02      	cmp	r6, #2
 800d6d4:	d1ed      	bne.n	800d6b2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6d6:	b10d      	cbz	r5, 800d6dc <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800d6d8:	3d01      	subs	r5, #1
 800d6da:	e7ea      	b.n	800d6b2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800d6dc:	4628      	mov	r0, r5
 800d6de:	e7d8      	b.n	800d692 <prvCopyDataToQueue+0x18>

0800d6e0 <prvCopyDataFromQueue>:
{
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d6e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800d6e6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d6e8:	b162      	cbz	r2, 800d704 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6ea:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d6ec:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6ee:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d6f0:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6f2:	60dc      	str	r4, [r3, #12]
}
 800d6f4:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d6f8:	bf24      	itt	cs
 800d6fa:	6819      	ldrcs	r1, [r3, #0]
 800d6fc:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d6fe:	68d9      	ldr	r1, [r3, #12]
 800d700:	f016 bb63 	b.w	8023dca <memcpy>
}
 800d704:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d708:	4770      	bx	lr

0800d70a <prvUnlockQueue>:
{
 800d70a:	b570      	push	{r4, r5, r6, lr}
 800d70c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d70e:	f7ff fe69 	bl	800d3e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d712:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d716:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800d71a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d71c:	2d00      	cmp	r5, #0
 800d71e:	dd01      	ble.n	800d724 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d720:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d722:	b9b3      	cbnz	r3, 800d752 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 800d724:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d726:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800d72a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800d72e:	f7ff fe79 	bl	800d424 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d732:	f7ff fe57 	bl	800d3e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d736:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800d73a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d73c:	2d00      	cmp	r5, #0
 800d73e:	dd01      	ble.n	800d744 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d740:	6923      	ldr	r3, [r4, #16]
 800d742:	b97b      	cbnz	r3, 800d764 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 800d744:	23ff      	movs	r3, #255	@ 0xff
 800d746:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800d74a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d74e:	f7ff be69 	b.w	800d424 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d752:	4630      	mov	r0, r6
 800d754:	f001 f8dc 	bl	800e910 <xTaskRemoveFromEventList>
 800d758:	b108      	cbz	r0, 800d75e <prvUnlockQueue+0x54>
						vTaskMissedYield();
 800d75a:	f001 f963 	bl	800ea24 <vTaskMissedYield>
			--cTxLock;
 800d75e:	3d01      	subs	r5, #1
 800d760:	b26d      	sxtb	r5, r5
 800d762:	e7db      	b.n	800d71c <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d764:	4630      	mov	r0, r6
 800d766:	f001 f8d3 	bl	800e910 <xTaskRemoveFromEventList>
 800d76a:	b108      	cbz	r0, 800d770 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800d76c:	f001 f95a 	bl	800ea24 <vTaskMissedYield>
				--cRxLock;
 800d770:	3d01      	subs	r5, #1
 800d772:	b26d      	sxtb	r5, r5
 800d774:	e7e2      	b.n	800d73c <prvUnlockQueue+0x32>

0800d776 <xQueueGenericReset>:
{
 800d776:	b538      	push	{r3, r4, r5, lr}
 800d778:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d77a:	4604      	mov	r4, r0
 800d77c:	b940      	cbnz	r0, 800d790 <xQueueGenericReset+0x1a>
 800d77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d782:	f383 8811 	msr	BASEPRI, r3
 800d786:	f3bf 8f6f 	isb	sy
 800d78a:	f3bf 8f4f 	dsb	sy
 800d78e:	e7fe      	b.n	800d78e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800d790:	f7ff fe28 	bl	800d3e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d794:	6822      	ldr	r2, [r4, #0]
 800d796:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d79a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d79c:	434b      	muls	r3, r1
 800d79e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7a0:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7a2:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7a4:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d7a6:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800d7a8:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7aa:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d7ac:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800d7ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d7b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800d7b6:	b9a5      	cbnz	r5, 800d7e2 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7b8:	6923      	ldr	r3, [r4, #16]
 800d7ba:	b173      	cbz	r3, 800d7da <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7bc:	f104 0010 	add.w	r0, r4, #16
 800d7c0:	f001 f8a6 	bl	800e910 <xTaskRemoveFromEventList>
 800d7c4:	b148      	cbz	r0, 800d7da <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800d7c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d7ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d7d2:	f3bf 8f4f 	dsb	sy
 800d7d6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800d7da:	f7ff fe23 	bl	800d424 <vPortExitCritical>
}
 800d7de:	2001      	movs	r0, #1
 800d7e0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d7e2:	f104 0010 	add.w	r0, r4, #16
 800d7e6:	f7ff fd55 	bl	800d294 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d7ea:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d7ee:	f7ff fd51 	bl	800d294 <vListInitialise>
 800d7f2:	e7f2      	b.n	800d7da <xQueueGenericReset+0x64>

0800d7f4 <xQueueGenericCreateStatic>:
	{
 800d7f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7f6:	460d      	mov	r5, r1
 800d7f8:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d7fa:	b940      	cbnz	r0, 800d80e <xQueueGenericCreateStatic+0x1a>
 800d7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d800:	f383 8811 	msr	BASEPRI, r3
 800d804:	f3bf 8f6f 	isb	sy
 800d808:	f3bf 8f4f 	dsb	sy
 800d80c:	e7fe      	b.n	800d80c <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800d80e:	b943      	cbnz	r3, 800d822 <xQueueGenericCreateStatic+0x2e>
 800d810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d814:	f383 8811 	msr	BASEPRI, r3
 800d818:	f3bf 8f6f 	isb	sy
 800d81c:	f3bf 8f4f 	dsb	sy
 800d820:	e7fe      	b.n	800d820 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d822:	b14a      	cbz	r2, 800d838 <xQueueGenericCreateStatic+0x44>
 800d824:	b991      	cbnz	r1, 800d84c <xQueueGenericCreateStatic+0x58>
 800d826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d82a:	f383 8811 	msr	BASEPRI, r3
 800d82e:	f3bf 8f6f 	isb	sy
 800d832:	f3bf 8f4f 	dsb	sy
 800d836:	e7fe      	b.n	800d836 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d838:	b141      	cbz	r1, 800d84c <xQueueGenericCreateStatic+0x58>
 800d83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d83e:	f383 8811 	msr	BASEPRI, r3
 800d842:	f3bf 8f6f 	isb	sy
 800d846:	f3bf 8f4f 	dsb	sy
 800d84a:	e7fe      	b.n	800d84a <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d84c:	2350      	movs	r3, #80	@ 0x50
 800d84e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d850:	9b01      	ldr	r3, [sp, #4]
 800d852:	2b50      	cmp	r3, #80	@ 0x50
 800d854:	d008      	beq.n	800d868 <xQueueGenericCreateStatic+0x74>
 800d856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d85a:	f383 8811 	msr	BASEPRI, r3
 800d85e:	f3bf 8f6f 	isb	sy
 800d862:	f3bf 8f4f 	dsb	sy
 800d866:	e7fe      	b.n	800d866 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d868:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d86a:	2d00      	cmp	r5, #0
 800d86c:	bf08      	it	eq
 800d86e:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d870:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d872:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d876:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d878:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d87c:	4620      	mov	r0, r4
 800d87e:	f7ff ff7a 	bl	800d776 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d882:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800d886:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800d888:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800d88c:	b003      	add	sp, #12
 800d88e:	bd30      	pop	{r4, r5, pc}

0800d890 <xQueueGenericCreate>:
	{
 800d890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d892:	460d      	mov	r5, r1
 800d894:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d896:	4606      	mov	r6, r0
 800d898:	b940      	cbnz	r0, 800d8ac <xQueueGenericCreate+0x1c>
 800d89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d89e:	f383 8811 	msr	BASEPRI, r3
 800d8a2:	f3bf 8f6f 	isb	sy
 800d8a6:	f3bf 8f4f 	dsb	sy
 800d8aa:	e7fe      	b.n	800d8aa <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8ac:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d8ae:	3050      	adds	r0, #80	@ 0x50
 800d8b0:	f7ff fc1a 	bl	800d0e8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	b170      	cbz	r0, 800d8d6 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d8be:	b165      	cbz	r5, 800d8da <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8c0:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d8c4:	2101      	movs	r1, #1
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d8ca:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d8ce:	f7ff ff52 	bl	800d776 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d8d2:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d8da:	4603      	mov	r3, r0
 800d8dc:	e7f2      	b.n	800d8c4 <xQueueGenericCreate+0x34>

0800d8de <xQueueCreateCountingSemaphoreStatic>:
	{
 800d8de:	b513      	push	{r0, r1, r4, lr}
 800d8e0:	4613      	mov	r3, r2
 800d8e2:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800d8e4:	b940      	cbnz	r0, 800d8f8 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800d8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ea:	f383 8811 	msr	BASEPRI, r3
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	f3bf 8f4f 	dsb	sy
 800d8f6:	e7fe      	b.n	800d8f6 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d8f8:	4288      	cmp	r0, r1
 800d8fa:	d208      	bcs.n	800d90e <xQueueCreateCountingSemaphoreStatic+0x30>
 800d8fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d900:	f383 8811 	msr	BASEPRI, r3
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	e7fe      	b.n	800d90c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d90e:	2202      	movs	r2, #2
 800d910:	9200      	str	r2, [sp, #0]
 800d912:	2200      	movs	r2, #0
 800d914:	4611      	mov	r1, r2
 800d916:	f7ff ff6d 	bl	800d7f4 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800d91a:	b100      	cbz	r0, 800d91e <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d91c:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d91e:	b002      	add	sp, #8
 800d920:	bd10      	pop	{r4, pc}

0800d922 <xQueueCreateCountingSemaphore>:
	{
 800d922:	b510      	push	{r4, lr}
 800d924:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800d926:	b940      	cbnz	r0, 800d93a <xQueueCreateCountingSemaphore+0x18>
 800d928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d92c:	f383 8811 	msr	BASEPRI, r3
 800d930:	f3bf 8f6f 	isb	sy
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	e7fe      	b.n	800d938 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d93a:	4288      	cmp	r0, r1
 800d93c:	d208      	bcs.n	800d950 <xQueueCreateCountingSemaphore+0x2e>
 800d93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d942:	f383 8811 	msr	BASEPRI, r3
 800d946:	f3bf 8f6f 	isb	sy
 800d94a:	f3bf 8f4f 	dsb	sy
 800d94e:	e7fe      	b.n	800d94e <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d950:	2202      	movs	r2, #2
 800d952:	2100      	movs	r1, #0
 800d954:	f7ff ff9c 	bl	800d890 <xQueueGenericCreate>
		if( xHandle != NULL )
 800d958:	b100      	cbz	r0, 800d95c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d95a:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d95c:	bd10      	pop	{r4, pc}

0800d95e <xQueueGenericSend>:
{
 800d95e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d962:	460f      	mov	r7, r1
 800d964:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800d966:	4604      	mov	r4, r0
{
 800d968:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800d96a:	b940      	cbnz	r0, 800d97e <xQueueGenericSend+0x20>
 800d96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d970:	f383 8811 	msr	BASEPRI, r3
 800d974:	f3bf 8f6f 	isb	sy
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	e7fe      	b.n	800d97c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d97e:	b951      	cbnz	r1, 800d996 <xQueueGenericSend+0x38>
 800d980:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d982:	b143      	cbz	r3, 800d996 <xQueueGenericSend+0x38>
 800d984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d988:	f383 8811 	msr	BASEPRI, r3
 800d98c:	f3bf 8f6f 	isb	sy
 800d990:	f3bf 8f4f 	dsb	sy
 800d994:	e7fe      	b.n	800d994 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d996:	2e02      	cmp	r6, #2
 800d998:	d10b      	bne.n	800d9b2 <xQueueGenericSend+0x54>
 800d99a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d008      	beq.n	800d9b2 <xQueueGenericSend+0x54>
 800d9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9a4:	f383 8811 	msr	BASEPRI, r3
 800d9a8:	f3bf 8f6f 	isb	sy
 800d9ac:	f3bf 8f4f 	dsb	sy
 800d9b0:	e7fe      	b.n	800d9b0 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9b2:	f001 f843 	bl	800ea3c <xTaskGetSchedulerState>
 800d9b6:	4605      	mov	r5, r0
 800d9b8:	b320      	cbz	r0, 800da04 <xQueueGenericSend+0xa6>
 800d9ba:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800d9bc:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800d9c0:	f7ff fd10 	bl	800d3e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d9c4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d9c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d227      	bcs.n	800da1c <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d9cc:	4632      	mov	r2, r6
 800d9ce:	4639      	mov	r1, r7
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	f7ff fe52 	bl	800d67a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d9d8:	b11b      	cbz	r3, 800d9e2 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9da:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d9de:	f000 ff97 	bl	800e910 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800d9e2:	b148      	cbz	r0, 800d9f8 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 800d9e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d9e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d9f8:	f7ff fd14 	bl	800d424 <vPortExitCritical>
				return pdPASS;
 800d9fc:	2001      	movs	r0, #1
}
 800d9fe:	b004      	add	sp, #16
 800da00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da04:	9b01      	ldr	r3, [sp, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d0d8      	beq.n	800d9bc <xQueueGenericSend+0x5e>
 800da0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da0e:	f383 8811 	msr	BASEPRI, r3
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	e7fe      	b.n	800da1a <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da1c:	2e02      	cmp	r6, #2
 800da1e:	d0d5      	beq.n	800d9cc <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800da20:	9b01      	ldr	r3, [sp, #4]
 800da22:	b91b      	cbnz	r3, 800da2c <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800da24:	f7ff fcfe 	bl	800d424 <vPortExitCritical>
					return errQUEUE_FULL;
 800da28:	2000      	movs	r0, #0
 800da2a:	e7e8      	b.n	800d9fe <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 800da2c:	b915      	cbnz	r5, 800da34 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da2e:	a802      	add	r0, sp, #8
 800da30:	f000 ffb0 	bl	800e994 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800da34:	f7ff fcf6 	bl	800d424 <vPortExitCritical>
		vTaskSuspendAll();
 800da38:	f000 fd6c 	bl	800e514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da3c:	f7ff fcd2 	bl	800d3e4 <vPortEnterCritical>
 800da40:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800da44:	2bff      	cmp	r3, #255	@ 0xff
 800da46:	d101      	bne.n	800da4c <xQueueGenericSend+0xee>
 800da48:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800da4c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800da50:	2bff      	cmp	r3, #255	@ 0xff
 800da52:	d101      	bne.n	800da58 <xQueueGenericSend+0xfa>
 800da54:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800da58:	f7ff fce4 	bl	800d424 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da5c:	a901      	add	r1, sp, #4
 800da5e:	a802      	add	r0, sp, #8
 800da60:	f000 ffa4 	bl	800e9ac <xTaskCheckForTimeOut>
 800da64:	bb38      	cbnz	r0, 800dab6 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da66:	f7ff fcbd 	bl	800d3e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800da6a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800da6c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800da6e:	429a      	cmp	r2, r3
 800da70:	d10e      	bne.n	800da90 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800da72:	f7ff fcd7 	bl	800d424 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800da76:	9901      	ldr	r1, [sp, #4]
 800da78:	f104 0010 	add.w	r0, r4, #16
 800da7c:	f000 ff10 	bl	800e8a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da80:	4620      	mov	r0, r4
 800da82:	f7ff fe42 	bl	800d70a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da86:	f000 fde9 	bl	800e65c <xTaskResumeAll>
 800da8a:	b148      	cbz	r0, 800daa0 <xQueueGenericSend+0x142>
 800da8c:	2501      	movs	r5, #1
 800da8e:	e797      	b.n	800d9c0 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800da90:	f7ff fcc8 	bl	800d424 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800da94:	4620      	mov	r0, r4
 800da96:	f7ff fe38 	bl	800d70a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da9a:	f000 fddf 	bl	800e65c <xTaskResumeAll>
 800da9e:	e7f5      	b.n	800da8c <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800daa0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800daa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daa8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800daac:	f3bf 8f4f 	dsb	sy
 800dab0:	f3bf 8f6f 	isb	sy
 800dab4:	e7ea      	b.n	800da8c <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800dab6:	4620      	mov	r0, r4
 800dab8:	f7ff fe27 	bl	800d70a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dabc:	f000 fdce 	bl	800e65c <xTaskResumeAll>
			return errQUEUE_FULL;
 800dac0:	e7b2      	b.n	800da28 <xQueueGenericSend+0xca>

0800dac2 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dac2:	2200      	movs	r2, #0
	{
 800dac4:	460b      	mov	r3, r1
 800dac6:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dac8:	4611      	mov	r1, r2
 800daca:	9000      	str	r0, [sp, #0]
 800dacc:	2001      	movs	r0, #1
 800dace:	f7ff fe91 	bl	800d7f4 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800dad2:	4604      	mov	r4, r0
 800dad4:	b138      	cbz	r0, 800dae6 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dad6:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dad8:	461a      	mov	r2, r3
 800dada:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dadc:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dade:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dae0:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dae2:	f7ff ff3c 	bl	800d95e <xQueueGenericSend>
	}
 800dae6:	4620      	mov	r0, r4
 800dae8:	b002      	add	sp, #8
 800daea:	bd10      	pop	{r4, pc}

0800daec <xQueueGiveMutexRecursive>:
	{
 800daec:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800daee:	4604      	mov	r4, r0
 800daf0:	b940      	cbnz	r0, 800db04 <xQueueGiveMutexRecursive+0x18>
 800daf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daf6:	f383 8811 	msr	BASEPRI, r3
 800dafa:	f3bf 8f6f 	isb	sy
 800dafe:	f3bf 8f4f 	dsb	sy
 800db02:	e7fe      	b.n	800db02 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800db04:	6885      	ldr	r5, [r0, #8]
 800db06:	f000 ff93 	bl	800ea30 <xTaskGetCurrentTaskHandle>
 800db0a:	4285      	cmp	r5, r0
 800db0c:	d10b      	bne.n	800db26 <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800db0e:	68e3      	ldr	r3, [r4, #12]
 800db10:	3b01      	subs	r3, #1
 800db12:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800db14:	b10b      	cbz	r3, 800db1a <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800db16:	2001      	movs	r0, #1
	}
 800db18:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800db1a:	461a      	mov	r2, r3
 800db1c:	4619      	mov	r1, r3
 800db1e:	4620      	mov	r0, r4
 800db20:	f7ff ff1d 	bl	800d95e <xQueueGenericSend>
 800db24:	e7f7      	b.n	800db16 <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800db26:	2000      	movs	r0, #0
		return xReturn;
 800db28:	e7f6      	b.n	800db18 <xQueueGiveMutexRecursive+0x2c>

0800db2a <xQueueCreateMutex>:
	{
 800db2a:	b570      	push	{r4, r5, r6, lr}
 800db2c:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800db2e:	2050      	movs	r0, #80	@ 0x50
 800db30:	f7ff fada 	bl	800d0e8 <pvPortMalloc>
 800db34:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800db36:	b198      	cbz	r0, 800db60 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800db38:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800db3a:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800db3c:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800db3e:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800db42:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db46:	f7ff fe16 	bl	800d776 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800db4a:	462b      	mov	r3, r5
 800db4c:	462a      	mov	r2, r5
 800db4e:	4629      	mov	r1, r5
 800db50:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800db52:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800db56:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800db58:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800db5a:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800db5c:	f7ff feff 	bl	800d95e <xQueueGenericSend>
	}
 800db60:	4620      	mov	r0, r4
 800db62:	bd70      	pop	{r4, r5, r6, pc}

0800db64 <xQueueGenericSendFromISR>:
{
 800db64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db68:	4689      	mov	r9, r1
 800db6a:	4617      	mov	r7, r2
 800db6c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800db6e:	4604      	mov	r4, r0
 800db70:	b940      	cbnz	r0, 800db84 <xQueueGenericSendFromISR+0x20>
 800db72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	e7fe      	b.n	800db82 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db84:	b951      	cbnz	r1, 800db9c <xQueueGenericSendFromISR+0x38>
 800db86:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800db88:	b143      	cbz	r3, 800db9c <xQueueGenericSendFromISR+0x38>
 800db8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db8e:	f383 8811 	msr	BASEPRI, r3
 800db92:	f3bf 8f6f 	isb	sy
 800db96:	f3bf 8f4f 	dsb	sy
 800db9a:	e7fe      	b.n	800db9a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db9c:	2e02      	cmp	r6, #2
 800db9e:	d10b      	bne.n	800dbb8 <xQueueGenericSendFromISR+0x54>
 800dba0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d008      	beq.n	800dbb8 <xQueueGenericSendFromISR+0x54>
 800dba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbaa:	f383 8811 	msr	BASEPRI, r3
 800dbae:	f3bf 8f6f 	isb	sy
 800dbb2:	f3bf 8f4f 	dsb	sy
 800dbb6:	e7fe      	b.n	800dbb6 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbb8:	f7ff fd26 	bl	800d608 <vPortValidateInterruptPriority>
	__asm volatile
 800dbbc:	f3ef 8811 	mrs	r8, BASEPRI
 800dbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc4:	f383 8811 	msr	BASEPRI, r3
 800dbc8:	f3bf 8f6f 	isb	sy
 800dbcc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dbd0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dbd2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d301      	bcc.n	800dbdc <xQueueGenericSendFromISR+0x78>
 800dbd8:	2e02      	cmp	r6, #2
 800dbda:	d11e      	bne.n	800dc1a <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800dbdc:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dbe0:	4632      	mov	r2, r6
 800dbe2:	4649      	mov	r1, r9
 800dbe4:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800dbe6:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbe8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dbea:	f7ff fd46 	bl	800d67a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800dbee:	1c6b      	adds	r3, r5, #1
 800dbf0:	d10e      	bne.n	800dc10 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbf2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dbf4:	b13b      	cbz	r3, 800dc06 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbf6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dbfa:	f000 fe89 	bl	800e910 <xTaskRemoveFromEventList>
 800dbfe:	b110      	cbz	r0, 800dc06 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800dc00:	b10f      	cbz	r7, 800dc06 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dc02:	2301      	movs	r3, #1
 800dc04:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800dc06:	2001      	movs	r0, #1
	__asm volatile
 800dc08:	f388 8811 	msr	BASEPRI, r8
}
 800dc0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dc10:	3501      	adds	r5, #1
 800dc12:	b26d      	sxtb	r5, r5
 800dc14:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800dc18:	e7f5      	b.n	800dc06 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	e7f4      	b.n	800dc08 <xQueueGenericSendFromISR+0xa4>

0800dc1e <xQueueGiveFromISR>:
{
 800dc1e:	b570      	push	{r4, r5, r6, lr}
 800dc20:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800dc22:	4604      	mov	r4, r0
 800dc24:	b940      	cbnz	r0, 800dc38 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800dc26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc2a:	f383 8811 	msr	BASEPRI, r3
 800dc2e:	f3bf 8f6f 	isb	sy
 800dc32:	f3bf 8f4f 	dsb	sy
 800dc36:	e7fe      	b.n	800dc36 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800dc38:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800dc3a:	b143      	cbz	r3, 800dc4e <xQueueGiveFromISR+0x30>
 800dc3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc40:	f383 8811 	msr	BASEPRI, r3
 800dc44:	f3bf 8f6f 	isb	sy
 800dc48:	f3bf 8f4f 	dsb	sy
 800dc4c:	e7fe      	b.n	800dc4c <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800dc4e:	6803      	ldr	r3, [r0, #0]
 800dc50:	b953      	cbnz	r3, 800dc68 <xQueueGiveFromISR+0x4a>
 800dc52:	6883      	ldr	r3, [r0, #8]
 800dc54:	b143      	cbz	r3, 800dc68 <xQueueGiveFromISR+0x4a>
 800dc56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc5a:	f383 8811 	msr	BASEPRI, r3
 800dc5e:	f3bf 8f6f 	isb	sy
 800dc62:	f3bf 8f4f 	dsb	sy
 800dc66:	e7fe      	b.n	800dc66 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc68:	f7ff fcce 	bl	800d608 <vPortValidateInterruptPriority>
	__asm volatile
 800dc6c:	f3ef 8611 	mrs	r6, BASEPRI
 800dc70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc80:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dc82:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d919      	bls.n	800dcbc <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800dc88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dc8c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800dc8e:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800dc90:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dc92:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800dc94:	d10d      	bne.n	800dcb2 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc96:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dc98:	b13b      	cbz	r3, 800dcaa <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc9a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dc9e:	f000 fe37 	bl	800e910 <xTaskRemoveFromEventList>
 800dca2:	b110      	cbz	r0, 800dcaa <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800dca4:	b10d      	cbz	r5, 800dcaa <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dca6:	2301      	movs	r3, #1
 800dca8:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800dcaa:	2001      	movs	r0, #1
	__asm volatile
 800dcac:	f386 8811 	msr	BASEPRI, r6
}
 800dcb0:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	b25b      	sxtb	r3, r3
 800dcb6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800dcba:	e7f6      	b.n	800dcaa <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	e7f5      	b.n	800dcac <xQueueGiveFromISR+0x8e>

0800dcc0 <xQueueReceive>:
{
 800dcc0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800dcc4:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800dcc6:	4604      	mov	r4, r0
{
 800dcc8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800dcca:	b940      	cbnz	r0, 800dcde <xQueueReceive+0x1e>
	__asm volatile
 800dccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd0:	f383 8811 	msr	BASEPRI, r3
 800dcd4:	f3bf 8f6f 	isb	sy
 800dcd8:	f3bf 8f4f 	dsb	sy
 800dcdc:	e7fe      	b.n	800dcdc <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcde:	b951      	cbnz	r1, 800dcf6 <xQueueReceive+0x36>
 800dce0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800dce2:	b143      	cbz	r3, 800dcf6 <xQueueReceive+0x36>
 800dce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce8:	f383 8811 	msr	BASEPRI, r3
 800dcec:	f3bf 8f6f 	isb	sy
 800dcf0:	f3bf 8f4f 	dsb	sy
 800dcf4:	e7fe      	b.n	800dcf4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dcf6:	f000 fea1 	bl	800ea3c <xTaskGetSchedulerState>
 800dcfa:	4605      	mov	r5, r0
 800dcfc:	b318      	cbz	r0, 800dd46 <xQueueReceive+0x86>
 800dcfe:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800dd00:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800dd04:	f7ff fb6e 	bl	800d3e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd08:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd0a:	b347      	cbz	r7, 800dd5e <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd0c:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd0e:	4631      	mov	r1, r6
 800dd10:	4620      	mov	r0, r4
 800dd12:	f7ff fce5 	bl	800d6e0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd16:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd18:	6923      	ldr	r3, [r4, #16]
 800dd1a:	b173      	cbz	r3, 800dd3a <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd1c:	f104 0010 	add.w	r0, r4, #16
 800dd20:	f000 fdf6 	bl	800e910 <xTaskRemoveFromEventList>
 800dd24:	b148      	cbz	r0, 800dd3a <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800dd26:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dd2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dd32:	f3bf 8f4f 	dsb	sy
 800dd36:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800dd3a:	f7ff fb73 	bl	800d424 <vPortExitCritical>
				return pdPASS;
 800dd3e:	2001      	movs	r0, #1
}
 800dd40:	b004      	add	sp, #16
 800dd42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd46:	9b01      	ldr	r3, [sp, #4]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d0d9      	beq.n	800dd00 <xQueueReceive+0x40>
 800dd4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd50:	f383 8811 	msr	BASEPRI, r3
 800dd54:	f3bf 8f6f 	isb	sy
 800dd58:	f3bf 8f4f 	dsb	sy
 800dd5c:	e7fe      	b.n	800dd5c <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd5e:	9b01      	ldr	r3, [sp, #4]
 800dd60:	b91b      	cbnz	r3, 800dd6a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800dd62:	f7ff fb5f 	bl	800d424 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800dd66:	2000      	movs	r0, #0
 800dd68:	e7ea      	b.n	800dd40 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800dd6a:	b915      	cbnz	r5, 800dd72 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd6c:	a802      	add	r0, sp, #8
 800dd6e:	f000 fe11 	bl	800e994 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800dd72:	f7ff fb57 	bl	800d424 <vPortExitCritical>
		vTaskSuspendAll();
 800dd76:	f000 fbcd 	bl	800e514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd7a:	f7ff fb33 	bl	800d3e4 <vPortEnterCritical>
 800dd7e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800dd82:	2bff      	cmp	r3, #255	@ 0xff
 800dd84:	d101      	bne.n	800dd8a <xQueueReceive+0xca>
 800dd86:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800dd8a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800dd8e:	2bff      	cmp	r3, #255	@ 0xff
 800dd90:	d101      	bne.n	800dd96 <xQueueReceive+0xd6>
 800dd92:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800dd96:	f7ff fb45 	bl	800d424 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd9a:	a901      	add	r1, sp, #4
 800dd9c:	a802      	add	r0, sp, #8
 800dd9e:	f000 fe05 	bl	800e9ac <xTaskCheckForTimeOut>
 800dda2:	bb00      	cbnz	r0, 800dde6 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dda4:	4620      	mov	r0, r4
 800dda6:	f7ff fc5d 	bl	800d664 <prvIsQueueEmpty>
 800ddaa:	b1b0      	cbz	r0, 800ddda <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ddac:	9901      	ldr	r1, [sp, #4]
 800ddae:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ddb2:	f000 fd75 	bl	800e8a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	f7ff fca7 	bl	800d70a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ddbc:	f000 fc4e 	bl	800e65c <xTaskResumeAll>
 800ddc0:	b948      	cbnz	r0, 800ddd6 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800ddc2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ddc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ddce:	f3bf 8f4f 	dsb	sy
 800ddd2:	f3bf 8f6f 	isb	sy
 800ddd6:	2501      	movs	r5, #1
 800ddd8:	e794      	b.n	800dd04 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800ddda:	4620      	mov	r0, r4
 800dddc:	f7ff fc95 	bl	800d70a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dde0:	f000 fc3c 	bl	800e65c <xTaskResumeAll>
 800dde4:	e7f7      	b.n	800ddd6 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800dde6:	4620      	mov	r0, r4
 800dde8:	f7ff fc8f 	bl	800d70a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ddec:	f000 fc36 	bl	800e65c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	f7ff fc37 	bl	800d664 <prvIsQueueEmpty>
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	d0ed      	beq.n	800ddd6 <xQueueReceive+0x116>
 800ddfa:	e7b4      	b.n	800dd66 <xQueueReceive+0xa6>

0800ddfc <xQueueSemaphoreTake>:
{
 800ddfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddfe:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800de00:	4604      	mov	r4, r0
{
 800de02:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800de04:	b940      	cbnz	r0, 800de18 <xQueueSemaphoreTake+0x1c>
 800de06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de0a:	f383 8811 	msr	BASEPRI, r3
 800de0e:	f3bf 8f6f 	isb	sy
 800de12:	f3bf 8f4f 	dsb	sy
 800de16:	e7fe      	b.n	800de16 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800de18:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800de1a:	b145      	cbz	r5, 800de2e <xQueueSemaphoreTake+0x32>
 800de1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de20:	f383 8811 	msr	BASEPRI, r3
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	e7fe      	b.n	800de2c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de2e:	f000 fe05 	bl	800ea3c <xTaskGetSchedulerState>
 800de32:	4606      	mov	r6, r0
 800de34:	b320      	cbz	r0, 800de80 <xQueueSemaphoreTake+0x84>
 800de36:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800de38:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800de3a:	f7ff fad3 	bl	800d3e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800de3e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800de40:	b353      	cbz	r3, 800de98 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800de42:	3b01      	subs	r3, #1
 800de44:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de46:	6823      	ldr	r3, [r4, #0]
 800de48:	b913      	cbnz	r3, 800de50 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800de4a:	f000 fed5 	bl	800ebf8 <pvTaskIncrementMutexHeldCount>
 800de4e:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de50:	6923      	ldr	r3, [r4, #16]
 800de52:	b173      	cbz	r3, 800de72 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de54:	f104 0010 	add.w	r0, r4, #16
 800de58:	f000 fd5a 	bl	800e910 <xTaskRemoveFromEventList>
 800de5c:	b148      	cbz	r0, 800de72 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800de5e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800de62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de66:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800de6a:	f3bf 8f4f 	dsb	sy
 800de6e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800de72:	f7ff fad7 	bl	800d424 <vPortExitCritical>
				return pdPASS;
 800de76:	2001      	movs	r0, #1
}
 800de78:	b005      	add	sp, #20
 800de7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de7c:	4635      	mov	r5, r6
 800de7e:	e7db      	b.n	800de38 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de80:	9b01      	ldr	r3, [sp, #4]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d0fa      	beq.n	800de7c <xQueueSemaphoreTake+0x80>
 800de86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de8a:	f383 8811 	msr	BASEPRI, r3
 800de8e:	f3bf 8f6f 	isb	sy
 800de92:	f3bf 8f4f 	dsb	sy
 800de96:	e7fe      	b.n	800de96 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800de98:	9b01      	ldr	r3, [sp, #4]
 800de9a:	b953      	cbnz	r3, 800deb2 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800de9c:	2d00      	cmp	r5, #0
 800de9e:	d066      	beq.n	800df6e <xQueueSemaphoreTake+0x172>
 800dea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dea4:	f383 8811 	msr	BASEPRI, r3
 800dea8:	f3bf 8f6f 	isb	sy
 800deac:	f3bf 8f4f 	dsb	sy
 800deb0:	e7fe      	b.n	800deb0 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800deb2:	b916      	cbnz	r6, 800deba <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800deb4:	a802      	add	r0, sp, #8
 800deb6:	f000 fd6d 	bl	800e994 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800deba:	f7ff fab3 	bl	800d424 <vPortExitCritical>
		vTaskSuspendAll();
 800debe:	f000 fb29 	bl	800e514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dec2:	f7ff fa8f 	bl	800d3e4 <vPortEnterCritical>
 800dec6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800deca:	2bff      	cmp	r3, #255	@ 0xff
 800decc:	d101      	bne.n	800ded2 <xQueueSemaphoreTake+0xd6>
 800dece:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800ded2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ded6:	2bff      	cmp	r3, #255	@ 0xff
 800ded8:	d101      	bne.n	800dede <xQueueSemaphoreTake+0xe2>
 800deda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dede:	f7ff faa1 	bl	800d424 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dee2:	a901      	add	r1, sp, #4
 800dee4:	a802      	add	r0, sp, #8
 800dee6:	f000 fd61 	bl	800e9ac <xTaskCheckForTimeOut>
 800deea:	bb50      	cbnz	r0, 800df42 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800deec:	4620      	mov	r0, r4
 800deee:	f7ff fbb9 	bl	800d664 <prvIsQueueEmpty>
 800def2:	b300      	cbz	r0, 800df36 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800def4:	6823      	ldr	r3, [r4, #0]
 800def6:	b93b      	cbnz	r3, 800df08 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800def8:	f7ff fa74 	bl	800d3e4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800defc:	68a0      	ldr	r0, [r4, #8]
 800defe:	f000 fdad 	bl	800ea5c <xTaskPriorityInherit>
 800df02:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800df04:	f7ff fa8e 	bl	800d424 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df08:	9901      	ldr	r1, [sp, #4]
 800df0a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800df0e:	f000 fcc7 	bl	800e8a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df12:	4620      	mov	r0, r4
 800df14:	f7ff fbf9 	bl	800d70a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df18:	f000 fba0 	bl	800e65c <xTaskResumeAll>
 800df1c:	b948      	cbnz	r0, 800df32 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800df1e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800df22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df26:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800df2a:	f3bf 8f4f 	dsb	sy
 800df2e:	f3bf 8f6f 	isb	sy
 800df32:	2601      	movs	r6, #1
 800df34:	e781      	b.n	800de3a <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800df36:	4620      	mov	r0, r4
 800df38:	f7ff fbe7 	bl	800d70a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df3c:	f000 fb8e 	bl	800e65c <xTaskResumeAll>
 800df40:	e7f7      	b.n	800df32 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800df42:	4620      	mov	r0, r4
 800df44:	f7ff fbe1 	bl	800d70a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df48:	f000 fb88 	bl	800e65c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df4c:	4620      	mov	r0, r4
 800df4e:	f7ff fb89 	bl	800d664 <prvIsQueueEmpty>
 800df52:	2800      	cmp	r0, #0
 800df54:	d0ed      	beq.n	800df32 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800df56:	b165      	cbz	r5, 800df72 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800df58:	f7ff fa44 	bl	800d3e4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800df5c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800df5e:	b119      	cbz	r1, 800df68 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800df60:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800df62:	6819      	ldr	r1, [r3, #0]
 800df64:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800df68:	68a0      	ldr	r0, [r4, #8]
 800df6a:	f000 fdf7 	bl	800eb5c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800df6e:	f7ff fa59 	bl	800d424 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800df72:	2000      	movs	r0, #0
 800df74:	e780      	b.n	800de78 <xQueueSemaphoreTake+0x7c>

0800df76 <xQueueTakeMutexRecursive>:
	{
 800df76:	b570      	push	{r4, r5, r6, lr}
 800df78:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800df7a:	4604      	mov	r4, r0
 800df7c:	b940      	cbnz	r0, 800df90 <xQueueTakeMutexRecursive+0x1a>
 800df7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df82:	f383 8811 	msr	BASEPRI, r3
 800df86:	f3bf 8f6f 	isb	sy
 800df8a:	f3bf 8f4f 	dsb	sy
 800df8e:	e7fe      	b.n	800df8e <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800df90:	6886      	ldr	r6, [r0, #8]
 800df92:	f000 fd4d 	bl	800ea30 <xTaskGetCurrentTaskHandle>
 800df96:	4286      	cmp	r6, r0
 800df98:	d104      	bne.n	800dfa4 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800df9a:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800df9c:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800df9e:	3301      	adds	r3, #1
 800dfa0:	60e3      	str	r3, [r4, #12]
	}
 800dfa2:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800dfa4:	4629      	mov	r1, r5
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f7ff ff28 	bl	800ddfc <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800dfac:	2800      	cmp	r0, #0
 800dfae:	d0f8      	beq.n	800dfa2 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dfb0:	68e3      	ldr	r3, [r4, #12]
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	60e3      	str	r3, [r4, #12]
 800dfb6:	e7f4      	b.n	800dfa2 <xQueueTakeMutexRecursive+0x2c>

0800dfb8 <xQueueReceiveFromISR>:
{
 800dfb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfbc:	4689      	mov	r9, r1
 800dfbe:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	b940      	cbnz	r0, 800dfd6 <xQueueReceiveFromISR+0x1e>
 800dfc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfc8:	f383 8811 	msr	BASEPRI, r3
 800dfcc:	f3bf 8f6f 	isb	sy
 800dfd0:	f3bf 8f4f 	dsb	sy
 800dfd4:	e7fe      	b.n	800dfd4 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dfd6:	b951      	cbnz	r1, 800dfee <xQueueReceiveFromISR+0x36>
 800dfd8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800dfda:	b143      	cbz	r3, 800dfee <xQueueReceiveFromISR+0x36>
 800dfdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe0:	f383 8811 	msr	BASEPRI, r3
 800dfe4:	f3bf 8f6f 	isb	sy
 800dfe8:	f3bf 8f4f 	dsb	sy
 800dfec:	e7fe      	b.n	800dfec <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dfee:	f7ff fb0b 	bl	800d608 <vPortValidateInterruptPriority>
	__asm volatile
 800dff2:	f3ef 8711 	mrs	r7, BASEPRI
 800dff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dffa:	f383 8811 	msr	BASEPRI, r3
 800dffe:	f3bf 8f6f 	isb	sy
 800e002:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e006:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e008:	b30d      	cbz	r5, 800e04e <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800e00a:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e00e:	4649      	mov	r1, r9
 800e010:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e012:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800e014:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e016:	f7ff fb63 	bl	800d6e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e01a:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800e01c:	1c73      	adds	r3, r6, #1
 800e01e:	d111      	bne.n	800e044 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e020:	6923      	ldr	r3, [r4, #16]
 800e022:	b153      	cbz	r3, 800e03a <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e024:	f104 0010 	add.w	r0, r4, #16
 800e028:	f000 fc72 	bl	800e910 <xTaskRemoveFromEventList>
 800e02c:	b128      	cbz	r0, 800e03a <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800e02e:	f1b8 0f00 	cmp.w	r8, #0
 800e032:	d002      	beq.n	800e03a <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e034:	2301      	movs	r3, #1
 800e036:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800e03a:	2001      	movs	r0, #1
	__asm volatile
 800e03c:	f387 8811 	msr	BASEPRI, r7
}
 800e040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e044:	3601      	adds	r6, #1
 800e046:	b276      	sxtb	r6, r6
 800e048:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800e04c:	e7f5      	b.n	800e03a <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800e04e:	4628      	mov	r0, r5
 800e050:	e7f4      	b.n	800e03c <xQueueReceiveFromISR+0x84>

0800e052 <uxQueueMessagesWaiting>:
{
 800e052:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 800e054:	4604      	mov	r4, r0
 800e056:	b940      	cbnz	r0, 800e06a <uxQueueMessagesWaiting+0x18>
	__asm volatile
 800e058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e05c:	f383 8811 	msr	BASEPRI, r3
 800e060:	f3bf 8f6f 	isb	sy
 800e064:	f3bf 8f4f 	dsb	sy
 800e068:	e7fe      	b.n	800e068 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 800e06a:	f7ff f9bb 	bl	800d3e4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e06e:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 800e070:	f7ff f9d8 	bl	800d424 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e074:	4620      	mov	r0, r4
 800e076:	bd10      	pop	{r4, pc}

0800e078 <uxQueueSpacesAvailable>:
{
 800e078:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800e07a:	4604      	mov	r4, r0
 800e07c:	b940      	cbnz	r0, 800e090 <uxQueueSpacesAvailable+0x18>
 800e07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e082:	f383 8811 	msr	BASEPRI, r3
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	f3bf 8f4f 	dsb	sy
 800e08e:	e7fe      	b.n	800e08e <uxQueueSpacesAvailable+0x16>
	taskENTER_CRITICAL();
 800e090:	f7ff f9a8 	bl	800d3e4 <vPortEnterCritical>
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800e094:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e096:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 800e098:	1ae4      	subs	r4, r4, r3
	taskEXIT_CRITICAL();
 800e09a:	f7ff f9c3 	bl	800d424 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e09e:	4620      	mov	r0, r4
 800e0a0:	bd10      	pop	{r4, pc}

0800e0a2 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 800e0a2:	b940      	cbnz	r0, 800e0b6 <uxQueueMessagesWaitingFromISR+0x14>
 800e0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0a8:	f383 8811 	msr	BASEPRI, r3
 800e0ac:	f3bf 8f6f 	isb	sy
 800e0b0:	f3bf 8f4f 	dsb	sy
 800e0b4:	e7fe      	b.n	800e0b4 <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 800e0b6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e0b8:	4770      	bx	lr
	...

0800e0bc <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0bc:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e0be:	4a07      	ldr	r2, [pc, #28]	@ (800e0dc <vQueueAddToRegistry+0x20>)
	{
 800e0c0:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e0c2:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800e0c6:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800e0ca:	b91d      	cbnz	r5, 800e0d4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e0cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e0d0:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e0d2:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	2b08      	cmp	r3, #8
 800e0d8:	d1f3      	bne.n	800e0c2 <vQueueAddToRegistry+0x6>
 800e0da:	e7fa      	b.n	800e0d2 <vQueueAddToRegistry+0x16>
 800e0dc:	24024f58 	.word	0x24024f58

0800e0e0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0e0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e0e2:	4a09      	ldr	r2, [pc, #36]	@ (800e108 <vQueueUnregisterQueue+0x28>)
	{
 800e0e4:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e0e6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800e0ea:	00dc      	lsls	r4, r3, #3
 800e0ec:	4281      	cmp	r1, r0
 800e0ee:	d106      	bne.n	800e0fe <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e0f0:	4a06      	ldr	r2, [pc, #24]	@ (800e10c <vQueueUnregisterQueue+0x2c>)
 800e0f2:	2100      	movs	r1, #0
 800e0f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e0f8:	4422      	add	r2, r4
 800e0fa:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e0fc:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0fe:	3301      	adds	r3, #1
 800e100:	2b08      	cmp	r3, #8
 800e102:	d1f0      	bne.n	800e0e6 <vQueueUnregisterQueue+0x6>
 800e104:	e7fa      	b.n	800e0fc <vQueueUnregisterQueue+0x1c>
 800e106:	bf00      	nop
 800e108:	24024f5c 	.word	0x24024f5c
 800e10c:	24024f58 	.word	0x24024f58

0800e110 <vQueueDelete>:
{
 800e110:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800e112:	b940      	cbnz	r0, 800e126 <vQueueDelete+0x16>
 800e114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e118:	f383 8811 	msr	BASEPRI, r3
 800e11c:	f3bf 8f6f 	isb	sy
 800e120:	f3bf 8f4f 	dsb	sy
 800e124:	e7fe      	b.n	800e124 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800e126:	f7ff ffdb 	bl	800e0e0 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e12a:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800e12e:	b91b      	cbnz	r3, 800e138 <vQueueDelete+0x28>
}
 800e130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800e134:	f7ff b870 	b.w	800d218 <vPortFree>
}
 800e138:	bd10      	pop	{r4, pc}

0800e13a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e13a:	b570      	push	{r4, r5, r6, lr}
 800e13c:	4604      	mov	r4, r0
 800e13e:	460d      	mov	r5, r1
 800e140:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e142:	f7ff f94f 	bl	800d3e4 <vPortEnterCritical>
 800e146:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e14a:	2bff      	cmp	r3, #255	@ 0xff
 800e14c:	d102      	bne.n	800e154 <vQueueWaitForMessageRestricted+0x1a>
 800e14e:	2300      	movs	r3, #0
 800e150:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800e154:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e158:	2bff      	cmp	r3, #255	@ 0xff
 800e15a:	d102      	bne.n	800e162 <vQueueWaitForMessageRestricted+0x28>
 800e15c:	2300      	movs	r3, #0
 800e15e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800e162:	f7ff f95f 	bl	800d424 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e166:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e168:	b92b      	cbnz	r3, 800e176 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e16a:	4632      	mov	r2, r6
 800e16c:	4629      	mov	r1, r5
 800e16e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e172:	f000 fbaf 	bl	800e8d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e176:	4620      	mov	r0, r4
	}
 800e178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800e17c:	f7ff bac5 	b.w	800d70a <prvUnlockQueue>

0800e180 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e184:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e186:	f7ff f92d 	bl	800d3e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e18a:	4b2f      	ldr	r3, [pc, #188]	@ (800e248 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800e18c:	4e2f      	ldr	r6, [pc, #188]	@ (800e24c <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	4f2f      	ldr	r7, [pc, #188]	@ (800e250 <prvAddNewTaskToReadyList+0xd0>)
 800e192:	3201      	adds	r2, #1
 800e194:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800e196:	6835      	ldr	r5, [r6, #0]
 800e198:	2d00      	cmp	r5, #0
 800e19a:	d14a      	bne.n	800e232 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e19c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d11f      	bne.n	800e1e4 <prvAddNewTaskToReadyList+0x64>
 800e1a4:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1a6:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e1a8:	4640      	mov	r0, r8
 800e1aa:	f7ff f873 	bl	800d294 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1ae:	f108 0814 	add.w	r8, r8, #20
 800e1b2:	2d38      	cmp	r5, #56	@ 0x38
 800e1b4:	d1f7      	bne.n	800e1a6 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e1b6:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800e278 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800e1ba:	4d26      	ldr	r5, [pc, #152]	@ (800e254 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800e1bc:	4640      	mov	r0, r8
 800e1be:	f7ff f869 	bl	800d294 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e1c2:	4628      	mov	r0, r5
 800e1c4:	f7ff f866 	bl	800d294 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e1c8:	4823      	ldr	r0, [pc, #140]	@ (800e258 <prvAddNewTaskToReadyList+0xd8>)
 800e1ca:	f7ff f863 	bl	800d294 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e1ce:	4823      	ldr	r0, [pc, #140]	@ (800e25c <prvAddNewTaskToReadyList+0xdc>)
 800e1d0:	f7ff f860 	bl	800d294 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e1d4:	4822      	ldr	r0, [pc, #136]	@ (800e260 <prvAddNewTaskToReadyList+0xe0>)
 800e1d6:	f7ff f85d 	bl	800d294 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e1da:	4b22      	ldr	r3, [pc, #136]	@ (800e264 <prvAddNewTaskToReadyList+0xe4>)
 800e1dc:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e1e0:	4b21      	ldr	r3, [pc, #132]	@ (800e268 <prvAddNewTaskToReadyList+0xe8>)
 800e1e2:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800e1e4:	4a21      	ldr	r2, [pc, #132]	@ (800e26c <prvAddNewTaskToReadyList+0xec>)
 800e1e6:	6813      	ldr	r3, [r2, #0]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800e1ec:	4a20      	ldr	r2, [pc, #128]	@ (800e270 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e1ee:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800e1f0:	6811      	ldr	r1, [r2, #0]
 800e1f2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e1f4:	428b      	cmp	r3, r1
 800e1f6:	d900      	bls.n	800e1fa <prvAddNewTaskToReadyList+0x7a>
 800e1f8:	6013      	str	r3, [r2, #0]
 800e1fa:	2014      	movs	r0, #20
 800e1fc:	1d21      	adds	r1, r4, #4
 800e1fe:	fb00 7003 	mla	r0, r0, r3, r7
 800e202:	f7ff f855 	bl	800d2b0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800e206:	f7ff f90d 	bl	800d424 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800e20a:	4b1a      	ldr	r3, [pc, #104]	@ (800e274 <prvAddNewTaskToReadyList+0xf4>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	b173      	cbz	r3, 800e22e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e210:	6833      	ldr	r3, [r6, #0]
 800e212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e214:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e216:	429a      	cmp	r2, r3
 800e218:	d209      	bcs.n	800e22e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800e21a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e21e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e222:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e226:	f3bf 8f4f 	dsb	sy
 800e22a:	f3bf 8f6f 	isb	sy
}
 800e22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800e232:	4b10      	ldr	r3, [pc, #64]	@ (800e274 <prvAddNewTaskToReadyList+0xf4>)
 800e234:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e236:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800e238:	2a00      	cmp	r2, #0
 800e23a:	d1d3      	bne.n	800e1e4 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e23c:	6832      	ldr	r2, [r6, #0]
 800e23e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e240:	429a      	cmp	r2, r3
 800e242:	d8cf      	bhi.n	800e1e4 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800e244:	6034      	str	r4, [r6, #0]
 800e246:	e7cd      	b.n	800e1e4 <prvAddNewTaskToReadyList+0x64>
 800e248:	24024fbc 	.word	0x24024fbc
 800e24c:	24025490 	.word	0x24025490
 800e250:	24025030 	.word	0x24025030
 800e254:	24025008 	.word	0x24025008
 800e258:	24024fec 	.word	0x24024fec
 800e25c:	24024fd8 	.word	0x24024fd8
 800e260:	24024fc0 	.word	0x24024fc0
 800e264:	24025004 	.word	0x24025004
 800e268:	24025000 	.word	0x24025000
 800e26c:	24024fa0 	.word	0x24024fa0
 800e270:	24024fb4 	.word	0x24024fb4
 800e274:	24024fb0 	.word	0x24024fb0
 800e278:	2402501c 	.word	0x2402501c

0800e27c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e27e:	4b15      	ldr	r3, [pc, #84]	@ (800e2d4 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800e280:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e282:	4d15      	ldr	r5, [pc, #84]	@ (800e2d8 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800e284:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800e286:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e288:	6828      	ldr	r0, [r5, #0]
 800e28a:	3004      	adds	r0, #4
 800e28c:	f7ff f832 	bl	800d2f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e290:	1c73      	adds	r3, r6, #1
 800e292:	d107      	bne.n	800e2a4 <prvAddCurrentTaskToDelayedList+0x28>
 800e294:	b137      	cbz	r7, 800e2a4 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e296:	6829      	ldr	r1, [r5, #0]
 800e298:	4810      	ldr	r0, [pc, #64]	@ (800e2dc <prvAddCurrentTaskToDelayedList+0x60>)
 800e29a:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e29c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2a0:	f7ff b806 	b.w	800d2b0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e2a4:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e2a6:	682b      	ldr	r3, [r5, #0]
 800e2a8:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e2aa:	d307      	bcc.n	800e2bc <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2ac:	4b0c      	ldr	r3, [pc, #48]	@ (800e2e0 <prvAddCurrentTaskToDelayedList+0x64>)
 800e2ae:	6818      	ldr	r0, [r3, #0]
 800e2b0:	6829      	ldr	r1, [r5, #0]
}
 800e2b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2b6:	3104      	adds	r1, #4
 800e2b8:	f7ff b805 	b.w	800d2c6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2bc:	4b09      	ldr	r3, [pc, #36]	@ (800e2e4 <prvAddCurrentTaskToDelayedList+0x68>)
 800e2be:	6818      	ldr	r0, [r3, #0]
 800e2c0:	6829      	ldr	r1, [r5, #0]
 800e2c2:	3104      	adds	r1, #4
 800e2c4:	f7fe ffff 	bl	800d2c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e2c8:	4b07      	ldr	r3, [pc, #28]	@ (800e2e8 <prvAddCurrentTaskToDelayedList+0x6c>)
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	42a2      	cmp	r2, r4
 800e2ce:	d900      	bls.n	800e2d2 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800e2d0:	601c      	str	r4, [r3, #0]
}
 800e2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2d4:	24024fb8 	.word	0x24024fb8
 800e2d8:	24025490 	.word	0x24025490
 800e2dc:	24024fc0 	.word	0x24024fc0
 800e2e0:	24025000 	.word	0x24025000
 800e2e4:	24025004 	.word	0x24025004
 800e2e8:	24024f9c 	.word	0x24024f9c

0800e2ec <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2ec:	4a06      	ldr	r2, [pc, #24]	@ (800e308 <prvResetNextTaskUnblockTime+0x1c>)
 800e2ee:	6813      	ldr	r3, [r2, #0]
 800e2f0:	6819      	ldr	r1, [r3, #0]
 800e2f2:	4b06      	ldr	r3, [pc, #24]	@ (800e30c <prvResetNextTaskUnblockTime+0x20>)
 800e2f4:	b919      	cbnz	r1, 800e2fe <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e2f6:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e2fa:	601a      	str	r2, [r3, #0]
}
 800e2fc:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2fe:	6812      	ldr	r2, [r2, #0]
 800e300:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e302:	68d2      	ldr	r2, [r2, #12]
 800e304:	6852      	ldr	r2, [r2, #4]
 800e306:	e7f8      	b.n	800e2fa <prvResetNextTaskUnblockTime+0xe>
 800e308:	24025004 	.word	0x24025004
 800e30c:	24024f9c 	.word	0x24024f9c

0800e310 <prvDeleteTCB>:
	{
 800e310:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e312:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800e316:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e318:	b93b      	cbnz	r3, 800e32a <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800e31a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800e31c:	f7fe ff7c 	bl	800d218 <vPortFree>
				vPortFree( pxTCB );
 800e320:	4620      	mov	r0, r4
	}
 800e322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800e326:	f7fe bf77 	b.w	800d218 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d0f9      	beq.n	800e322 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e32e:	2b02      	cmp	r3, #2
 800e330:	d008      	beq.n	800e344 <prvDeleteTCB+0x34>
 800e332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e336:	f383 8811 	msr	BASEPRI, r3
 800e33a:	f3bf 8f6f 	isb	sy
 800e33e:	f3bf 8f4f 	dsb	sy
 800e342:	e7fe      	b.n	800e342 <prvDeleteTCB+0x32>
	}
 800e344:	bd10      	pop	{r4, pc}
	...

0800e348 <prvIdleTask>:
{
 800e348:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e34a:	4c14      	ldr	r4, [pc, #80]	@ (800e39c <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e34c:	4f14      	ldr	r7, [pc, #80]	@ (800e3a0 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800e34e:	4d15      	ldr	r5, [pc, #84]	@ (800e3a4 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e350:	6823      	ldr	r3, [r4, #0]
 800e352:	b983      	cbnz	r3, 800e376 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e354:	4b14      	ldr	r3, [pc, #80]	@ (800e3a8 <prvIdleTask+0x60>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d909      	bls.n	800e370 <prvIdleTask+0x28>
				taskYIELD();
 800e35c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e360:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e364:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e368:	f3bf 8f4f 	dsb	sy
 800e36c:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800e370:	f7f2 fb58 	bl	8000a24 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e374:	e7eb      	b.n	800e34e <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800e376:	f7ff f835 	bl	800d3e4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e37e:	1d30      	adds	r0, r6, #4
 800e380:	f7fe ffb8 	bl	800d2f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e384:	682b      	ldr	r3, [r5, #0]
 800e386:	3b01      	subs	r3, #1
 800e388:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e38a:	6823      	ldr	r3, [r4, #0]
 800e38c:	3b01      	subs	r3, #1
 800e38e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800e390:	f7ff f848 	bl	800d424 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800e394:	4630      	mov	r0, r6
 800e396:	f7ff ffbb 	bl	800e310 <prvDeleteTCB>
 800e39a:	e7d9      	b.n	800e350 <prvIdleTask+0x8>
 800e39c:	24024fd4 	.word	0x24024fd4
 800e3a0:	24024fd8 	.word	0x24024fd8
 800e3a4:	24024fbc 	.word	0x24024fbc
 800e3a8:	24025030 	.word	0x24025030

0800e3ac <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e3b0:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e3b2:	4607      	mov	r7, r0
 800e3b4:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e3b6:	21a5      	movs	r1, #165	@ 0xa5
 800e3b8:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e3ba:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e3bc:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e3be:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e3c2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e3c4:	f015 fc0c 	bl	8023be0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e3c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e3ca:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e3cc:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800e3d0:	b3b5      	cbz	r5, 800e440 <prvInitialiseNewTask.constprop.0+0x94>
 800e3d2:	1e6b      	subs	r3, r5, #1
 800e3d4:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800e3d8:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e3da:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e3de:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800e3e2:	b109      	cbz	r1, 800e3e8 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e3e4:	42ab      	cmp	r3, r5
 800e3e6:	d1f8      	bne.n	800e3da <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e3ee:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800e3f0:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e3f4:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e3f6:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800e3f8:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e3fc:	bf28      	it	cs
 800e3fe:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800e400:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800e402:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e404:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e408:	f7fe ff4f 	bl	800d2aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e40c:	f104 0018 	add.w	r0, r4, #24
 800e410:	f7fe ff4b 	bl	800d2aa <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800e414:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e418:	4642      	mov	r2, r8
 800e41a:	4639      	mov	r1, r7
 800e41c:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e41e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e420:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e422:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800e424:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e428:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e42c:	f7fe ffb0 	bl	800d390 <pxPortInitialiseStack>
 800e430:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800e432:	f1b9 0f00 	cmp.w	r9, #0
 800e436:	d001      	beq.n	800e43c <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e438:	f8c9 4000 	str.w	r4, [r9]
}
 800e43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e440:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800e444:	e7d3      	b.n	800e3ee <prvInitialiseNewTask.constprop.0+0x42>

0800e446 <xTaskCreateStatic>:
	{
 800e446:	b570      	push	{r4, r5, r6, lr}
 800e448:	b086      	sub	sp, #24
 800e44a:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800e44e:	b945      	cbnz	r5, 800e462 <xTaskCreateStatic+0x1c>
 800e450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e454:	f383 8811 	msr	BASEPRI, r3
 800e458:	f3bf 8f6f 	isb	sy
 800e45c:	f3bf 8f4f 	dsb	sy
 800e460:	e7fe      	b.n	800e460 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800e462:	b944      	cbnz	r4, 800e476 <xTaskCreateStatic+0x30>
 800e464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e468:	f383 8811 	msr	BASEPRI, r3
 800e46c:	f3bf 8f6f 	isb	sy
 800e470:	f3bf 8f4f 	dsb	sy
 800e474:	e7fe      	b.n	800e474 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800e476:	2660      	movs	r6, #96	@ 0x60
 800e478:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e47a:	9e05      	ldr	r6, [sp, #20]
 800e47c:	2e60      	cmp	r6, #96	@ 0x60
 800e47e:	d008      	beq.n	800e492 <xTaskCreateStatic+0x4c>
 800e480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e484:	f383 8811 	msr	BASEPRI, r3
 800e488:	f3bf 8f6f 	isb	sy
 800e48c:	f3bf 8f4f 	dsb	sy
 800e490:	e7fe      	b.n	800e490 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e492:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e494:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e496:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e498:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e49c:	ad04      	add	r5, sp, #16
 800e49e:	9402      	str	r4, [sp, #8]
 800e4a0:	9501      	str	r5, [sp, #4]
 800e4a2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800e4a4:	9500      	str	r5, [sp, #0]
 800e4a6:	f7ff ff81 	bl	800e3ac <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	f7ff fe68 	bl	800e180 <prvAddNewTaskToReadyList>
	}
 800e4b0:	9804      	ldr	r0, [sp, #16]
 800e4b2:	b006      	add	sp, #24
 800e4b4:	bd70      	pop	{r4, r5, r6, pc}

0800e4b6 <xTaskCreate>:
	{
 800e4b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4ba:	4607      	mov	r7, r0
 800e4bc:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e4be:	0090      	lsls	r0, r2, #2
	{
 800e4c0:	4688      	mov	r8, r1
 800e4c2:	4616      	mov	r6, r2
 800e4c4:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e4c6:	f7fe fe0f 	bl	800d0e8 <pvPortMalloc>
			if( pxStack != NULL )
 800e4ca:	4605      	mov	r5, r0
 800e4cc:	b920      	cbnz	r0, 800e4d8 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e4ce:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800e4d2:	b005      	add	sp, #20
 800e4d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e4d8:	2060      	movs	r0, #96	@ 0x60
 800e4da:	f7fe fe05 	bl	800d0e8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800e4de:	4604      	mov	r4, r0
 800e4e0:	b198      	cbz	r0, 800e50a <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e4e2:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800e4e4:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e4e6:	4632      	mov	r2, r6
 800e4e8:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e4ea:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e4ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4f0:	9002      	str	r0, [sp, #8]
 800e4f2:	4638      	mov	r0, r7
 800e4f4:	9301      	str	r3, [sp, #4]
 800e4f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4f8:	9300      	str	r3, [sp, #0]
 800e4fa:	464b      	mov	r3, r9
 800e4fc:	f7ff ff56 	bl	800e3ac <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e500:	4620      	mov	r0, r4
 800e502:	f7ff fe3d 	bl	800e180 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e506:	2001      	movs	r0, #1
 800e508:	e7e3      	b.n	800e4d2 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800e50a:	4628      	mov	r0, r5
 800e50c:	f7fe fe84 	bl	800d218 <vPortFree>
		if( pxNewTCB != NULL )
 800e510:	e7dd      	b.n	800e4ce <xTaskCreate+0x18>
	...

0800e514 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e514:	4a02      	ldr	r2, [pc, #8]	@ (800e520 <vTaskSuspendAll+0xc>)
 800e516:	6813      	ldr	r3, [r2, #0]
 800e518:	3301      	adds	r3, #1
 800e51a:	6013      	str	r3, [r2, #0]
}
 800e51c:	4770      	bx	lr
 800e51e:	bf00      	nop
 800e520:	24024f98 	.word	0x24024f98

0800e524 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e524:	4b01      	ldr	r3, [pc, #4]	@ (800e52c <xTaskGetTickCount+0x8>)
 800e526:	6818      	ldr	r0, [r3, #0]
}
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop
 800e52c:	24024fb8 	.word	0x24024fb8

0800e530 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e530:	4b3f      	ldr	r3, [pc, #252]	@ (800e630 <xTaskIncrementTick+0x100>)
 800e532:	681b      	ldr	r3, [r3, #0]
{
 800e534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d172      	bne.n	800e622 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e53c:	4b3d      	ldr	r3, [pc, #244]	@ (800e634 <xTaskIncrementTick+0x104>)
 800e53e:	681c      	ldr	r4, [r3, #0]
 800e540:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800e542:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e544:	b9bc      	cbnz	r4, 800e576 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800e546:	4b3c      	ldr	r3, [pc, #240]	@ (800e638 <xTaskIncrementTick+0x108>)
 800e548:	681a      	ldr	r2, [r3, #0]
 800e54a:	6812      	ldr	r2, [r2, #0]
 800e54c:	b142      	cbz	r2, 800e560 <xTaskIncrementTick+0x30>
 800e54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e552:	f383 8811 	msr	BASEPRI, r3
 800e556:	f3bf 8f6f 	isb	sy
 800e55a:	f3bf 8f4f 	dsb	sy
 800e55e:	e7fe      	b.n	800e55e <xTaskIncrementTick+0x2e>
 800e560:	4a36      	ldr	r2, [pc, #216]	@ (800e63c <xTaskIncrementTick+0x10c>)
 800e562:	6819      	ldr	r1, [r3, #0]
 800e564:	6810      	ldr	r0, [r2, #0]
 800e566:	6018      	str	r0, [r3, #0]
 800e568:	6011      	str	r1, [r2, #0]
 800e56a:	4a35      	ldr	r2, [pc, #212]	@ (800e640 <xTaskIncrementTick+0x110>)
 800e56c:	6813      	ldr	r3, [r2, #0]
 800e56e:	3301      	adds	r3, #1
 800e570:	6013      	str	r3, [r2, #0]
 800e572:	f7ff febb 	bl	800e2ec <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e576:	4d33      	ldr	r5, [pc, #204]	@ (800e644 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800e578:	f04f 0b00 	mov.w	fp, #0
 800e57c:	4e32      	ldr	r6, [pc, #200]	@ (800e648 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e57e:	682b      	ldr	r3, [r5, #0]
 800e580:	4f32      	ldr	r7, [pc, #200]	@ (800e64c <xTaskIncrementTick+0x11c>)
 800e582:	429c      	cmp	r4, r3
 800e584:	d212      	bcs.n	800e5ac <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e586:	683a      	ldr	r2, [r7, #0]
 800e588:	2114      	movs	r1, #20
 800e58a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e58c:	434a      	muls	r2, r1
 800e58e:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800e590:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800e592:	4a2f      	ldr	r2, [pc, #188]	@ (800e650 <xTaskIncrementTick+0x120>)
 800e594:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800e596:	bf28      	it	cs
 800e598:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800e59c:	2a00      	cmp	r2, #0
 800e59e:	bf18      	it	ne
 800e5a0:	f04f 0b01 	movne.w	fp, #1
}
 800e5a4:	4658      	mov	r0, fp
 800e5a6:	b003      	add	sp, #12
 800e5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5ac:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800e638 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800e5b0:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800e658 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5b4:	f8d9 2000 	ldr.w	r2, [r9]
 800e5b8:	6812      	ldr	r2, [r2, #0]
 800e5ba:	b91a      	cbnz	r2, 800e5c4 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e5c0:	602a      	str	r2, [r5, #0]
					break;
 800e5c2:	e7e0      	b.n	800e586 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5c4:	f8d9 2000 	ldr.w	r2, [r9]
 800e5c8:	68d2      	ldr	r2, [r2, #12]
 800e5ca:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e5ce:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800e5d2:	428c      	cmp	r4, r1
 800e5d4:	d201      	bcs.n	800e5da <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800e5d6:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e5d8:	e7d5      	b.n	800e586 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5da:	f108 0304 	add.w	r3, r8, #4
 800e5de:	4618      	mov	r0, r3
 800e5e0:	9301      	str	r3, [sp, #4]
 800e5e2:	f7fe fe87 	bl	800d2f4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e5e6:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800e5ea:	b119      	cbz	r1, 800e5f4 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5ec:	f108 0018 	add.w	r0, r8, #24
 800e5f0:	f7fe fe80 	bl	800d2f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e5f4:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800e5f8:	f8da 1000 	ldr.w	r1, [sl]
 800e5fc:	4288      	cmp	r0, r1
 800e5fe:	d901      	bls.n	800e604 <xTaskIncrementTick+0xd4>
 800e600:	f8ca 0000 	str.w	r0, [sl]
 800e604:	2314      	movs	r3, #20
 800e606:	9901      	ldr	r1, [sp, #4]
 800e608:	fb03 6000 	mla	r0, r3, r0, r6
 800e60c:	f7fe fe50 	bl	800d2b0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e610:	6838      	ldr	r0, [r7, #0]
 800e612:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800e616:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800e618:	4291      	cmp	r1, r2
 800e61a:	bf28      	it	cs
 800e61c:	f04f 0b01 	movcs.w	fp, #1
 800e620:	e7c8      	b.n	800e5b4 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800e622:	4a0c      	ldr	r2, [pc, #48]	@ (800e654 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800e624:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800e628:	6813      	ldr	r3, [r2, #0]
 800e62a:	3301      	adds	r3, #1
 800e62c:	6013      	str	r3, [r2, #0]
 800e62e:	e7b9      	b.n	800e5a4 <xTaskIncrementTick+0x74>
 800e630:	24024f98 	.word	0x24024f98
 800e634:	24024fb8 	.word	0x24024fb8
 800e638:	24025004 	.word	0x24025004
 800e63c:	24025000 	.word	0x24025000
 800e640:	24024fa4 	.word	0x24024fa4
 800e644:	24024f9c 	.word	0x24024f9c
 800e648:	24025030 	.word	0x24025030
 800e64c:	24025490 	.word	0x24025490
 800e650:	24024fa8 	.word	0x24024fa8
 800e654:	24024fac 	.word	0x24024fac
 800e658:	24024fb4 	.word	0x24024fb4

0800e65c <xTaskResumeAll>:
{
 800e65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800e660:	4c30      	ldr	r4, [pc, #192]	@ (800e724 <xTaskResumeAll+0xc8>)
 800e662:	6823      	ldr	r3, [r4, #0]
 800e664:	b943      	cbnz	r3, 800e678 <xTaskResumeAll+0x1c>
 800e666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e66a:	f383 8811 	msr	BASEPRI, r3
 800e66e:	f3bf 8f6f 	isb	sy
 800e672:	f3bf 8f4f 	dsb	sy
 800e676:	e7fe      	b.n	800e676 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800e678:	f7fe feb4 	bl	800d3e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e67c:	6823      	ldr	r3, [r4, #0]
 800e67e:	3b01      	subs	r3, #1
 800e680:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e682:	6824      	ldr	r4, [r4, #0]
 800e684:	b12c      	cbz	r4, 800e692 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800e686:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e688:	f7fe fecc 	bl	800d424 <vPortExitCritical>
}
 800e68c:	4620      	mov	r0, r4
 800e68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e692:	4b25      	ldr	r3, [pc, #148]	@ (800e728 <xTaskResumeAll+0xcc>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d0f5      	beq.n	800e686 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e69a:	4d24      	ldr	r5, [pc, #144]	@ (800e72c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800e69c:	4e24      	ldr	r6, [pc, #144]	@ (800e730 <xTaskResumeAll+0xd4>)
 800e69e:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800e740 <xTaskResumeAll+0xe4>
 800e6a2:	e01d      	b.n	800e6e0 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6a4:	68eb      	ldr	r3, [r5, #12]
 800e6a6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6a8:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6aa:	f104 0018 	add.w	r0, r4, #24
 800e6ae:	f7fe fe21 	bl	800d2f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6b2:	4638      	mov	r0, r7
 800e6b4:	f7fe fe1e 	bl	800d2f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e6ba:	6832      	ldr	r2, [r6, #0]
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d900      	bls.n	800e6c2 <xTaskResumeAll+0x66>
 800e6c0:	6033      	str	r3, [r6, #0]
 800e6c2:	2014      	movs	r0, #20
 800e6c4:	4639      	mov	r1, r7
 800e6c6:	fb00 8003 	mla	r0, r0, r3, r8
 800e6ca:	f7fe fdf1 	bl	800d2b0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6ce:	4b19      	ldr	r3, [pc, #100]	@ (800e734 <xTaskResumeAll+0xd8>)
 800e6d0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d302      	bcc.n	800e6e0 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800e6da:	4b17      	ldr	r3, [pc, #92]	@ (800e738 <xTaskResumeAll+0xdc>)
 800e6dc:	2201      	movs	r2, #1
 800e6de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6e0:	682b      	ldr	r3, [r5, #0]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d1de      	bne.n	800e6a4 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800e6e6:	b10c      	cbz	r4, 800e6ec <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800e6e8:	f7ff fe00 	bl	800e2ec <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e6ec:	4d13      	ldr	r5, [pc, #76]	@ (800e73c <xTaskResumeAll+0xe0>)
 800e6ee:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800e6f0:	b144      	cbz	r4, 800e704 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800e6f2:	4e11      	ldr	r6, [pc, #68]	@ (800e738 <xTaskResumeAll+0xdc>)
 800e6f4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800e6f6:	f7ff ff1b 	bl	800e530 <xTaskIncrementTick>
 800e6fa:	b100      	cbz	r0, 800e6fe <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800e6fc:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e6fe:	3c01      	subs	r4, #1
 800e700:	d1f9      	bne.n	800e6f6 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800e702:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800e704:	4b0c      	ldr	r3, [pc, #48]	@ (800e738 <xTaskResumeAll+0xdc>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d0bc      	beq.n	800e686 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800e70c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e710:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e714:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e718:	f3bf 8f4f 	dsb	sy
 800e71c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e720:	2401      	movs	r4, #1
 800e722:	e7b1      	b.n	800e688 <xTaskResumeAll+0x2c>
 800e724:	24024f98 	.word	0x24024f98
 800e728:	24024fbc 	.word	0x24024fbc
 800e72c:	24024fec 	.word	0x24024fec
 800e730:	24024fb4 	.word	0x24024fb4
 800e734:	24025490 	.word	0x24025490
 800e738:	24024fa8 	.word	0x24024fa8
 800e73c:	24024fac 	.word	0x24024fac
 800e740:	24025030 	.word	0x24025030

0800e744 <vTaskSetApplicationTaskTag>:
	{
 800e744:	b538      	push	{r3, r4, r5, lr}
 800e746:	460d      	mov	r5, r1
		if( xTask == NULL )
 800e748:	4604      	mov	r4, r0
 800e74a:	b908      	cbnz	r0, 800e750 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800e74c:	4b04      	ldr	r3, [pc, #16]	@ (800e760 <vTaskSetApplicationTaskTag+0x1c>)
 800e74e:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800e750:	f7fe fe48 	bl	800d3e4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800e754:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800e756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800e75a:	f7fe be63 	b.w	800d424 <vPortExitCritical>
 800e75e:	bf00      	nop
 800e760:	24025490 	.word	0x24025490

0800e764 <xTaskCallApplicationTaskHook>:
	{
 800e764:	4603      	mov	r3, r0
 800e766:	4608      	mov	r0, r1
		if( xTask == NULL )
 800e768:	b90b      	cbnz	r3, 800e76e <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800e76a:	4b03      	ldr	r3, [pc, #12]	@ (800e778 <xTaskCallApplicationTaskHook+0x14>)
 800e76c:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800e76e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e770:	b103      	cbz	r3, 800e774 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800e772:	4718      	bx	r3
	}
 800e774:	4618      	mov	r0, r3
 800e776:	4770      	bx	lr
 800e778:	24025490 	.word	0x24025490

0800e77c <vTaskStartScheduler>:
{
 800e77c:	b510      	push	{r4, lr}
 800e77e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e780:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e782:	aa07      	add	r2, sp, #28
 800e784:	a906      	add	r1, sp, #24
 800e786:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e788:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e78c:	f7fe fc6e 	bl	800d06c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e790:	9b05      	ldr	r3, [sp, #20]
 800e792:	9a07      	ldr	r2, [sp, #28]
 800e794:	9302      	str	r3, [sp, #8]
 800e796:	9b06      	ldr	r3, [sp, #24]
 800e798:	4919      	ldr	r1, [pc, #100]	@ (800e800 <vTaskStartScheduler+0x84>)
 800e79a:	481a      	ldr	r0, [pc, #104]	@ (800e804 <vTaskStartScheduler+0x88>)
 800e79c:	e9cd 4300 	strd	r4, r3, [sp]
 800e7a0:	4623      	mov	r3, r4
 800e7a2:	f7ff fe50 	bl	800e446 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800e7a6:	b340      	cbz	r0, 800e7fa <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800e7a8:	f000 fa84 	bl	800ecb4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e7ac:	2801      	cmp	r0, #1
 800e7ae:	d119      	bne.n	800e7e4 <vTaskStartScheduler+0x68>
 800e7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b4:	f383 8811 	msr	BASEPRI, r3
 800e7b8:	f3bf 8f6f 	isb	sy
 800e7bc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800e7c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e7c4:	4b10      	ldr	r3, [pc, #64]	@ (800e808 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800e7c6:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800e7c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e7ca:	4b10      	ldr	r3, [pc, #64]	@ (800e80c <vTaskStartScheduler+0x90>)
 800e7cc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e7ce:	4b10      	ldr	r3, [pc, #64]	@ (800e810 <vTaskStartScheduler+0x94>)
 800e7d0:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800e7d2:	4b10      	ldr	r3, [pc, #64]	@ (800e814 <vTaskStartScheduler+0x98>)
 800e7d4:	6818      	ldr	r0, [r3, #0]
 800e7d6:	f7ff ffc5 	bl	800e764 <xTaskCallApplicationTaskHook>
}
 800e7da:	b008      	add	sp, #32
 800e7dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800e7e0:	f7fe be90 	b.w	800d504 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e7e4:	3001      	adds	r0, #1
 800e7e6:	d108      	bne.n	800e7fa <vTaskStartScheduler+0x7e>
 800e7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7ec:	f383 8811 	msr	BASEPRI, r3
 800e7f0:	f3bf 8f6f 	isb	sy
 800e7f4:	f3bf 8f4f 	dsb	sy
 800e7f8:	e7fe      	b.n	800e7f8 <vTaskStartScheduler+0x7c>
}
 800e7fa:	b008      	add	sp, #32
 800e7fc:	bd10      	pop	{r4, pc}
 800e7fe:	bf00      	nop
 800e800:	080265c9 	.word	0x080265c9
 800e804:	0800e349 	.word	0x0800e349
 800e808:	24024f9c 	.word	0x24024f9c
 800e80c:	24024fb0 	.word	0x24024fb0
 800e810:	24024fb8 	.word	0x24024fb8
 800e814:	24025490 	.word	0x24025490

0800e818 <vTaskSwitchContext>:
{
 800e818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e81a:	4b1c      	ldr	r3, [pc, #112]	@ (800e88c <vTaskSwitchContext+0x74>)
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	4b1c      	ldr	r3, [pc, #112]	@ (800e890 <vTaskSwitchContext+0x78>)
 800e820:	b112      	cbz	r2, 800e828 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800e822:	2201      	movs	r2, #1
 800e824:	601a      	str	r2, [r3, #0]
}
 800e826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800e828:	4c1a      	ldr	r4, [pc, #104]	@ (800e894 <vTaskSwitchContext+0x7c>)
 800e82a:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e82c:	4e1a      	ldr	r6, [pc, #104]	@ (800e898 <vTaskSwitchContext+0x80>)
 800e82e:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800e830:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800e832:	6820      	ldr	r0, [r4, #0]
 800e834:	f7ff ff96 	bl	800e764 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e838:	6832      	ldr	r2, [r6, #0]
 800e83a:	4918      	ldr	r1, [pc, #96]	@ (800e89c <vTaskSwitchContext+0x84>)
 800e83c:	fb07 f302 	mul.w	r3, r7, r2
 800e840:	58cd      	ldr	r5, [r1, r3]
 800e842:	18c8      	adds	r0, r1, r3
 800e844:	b1ad      	cbz	r5, 800e872 <vTaskSwitchContext+0x5a>
 800e846:	6845      	ldr	r5, [r0, #4]
 800e848:	3308      	adds	r3, #8
 800e84a:	686d      	ldr	r5, [r5, #4]
 800e84c:	440b      	add	r3, r1
 800e84e:	429d      	cmp	r5, r3
 800e850:	6045      	str	r5, [r0, #4]
 800e852:	bf04      	itt	eq
 800e854:	686b      	ldreq	r3, [r5, #4]
 800e856:	6043      	streq	r3, [r0, #4]
 800e858:	2314      	movs	r3, #20
 800e85a:	fb03 1102 	mla	r1, r3, r2, r1
 800e85e:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800e860:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e862:	68db      	ldr	r3, [r3, #12]
 800e864:	6023      	str	r3, [r4, #0]
 800e866:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800e868:	6820      	ldr	r0, [r4, #0]
}
 800e86a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800e86e:	f7ff bf79 	b.w	800e764 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e872:	b942      	cbnz	r2, 800e886 <vTaskSwitchContext+0x6e>
 800e874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e878:	f383 8811 	msr	BASEPRI, r3
 800e87c:	f3bf 8f6f 	isb	sy
 800e880:	f3bf 8f4f 	dsb	sy
 800e884:	e7fe      	b.n	800e884 <vTaskSwitchContext+0x6c>
 800e886:	3a01      	subs	r2, #1
 800e888:	e7d8      	b.n	800e83c <vTaskSwitchContext+0x24>
 800e88a:	bf00      	nop
 800e88c:	24024f98 	.word	0x24024f98
 800e890:	24024fa8 	.word	0x24024fa8
 800e894:	24025490 	.word	0x24025490
 800e898:	24024fb4 	.word	0x24024fb4
 800e89c:	24025030 	.word	0x24025030

0800e8a0 <vTaskPlaceOnEventList>:
{
 800e8a0:	b510      	push	{r4, lr}
 800e8a2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800e8a4:	b940      	cbnz	r0, 800e8b8 <vTaskPlaceOnEventList+0x18>
 800e8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8aa:	f383 8811 	msr	BASEPRI, r3
 800e8ae:	f3bf 8f6f 	isb	sy
 800e8b2:	f3bf 8f4f 	dsb	sy
 800e8b6:	e7fe      	b.n	800e8b6 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8b8:	4b05      	ldr	r3, [pc, #20]	@ (800e8d0 <vTaskPlaceOnEventList+0x30>)
 800e8ba:	6819      	ldr	r1, [r3, #0]
 800e8bc:	3118      	adds	r1, #24
 800e8be:	f7fe fd02 	bl	800d2c6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	2101      	movs	r1, #1
}
 800e8c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e8ca:	f7ff bcd7 	b.w	800e27c <prvAddCurrentTaskToDelayedList>
 800e8ce:	bf00      	nop
 800e8d0:	24025490 	.word	0x24025490

0800e8d4 <vTaskPlaceOnEventListRestricted>:
	{
 800e8d4:	b538      	push	{r3, r4, r5, lr}
 800e8d6:	460d      	mov	r5, r1
 800e8d8:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800e8da:	b940      	cbnz	r0, 800e8ee <vTaskPlaceOnEventListRestricted+0x1a>
 800e8dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8e0:	f383 8811 	msr	BASEPRI, r3
 800e8e4:	f3bf 8f6f 	isb	sy
 800e8e8:	f3bf 8f4f 	dsb	sy
 800e8ec:	e7fe      	b.n	800e8ec <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8ee:	4b07      	ldr	r3, [pc, #28]	@ (800e90c <vTaskPlaceOnEventListRestricted+0x38>)
 800e8f0:	6819      	ldr	r1, [r3, #0]
 800e8f2:	3118      	adds	r1, #24
 800e8f4:	f7fe fcdc 	bl	800d2b0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800e8f8:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e8fa:	4621      	mov	r1, r4
 800e8fc:	bf0c      	ite	eq
 800e8fe:	4628      	moveq	r0, r5
 800e900:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800e904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e908:	f7ff bcb8 	b.w	800e27c <prvAddCurrentTaskToDelayedList>
 800e90c:	24025490 	.word	0x24025490

0800e910 <xTaskRemoveFromEventList>:
{
 800e910:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e912:	68c3      	ldr	r3, [r0, #12]
 800e914:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e916:	b944      	cbnz	r4, 800e92a <xTaskRemoveFromEventList+0x1a>
 800e918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e91c:	f383 8811 	msr	BASEPRI, r3
 800e920:	f3bf 8f6f 	isb	sy
 800e924:	f3bf 8f4f 	dsb	sy
 800e928:	e7fe      	b.n	800e928 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e92a:	f104 0518 	add.w	r5, r4, #24
 800e92e:	4628      	mov	r0, r5
 800e930:	f7fe fce0 	bl	800d2f4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e934:	4b11      	ldr	r3, [pc, #68]	@ (800e97c <xTaskRemoveFromEventList+0x6c>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	b9d3      	cbnz	r3, 800e970 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e93a:	1d25      	adds	r5, r4, #4
 800e93c:	4628      	mov	r0, r5
 800e93e:	f7fe fcd9 	bl	800d2f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e942:	4a0f      	ldr	r2, [pc, #60]	@ (800e980 <xTaskRemoveFromEventList+0x70>)
 800e944:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e946:	6811      	ldr	r1, [r2, #0]
 800e948:	428b      	cmp	r3, r1
 800e94a:	d900      	bls.n	800e94e <xTaskRemoveFromEventList+0x3e>
 800e94c:	6013      	str	r3, [r2, #0]
 800e94e:	2014      	movs	r0, #20
 800e950:	4a0c      	ldr	r2, [pc, #48]	@ (800e984 <xTaskRemoveFromEventList+0x74>)
 800e952:	4629      	mov	r1, r5
 800e954:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e958:	f7fe fcaa 	bl	800d2b0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e95c:	4b0a      	ldr	r3, [pc, #40]	@ (800e988 <xTaskRemoveFromEventList+0x78>)
 800e95e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e964:	429a      	cmp	r2, r3
 800e966:	d906      	bls.n	800e976 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800e968:	2001      	movs	r0, #1
 800e96a:	4b08      	ldr	r3, [pc, #32]	@ (800e98c <xTaskRemoveFromEventList+0x7c>)
 800e96c:	6018      	str	r0, [r3, #0]
}
 800e96e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e970:	4629      	mov	r1, r5
 800e972:	4807      	ldr	r0, [pc, #28]	@ (800e990 <xTaskRemoveFromEventList+0x80>)
 800e974:	e7f0      	b.n	800e958 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800e976:	2000      	movs	r0, #0
	return xReturn;
 800e978:	e7f9      	b.n	800e96e <xTaskRemoveFromEventList+0x5e>
 800e97a:	bf00      	nop
 800e97c:	24024f98 	.word	0x24024f98
 800e980:	24024fb4 	.word	0x24024fb4
 800e984:	24025030 	.word	0x24025030
 800e988:	24025490 	.word	0x24025490
 800e98c:	24024fa8 	.word	0x24024fa8
 800e990:	24024fec 	.word	0x24024fec

0800e994 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e994:	4b03      	ldr	r3, [pc, #12]	@ (800e9a4 <vTaskInternalSetTimeOutState+0x10>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e99a:	4b03      	ldr	r3, [pc, #12]	@ (800e9a8 <vTaskInternalSetTimeOutState+0x14>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	6043      	str	r3, [r0, #4]
}
 800e9a0:	4770      	bx	lr
 800e9a2:	bf00      	nop
 800e9a4:	24024fa4 	.word	0x24024fa4
 800e9a8:	24024fb8 	.word	0x24024fb8

0800e9ac <xTaskCheckForTimeOut>:
{
 800e9ac:	b570      	push	{r4, r5, r6, lr}
 800e9ae:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800e9b0:	4605      	mov	r5, r0
 800e9b2:	b940      	cbnz	r0, 800e9c6 <xTaskCheckForTimeOut+0x1a>
 800e9b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9b8:	f383 8811 	msr	BASEPRI, r3
 800e9bc:	f3bf 8f6f 	isb	sy
 800e9c0:	f3bf 8f4f 	dsb	sy
 800e9c4:	e7fe      	b.n	800e9c4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800e9c6:	b941      	cbnz	r1, 800e9da <xTaskCheckForTimeOut+0x2e>
 800e9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9cc:	f383 8811 	msr	BASEPRI, r3
 800e9d0:	f3bf 8f6f 	isb	sy
 800e9d4:	f3bf 8f4f 	dsb	sy
 800e9d8:	e7fe      	b.n	800e9d8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800e9da:	f7fe fd03 	bl	800d3e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e9de:	4b0f      	ldr	r3, [pc, #60]	@ (800ea1c <xTaskCheckForTimeOut+0x70>)
 800e9e0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800e9e2:	6823      	ldr	r3, [r4, #0]
 800e9e4:	1c5a      	adds	r2, r3, #1
 800e9e6:	d010      	beq.n	800ea0a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e9e8:	480d      	ldr	r0, [pc, #52]	@ (800ea20 <xTaskCheckForTimeOut+0x74>)
 800e9ea:	682e      	ldr	r6, [r5, #0]
 800e9ec:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e9ee:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e9f0:	4286      	cmp	r6, r0
 800e9f2:	d001      	beq.n	800e9f8 <xTaskCheckForTimeOut+0x4c>
 800e9f4:	428a      	cmp	r2, r1
 800e9f6:	d90f      	bls.n	800ea18 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e9f8:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e9fa:	4283      	cmp	r3, r0
 800e9fc:	d90a      	bls.n	800ea14 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800e9fe:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea00:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800ea02:	4413      	add	r3, r2
 800ea04:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea06:	f7ff ffc5 	bl	800e994 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800ea0a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ea0c:	f7fe fd0a 	bl	800d424 <vPortExitCritical>
}
 800ea10:	4620      	mov	r0, r4
 800ea12:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800ea14:	2300      	movs	r3, #0
 800ea16:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800ea18:	2401      	movs	r4, #1
 800ea1a:	e7f7      	b.n	800ea0c <xTaskCheckForTimeOut+0x60>
 800ea1c:	24024fb8 	.word	0x24024fb8
 800ea20:	24024fa4 	.word	0x24024fa4

0800ea24 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ea24:	4b01      	ldr	r3, [pc, #4]	@ (800ea2c <vTaskMissedYield+0x8>)
 800ea26:	2201      	movs	r2, #1
 800ea28:	601a      	str	r2, [r3, #0]
}
 800ea2a:	4770      	bx	lr
 800ea2c:	24024fa8 	.word	0x24024fa8

0800ea30 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800ea30:	4b01      	ldr	r3, [pc, #4]	@ (800ea38 <xTaskGetCurrentTaskHandle+0x8>)
 800ea32:	6818      	ldr	r0, [r3, #0]
	}
 800ea34:	4770      	bx	lr
 800ea36:	bf00      	nop
 800ea38:	24025490 	.word	0x24025490

0800ea3c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ea3c:	4b05      	ldr	r3, [pc, #20]	@ (800ea54 <xTaskGetSchedulerState+0x18>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	b133      	cbz	r3, 800ea50 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea42:	4b05      	ldr	r3, [pc, #20]	@ (800ea58 <xTaskGetSchedulerState+0x1c>)
 800ea44:	6818      	ldr	r0, [r3, #0]
 800ea46:	fab0 f080 	clz	r0, r0
 800ea4a:	0940      	lsrs	r0, r0, #5
 800ea4c:	0040      	lsls	r0, r0, #1
 800ea4e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea50:	2001      	movs	r0, #1
	}
 800ea52:	4770      	bx	lr
 800ea54:	24024fb0 	.word	0x24024fb0
 800ea58:	24024f98 	.word	0x24024f98

0800ea5c <xTaskPriorityInherit>:
	{
 800ea5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800ea5e:	4604      	mov	r4, r0
 800ea60:	b338      	cbz	r0, 800eab2 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ea62:	4d1a      	ldr	r5, [pc, #104]	@ (800eacc <xTaskPriorityInherit+0x70>)
 800ea64:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800ea66:	682a      	ldr	r2, [r5, #0]
 800ea68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d226      	bcs.n	800eabc <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea6e:	6982      	ldr	r2, [r0, #24]
 800ea70:	2a00      	cmp	r2, #0
 800ea72:	db04      	blt.n	800ea7e <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea74:	682a      	ldr	r2, [r5, #0]
 800ea76:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ea78:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800ea7c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ea7e:	2214      	movs	r2, #20
 800ea80:	4e13      	ldr	r6, [pc, #76]	@ (800ead0 <xTaskPriorityInherit+0x74>)
 800ea82:	fb02 6303 	mla	r3, r2, r3, r6
 800ea86:	6962      	ldr	r2, [r4, #20]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d113      	bne.n	800eab4 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea8c:	1d27      	adds	r7, r4, #4
 800ea8e:	4638      	mov	r0, r7
 800ea90:	f7fe fc30 	bl	800d2f4 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ea94:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ea96:	4a0f      	ldr	r2, [pc, #60]	@ (800ead4 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ea98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ea9a:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ea9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ea9e:	428b      	cmp	r3, r1
 800eaa0:	d900      	bls.n	800eaa4 <xTaskPriorityInherit+0x48>
 800eaa2:	6013      	str	r3, [r2, #0]
 800eaa4:	2014      	movs	r0, #20
 800eaa6:	4639      	mov	r1, r7
 800eaa8:	fb00 6003 	mla	r0, r0, r3, r6
 800eaac:	f7fe fc00 	bl	800d2b0 <vListInsertEnd>
				xReturn = pdTRUE;
 800eab0:	2001      	movs	r0, #1
	}
 800eab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eab4:	682b      	ldr	r3, [r5, #0]
 800eab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eab8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800eaba:	e7f9      	b.n	800eab0 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eabc:	682b      	ldr	r3, [r5, #0]
 800eabe:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800eac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eac2:	4298      	cmp	r0, r3
 800eac4:	bf2c      	ite	cs
 800eac6:	2000      	movcs	r0, #0
 800eac8:	2001      	movcc	r0, #1
 800eaca:	e7f2      	b.n	800eab2 <xTaskPriorityInherit+0x56>
 800eacc:	24025490 	.word	0x24025490
 800ead0:	24025030 	.word	0x24025030
 800ead4:	24024fb4 	.word	0x24024fb4

0800ead8 <xTaskPriorityDisinherit>:
	{
 800ead8:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800eada:	b908      	cbnz	r0, 800eae0 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800eadc:	2000      	movs	r0, #0
	}
 800eade:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800eae0:	4b1b      	ldr	r3, [pc, #108]	@ (800eb50 <xTaskPriorityDisinherit+0x78>)
 800eae2:	681c      	ldr	r4, [r3, #0]
 800eae4:	4284      	cmp	r4, r0
 800eae6:	d008      	beq.n	800eafa <xTaskPriorityDisinherit+0x22>
 800eae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaec:	f383 8811 	msr	BASEPRI, r3
 800eaf0:	f3bf 8f6f 	isb	sy
 800eaf4:	f3bf 8f4f 	dsb	sy
 800eaf8:	e7fe      	b.n	800eaf8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800eafa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800eafc:	b943      	cbnz	r3, 800eb10 <xTaskPriorityDisinherit+0x38>
 800eafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb02:	f383 8811 	msr	BASEPRI, r3
 800eb06:	f3bf 8f6f 	isb	sy
 800eb0a:	f3bf 8f4f 	dsb	sy
 800eb0e:	e7fe      	b.n	800eb0e <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb10:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800eb12:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb14:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800eb16:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb18:	4291      	cmp	r1, r2
 800eb1a:	d0df      	beq.n	800eadc <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d1dd      	bne.n	800eadc <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb20:	1d25      	adds	r5, r4, #4
 800eb22:	4628      	mov	r0, r5
 800eb24:	f7fe fbe6 	bl	800d2f4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb28:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb2a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb2e:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb30:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800eb32:	4a08      	ldr	r2, [pc, #32]	@ (800eb54 <xTaskPriorityDisinherit+0x7c>)
 800eb34:	6811      	ldr	r1, [r2, #0]
 800eb36:	428b      	cmp	r3, r1
 800eb38:	d900      	bls.n	800eb3c <xTaskPriorityDisinherit+0x64>
 800eb3a:	6013      	str	r3, [r2, #0]
 800eb3c:	4a06      	ldr	r2, [pc, #24]	@ (800eb58 <xTaskPriorityDisinherit+0x80>)
 800eb3e:	2014      	movs	r0, #20
 800eb40:	4629      	mov	r1, r5
 800eb42:	fb00 2003 	mla	r0, r0, r3, r2
 800eb46:	f7fe fbb3 	bl	800d2b0 <vListInsertEnd>
					xReturn = pdTRUE;
 800eb4a:	2001      	movs	r0, #1
		return xReturn;
 800eb4c:	e7c7      	b.n	800eade <xTaskPriorityDisinherit+0x6>
 800eb4e:	bf00      	nop
 800eb50:	24025490 	.word	0x24025490
 800eb54:	24024fb4 	.word	0x24024fb4
 800eb58:	24025030 	.word	0x24025030

0800eb5c <vTaskPriorityDisinheritAfterTimeout>:
	{
 800eb5c:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800eb5e:	4604      	mov	r4, r0
 800eb60:	2800      	cmp	r0, #0
 800eb62:	d042      	beq.n	800ebea <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800eb64:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800eb66:	b942      	cbnz	r2, 800eb7a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800eb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb6c:	f383 8811 	msr	BASEPRI, r3
 800eb70:	f3bf 8f6f 	isb	sy
 800eb74:	f3bf 8f4f 	dsb	sy
 800eb78:	e7fe      	b.n	800eb78 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eb7a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800eb7c:	4299      	cmp	r1, r3
 800eb7e:	bf38      	it	cc
 800eb80:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eb82:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800eb84:	428b      	cmp	r3, r1
 800eb86:	d030      	beq.n	800ebea <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eb88:	2a01      	cmp	r2, #1
 800eb8a:	d12e      	bne.n	800ebea <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800eb8c:	4a17      	ldr	r2, [pc, #92]	@ (800ebec <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800eb8e:	6812      	ldr	r2, [r2, #0]
 800eb90:	4282      	cmp	r2, r0
 800eb92:	d108      	bne.n	800eba6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800eb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb98:	f383 8811 	msr	BASEPRI, r3
 800eb9c:	f3bf 8f6f 	isb	sy
 800eba0:	f3bf 8f4f 	dsb	sy
 800eba4:	e7fe      	b.n	800eba4 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eba6:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eba8:	4d11      	ldr	r5, [pc, #68]	@ (800ebf0 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ebaa:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ebac:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800ebb0:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ebb2:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebb6:	bfa8      	it	ge
 800ebb8:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ebbc:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebbe:	bfa8      	it	ge
 800ebc0:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d111      	bne.n	800ebea <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebc6:	1d06      	adds	r6, r0, #4
 800ebc8:	4630      	mov	r0, r6
 800ebca:	f7fe fb93 	bl	800d2f4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ebce:	4a09      	ldr	r2, [pc, #36]	@ (800ebf4 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800ebd0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ebd2:	6811      	ldr	r1, [r2, #0]
 800ebd4:	428b      	cmp	r3, r1
 800ebd6:	d900      	bls.n	800ebda <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800ebd8:	6013      	str	r3, [r2, #0]
 800ebda:	2014      	movs	r0, #20
 800ebdc:	4631      	mov	r1, r6
 800ebde:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800ebe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800ebe6:	f7fe bb63 	b.w	800d2b0 <vListInsertEnd>
	}
 800ebea:	bd70      	pop	{r4, r5, r6, pc}
 800ebec:	24025490 	.word	0x24025490
 800ebf0:	24025030 	.word	0x24025030
 800ebf4:	24024fb4 	.word	0x24024fb4

0800ebf8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800ebf8:	4b04      	ldr	r3, [pc, #16]	@ (800ec0c <pvTaskIncrementMutexHeldCount+0x14>)
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	b11a      	cbz	r2, 800ec06 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800ebfe:	6819      	ldr	r1, [r3, #0]
 800ec00:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800ec02:	3201      	adds	r2, #1
 800ec04:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800ec06:	6818      	ldr	r0, [r3, #0]
	}
 800ec08:	4770      	bx	lr
 800ec0a:	bf00      	nop
 800ec0c:	24025490 	.word	0x24025490

0800ec10 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800ec10:	4291      	cmp	r1, r2
{
 800ec12:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ec14:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec16:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800ec18:	d80a      	bhi.n	800ec30 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec1a:	1ad2      	subs	r2, r2, r3
 800ec1c:	6983      	ldr	r3, [r0, #24]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d20d      	bcs.n	800ec3e <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ec22:	1d01      	adds	r1, r0, #4
 800ec24:	4b07      	ldr	r3, [pc, #28]	@ (800ec44 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec26:	6818      	ldr	r0, [r3, #0]
 800ec28:	f7fe fb4d 	bl	800d2c6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ec2c:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800ec2e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d201      	bcs.n	800ec38 <prvInsertTimerInActiveList+0x28>
 800ec34:	4299      	cmp	r1, r3
 800ec36:	d202      	bcs.n	800ec3e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec38:	1d01      	adds	r1, r0, #4
 800ec3a:	4b03      	ldr	r3, [pc, #12]	@ (800ec48 <prvInsertTimerInActiveList+0x38>)
 800ec3c:	e7f3      	b.n	800ec26 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800ec3e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800ec40:	e7f5      	b.n	800ec2e <prvInsertTimerInActiveList+0x1e>
 800ec42:	bf00      	nop
 800ec44:	24025590 	.word	0x24025590
 800ec48:	24025594 	.word	0x24025594

0800ec4c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ec4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800ec4e:	4c11      	ldr	r4, [pc, #68]	@ (800ec94 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800ec50:	f7fe fbc8 	bl	800d3e4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800ec54:	6825      	ldr	r5, [r4, #0]
 800ec56:	b9bd      	cbnz	r5, 800ec88 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800ec58:	4f0f      	ldr	r7, [pc, #60]	@ (800ec98 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800ec5a:	4e10      	ldr	r6, [pc, #64]	@ (800ec9c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800ec5c:	4638      	mov	r0, r7
 800ec5e:	f7fe fb19 	bl	800d294 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ec62:	4630      	mov	r0, r6
 800ec64:	f7fe fb16 	bl	800d294 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ec68:	4b0d      	ldr	r3, [pc, #52]	@ (800eca0 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ec6a:	4a0e      	ldr	r2, [pc, #56]	@ (800eca4 <prvCheckForValidListAndQueue+0x58>)
 800ec6c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800ec6e:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ec70:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800ec72:	4b0d      	ldr	r3, [pc, #52]	@ (800eca8 <prvCheckForValidListAndQueue+0x5c>)
 800ec74:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ec76:	4b0d      	ldr	r3, [pc, #52]	@ (800ecac <prvCheckForValidListAndQueue+0x60>)
 800ec78:	9500      	str	r5, [sp, #0]
 800ec7a:	f7fe fdbb 	bl	800d7f4 <xQueueGenericCreateStatic>
 800ec7e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ec80:	b110      	cbz	r0, 800ec88 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ec82:	490b      	ldr	r1, [pc, #44]	@ (800ecb0 <prvCheckForValidListAndQueue+0x64>)
 800ec84:	f7ff fa1a 	bl	800e0bc <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800ec88:	b003      	add	sp, #12
 800ec8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800ec8e:	f7fe bbc9 	b.w	800d424 <vPortExitCritical>
 800ec92:	bf00      	nop
 800ec94:	2402558c 	.word	0x2402558c
 800ec98:	240255ac 	.word	0x240255ac
 800ec9c:	24025598 	.word	0x24025598
 800eca0:	24025594 	.word	0x24025594
 800eca4:	240254e4 	.word	0x240254e4
 800eca8:	24025590 	.word	0x24025590
 800ecac:	24025494 	.word	0x24025494
 800ecb0:	080265ce 	.word	0x080265ce

0800ecb4 <xTimerCreateTimerTask>:
{
 800ecb4:	b510      	push	{r4, lr}
 800ecb6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800ecb8:	f7ff ffc8 	bl	800ec4c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800ecbc:	4b12      	ldr	r3, [pc, #72]	@ (800ed08 <xTimerCreateTimerTask+0x54>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	b1b3      	cbz	r3, 800ecf0 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ecc2:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ecc4:	aa07      	add	r2, sp, #28
 800ecc6:	a906      	add	r1, sp, #24
 800ecc8:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ecca:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ecce:	f7fe f9d9 	bl	800d084 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ecd2:	9b05      	ldr	r3, [sp, #20]
 800ecd4:	9a07      	ldr	r2, [sp, #28]
 800ecd6:	9302      	str	r3, [sp, #8]
 800ecd8:	9b06      	ldr	r3, [sp, #24]
 800ecda:	490c      	ldr	r1, [pc, #48]	@ (800ed0c <xTimerCreateTimerTask+0x58>)
 800ecdc:	9301      	str	r3, [sp, #4]
 800ecde:	2302      	movs	r3, #2
 800ece0:	480b      	ldr	r0, [pc, #44]	@ (800ed10 <xTimerCreateTimerTask+0x5c>)
 800ece2:	9300      	str	r3, [sp, #0]
 800ece4:	4623      	mov	r3, r4
 800ece6:	f7ff fbae 	bl	800e446 <xTaskCreateStatic>
 800ecea:	4b0a      	ldr	r3, [pc, #40]	@ (800ed14 <xTimerCreateTimerTask+0x60>)
 800ecec:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800ecee:	b940      	cbnz	r0, 800ed02 <xTimerCreateTimerTask+0x4e>
 800ecf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecf4:	f383 8811 	msr	BASEPRI, r3
 800ecf8:	f3bf 8f6f 	isb	sy
 800ecfc:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800ed00:	e7fe      	b.n	800ed00 <xTimerCreateTimerTask+0x4c>
}
 800ed02:	2001      	movs	r0, #1
 800ed04:	b008      	add	sp, #32
 800ed06:	bd10      	pop	{r4, pc}
 800ed08:	2402558c 	.word	0x2402558c
 800ed0c:	080265d3 	.word	0x080265d3
 800ed10:	0800ee11 	.word	0x0800ee11
 800ed14:	24025588 	.word	0x24025588

0800ed18 <xTimerGenericCommand>:
{
 800ed18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ed1a:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800ed1c:	4604      	mov	r4, r0
{
 800ed1e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800ed20:	b940      	cbnz	r0, 800ed34 <xTimerGenericCommand+0x1c>
 800ed22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed26:	f383 8811 	msr	BASEPRI, r3
 800ed2a:	f3bf 8f6f 	isb	sy
 800ed2e:	f3bf 8f4f 	dsb	sy
 800ed32:	e7fe      	b.n	800ed32 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800ed34:	4d0c      	ldr	r5, [pc, #48]	@ (800ed68 <xTimerGenericCommand+0x50>)
 800ed36:	6828      	ldr	r0, [r5, #0]
 800ed38:	b178      	cbz	r0, 800ed5a <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ed3a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ed3c:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ed3e:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ed42:	dc0c      	bgt.n	800ed5e <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ed44:	f7ff fe7a 	bl	800ea3c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ed48:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ed4a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ed4c:	4669      	mov	r1, sp
 800ed4e:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ed50:	bf0c      	ite	eq
 800ed52:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ed54:	461a      	movne	r2, r3
 800ed56:	f7fe fe02 	bl	800d95e <xQueueGenericSend>
}
 800ed5a:	b004      	add	sp, #16
 800ed5c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ed5e:	2300      	movs	r3, #0
 800ed60:	4669      	mov	r1, sp
 800ed62:	f7fe feff 	bl	800db64 <xQueueGenericSendFromISR>
 800ed66:	e7f8      	b.n	800ed5a <xTimerGenericCommand+0x42>
 800ed68:	2402558c 	.word	0x2402558c

0800ed6c <prvSampleTimeNow>:
{
 800ed6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800ed70:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800ee0c <prvSampleTimeNow+0xa0>
{
 800ed74:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800ed76:	f7ff fbd5 	bl	800e524 <xTaskGetTickCount>
 800ed7a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800ed7c:	f8d8 3000 	ldr.w	r3, [r8]
 800ed80:	4283      	cmp	r3, r0
 800ed82:	d909      	bls.n	800ed98 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed84:	4f1f      	ldr	r7, [pc, #124]	@ (800ee04 <prvSampleTimeNow+0x98>)
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	b96a      	cbnz	r2, 800eda8 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800ed8c:	4a1e      	ldr	r2, [pc, #120]	@ (800ee08 <prvSampleTimeNow+0x9c>)
 800ed8e:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ed90:	6013      	str	r3, [r2, #0]
 800ed92:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800ed94:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800ed96:	e000      	b.n	800ed9a <prvSampleTimeNow+0x2e>
 800ed98:	2300      	movs	r3, #0
}
 800ed9a:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800ed9c:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800ed9e:	f8c8 5000 	str.w	r5, [r8]
}
 800eda2:	b002      	add	sp, #8
 800eda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eda8:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edaa:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800edac:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edb0:	f104 0a04 	add.w	sl, r4, #4
 800edb4:	4650      	mov	r0, sl
 800edb6:	f7fe fa9d 	bl	800d2f4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800edba:	6a23      	ldr	r3, [r4, #32]
 800edbc:	4620      	mov	r0, r4
 800edbe:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800edc0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800edc4:	075b      	lsls	r3, r3, #29
 800edc6:	d5de      	bpl.n	800ed86 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800edc8:	69a3      	ldr	r3, [r4, #24]
 800edca:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800edcc:	4599      	cmp	r9, r3
 800edce:	d206      	bcs.n	800edde <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edd0:	4651      	mov	r1, sl
 800edd2:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800edd4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800edd6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edd8:	f7fe fa75 	bl	800d2c6 <vListInsert>
 800eddc:	e7d3      	b.n	800ed86 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800edde:	2300      	movs	r3, #0
 800ede0:	464a      	mov	r2, r9
 800ede2:	4620      	mov	r0, r4
 800ede4:	4619      	mov	r1, r3
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	f7ff ff96 	bl	800ed18 <xTimerGenericCommand>
				configASSERT( xResult );
 800edec:	2800      	cmp	r0, #0
 800edee:	d1ca      	bne.n	800ed86 <prvSampleTimeNow+0x1a>
 800edf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edf4:	f383 8811 	msr	BASEPRI, r3
 800edf8:	f3bf 8f6f 	isb	sy
 800edfc:	f3bf 8f4f 	dsb	sy
 800ee00:	e7fe      	b.n	800ee00 <prvSampleTimeNow+0x94>
 800ee02:	bf00      	nop
 800ee04:	24025594 	.word	0x24025594
 800ee08:	24025590 	.word	0x24025590
 800ee0c:	24025584 	.word	0x24025584

0800ee10 <prvTimerTask>:
{
 800ee10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ee14:	4d6e      	ldr	r5, [pc, #440]	@ (800efd0 <prvTimerTask+0x1c0>)
{
 800ee16:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ee18:	4e6e      	ldr	r6, [pc, #440]	@ (800efd4 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ee1a:	682b      	ldr	r3, [r5, #0]
 800ee1c:	f8d3 8000 	ldr.w	r8, [r3]
 800ee20:	f1b8 0f00 	cmp.w	r8, #0
 800ee24:	d035      	beq.n	800ee92 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee26:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ee28:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee2a:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800ee2e:	f7ff fb71 	bl	800e514 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee32:	a804      	add	r0, sp, #16
 800ee34:	f7ff ff9a 	bl	800ed6c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800ee38:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee3a:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d169      	bne.n	800ef14 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ee40:	2c00      	cmp	r4, #0
 800ee42:	d14c      	bne.n	800eede <prvTimerTask+0xce>
 800ee44:	4540      	cmp	r0, r8
 800ee46:	d350      	bcc.n	800eeea <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800ee48:	f7ff fc08 	bl	800e65c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee4c:	682b      	ldr	r3, [r5, #0]
 800ee4e:	68db      	ldr	r3, [r3, #12]
 800ee50:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee52:	1d38      	adds	r0, r7, #4
 800ee54:	f7fe fa4e 	bl	800d2f4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee58:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ee5c:	0758      	lsls	r0, r3, #29
 800ee5e:	d51a      	bpl.n	800ee96 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ee60:	69b9      	ldr	r1, [r7, #24]
 800ee62:	4643      	mov	r3, r8
 800ee64:	464a      	mov	r2, r9
 800ee66:	4638      	mov	r0, r7
 800ee68:	4441      	add	r1, r8
 800ee6a:	f7ff fed1 	bl	800ec10 <prvInsertTimerInActiveList>
 800ee6e:	b1b0      	cbz	r0, 800ee9e <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee70:	4623      	mov	r3, r4
 800ee72:	4642      	mov	r2, r8
 800ee74:	4621      	mov	r1, r4
 800ee76:	4638      	mov	r0, r7
 800ee78:	9400      	str	r4, [sp, #0]
 800ee7a:	f7ff ff4d 	bl	800ed18 <xTimerGenericCommand>
			configASSERT( xResult );
 800ee7e:	b970      	cbnz	r0, 800ee9e <prvTimerTask+0x8e>
 800ee80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee84:	f383 8811 	msr	BASEPRI, r3
 800ee88:	f3bf 8f6f 	isb	sy
 800ee8c:	f3bf 8f4f 	dsb	sy
 800ee90:	e7fe      	b.n	800ee90 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ee92:	2401      	movs	r4, #1
 800ee94:	e7cb      	b.n	800ee2e <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee96:	f023 0301 	bic.w	r3, r3, #1
 800ee9a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee9e:	6a3b      	ldr	r3, [r7, #32]
 800eea0:	4638      	mov	r0, r7
 800eea2:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eea4:	2200      	movs	r2, #0
 800eea6:	a904      	add	r1, sp, #16
 800eea8:	6830      	ldr	r0, [r6, #0]
 800eeaa:	f7fe ff09 	bl	800dcc0 <xQueueReceive>
 800eeae:	2800      	cmp	r0, #0
 800eeb0:	d0b3      	beq.n	800ee1a <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eeb2:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eeb4:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	db2f      	blt.n	800ef1a <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eeba:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eebc:	6963      	ldr	r3, [r4, #20]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d132      	bne.n	800ef28 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eec2:	a803      	add	r0, sp, #12
 800eec4:	f7ff ff52 	bl	800ed6c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800eec8:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eeca:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800eecc:	2b09      	cmp	r3, #9
 800eece:	d8e9      	bhi.n	800eea4 <prvTimerTask+0x94>
 800eed0:	e8df f003 	tbb	[pc, r3]
 800eed4:	572e2e2e 	.word	0x572e2e2e
 800eed8:	2e2e765e 	.word	0x2e2e765e
 800eedc:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eede:	4b3e      	ldr	r3, [pc, #248]	@ (800efd8 <prvTimerTask+0x1c8>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	681c      	ldr	r4, [r3, #0]
 800eee4:	fab4 f484 	clz	r4, r4
 800eee8:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eeea:	4622      	mov	r2, r4
 800eeec:	eba8 0109 	sub.w	r1, r8, r9
 800eef0:	6830      	ldr	r0, [r6, #0]
 800eef2:	f7ff f922 	bl	800e13a <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eef6:	f7ff fbb1 	bl	800e65c <xTaskResumeAll>
 800eefa:	2800      	cmp	r0, #0
 800eefc:	d1d2      	bne.n	800eea4 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800eefe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ef02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef06:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ef0a:	f3bf 8f4f 	dsb	sy
 800ef0e:	f3bf 8f6f 	isb	sy
 800ef12:	e7c7      	b.n	800eea4 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800ef14:	f7ff fba2 	bl	800e65c <xTaskResumeAll>
}
 800ef18:	e7c4      	b.n	800eea4 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ef1a:	9b05      	ldr	r3, [sp, #20]
 800ef1c:	9907      	ldr	r1, [sp, #28]
 800ef1e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ef20:	9b04      	ldr	r3, [sp, #16]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	dbbe      	blt.n	800eea4 <prvTimerTask+0x94>
 800ef26:	e7c8      	b.n	800eeba <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef28:	1d20      	adds	r0, r4, #4
 800ef2a:	f7fe f9e3 	bl	800d2f4 <uxListRemove>
 800ef2e:	e7c8      	b.n	800eec2 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef30:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ef34:	4620      	mov	r0, r4
 800ef36:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef38:	f043 0301 	orr.w	r3, r3, #1
 800ef3c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ef40:	9b05      	ldr	r3, [sp, #20]
 800ef42:	4419      	add	r1, r3
 800ef44:	f7ff fe64 	bl	800ec10 <prvInsertTimerInActiveList>
 800ef48:	2800      	cmp	r0, #0
 800ef4a:	d0ab      	beq.n	800eea4 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef4c:	6a23      	ldr	r3, [r4, #32]
 800ef4e:	4620      	mov	r0, r4
 800ef50:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef52:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ef56:	0759      	lsls	r1, r3, #29
 800ef58:	d5a4      	bpl.n	800eea4 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ef5a:	69a2      	ldr	r2, [r4, #24]
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	9905      	ldr	r1, [sp, #20]
 800ef60:	4620      	mov	r0, r4
 800ef62:	9300      	str	r3, [sp, #0]
 800ef64:	440a      	add	r2, r1
 800ef66:	4619      	mov	r1, r3
 800ef68:	f7ff fed6 	bl	800ed18 <xTimerGenericCommand>
							configASSERT( xResult );
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	d199      	bne.n	800eea4 <prvTimerTask+0x94>
 800ef70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef74:	f383 8811 	msr	BASEPRI, r3
 800ef78:	f3bf 8f6f 	isb	sy
 800ef7c:	f3bf 8f4f 	dsb	sy
 800ef80:	e7fe      	b.n	800ef80 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef82:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef86:	f023 0301 	bic.w	r3, r3, #1
 800ef8a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800ef8e:	e789      	b.n	800eea4 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef90:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ef94:	f043 0301 	orr.w	r3, r3, #1
 800ef98:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ef9c:	9905      	ldr	r1, [sp, #20]
 800ef9e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800efa0:	b941      	cbnz	r1, 800efb4 <prvTimerTask+0x1a4>
 800efa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efa6:	f383 8811 	msr	BASEPRI, r3
 800efaa:	f3bf 8f6f 	isb	sy
 800efae:	f3bf 8f4f 	dsb	sy
 800efb2:	e7fe      	b.n	800efb2 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800efb4:	4603      	mov	r3, r0
 800efb6:	4401      	add	r1, r0
 800efb8:	4620      	mov	r0, r4
 800efba:	f7ff fe29 	bl	800ec10 <prvInsertTimerInActiveList>
					break;
 800efbe:	e771      	b.n	800eea4 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800efc0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800efc4:	079a      	lsls	r2, r3, #30
 800efc6:	d4de      	bmi.n	800ef86 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800efc8:	4620      	mov	r0, r4
 800efca:	f7fe f925 	bl	800d218 <vPortFree>
 800efce:	e769      	b.n	800eea4 <prvTimerTask+0x94>
 800efd0:	24025594 	.word	0x24025594
 800efd4:	2402558c 	.word	0x2402558c
 800efd8:	24025590 	.word	0x24025590

0800efdc <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800efdc:	8880      	ldrh	r0, [r0, #4]
 800efde:	4770      	bx	lr

0800efe0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800efe0:	b570      	push	{r4, r5, r6, lr}
 800efe2:	6803      	ldr	r3, [r0, #0]
 800efe4:	460c      	mov	r4, r1
 800efe6:	2100      	movs	r1, #0
 800efe8:	4605      	mov	r5, r0
 800efea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efec:	4798      	blx	r3
 800efee:	4606      	mov	r6, r0
 800eff0:	682b      	ldr	r3, [r5, #0]
 800eff2:	4628      	mov	r0, r5
 800eff4:	1ba4      	subs	r4, r4, r6
 800eff6:	6a1b      	ldr	r3, [r3, #32]
 800eff8:	b2a4      	uxth	r4, r4
 800effa:	4798      	blx	r3
 800effc:	fbb4 f0f0 	udiv	r0, r4, r0
 800f000:	bd70      	pop	{r4, r5, r6, pc}

0800f002 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800f002:	2300      	movs	r3, #0
 800f004:	8083      	strh	r3, [r0, #4]
 800f006:	4770      	bx	lr

0800f008 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800f008:	b510      	push	{r4, lr}
 800f00a:	6803      	ldr	r3, [r0, #0]
 800f00c:	4604      	mov	r4, r0
 800f00e:	8881      	ldrh	r1, [r0, #4]
 800f010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f012:	4798      	blx	r3
 800f014:	88a3      	ldrh	r3, [r4, #4]
 800f016:	3301      	adds	r3, #1
 800f018:	80a3      	strh	r3, [r4, #4]
 800f01a:	bd10      	pop	{r4, pc}

0800f01c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800f01c:	6803      	ldr	r3, [r0, #0]
 800f01e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f020:	4718      	bx	r3

0800f022 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800f022:	4770      	bx	lr

0800f024 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800f024:	4a02      	ldr	r2, [pc, #8]	@ (800f030 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800f026:	6002      	str	r2, [r0, #0]
 800f028:	2200      	movs	r2, #0
 800f02a:	8082      	strh	r2, [r0, #4]
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop
 800f030:	08027150 	.word	0x08027150

0800f034 <_ZN8touchgfx9Container13getFirstChildEv>:
 800f034:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800f036:	4770      	bx	lr

0800f038 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800f038:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f03a:	2000      	movs	r0, #0
 800f03c:	b12b      	cbz	r3, 800f04a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f03e:	b920      	cbnz	r0, 800f04a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f040:	1a5a      	subs	r2, r3, r1
 800f042:	699b      	ldr	r3, [r3, #24]
 800f044:	4250      	negs	r0, r2
 800f046:	4150      	adcs	r0, r2
 800f048:	e7f8      	b.n	800f03c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800f04a:	4770      	bx	lr

0800f04c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800f04c:	2300      	movs	r3, #0
 800f04e:	6148      	str	r0, [r1, #20]
 800f050:	618b      	str	r3, [r1, #24]
 800f052:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f054:	b913      	cbnz	r3, 800f05c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800f056:	6281      	str	r1, [r0, #40]	@ 0x28
 800f058:	4770      	bx	lr
 800f05a:	4613      	mov	r3, r2
 800f05c:	699a      	ldr	r2, [r3, #24]
 800f05e:	2a00      	cmp	r2, #0
 800f060:	d1fb      	bne.n	800f05a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800f062:	6199      	str	r1, [r3, #24]
 800f064:	4770      	bx	lr

0800f066 <_ZN8touchgfx9Container9removeAllEv>:
 800f066:	2200      	movs	r2, #0
 800f068:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f06a:	b123      	cbz	r3, 800f076 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800f06c:	6999      	ldr	r1, [r3, #24]
 800f06e:	6281      	str	r1, [r0, #40]	@ 0x28
 800f070:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800f074:	e7f8      	b.n	800f068 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800f076:	4770      	bx	lr

0800f078 <_ZN8touchgfx9Container6unlinkEv>:
 800f078:	2300      	movs	r3, #0
 800f07a:	6283      	str	r3, [r0, #40]	@ 0x28
 800f07c:	4770      	bx	lr

0800f07e <_ZNK8touchgfx9Container12getSolidRectEv>:
 800f07e:	2200      	movs	r2, #0
 800f080:	8002      	strh	r2, [r0, #0]
 800f082:	8042      	strh	r2, [r0, #2]
 800f084:	8082      	strh	r2, [r0, #4]
 800f086:	80c2      	strh	r2, [r0, #6]
 800f088:	4770      	bx	lr

0800f08a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800f08a:	b570      	push	{r4, r5, r6, lr}
 800f08c:	460d      	mov	r5, r1
 800f08e:	4616      	mov	r6, r2
 800f090:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f092:	b13c      	cbz	r4, 800f0a4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800f094:	6823      	ldr	r3, [r4, #0]
 800f096:	4620      	mov	r0, r4
 800f098:	4632      	mov	r2, r6
 800f09a:	4629      	mov	r1, r5
 800f09c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f09e:	4798      	blx	r3
 800f0a0:	69a4      	ldr	r4, [r4, #24]
 800f0a2:	e7f6      	b.n	800f092 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800f0a4:	bd70      	pop	{r4, r5, r6, pc}

0800f0a6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800f0a6:	b538      	push	{r3, r4, r5, lr}
 800f0a8:	460d      	mov	r5, r1
 800f0aa:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f0ac:	b134      	cbz	r4, 800f0bc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800f0ae:	682b      	ldr	r3, [r5, #0]
 800f0b0:	4621      	mov	r1, r4
 800f0b2:	4628      	mov	r0, r5
 800f0b4:	689b      	ldr	r3, [r3, #8]
 800f0b6:	4798      	blx	r3
 800f0b8:	69a4      	ldr	r4, [r4, #24]
 800f0ba:	e7f7      	b.n	800f0ac <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800f0bc:	bd38      	pop	{r3, r4, r5, pc}

0800f0be <_ZN8touchgfx9ContainerD1Ev>:
 800f0be:	4770      	bx	lr

0800f0c0 <_ZN8touchgfx9ContainerD0Ev>:
 800f0c0:	b510      	push	{r4, lr}
 800f0c2:	4604      	mov	r4, r0
 800f0c4:	212c      	movs	r1, #44	@ 0x2c
 800f0c6:	f013 ff78 	bl	8022fba <_ZdlPvj>
 800f0ca:	4620      	mov	r0, r4
 800f0cc:	bd10      	pop	{r4, pc}

0800f0ce <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800f0ce:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f0d0:	b19b      	cbz	r3, 800f0fa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800f0d2:	428b      	cmp	r3, r1
 800f0d4:	d109      	bne.n	800f0ea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800f0d6:	699a      	ldr	r2, [r3, #24]
 800f0d8:	2100      	movs	r1, #0
 800f0da:	6159      	str	r1, [r3, #20]
 800f0dc:	6282      	str	r2, [r0, #40]	@ 0x28
 800f0de:	b902      	cbnz	r2, 800f0e2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800f0e0:	4770      	bx	lr
 800f0e2:	6199      	str	r1, [r3, #24]
 800f0e4:	4770      	bx	lr
 800f0e6:	4613      	mov	r3, r2
 800f0e8:	b13a      	cbz	r2, 800f0fa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800f0ea:	699a      	ldr	r2, [r3, #24]
 800f0ec:	428a      	cmp	r2, r1
 800f0ee:	d1fa      	bne.n	800f0e6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800f0f0:	698a      	ldr	r2, [r1, #24]
 800f0f2:	619a      	str	r2, [r3, #24]
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800f0fa:	4770      	bx	lr

0800f0fc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800f0fc:	b410      	push	{r4}
 800f0fe:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f100:	4604      	mov	r4, r0
 800f102:	b92b      	cbnz	r3, 800f110 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800f104:	6803      	ldr	r3, [r0, #0]
 800f106:	4611      	mov	r1, r2
 800f108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f10c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f10e:	4718      	bx	r3
 800f110:	b941      	cbnz	r1, 800f124 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800f112:	6193      	str	r3, [r2, #24]
 800f114:	6282      	str	r2, [r0, #40]	@ 0x28
 800f116:	6154      	str	r4, [r2, #20]
 800f118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f11c:	4770      	bx	lr
 800f11e:	4603      	mov	r3, r0
 800f120:	2800      	cmp	r0, #0
 800f122:	d0f9      	beq.n	800f118 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800f124:	4299      	cmp	r1, r3
 800f126:	6998      	ldr	r0, [r3, #24]
 800f128:	d1f9      	bne.n	800f11e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800f12a:	6190      	str	r0, [r2, #24]
 800f12c:	618a      	str	r2, [r1, #24]
 800f12e:	e7f2      	b.n	800f116 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800f130 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800f130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f134:	461f      	mov	r7, r3
 800f136:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800f13a:	460d      	mov	r5, r1
 800f13c:	4616      	mov	r6, r2
 800f13e:	b103      	cbz	r3, 800f142 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800f140:	6038      	str	r0, [r7, #0]
 800f142:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f144:	b314      	cbz	r4, 800f18c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800f146:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800f14a:	b1eb      	cbz	r3, 800f188 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f14c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f150:	428d      	cmp	r5, r1
 800f152:	db19      	blt.n	800f188 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f154:	b289      	uxth	r1, r1
 800f156:	8923      	ldrh	r3, [r4, #8]
 800f158:	440b      	add	r3, r1
 800f15a:	b21b      	sxth	r3, r3
 800f15c:	429d      	cmp	r5, r3
 800f15e:	da13      	bge.n	800f188 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f160:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f164:	4296      	cmp	r6, r2
 800f166:	db0f      	blt.n	800f188 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f168:	b292      	uxth	r2, r2
 800f16a:	8963      	ldrh	r3, [r4, #10]
 800f16c:	4413      	add	r3, r2
 800f16e:	b21b      	sxth	r3, r3
 800f170:	429e      	cmp	r6, r3
 800f172:	da09      	bge.n	800f188 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f174:	6823      	ldr	r3, [r4, #0]
 800f176:	1ab2      	subs	r2, r6, r2
 800f178:	1a69      	subs	r1, r5, r1
 800f17a:	4620      	mov	r0, r4
 800f17c:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800f180:	b212      	sxth	r2, r2
 800f182:	463b      	mov	r3, r7
 800f184:	b209      	sxth	r1, r1
 800f186:	47c0      	blx	r8
 800f188:	69a4      	ldr	r4, [r4, #24]
 800f18a:	e7db      	b.n	800f144 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800f18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f190 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800f190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f194:	4c6d      	ldr	r4, [pc, #436]	@ (800f34c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800f196:	b0a1      	sub	sp, #132	@ 0x84
 800f198:	4606      	mov	r6, r0
 800f19a:	6824      	ldr	r4, [r4, #0]
 800f19c:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800f19e:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800f1a2:	2400      	movs	r4, #0
 800f1a4:	9303      	str	r3, [sp, #12]
 800f1a6:	802c      	strh	r4, [r5, #0]
 800f1a8:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800f1aa:	802c      	strh	r4, [r5, #0]
 800f1ac:	601c      	str	r4, [r3, #0]
 800f1ae:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800f1b2:	f7ff ffbd 	bl	800f130 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800f1b6:	f1b9 0f03 	cmp.w	r9, #3
 800f1ba:	f340 80c1 	ble.w	800f340 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800f1be:	4631      	mov	r1, r6
 800f1c0:	a80c      	add	r0, sp, #48	@ 0x30
 800f1c2:	f006 fd71 	bl	8015ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f1c6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800f1ca:	9306      	str	r3, [sp, #24]
 800f1cc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800f1d0:	9307      	str	r3, [sp, #28]
 800f1d2:	9b03      	ldr	r3, [sp, #12]
 800f1d4:	f8d3 a000 	ldr.w	sl, [r3]
 800f1d8:	f1ba 0f00 	cmp.w	sl, #0
 800f1dc:	f000 80b3 	beq.w	800f346 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800f1e0:	4651      	mov	r1, sl
 800f1e2:	a810      	add	r0, sp, #64	@ 0x40
 800f1e4:	f006 fd60 	bl	8015ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f1e8:	2002      	movs	r0, #2
 800f1ea:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800f1ee:	9b01      	ldr	r3, [sp, #4]
 800f1f0:	9a06      	ldr	r2, [sp, #24]
 800f1f2:	fb91 f1f0 	sdiv	r1, r1, r0
 800f1f6:	189d      	adds	r5, r3, r2
 800f1f8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800f1fc:	9a07      	ldr	r2, [sp, #28]
 800f1fe:	4419      	add	r1, r3
 800f200:	9b02      	ldr	r3, [sp, #8]
 800f202:	4413      	add	r3, r2
 800f204:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800f208:	1a6d      	subs	r5, r5, r1
 800f20a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800f20e:	fb92 f2f0 	sdiv	r2, r2, r0
 800f212:	440a      	add	r2, r1
 800f214:	1a9b      	subs	r3, r3, r2
 800f216:	435b      	muls	r3, r3
 800f218:	fb05 3505 	mla	r5, r5, r5, r3
 800f21c:	4f4c      	ldr	r7, [pc, #304]	@ (800f350 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800f21e:	ac10      	add	r4, sp, #64	@ 0x40
 800f220:	f1b9 0f0c 	cmp.w	r9, #12
 800f224:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f228:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f22a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f22c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f22e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f230:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800f234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f238:	f04f 0303 	mov.w	r3, #3
 800f23c:	bfd8      	it	le
 800f23e:	f109 32ff 	addle.w	r2, r9, #4294967295
 800f242:	f04f 0400 	mov.w	r4, #0
 800f246:	f8cd 9000 	str.w	r9, [sp]
 800f24a:	bfcc      	ite	gt
 800f24c:	4698      	movgt	r8, r3
 800f24e:	fb92 f8f3 	sdivle	r8, r2, r3
 800f252:	1c63      	adds	r3, r4, #1
 800f254:	aa10      	add	r2, sp, #64	@ 0x40
 800f256:	f004 0401 	and.w	r4, r4, #1
 800f25a:	f04f 0b00 	mov.w	fp, #0
 800f25e:	9308      	str	r3, [sp, #32]
 800f260:	9b00      	ldr	r3, [sp, #0]
 800f262:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800f266:	fb93 f3f8 	sdiv	r3, r3, r8
 800f26a:	3404      	adds	r4, #4
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	9304      	str	r3, [sp, #16]
 800f270:	9a04      	ldr	r2, [sp, #16]
 800f272:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f276:	fb13 f302 	smulbb	r3, r3, r2
 800f27a:	9a01      	ldr	r2, [sp, #4]
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	1899      	adds	r1, r3, r2
 800f280:	9305      	str	r3, [sp, #20]
 800f282:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800f286:	b209      	sxth	r1, r1
 800f288:	4299      	cmp	r1, r3
 800f28a:	db4d      	blt.n	800f328 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f28c:	8932      	ldrh	r2, [r6, #8]
 800f28e:	4413      	add	r3, r2
 800f290:	b21b      	sxth	r3, r3
 800f292:	4299      	cmp	r1, r3
 800f294:	da48      	bge.n	800f328 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f296:	9b04      	ldr	r3, [sp, #16]
 800f298:	6827      	ldr	r7, [r4, #0]
 800f29a:	fb17 f703 	smulbb	r7, r7, r3
 800f29e:	9b02      	ldr	r3, [sp, #8]
 800f2a0:	b2bf      	uxth	r7, r7
 800f2a2:	18fa      	adds	r2, r7, r3
 800f2a4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800f2a8:	b212      	sxth	r2, r2
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	db3c      	blt.n	800f328 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f2ae:	8970      	ldrh	r0, [r6, #10]
 800f2b0:	4403      	add	r3, r0
 800f2b2:	b21b      	sxth	r3, r3
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	da37      	bge.n	800f328 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	4630      	mov	r0, r6
 800f2bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2be:	ab0b      	add	r3, sp, #44	@ 0x2c
 800f2c0:	f7ff ff36 	bl	800f130 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800f2c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f2c6:	b37a      	cbz	r2, 800f328 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f2c8:	4552      	cmp	r2, sl
 800f2ca:	d02d      	beq.n	800f328 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f2cc:	4611      	mov	r1, r2
 800f2ce:	a80e      	add	r0, sp, #56	@ 0x38
 800f2d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2d2:	f006 fce9 	bl	8015ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f2d6:	f04f 0e02 	mov.w	lr, #2
 800f2da:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800f2de:	9a06      	ldr	r2, [sp, #24]
 800f2e0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800f2e4:	9b01      	ldr	r3, [sp, #4]
 800f2e6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800f2ea:	4413      	add	r3, r2
 800f2ec:	9a07      	ldr	r2, [sp, #28]
 800f2ee:	fb91 f1fe 	sdiv	r1, r1, lr
 800f2f2:	fb9c fcfe 	sdiv	ip, ip, lr
 800f2f6:	4401      	add	r1, r0
 800f2f8:	1a58      	subs	r0, r3, r1
 800f2fa:	9b02      	ldr	r3, [sp, #8]
 800f2fc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800f300:	4413      	add	r3, r2
 800f302:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f304:	448c      	add	ip, r1
 800f306:	eba3 030c 	sub.w	r3, r3, ip
 800f30a:	435b      	muls	r3, r3
 800f30c:	fb00 3300 	mla	r3, r0, r0, r3
 800f310:	42ab      	cmp	r3, r5
 800f312:	d208      	bcs.n	800f326 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800f314:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f316:	461d      	mov	r5, r3
 800f318:	9803      	ldr	r0, [sp, #12]
 800f31a:	6001      	str	r1, [r0, #0]
 800f31c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800f31e:	9805      	ldr	r0, [sp, #20]
 800f320:	8008      	strh	r0, [r1, #0]
 800f322:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800f324:	800f      	strh	r7, [r1, #0]
 800f326:	4692      	mov	sl, r2
 800f328:	f10b 0b01 	add.w	fp, fp, #1
 800f32c:	3408      	adds	r4, #8
 800f32e:	f1bb 0f04 	cmp.w	fp, #4
 800f332:	d19d      	bne.n	800f270 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800f334:	9b00      	ldr	r3, [sp, #0]
 800f336:	9c08      	ldr	r4, [sp, #32]
 800f338:	444b      	add	r3, r9
 800f33a:	4544      	cmp	r4, r8
 800f33c:	9300      	str	r3, [sp, #0]
 800f33e:	d188      	bne.n	800f252 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800f340:	b021      	add	sp, #132	@ 0x84
 800f342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f346:	f04f 35ff 	mov.w	r5, #4294967295
 800f34a:	e767      	b.n	800f21c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800f34c:	240255cc 	.word	0x240255cc
 800f350:	08024748 	.word	0x08024748

0800f354 <_ZN8touchgfx4RectaNERKS0_>:
 800f354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f358:	f9b1 7000 	ldrsh.w	r7, [r1]
 800f35c:	888c      	ldrh	r4, [r1, #4]
 800f35e:	f9b0 9000 	ldrsh.w	r9, [r0]
 800f362:	443c      	add	r4, r7
 800f364:	b2a4      	uxth	r4, r4
 800f366:	fa0f f884 	sxth.w	r8, r4
 800f36a:	45c1      	cmp	r9, r8
 800f36c:	da2f      	bge.n	800f3ce <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f36e:	8882      	ldrh	r2, [r0, #4]
 800f370:	444a      	add	r2, r9
 800f372:	b292      	uxth	r2, r2
 800f374:	fa0f fe82 	sxth.w	lr, r2
 800f378:	4577      	cmp	r7, lr
 800f37a:	da28      	bge.n	800f3ce <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f37c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800f380:	88cb      	ldrh	r3, [r1, #6]
 800f382:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800f386:	442b      	add	r3, r5
 800f388:	b21b      	sxth	r3, r3
 800f38a:	429e      	cmp	r6, r3
 800f38c:	da1f      	bge.n	800f3ce <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f38e:	88c3      	ldrh	r3, [r0, #6]
 800f390:	4433      	add	r3, r6
 800f392:	b29b      	uxth	r3, r3
 800f394:	fa0f fc83 	sxth.w	ip, r3
 800f398:	4565      	cmp	r5, ip
 800f39a:	da18      	bge.n	800f3ce <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f39c:	454f      	cmp	r7, r9
 800f39e:	bfb8      	it	lt
 800f3a0:	464f      	movlt	r7, r9
 800f3a2:	42b5      	cmp	r5, r6
 800f3a4:	bfb8      	it	lt
 800f3a6:	4635      	movlt	r5, r6
 800f3a8:	45f0      	cmp	r8, lr
 800f3aa:	bfd8      	it	le
 800f3ac:	4622      	movle	r2, r4
 800f3ae:	1bd2      	subs	r2, r2, r7
 800f3b0:	8082      	strh	r2, [r0, #4]
 800f3b2:	884a      	ldrh	r2, [r1, #2]
 800f3b4:	88c9      	ldrh	r1, [r1, #6]
 800f3b6:	8007      	strh	r7, [r0, #0]
 800f3b8:	440a      	add	r2, r1
 800f3ba:	8045      	strh	r5, [r0, #2]
 800f3bc:	b292      	uxth	r2, r2
 800f3be:	b211      	sxth	r1, r2
 800f3c0:	458c      	cmp	ip, r1
 800f3c2:	bfa8      	it	ge
 800f3c4:	4613      	movge	r3, r2
 800f3c6:	1b5b      	subs	r3, r3, r5
 800f3c8:	80c3      	strh	r3, [r0, #6]
 800f3ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	8003      	strh	r3, [r0, #0]
 800f3d2:	8043      	strh	r3, [r0, #2]
 800f3d4:	8083      	strh	r3, [r0, #4]
 800f3d6:	80c3      	strh	r3, [r0, #6]
 800f3d8:	e7f7      	b.n	800f3ca <_ZN8touchgfx4RectaNERKS0_+0x76>

0800f3da <_ZNK8touchgfx4Rect7isEmptyEv>:
 800f3da:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	dd06      	ble.n	800f3f0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800f3e2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	bfcc      	ite	gt
 800f3ea:	2000      	movgt	r0, #0
 800f3ec:	2001      	movle	r0, #1
 800f3ee:	4770      	bx	lr
 800f3f0:	2001      	movs	r0, #1
 800f3f2:	4770      	bx	lr

0800f3f4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800f3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	4604      	mov	r4, r0
 800f3fc:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800f3fe:	8003      	strh	r3, [r0, #0]
 800f400:	8043      	strh	r3, [r0, #2]
 800f402:	8083      	strh	r3, [r0, #4]
 800f404:	80c3      	strh	r3, [r0, #6]
 800f406:	2d00      	cmp	r5, #0
 800f408:	d040      	beq.n	800f48c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800f40a:	1d28      	adds	r0, r5, #4
 800f40c:	f7ff ffe5 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 800f410:	b988      	cbnz	r0, 800f436 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800f412:	4620      	mov	r0, r4
 800f414:	f7ff ffe1 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 800f418:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800f41c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800f420:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800f424:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800f428:	b138      	cbz	r0, 800f43a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800f42a:	8022      	strh	r2, [r4, #0]
 800f42c:	8063      	strh	r3, [r4, #2]
 800f42e:	f8a4 e004 	strh.w	lr, [r4, #4]
 800f432:	f8a4 c006 	strh.w	ip, [r4, #6]
 800f436:	69ad      	ldr	r5, [r5, #24]
 800f438:	e7e5      	b.n	800f406 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800f43a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f43e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800f442:	4290      	cmp	r0, r2
 800f444:	4607      	mov	r7, r0
 800f446:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800f44a:	460e      	mov	r6, r1
 800f44c:	bfa8      	it	ge
 800f44e:	4617      	movge	r7, r2
 800f450:	4299      	cmp	r1, r3
 800f452:	4472      	add	r2, lr
 800f454:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800f458:	bfa8      	it	ge
 800f45a:	461e      	movge	r6, r3
 800f45c:	4440      	add	r0, r8
 800f45e:	4471      	add	r1, lr
 800f460:	4463      	add	r3, ip
 800f462:	b200      	sxth	r0, r0
 800f464:	8027      	strh	r7, [r4, #0]
 800f466:	b212      	sxth	r2, r2
 800f468:	8066      	strh	r6, [r4, #2]
 800f46a:	b209      	sxth	r1, r1
 800f46c:	b21b      	sxth	r3, r3
 800f46e:	4290      	cmp	r0, r2
 800f470:	bfac      	ite	ge
 800f472:	ebc7 0200 	rsbge	r2, r7, r0
 800f476:	ebc7 0202 	rsblt	r2, r7, r2
 800f47a:	4299      	cmp	r1, r3
 800f47c:	bfac      	ite	ge
 800f47e:	ebc6 0301 	rsbge	r3, r6, r1
 800f482:	ebc6 0303 	rsblt	r3, r6, r3
 800f486:	80a2      	strh	r2, [r4, #4]
 800f488:	80e3      	strh	r3, [r4, #6]
 800f48a:	e7d4      	b.n	800f436 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800f48c:	4620      	mov	r0, r4
 800f48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f492 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800f492:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f496:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800f49a:	b383      	cbz	r3, 800f4fe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800f49c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f49e:	b374      	cbz	r4, 800f4fe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800f4a0:	f9b1 5000 	ldrsh.w	r5, [r1]
 800f4a4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800f4a8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800f4ac:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800f4b0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800f4b4:	b303      	cbz	r3, 800f4f8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800f4b6:	4668      	mov	r0, sp
 800f4b8:	1d21      	adds	r1, r4, #4
 800f4ba:	f8ad 5000 	strh.w	r5, [sp]
 800f4be:	f8ad 6002 	strh.w	r6, [sp, #2]
 800f4c2:	f8ad 7004 	strh.w	r7, [sp, #4]
 800f4c6:	f8ad 8006 	strh.w	r8, [sp, #6]
 800f4ca:	f7ff ff43 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 800f4ce:	4668      	mov	r0, sp
 800f4d0:	f7ff ff83 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 800f4d4:	b980      	cbnz	r0, 800f4f8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800f4d6:	f8bd 3000 	ldrh.w	r3, [sp]
 800f4da:	4669      	mov	r1, sp
 800f4dc:	88a2      	ldrh	r2, [r4, #4]
 800f4de:	4620      	mov	r0, r4
 800f4e0:	1a9b      	subs	r3, r3, r2
 800f4e2:	88e2      	ldrh	r2, [r4, #6]
 800f4e4:	f8ad 3000 	strh.w	r3, [sp]
 800f4e8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f4ec:	1a9b      	subs	r3, r3, r2
 800f4ee:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f4f2:	6823      	ldr	r3, [r4, #0]
 800f4f4:	689b      	ldr	r3, [r3, #8]
 800f4f6:	4798      	blx	r3
 800f4f8:	69a4      	ldr	r4, [r4, #24]
 800f4fa:	2c00      	cmp	r4, #0
 800f4fc:	d1d8      	bne.n	800f4b0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800f4fe:	b002      	add	sp, #8
 800f500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f504 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800f504:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f506:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800f50a:	460d      	mov	r5, r1
 800f50c:	4616      	mov	r6, r2
 800f50e:	b323      	cbz	r3, 800f55a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800f510:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f512:	b314      	cbz	r4, 800f55a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800f514:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800f518:	b1eb      	cbz	r3, 800f556 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800f51a:	6828      	ldr	r0, [r5, #0]
 800f51c:	466b      	mov	r3, sp
 800f51e:	6869      	ldr	r1, [r5, #4]
 800f520:	c303      	stmia	r3!, {r0, r1}
 800f522:	4668      	mov	r0, sp
 800f524:	1d21      	adds	r1, r4, #4
 800f526:	f7ff ff15 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 800f52a:	4668      	mov	r0, sp
 800f52c:	f7ff ff55 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 800f530:	b988      	cbnz	r0, 800f556 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800f532:	f8bd 3000 	ldrh.w	r3, [sp]
 800f536:	4669      	mov	r1, sp
 800f538:	88a2      	ldrh	r2, [r4, #4]
 800f53a:	4620      	mov	r0, r4
 800f53c:	1a9b      	subs	r3, r3, r2
 800f53e:	88e2      	ldrh	r2, [r4, #6]
 800f540:	f8ad 3000 	strh.w	r3, [sp]
 800f544:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f548:	1a9b      	subs	r3, r3, r2
 800f54a:	4632      	mov	r2, r6
 800f54c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f550:	6823      	ldr	r3, [r4, #0]
 800f552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f554:	4798      	blx	r3
 800f556:	69a4      	ldr	r4, [r4, #24]
 800f558:	e7db      	b.n	800f512 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800f55a:	b002      	add	sp, #8
 800f55c:	bd70      	pop	{r4, r5, r6, pc}

0800f55e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800f55e:	6803      	ldr	r3, [r0, #0]
 800f560:	b513      	push	{r0, r1, r4, lr}
 800f562:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 800f566:	2300      	movs	r3, #0
 800f568:	e9cd 3300 	strd	r3, r3, [sp]
 800f56c:	466b      	mov	r3, sp
 800f56e:	47a0      	blx	r4
 800f570:	b002      	add	sp, #8
 800f572:	bd10      	pop	{r4, pc}

0800f574 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800f574:	2301      	movs	r3, #1
 800f576:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800f57a:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800f57e:	4770      	bx	lr

0800f580 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800f580:	2301      	movs	r3, #1
 800f582:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800f586:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800f58a:	4770      	bx	lr

0800f58c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800f58c:	6843      	ldr	r3, [r0, #4]
 800f58e:	2201      	movs	r2, #1
 800f590:	725a      	strb	r2, [r3, #9]
 800f592:	6840      	ldr	r0, [r0, #4]
 800f594:	6803      	ldr	r3, [r0, #0]
 800f596:	691b      	ldr	r3, [r3, #16]
 800f598:	4718      	bx	r3

0800f59a <_ZN8touchgfx3HAL8flushDMAEv>:
 800f59a:	6840      	ldr	r0, [r0, #4]
 800f59c:	6803      	ldr	r3, [r0, #0]
 800f59e:	689b      	ldr	r3, [r3, #8]
 800f5a0:	4718      	bx	r3

0800f5a2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800f5a2:	b530      	push	{r4, r5, lr}
 800f5a4:	b08b      	sub	sp, #44	@ 0x2c
 800f5a6:	6804      	ldr	r4, [r0, #0]
 800f5a8:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800f5ac:	9509      	str	r5, [sp, #36]	@ 0x24
 800f5ae:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800f5b2:	9508      	str	r5, [sp, #32]
 800f5b4:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800f5b8:	9507      	str	r5, [sp, #28]
 800f5ba:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800f5be:	9506      	str	r5, [sp, #24]
 800f5c0:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800f5c4:	9505      	str	r5, [sp, #20]
 800f5c6:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800f5ca:	9504      	str	r5, [sp, #16]
 800f5cc:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800f5d0:	9503      	str	r5, [sp, #12]
 800f5d2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800f5d6:	9502      	str	r5, [sp, #8]
 800f5d8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800f5dc:	e9cd 3500 	strd	r3, r5, [sp]
 800f5e0:	4613      	mov	r3, r2
 800f5e2:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	47a0      	blx	r4
 800f5e8:	b00b      	add	sp, #44	@ 0x2c
 800f5ea:	bd30      	pop	{r4, r5, pc}

0800f5ec <_ZN8touchgfx3HAL10beginFrameEv>:
 800f5ec:	4b04      	ldr	r3, [pc, #16]	@ (800f600 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	b123      	cbz	r3, 800f5fc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800f5f2:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800f5f6:	f080 0001 	eor.w	r0, r0, #1
 800f5fa:	4770      	bx	lr
 800f5fc:	2001      	movs	r0, #1
 800f5fe:	4770      	bx	lr
 800f600:	240255ca 	.word	0x240255ca

0800f604 <_ZN8touchgfx3HAL8endFrameEv>:
 800f604:	b510      	push	{r4, lr}
 800f606:	4604      	mov	r4, r0
 800f608:	6840      	ldr	r0, [r0, #4]
 800f60a:	6803      	ldr	r3, [r0, #0]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	4798      	blx	r3
 800f610:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800f614:	b113      	cbz	r3, 800f61c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800f616:	2301      	movs	r3, #1
 800f618:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800f61c:	bd10      	pop	{r4, pc}

0800f61e <_ZN8touchgfx3HAL10initializeEv>:
 800f61e:	b510      	push	{r4, lr}
 800f620:	4604      	mov	r4, r0
 800f622:	f7f3 fc17 	bl	8002e54 <_ZN8touchgfx10OSWrappers10initializeEv>
 800f626:	f7f2 fc5d 	bl	8001ee4 <_ZN8touchgfx4GPIO4initEv>
 800f62a:	6860      	ldr	r0, [r4, #4]
 800f62c:	6803      	ldr	r3, [r0, #0]
 800f62e:	68db      	ldr	r3, [r3, #12]
 800f630:	4798      	blx	r3
 800f632:	68e0      	ldr	r0, [r4, #12]
 800f634:	6803      	ldr	r3, [r0, #0]
 800f636:	689b      	ldr	r3, [r3, #8]
 800f638:	4798      	blx	r3
 800f63a:	6823      	ldr	r3, [r4, #0]
 800f63c:	4620      	mov	r0, r4
 800f63e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f644:	4718      	bx	r3
	...

0800f648 <_ZN8touchgfx3HAL4tickEv>:
 800f648:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f64a:	6803      	ldr	r3, [r0, #0]
 800f64c:	4604      	mov	r4, r0
 800f64e:	4d62      	ldr	r5, [pc, #392]	@ (800f7d8 <_ZN8touchgfx3HAL4tickEv+0x190>)
 800f650:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f654:	4798      	blx	r3
 800f656:	2800      	cmp	r0, #0
 800f658:	f000 809e 	beq.w	800f798 <_ZN8touchgfx3HAL4tickEv+0x150>
 800f65c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f660:	2b02      	cmp	r3, #2
 800f662:	d002      	beq.n	800f66a <_ZN8touchgfx3HAL4tickEv+0x22>
 800f664:	2001      	movs	r0, #1
 800f666:	f7f2 fba3 	bl	8001db0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800f66a:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800f66e:	2600      	movs	r6, #0
 800f670:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800f674:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800f678:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800f67c:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800f680:	b133      	cbz	r3, 800f690 <_ZN8touchgfx3HAL4tickEv+0x48>
 800f682:	6823      	ldr	r3, [r4, #0]
 800f684:	4620      	mov	r0, r4
 800f686:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800f68a:	4798      	blx	r3
 800f68c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800f690:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800f694:	2601      	movs	r6, #1
 800f696:	6862      	ldr	r2, [r4, #4]
 800f698:	f083 0301 	eor.w	r3, r3, #1
 800f69c:	702e      	strb	r6, [r5, #0]
 800f69e:	7253      	strb	r3, [r2, #9]
 800f6a0:	f005 f8ae 	bl	8014800 <_ZN8touchgfx11Application11getInstanceEv>
 800f6a4:	6803      	ldr	r3, [r0, #0]
 800f6a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6a8:	4798      	blx	r3
 800f6aa:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800f6ae:	b90b      	cbnz	r3, 800f6b4 <_ZN8touchgfx3HAL4tickEv+0x6c>
 800f6b0:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800f6b4:	f005 f8a4 	bl	8014800 <_ZN8touchgfx11Application11getInstanceEv>
 800f6b8:	6803      	ldr	r3, [r0, #0]
 800f6ba:	695b      	ldr	r3, [r3, #20]
 800f6bc:	4798      	blx	r3
 800f6be:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800f6c0:	6803      	ldr	r3, [r0, #0]
 800f6c2:	691b      	ldr	r3, [r3, #16]
 800f6c4:	4798      	blx	r3
 800f6c6:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800f6ca:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800f6ce:	3b01      	subs	r3, #1
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800f6d6:	b10a      	cbz	r2, 800f6dc <_ZN8touchgfx3HAL4tickEv+0x94>
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d1eb      	bne.n	800f6b4 <_ZN8touchgfx3HAL4tickEv+0x6c>
 800f6dc:	4a3f      	ldr	r2, [pc, #252]	@ (800f7dc <_ZN8touchgfx3HAL4tickEv+0x194>)
 800f6de:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800f6e2:	7813      	ldrb	r3, [r2, #0]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	b25b      	sxtb	r3, r3
 800f6e8:	4299      	cmp	r1, r3
 800f6ea:	7013      	strb	r3, [r2, #0]
 800f6ec:	dc10      	bgt.n	800f710 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	68e0      	ldr	r0, [r4, #12]
 800f6f2:	a902      	add	r1, sp, #8
 800f6f4:	7013      	strb	r3, [r2, #0]
 800f6f6:	aa03      	add	r2, sp, #12
 800f6f8:	6803      	ldr	r3, [r0, #0]
 800f6fa:	68db      	ldr	r3, [r3, #12]
 800f6fc:	4798      	blx	r3
 800f6fe:	6823      	ldr	r3, [r4, #0]
 800f700:	2800      	cmp	r0, #0
 800f702:	d059      	beq.n	800f7b8 <_ZN8touchgfx3HAL4tickEv+0x170>
 800f704:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800f708:	4620      	mov	r0, r4
 800f70a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f70e:	4798      	blx	r3
 800f710:	2300      	movs	r3, #0
 800f712:	6960      	ldr	r0, [r4, #20]
 800f714:	f88d 3007 	strb.w	r3, [sp, #7]
 800f718:	b158      	cbz	r0, 800f732 <_ZN8touchgfx3HAL4tickEv+0xea>
 800f71a:	6803      	ldr	r3, [r0, #0]
 800f71c:	f10d 0107 	add.w	r1, sp, #7
 800f720:	68db      	ldr	r3, [r3, #12]
 800f722:	4798      	blx	r3
 800f724:	b128      	cbz	r0, 800f732 <_ZN8touchgfx3HAL4tickEv+0xea>
 800f726:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800f728:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f72c:	6803      	ldr	r3, [r0, #0]
 800f72e:	68db      	ldr	r3, [r3, #12]
 800f730:	4798      	blx	r3
 800f732:	f104 001c 	add.w	r0, r4, #28
 800f736:	f012 fe43 	bl	80223c0 <_ZN8touchgfx8Gestures4tickEv>
 800f73a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800f73e:	b30b      	cbz	r3, 800f784 <_ZN8touchgfx3HAL4tickEv+0x13c>
 800f740:	6920      	ldr	r0, [r4, #16]
 800f742:	6803      	ldr	r3, [r0, #0]
 800f744:	691b      	ldr	r3, [r3, #16]
 800f746:	4798      	blx	r3
 800f748:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800f74a:	4606      	mov	r6, r0
 800f74c:	b903      	cbnz	r3, 800f750 <_ZN8touchgfx3HAL4tickEv+0x108>
 800f74e:	6760      	str	r0, [r4, #116]	@ 0x74
 800f750:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800f752:	4a23      	ldr	r2, [pc, #140]	@ (800f7e0 <_ZN8touchgfx3HAL4tickEv+0x198>)
 800f754:	1af3      	subs	r3, r6, r3
 800f756:	4293      	cmp	r3, r2
 800f758:	d914      	bls.n	800f784 <_ZN8touchgfx3HAL4tickEv+0x13c>
 800f75a:	6920      	ldr	r0, [r4, #16]
 800f75c:	6803      	ldr	r3, [r0, #0]
 800f75e:	699b      	ldr	r3, [r3, #24]
 800f760:	4798      	blx	r3
 800f762:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800f764:	2264      	movs	r2, #100	@ 0x64
 800f766:	1af3      	subs	r3, r6, r3
 800f768:	fbb3 f3f2 	udiv	r3, r3, r2
 800f76c:	fbb0 f0f3 	udiv	r0, r0, r3
 800f770:	2800      	cmp	r0, #0
 800f772:	dc26      	bgt.n	800f7c2 <_ZN8touchgfx3HAL4tickEv+0x17a>
 800f774:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800f778:	6920      	ldr	r0, [r4, #16]
 800f77a:	2100      	movs	r1, #0
 800f77c:	6803      	ldr	r3, [r0, #0]
 800f77e:	69db      	ldr	r3, [r3, #28]
 800f780:	4798      	blx	r3
 800f782:	6766      	str	r6, [r4, #116]	@ 0x74
 800f784:	6823      	ldr	r3, [r4, #0]
 800f786:	4620      	mov	r0, r4
 800f788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f78c:	4798      	blx	r3
 800f78e:	f005 f837 	bl	8014800 <_ZN8touchgfx11Application11getInstanceEv>
 800f792:	6803      	ldr	r3, [r0, #0]
 800f794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f796:	4798      	blx	r3
 800f798:	6823      	ldr	r3, [r4, #0]
 800f79a:	4620      	mov	r0, r4
 800f79c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f7a0:	4798      	blx	r3
 800f7a2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f7a6:	2b02      	cmp	r3, #2
 800f7a8:	d002      	beq.n	800f7b0 <_ZN8touchgfx3HAL4tickEv+0x168>
 800f7aa:	2001      	movs	r0, #1
 800f7ac:	f7f2 fb30 	bl	8001e10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	702b      	strb	r3, [r5, #0]
 800f7b4:	b004      	add	sp, #16
 800f7b6:	bd70      	pop	{r4, r5, r6, pc}
 800f7b8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800f7bc:	4620      	mov	r0, r4
 800f7be:	4798      	blx	r3
 800f7c0:	e7a6      	b.n	800f710 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800f7c2:	2863      	cmp	r0, #99	@ 0x63
 800f7c4:	bfcb      	itete	gt
 800f7c6:	2300      	movgt	r3, #0
 800f7c8:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800f7cc:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800f7d0:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800f7d4:	e7d0      	b.n	800f778 <_ZN8touchgfx3HAL4tickEv+0x130>
 800f7d6:	bf00      	nop
 800f7d8:	240255d0 	.word	0x240255d0
 800f7dc:	240255d1 	.word	0x240255d1
 800f7e0:	05f5e100 	.word	0x05f5e100

0800f7e4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800f7e4:	b510      	push	{r4, lr}
 800f7e6:	4604      	mov	r4, r0
 800f7e8:	f7f3 fb64 	bl	8002eb4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	6863      	ldr	r3, [r4, #4]
 800f7f0:	729a      	strb	r2, [r3, #10]
 800f7f2:	bd10      	pop	{r4, pc}

0800f7f4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800f7f4:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800f7f6:	301c      	adds	r0, #28
 800f7f8:	f012 bde0 	b.w	80223bc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800f7fc <_ZN8touchgfx3HAL5touchEll>:
 800f7fc:	b530      	push	{r4, r5, lr}
 800f7fe:	b087      	sub	sp, #28
 800f800:	4604      	mov	r4, r0
 800f802:	a804      	add	r0, sp, #16
 800f804:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800f808:	f004 fde2 	bl	80143d0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800f80c:	9b04      	ldr	r3, [sp, #16]
 800f80e:	a906      	add	r1, sp, #24
 800f810:	a803      	add	r0, sp, #12
 800f812:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f816:	9b05      	ldr	r3, [sp, #20]
 800f818:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800f81c:	f004 fe2a 	bl	8014474 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800f820:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800f824:	f104 001c 	add.w	r0, r4, #28
 800f828:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800f82c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800f830:	b189      	cbz	r1, 800f856 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800f832:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800f836:	9300      	str	r3, [sp, #0]
 800f838:	4613      	mov	r3, r2
 800f83a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800f83e:	462a      	mov	r2, r5
 800f840:	f012 fdcc 	bl	80223dc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800f844:	b128      	cbz	r0, 800f852 <_ZN8touchgfx3HAL5touchEll+0x56>
 800f846:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f84a:	6623      	str	r3, [r4, #96]	@ 0x60
 800f84c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f850:	6663      	str	r3, [r4, #100]	@ 0x64
 800f852:	b007      	add	sp, #28
 800f854:	bd30      	pop	{r4, r5, pc}
 800f856:	f012 fe01 	bl	802245c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800f85a:	2301      	movs	r3, #1
 800f85c:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800f860:	e7f1      	b.n	800f846 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800f862 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800f862:	b510      	push	{r4, lr}
 800f864:	2b00      	cmp	r3, #0
 800f866:	d046      	beq.n	800f8f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f868:	ea81 0002 	eor.w	r0, r1, r2
 800f86c:	07c4      	lsls	r4, r0, #31
 800f86e:	d508      	bpl.n	800f882 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800f870:	440b      	add	r3, r1
 800f872:	3a01      	subs	r2, #1
 800f874:	428b      	cmp	r3, r1
 800f876:	d93e      	bls.n	800f8f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f878:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f87c:	f801 0b01 	strb.w	r0, [r1], #1
 800f880:	e7f8      	b.n	800f874 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800f882:	07d0      	lsls	r0, r2, #31
 800f884:	bf42      	ittt	mi
 800f886:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800f88a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800f88e:	f801 0b01 	strbmi.w	r0, [r1], #1
 800f892:	2b01      	cmp	r3, #1
 800f894:	d911      	bls.n	800f8ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f896:	ea81 0402 	eor.w	r4, r1, r2
 800f89a:	4610      	mov	r0, r2
 800f89c:	07a4      	lsls	r4, r4, #30
 800f89e:	d022      	beq.n	800f8e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800f8a0:	f023 0401 	bic.w	r4, r3, #1
 800f8a4:	440c      	add	r4, r1
 800f8a6:	428c      	cmp	r4, r1
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	d904      	bls.n	800f8b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800f8ac:	8812      	ldrh	r2, [r2, #0]
 800f8ae:	3002      	adds	r0, #2
 800f8b0:	f821 2b02 	strh.w	r2, [r1], #2
 800f8b4:	e7f7      	b.n	800f8a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800f8b6:	f003 0301 	and.w	r3, r3, #1
 800f8ba:	f023 0003 	bic.w	r0, r3, #3
 800f8be:	4408      	add	r0, r1
 800f8c0:	4288      	cmp	r0, r1
 800f8c2:	4614      	mov	r4, r2
 800f8c4:	d904      	bls.n	800f8d0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800f8c6:	6824      	ldr	r4, [r4, #0]
 800f8c8:	3204      	adds	r2, #4
 800f8ca:	f841 4b04 	str.w	r4, [r1], #4
 800f8ce:	e7f7      	b.n	800f8c0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800f8d0:	f003 0303 	and.w	r3, r3, #3
 800f8d4:	3a01      	subs	r2, #1
 800f8d6:	440b      	add	r3, r1
 800f8d8:	428b      	cmp	r3, r1
 800f8da:	d90c      	bls.n	800f8f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f8dc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f8e0:	f801 0b01 	strb.w	r0, [r1], #1
 800f8e4:	e7f8      	b.n	800f8d8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800f8e6:	0790      	lsls	r0, r2, #30
 800f8e8:	d0e7      	beq.n	800f8ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f8ea:	f832 0b02 	ldrh.w	r0, [r2], #2
 800f8ee:	3b02      	subs	r3, #2
 800f8f0:	f821 0b02 	strh.w	r0, [r1], #2
 800f8f4:	e7e1      	b.n	800f8ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f8f6:	2001      	movs	r0, #1
 800f8f8:	bd10      	pop	{r4, pc}

0800f8fa <_ZN8touchgfx3HAL7noTouchEv>:
 800f8fa:	b510      	push	{r4, lr}
 800f8fc:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800f900:	4604      	mov	r4, r0
 800f902:	b153      	cbz	r3, 800f91a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800f904:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800f908:	2101      	movs	r1, #1
 800f90a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800f90e:	301c      	adds	r0, #28
 800f910:	f012 fda4 	bl	802245c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800f914:	2300      	movs	r3, #0
 800f916:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800f91a:	bd10      	pop	{r4, pc}

0800f91c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800f91c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f920:	b085      	sub	sp, #20
 800f922:	4604      	mov	r4, r0
 800f924:	2000      	movs	r0, #0
 800f926:	4699      	mov	r9, r3
 800f928:	ad04      	add	r5, sp, #16
 800f92a:	460f      	mov	r7, r1
 800f92c:	4690      	mov	r8, r2
 800f92e:	f845 0d04 	str.w	r0, [r5, #-4]!
 800f932:	69a0      	ldr	r0, [r4, #24]
 800f934:	6806      	ldr	r6, [r0, #0]
 800f936:	9501      	str	r5, [sp, #4]
 800f938:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800f93c:	9500      	str	r5, [sp, #0]
 800f93e:	6835      	ldr	r5, [r6, #0]
 800f940:	47a8      	blx	r5
 800f942:	4d10      	ldr	r5, [pc, #64]	@ (800f984 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800f944:	4606      	mov	r6, r0
 800f946:	f8a5 9000 	strh.w	r9, [r5]
 800f94a:	f7f4 fbbd 	bl	80040c8 <_ZN8touchgfx3HAL3lcdEv>
 800f94e:	6803      	ldr	r3, [r0, #0]
 800f950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f952:	4798      	blx	r3
 800f954:	b128      	cbz	r0, 800f962 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800f956:	2801      	cmp	r0, #1
 800f958:	d00b      	beq.n	800f972 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800f95a:	4630      	mov	r0, r6
 800f95c:	b005      	add	sp, #20
 800f95e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f962:	882b      	ldrh	r3, [r5, #0]
 800f964:	fb08 7203 	mla	r2, r8, r3, r7
 800f968:	9b03      	ldr	r3, [sp, #12]
 800f96a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800f96e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800f970:	e7f3      	b.n	800f95a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800f972:	882a      	ldrh	r2, [r5, #0]
 800f974:	9b03      	ldr	r3, [sp, #12]
 800f976:	fb08 7202 	mla	r2, r8, r2, r7
 800f97a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f97e:	1a9a      	subs	r2, r3, r2
 800f980:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800f982:	e7ea      	b.n	800f95a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800f984:	240255c6 	.word	0x240255c6

0800f988 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 800f988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f98a:	4b15      	ldr	r3, [pc, #84]	@ (800f9e0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 800f98c:	460f      	mov	r7, r1
 800f98e:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 800f992:	4606      	mov	r6, r0
 800f994:	881b      	ldrh	r3, [r3, #0]
 800f996:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800f998:	fb93 f4f4 	sdiv	r4, r3, r4
 800f99c:	f7f4 fb94 	bl	80040c8 <_ZN8touchgfx3HAL3lcdEv>
 800f9a0:	6803      	ldr	r3, [r0, #0]
 800f9a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9a4:	4798      	blx	r3
 800f9a6:	2801      	cmp	r0, #1
 800f9a8:	d00b      	beq.n	800f9c2 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 800f9aa:	d303      	bcc.n	800f9b4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 800f9ac:	2802      	cmp	r0, #2
 800f9ae:	d010      	beq.n	800f9d2 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 800f9b0:	63f5      	str	r5, [r6, #60]	@ 0x3c
 800f9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9b4:	4b0b      	ldr	r3, [pc, #44]	@ (800f9e4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800f9b6:	437c      	muls	r4, r7
 800f9b8:	8819      	ldrh	r1, [r3, #0]
 800f9ba:	434c      	muls	r4, r1
 800f9bc:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 800f9c0:	e7f6      	b.n	800f9b0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800f9c2:	4b08      	ldr	r3, [pc, #32]	@ (800f9e4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800f9c4:	437c      	muls	r4, r7
 800f9c6:	8819      	ldrh	r1, [r3, #0]
 800f9c8:	434c      	muls	r4, r1
 800f9ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f9ce:	1b2d      	subs	r5, r5, r4
 800f9d0:	e7ee      	b.n	800f9b0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800f9d2:	4b04      	ldr	r3, [pc, #16]	@ (800f9e4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800f9d4:	437c      	muls	r4, r7
 800f9d6:	8819      	ldrh	r1, [r3, #0]
 800f9d8:	434c      	muls	r4, r1
 800f9da:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 800f9de:	e7e7      	b.n	800f9b0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800f9e0:	240255c8 	.word	0x240255c8
 800f9e4:	240255c6 	.word	0x240255c6

0800f9e8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800f9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9ea:	b08b      	sub	sp, #44	@ 0x2c
 800f9ec:	4617      	mov	r7, r2
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	460e      	mov	r6, r1
 800f9f2:	461d      	mov	r5, r3
 800f9f4:	f7f4 fb68 	bl	80040c8 <_ZN8touchgfx3HAL3lcdEv>
 800f9f8:	6803      	ldr	r3, [r0, #0]
 800f9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9fc:	4798      	blx	r3
 800f9fe:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800fa02:	9007      	str	r0, [sp, #28]
 800fa04:	4631      	mov	r1, r6
 800fa06:	6822      	ldr	r2, [r4, #0]
 800fa08:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800fa0c:	4b0c      	ldr	r3, [pc, #48]	@ (800fa40 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800fa0e:	4620      	mov	r0, r4
 800fa10:	881b      	ldrh	r3, [r3, #0]
 800fa12:	9306      	str	r3, [sp, #24]
 800fa14:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800fa18:	9305      	str	r3, [sp, #20]
 800fa1a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800fa1e:	9304      	str	r3, [sp, #16]
 800fa20:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800fa24:	9303      	str	r3, [sp, #12]
 800fa26:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800fa2a:	9302      	str	r3, [sp, #8]
 800fa2c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800fa30:	e9cd 5300 	strd	r5, r3, [sp]
 800fa34:	463b      	mov	r3, r7
 800fa36:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800fa38:	2200      	movs	r2, #0
 800fa3a:	47a8      	blx	r5
 800fa3c:	b00b      	add	sp, #44	@ 0x2c
 800fa3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa40:	240255c6 	.word	0x240255c6

0800fa44 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800fa44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa48:	4698      	mov	r8, r3
 800fa4a:	6803      	ldr	r3, [r0, #0]
 800fa4c:	b08b      	sub	sp, #44	@ 0x2c
 800fa4e:	4617      	mov	r7, r2
 800fa50:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800fa52:	460e      	mov	r6, r1
 800fa54:	4b13      	ldr	r3, [pc, #76]	@ (800faa4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800fa56:	4604      	mov	r4, r0
 800fa58:	f8b3 9000 	ldrh.w	r9, [r3]
 800fa5c:	f7f4 fb34 	bl	80040c8 <_ZN8touchgfx3HAL3lcdEv>
 800fa60:	6803      	ldr	r3, [r0, #0]
 800fa62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa64:	4798      	blx	r3
 800fa66:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	4631      	mov	r1, r6
 800fa6e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800fa72:	2302      	movs	r3, #2
 800fa74:	4620      	mov	r0, r4
 800fa76:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	9305      	str	r3, [sp, #20]
 800fa7e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800fa82:	9304      	str	r3, [sp, #16]
 800fa84:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800fa88:	9303      	str	r3, [sp, #12]
 800fa8a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800fa8e:	9302      	str	r3, [sp, #8]
 800fa90:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800fa94:	e9cd 8300 	strd	r8, r3, [sp]
 800fa98:	463b      	mov	r3, r7
 800fa9a:	47a8      	blx	r5
 800fa9c:	b00b      	add	sp, #44	@ 0x2c
 800fa9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faa2:	bf00      	nop
 800faa4:	240255c6 	.word	0x240255c6

0800faa8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800faa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800faac:	4698      	mov	r8, r3
 800faae:	6803      	ldr	r3, [r0, #0]
 800fab0:	b087      	sub	sp, #28
 800fab2:	460e      	mov	r6, r1
 800fab4:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 800fab6:	4617      	mov	r7, r2
 800fab8:	4b0f      	ldr	r3, [pc, #60]	@ (800faf8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800faba:	4604      	mov	r4, r0
 800fabc:	f8b3 9000 	ldrh.w	r9, [r3]
 800fac0:	f7f4 fb02 	bl	80040c8 <_ZN8touchgfx3HAL3lcdEv>
 800fac4:	6803      	ldr	r3, [r0, #0]
 800fac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fac8:	4798      	blx	r3
 800faca:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800face:	463a      	mov	r2, r7
 800fad0:	4631      	mov	r1, r6
 800fad2:	f8cd 900c 	str.w	r9, [sp, #12]
 800fad6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800fada:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800fade:	4620      	mov	r0, r4
 800fae0:	9302      	str	r3, [sp, #8]
 800fae2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800fae6:	9301      	str	r3, [sp, #4]
 800fae8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800faec:	9300      	str	r3, [sp, #0]
 800faee:	4643      	mov	r3, r8
 800faf0:	47a8      	blx	r5
 800faf2:	b007      	add	sp, #28
 800faf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faf8:	240255c6 	.word	0x240255c6

0800fafc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800fafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb00:	4604      	mov	r4, r0
 800fb02:	b08f      	sub	sp, #60	@ 0x3c
 800fb04:	4610      	mov	r0, r2
 800fb06:	460d      	mov	r5, r1
 800fb08:	4691      	mov	r9, r2
 800fb0a:	461e      	mov	r6, r3
 800fb0c:	f008 fb42 	bl	8018194 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	f000 809d 	beq.w	800fc50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800fb16:	6823      	ldr	r3, [r4, #0]
 800fb18:	4620      	mov	r0, r4
 800fb1a:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800fcb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800fb1e:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800fb22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb24:	4798      	blx	r3
 800fb26:	6823      	ldr	r3, [r4, #0]
 800fb28:	4620      	mov	r0, r4
 800fb2a:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800fcb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800fb2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb30:	4798      	blx	r3
 800fb32:	f8bb 3000 	ldrh.w	r3, [fp]
 800fb36:	4f5c      	ldr	r7, [pc, #368]	@ (800fca8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800fb38:	9301      	str	r3, [sp, #4]
 800fb3a:	f8ba 3000 	ldrh.w	r3, [sl]
 800fb3e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800fb42:	4640      	mov	r0, r8
 800fb44:	9302      	str	r3, [sp, #8]
 800fb46:	883b      	ldrh	r3, [r7, #0]
 800fb48:	9303      	str	r3, [sp, #12]
 800fb4a:	4b58      	ldr	r3, [pc, #352]	@ (800fcac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800fb4c:	881a      	ldrh	r2, [r3, #0]
 800fb4e:	9305      	str	r3, [sp, #20]
 800fb50:	9204      	str	r2, [sp, #16]
 800fb52:	f008 fc6f 	bl	8018434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fb56:	8038      	strh	r0, [r7, #0]
 800fb58:	4640      	mov	r0, r8
 800fb5a:	f008 fc9f 	bl	801849c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fb5e:	9b05      	ldr	r3, [sp, #20]
 800fb60:	b280      	uxth	r0, r0
 800fb62:	8018      	strh	r0, [r3, #0]
 800fb64:	4b52      	ldr	r3, [pc, #328]	@ (800fcb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800fb66:	781b      	ldrb	r3, [r3, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d174      	bne.n	800fc56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800fb6c:	883b      	ldrh	r3, [r7, #0]
 800fb6e:	f8aa 0000 	strh.w	r0, [sl]
 800fb72:	f8ab 3000 	strh.w	r3, [fp]
 800fb76:	4648      	mov	r0, r9
 800fb78:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800fb7c:	f008 fb0a 	bl	8018194 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800fb80:	2200      	movs	r2, #0
 800fb82:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800fb86:	4611      	mov	r1, r2
 800fb88:	4628      	mov	r0, r5
 800fb8a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800fb8e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800fb92:	f7f4 fbe6 	bl	8004362 <_ZN8touchgfx8Drawable5setXYEss>
 800fb96:	2301      	movs	r3, #1
 800fb98:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800fb9c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800fba0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	dd5c      	ble.n	800fc62 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800fba8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	dd58      	ble.n	800fc62 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800fbb0:	462a      	mov	r2, r5
 800fbb2:	ab0a      	add	r3, sp, #40	@ 0x28
 800fbb4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800fbb8:	6851      	ldr	r1, [r2, #4]
 800fbba:	c303      	stmia	r3!, {r0, r1}
 800fbbc:	4631      	mov	r1, r6
 800fbbe:	a80a      	add	r0, sp, #40	@ 0x28
 800fbc0:	f7ff fbc8 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 800fbc4:	4b38      	ldr	r3, [pc, #224]	@ (800fca8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800fbc6:	2100      	movs	r1, #0
 800fbc8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fbcc:	4b37      	ldr	r3, [pc, #220]	@ (800fcac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800fbce:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800fbd2:	aa0a      	add	r2, sp, #40	@ 0x28
 800fbd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fbd8:	910c      	str	r1, [sp, #48]	@ 0x30
 800fbda:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800fbde:	ab08      	add	r3, sp, #32
 800fbe0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbe4:	e883 0003 	stmia.w	r3, {r0, r1}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	a90c      	add	r1, sp, #48	@ 0x30
 800fbec:	f7ff fbb2 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 800fbf0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d13c      	bne.n	800fc70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800fbf6:	2000      	movs	r0, #0
 800fbf8:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800fbfc:	2600      	movs	r6, #0
 800fbfe:	696b      	ldr	r3, [r5, #20]
 800fc00:	a908      	add	r1, sp, #32
 800fc02:	682a      	ldr	r2, [r5, #0]
 800fc04:	4628      	mov	r0, r5
 800fc06:	9305      	str	r3, [sp, #20]
 800fc08:	616e      	str	r6, [r5, #20]
 800fc0a:	6892      	ldr	r2, [r2, #8]
 800fc0c:	4790      	blx	r2
 800fc0e:	9b05      	ldr	r3, [sp, #20]
 800fc10:	4652      	mov	r2, sl
 800fc12:	4649      	mov	r1, r9
 800fc14:	616b      	str	r3, [r5, #20]
 800fc16:	4628      	mov	r0, r5
 800fc18:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800fc1c:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800fc20:	f7f4 fb9f 	bl	8004362 <_ZN8touchgfx8Drawable5setXYEss>
 800fc24:	9a01      	ldr	r2, [sp, #4]
 800fc26:	4b23      	ldr	r3, [pc, #140]	@ (800fcb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800fc28:	4620      	mov	r0, r4
 800fc2a:	801a      	strh	r2, [r3, #0]
 800fc2c:	9a02      	ldr	r2, [sp, #8]
 800fc2e:	4b22      	ldr	r3, [pc, #136]	@ (800fcb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800fc30:	801a      	strh	r2, [r3, #0]
 800fc32:	9a03      	ldr	r2, [sp, #12]
 800fc34:	4b1c      	ldr	r3, [pc, #112]	@ (800fca8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800fc36:	801a      	strh	r2, [r3, #0]
 800fc38:	4b1c      	ldr	r3, [pc, #112]	@ (800fcac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800fc3a:	9a04      	ldr	r2, [sp, #16]
 800fc3c:	801a      	strh	r2, [r3, #0]
 800fc3e:	6823      	ldr	r3, [r4, #0]
 800fc40:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800fc44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc46:	4798      	blx	r3
 800fc48:	6823      	ldr	r3, [r4, #0]
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc4e:	4798      	blx	r3
 800fc50:	b00f      	add	sp, #60	@ 0x3c
 800fc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc56:	883b      	ldrh	r3, [r7, #0]
 800fc58:	f8ab 0000 	strh.w	r0, [fp]
 800fc5c:	f8aa 3000 	strh.w	r3, [sl]
 800fc60:	e789      	b.n	800fb76 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800fc62:	462a      	mov	r2, r5
 800fc64:	ab0a      	add	r3, sp, #40	@ 0x28
 800fc66:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800fc6a:	6851      	ldr	r1, [r2, #4]
 800fc6c:	c303      	stmia	r3!, {r0, r1}
 800fc6e:	e7a9      	b.n	800fbc4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800fc70:	a807      	add	r0, sp, #28
 800fc72:	f008 fd1d 	bl	80186b0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800fc76:	4606      	mov	r6, r0
 800fc78:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800fc7a:	6803      	ldr	r3, [r0, #0]
 800fc7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc7e:	4798      	blx	r3
 800fc80:	4286      	cmp	r6, r0
 800fc82:	d1b8      	bne.n	800fbf6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800fc84:	f7f4 fa20 	bl	80040c8 <_ZN8touchgfx3HAL3lcdEv>
 800fc88:	6803      	ldr	r3, [r0, #0]
 800fc8a:	4606      	mov	r6, r0
 800fc8c:	a807      	add	r0, sp, #28
 800fc8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc90:	9305      	str	r3, [sp, #20]
 800fc92:	f008 fd0d 	bl	80186b0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800fc96:	9b05      	ldr	r3, [sp, #20]
 800fc98:	4601      	mov	r1, r0
 800fc9a:	4630      	mov	r0, r6
 800fc9c:	4798      	blx	r3
 800fc9e:	f080 0001 	eor.w	r0, r0, #1
 800fca2:	b2c0      	uxtb	r0, r0
 800fca4:	e7a8      	b.n	800fbf8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800fca6:	bf00      	nop
 800fca8:	240255c0 	.word	0x240255c0
 800fcac:	240255c2 	.word	0x240255c2
 800fcb0:	240255c4 	.word	0x240255c4
 800fcb4:	240255c6 	.word	0x240255c6
 800fcb8:	240255c8 	.word	0x240255c8

0800fcbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800fcbc:	4b07      	ldr	r3, [pc, #28]	@ (800fcdc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800fcbe:	b510      	push	{r4, lr}
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	4604      	mov	r4, r0
 800fcc4:	b13b      	cbz	r3, 800fcd6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800fcc6:	6803      	ldr	r3, [r0, #0]
 800fcc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcca:	4798      	blx	r3
 800fccc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fcce:	4283      	cmp	r3, r0
 800fcd0:	d101      	bne.n	800fcd6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800fcd2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800fcd4:	bd10      	pop	{r4, pc}
 800fcd6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800fcd8:	e7fc      	b.n	800fcd4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800fcda:	bf00      	nop
 800fcdc:	240255ca 	.word	0x240255ca

0800fce0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800fce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fce4:	461d      	mov	r5, r3
 800fce6:	b08a      	sub	sp, #40	@ 0x28
 800fce8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fcec:	4690      	mov	r8, r2
 800fcee:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800fcf2:	2400      	movs	r4, #0
 800fcf4:	4607      	mov	r7, r0
 800fcf6:	fb06 8505 	mla	r5, r6, r5, r8
 800fcfa:	9404      	str	r4, [sp, #16]
 800fcfc:	f88d 4020 	strb.w	r4, [sp, #32]
 800fd00:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800fd04:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800fd08:	f8ad 3018 	strh.w	r3, [sp, #24]
 800fd0c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800fd10:	f8ad 301a 	strh.w	r3, [sp, #26]
 800fd14:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800fd18:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fd1c:	f7ff ffce 	bl	800fcbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fd20:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f8ad 601e 	strh.w	r6, [sp, #30]
 800fd2a:	a901      	add	r1, sp, #4
 800fd2c:	9505      	str	r5, [sp, #20]
 800fd2e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800fd32:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800fd36:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800fd3a:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800fd3e:	6803      	ldr	r3, [r0, #0]
 800fd40:	685b      	ldr	r3, [r3, #4]
 800fd42:	4798      	blx	r3
 800fd44:	b00a      	add	sp, #40	@ 0x28
 800fd46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd4a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800fd4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd4e:	b08b      	sub	sp, #44	@ 0x2c
 800fd50:	2400      	movs	r4, #0
 800fd52:	4691      	mov	r9, r2
 800fd54:	461d      	mov	r5, r3
 800fd56:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800fd5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fd5e:	4688      	mov	r8, r1
 800fd60:	4607      	mov	r7, r0
 800fd62:	9404      	str	r4, [sp, #16]
 800fd64:	fb06 9505 	mla	r5, r6, r5, r9
 800fd68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd6c:	f7ff ffa6 	bl	800fcbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fd70:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800fd74:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800fd7e:	a901      	add	r1, sp, #4
 800fd80:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800fd84:	9505      	str	r5, [sp, #20]
 800fd86:	f8ad 301a 	strh.w	r3, [sp, #26]
 800fd8a:	f8ad 401c 	strh.w	r4, [sp, #28]
 800fd8e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800fd92:	f8cd 8010 	str.w	r8, [sp, #16]
 800fd96:	f8ad 4020 	strh.w	r4, [sp, #32]
 800fd9a:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800fd9e:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800fda2:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800fda6:	6803      	ldr	r3, [r0, #0]
 800fda8:	685b      	ldr	r3, [r3, #4]
 800fdaa:	4798      	blx	r3
 800fdac:	b00b      	add	sp, #44	@ 0x2c
 800fdae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800fdb4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800fdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdb8:	b08a      	sub	sp, #40	@ 0x28
 800fdba:	4698      	mov	r8, r3
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	4606      	mov	r6, r0
 800fdc0:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800fdc4:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800fdc8:	2d0b      	cmp	r5, #11
 800fdca:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800fdce:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800fdd2:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800fdd6:	9304      	str	r3, [sp, #16]
 800fdd8:	d137      	bne.n	800fe4a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800fdda:	2380      	movs	r3, #128	@ 0x80
 800fddc:	f88d 0020 	strb.w	r0, [sp, #32]
 800fde0:	4630      	mov	r0, r6
 800fde2:	9203      	str	r2, [sp, #12]
 800fde4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800fde8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800fdec:	f8ad 3018 	strh.w	r3, [sp, #24]
 800fdf0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800fdf4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800fdf8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800fdfc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fe00:	f7ff ff5c 	bl	800fcbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fe04:	2c0b      	cmp	r4, #11
 800fe06:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800fe0a:	f8ad 701e 	strh.w	r7, [sp, #30]
 800fe0e:	bf94      	ite	ls
 800fe10:	4b19      	ldrls	r3, [pc, #100]	@ (800fe78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800fe12:	2100      	movhi	r1, #0
 800fe14:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800fe18:	bf98      	it	ls
 800fe1a:	5d19      	ldrbls	r1, [r3, r4]
 800fe1c:	fb02 8307 	mla	r3, r2, r7, r8
 800fe20:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800fe24:	10c9      	asrs	r1, r1, #3
 800fe26:	fb01 0003 	mla	r0, r1, r3, r0
 800fe2a:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800fe2e:	a901      	add	r1, sp, #4
 800fe30:	9005      	str	r0, [sp, #20]
 800fe32:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800fe36:	2300      	movs	r3, #0
 800fe38:	6870      	ldr	r0, [r6, #4]
 800fe3a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800fe3e:	6803      	ldr	r3, [r0, #0]
 800fe40:	685b      	ldr	r3, [r3, #4]
 800fe42:	4798      	blx	r3
 800fe44:	b00a      	add	sp, #40	@ 0x28
 800fe46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe4a:	2d02      	cmp	r5, #2
 800fe4c:	d109      	bne.n	800fe62 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800fe4e:	28ff      	cmp	r0, #255	@ 0xff
 800fe50:	d105      	bne.n	800fe5e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800fe52:	f1bc 0f00 	cmp.w	ip, #0
 800fe56:	bf14      	ite	ne
 800fe58:	2340      	movne	r3, #64	@ 0x40
 800fe5a:	2320      	moveq	r3, #32
 800fe5c:	e7be      	b.n	800fddc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800fe5e:	2340      	movs	r3, #64	@ 0x40
 800fe60:	e7bc      	b.n	800fddc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800fe62:	28ff      	cmp	r0, #255	@ 0xff
 800fe64:	d105      	bne.n	800fe72 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800fe66:	f1bc 0f00 	cmp.w	ip, #0
 800fe6a:	bf14      	ite	ne
 800fe6c:	2304      	movne	r3, #4
 800fe6e:	2301      	moveq	r3, #1
 800fe70:	e7b4      	b.n	800fddc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800fe72:	2304      	movs	r3, #4
 800fe74:	e7b2      	b.n	800fddc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800fe76:	bf00      	nop
 800fe78:	0802720c 	.word	0x0802720c

0800fe7c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800fe7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe80:	b08b      	sub	sp, #44	@ 0x2c
 800fe82:	461d      	mov	r5, r3
 800fe84:	2400      	movs	r4, #0
 800fe86:	4688      	mov	r8, r1
 800fe88:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800fe8c:	4693      	mov	fp, r2
 800fe8e:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800fe92:	4607      	mov	r7, r0
 800fe94:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800fe98:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800fe9c:	9404      	str	r4, [sp, #16]
 800fe9e:	bf14      	ite	ne
 800fea0:	2308      	movne	r3, #8
 800fea2:	2302      	moveq	r3, #2
 800fea4:	fb05 b50a 	mla	r5, r5, sl, fp
 800fea8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800feac:	f7ff ff06 	bl	800fcbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800feb0:	2e0b      	cmp	r6, #11
 800feb2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800feb6:	a901      	add	r1, sp, #4
 800feb8:	bf98      	it	ls
 800feba:	4b13      	ldrls	r3, [pc, #76]	@ (800ff08 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800febc:	f8ad a01e 	strh.w	sl, [sp, #30]
 800fec0:	bf98      	it	ls
 800fec2:	5d9c      	ldrbls	r4, [r3, r6]
 800fec4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800fec8:	10e4      	asrs	r4, r4, #3
 800feca:	f8cd 8010 	str.w	r8, [sp, #16]
 800fece:	f8ad 3018 	strh.w	r3, [sp, #24]
 800fed2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800fed6:	fb04 0405 	mla	r4, r4, r5, r0
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f8ad 301a 	strh.w	r3, [sp, #26]
 800fee0:	2300      	movs	r3, #0
 800fee2:	9405      	str	r4, [sp, #20]
 800fee4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fee8:	f88d 9020 	strb.w	r9, [sp, #32]
 800feec:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800fef0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800fef4:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800fef8:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800fefc:	6803      	ldr	r3, [r0, #0]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	4798      	blx	r3
 800ff02:	b00b      	add	sp, #44	@ 0x2c
 800ff04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff08:	0802720c 	.word	0x0802720c

0800ff0c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800ff0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff10:	461e      	mov	r6, r3
 800ff12:	4b0a      	ldr	r3, [pc, #40]	@ (800ff3c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800ff14:	460f      	mov	r7, r1
 800ff16:	4690      	mov	r8, r2
 800ff18:	881d      	ldrh	r5, [r3, #0]
 800ff1a:	f7f4 f8d5 	bl	80040c8 <_ZN8touchgfx3HAL3lcdEv>
 800ff1e:	6803      	ldr	r3, [r0, #0]
 800ff20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff22:	4798      	blx	r3
 800ff24:	280b      	cmp	r0, #11
 800ff26:	bf96      	itet	ls
 800ff28:	4b05      	ldrls	r3, [pc, #20]	@ (800ff40 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800ff2a:	2400      	movhi	r4, #0
 800ff2c:	5c1c      	ldrbls	r4, [r3, r0]
 800ff2e:	fb08 7005 	mla	r0, r8, r5, r7
 800ff32:	10e4      	asrs	r4, r4, #3
 800ff34:	fb04 6000 	mla	r0, r4, r0, r6
 800ff38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff3c:	240255c6 	.word	0x240255c6
 800ff40:	0802720c 	.word	0x0802720c

0800ff44 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800ff44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff46:	b08b      	sub	sp, #44	@ 0x2c
 800ff48:	461f      	mov	r7, r3
 800ff4a:	4604      	mov	r4, r0
 800ff4c:	4616      	mov	r6, r2
 800ff4e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800ff52:	2500      	movs	r5, #0
 800ff54:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ff58:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800ff5c:	9504      	str	r5, [sp, #16]
 800ff5e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ff62:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800ff66:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ff6a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800ff6e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ff72:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800ff76:	f88d 3020 	strb.w	r3, [sp, #32]
 800ff7a:	f7ff fe9f 	bl	800fcbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ff7e:	463a      	mov	r2, r7
 800ff80:	4631      	mov	r1, r6
 800ff82:	4603      	mov	r3, r0
 800ff84:	4620      	mov	r0, r4
 800ff86:	f7ff ffc1 	bl	800ff0c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ff8a:	4b0e      	ldr	r3, [pc, #56]	@ (800ffc4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800ff8c:	9005      	str	r0, [sp, #20]
 800ff8e:	881b      	ldrh	r3, [r3, #0]
 800ff90:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ff94:	f7f4 f898 	bl	80040c8 <_ZN8touchgfx3HAL3lcdEv>
 800ff98:	6803      	ldr	r3, [r0, #0]
 800ff9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff9c:	4798      	blx	r3
 800ff9e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ffa0:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800ffa4:	a901      	add	r1, sp, #4
 800ffa6:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800ffaa:	9304      	str	r3, [sp, #16]
 800ffac:	6860      	ldr	r0, [r4, #4]
 800ffae:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800ffb2:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800ffb6:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800ffba:	6803      	ldr	r3, [r0, #0]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	4798      	blx	r3
 800ffc0:	b00b      	add	sp, #44	@ 0x2c
 800ffc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffc4:	240255c6 	.word	0x240255c6

0800ffc8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800ffc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffca:	b08d      	sub	sp, #52	@ 0x34
 800ffcc:	2501      	movs	r5, #1
 800ffce:	4604      	mov	r4, r0
 800ffd0:	466b      	mov	r3, sp
 800ffd2:	9503      	str	r5, [sp, #12]
 800ffd4:	e883 0006 	stmia.w	r3, {r1, r2}
 800ffd8:	2300      	movs	r3, #0
 800ffda:	f8bd 6000 	ldrh.w	r6, [sp]
 800ffde:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800ffe2:	9306      	str	r3, [sp, #24]
 800ffe4:	6803      	ldr	r3, [r0, #0]
 800ffe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffe8:	4798      	blx	r3
 800ffea:	463a      	mov	r2, r7
 800ffec:	4631      	mov	r1, r6
 800ffee:	4603      	mov	r3, r0
 800fff0:	4620      	mov	r0, r4
 800fff2:	f7ff ff8b 	bl	800ff0c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800fff6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800fff8:	9004      	str	r0, [sp, #16]
 800fffa:	9307      	str	r3, [sp, #28]
 800fffc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010000:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010004:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010008:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801000c:	4b0e      	ldr	r3, [pc, #56]	@ (8010048 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801000e:	881b      	ldrh	r3, [r3, #0]
 8010010:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8010014:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8010018:	f7f4 f856 	bl	80040c8 <_ZN8touchgfx3HAL3lcdEv>
 801001c:	6803      	ldr	r3, [r0, #0]
 801001e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010020:	4798      	blx	r3
 8010022:	23ff      	movs	r3, #255	@ 0xff
 8010024:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8010028:	a903      	add	r1, sp, #12
 801002a:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801002e:	6860      	ldr	r0, [r4, #4]
 8010030:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8010034:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8010038:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 801003c:	6803      	ldr	r3, [r0, #0]
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	4798      	blx	r3
 8010042:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8010044:	b00d      	add	sp, #52	@ 0x34
 8010046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010048:	240255c6 	.word	0x240255c6

0801004c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801004c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010050:	b08c      	sub	sp, #48	@ 0x30
 8010052:	461e      	mov	r6, r3
 8010054:	2300      	movs	r3, #0
 8010056:	4604      	mov	r4, r0
 8010058:	466d      	mov	r5, sp
 801005a:	9306      	str	r3, [sp, #24]
 801005c:	6803      	ldr	r3, [r0, #0]
 801005e:	e885 0006 	stmia.w	r5, {r1, r2}
 8010062:	2501      	movs	r5, #1
 8010064:	f8bd 7000 	ldrh.w	r7, [sp]
 8010068:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801006c:	9503      	str	r5, [sp, #12]
 801006e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010070:	4798      	blx	r3
 8010072:	4642      	mov	r2, r8
 8010074:	4639      	mov	r1, r7
 8010076:	4603      	mov	r3, r0
 8010078:	4620      	mov	r0, r4
 801007a:	f7ff ff47 	bl	800ff0c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801007e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010082:	9004      	str	r0, [sp, #16]
 8010084:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010088:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801008c:	9607      	str	r6, [sp, #28]
 801008e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8010092:	4b10      	ldr	r3, [pc, #64]	@ (80100d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8010094:	881b      	ldrh	r3, [r3, #0]
 8010096:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801009a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801009c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80100a0:	f7f4 f812 	bl	80040c8 <_ZN8touchgfx3HAL3lcdEv>
 80100a4:	6803      	ldr	r3, [r0, #0]
 80100a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100a8:	4798      	blx	r3
 80100aa:	23ff      	movs	r3, #255	@ 0xff
 80100ac:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80100b0:	a903      	add	r1, sp, #12
 80100b2:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80100b6:	6860      	ldr	r0, [r4, #4]
 80100b8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80100bc:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80100c0:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80100c4:	6803      	ldr	r3, [r0, #0]
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	4798      	blx	r3
 80100ca:	4630      	mov	r0, r6
 80100cc:	b00c      	add	sp, #48	@ 0x30
 80100ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100d2:	bf00      	nop
 80100d4:	240255c6 	.word	0x240255c6

080100d8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80100d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100da:	b085      	sub	sp, #20
 80100dc:	4605      	mov	r5, r0
 80100de:	ac02      	add	r4, sp, #8
 80100e0:	e884 0006 	stmia.w	r4, {r1, r2}
 80100e4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80100e8:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80100ec:	f7ff fde6 	bl	800fcbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80100f0:	4631      	mov	r1, r6
 80100f2:	4603      	mov	r3, r0
 80100f4:	463a      	mov	r2, r7
 80100f6:	4628      	mov	r0, r5
 80100f8:	f7ff ff08 	bl	800ff0c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80100fc:	4a05      	ldr	r2, [pc, #20]	@ (8010114 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80100fe:	682b      	ldr	r3, [r5, #0]
 8010100:	8812      	ldrh	r2, [r2, #0]
 8010102:	9200      	str	r2, [sp, #0]
 8010104:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 8010106:	4603      	mov	r3, r0
 8010108:	4628      	mov	r0, r5
 801010a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801010e:	47b0      	blx	r6
 8010110:	b005      	add	sp, #20
 8010112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010114:	240255c6 	.word	0x240255c6

08010118 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8010118:	b570      	push	{r4, r5, r6, lr}
 801011a:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 801011e:	4604      	mov	r4, r0
 8010120:	b19b      	cbz	r3, 801014a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8010122:	2002      	movs	r0, #2
 8010124:	f7f1 fea4 	bl	8001e70 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8010128:	2300      	movs	r3, #0
 801012a:	4620      	mov	r0, r4
 801012c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8010130:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8010134:	6823      	ldr	r3, [r4, #0]
 8010136:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 801013a:	f7ff fdbf 	bl	800fcbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801013e:	4601      	mov	r1, r0
 8010140:	4620      	mov	r0, r4
 8010142:	462b      	mov	r3, r5
 8010144:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010148:	4718      	bx	r3
 801014a:	bd70      	pop	{r4, r5, r6, pc}

0801014c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801014c:	b570      	push	{r4, r5, r6, lr}
 801014e:	4605      	mov	r5, r0
 8010150:	460c      	mov	r4, r1
 8010152:	2003      	movs	r0, #3
 8010154:	b149      	cbz	r1, 801016a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8010156:	f7f1 fe2b 	bl	8001db0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801015a:	6928      	ldr	r0, [r5, #16]
 801015c:	b168      	cbz	r0, 801017a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801015e:	6803      	ldr	r3, [r0, #0]
 8010160:	2101      	movs	r1, #1
 8010162:	695b      	ldr	r3, [r3, #20]
 8010164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010168:	4718      	bx	r3
 801016a:	f7f1 fe51 	bl	8001e10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801016e:	6928      	ldr	r0, [r5, #16]
 8010170:	b118      	cbz	r0, 801017a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8010172:	6803      	ldr	r3, [r0, #0]
 8010174:	4621      	mov	r1, r4
 8010176:	695b      	ldr	r3, [r3, #20]
 8010178:	e7f4      	b.n	8010164 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801017a:	bd70      	pop	{r4, r5, r6, pc}

0801017c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801017c:	b538      	push	{r3, r4, r5, lr}
 801017e:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8010182:	4604      	mov	r4, r0
 8010184:	460d      	mov	r5, r1
 8010186:	428b      	cmp	r3, r1
 8010188:	d006      	beq.n	8010198 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801018a:	6803      	ldr	r3, [r0, #0]
 801018c:	b929      	cbnz	r1, 801019a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801018e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010192:	4798      	blx	r3
 8010194:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8010198:	bd38      	pop	{r3, r4, r5, pc}
 801019a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801019e:	e7f8      	b.n	8010192 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080101a0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80101a0:	4b0c      	ldr	r3, [pc, #48]	@ (80101d4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 80101a2:	b510      	push	{r4, lr}
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	4604      	mov	r4, r0
 80101a8:	b953      	cbnz	r3, 80101c0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 80101aa:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 80101ae:	b93b      	cbnz	r3, 80101c0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 80101b0:	6840      	ldr	r0, [r0, #4]
 80101b2:	f000 f919 	bl	80103e8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80101b6:	b118      	cbz	r0, 80101c0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 80101b8:	6862      	ldr	r2, [r4, #4]
 80101ba:	7a53      	ldrb	r3, [r2, #9]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d0fc      	beq.n	80101ba <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 80101c0:	f7f2 fe70 	bl	8002ea4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80101c4:	4620      	mov	r0, r4
 80101c6:	2100      	movs	r1, #0
 80101c8:	f7ff ffd8 	bl	801017c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80101cc:	4620      	mov	r0, r4
 80101ce:	f7ff fd75 	bl	800fcbc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80101d2:	bd10      	pop	{r4, pc}
 80101d4:	240255ca 	.word	0x240255ca

080101d8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 80101d8:	b570      	push	{r4, r5, r6, lr}
 80101da:	4604      	mov	r4, r0
 80101dc:	6803      	ldr	r3, [r0, #0]
 80101de:	b919      	cbnz	r1, 80101e8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 80101e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80101e6:	4718      	bx	r3
 80101e8:	2200      	movs	r2, #0
 80101ea:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 80101ee:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 80101f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101f4:	4798      	blx	r3
 80101f6:	6863      	ldr	r3, [r4, #4]
 80101f8:	2101      	movs	r1, #1
 80101fa:	4605      	mov	r5, r0
 80101fc:	4620      	mov	r0, r4
 80101fe:	7299      	strb	r1, [r3, #10]
 8010200:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8010204:	f7ff ffba 	bl	801017c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010208:	4628      	mov	r0, r5
 801020a:	bd70      	pop	{r4, r5, r6, pc}

0801020c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801020c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8010210:	1a13      	subs	r3, r2, r0
 8010212:	4258      	negs	r0, r3
 8010214:	4158      	adcs	r0, r3
 8010216:	4770      	bx	lr

08010218 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8010218:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801021c:	1a9b      	subs	r3, r3, r2
 801021e:	2b00      	cmp	r3, #0
 8010220:	bfdc      	itt	le
 8010222:	6882      	ldrle	r2, [r0, #8]
 8010224:	189b      	addle	r3, r3, r2
 8010226:	2b01      	cmp	r3, #1
 8010228:	bfcc      	ite	gt
 801022a:	2000      	movgt	r0, #0
 801022c:	2001      	movle	r0, #1
 801022e:	4770      	bx	lr

08010230 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8010230:	6902      	ldr	r2, [r0, #16]
 8010232:	6843      	ldr	r3, [r0, #4]
 8010234:	2024      	movs	r0, #36	@ 0x24
 8010236:	fb00 3002 	mla	r0, r0, r2, r3
 801023a:	4770      	bx	lr

0801023c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801023c:	6803      	ldr	r3, [r0, #0]
 801023e:	691b      	ldr	r3, [r3, #16]
 8010240:	4718      	bx	r3

08010242 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8010242:	2301      	movs	r3, #1
 8010244:	b570      	push	{r4, r5, r6, lr}
 8010246:	7203      	strb	r3, [r0, #8]
 8010248:	4604      	mov	r4, r0
 801024a:	6840      	ldr	r0, [r0, #4]
 801024c:	6803      	ldr	r3, [r0, #0]
 801024e:	699b      	ldr	r3, [r3, #24]
 8010250:	4798      	blx	r3
 8010252:	6803      	ldr	r3, [r0, #0]
 8010254:	4605      	mov	r5, r0
 8010256:	2b40      	cmp	r3, #64	@ 0x40
 8010258:	d00c      	beq.n	8010274 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801025a:	d810      	bhi.n	801027e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801025c:	2b04      	cmp	r3, #4
 801025e:	d01d      	beq.n	801029c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8010260:	d804      	bhi.n	801026c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8010262:	2b01      	cmp	r3, #1
 8010264:	d006      	beq.n	8010274 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010266:	2b02      	cmp	r3, #2
 8010268:	d02c      	beq.n	80102c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801026a:	bd70      	pop	{r4, r5, r6, pc}
 801026c:	2b08      	cmp	r3, #8
 801026e:	d01d      	beq.n	80102ac <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8010270:	2b20      	cmp	r3, #32
 8010272:	d1fa      	bne.n	801026a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8010274:	6823      	ldr	r3, [r4, #0]
 8010276:	4620      	mov	r0, r4
 8010278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801027a:	4798      	blx	r3
 801027c:	e013      	b.n	80102a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801027e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010282:	d0f7      	beq.n	8010274 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010284:	d804      	bhi.n	8010290 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8010286:	2b80      	cmp	r3, #128	@ 0x80
 8010288:	d0f4      	beq.n	8010274 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801028a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801028e:	e7f0      	b.n	8010272 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8010290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010294:	d0ee      	beq.n	8010274 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010296:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801029a:	e7e5      	b.n	8010268 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801029c:	6823      	ldr	r3, [r4, #0]
 801029e:	7f01      	ldrb	r1, [r0, #28]
 80102a0:	4620      	mov	r0, r4
 80102a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102a4:	4798      	blx	r3
 80102a6:	6823      	ldr	r3, [r4, #0]
 80102a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102aa:	e006      	b.n	80102ba <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80102ac:	6823      	ldr	r3, [r4, #0]
 80102ae:	7f01      	ldrb	r1, [r0, #28]
 80102b0:	4620      	mov	r0, r4
 80102b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102b4:	4798      	blx	r3
 80102b6:	6823      	ldr	r3, [r4, #0]
 80102b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102ba:	4629      	mov	r1, r5
 80102bc:	4620      	mov	r0, r4
 80102be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102c2:	4718      	bx	r3
 80102c4:	6823      	ldr	r3, [r4, #0]
 80102c6:	4620      	mov	r0, r4
 80102c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102ca:	4798      	blx	r3
 80102cc:	e7f3      	b.n	80102b6 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080102ce <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80102ce:	4770      	bx	lr

080102d0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80102d0:	4770      	bx	lr

080102d2 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80102d2:	4770      	bx	lr

080102d4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80102d4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80102d8:	b510      	push	{r4, lr}
 80102da:	1ad2      	subs	r2, r2, r3
 80102dc:	2a00      	cmp	r2, #0
 80102de:	bfdc      	itt	le
 80102e0:	6884      	ldrle	r4, [r0, #8]
 80102e2:	1912      	addle	r2, r2, r4
 80102e4:	2a01      	cmp	r2, #1
 80102e6:	dd16      	ble.n	8010316 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80102e8:	6842      	ldr	r2, [r0, #4]
 80102ea:	2424      	movs	r4, #36	@ 0x24
 80102ec:	fb04 2303 	mla	r3, r4, r3, r2
 80102f0:	f101 0220 	add.w	r2, r1, #32
 80102f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80102f8:	4291      	cmp	r1, r2
 80102fa:	f843 4b04 	str.w	r4, [r3], #4
 80102fe:	d1f9      	bne.n	80102f4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8010300:	780a      	ldrb	r2, [r1, #0]
 8010302:	701a      	strb	r2, [r3, #0]
 8010304:	68c3      	ldr	r3, [r0, #12]
 8010306:	6882      	ldr	r2, [r0, #8]
 8010308:	f3bf 8f5b 	dmb	ish
 801030c:	3301      	adds	r3, #1
 801030e:	429a      	cmp	r2, r3
 8010310:	bfd8      	it	le
 8010312:	1a9b      	suble	r3, r3, r2
 8010314:	60c3      	str	r3, [r0, #12]
 8010316:	bd10      	pop	{r4, pc}

08010318 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8010318:	6903      	ldr	r3, [r0, #16]
 801031a:	6882      	ldr	r2, [r0, #8]
 801031c:	f3bf 8f5b 	dmb	ish
 8010320:	3301      	adds	r3, #1
 8010322:	429a      	cmp	r2, r3
 8010324:	bfd8      	it	le
 8010326:	1a9b      	suble	r3, r3, r2
 8010328:	6103      	str	r3, [r0, #16]
 801032a:	4770      	bx	lr

0801032c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801032c:	b570      	push	{r4, r5, r6, lr}
 801032e:	4604      	mov	r4, r0
 8010330:	460e      	mov	r6, r1
 8010332:	6860      	ldr	r0, [r4, #4]
 8010334:	6803      	ldr	r3, [r0, #0]
 8010336:	685b      	ldr	r3, [r3, #4]
 8010338:	4798      	blx	r3
 801033a:	2800      	cmp	r0, #0
 801033c:	d1f9      	bne.n	8010332 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801033e:	4d0d      	ldr	r5, [pc, #52]	@ (8010374 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8010340:	6828      	ldr	r0, [r5, #0]
 8010342:	6803      	ldr	r3, [r0, #0]
 8010344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010348:	4798      	blx	r3
 801034a:	f7f2 fdb9 	bl	8002ec0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801034e:	6828      	ldr	r0, [r5, #0]
 8010350:	2101      	movs	r1, #1
 8010352:	f7ff ff13 	bl	801017c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010356:	6860      	ldr	r0, [r4, #4]
 8010358:	4631      	mov	r1, r6
 801035a:	6803      	ldr	r3, [r0, #0]
 801035c:	689b      	ldr	r3, [r3, #8]
 801035e:	4798      	blx	r3
 8010360:	6823      	ldr	r3, [r4, #0]
 8010362:	4620      	mov	r0, r4
 8010364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010366:	4798      	blx	r3
 8010368:	6828      	ldr	r0, [r5, #0]
 801036a:	6803      	ldr	r3, [r0, #0]
 801036c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010370:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010372:	4718      	bx	r3
 8010374:	240255cc 	.word	0x240255cc

08010378 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8010378:	b508      	push	{r3, lr}
 801037a:	f7f2 fd93 	bl	8002ea4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801037e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010382:	f7f2 bd97 	b.w	8002eb4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08010386 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8010386:	b510      	push	{r4, lr}
 8010388:	4604      	mov	r4, r0
 801038a:	2114      	movs	r1, #20
 801038c:	f012 fe15 	bl	8022fba <_ZdlPvj>
 8010390:	4620      	mov	r0, r4
 8010392:	bd10      	pop	{r4, pc}

08010394 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8010394:	b570      	push	{r4, r5, r6, lr}
 8010396:	4604      	mov	r4, r0
 8010398:	6840      	ldr	r0, [r0, #4]
 801039a:	6803      	ldr	r3, [r0, #0]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	4798      	blx	r3
 80103a0:	4605      	mov	r5, r0
 80103a2:	b930      	cbnz	r0, 80103b2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80103a4:	7a23      	ldrb	r3, [r4, #8]
 80103a6:	b123      	cbz	r3, 80103b2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80103a8:	6860      	ldr	r0, [r4, #4]
 80103aa:	6803      	ldr	r3, [r0, #0]
 80103ac:	695b      	ldr	r3, [r3, #20]
 80103ae:	4798      	blx	r3
 80103b0:	7225      	strb	r5, [r4, #8]
 80103b2:	6860      	ldr	r0, [r4, #4]
 80103b4:	6803      	ldr	r3, [r0, #0]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	4798      	blx	r3
 80103ba:	b928      	cbnz	r0, 80103c8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80103bc:	6823      	ldr	r3, [r4, #0]
 80103be:	4620      	mov	r0, r4
 80103c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103c6:	4718      	bx	r3
 80103c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103cc:	f7f2 bd80 	b.w	8002ed0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080103d0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80103d0:	b510      	push	{r4, lr}
 80103d2:	6082      	str	r2, [r0, #8]
 80103d4:	2200      	movs	r2, #0
 80103d6:	4c03      	ldr	r4, [pc, #12]	@ (80103e4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80103d8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80103dc:	e9c0 4100 	strd	r4, r1, [r0]
 80103e0:	bd10      	pop	{r4, pc}
 80103e2:	bf00      	nop
 80103e4:	08027220 	.word	0x08027220

080103e8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80103e8:	6840      	ldr	r0, [r0, #4]
 80103ea:	6803      	ldr	r3, [r0, #0]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	4718      	bx	r3

080103f0 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 80103f0:	2300      	movs	r3, #0
 80103f2:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80103f4:	8503      	strh	r3, [r0, #40]	@ 0x28
 80103f6:	8543      	strh	r3, [r0, #42]	@ 0x2a
 80103f8:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80103fa:	6980      	ldr	r0, [r0, #24]
 80103fc:	b110      	cbz	r0, 8010404 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 80103fe:	6803      	ldr	r3, [r0, #0]
 8010400:	691b      	ldr	r3, [r3, #16]
 8010402:	4718      	bx	r3
 8010404:	4770      	bx	lr

08010406 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 8010406:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 801040a:	4770      	bx	lr

0801040c <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 801040c:	b538      	push	{r3, r4, r5, lr}
 801040e:	0e0b      	lsrs	r3, r1, #24
 8010410:	4604      	mov	r4, r0
 8010412:	460d      	mov	r5, r1
 8010414:	7783      	strb	r3, [r0, #30]
 8010416:	6803      	ldr	r3, [r0, #0]
 8010418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801041a:	4798      	blx	r3
 801041c:	6803      	ldr	r3, [r0, #0]
 801041e:	4629      	mov	r1, r5
 8010420:	689b      	ldr	r3, [r3, #8]
 8010422:	4798      	blx	r3
 8010424:	6823      	ldr	r3, [r4, #0]
 8010426:	4620      	mov	r0, r4
 8010428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801042a:	4798      	blx	r3
 801042c:	61a0      	str	r0, [r4, #24]
 801042e:	bd38      	pop	{r3, r4, r5, pc}

08010430 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8010430:	7741      	strb	r1, [r0, #29]
 8010432:	4770      	bx	lr

08010434 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8010434:	b530      	push	{r4, r5, lr}
 8010436:	460d      	mov	r5, r1
 8010438:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 801043c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801043e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010444:	682b      	ldr	r3, [r5, #0]
 8010446:	6023      	str	r3, [r4, #0]
 8010448:	bd30      	pop	{r4, r5, pc}

0801044a <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 801044a:	b538      	push	{r3, r4, r5, lr}
 801044c:	4604      	mov	r4, r0
 801044e:	1d03      	adds	r3, r0, #4
 8010450:	6808      	ldr	r0, [r1, #0]
 8010452:	2500      	movs	r5, #0
 8010454:	6849      	ldr	r1, [r1, #4]
 8010456:	c303      	stmia	r3!, {r0, r1}
 8010458:	6813      	ldr	r3, [r2, #0]
 801045a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 801045e:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8010462:	6853      	ldr	r3, [r2, #4]
 8010464:	61a5      	str	r5, [r4, #24]
 8010466:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 801046a:	f005 ff0f 	bl	801628c <_ZN8touchgfx9Matrix3x35resetEv>
 801046e:	23ff      	movs	r3, #255	@ 0xff
 8010470:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 8010474:	7763      	strb	r3, [r4, #29]
 8010476:	77a3      	strb	r3, [r4, #30]
 8010478:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801047c:	6323      	str	r3, [r4, #48]	@ 0x30
 801047e:	2301      	movs	r3, #1
 8010480:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8010484:	bd38      	pop	{r3, r4, r5, pc}
	...

08010488 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 8010488:	ee70 7a41 	vsub.f32	s15, s0, s2
 801048c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010490:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010494:	4605      	mov	r5, r0
 8010496:	ed2d 8b0a 	vpush	{d8-d12}
 801049a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801049e:	b087      	sub	sp, #28
 80104a0:	eef0 9a40 	vmov.f32	s19, s0
 80104a4:	6802      	ldr	r2, [r0, #0]
 80104a6:	eeb0 aa60 	vmov.f32	s20, s1
 80104aa:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80104ae:	eeb0 9a41 	vmov.f32	s18, s2
 80104b2:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80104b4:	eef0 8a61 	vmov.f32	s17, s3
 80104b8:	eeb0 ca42 	vmov.f32	s24, s4
 80104bc:	eef0 ca62 	vmov.f32	s25, s5
 80104c0:	d112      	bne.n	80104e8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80104c2:	ee70 7ae1 	vsub.f32	s15, s1, s3
 80104c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80104ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104ce:	d10b      	bne.n	80104e8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80104d0:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80104d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80104d6:	3901      	subs	r1, #1
 80104d8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80104dc:	b007      	add	sp, #28
 80104de:	ecbd 8b0a 	vpop	{d8-d12}
 80104e2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104e6:	4710      	bx	r2
 80104e8:	23ff      	movs	r3, #255	@ 0xff
 80104ea:	4628      	mov	r0, r5
 80104ec:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 80104f0:	f8df 92c4 	ldr.w	r9, [pc, #708]	@ 80107b8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x330>
 80104f4:	77ab      	strb	r3, [r5, #30]
 80104f6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80104f8:	4798      	blx	r3
 80104fa:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80104fe:	eeb0 0a69 	vmov.f32	s0, s19
 8010502:	4604      	mov	r4, r0
 8010504:	80c3      	strh	r3, [r0, #6]
 8010506:	eef0 0a4a 	vmov.f32	s1, s20
 801050a:	4640      	mov	r0, r8
 801050c:	f005 ff6d 	bl	80163ea <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010510:	eeb0 ba40 	vmov.f32	s22, s0
 8010514:	ed8d 0a00 	vstr	s0, [sp]
 8010518:	eeb0 0a49 	vmov.f32	s0, s18
 801051c:	eef0 ba60 	vmov.f32	s23, s1
 8010520:	edcd 0a01 	vstr	s1, [sp, #4]
 8010524:	4640      	mov	r0, r8
 8010526:	eef0 0a68 	vmov.f32	s1, s17
 801052a:	f005 ff5e 	bl	80163ea <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801052e:	eeb4 ba40 	vcmp.f32	s22, s0
 8010532:	eeb0 8a40 	vmov.f32	s16, s0
 8010536:	ed8d 0a02 	vstr	s0, [sp, #8]
 801053a:	eef0 aa60 	vmov.f32	s21, s1
 801053e:	edcd 0a03 	vstr	s1, [sp, #12]
 8010542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010546:	eef4 ba60 	vcmp.f32	s23, s1
 801054a:	bf0c      	ite	eq
 801054c:	2301      	moveq	r3, #1
 801054e:	2300      	movne	r3, #0
 8010550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010554:	eeb4 ba40 	vcmp.f32	s22, s0
 8010558:	7463      	strb	r3, [r4, #17]
 801055a:	bf0c      	ite	eq
 801055c:	2301      	moveq	r3, #1
 801055e:	2300      	movne	r3, #0
 8010560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010564:	74a3      	strb	r3, [r4, #18]
 8010566:	d031      	beq.n	80105cc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 8010568:	eef4 ba60 	vcmp.f32	s23, s1
 801056c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010570:	d02c      	beq.n	80105cc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 8010572:	ee39 9a69 	vsub.f32	s18, s18, s19
 8010576:	4640      	mov	r0, r8
 8010578:	ee78 8aca 	vsub.f32	s17, s17, s20
 801057c:	eef0 0a4a 	vmov.f32	s1, s20
 8010580:	ee89 7a0c 	vdiv.f32	s14, s18, s24
 8010584:	eec8 7aac 	vdiv.f32	s15, s17, s25
 8010588:	eeb0 0a69 	vmov.f32	s0, s19
 801058c:	eeec 0a87 	vfma.f32	s1, s25, s14
 8010590:	eea7 0acc 	vfms.f32	s0, s15, s24
 8010594:	f005 ff29 	bl	80163ea <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010598:	f899 3000 	ldrb.w	r3, [r9]
 801059c:	edcd 0a05 	vstr	s1, [sp, #20]
 80105a0:	ee70 0aeb 	vsub.f32	s1, s1, s23
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	bf08      	it	eq
 80105a8:	eef1 7a60 	vnegeq.f32	s15, s1
 80105ac:	ed8d 0a04 	vstr	s0, [sp, #16]
 80105b0:	ee30 0a4b 	vsub.f32	s0, s0, s22
 80105b4:	bf04      	itt	eq
 80105b6:	eef0 0a40 	vmoveq.f32	s1, s0
 80105ba:	eeb0 0a67 	vmoveq.f32	s0, s15
 80105be:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80105c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105c6:	d135      	bne.n	8010634 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ac>
 80105c8:	2301      	movs	r3, #1
 80105ca:	74a3      	strb	r3, [r4, #18]
 80105cc:	f899 2000 	ldrb.w	r2, [r9]
 80105d0:	7c63      	ldrb	r3, [r4, #17]
 80105d2:	2a01      	cmp	r2, #1
 80105d4:	f040 80a3 	bne.w	801071e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x296>
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d073      	beq.n	80106c4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x23c>
 80105dc:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 80105e0:	eddf 6a73 	vldr	s13, [pc, #460]	@ 80107b0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 80105e4:	eef4 baea 	vcmpe.f32	s23, s21
 80105e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105f0:	edc4 7a08 	vstr	s15, [r4, #32]
 80105f4:	eefd 7aea 	vcvt.s32.f32	s15, s21
 80105f8:	ee17 3a90 	vmov	r3, s15
 80105fc:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 8010600:	b21a      	sxth	r2, r3
 8010602:	ee17 3a90 	vmov	r3, s15
 8010606:	bf48      	it	mi
 8010608:	8162      	strhmi	r2, [r4, #10]
 801060a:	b21b      	sxth	r3, r3
 801060c:	bf56      	itet	pl
 801060e:	8122      	strhpl	r2, [r4, #8]
 8010610:	8123      	strhmi	r3, [r4, #8]
 8010612:	8163      	strhpl	r3, [r4, #10]
 8010614:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8010618:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801061c:	1a9b      	subs	r3, r3, r2
 801061e:	ee07 3a90 	vmov	s15, r3
 8010622:	2300      	movs	r3, #0
 8010624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010628:	7463      	strb	r3, [r4, #17]
 801062a:	2301      	movs	r3, #1
 801062c:	edc4 7a07 	vstr	s15, [r4, #28]
 8010630:	74a3      	strb	r3, [r4, #18]
 8010632:	e03f      	b.n	80106b4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 8010634:	ee80 7a80 	vdiv.f32	s14, s1, s0
 8010638:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801063c:	ed84 7a05 	vstr	s14, [r4, #20]
 8010640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010644:	d102      	bne.n	801064c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1c4>
 8010646:	2301      	movs	r3, #1
 8010648:	7463      	strb	r3, [r4, #17]
 801064a:	e7bf      	b.n	80105cc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 801064c:	2b01      	cmp	r3, #1
 801064e:	ee38 8a4b 	vsub.f32	s16, s16, s22
 8010652:	ee7a aaeb 	vsub.f32	s21, s21, s23
 8010656:	bf0b      	itete	eq
 8010658:	f9b4 2006 	ldrsheq.w	r2, [r4, #6]
 801065c:	eef0 7a6b 	vmovne.f32	s15, s23
 8010660:	ee07 2a90 	vmoveq	s15, r2
 8010664:	eeeb 7a47 	vfmsne.f32	s15, s22, s14
 8010668:	bf02      	ittt	eq
 801066a:	eef8 7ae7 	vcvteq.f32.s32	s15, s15
 801066e:	ee77 7acb 	vsubeq.f32	s15, s15, s22
 8010672:	eeeb 7ac7 	vfmseq.f32	s15, s23, s14
 8010676:	2b01      	cmp	r3, #1
 8010678:	edc4 7a06 	vstr	s15, [r4, #24]
 801067c:	bf02      	ittt	eq
 801067e:	eef1 7a48 	vnegeq.f32	s15, s16
 8010682:	eeb0 8a6a 	vmoveq.f32	s16, s21
 8010686:	eef0 aa67 	vmoveq.f32	s21, s15
 801068a:	eeca 7a87 	vdiv.f32	s15, s21, s14
 801068e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80107b4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x32c>
 8010692:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010696:	eec7 7a08 	vdiv.f32	s15, s14, s16
 801069a:	ed84 8a07 	vstr	s16, [r4, #28]
 801069e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80106a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106a6:	edc4 7a08 	vstr	s15, [r4, #32]
 80106aa:	d503      	bpl.n	80106b4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 80106ac:	eeb1 8a48 	vneg.f32	s16, s16
 80106b0:	ed84 8a07 	vstr	s16, [r4, #28]
 80106b4:	60e7      	str	r7, [r4, #12]
 80106b6:	7426      	strb	r6, [r4, #16]
 80106b8:	61ac      	str	r4, [r5, #24]
 80106ba:	b007      	add	sp, #28
 80106bc:	ecbd 8b0a 	vpop	{d8-d12}
 80106c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106c4:	7ca3      	ldrb	r3, [r4, #18]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d0f4      	beq.n	80106b4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 80106ca:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80106ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80107b0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 80106d2:	ee00 3a10 	vmov	s0, r3
 80106d6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80106da:	ee30 8a48 	vsub.f32	s16, s0, s16
 80106de:	ee30 0a4b 	vsub.f32	s0, s0, s22
 80106e2:	ee38 7a40 	vsub.f32	s14, s16, s0
 80106e6:	eeb4 8ac0 	vcmpe.f32	s16, s0
 80106ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80106ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f2:	edc4 7a08 	vstr	s15, [r4, #32]
 80106f6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80106fa:	ee17 3a90 	vmov	r3, s15
 80106fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010702:	b21a      	sxth	r2, r3
 8010704:	ee17 3a90 	vmov	r3, s15
 8010708:	bfc8      	it	gt
 801070a:	8162      	strhgt	r2, [r4, #10]
 801070c:	b21b      	sxth	r3, r3
 801070e:	bfd6      	itet	le
 8010710:	8122      	strhle	r2, [r4, #8]
 8010712:	8123      	strhgt	r3, [r4, #8]
 8010714:	8163      	strhle	r3, [r4, #10]
 8010716:	2301      	movs	r3, #1
 8010718:	7463      	strb	r3, [r4, #17]
 801071a:	2300      	movs	r3, #0
 801071c:	e788      	b.n	8010630 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a8>
 801071e:	b1e3      	cbz	r3, 801075a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x2d2>
 8010720:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 8010724:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80107b0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 8010728:	eef4 baea 	vcmpe.f32	s23, s21
 801072c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010734:	edc4 7a08 	vstr	s15, [r4, #32]
 8010738:	eefd 7aea 	vcvt.s32.f32	s15, s21
 801073c:	ee17 3a90 	vmov	r3, s15
 8010740:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 8010744:	b21a      	sxth	r2, r3
 8010746:	ee17 3a90 	vmov	r3, s15
 801074a:	bf48      	it	mi
 801074c:	8162      	strhmi	r2, [r4, #10]
 801074e:	b21b      	sxth	r3, r3
 8010750:	bf56      	itet	pl
 8010752:	8122      	strhpl	r2, [r4, #8]
 8010754:	8123      	strhmi	r3, [r4, #8]
 8010756:	8163      	strhpl	r3, [r4, #10]
 8010758:	e7ac      	b.n	80106b4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 801075a:	7ca3      	ldrb	r3, [r4, #18]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d0a9      	beq.n	80106b4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 8010760:	ee38 7a4b 	vsub.f32	s14, s16, s22
 8010764:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80107b0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 8010768:	eeb4 bac8 	vcmpe.f32	s22, s16
 801076c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010774:	edc4 7a08 	vstr	s15, [r4, #32]
 8010778:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801077c:	ee17 3a90 	vmov	r3, s15
 8010780:	eefd 7acb 	vcvt.s32.f32	s15, s22
 8010784:	b21a      	sxth	r2, r3
 8010786:	ee17 3a90 	vmov	r3, s15
 801078a:	bf48      	it	mi
 801078c:	8162      	strhmi	r2, [r4, #10]
 801078e:	b21b      	sxth	r3, r3
 8010790:	bf56      	itet	pl
 8010792:	8122      	strhpl	r2, [r4, #8]
 8010794:	8123      	strhmi	r3, [r4, #8]
 8010796:	8163      	strhpl	r3, [r4, #10]
 8010798:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801079c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80107a0:	1a9b      	subs	r3, r3, r2
 80107a2:	ee07 3a90 	vmov	s15, r3
 80107a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107aa:	edc4 7a07 	vstr	s15, [r4, #28]
 80107ae:	e781      	b.n	80106b4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 80107b0:	447ffffe 	.word	0x447ffffe
 80107b4:	44800000 	.word	0x44800000
 80107b8:	240255c4 	.word	0x240255c4

080107bc <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 80107bc:	b510      	push	{r4, lr}
 80107be:	ed2d 8b02 	vpush	{d8}
 80107c2:	eef0 8a62 	vmov.f32	s17, s5
 80107c6:	2100      	movs	r1, #0
 80107c8:	4604      	mov	r4, r0
 80107ca:	eeb0 8a42 	vmov.f32	s16, s4
 80107ce:	f012 f985 	bl	8022adc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 80107d2:	eef0 7a68 	vmov.f32	s15, s17
 80107d6:	6823      	ldr	r3, [r4, #0]
 80107d8:	4620      	mov	r0, r4
 80107da:	689b      	ldr	r3, [r3, #8]
 80107dc:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80107e0:	ee17 2a90 	vmov	r2, s15
 80107e4:	eef0 7a48 	vmov.f32	s15, s16
 80107e8:	ecbd 8b02 	vpop	{d8}
 80107ec:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80107f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107f4:	ee17 1a90 	vmov	r1, s15
 80107f8:	4718      	bx	r3

080107fa <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 80107fa:	b510      	push	{r4, lr}
 80107fc:	ed2d 8b02 	vpush	{d8}
 8010800:	eef0 8a63 	vmov.f32	s17, s7
 8010804:	2100      	movs	r1, #0
 8010806:	4604      	mov	r4, r0
 8010808:	eeb0 8a43 	vmov.f32	s16, s6
 801080c:	f012 fa28 	bl	8022c60 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8010810:	eef0 7a68 	vmov.f32	s15, s17
 8010814:	6823      	ldr	r3, [r4, #0]
 8010816:	4620      	mov	r0, r4
 8010818:	689b      	ldr	r3, [r3, #8]
 801081a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801081e:	ee17 2a90 	vmov	r2, s15
 8010822:	eef0 7a48 	vmov.f32	s15, s16
 8010826:	ecbd 8b02 	vpop	{d8}
 801082a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801082e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010832:	ee17 1a90 	vmov	r1, s15
 8010836:	4718      	bx	r3

08010838 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8010838:	b513      	push	{r0, r1, r4, lr}
 801083a:	4604      	mov	r4, r0
 801083c:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 801083e:	f005 fdd4 	bl	80163ea <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010842:	eef0 7a60 	vmov.f32	s15, s1
 8010846:	4620      	mov	r0, r4
 8010848:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801084c:	ee17 2a90 	vmov	r2, s15
 8010850:	eef0 7a40 	vmov.f32	s15, s0
 8010854:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010858:	ee17 1a90 	vmov	r1, s15
 801085c:	b002      	add	sp, #8
 801085e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010862:	f012 b895 	b.w	8022990 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

08010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 8010866:	b513      	push	{r0, r1, r4, lr}
 8010868:	4604      	mov	r4, r0
 801086a:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 801086c:	f005 fdbd 	bl	80163ea <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010870:	eef0 7a60 	vmov.f32	s15, s1
 8010874:	4620      	mov	r0, r4
 8010876:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801087a:	ee17 2a90 	vmov	r2, s15
 801087e:	eef0 7a40 	vmov.f32	s15, s0
 8010882:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010886:	ee17 1a90 	vmov	r1, s15
 801088a:	b002      	add	sp, #8
 801088c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010890:	f012 b8cb 	b.w	8022a2a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

08010894 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 8010894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010896:	2400      	movs	r4, #0
 8010898:	9f07      	ldr	r7, [sp, #28]
 801089a:	f04f 0e01 	mov.w	lr, #1
 801089e:	4626      	mov	r6, r4
 80108a0:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 80108a4:	4463      	add	r3, ip
 80108a6:	4563      	cmp	r3, ip
 80108a8:	d02d      	beq.n	8010906 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 80108aa:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 80108ae:	2d06      	cmp	r5, #6
 80108b0:	d8f9      	bhi.n	80108a6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80108b2:	fa0e f505 	lsl.w	r5, lr, r5
 80108b6:	f015 0f66 	tst.w	r5, #102	@ 0x66
 80108ba:	d10d      	bne.n	80108d8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 80108bc:	f015 0f10 	tst.w	r5, #16
 80108c0:	d117      	bne.n	80108f2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 80108c2:	072d      	lsls	r5, r5, #28
 80108c4:	d5ef      	bpl.n	80108a6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80108c6:	3801      	subs	r0, #1
 80108c8:	b91e      	cbnz	r6, 80108d2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 80108ca:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 80108ce:	682d      	ldr	r5, [r5, #0]
 80108d0:	600d      	str	r5, [r1, #0]
 80108d2:	b96c      	cbnz	r4, 80108f0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80108d4:	2601      	movs	r6, #1
 80108d6:	e7e6      	b.n	80108a6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80108d8:	b926      	cbnz	r6, 80108e4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 80108da:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 80108de:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80108e2:	600b      	str	r3, [r1, #0]
 80108e4:	b924      	cbnz	r4, 80108f0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80108e6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80108ea:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80108ee:	6013      	str	r3, [r2, #0]
 80108f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108f2:	3801      	subs	r0, #1
 80108f4:	b91c      	cbnz	r4, 80108fe <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 80108f6:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 80108fa:	6824      	ldr	r4, [r4, #0]
 80108fc:	6014      	str	r4, [r2, #0]
 80108fe:	2e00      	cmp	r6, #0
 8010900:	d1f6      	bne.n	80108f0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8010902:	2401      	movs	r4, #1
 8010904:	e7cf      	b.n	80108a6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8010906:	b90e      	cbnz	r6, 801090c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8010908:	2300      	movs	r3, #0
 801090a:	600b      	str	r3, [r1, #0]
 801090c:	2c00      	cmp	r4, #0
 801090e:	d1ef      	bne.n	80108f0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8010910:	2300      	movs	r3, #0
 8010912:	e7ec      	b.n	80108ee <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08010914 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8010914:	b538      	push	{r3, r4, r5, lr}
 8010916:	ed2d 8b0a 	vpush	{d8-d12}
 801091a:	eef0 ba40 	vmov.f32	s23, s0
 801091e:	4604      	mov	r4, r0
 8010920:	eeb0 ca60 	vmov.f32	s24, s1
 8010924:	460d      	mov	r5, r1
 8010926:	eef0 aa41 	vmov.f32	s21, s2
 801092a:	eeb0 ba61 	vmov.f32	s22, s3
 801092e:	eeb0 9a42 	vmov.f32	s18, s4
 8010932:	eef0 9a62 	vmov.f32	s19, s5
 8010936:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 801093a:	ee7b 8a29 	vadd.f32	s17, s22, s19
 801093e:	ee3a 8a89 	vadd.f32	s16, s21, s18
 8010942:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8010946:	ee28 8a0a 	vmul.f32	s16, s16, s20
 801094a:	ee3c 0a68 	vsub.f32	s0, s24, s17
 801094e:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 8010952:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010956:	eea7 0aa7 	vfma.f32	s0, s15, s15
 801095a:	f012 fb59 	bl	8023010 <sqrtf>
 801095e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010966:	d12e      	bne.n	80109c6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8010968:	ee79 7a6a 	vsub.f32	s15, s18, s21
 801096c:	ee39 7acb 	vsub.f32	s14, s19, s22
 8010970:	eeb0 8a6a 	vmov.f32	s16, s21
 8010974:	eef0 8a4b 	vmov.f32	s17, s22
 8010978:	eea7 8a8a 	vfma.f32	s16, s15, s20
 801097c:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8010980:	eea7 8a0a 	vfma.f32	s16, s14, s20
 8010984:	eee7 8aca 	vfms.f32	s17, s15, s20
 8010988:	2d02      	cmp	r5, #2
 801098a:	dc2f      	bgt.n	80109ec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 801098c:	3501      	adds	r5, #1
 801098e:	eef0 1a4b 	vmov.f32	s3, s22
 8010992:	eeb0 1a6a 	vmov.f32	s2, s21
 8010996:	4620      	mov	r0, r4
 8010998:	4629      	mov	r1, r5
 801099a:	eef0 2a68 	vmov.f32	s5, s17
 801099e:	eeb0 2a48 	vmov.f32	s4, s16
 80109a2:	eef0 0a4c 	vmov.f32	s1, s24
 80109a6:	eeb0 0a6b 	vmov.f32	s0, s23
 80109aa:	f7ff ffb3 	bl	8010914 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80109ae:	eef0 0a68 	vmov.f32	s1, s17
 80109b2:	eeb0 0a48 	vmov.f32	s0, s16
 80109b6:	4620      	mov	r0, r4
 80109b8:	f7ff ff55 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80109bc:	eeb0 ba68 	vmov.f32	s22, s17
 80109c0:	eef0 aa48 	vmov.f32	s21, s16
 80109c4:	e7b9      	b.n	801093a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 80109c6:	ee38 8a6b 	vsub.f32	s16, s16, s23
 80109ca:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80109ce:	ee78 8acc 	vsub.f32	s17, s17, s24
 80109d2:	ee28 7a27 	vmul.f32	s14, s16, s15
 80109d6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80109da:	ee87 8a00 	vdiv.f32	s16, s14, s0
 80109de:	eec7 8a80 	vdiv.f32	s17, s15, s0
 80109e2:	ee3b 8a88 	vadd.f32	s16, s23, s16
 80109e6:	ee7c 8a28 	vadd.f32	s17, s24, s17
 80109ea:	e7cd      	b.n	8010988 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 80109ec:	eef0 0a68 	vmov.f32	s1, s17
 80109f0:	4620      	mov	r0, r4
 80109f2:	eeb0 0a48 	vmov.f32	s0, s16
 80109f6:	f7ff ff36 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80109fa:	ecbd 8b0a 	vpop	{d8-d12}
 80109fe:	bd38      	pop	{r3, r4, r5, pc}

08010a00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8010a00:	b510      	push	{r4, lr}
 8010a02:	ed2d 8b0a 	vpush	{d8-d12}
 8010a06:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8010a0a:	4604      	mov	r4, r0
 8010a0c:	eeb0 ca40 	vmov.f32	s24, s0
 8010a10:	2b02      	cmp	r3, #2
 8010a12:	eeb0 9a60 	vmov.f32	s18, s1
 8010a16:	eef0 9a41 	vmov.f32	s19, s2
 8010a1a:	eef0 8a61 	vmov.f32	s17, s3
 8010a1e:	eeb0 ba42 	vmov.f32	s22, s4
 8010a22:	eef0 ba62 	vmov.f32	s23, s5
 8010a26:	eeb0 aa43 	vmov.f32	s20, s6
 8010a2a:	eef0 aa63 	vmov.f32	s21, s7
 8010a2e:	eeb0 8a44 	vmov.f32	s16, s8
 8010a32:	eef0 ca64 	vmov.f32	s25, s9
 8010a36:	d12c      	bne.n	8010a92 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8010a38:	eef0 0a62 	vmov.f32	s1, s5
 8010a3c:	eeb0 0a42 	vmov.f32	s0, s4
 8010a40:	f7ff ff11 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010a44:	ee79 9acb 	vsub.f32	s19, s19, s22
 8010a48:	ee7a caec 	vsub.f32	s25, s21, s25
 8010a4c:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8010a50:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8010a54:	ee69 9aac 	vmul.f32	s19, s19, s25
 8010a58:	ee28 8a88 	vmul.f32	s16, s17, s16
 8010a5c:	eef4 9ac8 	vcmpe.f32	s19, s16
 8010a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a64:	db0f      	blt.n	8010a86 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 8010a66:	2101      	movs	r1, #1
 8010a68:	eef0 2a6a 	vmov.f32	s5, s21
 8010a6c:	eeb0 2a4a 	vmov.f32	s4, s20
 8010a70:	4620      	mov	r0, r4
 8010a72:	eef0 1a6b 	vmov.f32	s3, s23
 8010a76:	eeb0 1a4b 	vmov.f32	s2, s22
 8010a7a:	eef0 0a49 	vmov.f32	s1, s18
 8010a7e:	eeb0 0a4c 	vmov.f32	s0, s24
 8010a82:	f7ff ff47 	bl	8010914 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8010a86:	eef0 0a6a 	vmov.f32	s1, s21
 8010a8a:	4620      	mov	r0, r4
 8010a8c:	eeb0 0a4a 	vmov.f32	s0, s20
 8010a90:	e035      	b.n	8010afe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 8010a92:	2b01      	cmp	r3, #1
 8010a94:	d138      	bne.n	8010b08 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8010a96:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8010a9a:	ee33 6a48 	vsub.f32	s12, s6, s16
 8010a9e:	ee71 7a42 	vsub.f32	s15, s2, s4
 8010aa2:	ee73 6ae4 	vsub.f32	s13, s7, s9
 8010aa6:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8010aaa:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010aae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ab6:	d027      	beq.n	8010b08 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8010ab8:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8010abc:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8010ac0:	eea4 8a83 	vfma.f32	s16, s9, s6
 8010ac4:	eee1 8a22 	vfma.f32	s17, s2, s5
 8010ac8:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8010acc:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8010ad0:	eee6 7a28 	vfma.f32	s15, s12, s17
 8010ad4:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8010ad8:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8010adc:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8010ae0:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8010ae4:	ee3c ca40 	vsub.f32	s24, s24, s0
 8010ae8:	ee39 9a60 	vsub.f32	s18, s18, s1
 8010aec:	ee29 9a09 	vmul.f32	s18, s18, s18
 8010af0:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8010af4:	eef4 7ac9 	vcmpe.f32	s15, s18
 8010af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010afc:	db04      	blt.n	8010b08 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8010afe:	f7ff feb2 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010b02:	ecbd 8b0a 	vpop	{d8-d12}
 8010b06:	bd10      	pop	{r4, pc}
 8010b08:	eef0 0a6b 	vmov.f32	s1, s23
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	eeb0 0a4b 	vmov.f32	s0, s22
 8010b12:	f7ff fea8 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010b16:	e7b6      	b.n	8010a86 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08010b18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8010b18:	b510      	push	{r4, lr}
 8010b1a:	ed2d 8b0c 	vpush	{d8-d13}
 8010b1e:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8010b22:	4604      	mov	r4, r0
 8010b24:	eeb0 9a40 	vmov.f32	s18, s0
 8010b28:	eef0 9a60 	vmov.f32	s19, s1
 8010b2c:	eef0 aa41 	vmov.f32	s21, s2
 8010b30:	eeb0 ba61 	vmov.f32	s22, s3
 8010b34:	b933      	cbnz	r3, 8010b44 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 8010b36:	f7ff fe96 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010b3a:	eef0 0a4b 	vmov.f32	s1, s22
 8010b3e:	eeb0 0a6a 	vmov.f32	s0, s21
 8010b42:	e015      	b.n	8010b70 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8010b44:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010b48:	2b02      	cmp	r3, #2
 8010b4a:	ee71 8a40 	vsub.f32	s17, s2, s0
 8010b4e:	ee31 8ae0 	vsub.f32	s16, s3, s1
 8010b52:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010b56:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010b5a:	d10f      	bne.n	8010b7c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8010b5c:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8010b60:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010b64:	f7ff fe7f 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010b68:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8010b6c:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8010b70:	4620      	mov	r0, r4
 8010b72:	f7ff fe78 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010b76:	ecbd 8b0c 	vpop	{d8-d13}
 8010b7a:	bd10      	pop	{r4, pc}
 8010b7c:	f7ff fe73 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010b80:	eef0 0a69 	vmov.f32	s1, s19
 8010b84:	eeb0 0a49 	vmov.f32	s0, s18
 8010b88:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8010cb8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 8010b8c:	eeb1 aa68 	vneg.f32	s20, s17
 8010b90:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8010cbc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 8010b94:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010b98:	4620      	mov	r0, r4
 8010b9a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010b9e:	ed9f ca48 	vldr	s24, [pc, #288]	@ 8010cc0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 8010ba2:	eddf ca48 	vldr	s25, [pc, #288]	@ 8010cc4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8010ba6:	ed9f da48 	vldr	s26, [pc, #288]	@ 8010cc8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 8010baa:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8010bae:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8010bb2:	f7ff fe58 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010bb6:	eef0 0a69 	vmov.f32	s1, s19
 8010bba:	eeb0 0a49 	vmov.f32	s0, s18
 8010bbe:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8010ccc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010bc8:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010bcc:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8010bd0:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8010bd4:	f7ff fe47 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010bd8:	eef0 0a69 	vmov.f32	s1, s19
 8010bdc:	eeb0 0a49 	vmov.f32	s0, s18
 8010be0:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8010cd0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8010be4:	4620      	mov	r0, r4
 8010be6:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010bea:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010bee:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8010bf2:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8010bf6:	f7ff fe36 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010bfa:	eef0 0a69 	vmov.f32	s1, s19
 8010bfe:	eeb0 0a49 	vmov.f32	s0, s18
 8010c02:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8010cd4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 8010c06:	4620      	mov	r0, r4
 8010c08:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010c0c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010c10:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8010c14:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8010c18:	f7ff fe25 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010c1c:	ee79 0a88 	vadd.f32	s1, s19, s16
 8010c20:	ee39 0a28 	vadd.f32	s0, s18, s17
 8010c24:	4620      	mov	r0, r4
 8010c26:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8010c2a:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010c2e:	f7ff fe1a 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010c32:	eef0 0a69 	vmov.f32	s1, s19
 8010c36:	eeb0 0a49 	vmov.f32	s0, s18
 8010c3a:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8010cd8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8010c3e:	4620      	mov	r0, r4
 8010c40:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010c44:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010c48:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8010c4c:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8010c50:	f7ff fe09 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010c54:	eef0 0a69 	vmov.f32	s1, s19
 8010c58:	eeb0 0a49 	vmov.f32	s0, s18
 8010c5c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8010cdc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8010c60:	4620      	mov	r0, r4
 8010c62:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010c66:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010c6a:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8010c6e:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8010c72:	f7ff fdf8 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010c76:	eef0 0a69 	vmov.f32	s1, s19
 8010c7a:	eeb0 0a49 	vmov.f32	s0, s18
 8010c7e:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8010ce0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 8010c82:	4620      	mov	r0, r4
 8010c84:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010c88:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010c8c:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8010c90:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8010c94:	f7ff fde7 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010c98:	eef0 0a69 	vmov.f32	s1, s19
 8010c9c:	eeb0 0a49 	vmov.f32	s0, s18
 8010ca0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8010ce4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010caa:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010cae:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8010cb2:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8010cb6:	e73e      	b.n	8010b36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8010cb8:	3d23d70a 	.word	0x3d23d70a
 8010cbc:	3e8f5c29 	.word	0x3e8f5c29
 8010cc0:	3f19999a 	.word	0x3f19999a
 8010cc4:	3f4ccccd 	.word	0x3f4ccccd
 8010cc8:	3f75c28f 	.word	0x3f75c28f
 8010ccc:	3e4ccccd 	.word	0x3e4ccccd
 8010cd0:	3ecccccd 	.word	0x3ecccccd
 8010cd4:	3f3851ec 	.word	0x3f3851ec
 8010cd8:	3fa3d70a 	.word	0x3fa3d70a
 8010cdc:	3fcccccd 	.word	0x3fcccccd
 8010ce0:	3fe66666 	.word	0x3fe66666
 8010ce4:	3ffae148 	.word	0x3ffae148

08010ce8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8010ce8:	b570      	push	{r4, r5, r6, lr}
 8010cea:	ed2d 8b06 	vpush	{d8-d10}
 8010cee:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8010cf2:	eef0 aa40 	vmov.f32	s21, s0
 8010cf6:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8010cfa:	4604      	mov	r4, r0
 8010cfc:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8010d00:	ee30 9a49 	vsub.f32	s18, s0, s18
 8010d04:	eeb0 aa60 	vmov.f32	s20, s1
 8010d08:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010d0c:	eea9 0a09 	vfma.f32	s0, s18, s18
 8010d10:	f012 f97e 	bl	8023010 <sqrtf>
 8010d14:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d1c:	dd36      	ble.n	8010d8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8010d1e:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8010d22:	2600      	movs	r6, #0
 8010d24:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8010d28:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8010d2c:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8010d30:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8010d34:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8010d38:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8010d3c:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8010d40:	ee70 9a28 	vadd.f32	s19, s0, s17
 8010d44:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8010d48:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8010d4c:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8010d50:	b1fd      	cbz	r5, 8010d92 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 8010d52:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 8010d56:	eef0 0a49 	vmov.f32	s1, s18
 8010d5a:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8010d5e:	eeb0 0a69 	vmov.f32	s0, s19
 8010d62:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 8010d66:	4620      	mov	r0, r4
 8010d68:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 8010d6c:	f7ff fd64 	bl	8010838 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8010d70:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8010d74:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8010d78:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8010d7c:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8010d80:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 8010d84:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8010d88:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8010d8c:	ecbd 8b06 	vpop	{d8-d10}
 8010d90:	bd70      	pop	{r4, r5, r6, pc}
 8010d92:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8010d96:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8010d9a:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8010d9e:	b16b      	cbz	r3, 8010dbc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8010da0:	eef0 1a49 	vmov.f32	s3, s18
 8010da4:	4620      	mov	r0, r4
 8010da6:	eeb0 1a69 	vmov.f32	s2, s19
 8010daa:	eef0 0a62 	vmov.f32	s1, s5
 8010dae:	eeb0 0a42 	vmov.f32	s0, s4
 8010db2:	f7ff feb1 	bl	8010b18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8010db6:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8010dba:	e7db      	b.n	8010d74 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8010dbc:	eef0 4a48 	vmov.f32	s9, s16
 8010dc0:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8010dc4:	eeb0 4a68 	vmov.f32	s8, s17
 8010dc8:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8010dcc:	eef0 3a49 	vmov.f32	s7, s18
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	eeb0 3a69 	vmov.f32	s6, s19
 8010dd6:	f7ff fe13 	bl	8010a00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8010dda:	e7cb      	b.n	8010d74 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08010ddc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8010ddc:	ee07 2a90 	vmov	s15, r2
 8010de0:	ee07 1a10 	vmov	s14, r1
 8010de4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8010de8:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8010dfc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8010dec:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8010df0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8010df4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010df8:	f7ff bf76 	b.w	8010ce8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8010dfc:	3d000000 	.word	0x3d000000

08010e00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8010e00:	b538      	push	{r3, r4, r5, lr}
 8010e02:	ed2d 8b02 	vpush	{d8}
 8010e06:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8010e0a:	4604      	mov	r4, r0
 8010e0c:	b31d      	cbz	r5, 8010e56 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8010e0e:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 8010e12:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8010e16:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8010e1a:	ee78 8a67 	vsub.f32	s17, s16, s15
 8010e1e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8010e22:	eef0 0a68 	vmov.f32	s1, s17
 8010e26:	f7ff fd07 	bl	8010838 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8010e2a:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8010e2e:	eef0 1a48 	vmov.f32	s3, s16
 8010e32:	4620      	mov	r0, r4
 8010e34:	eeb0 0a41 	vmov.f32	s0, s2
 8010e38:	eef0 0a68 	vmov.f32	s1, s17
 8010e3c:	f7ff fe6c 	bl	8010b18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8010e40:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8010e44:	eef0 1a68 	vmov.f32	s3, s17
 8010e48:	4620      	mov	r0, r4
 8010e4a:	eef0 0a48 	vmov.f32	s1, s16
 8010e4e:	eeb0 0a41 	vmov.f32	s0, s2
 8010e52:	f7ff fe61 	bl	8010b18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8010e56:	4628      	mov	r0, r5
 8010e58:	ecbd 8b02 	vpop	{d8}
 8010e5c:	bd38      	pop	{r3, r4, r5, pc}

08010e5e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8010e5e:	b510      	push	{r4, lr}
 8010e60:	ed2d 8b02 	vpush	{d8}
 8010e64:	4604      	mov	r4, r0
 8010e66:	eeb0 8a40 	vmov.f32	s16, s0
 8010e6a:	eef0 8a60 	vmov.f32	s17, s1
 8010e6e:	f7ff ffc7 	bl	8010e00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8010e72:	b9d0      	cbnz	r0, 8010eaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8010e74:	4620      	mov	r0, r4
 8010e76:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8010e7a:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 8010e7e:	eef0 0a68 	vmov.f32	s1, s17
 8010e82:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 8010e86:	eeb0 0a48 	vmov.f32	s0, s16
 8010e8a:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 8010e8e:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8010e92:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8010e96:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8010e9a:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8010e9e:	f7ff fdaf 	bl	8010a00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8010ea2:	2001      	movs	r0, #1
 8010ea4:	ecbd 8b02 	vpop	{d8}
 8010ea8:	bd10      	pop	{r4, pc}
 8010eaa:	2000      	movs	r0, #0
 8010eac:	e7fa      	b.n	8010ea4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

08010eae <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 8010eae:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 8010eb2:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 8010eb6:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 8010eba:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 8010ebe:	f7ff be2b 	b.w	8010b18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08010ec4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8010ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec8:	b089      	sub	sp, #36	@ 0x24
 8010eca:	461c      	mov	r4, r3
 8010ecc:	4682      	mov	sl, r0
 8010ece:	4615      	mov	r5, r2
 8010ed0:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8010ed4:	f10d 0820 	add.w	r8, sp, #32
 8010ed8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010eda:	9304      	str	r3, [sp, #16]
 8010edc:	2300      	movs	r3, #0
 8010ede:	9105      	str	r1, [sp, #20]
 8010ee0:	9306      	str	r3, [sp, #24]
 8010ee2:	f848 3d04 	str.w	r3, [r8, #-4]!
 8010ee6:	9b04      	ldr	r3, [sp, #16]
 8010ee8:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8010eec:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8010ef0:	9b05      	ldr	r3, [sp, #20]
 8010ef2:	429d      	cmp	r5, r3
 8010ef4:	d96d      	bls.n	8010fd2 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 8010ef6:	3d01      	subs	r5, #1
 8010ef8:	f819 3005 	ldrb.w	r3, [r9, r5]
 8010efc:	2b06      	cmp	r3, #6
 8010efe:	d8f7      	bhi.n	8010ef0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8010f00:	a201      	add	r2, pc, #4	@ (adr r2, 8010f08 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8010f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f06:	bf00      	nop
 8010f08:	08010f27 	.word	0x08010f27
 8010f0c:	08010ef1 	.word	0x08010ef1
 8010f10:	08010f25 	.word	0x08010f25
 8010f14:	08010f49 	.word	0x08010f49
 8010f18:	08010f49 	.word	0x08010f49
 8010f1c:	08010f4d 	.word	0x08010f4d
 8010f20:	08010f8d 	.word	0x08010f8d
 8010f24:	3c02      	subs	r4, #2
 8010f26:	4650      	mov	r0, sl
 8010f28:	9400      	str	r4, [sp, #0]
 8010f2a:	462b      	mov	r3, r5
 8010f2c:	4642      	mov	r2, r8
 8010f2e:	a906      	add	r1, sp, #24
 8010f30:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8010f34:	f7ff fcae 	bl	8010894 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8010f38:	eddd 0a07 	vldr	s1, [sp, #28]
 8010f3c:	ed9d 0a06 	vldr	s0, [sp, #24]
 8010f40:	4630      	mov	r0, r6
 8010f42:	f7ff fed1 	bl	8010ce8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8010f46:	e7d3      	b.n	8010ef0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8010f48:	3c01      	subs	r4, #1
 8010f4a:	e7ec      	b.n	8010f26 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8010f4c:	f1a4 0b04 	sub.w	fp, r4, #4
 8010f50:	3c02      	subs	r4, #2
 8010f52:	4650      	mov	r0, sl
 8010f54:	462b      	mov	r3, r5
 8010f56:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8010f5a:	f8cd b000 	str.w	fp, [sp]
 8010f5e:	4642      	mov	r2, r8
 8010f60:	a906      	add	r1, sp, #24
 8010f62:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8010f66:	f7ff fc95 	bl	8010894 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8010f6a:	eddd 2a07 	vldr	s5, [sp, #28]
 8010f6e:	ed9d 2a06 	vldr	s4, [sp, #24]
 8010f72:	4630      	mov	r0, r6
 8010f74:	ed54 1a01 	vldr	s3, [r4, #-4]
 8010f78:	ed14 1a02 	vldr	s2, [r4, #-8]
 8010f7c:	edd4 0a01 	vldr	s1, [r4, #4]
 8010f80:	ed94 0a00 	vldr	s0, [r4]
 8010f84:	f7ff fc1a 	bl	80107bc <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8010f88:	465c      	mov	r4, fp
 8010f8a:	e7b1      	b.n	8010ef0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8010f8c:	f1a4 0b06 	sub.w	fp, r4, #6
 8010f90:	3c02      	subs	r4, #2
 8010f92:	4650      	mov	r0, sl
 8010f94:	462b      	mov	r3, r5
 8010f96:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8010f9a:	f8cd b000 	str.w	fp, [sp]
 8010f9e:	4642      	mov	r2, r8
 8010fa0:	a906      	add	r1, sp, #24
 8010fa2:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8010fa6:	f7ff fc75 	bl	8010894 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8010faa:	eddd 3a07 	vldr	s7, [sp, #28]
 8010fae:	ed9d 3a06 	vldr	s6, [sp, #24]
 8010fb2:	4630      	mov	r0, r6
 8010fb4:	ed54 2a03 	vldr	s5, [r4, #-12]
 8010fb8:	ed14 2a04 	vldr	s4, [r4, #-16]
 8010fbc:	ed54 1a01 	vldr	s3, [r4, #-4]
 8010fc0:	ed14 1a02 	vldr	s2, [r4, #-8]
 8010fc4:	edd4 0a01 	vldr	s1, [r4, #4]
 8010fc8:	ed94 0a00 	vldr	s0, [r4]
 8010fcc:	f7ff fc15 	bl	80107fa <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8010fd0:	e7da      	b.n	8010f88 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8010fd2:	9b04      	ldr	r3, [sp, #16]
 8010fd4:	b113      	cbz	r3, 8010fdc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 8010fd6:	4630      	mov	r0, r6
 8010fd8:	f7ff ff69 	bl	8010eae <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8010fdc:	b009      	add	sp, #36	@ 0x24
 8010fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe2:	bf00      	nop

08010fe4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8010fe4:	eef0 7a60 	vmov.f32	s15, s1
 8010fe8:	6803      	ldr	r3, [r0, #0]
 8010fea:	689b      	ldr	r3, [r3, #8]
 8010fec:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010ff0:	ee17 2a90 	vmov	r2, s15
 8010ff4:	eef0 7a40 	vmov.f32	s15, s0
 8010ff8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010ffc:	ee17 1a90 	vmov	r1, s15
 8011000:	4718      	bx	r3
	...

08011004 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8011004:	4b04      	ldr	r3, [pc, #16]	@ (8011018 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 8011006:	b510      	push	{r4, lr}
 8011008:	4604      	mov	r4, r0
 801100a:	f840 3b14 	str.w	r3, [r0], #20
 801100e:	f001 f88b 	bl	8012128 <_ZN8touchgfx7OutlineD1Ev>
 8011012:	4620      	mov	r0, r4
 8011014:	bd10      	pop	{r4, pc}
 8011016:	bf00      	nop
 8011018:	080277e0 	.word	0x080277e0

0801101c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 801101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011020:	ed2d 8b04 	vpush	{d8-d9}
 8011024:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8011028:	b0b5      	sub	sp, #212	@ 0xd4
 801102a:	4605      	mov	r5, r0
 801102c:	468b      	mov	fp, r1
 801102e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011032:	9206      	str	r2, [sp, #24]
 8011034:	461e      	mov	r6, r3
 8011036:	2400      	movs	r4, #0
 8011038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801103c:	f240 814f 	bls.w	80112de <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8011040:	23ff      	movs	r3, #255	@ 0xff
 8011042:	1d02      	adds	r2, r0, #4
 8011044:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 80112e4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8011048:	f04f 0800 	mov.w	r8, #0
 801104c:	9300      	str	r3, [sp, #0]
 801104e:	af08      	add	r7, sp, #32
 8011050:	6981      	ldr	r1, [r0, #24]
 8011052:	a808      	add	r0, sp, #32
 8011054:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011056:	eef0 9a49 	vmov.f32	s19, s18
 801105a:	f011 fb4d 	bl	80226f8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801105e:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 8011062:	4ba1      	ldr	r3, [pc, #644]	@ (80112e8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8011064:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801106c:	2201      	movs	r2, #1
 801106e:	9308      	str	r3, [sp, #32]
 8011070:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8011074:	edd5 6a08 	vldr	s13, [r5, #32]
 8011078:	eeb0 8a49 	vmov.f32	s16, s18
 801107c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011080:	9325      	str	r3, [sp, #148]	@ 0x94
 8011082:	f04f 0300 	mov.w	r3, #0
 8011086:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 801108a:	7f6a      	ldrb	r2, [r5, #29]
 801108c:	eef0 8a49 	vmov.f32	s17, s18
 8011090:	bf48      	it	mi
 8011092:	eef1 7a67 	vnegmi.f32	s15, s15
 8011096:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 801109a:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 801109e:	46c1      	mov	r9, r8
 80110a0:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80110a4:	f04f 0a01 	mov.w	sl, #1
 80110a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80110ac:	7fab      	ldrb	r3, [r5, #30]
 80110ae:	942a      	str	r4, [sp, #168]	@ 0xa8
 80110b0:	435a      	muls	r2, r3
 80110b2:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 80110b6:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80110ba:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 80110be:	1c53      	adds	r3, r2, #1
 80110c0:	942b      	str	r4, [sp, #172]	@ 0xac
 80110c2:	942c      	str	r4, [sp, #176]	@ 0xb0
 80110c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80110c8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80110cc:	942d      	str	r4, [sp, #180]	@ 0xb4
 80110ce:	942e      	str	r4, [sp, #184]	@ 0xb8
 80110d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80110d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110d8:	942f      	str	r4, [sp, #188]	@ 0xbc
 80110da:	9430      	str	r4, [sp, #192]	@ 0xc0
 80110dc:	9431      	str	r4, [sp, #196]	@ 0xc4
 80110de:	9432      	str	r4, [sp, #200]	@ 0xc8
 80110e0:	9433      	str	r4, [sp, #204]	@ 0xcc
 80110e2:	4644      	mov	r4, r8
 80110e4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80110e8:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 80110ec:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 80110f0:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 80110f4:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 80110f8:	9b06      	ldr	r3, [sp, #24]
 80110fa:	454b      	cmp	r3, r9
 80110fc:	f000 80cc 	beq.w	8011298 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8011100:	f109 0301 	add.w	r3, r9, #1
 8011104:	9305      	str	r3, [sp, #20]
 8011106:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801110a:	2b06      	cmp	r3, #6
 801110c:	d839      	bhi.n	8011182 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801110e:	e8df f003 	tbb	[pc, r3]
 8011112:	3b04      	.short	0x3b04
 8011114:	817c6f60 	.word	0x817c6f60
 8011118:	a0          	.byte	0xa0
 8011119:	00          	.byte	0x00
 801111a:	45c1      	cmp	r9, r8
 801111c:	d92b      	bls.n	8011176 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 801111e:	eef0 0a49 	vmov.f32	s1, s18
 8011122:	4638      	mov	r0, r7
 8011124:	eeb0 0a69 	vmov.f32	s0, s19
 8011128:	f7ff fdde 	bl	8010ce8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801112c:	4638      	mov	r0, r7
 801112e:	f7ff fe67 	bl	8010e00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8011132:	4681      	mov	r9, r0
 8011134:	b9f8      	cbnz	r0, 8011176 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8011136:	eef0 0a49 	vmov.f32	s1, s18
 801113a:	4638      	mov	r0, r7
 801113c:	eeb0 0a69 	vmov.f32	s0, s19
 8011140:	f7ff fe8d 	bl	8010e5e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8011144:	4628      	mov	r0, r5
 8011146:	4623      	mov	r3, r4
 8011148:	9a05      	ldr	r2, [sp, #20]
 801114a:	4641      	mov	r1, r8
 801114c:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8011150:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8011154:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8011158:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 801115c:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8011160:	e9cd b600 	strd	fp, r6, [sp]
 8011164:	f7ff feae 	bl	8010ec4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8011168:	eef0 0a49 	vmov.f32	s1, s18
 801116c:	eeb0 0a69 	vmov.f32	s0, s19
 8011170:	4638      	mov	r0, r7
 8011172:	f7ff fe74 	bl	8010e5e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8011176:	eeb0 8a49 	vmov.f32	s16, s18
 801117a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801117e:	eef0 8a69 	vmov.f32	s17, s19
 8011182:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011186:	e7b7      	b.n	80110f8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8011188:	45c1      	cmp	r9, r8
 801118a:	d90d      	bls.n	80111a8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 801118c:	4638      	mov	r0, r7
 801118e:	f7ff fe37 	bl	8010e00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8011192:	b948      	cbnz	r0, 80111a8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8011194:	4623      	mov	r3, r4
 8011196:	464a      	mov	r2, r9
 8011198:	4641      	mov	r1, r8
 801119a:	4628      	mov	r0, r5
 801119c:	e9cd a702 	strd	sl, r7, [sp, #8]
 80111a0:	e9cd b600 	strd	fp, r6, [sp]
 80111a4:	f7ff fe8e 	bl	8010ec4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80111a8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80111ac:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 80111b0:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 80111b4:	3402      	adds	r4, #2
 80111b6:	edd3 8a00 	vldr	s17, [r3]
 80111ba:	46c8      	mov	r8, r9
 80111bc:	ed93 8a01 	vldr	s16, [r3, #4]
 80111c0:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 80111c4:	eef0 9a68 	vmov.f32	s19, s17
 80111c8:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 80111cc:	eeb0 9a48 	vmov.f32	s18, s16
 80111d0:	e7d7      	b.n	8011182 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80111d2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80111d6:	4638      	mov	r0, r7
 80111d8:	3402      	adds	r4, #2
 80111da:	edd3 8a00 	vldr	s17, [r3]
 80111de:	ed93 8a01 	vldr	s16, [r3, #4]
 80111e2:	eeb0 0a68 	vmov.f32	s0, s17
 80111e6:	eef0 0a48 	vmov.f32	s1, s16
 80111ea:	f7ff fd7d 	bl	8010ce8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80111ee:	e7c8      	b.n	8011182 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80111f0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80111f4:	edd3 8a00 	vldr	s17, [r3]
 80111f8:	eef0 0a48 	vmov.f32	s1, s16
 80111fc:	4638      	mov	r0, r7
 80111fe:	eeb0 0a68 	vmov.f32	s0, s17
 8011202:	3401      	adds	r4, #1
 8011204:	f7ff fd70 	bl	8010ce8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8011208:	e7bb      	b.n	8011182 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801120a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801120e:	ed93 8a00 	vldr	s16, [r3]
 8011212:	e7f1      	b.n	80111f8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8011214:	00a3      	lsls	r3, r4, #2
 8011216:	eef0 0a48 	vmov.f32	s1, s16
 801121a:	eeb0 0a68 	vmov.f32	s0, s17
 801121e:	4638      	mov	r0, r7
 8011220:	f103 0208 	add.w	r2, r3, #8
 8011224:	f103 090c 	add.w	r9, r3, #12
 8011228:	4433      	add	r3, r6
 801122a:	3404      	adds	r4, #4
 801122c:	4432      	add	r2, r6
 801122e:	44b1      	add	r9, r6
 8011230:	edd3 1a01 	vldr	s3, [r3, #4]
 8011234:	ed92 2a00 	vldr	s4, [r2]
 8011238:	edd9 2a00 	vldr	s5, [r9]
 801123c:	ed93 1a00 	vldr	s2, [r3]
 8011240:	9207      	str	r2, [sp, #28]
 8011242:	f7ff fabb 	bl	80107bc <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8011246:	9a07      	ldr	r2, [sp, #28]
 8011248:	ed99 8a00 	vldr	s16, [r9]
 801124c:	edd2 8a00 	vldr	s17, [r2]
 8011250:	e797      	b.n	8011182 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8011252:	00a3      	lsls	r3, r4, #2
 8011254:	eef0 0a48 	vmov.f32	s1, s16
 8011258:	eeb0 0a68 	vmov.f32	s0, s17
 801125c:	4638      	mov	r0, r7
 801125e:	f103 0210 	add.w	r2, r3, #16
 8011262:	f103 0914 	add.w	r9, r3, #20
 8011266:	4433      	add	r3, r6
 8011268:	3406      	adds	r4, #6
 801126a:	4432      	add	r2, r6
 801126c:	44b1      	add	r9, r6
 801126e:	edd3 2a03 	vldr	s5, [r3, #12]
 8011272:	ed92 3a00 	vldr	s6, [r2]
 8011276:	edd9 3a00 	vldr	s7, [r9]
 801127a:	ed93 2a02 	vldr	s4, [r3, #8]
 801127e:	edd3 1a01 	vldr	s3, [r3, #4]
 8011282:	ed93 1a00 	vldr	s2, [r3]
 8011286:	9207      	str	r2, [sp, #28]
 8011288:	f7ff fab7 	bl	80107fa <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 801128c:	9a07      	ldr	r2, [sp, #28]
 801128e:	ed99 8a00 	vldr	s16, [r9]
 8011292:	edd2 8a00 	vldr	s17, [r2]
 8011296:	e774      	b.n	8011182 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8011298:	9b06      	ldr	r3, [sp, #24]
 801129a:	af08      	add	r7, sp, #32
 801129c:	4543      	cmp	r3, r8
 801129e:	d90f      	bls.n	80112c0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 80112a0:	4638      	mov	r0, r7
 80112a2:	f7ff fdad 	bl	8010e00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80112a6:	b958      	cbnz	r0, 80112c0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 80112a8:	2301      	movs	r3, #1
 80112aa:	9703      	str	r7, [sp, #12]
 80112ac:	f8cd b000 	str.w	fp, [sp]
 80112b0:	4641      	mov	r1, r8
 80112b2:	9a06      	ldr	r2, [sp, #24]
 80112b4:	4628      	mov	r0, r5
 80112b6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80112ba:	4623      	mov	r3, r4
 80112bc:	f7ff fe02 	bl	8010ec4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80112c0:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 80112c4:	4638      	mov	r0, r7
 80112c6:	f011 faab 	bl	8022820 <_ZN8touchgfx6Canvas6renderEh>
 80112ca:	4604      	mov	r4, r0
 80112cc:	4638      	mov	r0, r7
 80112ce:	f7ff fe99 	bl	8011004 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 80112d2:	4620      	mov	r0, r4
 80112d4:	b035      	add	sp, #212	@ 0xd4
 80112d6:	ecbd 8b04 	vpop	{d8-d9}
 80112da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112de:	2401      	movs	r4, #1
 80112e0:	e7f7      	b.n	80112d2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 80112e2:	bf00      	nop
 80112e4:	00000000 	.word	0x00000000
 80112e8:	08027244 	.word	0x08027244

080112ec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 80112ec:	b510      	push	{r4, lr}
 80112ee:	4604      	mov	r4, r0
 80112f0:	f7ff fe88 	bl	8011004 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 80112f4:	21b0      	movs	r1, #176	@ 0xb0
 80112f6:	4620      	mov	r0, r4
 80112f8:	f011 fe5f 	bl	8022fba <_ZdlPvj>
 80112fc:	4620      	mov	r0, r4
 80112fe:	bd10      	pop	{r4, pc}

08011300 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8011300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011304:	4698      	mov	r8, r3
 8011306:	23ff      	movs	r3, #255	@ 0xff
 8011308:	4607      	mov	r7, r0
 801130a:	4689      	mov	r9, r1
 801130c:	4692      	mov	sl, r2
 801130e:	1d02      	adds	r2, r0, #4
 8011310:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8011314:	2400      	movs	r4, #0
 8011316:	44ca      	add	sl, r9
 8011318:	ed2d 8b06 	vpush	{d8-d10}
 801131c:	b0aa      	sub	sp, #168	@ 0xa8
 801131e:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8011524 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8011322:	9300      	str	r3, [sp, #0]
 8011324:	eef0 8a48 	vmov.f32	s17, s16
 8011328:	6981      	ldr	r1, [r0, #24]
 801132a:	a80d      	add	r0, sp, #52	@ 0x34
 801132c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801132e:	f011 f9e3 	bl	80226f8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8011332:	7f3b      	ldrb	r3, [r7, #28]
 8011334:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8011524 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8011338:	4628      	mov	r0, r5
 801133a:	1e5a      	subs	r2, r3, #1
 801133c:	eeb0 0a60 	vmov.f32	s0, s1
 8011340:	4253      	negs	r3, r2
 8011342:	4153      	adcs	r3, r2
 8011344:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8011348:	f005 f84f 	bl	80163ea <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801134c:	eeb0 9a40 	vmov.f32	s18, s0
 8011350:	eef0 9a60 	vmov.f32	s19, s1
 8011354:	45ca      	cmp	sl, r9
 8011356:	f000 80cd 	beq.w	80114f4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 801135a:	f819 3b01 	ldrb.w	r3, [r9], #1
 801135e:	2b06      	cmp	r3, #6
 8011360:	d8f8      	bhi.n	8011354 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8011362:	e8df f003 	tbb	[pc, r3]
 8011366:	0804      	.short	0x0804
 8011368:	58533f2a 	.word	0x58533f2a
 801136c:	8a          	.byte	0x8a
 801136d:	00          	.byte	0x00
 801136e:	a80d      	add	r0, sp, #52	@ 0x34
 8011370:	f011 fa34 	bl	80227dc <_ZN8touchgfx6Canvas5closeEv>
 8011374:	e7ee      	b.n	8011354 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8011376:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801137a:	4628      	mov	r0, r5
 801137c:	ed93 8a01 	vldr	s16, [r3, #4]
 8011380:	edd3 8a00 	vldr	s17, [r3]
 8011384:	eef0 0a48 	vmov.f32	s1, s16
 8011388:	eeb0 0a68 	vmov.f32	s0, s17
 801138c:	f005 f82d 	bl	80163ea <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011390:	a80d      	add	r0, sp, #52	@ 0x34
 8011392:	eef0 7a60 	vmov.f32	s15, s1
 8011396:	eeb0 9a40 	vmov.f32	s18, s0
 801139a:	eef0 9a60 	vmov.f32	s19, s1
 801139e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80113a2:	ee17 2a90 	vmov	r2, s15
 80113a6:	eef0 7a40 	vmov.f32	s15, s0
 80113aa:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80113ae:	ee17 1a90 	vmov	r1, s15
 80113b2:	f011 faed 	bl	8022990 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80113b6:	3402      	adds	r4, #2
 80113b8:	e7cc      	b.n	8011354 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80113ba:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80113be:	4628      	mov	r0, r5
 80113c0:	edd3 8a00 	vldr	s17, [r3]
 80113c4:	ed93 8a01 	vldr	s16, [r3, #4]
 80113c8:	eeb0 0a68 	vmov.f32	s0, s17
 80113cc:	eef0 0a48 	vmov.f32	s1, s16
 80113d0:	f005 f80b 	bl	80163ea <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80113d4:	a80d      	add	r0, sp, #52	@ 0x34
 80113d6:	eeb0 9a40 	vmov.f32	s18, s0
 80113da:	eef0 9a60 	vmov.f32	s19, s1
 80113de:	f7ff fe01 	bl	8010fe4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80113e2:	e7e8      	b.n	80113b6 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 80113e4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80113e8:	edd3 8a00 	vldr	s17, [r3]
 80113ec:	eef0 0a48 	vmov.f32	s1, s16
 80113f0:	4628      	mov	r0, r5
 80113f2:	eeb0 0a68 	vmov.f32	s0, s17
 80113f6:	3401      	adds	r4, #1
 80113f8:	f004 fff7 	bl	80163ea <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80113fc:	a80d      	add	r0, sp, #52	@ 0x34
 80113fe:	eef0 9a60 	vmov.f32	s19, s1
 8011402:	eeb0 9a40 	vmov.f32	s18, s0
 8011406:	f7ff fded 	bl	8010fe4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801140a:	e7a3      	b.n	8011354 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801140c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8011410:	ed93 8a00 	vldr	s16, [r3]
 8011414:	e7ea      	b.n	80113ec <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8011416:	1ca3      	adds	r3, r4, #2
 8011418:	4628      	mov	r0, r5
 801141a:	3404      	adds	r4, #4
 801141c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8011420:	ed53 0a01 	vldr	s1, [r3, #-4]
 8011424:	ed13 0a02 	vldr	s0, [r3, #-8]
 8011428:	edd3 8a00 	vldr	s17, [r3]
 801142c:	ed93 8a01 	vldr	s16, [r3, #4]
 8011430:	f004 ffdb 	bl	80163ea <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011434:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8011438:	eeb0 0a68 	vmov.f32	s0, s17
 801143c:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8011440:	eef0 0a48 	vmov.f32	s1, s16
 8011444:	4628      	mov	r0, r5
 8011446:	f004 ffd0 	bl	80163ea <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801144a:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 801144e:	eef0 2a60 	vmov.f32	s5, s1
 8011452:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8011456:	eeb0 2a40 	vmov.f32	s4, s0
 801145a:	a80d      	add	r0, sp, #52	@ 0x34
 801145c:	eeb0 aa40 	vmov.f32	s20, s0
 8011460:	eef0 aa60 	vmov.f32	s21, s1
 8011464:	eeb0 0a49 	vmov.f32	s0, s18
 8011468:	eef0 0a69 	vmov.f32	s1, s19
 801146c:	f7ff f9a6 	bl	80107bc <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8011470:	eef0 9a6a 	vmov.f32	s19, s21
 8011474:	eeb0 9a4a 	vmov.f32	s18, s20
 8011478:	e76c      	b.n	8011354 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801147a:	1d26      	adds	r6, r4, #4
 801147c:	4628      	mov	r0, r5
 801147e:	3406      	adds	r4, #6
 8011480:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011484:	ed56 0a03 	vldr	s1, [r6, #-12]
 8011488:	ed16 0a04 	vldr	s0, [r6, #-16]
 801148c:	edd6 8a00 	vldr	s17, [r6]
 8011490:	ed96 8a01 	vldr	s16, [r6, #4]
 8011494:	f004 ffa9 	bl	80163ea <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011498:	ed8d 0a07 	vstr	s0, [sp, #28]
 801149c:	4628      	mov	r0, r5
 801149e:	ed16 0a02 	vldr	s0, [r6, #-8]
 80114a2:	edcd 0a08 	vstr	s1, [sp, #32]
 80114a6:	ed56 0a01 	vldr	s1, [r6, #-4]
 80114aa:	f004 ff9e 	bl	80163ea <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80114ae:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 80114b2:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 80114b6:	eeb0 0a68 	vmov.f32	s0, s17
 80114ba:	eef0 0a48 	vmov.f32	s1, s16
 80114be:	4628      	mov	r0, r5
 80114c0:	f004 ff93 	bl	80163ea <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80114c4:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 80114c8:	eeb0 3a40 	vmov.f32	s6, s0
 80114cc:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 80114d0:	eef0 3a60 	vmov.f32	s7, s1
 80114d4:	eddd 1a08 	vldr	s3, [sp, #32]
 80114d8:	eeb0 aa40 	vmov.f32	s20, s0
 80114dc:	ed9d 1a07 	vldr	s2, [sp, #28]
 80114e0:	eef0 aa60 	vmov.f32	s21, s1
 80114e4:	a80d      	add	r0, sp, #52	@ 0x34
 80114e6:	eef0 0a69 	vmov.f32	s1, s19
 80114ea:	eeb0 0a49 	vmov.f32	s0, s18
 80114ee:	f7ff f984 	bl	80107fa <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80114f2:	e7bd      	b.n	8011470 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 80114f4:	7f7b      	ldrb	r3, [r7, #29]
 80114f6:	a80d      	add	r0, sp, #52	@ 0x34
 80114f8:	7fb9      	ldrb	r1, [r7, #30]
 80114fa:	4359      	muls	r1, r3
 80114fc:	1c4b      	adds	r3, r1, #1
 80114fe:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8011502:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011506:	f011 f98b 	bl	8022820 <_ZN8touchgfx6Canvas6renderEh>
 801150a:	4b07      	ldr	r3, [pc, #28]	@ (8011528 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 801150c:	4604      	mov	r4, r0
 801150e:	a812      	add	r0, sp, #72	@ 0x48
 8011510:	930d      	str	r3, [sp, #52]	@ 0x34
 8011512:	f000 fe09 	bl	8012128 <_ZN8touchgfx7OutlineD1Ev>
 8011516:	4620      	mov	r0, r4
 8011518:	b02a      	add	sp, #168	@ 0xa8
 801151a:	ecbd 8b06 	vpop	{d8-d10}
 801151e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011522:	bf00      	nop
 8011524:	00000000 	.word	0x00000000
 8011528:	080277e0 	.word	0x080277e0

0801152c <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 801152c:	b410      	push	{r4}
 801152e:	7f04      	ldrb	r4, [r0, #28]
 8011530:	b11c      	cbz	r4, 801153a <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8011532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011536:	f7ff bee3 	b.w	8011300 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 801153a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801153e:	f7ff bd6d 	b.w	801101c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>
	...

08011544 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8011544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011548:	4691      	mov	r9, r2
 801154a:	4602      	mov	r2, r0
 801154c:	b085      	sub	sp, #20
 801154e:	4605      	mov	r5, r0
 8011550:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8011554:	4688      	mov	r8, r1
 8011556:	469a      	mov	sl, r3
 8011558:	ab02      	add	r3, sp, #8
 801155a:	6851      	ldr	r1, [r2, #4]
 801155c:	af02      	add	r7, sp, #8
 801155e:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8011562:	c303      	stmia	r3!, {r0, r1}
 8011564:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011568:	2b00      	cmp	r3, #0
 801156a:	dd08      	ble.n	801157e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 801156c:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8011570:	2c00      	cmp	r4, #0
 8011572:	dd04      	ble.n	801157e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8011574:	4a2e      	ldr	r2, [pc, #184]	@ (8011630 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xec>)
 8011576:	7812      	ldrb	r2, [r2, #0]
 8011578:	b122      	cbz	r2, 8011584 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x40>
 801157a:	2a01      	cmp	r2, #1
 801157c:	d02d      	beq.n	80115da <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x96>
 801157e:	b005      	add	sp, #20
 8011580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011584:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011588:	441c      	add	r4, r3
 801158a:	b2a4      	uxth	r4, r4
 801158c:	b226      	sxth	r6, r4
 801158e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8011592:	42b3      	cmp	r3, r6
 8011594:	daf3      	bge.n	801157e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8011596:	4653      	mov	r3, sl
 8011598:	464a      	mov	r2, r9
 801159a:	4641      	mov	r1, r8
 801159c:	4628      	mov	r0, r5
 801159e:	e9cd b700 	strd	fp, r7, [sp]
 80115a2:	f7ff ffc3 	bl	801152c <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 80115a6:	b940      	cbnz	r0, 80115ba <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 80115a8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80115ac:	2b01      	cmp	r3, #1
 80115ae:	d004      	beq.n	80115ba <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 80115b0:	3301      	adds	r3, #1
 80115b2:	105b      	asrs	r3, r3, #1
 80115b4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80115b8:	e7ed      	b.n	8011596 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x52>
 80115ba:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80115be:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80115c2:	4413      	add	r3, r2
 80115c4:	b29b      	uxth	r3, r3
 80115c6:	441a      	add	r2, r3
 80115c8:	f8ad 300a 	strh.w	r3, [sp, #10]
 80115cc:	b212      	sxth	r2, r2
 80115ce:	4296      	cmp	r6, r2
 80115d0:	dadd      	bge.n	801158e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 80115d2:	1ae3      	subs	r3, r4, r3
 80115d4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80115d8:	e7d9      	b.n	801158e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 80115da:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 80115de:	441c      	add	r4, r3
 80115e0:	b2a4      	uxth	r4, r4
 80115e2:	b226      	sxth	r6, r4
 80115e4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80115e8:	42b3      	cmp	r3, r6
 80115ea:	dac8      	bge.n	801157e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 80115ec:	4653      	mov	r3, sl
 80115ee:	464a      	mov	r2, r9
 80115f0:	4641      	mov	r1, r8
 80115f2:	4628      	mov	r0, r5
 80115f4:	e9cd b700 	strd	fp, r7, [sp]
 80115f8:	f7ff ff98 	bl	801152c <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 80115fc:	b940      	cbnz	r0, 8011610 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 80115fe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011602:	2b01      	cmp	r3, #1
 8011604:	d004      	beq.n	8011610 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 8011606:	3301      	adds	r3, #1
 8011608:	105b      	asrs	r3, r3, #1
 801160a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801160e:	e7ed      	b.n	80115ec <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa8>
 8011610:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8011614:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011618:	4413      	add	r3, r2
 801161a:	b29b      	uxth	r3, r3
 801161c:	441a      	add	r2, r3
 801161e:	f8ad 3008 	strh.w	r3, [sp, #8]
 8011622:	b212      	sxth	r2, r2
 8011624:	4296      	cmp	r6, r2
 8011626:	dadd      	bge.n	80115e4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 8011628:	1ae3      	subs	r3, r4, r3
 801162a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801162e:	e7d9      	b.n	80115e4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 8011630:	240255c4 	.word	0x240255c4

08011634 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8011634:	0c0b      	lsrs	r3, r1, #16
 8011636:	60c1      	str	r1, [r0, #12]
 8011638:	7481      	strb	r1, [r0, #18]
 801163a:	7403      	strb	r3, [r0, #16]
 801163c:	0a0b      	lsrs	r3, r1, #8
 801163e:	7443      	strb	r3, [r0, #17]
 8011640:	4770      	bx	lr

08011642 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8011642:	f1a0 0008 	sub.w	r0, r0, #8
 8011646:	e7f5      	b.n	8011634 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>

08011648 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 8011648:	b508      	push	{r3, lr}
 801164a:	4b05      	ldr	r3, [pc, #20]	@ (8011660 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 801164c:	6818      	ldr	r0, [r3, #0]
 801164e:	6803      	ldr	r3, [r0, #0]
 8011650:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011654:	4798      	blx	r3
 8011656:	1e43      	subs	r3, r0, #1
 8011658:	4258      	negs	r0, r3
 801165a:	4158      	adcs	r0, r3
 801165c:	bd08      	pop	{r3, pc}
 801165e:	bf00      	nop
 8011660:	240255cc 	.word	0x240255cc

08011664 <_ZN8touchgfx13PainterRGB888D1Ev>:
 8011664:	4770      	bx	lr

08011666 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 8011666:	3808      	subs	r0, #8
 8011668:	4770      	bx	lr

0801166a <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 801166a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801166e:	b410      	push	{r4}
 8011670:	188c      	adds	r4, r1, r2
 8011672:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011676:	68c2      	ldr	r2, [r0, #12]
 8011678:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801167c:	4620      	mov	r0, r4
 801167e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011682:	f7f1 be83 	b.w	800338c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08011686 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8011686:	f7f1 be5d 	b.w	8003344 <_ZN8touchgfx5paint8tearDownEv>

0801168a <_ZN8touchgfx13PainterRGB888D0Ev>:
 801168a:	b510      	push	{r4, lr}
 801168c:	4604      	mov	r4, r0
 801168e:	2114      	movs	r1, #20
 8011690:	f011 fc93 	bl	8022fba <_ZdlPvj>
 8011694:	4620      	mov	r0, r4
 8011696:	bd10      	pop	{r4, pc}

08011698 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8011698:	f1a0 0008 	sub.w	r0, r0, #8
 801169c:	e7f5      	b.n	801168a <_ZN8touchgfx13PainterRGB888D0Ev>
	...

080116a0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 80116a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80116a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116a8:	4411      	add	r1, r2
 80116aa:	7c42      	ldrb	r2, [r0, #17]
 80116ac:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 80116b0:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 80116b4:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 80116b8:	2a00      	cmp	r2, #0
 80116ba:	f000 8084 	beq.w	80117c6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 80116be:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80116c2:	ed90 7a08 	vldr	s14, [r0, #32]
 80116c6:	42a2      	cmp	r2, r4
 80116c8:	68c3      	ldr	r3, [r0, #12]
 80116ca:	db20      	blt.n	801170e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 80116cc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80116d0:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80116d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116d8:	bfc8      	it	gt
 80116da:	2200      	movgt	r2, #0
 80116dc:	589a      	ldr	r2, [r3, r2]
 80116de:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80116e2:	7c03      	ldrb	r3, [r0, #16]
 80116e4:	fa5f fc82 	uxtb.w	ip, r2
 80116e8:	f3c2 2707 	ubfx	r7, r2, #8, #8
 80116ec:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80116f0:	440e      	add	r6, r1
 80116f2:	b36b      	cbz	r3, 8011750 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 80116f4:	2dff      	cmp	r5, #255	@ 0xff
 80116f6:	d12b      	bne.n	8011750 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 80116f8:	42b1      	cmp	r1, r6
 80116fa:	f080 8204 	bcs.w	8011b06 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80116fe:	f881 c000 	strb.w	ip, [r1]
 8011702:	3103      	adds	r1, #3
 8011704:	f801 7c02 	strb.w	r7, [r1, #-2]
 8011708:	f801 4c01 	strb.w	r4, [r1, #-1]
 801170c:	e7f4      	b.n	80116f8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 801170e:	f9b0 700a 	ldrsh.w	r7, [r0, #10]
 8011712:	42a7      	cmp	r7, r4
 8011714:	dc08      	bgt.n	8011728 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 8011716:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801171a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801171e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011722:	bfd8      	it	le
 8011724:	2200      	movle	r2, #0
 8011726:	e7d9      	b.n	80116dc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8011728:	1aa2      	subs	r2, r4, r2
 801172a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801172e:	ee07 2a90 	vmov	s15, r2
 8011732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801173a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801173e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011742:	ee17 2a90 	vmov	r2, s15
 8011746:	bfd8      	it	le
 8011748:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 801174c:	0092      	lsls	r2, r2, #2
 801174e:	e7c5      	b.n	80116dc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8011750:	0e12      	lsrs	r2, r2, #24
 8011752:	4355      	muls	r5, r2
 8011754:	1c6a      	adds	r2, r5, #1
 8011756:	eb02 2525 	add.w	r5, r2, r5, asr #8
 801175a:	122d      	asrs	r5, r5, #8
 801175c:	43e8      	mvns	r0, r5
 801175e:	b2ad      	uxth	r5, r5
 8011760:	fb1c fc05 	smulbb	ip, ip, r5
 8011764:	b2c0      	uxtb	r0, r0
 8011766:	fb17 f705 	smulbb	r7, r7, r5
 801176a:	fb14 f505 	smulbb	r5, r4, r5
 801176e:	fa1f fc8c 	uxth.w	ip, ip
 8011772:	b2bf      	uxth	r7, r7
 8011774:	b2ad      	uxth	r5, r5
 8011776:	428e      	cmp	r6, r1
 8011778:	f101 0303 	add.w	r3, r1, #3
 801177c:	f240 81c3 	bls.w	8011b06 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011780:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8011784:	fb02 c200 	mla	r2, r2, r0, ip
 8011788:	b292      	uxth	r2, r2
 801178a:	1c51      	adds	r1, r2, #1
 801178c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8011790:	1212      	asrs	r2, r2, #8
 8011792:	f803 2c03 	strb.w	r2, [r3, #-3]
 8011796:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801179a:	fb02 7200 	mla	r2, r2, r0, r7
 801179e:	b292      	uxth	r2, r2
 80117a0:	1c51      	adds	r1, r2, #1
 80117a2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80117a6:	1212      	asrs	r2, r2, #8
 80117a8:	f803 2c02 	strb.w	r2, [r3, #-2]
 80117ac:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80117b0:	fb02 5200 	mla	r2, r2, r0, r5
 80117b4:	b292      	uxth	r2, r2
 80117b6:	1c51      	adds	r1, r2, #1
 80117b8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80117bc:	4619      	mov	r1, r3
 80117be:	1212      	asrs	r2, r2, #8
 80117c0:	f803 2c01 	strb.w	r2, [r3, #-1]
 80117c4:	e7d7      	b.n	8011776 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 80117c6:	7c82      	ldrb	r2, [r0, #18]
 80117c8:	2a00      	cmp	r2, #0
 80117ca:	d047      	beq.n	801185c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 80117cc:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80117d0:	ee07 2a10 	vmov	s14, r2
 80117d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80117d8:	ee07 3a90 	vmov	s15, r3
 80117dc:	461a      	mov	r2, r3
 80117de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80117e2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80117e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ea:	f200 808e 	bhi.w	801190a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 80117ee:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80117f2:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80117f6:	68c7      	ldr	r7, [r0, #12]
 80117f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011800:	ee06 6a90 	vmov	s13, r6
 8011804:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011808:	eef4 7ae6 	vcmpe.f32	s15, s13
 801180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011810:	bf4a      	itet	mi
 8011812:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 8011816:	4634      	movpl	r4, r6
 8011818:	ee17 4a90 	vmovmi	r4, s15
 801181c:	edd0 7a08 	vldr	s15, [r0, #32]
 8011820:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011824:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8011828:	448e      	add	lr, r1
 801182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801182e:	bfc8      	it	gt
 8011830:	2200      	movgt	r2, #0
 8011832:	58bf      	ldr	r7, [r7, r2]
 8011834:	7c02      	ldrb	r2, [r0, #16]
 8011836:	fa5f f987 	uxtb.w	r9, r7
 801183a:	f3c7 2807 	ubfx	r8, r7, #8, #8
 801183e:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8011842:	b31a      	cbz	r2, 801188c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8011844:	2dff      	cmp	r5, #255	@ 0xff
 8011846:	d121      	bne.n	801188c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8011848:	4571      	cmp	r1, lr
 801184a:	d25d      	bcs.n	8011908 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 801184c:	f881 9000 	strb.w	r9, [r1]
 8011850:	3103      	adds	r1, #3
 8011852:	f801 8c02 	strb.w	r8, [r1, #-2]
 8011856:	f801 cc01 	strb.w	ip, [r1, #-1]
 801185a:	e7f5      	b.n	8011848 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 801185c:	ee07 4a90 	vmov	s15, r4
 8011860:	ed90 7a06 	vldr	s14, [r0, #24]
 8011864:	edd0 6a05 	vldr	s13, [r0, #20]
 8011868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801186c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011870:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011874:	edd0 7a08 	vldr	s15, [r0, #32]
 8011878:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011880:	bf44      	itt	mi
 8011882:	edd0 7a07 	vldrmi	s15, [r0, #28]
 8011886:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 801188a:	e7a5      	b.n	80117d8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 801188c:	0e3f      	lsrs	r7, r7, #24
 801188e:	436f      	muls	r7, r5
 8011890:	1c7a      	adds	r2, r7, #1
 8011892:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8011896:	1212      	asrs	r2, r2, #8
 8011898:	ea6f 0a02 	mvn.w	sl, r2
 801189c:	b292      	uxth	r2, r2
 801189e:	fb19 f902 	smulbb	r9, r9, r2
 80118a2:	fa5f fa8a 	uxtb.w	sl, sl
 80118a6:	fb18 f802 	smulbb	r8, r8, r2
 80118aa:	fb1c fc02 	smulbb	ip, ip, r2
 80118ae:	fa1f f989 	uxth.w	r9, r9
 80118b2:	fa1f f888 	uxth.w	r8, r8
 80118b6:	fa1f fc8c 	uxth.w	ip, ip
 80118ba:	458e      	cmp	lr, r1
 80118bc:	f101 0203 	add.w	r2, r1, #3
 80118c0:	d922      	bls.n	8011908 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 80118c2:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 80118c6:	fb01 910a 	mla	r1, r1, sl, r9
 80118ca:	b289      	uxth	r1, r1
 80118cc:	1c4f      	adds	r7, r1, #1
 80118ce:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80118d2:	1209      	asrs	r1, r1, #8
 80118d4:	f802 1c03 	strb.w	r1, [r2, #-3]
 80118d8:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80118dc:	fb01 810a 	mla	r1, r1, sl, r8
 80118e0:	b289      	uxth	r1, r1
 80118e2:	1c4f      	adds	r7, r1, #1
 80118e4:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80118e8:	1209      	asrs	r1, r1, #8
 80118ea:	f802 1c02 	strb.w	r1, [r2, #-2]
 80118ee:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80118f2:	fb01 c10a 	mla	r1, r1, sl, ip
 80118f6:	b289      	uxth	r1, r1
 80118f8:	1c4f      	adds	r7, r1, #1
 80118fa:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80118fe:	1209      	asrs	r1, r1, #8
 8011900:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011904:	4611      	mov	r1, r2
 8011906:	e7d8      	b.n	80118ba <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 8011908:	191a      	adds	r2, r3, r4
 801190a:	4433      	add	r3, r6
 801190c:	b21b      	sxth	r3, r3
 801190e:	4293      	cmp	r3, r2
 8011910:	f340 80f9 	ble.w	8011b06 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011914:	edd0 7a07 	vldr	s15, [r0, #28]
 8011918:	ee06 2a90 	vmov	s13, r2
 801191c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011920:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011924:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801192c:	f340 80b0 	ble.w	8011a90 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 8011930:	ee06 3a10 	vmov	s12, r3
 8011934:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011938:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8011b0c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 801193c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011940:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011944:	ed90 6a08 	vldr	s12, [r0, #32]
 8011948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801194c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8011950:	bfd6      	itet	le
 8011952:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8011956:	469c      	movgt	ip, r3
 8011958:	ee17 ca90 	vmovle	ip, s15
 801195c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011960:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8011b10 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8011964:	ebac 0202 	sub.w	r2, ip, r2
 8011968:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 801196c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011970:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011974:	188c      	adds	r4, r1, r2
 8011976:	7c02      	ldrb	r2, [r0, #16]
 8011978:	b1d2      	cbz	r2, 80119b0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801197a:	2dff      	cmp	r5, #255	@ 0xff
 801197c:	d118      	bne.n	80119b0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801197e:	42a1      	cmp	r1, r4
 8011980:	d261      	bcs.n	8011a46 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8011982:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011986:	68c6      	ldr	r6, [r0, #12]
 8011988:	3103      	adds	r1, #3
 801198a:	ee17 7a10 	vmov	r7, s14
 801198e:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8011992:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 8011996:	f801 6c03 	strb.w	r6, [r1, #-3]
 801199a:	7856      	ldrb	r6, [r2, #1]
 801199c:	f801 6c02 	strb.w	r6, [r1, #-2]
 80119a0:	7892      	ldrb	r2, [r2, #2]
 80119a2:	f801 2c01 	strb.w	r2, [r1, #-1]
 80119a6:	ed90 7a08 	vldr	s14, [r0, #32]
 80119aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80119ae:	e7e6      	b.n	801197e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 80119b0:	68c2      	ldr	r2, [r0, #12]
 80119b2:	428c      	cmp	r4, r1
 80119b4:	f101 0e03 	add.w	lr, r1, #3
 80119b8:	d945      	bls.n	8011a46 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 80119ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80119be:	ee17 9a10 	vmov	r9, s14
 80119c2:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 80119c6:	f898 7003 	ldrb.w	r7, [r8, #3]
 80119ca:	fb07 f605 	mul.w	r6, r7, r5
 80119ce:	1c77      	adds	r7, r6, #1
 80119d0:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80119d4:	123f      	asrs	r7, r7, #8
 80119d6:	b2b9      	uxth	r1, r7
 80119d8:	43ff      	mvns	r7, r7
 80119da:	b2fe      	uxtb	r6, r7
 80119dc:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 80119e0:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 80119e4:	fb19 f906 	smulbb	r9, r9, r6
 80119e8:	fb07 9701 	mla	r7, r7, r1, r9
 80119ec:	b2bf      	uxth	r7, r7
 80119ee:	f107 0901 	add.w	r9, r7, #1
 80119f2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80119f6:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 80119fa:	fb19 f906 	smulbb	r9, r9, r6
 80119fe:	123f      	asrs	r7, r7, #8
 8011a00:	f80e 7c03 	strb.w	r7, [lr, #-3]
 8011a04:	f898 7001 	ldrb.w	r7, [r8, #1]
 8011a08:	fb07 9701 	mla	r7, r7, r1, r9
 8011a0c:	b2bf      	uxth	r7, r7
 8011a0e:	f107 0901 	add.w	r9, r7, #1
 8011a12:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8011a16:	123f      	asrs	r7, r7, #8
 8011a18:	f80e 7c02 	strb.w	r7, [lr, #-2]
 8011a1c:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 8011a20:	f898 8002 	ldrb.w	r8, [r8, #2]
 8011a24:	fb17 f606 	smulbb	r6, r7, r6
 8011a28:	fb08 6601 	mla	r6, r8, r1, r6
 8011a2c:	b2b6      	uxth	r6, r6
 8011a2e:	1c71      	adds	r1, r6, #1
 8011a30:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8011a34:	4671      	mov	r1, lr
 8011a36:	1236      	asrs	r6, r6, #8
 8011a38:	f80e 6c01 	strb.w	r6, [lr, #-1]
 8011a3c:	ed90 7a08 	vldr	s14, [r0, #32]
 8011a40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a44:	e7b5      	b.n	80119b2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 8011a46:	4563      	cmp	r3, ip
 8011a48:	dd5d      	ble.n	8011b06 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011a4a:	edd0 7a08 	vldr	s15, [r0, #32]
 8011a4e:	eba3 030c 	sub.w	r3, r3, ip
 8011a52:	68c4      	ldr	r4, [r0, #12]
 8011a54:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8011a58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011a5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011a60:	7c00      	ldrb	r0, [r0, #16]
 8011a62:	440b      	add	r3, r1
 8011a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a68:	bfd8      	it	le
 8011a6a:	2200      	movle	r2, #0
 8011a6c:	58a2      	ldr	r2, [r4, r2]
 8011a6e:	b2d4      	uxtb	r4, r2
 8011a70:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8011a74:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8011a78:	b160      	cbz	r0, 8011a94 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8011a7a:	2dff      	cmp	r5, #255	@ 0xff
 8011a7c:	d10a      	bne.n	8011a94 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8011a7e:	4299      	cmp	r1, r3
 8011a80:	d241      	bcs.n	8011b06 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011a82:	700c      	strb	r4, [r1, #0]
 8011a84:	3103      	adds	r1, #3
 8011a86:	f801 cc02 	strb.w	ip, [r1, #-2]
 8011a8a:	f801 7c01 	strb.w	r7, [r1, #-1]
 8011a8e:	e7f6      	b.n	8011a7e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8011a90:	4694      	mov	ip, r2
 8011a92:	e7da      	b.n	8011a4a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8011a94:	0e12      	lsrs	r2, r2, #24
 8011a96:	436a      	muls	r2, r5
 8011a98:	1c55      	adds	r5, r2, #1
 8011a9a:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8011a9e:	122d      	asrs	r5, r5, #8
 8011aa0:	43ee      	mvns	r6, r5
 8011aa2:	b2ad      	uxth	r5, r5
 8011aa4:	fb14 f405 	smulbb	r4, r4, r5
 8011aa8:	b2f6      	uxtb	r6, r6
 8011aaa:	fb1c f005 	smulbb	r0, ip, r5
 8011aae:	fb17 f505 	smulbb	r5, r7, r5
 8011ab2:	b2a4      	uxth	r4, r4
 8011ab4:	b280      	uxth	r0, r0
 8011ab6:	b2ad      	uxth	r5, r5
 8011ab8:	428b      	cmp	r3, r1
 8011aba:	f101 0203 	add.w	r2, r1, #3
 8011abe:	d922      	bls.n	8011b06 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011ac0:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8011ac4:	fb01 4106 	mla	r1, r1, r6, r4
 8011ac8:	b289      	uxth	r1, r1
 8011aca:	1c4f      	adds	r7, r1, #1
 8011acc:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011ad0:	1209      	asrs	r1, r1, #8
 8011ad2:	f802 1c03 	strb.w	r1, [r2, #-3]
 8011ad6:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8011ada:	fb01 0106 	mla	r1, r1, r6, r0
 8011ade:	b289      	uxth	r1, r1
 8011ae0:	1c4f      	adds	r7, r1, #1
 8011ae2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011ae6:	1209      	asrs	r1, r1, #8
 8011ae8:	f802 1c02 	strb.w	r1, [r2, #-2]
 8011aec:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011af0:	fb01 5106 	mla	r1, r1, r6, r5
 8011af4:	b289      	uxth	r1, r1
 8011af6:	1c4f      	adds	r7, r1, #1
 8011af8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011afc:	1209      	asrs	r1, r1, #8
 8011afe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011b02:	4611      	mov	r1, r2
 8011b04:	e7d8      	b.n	8011ab8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 8011b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b0a:	bf00      	nop
 8011b0c:	447ffffe 	.word	0x447ffffe
 8011b10:	00000000 	.word	0x00000000

08011b14 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 8011b14:	4770      	bx	lr

08011b16 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 8011b16:	4770      	bx	lr

08011b18 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 8011b18:	b510      	push	{r4, lr}
 8011b1a:	4604      	mov	r4, r0
 8011b1c:	2124      	movs	r1, #36	@ 0x24
 8011b1e:	f011 fa4c 	bl	8022fba <_ZdlPvj>
 8011b22:	4620      	mov	r0, r4
 8011b24:	bd10      	pop	{r4, pc}
	...

08011b28 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8011b28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011b2a:	6803      	ldr	r3, [r0, #0]
 8011b2c:	460d      	mov	r5, r1
 8011b2e:	4604      	mov	r4, r0
 8011b30:	4601      	mov	r1, r0
 8011b32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011b34:	a802      	add	r0, sp, #8
 8011b36:	4798      	blx	r3
 8011b38:	6828      	ldr	r0, [r5, #0]
 8011b3a:	6869      	ldr	r1, [r5, #4]
 8011b3c:	466b      	mov	r3, sp
 8011b3e:	c303      	stmia	r3!, {r0, r1}
 8011b40:	4668      	mov	r0, sp
 8011b42:	4619      	mov	r1, r3
 8011b44:	f7fd fc06 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 8011b48:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011b4a:	b188      	cbz	r0, 8011b70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011b4c:	6803      	ldr	r3, [r0, #0]
 8011b4e:	1d21      	adds	r1, r4, #4
 8011b50:	68db      	ldr	r3, [r3, #12]
 8011b52:	4798      	blx	r3
 8011b54:	b160      	cbz	r0, 8011b70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011b56:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	dd08      	ble.n	8011b70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011b5e:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8011b62:	2d00      	cmp	r5, #0
 8011b64:	dd04      	ble.n	8011b70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011b66:	4a2b      	ldr	r2, [pc, #172]	@ (8011c14 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8011b68:	7812      	ldrb	r2, [r2, #0]
 8011b6a:	b11a      	cbz	r2, 8011b74 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8011b6c:	2a01      	cmp	r2, #1
 8011b6e:	d029      	beq.n	8011bc4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8011b70:	b004      	add	sp, #16
 8011b72:	bd70      	pop	{r4, r5, r6, pc}
 8011b74:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011b78:	441d      	add	r5, r3
 8011b7a:	b2ad      	uxth	r5, r5
 8011b7c:	b22e      	sxth	r6, r5
 8011b7e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8011b82:	42b3      	cmp	r3, r6
 8011b84:	daf4      	bge.n	8011b70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011b86:	6823      	ldr	r3, [r4, #0]
 8011b88:	4669      	mov	r1, sp
 8011b8a:	4620      	mov	r0, r4
 8011b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b8e:	4798      	blx	r3
 8011b90:	b940      	cbnz	r0, 8011ba4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8011b92:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8011b96:	2b01      	cmp	r3, #1
 8011b98:	d004      	beq.n	8011ba4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8011b9a:	3301      	adds	r3, #1
 8011b9c:	105b      	asrs	r3, r3, #1
 8011b9e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011ba2:	e7f0      	b.n	8011b86 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8011ba4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011ba8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011bac:	4413      	add	r3, r2
 8011bae:	b29b      	uxth	r3, r3
 8011bb0:	441a      	add	r2, r3
 8011bb2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011bb6:	b212      	sxth	r2, r2
 8011bb8:	4296      	cmp	r6, r2
 8011bba:	dae0      	bge.n	8011b7e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8011bbc:	1aeb      	subs	r3, r5, r3
 8011bbe:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011bc2:	e7dc      	b.n	8011b7e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8011bc4:	f8bd 5000 	ldrh.w	r5, [sp]
 8011bc8:	441d      	add	r5, r3
 8011bca:	b2ad      	uxth	r5, r5
 8011bcc:	b22e      	sxth	r6, r5
 8011bce:	f9bd 3000 	ldrsh.w	r3, [sp]
 8011bd2:	42b3      	cmp	r3, r6
 8011bd4:	dacc      	bge.n	8011b70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011bd6:	6823      	ldr	r3, [r4, #0]
 8011bd8:	4669      	mov	r1, sp
 8011bda:	4620      	mov	r0, r4
 8011bdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011bde:	4798      	blx	r3
 8011be0:	b940      	cbnz	r0, 8011bf4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8011be2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8011be6:	2b01      	cmp	r3, #1
 8011be8:	d004      	beq.n	8011bf4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8011bea:	3301      	adds	r3, #1
 8011bec:	105b      	asrs	r3, r3, #1
 8011bee:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011bf2:	e7f0      	b.n	8011bd6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8011bf4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011bf8:	f8bd 3000 	ldrh.w	r3, [sp]
 8011bfc:	4413      	add	r3, r2
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	441a      	add	r2, r3
 8011c02:	f8ad 3000 	strh.w	r3, [sp]
 8011c06:	b212      	sxth	r2, r2
 8011c08:	4296      	cmp	r6, r2
 8011c0a:	dae0      	bge.n	8011bce <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8011c0c:	1aeb      	subs	r3, r5, r3
 8011c0e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011c12:	e7dc      	b.n	8011bce <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8011c14:	240255c4 	.word	0x240255c4

08011c18 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8011c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c1a:	6803      	ldr	r3, [r0, #0]
 8011c1c:	4604      	mov	r4, r0
 8011c1e:	4601      	mov	r1, r0
 8011c20:	4668      	mov	r0, sp
 8011c22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011c24:	4798      	blx	r3
 8011c26:	2100      	movs	r1, #0
 8011c28:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8011c2c:	4668      	mov	r0, sp
 8011c2e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8011c32:	9102      	str	r1, [sp, #8]
 8011c34:	a902      	add	r1, sp, #8
 8011c36:	f8ad 200c 	strh.w	r2, [sp, #12]
 8011c3a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011c3e:	f7fd fb89 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 8011c42:	6823      	ldr	r3, [r4, #0]
 8011c44:	4669      	mov	r1, sp
 8011c46:	4620      	mov	r0, r4
 8011c48:	691b      	ldr	r3, [r3, #16]
 8011c4a:	4798      	blx	r3
 8011c4c:	b004      	add	sp, #16
 8011c4e:	bd10      	pop	{r4, pc}

08011c50 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8011c50:	2101      	movs	r1, #1
 8011c52:	2200      	movs	r2, #0
 8011c54:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8011c58:	490a      	ldr	r1, [pc, #40]	@ (8011c84 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8011c5a:	8082      	strh	r2, [r0, #4]
 8011c5c:	6001      	str	r1, [r0, #0]
 8011c5e:	21ff      	movs	r1, #255	@ 0xff
 8011c60:	80c2      	strh	r2, [r0, #6]
 8011c62:	8102      	strh	r2, [r0, #8]
 8011c64:	8142      	strh	r2, [r0, #10]
 8011c66:	8182      	strh	r2, [r0, #12]
 8011c68:	81c2      	strh	r2, [r0, #14]
 8011c6a:	8202      	strh	r2, [r0, #16]
 8011c6c:	8242      	strh	r2, [r0, #18]
 8011c6e:	61c2      	str	r2, [r0, #28]
 8011c70:	8402      	strh	r2, [r0, #32]
 8011c72:	8442      	strh	r2, [r0, #34]	@ 0x22
 8011c74:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8011c78:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8011c7c:	6282      	str	r2, [r0, #40]	@ 0x28
 8011c7e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8011c82:	4770      	bx	lr
 8011c84:	080272fc 	.word	0x080272fc

08011c88 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8011c88:	4b07      	ldr	r3, [pc, #28]	@ (8011ca8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8011c8a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8011c8c:	881b      	ldrh	r3, [r3, #0]
 8011c8e:	4293      	cmp	r3, r2
 8011c90:	bf81      	itttt	hi
 8011c92:	4b06      	ldrhi	r3, [pc, #24]	@ (8011cac <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8011c94:	681b      	ldrhi	r3, [r3, #0]
 8011c96:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8011c9a:	7858      	ldrbhi	r0, [r3, #1]
 8011c9c:	bf8c      	ite	hi
 8011c9e:	f000 0003 	andhi.w	r0, r0, #3
 8011ca2:	2000      	movls	r0, #0
 8011ca4:	4770      	bx	lr
 8011ca6:	bf00      	nop
 8011ca8:	24025628 	.word	0x24025628
 8011cac:	24025624 	.word	0x24025624

08011cb0 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8011cb0:	4b11      	ldr	r3, [pc, #68]	@ (8011cf8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8011cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cb6:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8011cb8:	4604      	mov	r4, r0
 8011cba:	881b      	ldrh	r3, [r3, #0]
 8011cbc:	428b      	cmp	r3, r1
 8011cbe:	d918      	bls.n	8011cf2 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8011cc0:	6803      	ldr	r3, [r0, #0]
 8011cc2:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8011cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8011cfc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8011cc6:	6818      	ldr	r0, [r3, #0]
 8011cc8:	f7f2 fdc6 	bl	8004858 <_ZNK8touchgfx5Texts7getTextEt>
 8011ccc:	6823      	ldr	r3, [r4, #0]
 8011cce:	4606      	mov	r6, r0
 8011cd0:	4620      	mov	r0, r4
 8011cd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011cd4:	4798      	blx	r3
 8011cd6:	6823      	ldr	r3, [r4, #0]
 8011cd8:	4607      	mov	r7, r0
 8011cda:	4620      	mov	r0, r4
 8011cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011ce0:	4798      	blx	r3
 8011ce2:	463a      	mov	r2, r7
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	4631      	mov	r1, r6
 8011ce8:	4620      	mov	r0, r4
 8011cea:	46ac      	mov	ip, r5
 8011cec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf0:	4760      	bx	ip
 8011cf2:	2000      	movs	r0, #0
 8011cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cf8:	24025628 	.word	0x24025628
 8011cfc:	24025630 	.word	0x24025630

08011d00 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8011d00:	4b18      	ldr	r3, [pc, #96]	@ (8011d64 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8011d02:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011d06:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8011d08:	4604      	mov	r4, r0
 8011d0a:	881b      	ldrh	r3, [r3, #0]
 8011d0c:	428b      	cmp	r3, r1
 8011d0e:	d926      	bls.n	8011d5e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8011d10:	4b15      	ldr	r3, [pc, #84]	@ (8011d68 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8011d18:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8011d1c:	4b13      	ldr	r3, [pc, #76]	@ (8011d6c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8011d1e:	7855      	ldrb	r5, [r2, #1]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8011d26:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011d2a:	6833      	ldr	r3, [r6, #0]
 8011d2c:	69df      	ldr	r7, [r3, #28]
 8011d2e:	4b10      	ldr	r3, [pc, #64]	@ (8011d70 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8011d30:	6818      	ldr	r0, [r3, #0]
 8011d32:	f7f2 fd91 	bl	8004858 <_ZNK8touchgfx5Texts7getTextEt>
 8011d36:	6823      	ldr	r3, [r4, #0]
 8011d38:	4680      	mov	r8, r0
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011d3e:	4798      	blx	r3
 8011d40:	6823      	ldr	r3, [r4, #0]
 8011d42:	4681      	mov	r9, r0
 8011d44:	4620      	mov	r0, r4
 8011d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d4a:	4798      	blx	r3
 8011d4c:	464b      	mov	r3, r9
 8011d4e:	9000      	str	r0, [sp, #0]
 8011d50:	4642      	mov	r2, r8
 8011d52:	4629      	mov	r1, r5
 8011d54:	4630      	mov	r0, r6
 8011d56:	47b8      	blx	r7
 8011d58:	b003      	add	sp, #12
 8011d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d5e:	2000      	movs	r0, #0
 8011d60:	e7fa      	b.n	8011d58 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8011d62:	bf00      	nop
 8011d64:	24025628 	.word	0x24025628
 8011d68:	24025624 	.word	0x24025624
 8011d6c:	2402562c 	.word	0x2402562c
 8011d70:	24025630 	.word	0x24025630

08011d74 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8011d74:	b40e      	push	{r1, r2, r3}
 8011d76:	4b30      	ldr	r3, [pc, #192]	@ (8011e38 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8011d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d7c:	881a      	ldrh	r2, [r3, #0]
 8011d7e:	b09d      	sub	sp, #116	@ 0x74
 8011d80:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8011d82:	4604      	mov	r4, r0
 8011d84:	429a      	cmp	r2, r3
 8011d86:	d954      	bls.n	8011e32 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8011d88:	aa26      	add	r2, sp, #152	@ 0x98
 8011d8a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8011e3c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8011d8e:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8011e40 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8011d92:	9202      	str	r2, [sp, #8]
 8011d94:	f8d9 2000 	ldr.w	r2, [r9]
 8011d98:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8011d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8011da0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8011da4:	682b      	ldr	r3, [r5, #0]
 8011da6:	4628      	mov	r0, r5
 8011da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011daa:	4798      	blx	r3
 8011dac:	4606      	mov	r6, r0
 8011dae:	b207      	sxth	r7, r0
 8011db0:	a803      	add	r0, sp, #12
 8011db2:	f004 fee1 	bl	8016b78 <_ZN8touchgfx12TextProviderC1Ev>
 8011db6:	682b      	ldr	r3, [r5, #0]
 8011db8:	4628      	mov	r0, r5
 8011dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011dbc:	4798      	blx	r3
 8011dbe:	682b      	ldr	r3, [r5, #0]
 8011dc0:	4682      	mov	sl, r0
 8011dc2:	4628      	mov	r0, r5
 8011dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011dc6:	4798      	blx	r3
 8011dc8:	4653      	mov	r3, sl
 8011dca:	9000      	str	r0, [sp, #0]
 8011dcc:	a803      	add	r0, sp, #12
 8011dce:	9a02      	ldr	r2, [sp, #8]
 8011dd0:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8011dd2:	f004 ff24 	bl	8016c1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011dd6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8011dd8:	f8d9 3000 	ldr.w	r3, [r9]
 8011ddc:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8011de0:	8925      	ldrh	r5, [r4, #8]
 8011de2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8011de6:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8011dea:	eba5 050c 	sub.w	r5, r5, ip
 8011dee:	784a      	ldrb	r2, [r1, #1]
 8011df0:	f8d8 3000 	ldr.w	r3, [r8]
 8011df4:	b22d      	sxth	r5, r5
 8011df6:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8011dfa:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8011dfe:	9500      	str	r5, [sp, #0]
 8011e00:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011e04:	a803      	add	r0, sp, #12
 8011e06:	f002 f869 	bl	8013edc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8011e0a:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8011e0e:	b203      	sxth	r3, r0
 8011e10:	18b9      	adds	r1, r7, r2
 8011e12:	2900      	cmp	r1, #0
 8011e14:	dd0b      	ble.n	8011e2e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8011e16:	3b01      	subs	r3, #1
 8011e18:	fb13 f302 	smulbb	r3, r3, r2
 8011e1c:	fb16 3300 	smlabb	r3, r6, r0, r3
 8011e20:	b21f      	sxth	r7, r3
 8011e22:	4638      	mov	r0, r7
 8011e24:	b01d      	add	sp, #116	@ 0x74
 8011e26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e2a:	b003      	add	sp, #12
 8011e2c:	4770      	bx	lr
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	dcf7      	bgt.n	8011e22 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8011e32:	2700      	movs	r7, #0
 8011e34:	e7f5      	b.n	8011e22 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8011e36:	bf00      	nop
 8011e38:	24025628 	.word	0x24025628
 8011e3c:	24025624 	.word	0x24025624
 8011e40:	2402562c 	.word	0x2402562c

08011e44 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8011e44:	b570      	push	{r4, r5, r6, lr}
 8011e46:	6803      	ldr	r3, [r0, #0]
 8011e48:	4604      	mov	r4, r0
 8011e4a:	4615      	mov	r5, r2
 8011e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e4e:	4798      	blx	r3
 8011e50:	6823      	ldr	r3, [r4, #0]
 8011e52:	4629      	mov	r1, r5
 8011e54:	4620      	mov	r0, r4
 8011e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e5c:	4718      	bx	r3
	...

08011e60 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8011e60:	b538      	push	{r3, r4, r5, lr}
 8011e62:	4b0e      	ldr	r3, [pc, #56]	@ (8011e9c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8011e64:	4604      	mov	r4, r0
 8011e66:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8011e68:	881b      	ldrh	r3, [r3, #0]
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d214      	bcs.n	8011e98 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8011e6e:	6803      	ldr	r3, [r0, #0]
 8011e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e72:	4798      	blx	r3
 8011e74:	6823      	ldr	r3, [r4, #0]
 8011e76:	4605      	mov	r5, r0
 8011e78:	4620      	mov	r0, r4
 8011e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e7c:	4798      	blx	r3
 8011e7e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8011e82:	b22d      	sxth	r5, r5
 8011e84:	4601      	mov	r1, r0
 8011e86:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8011e8a:	bf06      	itte	eq
 8011e8c:	4602      	moveq	r2, r0
 8011e8e:	4629      	moveq	r1, r5
 8011e90:	462a      	movne	r2, r5
 8011e92:	4620      	mov	r0, r4
 8011e94:	f7ff ffd6 	bl	8011e44 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8011e98:	bd38      	pop	{r3, r4, r5, pc}
 8011e9a:	bf00      	nop
 8011e9c:	24025628 	.word	0x24025628

08011ea0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8011ea0:	b530      	push	{r4, r5, lr}
 8011ea2:	888b      	ldrh	r3, [r1, #4]
 8011ea4:	b085      	sub	sp, #20
 8011ea6:	4604      	mov	r4, r0
 8011ea8:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011eaa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8011eae:	b923      	cbnz	r3, 8011eba <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8011eb0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8011eb4:	b90b      	cbnz	r3, 8011eba <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8011eb6:	f7ff ffd3 	bl	8011e60 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8011eba:	6823      	ldr	r3, [r4, #0]
 8011ebc:	466d      	mov	r5, sp
 8011ebe:	4621      	mov	r1, r4
 8011ec0:	343c      	adds	r4, #60	@ 0x3c
 8011ec2:	4628      	mov	r0, r5
 8011ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011ec8:	4798      	blx	r3
 8011eca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011ece:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011ed2:	b005      	add	sp, #20
 8011ed4:	bd30      	pop	{r4, r5, pc}

08011ed6 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	8083      	strh	r3, [r0, #4]
 8011eda:	80c3      	strh	r3, [r0, #6]
 8011edc:	8003      	strh	r3, [r0, #0]
 8011ede:	8043      	strh	r3, [r0, #2]
 8011ee0:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8011ee4:	2bff      	cmp	r3, #255	@ 0xff
 8011ee6:	bf01      	itttt	eq
 8011ee8:	890b      	ldrheq	r3, [r1, #8]
 8011eea:	8083      	strheq	r3, [r0, #4]
 8011eec:	894b      	ldrheq	r3, [r1, #10]
 8011eee:	80c3      	strheq	r3, [r0, #6]
 8011ef0:	4770      	bx	lr
	...

08011ef4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8011ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ef6:	4604      	mov	r4, r0
 8011ef8:	466b      	mov	r3, sp
 8011efa:	6808      	ldr	r0, [r1, #0]
 8011efc:	6849      	ldr	r1, [r1, #4]
 8011efe:	c303      	stmia	r3!, {r0, r1}
 8011f00:	6823      	ldr	r3, [r4, #0]
 8011f02:	4669      	mov	r1, sp
 8011f04:	4620      	mov	r0, r4
 8011f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f08:	4798      	blx	r3
 8011f0a:	4b08      	ldr	r3, [pc, #32]	@ (8011f2c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8011f12:	b10a      	cbz	r2, 8011f18 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8011f14:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8011f16:	b900      	cbnz	r0, 8011f1a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8011f18:	6898      	ldr	r0, [r3, #8]
 8011f1a:	6803      	ldr	r3, [r0, #0]
 8011f1c:	4669      	mov	r1, sp
 8011f1e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8011f20:	6a1d      	ldr	r5, [r3, #32]
 8011f22:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8011f26:	47a8      	blx	r5
 8011f28:	b003      	add	sp, #12
 8011f2a:	bd30      	pop	{r4, r5, pc}
 8011f2c:	240255cc 	.word	0x240255cc

08011f30 <_ZN8touchgfx3BoxD1Ev>:
 8011f30:	4770      	bx	lr

08011f32 <_ZN8touchgfx3BoxD0Ev>:
 8011f32:	b510      	push	{r4, lr}
 8011f34:	4604      	mov	r4, r0
 8011f36:	212c      	movs	r1, #44	@ 0x2c
 8011f38:	f011 f83f 	bl	8022fba <_ZdlPvj>
 8011f3c:	4620      	mov	r0, r4
 8011f3e:	bd10      	pop	{r4, pc}

08011f40 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8011f40:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8011f44:	b12a      	cbz	r2, 8011f52 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011f46:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8011f4a:	b112      	cbz	r2, 8011f52 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011f4c:	6803      	ldr	r3, [r0, #0]
 8011f4e:	695b      	ldr	r3, [r3, #20]
 8011f50:	4718      	bx	r3
 8011f52:	4770      	bx	lr

08011f54 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8011f54:	4b30      	ldr	r3, [pc, #192]	@ (8012018 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8011f56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f5a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8011f5c:	b08d      	sub	sp, #52	@ 0x34
 8011f5e:	881b      	ldrh	r3, [r3, #0]
 8011f60:	4604      	mov	r4, r0
 8011f62:	460f      	mov	r7, r1
 8011f64:	4293      	cmp	r3, r2
 8011f66:	d954      	bls.n	8012012 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8011f68:	4b2c      	ldr	r3, [pc, #176]	@ (801201c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8011f6a:	6819      	ldr	r1, [r3, #0]
 8011f6c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8011f70:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8011f74:	4a2a      	ldr	r2, [pc, #168]	@ (8012020 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8011f76:	6812      	ldr	r2, [r2, #0]
 8011f78:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8011f7c:	2900      	cmp	r1, #0
 8011f7e:	d048      	beq.n	8012012 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8011f80:	785a      	ldrb	r2, [r3, #1]
 8011f82:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8011f86:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8011f8a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8011f8e:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011f92:	4b24      	ldr	r3, [pc, #144]	@ (8012024 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8011f94:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8011f98:	681a      	ldr	r2, [r3, #0]
 8011f9a:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 8011f9e:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 8011fa2:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 8011fa6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8011fa8:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 8011fac:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8011fb0:	9107      	str	r1, [sp, #28]
 8011fb2:	f88d 8020 	strb.w	r8, [sp, #32]
 8011fb6:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 8011fba:	9609      	str	r6, [sp, #36]	@ 0x24
 8011fbc:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 8011fc0:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011fc4:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8011fc8:	b10b      	cbz	r3, 8011fce <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8011fca:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 8011fcc:	b905      	cbnz	r5, 8011fd0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8011fce:	6895      	ldr	r5, [r2, #8]
 8011fd0:	ae05      	add	r6, sp, #20
 8011fd2:	4621      	mov	r1, r4
 8011fd4:	4630      	mov	r0, r6
 8011fd6:	f003 fe67 	bl	8015ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011fda:	4b13      	ldr	r3, [pc, #76]	@ (8012028 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8011fdc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8011fde:	6818      	ldr	r0, [r3, #0]
 8011fe0:	f7f2 fc3a 	bl	8004858 <_ZNK8touchgfx5Texts7getTextEt>
 8011fe4:	6823      	ldr	r3, [r4, #0]
 8011fe6:	4680      	mov	r8, r0
 8011fe8:	4620      	mov	r0, r4
 8011fea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011fec:	4798      	blx	r3
 8011fee:	6823      	ldr	r3, [r4, #0]
 8011ff0:	4681      	mov	r9, r0
 8011ff2:	4620      	mov	r0, r4
 8011ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011ff8:	4798      	blx	r3
 8011ffa:	ab07      	add	r3, sp, #28
 8011ffc:	f8cd 8004 	str.w	r8, [sp, #4]
 8012000:	9300      	str	r3, [sp, #0]
 8012002:	463b      	mov	r3, r7
 8012004:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8012008:	4628      	mov	r0, r5
 801200a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801200e:	f7f2 fbd5 	bl	80047bc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8012012:	b00d      	add	sp, #52	@ 0x34
 8012014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012018:	24025628 	.word	0x24025628
 801201c:	24025624 	.word	0x24025624
 8012020:	2402562c 	.word	0x2402562c
 8012024:	240255cc 	.word	0x240255cc
 8012028:	24025630 	.word	0x24025630

0801202c <_ZN8touchgfx5ImageD1Ev>:
 801202c:	4770      	bx	lr

0801202e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801202e:	b570      	push	{r4, r5, r6, lr}
 8012030:	880b      	ldrh	r3, [r1, #0]
 8012032:	460d      	mov	r5, r1
 8012034:	4604      	mov	r4, r0
 8012036:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8012038:	4608      	mov	r0, r1
 801203a:	f006 f9fb 	bl	8018434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801203e:	4606      	mov	r6, r0
 8012040:	4628      	mov	r0, r5
 8012042:	f006 fa2b 	bl	801849c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012046:	6823      	ldr	r3, [r4, #0]
 8012048:	4605      	mov	r5, r0
 801204a:	4631      	mov	r1, r6
 801204c:	4620      	mov	r0, r4
 801204e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012050:	4798      	blx	r3
 8012052:	6823      	ldr	r3, [r4, #0]
 8012054:	4629      	mov	r1, r5
 8012056:	4620      	mov	r0, r4
 8012058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801205a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801205e:	4718      	bx	r3

08012060 <_ZN8touchgfx5ImageD0Ev>:
 8012060:	b510      	push	{r4, lr}
 8012062:	4604      	mov	r4, r0
 8012064:	212c      	movs	r1, #44	@ 0x2c
 8012066:	f010 ffa8 	bl	8022fba <_ZdlPvj>
 801206a:	4620      	mov	r0, r4
 801206c:	bd10      	pop	{r4, pc}

0801206e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801206e:	b510      	push	{r4, lr}
 8012070:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8012074:	4604      	mov	r4, r0
 8012076:	2bff      	cmp	r3, #255	@ 0xff
 8012078:	d006      	beq.n	8012088 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801207a:	2300      	movs	r3, #0
 801207c:	8003      	strh	r3, [r0, #0]
 801207e:	8043      	strh	r3, [r0, #2]
 8012080:	8083      	strh	r3, [r0, #4]
 8012082:	80c3      	strh	r3, [r0, #6]
 8012084:	4620      	mov	r0, r4
 8012086:	bd10      	pop	{r4, pc}
 8012088:	3126      	adds	r1, #38	@ 0x26
 801208a:	f006 fa3b 	bl	8018504 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801208e:	e7f9      	b.n	8012084 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08012090 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8012090:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8012094:	b12a      	cbz	r2, 80120a2 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8012096:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801209a:	b112      	cbz	r2, 80120a2 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801209c:	6803      	ldr	r3, [r0, #0]
 801209e:	695b      	ldr	r3, [r3, #20]
 80120a0:	4718      	bx	r3
 80120a2:	4770      	bx	lr

080120a4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80120a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120a8:	4604      	mov	r4, r0
 80120aa:	b088      	sub	sp, #32
 80120ac:	2500      	movs	r5, #0
 80120ae:	460f      	mov	r7, r1
 80120b0:	f854 3b26 	ldr.w	r3, [r4], #38
 80120b4:	a904      	add	r1, sp, #16
 80120b6:	4606      	mov	r6, r0
 80120b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80120be:	4798      	blx	r3
 80120c0:	4620      	mov	r0, r4
 80120c2:	f006 f9b7 	bl	8018434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80120c6:	4680      	mov	r8, r0
 80120c8:	4620      	mov	r0, r4
 80120ca:	f006 f9e7 	bl	801849c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80120ce:	9506      	str	r5, [sp, #24]
 80120d0:	ad06      	add	r5, sp, #24
 80120d2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80120d6:	4639      	mov	r1, r7
 80120d8:	f8ad 801c 	strh.w	r8, [sp, #28]
 80120dc:	4628      	mov	r0, r5
 80120de:	f7fd f939 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 80120e2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	dd19      	ble.n	801211e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80120ea:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	dd15      	ble.n	801211e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80120f2:	4b0c      	ldr	r3, [pc, #48]	@ (8012124 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80120fa:	b10a      	cbz	r2, 8012100 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80120fc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80120fe:	b900      	cbnz	r0, 8012102 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8012100:	6898      	ldr	r0, [r3, #8]
 8012102:	2701      	movs	r7, #1
 8012104:	6801      	ldr	r1, [r0, #0]
 8012106:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801210a:	9702      	str	r7, [sp, #8]
 801210c:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8012110:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8012114:	e9cd 5600 	strd	r5, r6, [sp]
 8012118:	688d      	ldr	r5, [r1, #8]
 801211a:	4621      	mov	r1, r4
 801211c:	47a8      	blx	r5
 801211e:	b008      	add	sp, #32
 8012120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012124:	240255cc 	.word	0x240255cc

08012128 <_ZN8touchgfx7OutlineD1Ev>:
 8012128:	4770      	bx	lr

0801212a <_ZN8touchgfx7OutlineD0Ev>:
 801212a:	b510      	push	{r4, lr}
 801212c:	4604      	mov	r4, r0
 801212e:	2130      	movs	r1, #48	@ 0x30
 8012130:	f010 ff43 	bl	8022fba <_ZdlPvj>
 8012134:	4620      	mov	r0, r4
 8012136:	bd10      	pop	{r4, pc}

08012138 <_ZN8touchgfx7Outline5resetEv>:
 8012138:	b510      	push	{r4, lr}
 801213a:	4604      	mov	r4, r0
 801213c:	f000 fe72 	bl	8012e24 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8012140:	60e0      	str	r0, [r4, #12]
 8012142:	f000 fe75 	bl	8012e30 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8012146:	68e3      	ldr	r3, [r4, #12]
 8012148:	08c0      	lsrs	r0, r0, #3
 801214a:	2200      	movs	r2, #0
 801214c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8012150:	6123      	str	r3, [r4, #16]
 8012152:	3801      	subs	r0, #1
 8012154:	60a2      	str	r2, [r4, #8]
 8012156:	6060      	str	r0, [r4, #4]
 8012158:	8019      	strh	r1, [r3, #0]
 801215a:	8059      	strh	r1, [r3, #2]
 801215c:	809a      	strh	r2, [r3, #4]
 801215e:	80da      	strh	r2, [r3, #6]
 8012160:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012162:	f023 0301 	bic.w	r3, r3, #1
 8012166:	f043 0302 	orr.w	r3, r3, #2
 801216a:	6263      	str	r3, [r4, #36]	@ 0x24
 801216c:	bd10      	pop	{r4, pc}
	...

08012170 <_ZN8touchgfx7OutlineC1Ev>:
 8012170:	4b0a      	ldr	r3, [pc, #40]	@ (801219c <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8012172:	b510      	push	{r4, lr}
 8012174:	6003      	str	r3, [r0, #0]
 8012176:	2300      	movs	r3, #0
 8012178:	4604      	mov	r4, r0
 801217a:	6243      	str	r3, [r0, #36]	@ 0x24
 801217c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8012180:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012184:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8012188:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801218c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012190:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8012194:	f7ff ffd0 	bl	8012138 <_ZN8touchgfx7Outline5resetEv>
 8012198:	4620      	mov	r0, r4
 801219a:	bd10      	pop	{r4, pc}
 801219c:	08027448 	.word	0x08027448

080121a0 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80121a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121a4:	b093      	sub	sp, #76	@ 0x4c
 80121a6:	1156      	asrs	r6, r2, #5
 80121a8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80121aa:	9305      	str	r3, [sp, #20]
 80121ac:	1153      	asrs	r3, r2, #5
 80121ae:	f004 051f 	and.w	r5, r4, #31
 80121b2:	9303      	str	r3, [sp, #12]
 80121b4:	1163      	asrs	r3, r4, #5
 80121b6:	9504      	str	r5, [sp, #16]
 80121b8:	1165      	asrs	r5, r4, #5
 80121ba:	9306      	str	r3, [sp, #24]
 80121bc:	f002 031f 	and.w	r3, r2, #31
 80121c0:	42ae      	cmp	r6, r5
 80121c2:	f040 80f4 	bne.w	80123ae <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 80121c6:	9c04      	ldr	r4, [sp, #16]
 80121c8:	9a05      	ldr	r2, [sp, #20]
 80121ca:	42a3      	cmp	r3, r4
 80121cc:	ea4f 1e62 	mov.w	lr, r2, asr #5
 80121d0:	6902      	ldr	r2, [r0, #16]
 80121d2:	d125      	bne.n	8012220 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 80121d4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80121d8:	459e      	cmp	lr, r3
 80121da:	d103      	bne.n	80121e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 80121dc:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80121e0:	429e      	cmp	r6, r3
 80121e2:	d035      	beq.n	8012250 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80121e4:	88d1      	ldrh	r1, [r2, #6]
 80121e6:	8893      	ldrh	r3, [r2, #4]
 80121e8:	430b      	orrs	r3, r1
 80121ea:	d010      	beq.n	801220e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80121ec:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	db0c      	blt.n	801220e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80121f4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80121f6:	428b      	cmp	r3, r1
 80121f8:	da09      	bge.n	801220e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80121fa:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80121fe:	428b      	cmp	r3, r1
 8012200:	f103 0301 	add.w	r3, r3, #1
 8012204:	bf38      	it	cc
 8012206:	3208      	addcc	r2, #8
 8012208:	6083      	str	r3, [r0, #8]
 801220a:	bf38      	it	cc
 801220c:	6102      	strcc	r2, [r0, #16]
 801220e:	6903      	ldr	r3, [r0, #16]
 8012210:	9a03      	ldr	r2, [sp, #12]
 8012212:	f8a3 e000 	strh.w	lr, [r3]
 8012216:	805a      	strh	r2, [r3, #2]
 8012218:	2200      	movs	r2, #0
 801221a:	809a      	strh	r2, [r3, #4]
 801221c:	80da      	strh	r2, [r3, #6]
 801221e:	e017      	b.n	8012250 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012220:	9c05      	ldr	r4, [sp, #20]
 8012222:	114e      	asrs	r6, r1, #5
 8012224:	f001 0c1f 	and.w	ip, r1, #31
 8012228:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801222c:	f004 041f 	and.w	r4, r4, #31
 8012230:	4576      	cmp	r6, lr
 8012232:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8012236:	9402      	str	r4, [sp, #8]
 8012238:	9c04      	ldr	r4, [sp, #16]
 801223a:	eba4 0403 	sub.w	r4, r4, r3
 801223e:	d10a      	bne.n	8012256 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8012240:	9b02      	ldr	r3, [sp, #8]
 8012242:	44a0      	add	r8, r4
 8012244:	449c      	add	ip, r3
 8012246:	f8a2 8004 	strh.w	r8, [r2, #4]
 801224a:	fb04 a40c 	mla	r4, r4, ip, sl
 801224e:	80d4      	strh	r4, [r2, #6]
 8012250:	b013      	add	sp, #76	@ 0x4c
 8012252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012256:	9d05      	ldr	r5, [sp, #20]
 8012258:	1a69      	subs	r1, r5, r1
 801225a:	bf51      	iteee	pl
 801225c:	f1cc 0520 	rsbpl	r5, ip, #32
 8012260:	fb04 f40c 	mulmi.w	r4, r4, ip
 8012264:	4249      	negmi	r1, r1
 8012266:	2500      	movmi	r5, #0
 8012268:	bf5d      	ittte	pl
 801226a:	436c      	mulpl	r4, r5
 801226c:	2520      	movpl	r5, #32
 801226e:	f04f 0901 	movpl.w	r9, #1
 8012272:	f04f 39ff 	movmi.w	r9, #4294967295
 8012276:	9501      	str	r5, [sp, #4]
 8012278:	9f01      	ldr	r7, [sp, #4]
 801227a:	444e      	add	r6, r9
 801227c:	fb94 f5f1 	sdiv	r5, r4, r1
 8012280:	fb01 4415 	mls	r4, r1, r5, r4
 8012284:	44bc      	add	ip, r7
 8012286:	2c00      	cmp	r4, #0
 8012288:	bfbc      	itt	lt
 801228a:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801228e:	1864      	addlt	r4, r4, r1
 8012290:	44a8      	add	r8, r5
 8012292:	fb05 ac0c 	mla	ip, r5, ip, sl
 8012296:	f8a2 8004 	strh.w	r8, [r2, #4]
 801229a:	f8a2 c006 	strh.w	ip, [r2, #6]
 801229e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80122a2:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80122a6:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80122aa:	ea58 0202 	orrs.w	r2, r8, r2
 80122ae:	d011      	beq.n	80122d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80122b0:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80122b4:	f1b8 0f00 	cmp.w	r8, #0
 80122b8:	db0c      	blt.n	80122d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80122ba:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80122bc:	4590      	cmp	r8, r2
 80122be:	da09      	bge.n	80122d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80122c0:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80122c4:	4590      	cmp	r8, r2
 80122c6:	bf3c      	itt	cc
 80122c8:	f10c 0208 	addcc.w	r2, ip, #8
 80122cc:	6102      	strcc	r2, [r0, #16]
 80122ce:	f108 0201 	add.w	r2, r8, #1
 80122d2:	6082      	str	r2, [r0, #8]
 80122d4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80122d8:	2700      	movs	r7, #0
 80122da:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80122de:	45b6      	cmp	lr, r6
 80122e0:	f8ac 6000 	strh.w	r6, [ip]
 80122e4:	442b      	add	r3, r5
 80122e6:	f8ac 2002 	strh.w	r2, [ip, #2]
 80122ea:	f8ac 7004 	strh.w	r7, [ip, #4]
 80122ee:	f8ac 7006 	strh.w	r7, [ip, #6]
 80122f2:	d04b      	beq.n	801238c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 80122f4:	9f04      	ldr	r7, [sp, #16]
 80122f6:	1a64      	subs	r4, r4, r1
 80122f8:	f04f 0a00 	mov.w	sl, #0
 80122fc:	1aff      	subs	r7, r7, r3
 80122fe:	443d      	add	r5, r7
 8012300:	016d      	lsls	r5, r5, #5
 8012302:	fb95 f8f1 	sdiv	r8, r5, r1
 8012306:	fb01 5518 	mls	r5, r1, r8, r5
 801230a:	2d00      	cmp	r5, #0
 801230c:	bfbc      	itt	lt
 801230e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8012312:	186d      	addlt	r5, r5, r1
 8012314:	f108 0701 	add.w	r7, r8, #1
 8012318:	9703      	str	r7, [sp, #12]
 801231a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801231e:	1964      	adds	r4, r4, r5
 8012320:	444e      	add	r6, r9
 8012322:	bf54      	ite	pl
 8012324:	9f03      	ldrpl	r7, [sp, #12]
 8012326:	4647      	movmi	r7, r8
 8012328:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801232c:	bf58      	it	pl
 801232e:	1a64      	subpl	r4, r4, r1
 8012330:	443b      	add	r3, r7
 8012332:	44bb      	add	fp, r7
 8012334:	f8ac b004 	strh.w	fp, [ip, #4]
 8012338:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801233c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8012340:	f8ac b006 	strh.w	fp, [ip, #6]
 8012344:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012348:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801234c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8012350:	ea5b 0707 	orrs.w	r7, fp, r7
 8012354:	d011      	beq.n	801237a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8012356:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801235a:	f1bb 0f00 	cmp.w	fp, #0
 801235e:	db0c      	blt.n	801237a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8012360:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012362:	45bb      	cmp	fp, r7
 8012364:	da09      	bge.n	801237a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8012366:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801236a:	45bb      	cmp	fp, r7
 801236c:	bf3c      	itt	cc
 801236e:	f10c 0708 	addcc.w	r7, ip, #8
 8012372:	6107      	strcc	r7, [r0, #16]
 8012374:	f10b 0701 	add.w	r7, fp, #1
 8012378:	6087      	str	r7, [r0, #8]
 801237a:	6907      	ldr	r7, [r0, #16]
 801237c:	45b6      	cmp	lr, r6
 801237e:	803e      	strh	r6, [r7, #0]
 8012380:	807a      	strh	r2, [r7, #2]
 8012382:	f8a7 a004 	strh.w	sl, [r7, #4]
 8012386:	f8a7 a006 	strh.w	sl, [r7, #6]
 801238a:	d1c6      	bne.n	801231a <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 801238c:	9a04      	ldr	r2, [sp, #16]
 801238e:	1ad3      	subs	r3, r2, r3
 8012390:	6902      	ldr	r2, [r0, #16]
 8012392:	8891      	ldrh	r1, [r2, #4]
 8012394:	88d6      	ldrh	r6, [r2, #6]
 8012396:	4419      	add	r1, r3
 8012398:	8091      	strh	r1, [r2, #4]
 801239a:	9902      	ldr	r1, [sp, #8]
 801239c:	f101 0c20 	add.w	ip, r1, #32
 80123a0:	9901      	ldr	r1, [sp, #4]
 80123a2:	ebac 0c01 	sub.w	ip, ip, r1
 80123a6:	fb03 630c 	mla	r3, r3, ip, r6
 80123aa:	80d3      	strh	r3, [r2, #6]
 80123ac:	e750      	b.n	8012250 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80123ae:	9d05      	ldr	r5, [sp, #20]
 80123b0:	1aa2      	subs	r2, r4, r2
 80123b2:	eba5 0501 	sub.w	r5, r5, r1
 80123b6:	9202      	str	r2, [sp, #8]
 80123b8:	9508      	str	r5, [sp, #32]
 80123ba:	f140 8128 	bpl.w	801260e <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 80123be:	9a03      	ldr	r2, [sp, #12]
 80123c0:	2a00      	cmp	r2, #0
 80123c2:	f6ff af45 	blt.w	8012250 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80123c6:	9a02      	ldr	r2, [sp, #8]
 80123c8:	f04f 34ff 	mov.w	r4, #4294967295
 80123cc:	4252      	negs	r2, r2
 80123ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80123d0:	2400      	movs	r4, #0
 80123d2:	9202      	str	r2, [sp, #8]
 80123d4:	9a06      	ldr	r2, [sp, #24]
 80123d6:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80123da:	9206      	str	r2, [sp, #24]
 80123dc:	462a      	mov	r2, r5
 80123de:	435a      	muls	r2, r3
 80123e0:	9401      	str	r4, [sp, #4]
 80123e2:	9c02      	ldr	r4, [sp, #8]
 80123e4:	9d02      	ldr	r5, [sp, #8]
 80123e6:	fb92 f4f4 	sdiv	r4, r2, r4
 80123ea:	fb05 2214 	mls	r2, r5, r4, r2
 80123ee:	2a00      	cmp	r2, #0
 80123f0:	9207      	str	r2, [sp, #28]
 80123f2:	bfbc      	itt	lt
 80123f4:	1952      	addlt	r2, r2, r5
 80123f6:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80123fa:	6905      	ldr	r5, [r0, #16]
 80123fc:	bfb8      	it	lt
 80123fe:	9207      	strlt	r2, [sp, #28]
 8012400:	eb04 0901 	add.w	r9, r4, r1
 8012404:	9a01      	ldr	r2, [sp, #4]
 8012406:	ea4f 1669 	mov.w	r6, r9, asr #5
 801240a:	429a      	cmp	r2, r3
 801240c:	f040 8111 	bne.w	8012632 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8012410:	f9b5 3000 	ldrsh.w	r3, [r5]
 8012414:	429e      	cmp	r6, r3
 8012416:	d104      	bne.n	8012422 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8012418:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801241c:	9a03      	ldr	r2, [sp, #12]
 801241e:	429a      	cmp	r2, r3
 8012420:	d01b      	beq.n	801245a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8012422:	88ea      	ldrh	r2, [r5, #6]
 8012424:	88ab      	ldrh	r3, [r5, #4]
 8012426:	4313      	orrs	r3, r2
 8012428:	d010      	beq.n	801244c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801242a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801242e:	2a00      	cmp	r2, #0
 8012430:	db0c      	blt.n	801244c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8012432:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012434:	429a      	cmp	r2, r3
 8012436:	da09      	bge.n	801244c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8012438:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801243c:	429a      	cmp	r2, r3
 801243e:	f102 0201 	add.w	r2, r2, #1
 8012442:	bf38      	it	cc
 8012444:	3508      	addcc	r5, #8
 8012446:	6082      	str	r2, [r0, #8]
 8012448:	bf38      	it	cc
 801244a:	6105      	strcc	r5, [r0, #16]
 801244c:	6903      	ldr	r3, [r0, #16]
 801244e:	9a03      	ldr	r2, [sp, #12]
 8012450:	801e      	strh	r6, [r3, #0]
 8012452:	805a      	strh	r2, [r3, #2]
 8012454:	2200      	movs	r2, #0
 8012456:	809a      	strh	r2, [r3, #4]
 8012458:	80da      	strh	r2, [r3, #6]
 801245a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801245c:	9a03      	ldr	r2, [sp, #12]
 801245e:	6901      	ldr	r1, [r0, #16]
 8012460:	441a      	add	r2, r3
 8012462:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012466:	42b3      	cmp	r3, r6
 8012468:	d103      	bne.n	8012472 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 801246a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801246e:	429a      	cmp	r2, r3
 8012470:	d01a      	beq.n	80124a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8012472:	88cc      	ldrh	r4, [r1, #6]
 8012474:	888b      	ldrh	r3, [r1, #4]
 8012476:	4323      	orrs	r3, r4
 8012478:	d010      	beq.n	801249c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801247a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801247e:	2c00      	cmp	r4, #0
 8012480:	db0c      	blt.n	801249c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8012482:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012484:	429c      	cmp	r4, r3
 8012486:	da09      	bge.n	801249c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8012488:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801248c:	429c      	cmp	r4, r3
 801248e:	f104 0401 	add.w	r4, r4, #1
 8012492:	bf38      	it	cc
 8012494:	3108      	addcc	r1, #8
 8012496:	6084      	str	r4, [r0, #8]
 8012498:	bf38      	it	cc
 801249a:	6101      	strcc	r1, [r0, #16]
 801249c:	6903      	ldr	r3, [r0, #16]
 801249e:	2100      	movs	r1, #0
 80124a0:	801e      	strh	r6, [r3, #0]
 80124a2:	805a      	strh	r2, [r3, #2]
 80124a4:	8099      	strh	r1, [r3, #4]
 80124a6:	80d9      	strh	r1, [r3, #6]
 80124a8:	9b06      	ldr	r3, [sp, #24]
 80124aa:	4293      	cmp	r3, r2
 80124ac:	f000 8082 	beq.w	80125b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 80124b0:	9b08      	ldr	r3, [sp, #32]
 80124b2:	9902      	ldr	r1, [sp, #8]
 80124b4:	015b      	lsls	r3, r3, #5
 80124b6:	9c02      	ldr	r4, [sp, #8]
 80124b8:	fb93 f1f1 	sdiv	r1, r3, r1
 80124bc:	fb04 3311 	mls	r3, r4, r1, r3
 80124c0:	9103      	str	r1, [sp, #12]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	9308      	str	r3, [sp, #32]
 80124c6:	da04      	bge.n	80124d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 80124c8:	1e4b      	subs	r3, r1, #1
 80124ca:	9303      	str	r3, [sp, #12]
 80124cc:	9b08      	ldr	r3, [sp, #32]
 80124ce:	4423      	add	r3, r4
 80124d0:	9308      	str	r3, [sp, #32]
 80124d2:	9b07      	ldr	r3, [sp, #28]
 80124d4:	464f      	mov	r7, r9
 80124d6:	9902      	ldr	r1, [sp, #8]
 80124d8:	2600      	movs	r6, #0
 80124da:	1a5b      	subs	r3, r3, r1
 80124dc:	9307      	str	r3, [sp, #28]
 80124de:	9b01      	ldr	r3, [sp, #4]
 80124e0:	f1c3 0320 	rsb	r3, r3, #32
 80124e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80124e6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80124e8:	9b01      	ldr	r3, [sp, #4]
 80124ea:	1a5b      	subs	r3, r3, r1
 80124ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80124ee:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 80124f2:	185b      	adds	r3, r3, r1
 80124f4:	bf58      	it	pl
 80124f6:	9902      	ldrpl	r1, [sp, #8]
 80124f8:	9307      	str	r3, [sp, #28]
 80124fa:	bf57      	itett	pl
 80124fc:	1a5b      	subpl	r3, r3, r1
 80124fe:	9903      	ldrmi	r1, [sp, #12]
 8012500:	9307      	strpl	r3, [sp, #28]
 8012502:	9b03      	ldrpl	r3, [sp, #12]
 8012504:	bf58      	it	pl
 8012506:	1c59      	addpl	r1, r3, #1
 8012508:	2a00      	cmp	r2, #0
 801250a:	4489      	add	r9, r1
 801250c:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8012510:	db2e      	blt.n	8012570 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8012512:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012514:	4293      	cmp	r3, r2
 8012516:	dd2b      	ble.n	8012570 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8012518:	9c01      	ldr	r4, [sp, #4]
 801251a:	6905      	ldr	r5, [r0, #16]
 801251c:	46a0      	mov	r8, r4
 801251e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8012520:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8012524:	45a0      	cmp	r8, r4
 8012526:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801252a:	f040 814c 	bne.w	80127c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801252e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8012532:	4551      	cmp	r1, sl
 8012534:	d103      	bne.n	801253e <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8012536:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801253a:	4291      	cmp	r1, r2
 801253c:	d018      	beq.n	8012570 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801253e:	ea5c 010e 	orrs.w	r1, ip, lr
 8012542:	d00f      	beq.n	8012564 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8012544:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8012548:	2900      	cmp	r1, #0
 801254a:	db0b      	blt.n	8012564 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801254c:	428b      	cmp	r3, r1
 801254e:	dd09      	ble.n	8012564 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8012550:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8012554:	4299      	cmp	r1, r3
 8012556:	f101 0101 	add.w	r1, r1, #1
 801255a:	bf38      	it	cc
 801255c:	3508      	addcc	r5, #8
 801255e:	6081      	str	r1, [r0, #8]
 8012560:	bf38      	it	cc
 8012562:	6105      	strcc	r5, [r0, #16]
 8012564:	6903      	ldr	r3, [r0, #16]
 8012566:	f8a3 a000 	strh.w	sl, [r3]
 801256a:	805a      	strh	r2, [r3, #2]
 801256c:	809e      	strh	r6, [r3, #4]
 801256e:	80de      	strh	r6, [r3, #6]
 8012570:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012572:	6901      	ldr	r1, [r0, #16]
 8012574:	441a      	add	r2, r3
 8012576:	88cc      	ldrh	r4, [r1, #6]
 8012578:	888b      	ldrh	r3, [r1, #4]
 801257a:	4323      	orrs	r3, r4
 801257c:	d010      	beq.n	80125a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801257e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8012582:	2c00      	cmp	r4, #0
 8012584:	db0c      	blt.n	80125a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8012586:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012588:	429c      	cmp	r4, r3
 801258a:	da09      	bge.n	80125a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801258c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8012590:	429c      	cmp	r4, r3
 8012592:	f104 0401 	add.w	r4, r4, #1
 8012596:	bf38      	it	cc
 8012598:	3108      	addcc	r1, #8
 801259a:	6084      	str	r4, [r0, #8]
 801259c:	bf38      	it	cc
 801259e:	6101      	strcc	r1, [r0, #16]
 80125a0:	6903      	ldr	r3, [r0, #16]
 80125a2:	464f      	mov	r7, r9
 80125a4:	f8a3 a000 	strh.w	sl, [r3]
 80125a8:	805a      	strh	r2, [r3, #2]
 80125aa:	809e      	strh	r6, [r3, #4]
 80125ac:	80de      	strh	r6, [r3, #6]
 80125ae:	9b06      	ldr	r3, [sp, #24]
 80125b0:	4293      	cmp	r3, r2
 80125b2:	d19c      	bne.n	80124ee <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 80125b4:	9b01      	ldr	r3, [sp, #4]
 80125b6:	6907      	ldr	r7, [r0, #16]
 80125b8:	f1c3 0620 	rsb	r6, r3, #32
 80125bc:	9b05      	ldr	r3, [sp, #20]
 80125be:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80125c2:	9b04      	ldr	r3, [sp, #16]
 80125c4:	429e      	cmp	r6, r3
 80125c6:	f040 81c7 	bne.w	8012958 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 80125ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80125ce:	459e      	cmp	lr, r3
 80125d0:	d104      	bne.n	80125dc <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 80125d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80125d6:	429a      	cmp	r2, r3
 80125d8:	f43f ae3a 	beq.w	8012250 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80125dc:	88f9      	ldrh	r1, [r7, #6]
 80125de:	88bb      	ldrh	r3, [r7, #4]
 80125e0:	430b      	orrs	r3, r1
 80125e2:	d010      	beq.n	8012606 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80125e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	db0c      	blt.n	8012606 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80125ec:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80125ee:	428b      	cmp	r3, r1
 80125f0:	da09      	bge.n	8012606 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80125f2:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80125f6:	428b      	cmp	r3, r1
 80125f8:	f103 0301 	add.w	r3, r3, #1
 80125fc:	bf38      	it	cc
 80125fe:	3708      	addcc	r7, #8
 8012600:	6083      	str	r3, [r0, #8]
 8012602:	bf38      	it	cc
 8012604:	6107      	strcc	r7, [r0, #16]
 8012606:	6903      	ldr	r3, [r0, #16]
 8012608:	f8a3 e000 	strh.w	lr, [r3]
 801260c:	e603      	b.n	8012216 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 801260e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8012610:	9c03      	ldr	r4, [sp, #12]
 8012612:	42a2      	cmp	r2, r4
 8012614:	f6ff ae1c 	blt.w	8012250 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012618:	9c06      	ldr	r4, [sp, #24]
 801261a:	42a2      	cmp	r2, r4
 801261c:	9c08      	ldr	r4, [sp, #32]
 801261e:	bfbc      	itt	lt
 8012620:	3201      	addlt	r2, #1
 8012622:	9206      	strlt	r2, [sp, #24]
 8012624:	f1c3 0220 	rsb	r2, r3, #32
 8012628:	4362      	muls	r2, r4
 801262a:	2401      	movs	r4, #1
 801262c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801262e:	2420      	movs	r4, #32
 8012630:	e6d6      	b.n	80123e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8012632:	ea4f 1861 	mov.w	r8, r1, asr #5
 8012636:	f009 021f 	and.w	r2, r9, #31
 801263a:	f001 011f 	and.w	r1, r1, #31
 801263e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8012642:	920c      	str	r2, [sp, #48]	@ 0x30
 8012644:	45b0      	cmp	r8, r6
 8012646:	9a01      	ldr	r2, [sp, #4]
 8012648:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 801264c:	eba2 0203 	sub.w	r2, r2, r3
 8012650:	d108      	bne.n	8012664 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8012652:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012654:	4496      	add	lr, r2
 8012656:	4419      	add	r1, r3
 8012658:	f8a5 e004 	strh.w	lr, [r5, #4]
 801265c:	fb02 a101 	mla	r1, r2, r1, sl
 8012660:	80e9      	strh	r1, [r5, #6]
 8012662:	e6fa      	b.n	801245a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8012664:	2c00      	cmp	r4, #0
 8012666:	f2c0 80a7 	blt.w	80127b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 801266a:	2701      	movs	r7, #1
 801266c:	f1c1 0c20 	rsb	ip, r1, #32
 8012670:	970a      	str	r7, [sp, #40]	@ 0x28
 8012672:	2720      	movs	r7, #32
 8012674:	fb02 f20c 	mul.w	r2, r2, ip
 8012678:	9709      	str	r7, [sp, #36]	@ 0x24
 801267a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801267c:	fb92 fcf4 	sdiv	ip, r2, r4
 8012680:	fb04 221c 	mls	r2, r4, ip, r2
 8012684:	4439      	add	r1, r7
 8012686:	2a00      	cmp	r2, #0
 8012688:	bfbc      	itt	lt
 801268a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801268e:	1912      	addlt	r2, r2, r4
 8012690:	fb0c a101 	mla	r1, ip, r1, sl
 8012694:	44e6      	add	lr, ip
 8012696:	80e9      	strh	r1, [r5, #6]
 8012698:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801269a:	f8a5 e004 	strh.w	lr, [r5, #4]
 801269e:	eb08 0501 	add.w	r5, r8, r1
 80126a2:	6901      	ldr	r1, [r0, #16]
 80126a4:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80126a8:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80126ac:	ea58 070e 	orrs.w	r7, r8, lr
 80126b0:	d010      	beq.n	80126d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80126b2:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 80126b6:	f1be 0f00 	cmp.w	lr, #0
 80126ba:	db0b      	blt.n	80126d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80126bc:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80126be:	45be      	cmp	lr, r7
 80126c0:	da08      	bge.n	80126d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80126c2:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80126c6:	45be      	cmp	lr, r7
 80126c8:	bf3c      	itt	cc
 80126ca:	3108      	addcc	r1, #8
 80126cc:	6101      	strcc	r1, [r0, #16]
 80126ce:	f10e 0101 	add.w	r1, lr, #1
 80126d2:	6081      	str	r1, [r0, #8]
 80126d4:	6901      	ldr	r1, [r0, #16]
 80126d6:	f04f 0e00 	mov.w	lr, #0
 80126da:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80126de:	42ae      	cmp	r6, r5
 80126e0:	800d      	strh	r5, [r1, #0]
 80126e2:	4463      	add	r3, ip
 80126e4:	f8a1 8002 	strh.w	r8, [r1, #2]
 80126e8:	f8a1 e004 	strh.w	lr, [r1, #4]
 80126ec:	f8a1 e006 	strh.w	lr, [r1, #6]
 80126f0:	d053      	beq.n	801279a <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 80126f2:	9901      	ldr	r1, [sp, #4]
 80126f4:	1b12      	subs	r2, r2, r4
 80126f6:	1ac9      	subs	r1, r1, r3
 80126f8:	4461      	add	r1, ip
 80126fa:	0149      	lsls	r1, r1, #5
 80126fc:	fb91 fef4 	sdiv	lr, r1, r4
 8012700:	fb04 111e 	mls	r1, r4, lr, r1
 8012704:	2900      	cmp	r1, #0
 8012706:	bfbc      	itt	lt
 8012708:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801270c:	1909      	addlt	r1, r1, r4
 801270e:	f10e 0701 	add.w	r7, lr, #1
 8012712:	970d      	str	r7, [sp, #52]	@ 0x34
 8012714:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8012718:	1852      	adds	r2, r2, r1
 801271a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801271c:	bf54      	ite	pl
 801271e:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8012722:	46f4      	movmi	ip, lr
 8012724:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8012728:	bf58      	it	pl
 801272a:	1b12      	subpl	r2, r2, r4
 801272c:	4463      	add	r3, ip
 801272e:	443d      	add	r5, r7
 8012730:	44e3      	add	fp, ip
 8012732:	f8aa b004 	strh.w	fp, [sl, #4]
 8012736:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801273a:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801273e:	f8aa b006 	strh.w	fp, [sl, #6]
 8012742:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012746:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801274a:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801274e:	ea5b 070a 	orrs.w	r7, fp, sl
 8012752:	d014      	beq.n	801277e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8012754:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8012758:	f1ba 0f00 	cmp.w	sl, #0
 801275c:	db0f      	blt.n	801277e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801275e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012760:	45ba      	cmp	sl, r7
 8012762:	da0c      	bge.n	801277e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8012764:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8012768:	45ba      	cmp	sl, r7
 801276a:	f10a 0a01 	add.w	sl, sl, #1
 801276e:	bf38      	it	cc
 8012770:	f10c 0c08 	addcc.w	ip, ip, #8
 8012774:	f8c0 a008 	str.w	sl, [r0, #8]
 8012778:	bf38      	it	cc
 801277a:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801277e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012782:	f04f 0700 	mov.w	r7, #0
 8012786:	42ae      	cmp	r6, r5
 8012788:	f8ac 5000 	strh.w	r5, [ip]
 801278c:	f8ac 8002 	strh.w	r8, [ip, #2]
 8012790:	f8ac 7004 	strh.w	r7, [ip, #4]
 8012794:	f8ac 7006 	strh.w	r7, [ip, #6]
 8012798:	d1bc      	bne.n	8012714 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801279a:	6904      	ldr	r4, [r0, #16]
 801279c:	9a01      	ldr	r2, [sp, #4]
 801279e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80127a0:	1ad3      	subs	r3, r2, r3
 80127a2:	88a2      	ldrh	r2, [r4, #4]
 80127a4:	3120      	adds	r1, #32
 80127a6:	441a      	add	r2, r3
 80127a8:	80a2      	strh	r2, [r4, #4]
 80127aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80127ac:	1a89      	subs	r1, r1, r2
 80127ae:	88e2      	ldrh	r2, [r4, #6]
 80127b0:	fb03 2301 	mla	r3, r3, r1, r2
 80127b4:	80e3      	strh	r3, [r4, #6]
 80127b6:	e650      	b.n	801245a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80127b8:	f04f 37ff 	mov.w	r7, #4294967295
 80127bc:	434a      	muls	r2, r1
 80127be:	4264      	negs	r4, r4
 80127c0:	970a      	str	r7, [sp, #40]	@ 0x28
 80127c2:	2700      	movs	r7, #0
 80127c4:	e758      	b.n	8012678 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 80127c6:	ea4f 1867 	mov.w	r8, r7, asr #5
 80127ca:	f009 031f 	and.w	r3, r9, #31
 80127ce:	f007 071f 	and.w	r7, r7, #31
 80127d2:	fa1f fc8c 	uxth.w	ip, ip
 80127d6:	45d0      	cmp	r8, sl
 80127d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80127da:	fa1f fe8e 	uxth.w	lr, lr
 80127de:	d10a      	bne.n	80127f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 80127e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127e2:	449c      	add	ip, r3
 80127e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127e6:	441f      	add	r7, r3
 80127e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127ea:	f8a5 c004 	strh.w	ip, [r5, #4]
 80127ee:	fb03 e707 	mla	r7, r3, r7, lr
 80127f2:	80ef      	strh	r7, [r5, #6]
 80127f4:	e6bc      	b.n	8012570 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80127f6:	2900      	cmp	r1, #0
 80127f8:	f2c0 80a6 	blt.w	8012948 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 80127fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80127fe:	f1c7 0320 	rsb	r3, r7, #32
 8012802:	4363      	muls	r3, r4
 8012804:	2401      	movs	r4, #1
 8012806:	940d      	str	r4, [sp, #52]	@ 0x34
 8012808:	2420      	movs	r4, #32
 801280a:	940c      	str	r4, [sp, #48]	@ 0x30
 801280c:	fb93 f4f1 	sdiv	r4, r3, r1
 8012810:	fb01 3b14 	mls	fp, r1, r4, r3
 8012814:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012816:	f1bb 0f00 	cmp.w	fp, #0
 801281a:	441f      	add	r7, r3
 801281c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801281e:	bfbc      	itt	lt
 8012820:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8012824:	448b      	addlt	fp, r1
 8012826:	fb04 e707 	mla	r7, r4, r7, lr
 801282a:	44a4      	add	ip, r4
 801282c:	80ef      	strh	r7, [r5, #6]
 801282e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8012832:	eb08 0503 	add.w	r5, r8, r3
 8012836:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801283a:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801283e:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8012842:	ea5e 0307 	orrs.w	r3, lr, r7
 8012846:	d011      	beq.n	801286c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8012848:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801284c:	f1be 0f00 	cmp.w	lr, #0
 8012850:	db0c      	blt.n	801286c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8012852:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012854:	45be      	cmp	lr, r7
 8012856:	da09      	bge.n	801286c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8012858:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801285c:	45be      	cmp	lr, r7
 801285e:	bf3c      	itt	cc
 8012860:	f10c 0708 	addcc.w	r7, ip, #8
 8012864:	6107      	strcc	r7, [r0, #16]
 8012866:	f10e 0701 	add.w	r7, lr, #1
 801286a:	6087      	str	r7, [r0, #8]
 801286c:	6907      	ldr	r7, [r0, #16]
 801286e:	b213      	sxth	r3, r2
 8012870:	4555      	cmp	r5, sl
 8012872:	9310      	str	r3, [sp, #64]	@ 0x40
 8012874:	807b      	strh	r3, [r7, #2]
 8012876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012878:	803d      	strh	r5, [r7, #0]
 801287a:	80be      	strh	r6, [r7, #4]
 801287c:	eb04 0c03 	add.w	ip, r4, r3
 8012880:	80fe      	strh	r6, [r7, #6]
 8012882:	d050      	beq.n	8012926 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8012884:	9b01      	ldr	r3, [sp, #4]
 8012886:	eba3 070c 	sub.w	r7, r3, ip
 801288a:	ebab 0301 	sub.w	r3, fp, r1
 801288e:	443c      	add	r4, r7
 8012890:	9309      	str	r3, [sp, #36]	@ 0x24
 8012892:	0164      	lsls	r4, r4, #5
 8012894:	fb94 f8f1 	sdiv	r8, r4, r1
 8012898:	fb01 4418 	mls	r4, r1, r8, r4
 801289c:	2c00      	cmp	r4, #0
 801289e:	bfbc      	itt	lt
 80128a0:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80128a4:	1864      	addlt	r4, r4, r1
 80128a6:	f108 0701 	add.w	r7, r8, #1
 80128aa:	9711      	str	r7, [sp, #68]	@ 0x44
 80128ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128ae:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80128b2:	191b      	adds	r3, r3, r4
 80128b4:	f8be b004 	ldrh.w	fp, [lr, #4]
 80128b8:	bf54      	ite	pl
 80128ba:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 80128bc:	4647      	movmi	r7, r8
 80128be:	9309      	str	r3, [sp, #36]	@ 0x24
 80128c0:	bf58      	it	pl
 80128c2:	1a5b      	subpl	r3, r3, r1
 80128c4:	44bb      	add	fp, r7
 80128c6:	44bc      	add	ip, r7
 80128c8:	bf58      	it	pl
 80128ca:	9309      	strpl	r3, [sp, #36]	@ 0x24
 80128cc:	f8ae b004 	strh.w	fp, [lr, #4]
 80128d0:	f8be b006 	ldrh.w	fp, [lr, #6]
 80128d4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80128d8:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80128da:	f8ae b006 	strh.w	fp, [lr, #6]
 80128de:	443d      	add	r5, r7
 80128e0:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80128e4:	f8be b006 	ldrh.w	fp, [lr, #6]
 80128e8:	f8be 7004 	ldrh.w	r7, [lr, #4]
 80128ec:	ea5b 0307 	orrs.w	r3, fp, r7
 80128f0:	d011      	beq.n	8012916 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80128f2:	f9be b002 	ldrsh.w	fp, [lr, #2]
 80128f6:	f1bb 0f00 	cmp.w	fp, #0
 80128fa:	db0c      	blt.n	8012916 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80128fc:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80128fe:	45bb      	cmp	fp, r7
 8012900:	da09      	bge.n	8012916 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8012902:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8012906:	45bb      	cmp	fp, r7
 8012908:	bf3c      	itt	cc
 801290a:	f10e 0708 	addcc.w	r7, lr, #8
 801290e:	6107      	strcc	r7, [r0, #16]
 8012910:	f10b 0701 	add.w	r7, fp, #1
 8012914:	6087      	str	r7, [r0, #8]
 8012916:	6907      	ldr	r7, [r0, #16]
 8012918:	4555      	cmp	r5, sl
 801291a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801291c:	803d      	strh	r5, [r7, #0]
 801291e:	807b      	strh	r3, [r7, #2]
 8012920:	80be      	strh	r6, [r7, #4]
 8012922:	80fe      	strh	r6, [r7, #6]
 8012924:	d1c2      	bne.n	80128ac <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8012926:	9b01      	ldr	r3, [sp, #4]
 8012928:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801292a:	eba3 0c0c 	sub.w	ip, r3, ip
 801292e:	6903      	ldr	r3, [r0, #16]
 8012930:	3720      	adds	r7, #32
 8012932:	8899      	ldrh	r1, [r3, #4]
 8012934:	4461      	add	r1, ip
 8012936:	8099      	strh	r1, [r3, #4]
 8012938:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801293a:	1a7f      	subs	r7, r7, r1
 801293c:	88d9      	ldrh	r1, [r3, #6]
 801293e:	fb0c 1c07 	mla	ip, ip, r7, r1
 8012942:	f8a3 c006 	strh.w	ip, [r3, #6]
 8012946:	e613      	b.n	8012570 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8012948:	f04f 34ff 	mov.w	r4, #4294967295
 801294c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801294e:	4249      	negs	r1, r1
 8012950:	940d      	str	r4, [sp, #52]	@ 0x34
 8012952:	2400      	movs	r4, #0
 8012954:	437b      	muls	r3, r7
 8012956:	e758      	b.n	801280a <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8012958:	9905      	ldr	r1, [sp, #20]
 801295a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801295e:	f009 0c1f 	and.w	ip, r9, #31
 8012962:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8012966:	f001 011f 	and.w	r1, r1, #31
 801296a:	45f3      	cmp	fp, lr
 801296c:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8012970:	9102      	str	r1, [sp, #8]
 8012972:	9904      	ldr	r1, [sp, #16]
 8012974:	eba1 0406 	sub.w	r4, r1, r6
 8012978:	d108      	bne.n	801298c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801297a:	9b02      	ldr	r3, [sp, #8]
 801297c:	44a0      	add	r8, r4
 801297e:	449c      	add	ip, r3
 8012980:	f8a7 8004 	strh.w	r8, [r7, #4]
 8012984:	fb04 a40c 	mla	r4, r4, ip, sl
 8012988:	80fc      	strh	r4, [r7, #6]
 801298a:	e461      	b.n	8012250 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801298c:	9905      	ldr	r1, [sp, #20]
 801298e:	ebb1 0109 	subs.w	r1, r1, r9
 8012992:	bf51      	iteee	pl
 8012994:	f1cc 0520 	rsbpl	r5, ip, #32
 8012998:	fb04 f40c 	mulmi.w	r4, r4, ip
 801299c:	4249      	negmi	r1, r1
 801299e:	2500      	movmi	r5, #0
 80129a0:	bf5d      	ittte	pl
 80129a2:	436c      	mulpl	r4, r5
 80129a4:	2520      	movpl	r5, #32
 80129a6:	f04f 0901 	movpl.w	r9, #1
 80129aa:	f04f 39ff 	movmi.w	r9, #4294967295
 80129ae:	9501      	str	r5, [sp, #4]
 80129b0:	9b01      	ldr	r3, [sp, #4]
 80129b2:	fb94 f5f1 	sdiv	r5, r4, r1
 80129b6:	fb01 4415 	mls	r4, r1, r5, r4
 80129ba:	449c      	add	ip, r3
 80129bc:	eb0b 0309 	add.w	r3, fp, r9
 80129c0:	2c00      	cmp	r4, #0
 80129c2:	bfbc      	itt	lt
 80129c4:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80129c8:	1864      	addlt	r4, r4, r1
 80129ca:	44a8      	add	r8, r5
 80129cc:	fb05 ac0c 	mla	ip, r5, ip, sl
 80129d0:	f8a7 8004 	strh.w	r8, [r7, #4]
 80129d4:	f8a7 c006 	strh.w	ip, [r7, #6]
 80129d8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80129dc:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80129e0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80129e4:	ea58 0707 	orrs.w	r7, r8, r7
 80129e8:	d011      	beq.n	8012a0e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80129ea:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80129ee:	f1b8 0f00 	cmp.w	r8, #0
 80129f2:	db0c      	blt.n	8012a0e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80129f4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80129f6:	45b8      	cmp	r8, r7
 80129f8:	da09      	bge.n	8012a0e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80129fa:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80129fe:	45b8      	cmp	r8, r7
 8012a00:	bf3c      	itt	cc
 8012a02:	f10c 0708 	addcc.w	r7, ip, #8
 8012a06:	6107      	strcc	r7, [r0, #16]
 8012a08:	f108 0701 	add.w	r7, r8, #1
 8012a0c:	6087      	str	r7, [r0, #8]
 8012a0e:	6907      	ldr	r7, [r0, #16]
 8012a10:	f04f 0c00 	mov.w	ip, #0
 8012a14:	b212      	sxth	r2, r2
 8012a16:	459e      	cmp	lr, r3
 8012a18:	803b      	strh	r3, [r7, #0]
 8012a1a:	442e      	add	r6, r5
 8012a1c:	807a      	strh	r2, [r7, #2]
 8012a1e:	f8a7 c004 	strh.w	ip, [r7, #4]
 8012a22:	f8a7 c006 	strh.w	ip, [r7, #6]
 8012a26:	d04b      	beq.n	8012ac0 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8012a28:	9f04      	ldr	r7, [sp, #16]
 8012a2a:	1a64      	subs	r4, r4, r1
 8012a2c:	f04f 0a00 	mov.w	sl, #0
 8012a30:	1bbf      	subs	r7, r7, r6
 8012a32:	443d      	add	r5, r7
 8012a34:	016d      	lsls	r5, r5, #5
 8012a36:	fb95 f8f1 	sdiv	r8, r5, r1
 8012a3a:	fb01 5518 	mls	r5, r1, r8, r5
 8012a3e:	4565      	cmp	r5, ip
 8012a40:	bfbc      	itt	lt
 8012a42:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8012a46:	186d      	addlt	r5, r5, r1
 8012a48:	f108 0701 	add.w	r7, r8, #1
 8012a4c:	9703      	str	r7, [sp, #12]
 8012a4e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012a52:	1964      	adds	r4, r4, r5
 8012a54:	444b      	add	r3, r9
 8012a56:	bf54      	ite	pl
 8012a58:	9f03      	ldrpl	r7, [sp, #12]
 8012a5a:	4647      	movmi	r7, r8
 8012a5c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8012a60:	bf58      	it	pl
 8012a62:	1a64      	subpl	r4, r4, r1
 8012a64:	443e      	add	r6, r7
 8012a66:	44bb      	add	fp, r7
 8012a68:	f8ac b004 	strh.w	fp, [ip, #4]
 8012a6c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8012a70:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8012a74:	f8ac b006 	strh.w	fp, [ip, #6]
 8012a78:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012a7c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8012a80:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8012a84:	ea5b 0707 	orrs.w	r7, fp, r7
 8012a88:	d011      	beq.n	8012aae <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8012a8a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8012a8e:	f1bb 0f00 	cmp.w	fp, #0
 8012a92:	db0c      	blt.n	8012aae <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8012a94:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012a96:	45bb      	cmp	fp, r7
 8012a98:	da09      	bge.n	8012aae <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8012a9a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8012a9e:	45bb      	cmp	fp, r7
 8012aa0:	bf3c      	itt	cc
 8012aa2:	f10c 0708 	addcc.w	r7, ip, #8
 8012aa6:	6107      	strcc	r7, [r0, #16]
 8012aa8:	f10b 0701 	add.w	r7, fp, #1
 8012aac:	6087      	str	r7, [r0, #8]
 8012aae:	6907      	ldr	r7, [r0, #16]
 8012ab0:	459e      	cmp	lr, r3
 8012ab2:	803b      	strh	r3, [r7, #0]
 8012ab4:	807a      	strh	r2, [r7, #2]
 8012ab6:	f8a7 a004 	strh.w	sl, [r7, #4]
 8012aba:	f8a7 a006 	strh.w	sl, [r7, #6]
 8012abe:	d1c6      	bne.n	8012a4e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8012ac0:	9b04      	ldr	r3, [sp, #16]
 8012ac2:	1b9e      	subs	r6, r3, r6
 8012ac4:	6903      	ldr	r3, [r0, #16]
 8012ac6:	889a      	ldrh	r2, [r3, #4]
 8012ac8:	4432      	add	r2, r6
 8012aca:	809a      	strh	r2, [r3, #4]
 8012acc:	9a02      	ldr	r2, [sp, #8]
 8012ace:	f102 0c20 	add.w	ip, r2, #32
 8012ad2:	9a01      	ldr	r2, [sp, #4]
 8012ad4:	ebac 0c02 	sub.w	ip, ip, r2
 8012ad8:	88da      	ldrh	r2, [r3, #6]
 8012ada:	fb06 260c 	mla	r6, r6, ip, r2
 8012ade:	80de      	strh	r6, [r3, #6]
 8012ae0:	f7ff bbb6 	b.w	8012250 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08012ae4 <_ZN8touchgfx7Outline6lineToEii>:
 8012ae4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012ae6:	079b      	lsls	r3, r3, #30
 8012ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012aea:	460e      	mov	r6, r1
 8012aec:	4615      	mov	r5, r2
 8012aee:	d511      	bpl.n	8012b14 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8012af0:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8012af4:	ea86 0701 	eor.w	r7, r6, r1
 8012af8:	ea85 0302 	eor.w	r3, r5, r2
 8012afc:	433b      	orrs	r3, r7
 8012afe:	d009      	beq.n	8012b14 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8012b00:	4633      	mov	r3, r6
 8012b02:	9500      	str	r5, [sp, #0]
 8012b04:	f7ff fb4c 	bl	80121a0 <_ZN8touchgfx7Outline10renderLineEiiii>
 8012b08:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012b0a:	f043 0301 	orr.w	r3, r3, #1
 8012b0e:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8012b12:	6243      	str	r3, [r0, #36]	@ 0x24
 8012b14:	b003      	add	sp, #12
 8012b16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012b18 <_ZN8touchgfx7Outline6moveToEii>:
 8012b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b1a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012b1c:	4615      	mov	r5, r2
 8012b1e:	4604      	mov	r4, r0
 8012b20:	460e      	mov	r6, r1
 8012b22:	079a      	lsls	r2, r3, #30
 8012b24:	d401      	bmi.n	8012b2a <_ZN8touchgfx7Outline6moveToEii+0x12>
 8012b26:	f7ff fb07 	bl	8012138 <_ZN8touchgfx7Outline5resetEv>
 8012b2a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012b2c:	07db      	lsls	r3, r3, #31
 8012b2e:	d504      	bpl.n	8012b3a <_ZN8touchgfx7Outline6moveToEii+0x22>
 8012b30:	4620      	mov	r0, r4
 8012b32:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8012b36:	f7ff ffd5 	bl	8012ae4 <_ZN8touchgfx7Outline6lineToEii>
 8012b3a:	6923      	ldr	r3, [r4, #16]
 8012b3c:	1170      	asrs	r0, r6, #5
 8012b3e:	1169      	asrs	r1, r5, #5
 8012b40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012b44:	4290      	cmp	r0, r2
 8012b46:	d103      	bne.n	8012b50 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8012b48:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012b4c:	4291      	cmp	r1, r2
 8012b4e:	d01a      	beq.n	8012b86 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8012b50:	88df      	ldrh	r7, [r3, #6]
 8012b52:	889a      	ldrh	r2, [r3, #4]
 8012b54:	433a      	orrs	r2, r7
 8012b56:	d010      	beq.n	8012b7a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8012b58:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012b5c:	2a00      	cmp	r2, #0
 8012b5e:	db0c      	blt.n	8012b7a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8012b60:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8012b62:	42ba      	cmp	r2, r7
 8012b64:	da09      	bge.n	8012b7a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8012b66:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8012b6a:	42ba      	cmp	r2, r7
 8012b6c:	f102 0201 	add.w	r2, r2, #1
 8012b70:	bf38      	it	cc
 8012b72:	3308      	addcc	r3, #8
 8012b74:	60a2      	str	r2, [r4, #8]
 8012b76:	bf38      	it	cc
 8012b78:	6123      	strcc	r3, [r4, #16]
 8012b7a:	6923      	ldr	r3, [r4, #16]
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	8018      	strh	r0, [r3, #0]
 8012b80:	8059      	strh	r1, [r3, #2]
 8012b82:	809a      	strh	r2, [r3, #4]
 8012b84:	80da      	strh	r2, [r3, #6]
 8012b86:	6166      	str	r6, [r4, #20]
 8012b88:	6225      	str	r5, [r4, #32]
 8012b8a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8012b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012b90 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8012b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b94:	b0d0      	sub	sp, #320	@ 0x140
 8012b96:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012b9a:	466c      	mov	r4, sp
 8012b9c:	4627      	mov	r7, r4
 8012b9e:	1a0d      	subs	r5, r1, r0
 8012ba0:	f100 0308 	add.w	r3, r0, #8
 8012ba4:	2d48      	cmp	r5, #72	@ 0x48
 8012ba6:	f340 80d5 	ble.w	8012d54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8012baa:	112d      	asrs	r5, r5, #4
 8012bac:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8012bb0:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012bb4:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8012bb8:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8012bbc:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8012bc0:	6816      	ldr	r6, [r2, #0]
 8012bc2:	6006      	str	r6, [r0, #0]
 8012bc4:	6856      	ldr	r6, [r2, #4]
 8012bc6:	6046      	str	r6, [r0, #4]
 8012bc8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8012bcc:	f8a2 8002 	strh.w	r8, [r2, #2]
 8012bd0:	f8a2 e004 	strh.w	lr, [r2, #4]
 8012bd4:	f8a2 c006 	strh.w	ip, [r2, #6]
 8012bd8:	f1a1 0208 	sub.w	r2, r1, #8
 8012bdc:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8012be0:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8012be4:	4565      	cmp	r5, ip
 8012be6:	db06      	blt.n	8012bf6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8012be8:	d119      	bne.n	8012c1e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8012bea:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8012bee:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8012bf2:	42ae      	cmp	r6, r5
 8012bf4:	dd13      	ble.n	8012c1e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8012bf6:	460e      	mov	r6, r1
 8012bf8:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8012bfc:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8012c00:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8012c04:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8012c08:	601d      	str	r5, [r3, #0]
 8012c0a:	6875      	ldr	r5, [r6, #4]
 8012c0c:	605d      	str	r5, [r3, #4]
 8012c0e:	f821 9c08 	strh.w	r9, [r1, #-8]
 8012c12:	f821 cc06 	strh.w	ip, [r1, #-6]
 8012c16:	f821 8c04 	strh.w	r8, [r1, #-4]
 8012c1a:	f821 ec02 	strh.w	lr, [r1, #-2]
 8012c1e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012c22:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8012c26:	42ae      	cmp	r6, r5
 8012c28:	db06      	blt.n	8012c38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8012c2a:	d116      	bne.n	8012c5a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8012c2c:	f9b0 c000 	ldrsh.w	ip, [r0]
 8012c30:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8012c34:	45ac      	cmp	ip, r5
 8012c36:	da10      	bge.n	8012c5a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8012c38:	681d      	ldr	r5, [r3, #0]
 8012c3a:	f9b0 8000 	ldrsh.w	r8, [r0]
 8012c3e:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8012c42:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8012c46:	6005      	str	r5, [r0, #0]
 8012c48:	685d      	ldr	r5, [r3, #4]
 8012c4a:	f8a0 8008 	strh.w	r8, [r0, #8]
 8012c4e:	6045      	str	r5, [r0, #4]
 8012c50:	8146      	strh	r6, [r0, #10]
 8012c52:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8012c56:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8012c5a:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8012c5e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8012c62:	4565      	cmp	r5, ip
 8012c64:	db06      	blt.n	8012c74 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8012c66:	d119      	bne.n	8012c9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012c68:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8012c6c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8012c70:	42ae      	cmp	r6, r5
 8012c72:	da13      	bge.n	8012c9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012c74:	460e      	mov	r6, r1
 8012c76:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012c7a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8012c7e:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8012c82:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8012c86:	6005      	str	r5, [r0, #0]
 8012c88:	6875      	ldr	r5, [r6, #4]
 8012c8a:	6045      	str	r5, [r0, #4]
 8012c8c:	f821 9c08 	strh.w	r9, [r1, #-8]
 8012c90:	f821 cc06 	strh.w	ip, [r1, #-6]
 8012c94:	f821 8c04 	strh.w	r8, [r1, #-4]
 8012c98:	f821 ec02 	strh.w	lr, [r1, #-2]
 8012c9c:	3308      	adds	r3, #8
 8012c9e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8012ca2:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8012ca6:	45e6      	cmp	lr, ip
 8012ca8:	dbf8      	blt.n	8012c9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012caa:	d105      	bne.n	8012cb8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8012cac:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012cb0:	f9b0 5000 	ldrsh.w	r5, [r0]
 8012cb4:	42ae      	cmp	r6, r5
 8012cb6:	dbf1      	blt.n	8012c9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012cb8:	4615      	mov	r5, r2
 8012cba:	3a08      	subs	r2, #8
 8012cbc:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8012cc0:	45b4      	cmp	ip, r6
 8012cc2:	dbf9      	blt.n	8012cb8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8012cc4:	d105      	bne.n	8012cd2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8012cc6:	f9b0 8000 	ldrsh.w	r8, [r0]
 8012cca:	f9b2 6000 	ldrsh.w	r6, [r2]
 8012cce:	45b0      	cmp	r8, r6
 8012cd0:	dbf2      	blt.n	8012cb8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	f1a5 0608 	sub.w	r6, r5, #8
 8012cd8:	d816      	bhi.n	8012d08 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8012cda:	f8d6 c000 	ldr.w	ip, [r6]
 8012cde:	f9b3 a000 	ldrsh.w	sl, [r3]
 8012ce2:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8012ce6:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8012cea:	f8c3 c000 	str.w	ip, [r3]
 8012cee:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8012cf2:	f8c3 c004 	str.w	ip, [r3, #4]
 8012cf6:	f825 ac08 	strh.w	sl, [r5, #-8]
 8012cfa:	f825 ec06 	strh.w	lr, [r5, #-6]
 8012cfe:	f825 9c04 	strh.w	r9, [r5, #-4]
 8012d02:	f825 8c02 	strh.w	r8, [r5, #-2]
 8012d06:	e7c9      	b.n	8012c9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012d08:	f8d6 e000 	ldr.w	lr, [r6]
 8012d0c:	f9b0 a000 	ldrsh.w	sl, [r0]
 8012d10:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8012d14:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8012d18:	f8c0 e000 	str.w	lr, [r0]
 8012d1c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8012d20:	1a16      	subs	r6, r2, r0
 8012d22:	f8c0 e004 	str.w	lr, [r0, #4]
 8012d26:	f825 ac08 	strh.w	sl, [r5, #-8]
 8012d2a:	f825 cc06 	strh.w	ip, [r5, #-6]
 8012d2e:	f825 9c04 	strh.w	r9, [r5, #-4]
 8012d32:	f825 8c02 	strh.w	r8, [r5, #-2]
 8012d36:	1acd      	subs	r5, r1, r3
 8012d38:	10ed      	asrs	r5, r5, #3
 8012d3a:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8012d3e:	bfb5      	itete	lt
 8012d40:	e9c4 0200 	strdlt	r0, r2, [r4]
 8012d44:	e9c4 3100 	strdge	r3, r1, [r4]
 8012d48:	460a      	movlt	r2, r1
 8012d4a:	4603      	movge	r3, r0
 8012d4c:	3408      	adds	r4, #8
 8012d4e:	4618      	mov	r0, r3
 8012d50:	4611      	mov	r1, r2
 8012d52:	e724      	b.n	8012b9e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8012d54:	4299      	cmp	r1, r3
 8012d56:	d927      	bls.n	8012da8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8012d58:	f1a3 0210 	sub.w	r2, r3, #16
 8012d5c:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8012d60:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8012d64:	45ac      	cmp	ip, r5
 8012d66:	db06      	blt.n	8012d76 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8012d68:	d11c      	bne.n	8012da4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8012d6a:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8012d6e:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8012d72:	42ae      	cmp	r6, r5
 8012d74:	da16      	bge.n	8012da4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8012d76:	4615      	mov	r5, r2
 8012d78:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8012d7c:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8012d80:	3a08      	subs	r2, #8
 8012d82:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8012d86:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8012d8a:	6196      	str	r6, [r2, #24]
 8012d8c:	42a8      	cmp	r0, r5
 8012d8e:	686e      	ldr	r6, [r5, #4]
 8012d90:	f8a2 9010 	strh.w	r9, [r2, #16]
 8012d94:	61d6      	str	r6, [r2, #28]
 8012d96:	f8a2 c012 	strh.w	ip, [r2, #18]
 8012d9a:	f8a2 8014 	strh.w	r8, [r2, #20]
 8012d9e:	f8a2 e016 	strh.w	lr, [r2, #22]
 8012da2:	d1db      	bne.n	8012d5c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8012da4:	3308      	adds	r3, #8
 8012da6:	e7d5      	b.n	8012d54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8012da8:	42bc      	cmp	r4, r7
 8012daa:	d903      	bls.n	8012db4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8012dac:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8012db0:	3c08      	subs	r4, #8
 8012db2:	e6f4      	b.n	8012b9e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8012db4:	b050      	add	sp, #320	@ 0x140
 8012db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012dba <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8012dba:	b510      	push	{r4, lr}
 8012dbc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	07da      	lsls	r2, r3, #31
 8012dc2:	d507      	bpl.n	8012dd4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8012dc4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8012dc8:	f7ff fe8c 	bl	8012ae4 <_ZN8touchgfx7Outline6lineToEii>
 8012dcc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012dce:	f023 0301 	bic.w	r3, r3, #1
 8012dd2:	6243      	str	r3, [r0, #36]	@ 0x24
 8012dd4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012dd6:	079b      	lsls	r3, r3, #30
 8012dd8:	d521      	bpl.n	8012e1e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8012dda:	6923      	ldr	r3, [r4, #16]
 8012ddc:	88d9      	ldrh	r1, [r3, #6]
 8012dde:	889a      	ldrh	r2, [r3, #4]
 8012de0:	430a      	orrs	r2, r1
 8012de2:	d010      	beq.n	8012e06 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8012de4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012de8:	2a00      	cmp	r2, #0
 8012dea:	db0c      	blt.n	8012e06 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8012dec:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012dee:	428a      	cmp	r2, r1
 8012df0:	da09      	bge.n	8012e06 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8012df2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8012df6:	4291      	cmp	r1, r2
 8012df8:	f102 0201 	add.w	r2, r2, #1
 8012dfc:	bf88      	it	hi
 8012dfe:	3308      	addhi	r3, #8
 8012e00:	60a2      	str	r2, [r4, #8]
 8012e02:	bf88      	it	hi
 8012e04:	6123      	strhi	r3, [r4, #16]
 8012e06:	68a1      	ldr	r1, [r4, #8]
 8012e08:	b129      	cbz	r1, 8012e16 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8012e0a:	6863      	ldr	r3, [r4, #4]
 8012e0c:	4299      	cmp	r1, r3
 8012e0e:	d802      	bhi.n	8012e16 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8012e10:	68e0      	ldr	r0, [r4, #12]
 8012e12:	f7ff febd 	bl	8012b90 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8012e16:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012e18:	f023 0302 	bic.w	r3, r3, #2
 8012e1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8012e1e:	68e0      	ldr	r0, [r4, #12]
 8012e20:	bd10      	pop	{r4, pc}
	...

08012e24 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8012e24:	4b01      	ldr	r3, [pc, #4]	@ (8012e2c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8012e26:	6818      	ldr	r0, [r3, #0]
 8012e28:	4770      	bx	lr
 8012e2a:	bf00      	nop
 8012e2c:	240255d4 	.word	0x240255d4

08012e30 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8012e30:	4b01      	ldr	r3, [pc, #4]	@ (8012e38 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8012e32:	6818      	ldr	r0, [r3, #0]
 8012e34:	4770      	bx	lr
 8012e36:	bf00      	nop
 8012e38:	240255d8 	.word	0x240255d8

08012e3c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8012e3c:	b510      	push	{r4, lr}
 8012e3e:	6803      	ldr	r3, [r0, #0]
 8012e40:	460c      	mov	r4, r1
 8012e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e44:	4798      	blx	r3
 8012e46:	1b03      	subs	r3, r0, r4
 8012e48:	4258      	negs	r0, r3
 8012e4a:	4158      	adcs	r0, r3
 8012e4c:	bd10      	pop	{r4, pc}
	...

08012e50 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8012e50:	4b01      	ldr	r3, [pc, #4]	@ (8012e58 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8012e52:	6019      	str	r1, [r3, #0]
 8012e54:	4770      	bx	lr
 8012e56:	bf00      	nop
 8012e58:	240255dc 	.word	0x240255dc

08012e5c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8012e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e60:	4696      	mov	lr, r2
 8012e62:	b097      	sub	sp, #92	@ 0x5c
 8012e64:	4605      	mov	r5, r0
 8012e66:	4614      	mov	r4, r2
 8012e68:	460e      	mov	r6, r1
 8012e6a:	461f      	mov	r7, r3
 8012e6c:	f10d 0c1c 	add.w	ip, sp, #28
 8012e70:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8012e74:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8012e78:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8012e7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012e80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012e84:	f8de 3000 	ldr.w	r3, [lr]
 8012e88:	f104 0e14 	add.w	lr, r4, #20
 8012e8c:	f8cc 3000 	str.w	r3, [ip]
 8012e90:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012e94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012e98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012e9c:	f8de 3000 	ldr.w	r3, [lr]
 8012ea0:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8012ea4:	f8cc 3000 	str.w	r3, [ip]
 8012ea8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012eac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012eb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012eb4:	f8de 3000 	ldr.w	r3, [lr]
 8012eb8:	4631      	mov	r1, r6
 8012eba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012ebc:	4628      	mov	r0, r5
 8012ebe:	f8cc 3000 	str.w	r3, [ip]
 8012ec2:	682b      	ldr	r3, [r5, #0]
 8012ec4:	9201      	str	r2, [sp, #4]
 8012ec6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012ec8:	f8cd 8008 	str.w	r8, [sp, #8]
 8012ecc:	9200      	str	r2, [sp, #0]
 8012ece:	aa07      	add	r2, sp, #28
 8012ed0:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8012ed4:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8012ed8:	463b      	mov	r3, r7
 8012eda:	47d8      	blx	fp
 8012edc:	46a6      	mov	lr, r4
 8012ede:	f10d 0c1c 	add.w	ip, sp, #28
 8012ee2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012ee6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012eea:	f8de 3000 	ldr.w	r3, [lr]
 8012eee:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8012ef2:	343c      	adds	r4, #60	@ 0x3c
 8012ef4:	f8cc 3000 	str.w	r3, [ip]
 8012ef8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012efc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012f00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f04:	f8de 3000 	ldr.w	r3, [lr]
 8012f08:	f8cc 3000 	str.w	r3, [ip]
 8012f0c:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f16:	6823      	ldr	r3, [r4, #0]
 8012f18:	4631      	mov	r1, r6
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	f8cc 3000 	str.w	r3, [ip]
 8012f20:	682b      	ldr	r3, [r5, #0]
 8012f22:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8012f26:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012f28:	f8cd 8008 	str.w	r8, [sp, #8]
 8012f2c:	9201      	str	r2, [sp, #4]
 8012f2e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012f30:	9200      	str	r2, [sp, #0]
 8012f32:	aa07      	add	r2, sp, #28
 8012f34:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8012f36:	463b      	mov	r3, r7
 8012f38:	47a0      	blx	r4
 8012f3a:	b017      	add	sp, #92	@ 0x5c
 8012f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012f40 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8012f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f44:	b08d      	sub	sp, #52	@ 0x34
 8012f46:	4688      	mov	r8, r1
 8012f48:	f8d3 c000 	ldr.w	ip, [r3]
 8012f4c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8012f4e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8012f52:	680f      	ldr	r7, [r1, #0]
 8012f54:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8012f58:	eba7 070c 	sub.w	r7, r7, ip
 8012f5c:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8012f60:	edd3 6a07 	vldr	s13, [r3, #28]
 8012f64:	42bc      	cmp	r4, r7
 8012f66:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012f68:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8012f6c:	bfa8      	it	ge
 8012f6e:	463c      	movge	r4, r7
 8012f70:	f9b1 9000 	ldrsh.w	r9, [r1]
 8012f74:	f9ba 1000 	ldrsh.w	r1, [sl]
 8012f78:	ee07 4a90 	vmov	s15, r4
 8012f7c:	eb09 0e0c 	add.w	lr, r9, ip
 8012f80:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8012f84:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8012f88:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8012f8c:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8012f90:	4571      	cmp	r1, lr
 8012f92:	ee25 4a04 	vmul.f32	s8, s10, s8
 8012f96:	ee65 4a24 	vmul.f32	s9, s10, s9
 8012f9a:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012f9e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012fa2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8012fa6:	ee32 1a05 	vadd.f32	s2, s4, s10
 8012faa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012fae:	ee36 0a84 	vadd.f32	s0, s13, s8
 8012fb2:	ee61 1a87 	vmul.f32	s3, s3, s14
 8012fb6:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012fba:	f340 808c 	ble.w	80130d6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8012fbe:	eba1 060e 	sub.w	r6, r1, lr
 8012fc2:	fb96 f5f4 	sdiv	r5, r6, r4
 8012fc6:	ee07 5a10 	vmov	s14, r5
 8012fca:	2d00      	cmp	r5, #0
 8012fcc:	fb04 6615 	mls	r6, r4, r5, r6
 8012fd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012fd4:	eea7 0a04 	vfma.f32	s0, s14, s8
 8012fd8:	eee7 0a24 	vfma.f32	s1, s14, s9
 8012fdc:	eea7 1a05 	vfma.f32	s2, s14, s10
 8012fe0:	dd12      	ble.n	8013008 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8012fe2:	ee70 6a44 	vsub.f32	s13, s0, s8
 8012fe6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8012fea:	ee31 2a45 	vsub.f32	s4, s2, s10
 8012fee:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ff6:	bf14      	ite	ne
 8012ff8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8012ffc:	eeb0 7a67 	vmoveq.f32	s14, s15
 8013000:	ee61 1a87 	vmul.f32	s3, s3, s14
 8013004:	ee22 2a07 	vmul.f32	s4, s4, s14
 8013008:	fb05 f204 	mul.w	r2, r5, r4
 801300c:	1abf      	subs	r7, r7, r2
 801300e:	4494      	add	ip, r2
 8013010:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8013014:	4411      	add	r1, r2
 8013016:	eb09 020c 	add.w	r2, r9, ip
 801301a:	b209      	sxth	r1, r1
 801301c:	443a      	add	r2, r7
 801301e:	428a      	cmp	r2, r1
 8013020:	bfc4      	itt	gt
 8013022:	eba1 0209 	subgt.w	r2, r1, r9
 8013026:	eba2 070c 	subgt.w	r7, r2, ip
 801302a:	2f00      	cmp	r7, #0
 801302c:	dd50      	ble.n	80130d0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801302e:	fb97 f1f4 	sdiv	r1, r7, r4
 8013032:	fb04 7211 	mls	r2, r4, r1, r7
 8013036:	b90a      	cbnz	r2, 801303c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8013038:	3901      	subs	r1, #1
 801303a:	4622      	mov	r2, r4
 801303c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8013040:	6840      	ldr	r0, [r0, #4]
 8013042:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8013046:	44b6      	add	lr, r6
 8013048:	f8d0 a000 	ldr.w	sl, [r0]
 801304c:	2900      	cmp	r1, #0
 801304e:	bfcc      	ite	gt
 8013050:	46a1      	movgt	r9, r4
 8013052:	4691      	movle	r9, r2
 8013054:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013056:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013058:	fb04 e505 	mla	r5, r4, r5, lr
 801305c:	eef0 6a42 	vmov.f32	s13, s4
 8013060:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013064:	9008      	str	r0, [sp, #32]
 8013066:	eeb0 7a61 	vmov.f32	s14, s3
 801306a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801306c:	695b      	ldr	r3, [r3, #20]
 801306e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013072:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8013076:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801307a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801307c:	445b      	add	r3, fp
 801307e:	9307      	str	r3, [sp, #28]
 8013080:	ee16 3a90 	vmov	r3, s13
 8013084:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8013088:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801308c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8013090:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8013094:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8013098:	ee17 7a90 	vmov	r7, s15
 801309c:	ee73 7a42 	vsub.f32	s15, s6, s4
 80130a0:	fb97 f7f4 	sdiv	r7, r7, r4
 80130a4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80130a8:	ee17 ca90 	vmov	ip, s15
 80130ac:	fb9c fcf4 	sdiv	ip, ip, r4
 80130b0:	fb0c 3306 	mla	r3, ip, r6, r3
 80130b4:	9302      	str	r3, [sp, #8]
 80130b6:	ee17 3a10 	vmov	r3, s14
 80130ba:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80130be:	fb07 3706 	mla	r7, r7, r6, r3
 80130c2:	eba9 0306 	sub.w	r3, r9, r6
 80130c6:	e9cd 4700 	strd	r4, r7, [sp]
 80130ca:	f8da 4008 	ldr.w	r4, [sl, #8]
 80130ce:	47a0      	blx	r4
 80130d0:	b00d      	add	sp, #52	@ 0x34
 80130d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130d6:	2500      	movs	r5, #0
 80130d8:	462e      	mov	r6, r5
 80130da:	e799      	b.n	8013010 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080130dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80130dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130e0:	b0db      	sub	sp, #364	@ 0x16c
 80130e2:	461d      	mov	r5, r3
 80130e4:	4614      	mov	r4, r2
 80130e6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 80130ea:	910f      	str	r1, [sp, #60]	@ 0x3c
 80130ec:	4629      	mov	r1, r5
 80130ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80130f0:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 80130f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80130f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80130f8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 80130fc:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8013100:	9310      	str	r3, [sp, #64]	@ 0x40
 8013102:	6803      	ldr	r3, [r0, #0]
 8013104:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8013106:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801310a:	47b8      	blx	r7
 801310c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801310e:	6058      	str	r0, [r3, #4]
 8013110:	2800      	cmp	r0, #0
 8013112:	f000 83a1 	beq.w	8013858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013116:	682b      	ldr	r3, [r5, #0]
 8013118:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801311c:	ed94 7a02 	vldr	s14, [r4, #8]
 8013120:	9314      	str	r3, [sp, #80]	@ 0x50
 8013122:	686b      	ldr	r3, [r5, #4]
 8013124:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013128:	9315      	str	r3, [sp, #84]	@ 0x54
 801312a:	4bc1      	ldr	r3, [pc, #772]	@ (8013430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801312c:	7819      	ldrb	r1, [r3, #0]
 801312e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8013132:	2900      	cmp	r1, #0
 8013134:	bf16      	itet	ne
 8013136:	4619      	movne	r1, r3
 8013138:	4611      	moveq	r1, r2
 801313a:	4613      	movne	r3, r2
 801313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013140:	9116      	str	r1, [sp, #88]	@ 0x58
 8013142:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8013146:	f240 8387 	bls.w	8013858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801314a:	ed94 7a07 	vldr	s14, [r4, #28]
 801314e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013156:	f240 837f 	bls.w	8013858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801315a:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 801315e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013166:	f240 8377 	bls.w	8013858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801316a:	6822      	ldr	r2, [r4, #0]
 801316c:	4bb1      	ldr	r3, [pc, #708]	@ (8013434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801316e:	429a      	cmp	r2, r3
 8013170:	f2c0 8372 	blt.w	8013858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013174:	49b0      	ldr	r1, [pc, #704]	@ (8013438 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8013176:	6963      	ldr	r3, [r4, #20]
 8013178:	428a      	cmp	r2, r1
 801317a:	f300 836d 	bgt.w	8013858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801317e:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8013182:	48ae      	ldr	r0, [pc, #696]	@ (801343c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8013184:	33ff      	adds	r3, #255	@ 0xff
 8013186:	4283      	cmp	r3, r0
 8013188:	f200 8366 	bhi.w	8013858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801318c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801318e:	4dac      	ldr	r5, [pc, #688]	@ (8013440 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8013190:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8013194:	33ff      	adds	r3, #255	@ 0xff
 8013196:	42ab      	cmp	r3, r5
 8013198:	f200 835e 	bhi.w	8013858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801319c:	6862      	ldr	r2, [r4, #4]
 801319e:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 80131a2:	33ff      	adds	r3, #255	@ 0xff
 80131a4:	4283      	cmp	r3, r0
 80131a6:	f200 8357 	bhi.w	8013858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80131aa:	69a1      	ldr	r1, [r4, #24]
 80131ac:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 80131b0:	33ff      	adds	r3, #255	@ 0xff
 80131b2:	4283      	cmp	r3, r0
 80131b4:	f200 8350 	bhi.w	8013858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80131b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80131ba:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 80131be:	30ff      	adds	r0, #255	@ 0xff
 80131c0:	42a8      	cmp	r0, r5
 80131c2:	f200 8349 	bhi.w	8013858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80131c6:	428a      	cmp	r2, r1
 80131c8:	f280 8110 	bge.w	80133ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80131cc:	429a      	cmp	r2, r3
 80131ce:	f300 8119 	bgt.w	8013404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80131d2:	4299      	cmp	r1, r3
 80131d4:	f280 811d 	bge.w	8013412 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80131d8:	2502      	movs	r5, #2
 80131da:	2701      	movs	r7, #1
 80131dc:	46a9      	mov	r9, r5
 80131de:	46b8      	mov	r8, r7
 80131e0:	f04f 0a00 	mov.w	sl, #0
 80131e4:	4621      	mov	r1, r4
 80131e6:	a849      	add	r0, sp, #292	@ 0x124
 80131e8:	f004 fa26 	bl	8017638 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80131ec:	4622      	mov	r2, r4
 80131ee:	4653      	mov	r3, sl
 80131f0:	a949      	add	r1, sp, #292	@ 0x124
 80131f2:	f8cd 9000 	str.w	r9, [sp]
 80131f6:	a819      	add	r0, sp, #100	@ 0x64
 80131f8:	f004 fb4e 	bl	8017898 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80131fc:	4622      	mov	r2, r4
 80131fe:	4653      	mov	r3, sl
 8013200:	a949      	add	r1, sp, #292	@ 0x124
 8013202:	f8cd 8000 	str.w	r8, [sp]
 8013206:	a829      	add	r0, sp, #164	@ 0xa4
 8013208:	f004 fb46 	bl	8017898 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801320c:	4643      	mov	r3, r8
 801320e:	4622      	mov	r2, r4
 8013210:	a949      	add	r1, sp, #292	@ 0x124
 8013212:	f8cd 9000 	str.w	r9, [sp]
 8013216:	a839      	add	r0, sp, #228	@ 0xe4
 8013218:	f004 fb3e 	bl	8017898 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801321c:	42af      	cmp	r7, r5
 801321e:	af12      	add	r7, sp, #72	@ 0x48
 8013220:	bfb7      	itett	lt
 8013222:	2300      	movlt	r3, #0
 8013224:	2301      	movge	r3, #1
 8013226:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8013228:	ac19      	addlt	r4, sp, #100	@ 0x64
 801322a:	bfb1      	iteee	lt
 801322c:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801322e:	ad19      	addge	r5, sp, #100	@ 0x64
 8013230:	930e      	strge	r3, [sp, #56]	@ 0x38
 8013232:	ac29      	addge	r4, sp, #164	@ 0xa4
 8013234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013236:	e893 0003 	ldmia.w	r3, {r0, r1}
 801323a:	e887 0003 	stmia.w	r7, {r0, r1}
 801323e:	b928      	cbnz	r0, 801324c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8013240:	4b80      	ldr	r3, [pc, #512]	@ (8013444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8013242:	6818      	ldr	r0, [r3, #0]
 8013244:	6803      	ldr	r3, [r0, #0]
 8013246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013248:	4798      	blx	r3
 801324a:	6038      	str	r0, [r7, #0]
 801324c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801324e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8013252:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013256:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8013258:	930c      	str	r3, [sp, #48]	@ 0x30
 801325a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801325c:	6963      	ldr	r3, [r4, #20]
 801325e:	440b      	add	r3, r1
 8013260:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013264:	4408      	add	r0, r1
 8013266:	b200      	sxth	r0, r0
 8013268:	4283      	cmp	r3, r0
 801326a:	900d      	str	r0, [sp, #52]	@ 0x34
 801326c:	f280 80dd 	bge.w	801342a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8013270:	428b      	cmp	r3, r1
 8013272:	da08      	bge.n	8013286 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013274:	2a00      	cmp	r2, #0
 8013276:	dd06      	ble.n	8013286 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013278:	1acb      	subs	r3, r1, r3
 801327a:	429a      	cmp	r2, r3
 801327c:	f2c0 80e4 	blt.w	8013448 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8013280:	2b00      	cmp	r3, #0
 8013282:	f300 80e2 	bgt.w	801344a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8013286:	6967      	ldr	r7, [r4, #20]
 8013288:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801328c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801328e:	443b      	add	r3, r7
 8013290:	461f      	mov	r7, r3
 8013292:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013294:	1bdf      	subs	r7, r3, r7
 8013296:	4297      	cmp	r7, r2
 8013298:	bfa8      	it	ge
 801329a:	4617      	movge	r7, r2
 801329c:	2f00      	cmp	r7, #0
 801329e:	f340 8166 	ble.w	801356e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80132a2:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80132a4:	6829      	ldr	r1, [r5, #0]
 80132a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80132aa:	f9bb 3000 	ldrsh.w	r3, [fp]
 80132ae:	4411      	add	r1, r2
 80132b0:	6820      	ldr	r0, [r4, #0]
 80132b2:	4299      	cmp	r1, r3
 80132b4:	dd1a      	ble.n	80132ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80132b6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80132ba:	4402      	add	r2, r0
 80132bc:	440b      	add	r3, r1
 80132be:	b21b      	sxth	r3, r3
 80132c0:	429a      	cmp	r2, r3
 80132c2:	dc13      	bgt.n	80132ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80132c4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80132c6:	a912      	add	r1, sp, #72	@ 0x48
 80132c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	9206      	str	r2, [sp, #24]
 80132d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80132d2:	9500      	str	r5, [sp, #0]
 80132d4:	9205      	str	r2, [sp, #20]
 80132d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80132d8:	e9cd b203 	strd	fp, r2, [sp, #12]
 80132dc:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80132de:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80132e2:	aa49      	add	r2, sp, #292	@ 0x124
 80132e4:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80132e8:	4623      	mov	r3, r4
 80132ea:	47c8      	blx	r9
 80132ec:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80132f0:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80132f4:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80132f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80132fc:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8013300:	68a1      	ldr	r1, [r4, #8]
 8013302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013306:	ed94 6a08 	vldr	s12, [r4, #32]
 801330a:	edd4 6a07 	vldr	s13, [r4, #28]
 801330e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8013312:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013316:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801331a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801331e:	edc4 6a07 	vstr	s13, [r4, #28]
 8013322:	441a      	add	r2, r3
 8013324:	6963      	ldr	r3, [r4, #20]
 8013326:	3301      	adds	r3, #1
 8013328:	6022      	str	r2, [r4, #0]
 801332a:	6163      	str	r3, [r4, #20]
 801332c:	69a3      	ldr	r3, [r4, #24]
 801332e:	3b01      	subs	r3, #1
 8013330:	61a3      	str	r3, [r4, #24]
 8013332:	6923      	ldr	r3, [r4, #16]
 8013334:	440b      	add	r3, r1
 8013336:	68e1      	ldr	r1, [r4, #12]
 8013338:	428b      	cmp	r3, r1
 801333a:	6123      	str	r3, [r4, #16]
 801333c:	db15      	blt.n	801336a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801333e:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8013342:	3201      	adds	r2, #1
 8013344:	1a5b      	subs	r3, r3, r1
 8013346:	ee76 6a26 	vadd.f32	s13, s12, s13
 801334a:	6022      	str	r2, [r4, #0]
 801334c:	6123      	str	r3, [r4, #16]
 801334e:	edc4 6a07 	vstr	s13, [r4, #28]
 8013352:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8013356:	ee36 7a87 	vadd.f32	s14, s13, s14
 801335a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801335e:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8013362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013366:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801336a:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801336e:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8013372:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8013376:	ee37 7a27 	vadd.f32	s14, s14, s15
 801337a:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801337e:	68a9      	ldr	r1, [r5, #8]
 8013380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013384:	ed95 6a08 	vldr	s12, [r5, #32]
 8013388:	edd5 6a07 	vldr	s13, [r5, #28]
 801338c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8013390:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013394:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8013398:	e9d5 2300 	ldrd	r2, r3, [r5]
 801339c:	edc5 6a07 	vstr	s13, [r5, #28]
 80133a0:	441a      	add	r2, r3
 80133a2:	696b      	ldr	r3, [r5, #20]
 80133a4:	3301      	adds	r3, #1
 80133a6:	602a      	str	r2, [r5, #0]
 80133a8:	616b      	str	r3, [r5, #20]
 80133aa:	69ab      	ldr	r3, [r5, #24]
 80133ac:	3b01      	subs	r3, #1
 80133ae:	61ab      	str	r3, [r5, #24]
 80133b0:	692b      	ldr	r3, [r5, #16]
 80133b2:	440b      	add	r3, r1
 80133b4:	68e9      	ldr	r1, [r5, #12]
 80133b6:	428b      	cmp	r3, r1
 80133b8:	612b      	str	r3, [r5, #16]
 80133ba:	db15      	blt.n	80133e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80133bc:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80133c0:	3201      	adds	r2, #1
 80133c2:	1a5b      	subs	r3, r3, r1
 80133c4:	ee76 6a26 	vadd.f32	s13, s12, s13
 80133c8:	602a      	str	r2, [r5, #0]
 80133ca:	612b      	str	r3, [r5, #16]
 80133cc:	edc5 6a07 	vstr	s13, [r5, #28]
 80133d0:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80133d4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80133d8:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80133dc:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80133e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80133e4:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80133e8:	3f01      	subs	r7, #1
 80133ea:	e757      	b.n	801329c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80133ec:	4299      	cmp	r1, r3
 80133ee:	dc13      	bgt.n	8013418 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80133f0:	429a      	cmp	r2, r3
 80133f2:	da14      	bge.n	801341e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80133f4:	2502      	movs	r5, #2
 80133f6:	2703      	movs	r7, #3
 80133f8:	f04f 0800 	mov.w	r8, #0
 80133fc:	46a9      	mov	r9, r5
 80133fe:	f04f 0a01 	mov.w	sl, #1
 8013402:	e6ef      	b.n	80131e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8013404:	2501      	movs	r5, #1
 8013406:	2700      	movs	r7, #0
 8013408:	46a9      	mov	r9, r5
 801340a:	46b8      	mov	r8, r7
 801340c:	f04f 0a02 	mov.w	sl, #2
 8013410:	e6e8      	b.n	80131e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8013412:	2501      	movs	r5, #1
 8013414:	2702      	movs	r7, #2
 8013416:	e6e1      	b.n	80131dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8013418:	2500      	movs	r5, #0
 801341a:	2701      	movs	r7, #1
 801341c:	e7f4      	b.n	8013408 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801341e:	2702      	movs	r7, #2
 8013420:	2503      	movs	r5, #3
 8013422:	f04f 0900 	mov.w	r9, #0
 8013426:	46b8      	mov	r8, r7
 8013428:	e7e9      	b.n	80133fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801342a:	4613      	mov	r3, r2
 801342c:	e728      	b.n	8013280 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801342e:	bf00      	nop
 8013430:	240255c4 	.word	0x240255c4
 8013434:	fffd8f01 	.word	0xfffd8f01
 8013438:	00027100 	.word	0x00027100
 801343c:	0004e1ff 	.word	0x0004e1ff
 8013440:	0004e1fe 	.word	0x0004e1fe
 8013444:	240255cc 	.word	0x240255cc
 8013448:	4613      	mov	r3, r2
 801344a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 801344c:	469e      	mov	lr, r3
 801344e:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8013450:	469c      	mov	ip, r3
 8013452:	9111      	str	r1, [sp, #68]	@ 0x44
 8013454:	f04f 0900 	mov.w	r9, #0
 8013458:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 801345c:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8013460:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8013464:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8013468:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 801346c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013470:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8013474:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8013478:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 801347c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8013480:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8013484:	f1bc 0f00 	cmp.w	ip, #0
 8013488:	d147      	bne.n	801351a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801348a:	eb03 0c07 	add.w	ip, r3, r7
 801348e:	1ad7      	subs	r7, r2, r3
 8013490:	f1b9 0f00 	cmp.w	r9, #0
 8013494:	d009      	beq.n	80134aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8013496:	9029      	str	r0, [sp, #164]	@ 0xa4
 8013498:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 801349c:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 80134a0:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 80134a4:	912d      	str	r1, [sp, #180]	@ 0xb4
 80134a6:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 80134aa:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80134ac:	f04f 0800 	mov.w	r8, #0
 80134b0:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80134b4:	9111      	str	r1, [sp, #68]	@ 0x44
 80134b6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80134ba:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80134be:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80134c2:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 80134c6:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80134ca:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80134ce:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80134d2:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80134d6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80134da:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80134de:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80134e2:	f1be 0f00 	cmp.w	lr, #0
 80134e6:	d031      	beq.n	801354c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80134e8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80134ea:	4450      	add	r0, sl
 80134ec:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80134f0:	4431      	add	r1, r6
 80134f2:	ee37 7a04 	vadd.f32	s14, s14, s8
 80134f6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80134fa:	4549      	cmp	r1, r9
 80134fc:	db08      	blt.n	8013510 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80134fe:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013502:	3001      	adds	r0, #1
 8013504:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8013508:	eba1 0109 	sub.w	r1, r1, r9
 801350c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013510:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013514:	f04f 0801 	mov.w	r8, #1
 8013518:	e7e3      	b.n	80134e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801351a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801351c:	4450      	add	r0, sl
 801351e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8013522:	4431      	add	r1, r6
 8013524:	ee77 7a84 	vadd.f32	s15, s15, s8
 8013528:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801352c:	4541      	cmp	r1, r8
 801352e:	db08      	blt.n	8013542 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8013530:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013534:	3001      	adds	r0, #1
 8013536:	ee37 7a25 	vadd.f32	s14, s14, s11
 801353a:	eba1 0108 	sub.w	r1, r1, r8
 801353e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013542:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013546:	f04f 0901 	mov.w	r9, #1
 801354a:	e79b      	b.n	8013484 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801354c:	449c      	add	ip, r3
 801354e:	1aff      	subs	r7, r7, r3
 8013550:	f1b8 0f00 	cmp.w	r8, #0
 8013554:	d009      	beq.n	801356a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8013556:	9019      	str	r0, [sp, #100]	@ 0x64
 8013558:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801355c:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8013560:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8013564:	911d      	str	r1, [sp, #116]	@ 0x74
 8013566:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801356a:	1ad2      	subs	r2, r2, r3
 801356c:	e68b      	b.n	8013286 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801356e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013570:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8013572:	2b00      	cmp	r3, #0
 8013574:	f000 80d1 	beq.w	801371a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8013578:	ad19      	add	r5, sp, #100	@ 0x64
 801357a:	ac39      	add	r4, sp, #228	@ 0xe4
 801357c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801357e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8013582:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013586:	930c      	str	r3, [sp, #48]	@ 0x30
 8013588:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801358a:	6963      	ldr	r3, [r4, #20]
 801358c:	440b      	add	r3, r1
 801358e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013592:	4408      	add	r0, r1
 8013594:	b200      	sxth	r0, r0
 8013596:	4283      	cmp	r3, r0
 8013598:	900d      	str	r0, [sp, #52]	@ 0x34
 801359a:	f280 80c1 	bge.w	8013720 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801359e:	428b      	cmp	r3, r1
 80135a0:	da08      	bge.n	80135b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80135a2:	2a00      	cmp	r2, #0
 80135a4:	dd06      	ble.n	80135b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80135a6:	1acb      	subs	r3, r1, r3
 80135a8:	429a      	cmp	r2, r3
 80135aa:	f2c0 80bb 	blt.w	8013724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	f300 80b9 	bgt.w	8013726 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80135b4:	6967      	ldr	r7, [r4, #20]
 80135b6:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80135ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80135bc:	443b      	add	r3, r7
 80135be:	461f      	mov	r7, r3
 80135c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80135c2:	1bdf      	subs	r7, r3, r7
 80135c4:	4297      	cmp	r7, r2
 80135c6:	bfa8      	it	ge
 80135c8:	4617      	movge	r7, r2
 80135ca:	2f00      	cmp	r7, #0
 80135cc:	f340 813c 	ble.w	8013848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80135d0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80135d2:	6829      	ldr	r1, [r5, #0]
 80135d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80135d8:	f9bb 3000 	ldrsh.w	r3, [fp]
 80135dc:	4411      	add	r1, r2
 80135de:	6820      	ldr	r0, [r4, #0]
 80135e0:	4299      	cmp	r1, r3
 80135e2:	dd1a      	ble.n	801361a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80135e4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80135e8:	4402      	add	r2, r0
 80135ea:	440b      	add	r3, r1
 80135ec:	b21b      	sxth	r3, r3
 80135ee:	429a      	cmp	r2, r3
 80135f0:	dc13      	bgt.n	801361a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80135f2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80135f4:	a912      	add	r1, sp, #72	@ 0x48
 80135f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	9206      	str	r2, [sp, #24]
 80135fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013600:	9500      	str	r5, [sp, #0]
 8013602:	9205      	str	r2, [sp, #20]
 8013604:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013606:	e9cd b203 	strd	fp, r2, [sp, #12]
 801360a:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801360c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8013610:	aa49      	add	r2, sp, #292	@ 0x124
 8013612:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8013616:	4623      	mov	r3, r4
 8013618:	47c8      	blx	r9
 801361a:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801361e:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8013622:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8013626:	ee37 7a27 	vadd.f32	s14, s14, s15
 801362a:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801362e:	68a1      	ldr	r1, [r4, #8]
 8013630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013634:	ed94 6a08 	vldr	s12, [r4, #32]
 8013638:	edd4 6a07 	vldr	s13, [r4, #28]
 801363c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8013640:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013644:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8013648:	e9d4 2300 	ldrd	r2, r3, [r4]
 801364c:	edc4 6a07 	vstr	s13, [r4, #28]
 8013650:	441a      	add	r2, r3
 8013652:	6963      	ldr	r3, [r4, #20]
 8013654:	3301      	adds	r3, #1
 8013656:	6022      	str	r2, [r4, #0]
 8013658:	6163      	str	r3, [r4, #20]
 801365a:	69a3      	ldr	r3, [r4, #24]
 801365c:	3b01      	subs	r3, #1
 801365e:	61a3      	str	r3, [r4, #24]
 8013660:	6923      	ldr	r3, [r4, #16]
 8013662:	440b      	add	r3, r1
 8013664:	68e1      	ldr	r1, [r4, #12]
 8013666:	428b      	cmp	r3, r1
 8013668:	6123      	str	r3, [r4, #16]
 801366a:	db15      	blt.n	8013698 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801366c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8013670:	3201      	adds	r2, #1
 8013672:	1a5b      	subs	r3, r3, r1
 8013674:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013678:	6022      	str	r2, [r4, #0]
 801367a:	6123      	str	r3, [r4, #16]
 801367c:	edc4 6a07 	vstr	s13, [r4, #28]
 8013680:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8013684:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013688:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801368c:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8013690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013694:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8013698:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801369c:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80136a0:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80136a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80136a8:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80136ac:	68a9      	ldr	r1, [r5, #8]
 80136ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80136b2:	ed95 6a08 	vldr	s12, [r5, #32]
 80136b6:	edd5 6a07 	vldr	s13, [r5, #28]
 80136ba:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80136be:	ee76 6a86 	vadd.f32	s13, s13, s12
 80136c2:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80136c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80136ca:	edc5 6a07 	vstr	s13, [r5, #28]
 80136ce:	441a      	add	r2, r3
 80136d0:	696b      	ldr	r3, [r5, #20]
 80136d2:	3301      	adds	r3, #1
 80136d4:	602a      	str	r2, [r5, #0]
 80136d6:	616b      	str	r3, [r5, #20]
 80136d8:	69ab      	ldr	r3, [r5, #24]
 80136da:	3b01      	subs	r3, #1
 80136dc:	61ab      	str	r3, [r5, #24]
 80136de:	692b      	ldr	r3, [r5, #16]
 80136e0:	440b      	add	r3, r1
 80136e2:	68e9      	ldr	r1, [r5, #12]
 80136e4:	428b      	cmp	r3, r1
 80136e6:	612b      	str	r3, [r5, #16]
 80136e8:	db15      	blt.n	8013716 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80136ea:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80136ee:	3201      	adds	r2, #1
 80136f0:	1a5b      	subs	r3, r3, r1
 80136f2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80136f6:	602a      	str	r2, [r5, #0]
 80136f8:	612b      	str	r3, [r5, #16]
 80136fa:	edc5 6a07 	vstr	s13, [r5, #28]
 80136fe:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8013702:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013706:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801370a:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801370e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013712:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8013716:	3f01      	subs	r7, #1
 8013718:	e757      	b.n	80135ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801371a:	ad39      	add	r5, sp, #228	@ 0xe4
 801371c:	ac19      	add	r4, sp, #100	@ 0x64
 801371e:	e72d      	b.n	801357c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8013720:	4613      	mov	r3, r2
 8013722:	e744      	b.n	80135ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8013724:	4613      	mov	r3, r2
 8013726:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8013728:	469e      	mov	lr, r3
 801372a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801372e:	461f      	mov	r7, r3
 8013730:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8013734:	f04f 0900 	mov.w	r9, #0
 8013738:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 801373c:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8013740:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8013744:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8013748:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 801374c:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801374e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8013752:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8013756:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801375a:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801375e:	960e      	str	r6, [sp, #56]	@ 0x38
 8013760:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8013764:	2f00      	cmp	r7, #0
 8013766:	d146      	bne.n	80137f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8013768:	449c      	add	ip, r3
 801376a:	1ad7      	subs	r7, r2, r3
 801376c:	f1b9 0f00 	cmp.w	r9, #0
 8013770:	d009      	beq.n	8013786 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8013772:	9039      	str	r0, [sp, #228]	@ 0xe4
 8013774:	913d      	str	r1, [sp, #244]	@ 0xf4
 8013776:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801377a:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801377e:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8013782:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8013786:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8013788:	f04f 0800 	mov.w	r8, #0
 801378c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8013790:	910e      	str	r1, [sp, #56]	@ 0x38
 8013792:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8013796:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801379a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801379e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 80137a2:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80137a6:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80137aa:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80137ae:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80137b2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80137b6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80137ba:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80137be:	f1be 0f00 	cmp.w	lr, #0
 80137c2:	d030      	beq.n	8013826 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80137c4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80137c6:	4450      	add	r0, sl
 80137c8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80137cc:	4431      	add	r1, r6
 80137ce:	ee37 7a04 	vadd.f32	s14, s14, s8
 80137d2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80137d6:	4549      	cmp	r1, r9
 80137d8:	db08      	blt.n	80137ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80137da:	ee77 7a85 	vadd.f32	s15, s15, s10
 80137de:	3001      	adds	r0, #1
 80137e0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80137e4:	eba1 0109 	sub.w	r1, r1, r9
 80137e8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80137ec:	f10e 3eff 	add.w	lr, lr, #4294967295
 80137f0:	f04f 0801 	mov.w	r8, #1
 80137f4:	e7e3      	b.n	80137be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80137f6:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80137f8:	4450      	add	r0, sl
 80137fa:	ee37 7a24 	vadd.f32	s14, s14, s9
 80137fe:	4431      	add	r1, r6
 8013800:	ee77 7a84 	vadd.f32	s15, s15, s8
 8013804:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8013808:	4541      	cmp	r1, r8
 801380a:	db08      	blt.n	801381e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801380c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013810:	3001      	adds	r0, #1
 8013812:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013816:	eba1 0108 	sub.w	r1, r1, r8
 801381a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801381e:	3f01      	subs	r7, #1
 8013820:	f04f 0901 	mov.w	r9, #1
 8013824:	e79e      	b.n	8013764 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8013826:	449c      	add	ip, r3
 8013828:	1aff      	subs	r7, r7, r3
 801382a:	f1b8 0f00 	cmp.w	r8, #0
 801382e:	d009      	beq.n	8013844 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8013830:	9019      	str	r0, [sp, #100]	@ 0x64
 8013832:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8013836:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801383a:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801383e:	911d      	str	r1, [sp, #116]	@ 0x74
 8013840:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8013844:	1ad2      	subs	r2, r2, r3
 8013846:	e6b5      	b.n	80135b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013848:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	b923      	cbnz	r3, 8013858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801384e:	4b04      	ldr	r3, [pc, #16]	@ (8013860 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8013850:	6818      	ldr	r0, [r3, #0]
 8013852:	6803      	ldr	r3, [r0, #0]
 8013854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013856:	4798      	blx	r3
 8013858:	b05b      	add	sp, #364	@ 0x16c
 801385a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801385e:	bf00      	nop
 8013860:	240255cc 	.word	0x240255cc

08013864 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8013864:	b570      	push	{r4, r5, r6, lr}
 8013866:	4604      	mov	r4, r0
 8013868:	2500      	movs	r5, #0
 801386a:	9805      	ldr	r0, [sp, #20]
 801386c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8013870:	6061      	str	r1, [r4, #4]
 8013872:	8263      	strh	r3, [r4, #18]
 8013874:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8013878:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801387c:	8025      	strh	r5, [r4, #0]
 801387e:	7221      	strb	r1, [r4, #8]
 8013880:	7266      	strb	r6, [r4, #9]
 8013882:	60e0      	str	r0, [r4, #12]
 8013884:	8222      	strh	r2, [r4, #16]
 8013886:	82a3      	strh	r3, [r4, #20]
 8013888:	82e5      	strh	r5, [r4, #22]
 801388a:	8325      	strh	r5, [r4, #24]
 801388c:	8365      	strh	r5, [r4, #26]
 801388e:	83a5      	strh	r5, [r4, #28]
 8013890:	83e5      	strh	r5, [r4, #30]
 8013892:	8425      	strh	r5, [r4, #32]
 8013894:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8013898:	b32e      	cbz	r6, 80138e6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801389a:	6803      	ldr	r3, [r0, #0]
 801389c:	695b      	ldr	r3, [r3, #20]
 801389e:	4798      	blx	r3
 80138a0:	4606      	mov	r6, r0
 80138a2:	b300      	cbz	r0, 80138e6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80138a4:	68e0      	ldr	r0, [r4, #12]
 80138a6:	4631      	mov	r1, r6
 80138a8:	6803      	ldr	r3, [r0, #0]
 80138aa:	68db      	ldr	r3, [r3, #12]
 80138ac:	4798      	blx	r3
 80138ae:	4605      	mov	r5, r0
 80138b0:	b1c8      	cbz	r0, 80138e6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80138b2:	7b43      	ldrb	r3, [r0, #13]
 80138b4:	7a82      	ldrb	r2, [r0, #10]
 80138b6:	005b      	lsls	r3, r3, #1
 80138b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80138bc:	4313      	orrs	r3, r2
 80138be:	8423      	strh	r3, [r4, #32]
 80138c0:	7a63      	ldrb	r3, [r4, #9]
 80138c2:	2b06      	cmp	r3, #6
 80138c4:	d10f      	bne.n	80138e6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80138c6:	68e0      	ldr	r0, [r4, #12]
 80138c8:	462a      	mov	r2, r5
 80138ca:	4631      	mov	r1, r6
 80138cc:	6803      	ldr	r3, [r0, #0]
 80138ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138d0:	4798      	blx	r3
 80138d2:	7b6b      	ldrb	r3, [r5, #13]
 80138d4:	005b      	lsls	r3, r3, #1
 80138d6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80138da:	7aab      	ldrb	r3, [r5, #10]
 80138dc:	4313      	orrs	r3, r2
 80138de:	4418      	add	r0, r3
 80138e0:	8c23      	ldrh	r3, [r4, #32]
 80138e2:	4418      	add	r0, r3
 80138e4:	8420      	strh	r0, [r4, #32]
 80138e6:	4620      	mov	r0, r4
 80138e8:	bd70      	pop	{r4, r5, r6, pc}

080138ea <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80138ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ee:	2400      	movs	r4, #0
 80138f0:	b085      	sub	sp, #20
 80138f2:	4681      	mov	r9, r0
 80138f4:	4688      	mov	r8, r1
 80138f6:	4692      	mov	sl, r2
 80138f8:	469b      	mov	fp, r3
 80138fa:	4627      	mov	r7, r4
 80138fc:	4625      	mov	r5, r4
 80138fe:	4626      	mov	r6, r4
 8013900:	4554      	cmp	r4, sl
 8013902:	da2a      	bge.n	801395a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8013904:	2300      	movs	r3, #0
 8013906:	9303      	str	r3, [sp, #12]
 8013908:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801390c:	429d      	cmp	r5, r3
 801390e:	d004      	beq.n	801391a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8013910:	f242 030b 	movw	r3, #8203	@ 0x200b
 8013914:	429d      	cmp	r5, r3
 8013916:	bf18      	it	ne
 8013918:	462f      	movne	r7, r5
 801391a:	ab03      	add	r3, sp, #12
 801391c:	4642      	mov	r2, r8
 801391e:	4659      	mov	r1, fp
 8013920:	4648      	mov	r0, r9
 8013922:	f003 fc9f 	bl	8017264 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013926:	4605      	mov	r5, r0
 8013928:	b1b8      	cbz	r0, 801395a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801392a:	280a      	cmp	r0, #10
 801392c:	d015      	beq.n	801395a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801392e:	9a03      	ldr	r2, [sp, #12]
 8013930:	b18a      	cbz	r2, 8013956 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8013932:	7b50      	ldrb	r0, [r2, #13]
 8013934:	4639      	mov	r1, r7
 8013936:	7a93      	ldrb	r3, [r2, #10]
 8013938:	0040      	lsls	r0, r0, #1
 801393a:	8895      	ldrh	r5, [r2, #4]
 801393c:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8013940:	4303      	orrs	r3, r0
 8013942:	4640      	mov	r0, r8
 8013944:	9301      	str	r3, [sp, #4]
 8013946:	f8d8 3000 	ldr.w	r3, [r8]
 801394a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801394c:	4798      	blx	r3
 801394e:	9b01      	ldr	r3, [sp, #4]
 8013950:	4418      	add	r0, r3
 8013952:	4406      	add	r6, r0
 8013954:	b2b6      	uxth	r6, r6
 8013956:	3401      	adds	r4, #1
 8013958:	e7d2      	b.n	8013900 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801395a:	4630      	mov	r0, r6
 801395c:	b005      	add	sp, #20
 801395e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013962 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8013962:	2a02      	cmp	r2, #2
 8013964:	b530      	push	{r4, r5, lr}
 8013966:	d011      	beq.n	801398c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8013968:	2a03      	cmp	r2, #3
 801396a:	d01c      	beq.n	80139a6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801396c:	2a01      	cmp	r2, #1
 801396e:	d10c      	bne.n	801398a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8013970:	888b      	ldrh	r3, [r1, #4]
 8013972:	8801      	ldrh	r1, [r0, #0]
 8013974:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8013978:	1a5b      	subs	r3, r3, r1
 801397a:	8844      	ldrh	r4, [r0, #2]
 801397c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8013980:	1a9b      	subs	r3, r3, r2
 8013982:	8004      	strh	r4, [r0, #0]
 8013984:	8081      	strh	r1, [r0, #4]
 8013986:	8043      	strh	r3, [r0, #2]
 8013988:	80c2      	strh	r2, [r0, #6]
 801398a:	bd30      	pop	{r4, r5, pc}
 801398c:	88cb      	ldrh	r3, [r1, #6]
 801398e:	8842      	ldrh	r2, [r0, #2]
 8013990:	1a9b      	subs	r3, r3, r2
 8013992:	88c2      	ldrh	r2, [r0, #6]
 8013994:	1a9b      	subs	r3, r3, r2
 8013996:	888a      	ldrh	r2, [r1, #4]
 8013998:	8801      	ldrh	r1, [r0, #0]
 801399a:	8043      	strh	r3, [r0, #2]
 801399c:	1a52      	subs	r2, r2, r1
 801399e:	8881      	ldrh	r1, [r0, #4]
 80139a0:	1a52      	subs	r2, r2, r1
 80139a2:	8002      	strh	r2, [r0, #0]
 80139a4:	e7f1      	b.n	801398a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80139a6:	88cb      	ldrh	r3, [r1, #6]
 80139a8:	8841      	ldrh	r1, [r0, #2]
 80139aa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80139ae:	1a5b      	subs	r3, r3, r1
 80139b0:	f9b0 5000 	ldrsh.w	r5, [r0]
 80139b4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80139b8:	1a9b      	subs	r3, r3, r2
 80139ba:	8045      	strh	r5, [r0, #2]
 80139bc:	8082      	strh	r2, [r0, #4]
 80139be:	8003      	strh	r3, [r0, #0]
 80139c0:	80c4      	strh	r4, [r0, #6]
 80139c2:	e7e2      	b.n	801398a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080139c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80139c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139c8:	b09f      	sub	sp, #124	@ 0x7c
 80139ca:	920f      	str	r2, [sp, #60]	@ 0x3c
 80139cc:	9312      	str	r3, [sp, #72]	@ 0x48
 80139ce:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80139d0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80139d2:	8812      	ldrh	r2, [r2, #0]
 80139d4:	889b      	ldrh	r3, [r3, #4]
 80139d6:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80139d8:	4413      	add	r3, r2
 80139da:	900e      	str	r0, [sp, #56]	@ 0x38
 80139dc:	6828      	ldr	r0, [r5, #0]
 80139de:	b21b      	sxth	r3, r3
 80139e0:	9117      	str	r1, [sp, #92]	@ 0x5c
 80139e2:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 80139e6:	9311      	str	r3, [sp, #68]	@ 0x44
 80139e8:	6803      	ldr	r3, [r0, #0]
 80139ea:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 80139ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80139f0:	4798      	blx	r3
 80139f2:	682b      	ldr	r3, [r5, #0]
 80139f4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80139f6:	7b1a      	ldrb	r2, [r3, #12]
 80139f8:	7adb      	ldrb	r3, [r3, #11]
 80139fa:	9215      	str	r2, [sp, #84]	@ 0x54
 80139fc:	9316      	str	r3, [sp, #88]	@ 0x58
 80139fe:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8013a02:	2c00      	cmp	r4, #0
 8013a04:	d067      	beq.n	8013ad6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8013a06:	7c2b      	ldrb	r3, [r5, #16]
 8013a08:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8013a0a:	2b06      	cmp	r3, #6
 8013a0c:	bf14      	ite	ne
 8013a0e:	2301      	movne	r3, #1
 8013a10:	2302      	moveq	r3, #2
 8013a12:	4413      	add	r3, r2
 8013a14:	f04f 0900 	mov.w	r9, #0
 8013a18:	9310      	str	r3, [sp, #64]	@ 0x40
 8013a1a:	464c      	mov	r4, r9
 8013a1c:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8013a20:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8013a24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a26:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013a28:	4293      	cmp	r3, r2
 8013a2a:	f280 808b 	bge.w	8013b44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8013a2e:	2300      	movs	r3, #0
 8013a30:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8013a34:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8013a38:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8013a3c:	429c      	cmp	r4, r3
 8013a3e:	d006      	beq.n	8013a4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8013a40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a42:	f242 020b 	movw	r2, #8203	@ 0x200b
 8013a46:	4294      	cmp	r4, r2
 8013a48:	bf18      	it	ne
 8013a4a:	4623      	movne	r3, r4
 8013a4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8013a4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a50:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8013a52:	682a      	ldr	r2, [r5, #0]
 8013a54:	428b      	cmp	r3, r1
 8013a56:	db40      	blt.n	8013ada <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8013a58:	6813      	ldr	r3, [r2, #0]
 8013a5a:	4610      	mov	r0, r2
 8013a5c:	695b      	ldr	r3, [r3, #20]
 8013a5e:	4798      	blx	r3
 8013a60:	4604      	mov	r4, r0
 8013a62:	6828      	ldr	r0, [r5, #0]
 8013a64:	aa1d      	add	r2, sp, #116	@ 0x74
 8013a66:	4621      	mov	r1, r4
 8013a68:	6803      	ldr	r3, [r0, #0]
 8013a6a:	689f      	ldr	r7, [r3, #8]
 8013a6c:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8013a70:	47b8      	blx	r7
 8013a72:	901c      	str	r0, [sp, #112]	@ 0x70
 8013a74:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8013a78:	429c      	cmp	r4, r3
 8013a7a:	f000 80eb 	beq.w	8013c54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013a7e:	f242 030b 	movw	r3, #8203	@ 0x200b
 8013a82:	429c      	cmp	r4, r3
 8013a84:	f000 80e6 	beq.w	8013c54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013a88:	2c00      	cmp	r4, #0
 8013a8a:	f000 810d 	beq.w	8013ca8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8013a8e:	2c0a      	cmp	r4, #10
 8013a90:	d05e      	beq.n	8013b50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8013a92:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013a94:	b36a      	cbz	r2, 8013af2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8013a96:	8894      	ldrh	r4, [r2, #4]
 8013a98:	f1bb 0f00 	cmp.w	fp, #0
 8013a9c:	d03a      	beq.n	8013b14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8013a9e:	f892 900d 	ldrb.w	r9, [r2, #13]
 8013aa2:	f1bb 0f01 	cmp.w	fp, #1
 8013aa6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8013aaa:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8013aae:	f892 900a 	ldrb.w	r9, [r2, #10]
 8013ab2:	ea49 0903 	orr.w	r9, r9, r3
 8013ab6:	d133      	bne.n	8013b20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8013ab8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013aba:	eba6 0609 	sub.w	r6, r6, r9
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d14d      	bne.n	8013b5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8013ac2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8013ac4:	eb09 0306 	add.w	r3, r9, r6
 8013ac8:	4413      	add	r3, r2
 8013aca:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8013acc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013ad0:	4293      	cmp	r3, r2
 8013ad2:	da4e      	bge.n	8013b72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8013ad4:	e036      	b.n	8013b44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8013ad6:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8013ad8:	e79c      	b.n	8013a14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8013ada:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8013ade:	4659      	mov	r1, fp
 8013ae0:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8013ae2:	9301      	str	r3, [sp, #4]
 8013ae4:	ab1d      	add	r3, sp, #116	@ 0x74
 8013ae6:	9300      	str	r3, [sp, #0]
 8013ae8:	ab1c      	add	r3, sp, #112	@ 0x70
 8013aea:	f003 fc04 	bl	80172f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8013aee:	4604      	mov	r4, r0
 8013af0:	e7c0      	b.n	8013a74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8013af2:	6828      	ldr	r0, [r5, #0]
 8013af4:	6803      	ldr	r3, [r0, #0]
 8013af6:	691b      	ldr	r3, [r3, #16]
 8013af8:	4798      	blx	r3
 8013afa:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8013afe:	4298      	cmp	r0, r3
 8013b00:	f000 80a8 	beq.w	8013c54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013b04:	f242 030b 	movw	r3, #8203	@ 0x200b
 8013b08:	4298      	cmp	r0, r3
 8013b0a:	f000 80a3 	beq.w	8013c54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013b0e:	f1bb 0f00 	cmp.w	fp, #0
 8013b12:	d100      	bne.n	8013b16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8013b14:	444e      	add	r6, r9
 8013b16:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013b18:	2a00      	cmp	r2, #0
 8013b1a:	d1c0      	bne.n	8013a9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8013b1c:	4691      	mov	r9, r2
 8013b1e:	e099      	b.n	8013c54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013b20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	f000 80c2 	beq.w	8013cac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8013b28:	f1bb 0f00 	cmp.w	fp, #0
 8013b2c:	d117      	bne.n	8013b5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8013b2e:	6828      	ldr	r0, [r5, #0]
 8013b30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013b32:	6803      	ldr	r3, [r0, #0]
 8013b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b36:	4798      	blx	r3
 8013b38:	4406      	add	r6, r0
 8013b3a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013b3c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013b3e:	1af3      	subs	r3, r6, r3
 8013b40:	4293      	cmp	r3, r2
 8013b42:	dd16      	ble.n	8013b72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8013b44:	2c00      	cmp	r4, #0
 8013b46:	f000 80af 	beq.w	8013ca8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8013b4a:	2c0a      	cmp	r4, #10
 8013b4c:	f040 809d 	bne.w	8013c8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8013b50:	240a      	movs	r4, #10
 8013b52:	fab4 f084 	clz	r0, r4
 8013b56:	0940      	lsrs	r0, r0, #5
 8013b58:	b01f      	add	sp, #124	@ 0x7c
 8013b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b5e:	6828      	ldr	r0, [r5, #0]
 8013b60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013b62:	6803      	ldr	r3, [r0, #0]
 8013b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b66:	4798      	blx	r3
 8013b68:	f1bb 0f01 	cmp.w	fp, #1
 8013b6c:	eba6 0600 	sub.w	r6, r6, r0
 8013b70:	d0a7      	beq.n	8013ac2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8013b72:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8013b74:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8013b76:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8013b7a:	f9b3 8000 	ldrsh.w	r8, [r3]
 8013b7e:	7b43      	ldrb	r3, [r0, #13]
 8013b80:	4431      	add	r1, r6
 8013b82:	015b      	lsls	r3, r3, #5
 8013b84:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8013b88:	7983      	ldrb	r3, [r0, #6]
 8013b8a:	4313      	orrs	r3, r2
 8013b8c:	440b      	add	r3, r1
 8013b8e:	4543      	cmp	r3, r8
 8013b90:	db60      	blt.n	8013c54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013b92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013b94:	4299      	cmp	r1, r3
 8013b96:	da5d      	bge.n	8013c54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013b98:	6828      	ldr	r0, [r5, #0]
 8013b9a:	45b0      	cmp	r8, r6
 8013b9c:	6803      	ldr	r3, [r0, #0]
 8013b9e:	bfcc      	ite	gt
 8013ba0:	eba8 0806 	subgt.w	r8, r8, r6
 8013ba4:	f04f 0800 	movle.w	r8, #0
 8013ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013baa:	bfc8      	it	gt
 8013bac:	fa1f f888 	uxthgt.w	r8, r8
 8013bb0:	4798      	blx	r3
 8013bb2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013bb4:	7b53      	ldrb	r3, [r2, #13]
 8013bb6:	00d9      	lsls	r1, r3, #3
 8013bb8:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8013bbc:	7a11      	ldrb	r1, [r2, #8]
 8013bbe:	4339      	orrs	r1, r7
 8013bc0:	065f      	lsls	r7, r3, #25
 8013bc2:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8013bc4:	bf48      	it	mi
 8013bc6:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8013bca:	4407      	add	r7, r0
 8013bcc:	bf48      	it	mi
 8013bce:	b209      	sxthmi	r1, r1
 8013bd0:	1a7f      	subs	r7, r7, r1
 8013bd2:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8013bd4:	b2bf      	uxth	r7, r7
 8013bd6:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8013bda:	fa0f fa87 	sxth.w	sl, r7
 8013bde:	4551      	cmp	r1, sl
 8013be0:	dd3c      	ble.n	8013c5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8013be2:	011b      	lsls	r3, r3, #4
 8013be4:	79d0      	ldrb	r0, [r2, #7]
 8013be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013bea:	4303      	orrs	r3, r0
 8013bec:	449a      	add	sl, r3
 8013bee:	4551      	cmp	r1, sl
 8013bf0:	dc30      	bgt.n	8013c54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013bf2:	1bcf      	subs	r7, r1, r7
 8013bf4:	468a      	mov	sl, r1
 8013bf6:	b23f      	sxth	r7, r7
 8013bf8:	9219      	str	r2, [sp, #100]	@ 0x64
 8013bfa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013bfc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013bfe:	6828      	ldr	r0, [r5, #0]
 8013c00:	2a00      	cmp	r2, #0
 8013c02:	d12d      	bne.n	8013c60 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8013c04:	9318      	str	r3, [sp, #96]	@ 0x60
 8013c06:	b2bf      	uxth	r7, r7
 8013c08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c0a:	6819      	ldr	r1, [r3, #0]
 8013c0c:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8013c0e:	6801      	ldr	r1, [r0, #0]
 8013c10:	9314      	str	r3, [sp, #80]	@ 0x50
 8013c12:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013c14:	4788      	blx	r1
 8013c16:	79a9      	ldrb	r1, [r5, #6]
 8013c18:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8013c1a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013c1c:	7ba9      	ldrb	r1, [r5, #14]
 8013c1e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013c20:	910a      	str	r1, [sp, #40]	@ 0x28
 8013c22:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8013c26:	9109      	str	r1, [sp, #36]	@ 0x24
 8013c28:	68a9      	ldr	r1, [r5, #8]
 8013c2a:	9306      	str	r3, [sp, #24]
 8013c2c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8013c2e:	9205      	str	r2, [sp, #20]
 8013c30:	9304      	str	r3, [sp, #16]
 8013c32:	f8cd a004 	str.w	sl, [sp, #4]
 8013c36:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8013c3a:	44b0      	add	r8, r6
 8013c3c:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8013c3e:	fa0f f388 	sxth.w	r3, r8
 8013c42:	9300      	str	r3, [sp, #0]
 8013c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c46:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8013c4a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8013c4c:	681a      	ldr	r2, [r3, #0]
 8013c4e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8013c50:	685b      	ldr	r3, [r3, #4]
 8013c52:	47b8      	blx	r7
 8013c54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013c56:	3301      	adds	r3, #1
 8013c58:	930d      	str	r3, [sp, #52]	@ 0x34
 8013c5a:	e6e3      	b.n	8013a24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8013c5c:	2700      	movs	r7, #0
 8013c5e:	e7cb      	b.n	8013bf8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8013c60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013c62:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8013c66:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013c68:	f8dc 1000 	ldr.w	r1, [ip]
 8013c6c:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8013c70:	79aa      	ldrb	r2, [r5, #6]
 8013c72:	9203      	str	r2, [sp, #12]
 8013c74:	7baa      	ldrb	r2, [r5, #14]
 8013c76:	9202      	str	r2, [sp, #8]
 8013c78:	68aa      	ldr	r2, [r5, #8]
 8013c7a:	e9cd 0200 	strd	r0, r2, [sp]
 8013c7e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8013c80:	4660      	mov	r0, ip
 8013c82:	688f      	ldr	r7, [r1, #8]
 8013c84:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013c86:	47b8      	blx	r7
 8013c88:	e7e4      	b.n	8013c54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013c8a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8013c8c:	3501      	adds	r5, #1
 8013c8e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8013c90:	429d      	cmp	r5, r3
 8013c92:	f6bf af5e 	bge.w	8013b52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8013c96:	4659      	mov	r1, fp
 8013c98:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8013c9a:	f7f0 fd4b 	bl	8004734 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013c9e:	4604      	mov	r4, r0
 8013ca0:	b110      	cbz	r0, 8013ca8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8013ca2:	280a      	cmp	r0, #10
 8013ca4:	d1f2      	bne.n	8013c8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8013ca6:	e753      	b.n	8013b50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8013ca8:	2400      	movs	r4, #0
 8013caa:	e752      	b.n	8013b52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8013cac:	f1bb 0f00 	cmp.w	fp, #0
 8013cb0:	f43f af43 	beq.w	8013b3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8013cb4:	e75d      	b.n	8013b72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08013cb6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8013cb6:	b530      	push	{r4, r5, lr}
 8013cb8:	8ac4      	ldrh	r4, [r0, #22]
 8013cba:	8b45      	ldrh	r5, [r0, #26]
 8013cbc:	8343      	strh	r3, [r0, #26]
 8013cbe:	442c      	add	r4, r5
 8013cc0:	1ae4      	subs	r4, r4, r3
 8013cc2:	8b83      	ldrh	r3, [r0, #28]
 8013cc4:	82c4      	strh	r4, [r0, #22]
 8013cc6:	8b04      	ldrh	r4, [r0, #24]
 8013cc8:	4422      	add	r2, r4
 8013cca:	440c      	add	r4, r1
 8013ccc:	1a59      	subs	r1, r3, r1
 8013cce:	83c2      	strh	r2, [r0, #30]
 8013cd0:	8304      	strh	r4, [r0, #24]
 8013cd2:	8381      	strh	r1, [r0, #28]
 8013cd4:	bd30      	pop	{r4, r5, pc}

08013cd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8013cd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cda:	4604      	mov	r4, r0
 8013cdc:	8a47      	ldrh	r7, [r0, #18]
 8013cde:	68c0      	ldr	r0, [r0, #12]
 8013ce0:	b085      	sub	sp, #20
 8013ce2:	6803      	ldr	r3, [r0, #0]
 8013ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ce6:	4798      	blx	r3
 8013ce8:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8013cec:	7a63      	ldrb	r3, [r4, #9]
 8013cee:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8013cf2:	3b01      	subs	r3, #1
 8013cf4:	42b7      	cmp	r7, r6
 8013cf6:	bfac      	ite	ge
 8013cf8:	f04f 0900 	movge.w	r9, #0
 8013cfc:	f04f 0901 	movlt.w	r9, #1
 8013d00:	2b05      	cmp	r3, #5
 8013d02:	d804      	bhi.n	8013d0e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8013d04:	e8df f003 	tbb	[pc, r3]
 8013d08:	470f0854 	.word	0x470f0854
 8013d0c:	4c4c      	.short	0x4c4c
 8013d0e:	2500      	movs	r5, #0
 8013d10:	46a9      	mov	r9, r5
 8013d12:	462e      	mov	r6, r5
 8013d14:	462f      	mov	r7, r5
 8013d16:	e00e      	b.n	8013d36 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8013d18:	42b7      	cmp	r7, r6
 8013d1a:	f04f 0500 	mov.w	r5, #0
 8013d1e:	bfb4      	ite	lt
 8013d20:	2600      	movlt	r6, #0
 8013d22:	2601      	movge	r6, #1
 8013d24:	e7f6      	b.n	8013d14 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8013d26:	42b7      	cmp	r7, r6
 8013d28:	464d      	mov	r5, r9
 8013d2a:	f04f 0900 	mov.w	r9, #0
 8013d2e:	bfb4      	ite	lt
 8013d30:	2600      	movlt	r6, #0
 8013d32:	2601      	movge	r6, #1
 8013d34:	464f      	mov	r7, r9
 8013d36:	f04f 0800 	mov.w	r8, #0
 8013d3a:	f8a4 8016 	strh.w	r8, [r4, #22]
 8013d3e:	f8a4 8018 	strh.w	r8, [r4, #24]
 8013d42:	f8cd 8004 	str.w	r8, [sp, #4]
 8013d46:	2300      	movs	r3, #0
 8013d48:	9303      	str	r3, [sp, #12]
 8013d4a:	8823      	ldrh	r3, [r4, #0]
 8013d4c:	2b20      	cmp	r3, #32
 8013d4e:	d033      	beq.n	8013db8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8013d50:	f242 010b 	movw	r1, #8203	@ 0x200b
 8013d54:	1a5a      	subs	r2, r3, r1
 8013d56:	f1d2 0a00 	rsbs	sl, r2, #0
 8013d5a:	eb4a 0a02 	adc.w	sl, sl, r2
 8013d5e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8013d62:	4293      	cmp	r3, r2
 8013d64:	d008      	beq.n	8013d78 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8013d66:	428b      	cmp	r3, r1
 8013d68:	9a01      	ldr	r2, [sp, #4]
 8013d6a:	bf0e      	itee	eq
 8013d6c:	f04f 0a01 	moveq.w	sl, #1
 8013d70:	461a      	movne	r2, r3
 8013d72:	f04f 0a00 	movne.w	sl, #0
 8013d76:	9201      	str	r2, [sp, #4]
 8013d78:	ab03      	add	r3, sp, #12
 8013d7a:	68e2      	ldr	r2, [r4, #12]
 8013d7c:	7a21      	ldrb	r1, [r4, #8]
 8013d7e:	6860      	ldr	r0, [r4, #4]
 8013d80:	f003 fa70 	bl	8017264 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013d84:	8020      	strh	r0, [r4, #0]
 8013d86:	b9d8      	cbnz	r0, 8013dc0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8013d88:	8ba2      	ldrh	r2, [r4, #28]
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	4611      	mov	r1, r2
 8013d8e:	4620      	mov	r0, r4
 8013d90:	f7ff ff91 	bl	8013cb6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8013d94:	e06e      	b.n	8013e74 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8013d96:	2500      	movs	r5, #0
 8013d98:	2701      	movs	r7, #1
 8013d9a:	46a9      	mov	r9, r5
 8013d9c:	462e      	mov	r6, r5
 8013d9e:	e7ca      	b.n	8013d36 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8013da0:	42b7      	cmp	r7, r6
 8013da2:	f04f 0500 	mov.w	r5, #0
 8013da6:	bfb4      	ite	lt
 8013da8:	2700      	movlt	r7, #0
 8013daa:	2701      	movge	r7, #1
 8013dac:	462e      	mov	r6, r5
 8013dae:	e7c2      	b.n	8013d36 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8013db0:	2500      	movs	r5, #0
 8013db2:	2601      	movs	r6, #1
 8013db4:	46a9      	mov	r9, r5
 8013db6:	e7ad      	b.n	8013d14 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8013db8:	9301      	str	r3, [sp, #4]
 8013dba:	f04f 0a01 	mov.w	sl, #1
 8013dbe:	e7db      	b.n	8013d78 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8013dc0:	8b63      	ldrh	r3, [r4, #26]
 8013dc2:	280a      	cmp	r0, #10
 8013dc4:	f103 0301 	add.w	r3, r3, #1
 8013dc8:	8363      	strh	r3, [r4, #26]
 8013dca:	d0dd      	beq.n	8013d88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8013dcc:	9a03      	ldr	r2, [sp, #12]
 8013dce:	bb62      	cbnz	r2, 8013e2a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8013dd0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8013dd4:	4298      	cmp	r0, r3
 8013dd6:	d003      	beq.n	8013de0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8013dd8:	f242 030b 	movw	r3, #8203	@ 0x200b
 8013ddc:	4298      	cmp	r0, r3
 8013dde:	d1b2      	bne.n	8013d46 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013de0:	8823      	ldrh	r3, [r4, #0]
 8013de2:	8ba1      	ldrh	r1, [r4, #28]
 8013de4:	2b20      	cmp	r3, #32
 8013de6:	d003      	beq.n	8013df0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8013de8:	f242 000b 	movw	r0, #8203	@ 0x200b
 8013dec:	4283      	cmp	r3, r0
 8013dee:	d131      	bne.n	8013e54 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8013df0:	f1ba 0f00 	cmp.w	sl, #0
 8013df4:	bf0a      	itet	eq
 8013df6:	4688      	moveq	r8, r1
 8013df8:	4650      	movne	r0, sl
 8013dfa:	2001      	moveq	r0, #1
 8013dfc:	440a      	add	r2, r1
 8013dfe:	8b23      	ldrh	r3, [r4, #24]
 8013e00:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8013e04:	b292      	uxth	r2, r2
 8013e06:	83a2      	strh	r2, [r4, #28]
 8013e08:	4413      	add	r3, r2
 8013e0a:	f1b9 0f00 	cmp.w	r9, #0
 8013e0e:	d102      	bne.n	8013e16 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8013e10:	2d00      	cmp	r5, #0
 8013e12:	d042      	beq.n	8013e9a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8013e14:	b300      	cbz	r0, 8013e58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8013e16:	8c21      	ldrh	r1, [r4, #32]
 8013e18:	4419      	add	r1, r3
 8013e1a:	458c      	cmp	ip, r1
 8013e1c:	da37      	bge.n	8013e8e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8013e1e:	8ae1      	ldrh	r1, [r4, #22]
 8013e20:	2900      	cmp	r1, #0
 8013e22:	d034      	beq.n	8013e8e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8013e24:	4563      	cmp	r3, ip
 8013e26:	dd8e      	ble.n	8013d46 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013e28:	e01d      	b.n	8013e66 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8013e2a:	8893      	ldrh	r3, [r2, #4]
 8013e2c:	9901      	ldr	r1, [sp, #4]
 8013e2e:	8023      	strh	r3, [r4, #0]
 8013e30:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8013e34:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8013e38:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8013e3c:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8013e40:	ea4b 0b00 	orr.w	fp, fp, r0
 8013e44:	68e0      	ldr	r0, [r4, #12]
 8013e46:	6803      	ldr	r3, [r0, #0]
 8013e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013e4a:	4798      	blx	r3
 8013e4c:	eb0b 0200 	add.w	r2, fp, r0
 8013e50:	b292      	uxth	r2, r2
 8013e52:	e7c5      	b.n	8013de0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8013e54:	2000      	movs	r0, #0
 8013e56:	e7d1      	b.n	8013dfc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8013e58:	4563      	cmp	r3, ip
 8013e5a:	f77f af74 	ble.w	8013d46 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013e5e:	8ae3      	ldrh	r3, [r4, #22]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	f43f af70 	beq.w	8013d46 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013e66:	2301      	movs	r3, #1
 8013e68:	8c22      	ldrh	r2, [r4, #32]
 8013e6a:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8013e6e:	8be3      	ldrh	r3, [r4, #30]
 8013e70:	4413      	add	r3, r2
 8013e72:	83e3      	strh	r3, [r4, #30]
 8013e74:	68e0      	ldr	r0, [r4, #12]
 8013e76:	6803      	ldr	r3, [r0, #0]
 8013e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e7a:	4798      	blx	r3
 8013e7c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8013e80:	4418      	add	r0, r3
 8013e82:	8a63      	ldrh	r3, [r4, #18]
 8013e84:	1a18      	subs	r0, r3, r0
 8013e86:	8260      	strh	r0, [r4, #18]
 8013e88:	b005      	add	sp, #20
 8013e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e8e:	2300      	movs	r3, #0
 8013e90:	4611      	mov	r1, r2
 8013e92:	4620      	mov	r0, r4
 8013e94:	f7ff ff0f 	bl	8013cb6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8013e98:	e755      	b.n	8013d46 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013e9a:	4563      	cmp	r3, ip
 8013e9c:	dd14      	ble.n	8013ec8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8013e9e:	b117      	cbz	r7, 8013ea6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	460a      	mov	r2, r1
 8013ea4:	e772      	b.n	8013d8c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8013ea6:	2e00      	cmp	r6, #0
 8013ea8:	f43f af4d 	beq.w	8013d46 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013eac:	2800      	cmp	r0, #0
 8013eae:	f47f af4a 	bne.w	8013d46 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013eb2:	f1ba 0f00 	cmp.w	sl, #0
 8013eb6:	d002      	beq.n	8013ebe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8013eb8:	2301      	movs	r3, #1
 8013eba:	4642      	mov	r2, r8
 8013ebc:	e767      	b.n	8013d8e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8013ebe:	8ae3      	ldrh	r3, [r4, #22]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	f43f af40 	beq.w	8013d46 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013ec6:	e7d5      	b.n	8013e74 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8013ec8:	2800      	cmp	r0, #0
 8013eca:	f47f af3c 	bne.w	8013d46 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013ece:	f1ba 0f00 	cmp.w	sl, #0
 8013ed2:	f43f af38 	beq.w	8013d46 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	4642      	mov	r2, r8
 8013eda:	e7da      	b.n	8013e92 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08013edc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8013edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ede:	4605      	mov	r5, r0
 8013ee0:	b08f      	sub	sp, #60	@ 0x3c
 8013ee2:	4617      	mov	r7, r2
 8013ee4:	461c      	mov	r4, r3
 8013ee6:	460e      	mov	r6, r1
 8013ee8:	b1d1      	cbz	r1, 8013f20 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	4620      	mov	r0, r4
 8013eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ef0:	4798      	blx	r3
 8013ef2:	4240      	negs	r0, r0
 8013ef4:	9603      	str	r6, [sp, #12]
 8013ef6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013efa:	b200      	sxth	r0, r0
 8013efc:	9700      	str	r7, [sp, #0]
 8013efe:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8013f02:	4629      	mov	r1, r5
 8013f04:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8013f08:	2401      	movs	r4, #1
 8013f0a:	a805      	add	r0, sp, #20
 8013f0c:	f7ff fcaa 	bl	8013864 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8013f10:	a805      	add	r0, sp, #20
 8013f12:	f7ff fee0 	bl	8013cd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8013f16:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8013f1a:	b163      	cbz	r3, 8013f36 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8013f1c:	3401      	adds	r4, #1
 8013f1e:	e7f7      	b.n	8013f10 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8013f20:	2401      	movs	r4, #1
 8013f22:	f003 fa6b 	bl	80173fc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013f26:	280a      	cmp	r0, #10
 8013f28:	4628      	mov	r0, r5
 8013f2a:	bf08      	it	eq
 8013f2c:	3401      	addeq	r4, #1
 8013f2e:	f003 fa65 	bl	80173fc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013f32:	2800      	cmp	r0, #0
 8013f34:	d1f7      	bne.n	8013f26 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8013f36:	b2a0      	uxth	r0, r4
 8013f38:	b00f      	add	sp, #60	@ 0x3c
 8013f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013f3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8013f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f40:	b0e3      	sub	sp, #396	@ 0x18c
 8013f42:	461c      	mov	r4, r3
 8013f44:	4683      	mov	fp, r0
 8013f46:	4688      	mov	r8, r1
 8013f48:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	f000 8112 	beq.w	8014174 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013f50:	6823      	ldr	r3, [r4, #0]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	f000 810e 	beq.w	8014174 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013f58:	7ba3      	ldrb	r3, [r4, #14]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	f000 810a 	beq.w	8014174 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013f60:	ad0a      	add	r5, sp, #40	@ 0x28
 8013f62:	6810      	ldr	r0, [r2, #0]
 8013f64:	6851      	ldr	r1, [r2, #4]
 8013f66:	462b      	mov	r3, r5
 8013f68:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8013f6c:	c303      	stmia	r3!, {r0, r1}
 8013f6e:	2100      	movs	r1, #0
 8013f70:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8013f74:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8013f78:	4628      	mov	r0, r5
 8013f7a:	910c      	str	r1, [sp, #48]	@ 0x30
 8013f7c:	a90c      	add	r1, sp, #48	@ 0x30
 8013f7e:	79a2      	ldrb	r2, [r4, #6]
 8013f80:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8013f84:	f7ff fced 	bl	8013962 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8013f88:	a90c      	add	r1, sp, #48	@ 0x30
 8013f8a:	79a2      	ldrb	r2, [r4, #6]
 8013f8c:	4608      	mov	r0, r1
 8013f8e:	f7ff fce8 	bl	8013962 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8013f92:	a817      	add	r0, sp, #92	@ 0x5c
 8013f94:	f002 fdf0 	bl	8016b78 <_ZN8touchgfx12TextProviderC1Ev>
 8013f98:	6820      	ldr	r0, [r4, #0]
 8013f9a:	6803      	ldr	r3, [r0, #0]
 8013f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013f9e:	4798      	blx	r3
 8013fa0:	4606      	mov	r6, r0
 8013fa2:	6820      	ldr	r0, [r4, #0]
 8013fa4:	6803      	ldr	r3, [r0, #0]
 8013fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013fa8:	4798      	blx	r3
 8013faa:	4633      	mov	r3, r6
 8013fac:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8013fae:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8013fb0:	9000      	str	r0, [sp, #0]
 8013fb2:	a817      	add	r0, sp, #92	@ 0x5c
 8013fb4:	f002 fe33 	bl	8016c1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013fb8:	6820      	ldr	r0, [r4, #0]
 8013fba:	f894 a004 	ldrb.w	sl, [r4, #4]
 8013fbe:	6803      	ldr	r3, [r0, #0]
 8013fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fc2:	4798      	blx	r3
 8013fc4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8013fc8:	6823      	ldr	r3, [r4, #0]
 8013fca:	4607      	mov	r7, r0
 8013fcc:	4406      	add	r6, r0
 8013fce:	a830      	add	r0, sp, #192	@ 0xc0
 8013fd0:	f893 9009 	ldrb.w	r9, [r3, #9]
 8013fd4:	f002 fdd0 	bl	8016b78 <_ZN8touchgfx12TextProviderC1Ev>
 8013fd8:	7c23      	ldrb	r3, [r4, #16]
 8013fda:	b17b      	cbz	r3, 8013ffc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8013fdc:	6820      	ldr	r0, [r4, #0]
 8013fde:	6803      	ldr	r3, [r0, #0]
 8013fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013fe2:	4798      	blx	r3
 8013fe4:	9009      	str	r0, [sp, #36]	@ 0x24
 8013fe6:	6820      	ldr	r0, [r4, #0]
 8013fe8:	6802      	ldr	r2, [r0, #0]
 8013fea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013fec:	4790      	blx	r2
 8013fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ff0:	9000      	str	r0, [sp, #0]
 8013ff2:	a830      	add	r0, sp, #192	@ 0xc0
 8013ff4:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8013ff6:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8013ff8:	f002 fe11 	bl	8016c1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013ffc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8014000:	a80e      	add	r0, sp, #56	@ 0x38
 8014002:	7be2      	ldrb	r2, [r4, #15]
 8014004:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8014008:	1a8a      	subs	r2, r1, r2
 801400a:	7c21      	ldrb	r1, [r4, #16]
 801400c:	9103      	str	r1, [sp, #12]
 801400e:	b292      	uxth	r2, r2
 8014010:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8014014:	9102      	str	r1, [sp, #8]
 8014016:	6821      	ldr	r1, [r4, #0]
 8014018:	9101      	str	r1, [sp, #4]
 801401a:	7961      	ldrb	r1, [r4, #5]
 801401c:	9100      	str	r1, [sp, #0]
 801401e:	a930      	add	r1, sp, #192	@ 0xc0
 8014020:	f7ff fc20 	bl	8013864 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8014024:	2e00      	cmp	r6, #0
 8014026:	dc5b      	bgt.n	80140e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8014028:	af17      	add	r7, sp, #92	@ 0x5c
 801402a:	f04f 0900 	mov.w	r9, #0
 801402e:	7c23      	ldrb	r3, [r4, #16]
 8014030:	2b00      	cmp	r3, #0
 8014032:	f000 80b1 	beq.w	8014198 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8014036:	a80e      	add	r0, sp, #56	@ 0x38
 8014038:	f7ff fe4d 	bl	8013cd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801403c:	f1ba 0f00 	cmp.w	sl, #0
 8014040:	f000 80a5 	beq.w	801418e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8014044:	7c23      	ldrb	r3, [r4, #16]
 8014046:	2264      	movs	r2, #100	@ 0x64
 8014048:	4639      	mov	r1, r7
 801404a:	a849      	add	r0, sp, #292	@ 0x124
 801404c:	9309      	str	r3, [sp, #36]	@ 0x24
 801404e:	f00f febc 	bl	8023dca <memcpy>
 8014052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014054:	2b00      	cmp	r3, #0
 8014056:	f000 80a7 	beq.w	80141a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801405a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801405e:	7922      	ldrb	r2, [r4, #4]
 8014060:	2a01      	cmp	r2, #1
 8014062:	f040 808a 	bne.w	801417a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8014066:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 801406a:	1ac0      	subs	r0, r0, r3
 801406c:	2302      	movs	r3, #2
 801406e:	fb90 f0f3 	sdiv	r0, r0, r3
 8014072:	b200      	sxth	r0, r0
 8014074:	7c23      	ldrb	r3, [r4, #16]
 8014076:	2b00      	cmp	r3, #0
 8014078:	f000 808b 	beq.w	8014192 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801407c:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8014080:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8014084:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8014088:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801408c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8014090:	2100      	movs	r1, #0
 8014092:	4410      	add	r0, r2
 8014094:	4642      	mov	r2, r8
 8014096:	b200      	sxth	r0, r0
 8014098:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801409c:	9000      	str	r0, [sp, #0]
 801409e:	4658      	mov	r0, fp
 80140a0:	e9cd 5401 	strd	r5, r4, [sp, #4]
 80140a4:	f7ff fc8e 	bl	80139c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80140a8:	2800      	cmp	r0, #0
 80140aa:	d163      	bne.n	8014174 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80140ac:	b2b2      	uxth	r2, r6
 80140ae:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80140b2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80140b6:	4413      	add	r3, r2
 80140b8:	1a8a      	subs	r2, r1, r2
 80140ba:	b21b      	sxth	r3, r3
 80140bc:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 80140c0:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 80140c4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80140c8:	2a00      	cmp	r2, #0
 80140ca:	d153      	bne.n	8014174 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80140cc:	6822      	ldr	r2, [r4, #0]
 80140ce:	8869      	ldrh	r1, [r5, #2]
 80140d0:	7a12      	ldrb	r2, [r2, #8]
 80140d2:	1a9b      	subs	r3, r3, r2
 80140d4:	88ea      	ldrh	r2, [r5, #6]
 80140d6:	440a      	add	r2, r1
 80140d8:	b212      	sxth	r2, r2
 80140da:	4293      	cmp	r3, r2
 80140dc:	dda7      	ble.n	801402e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 80140de:	e049      	b.n	8014174 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80140e0:	7c23      	ldrb	r3, [r4, #16]
 80140e2:	444f      	add	r7, r9
 80140e4:	b1c3      	cbz	r3, 8014118 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 80140e6:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 80140ea:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80140ee:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80140f2:	443b      	add	r3, r7
 80140f4:	4293      	cmp	r3, r2
 80140f6:	da97      	bge.n	8014028 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80140f8:	a80e      	add	r0, sp, #56	@ 0x38
 80140fa:	f7ff fdec 	bl	8013cd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80140fe:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8014102:	3b01      	subs	r3, #1
 8014104:	b29b      	uxth	r3, r3
 8014106:	454b      	cmp	r3, r9
 8014108:	9309      	str	r3, [sp, #36]	@ 0x24
 801410a:	d021      	beq.n	8014150 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801410c:	7961      	ldrb	r1, [r4, #5]
 801410e:	a817      	add	r0, sp, #92	@ 0x5c
 8014110:	f7f0 fb10 	bl	8004734 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014116:	e7f4      	b.n	8014102 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8014118:	fa1f f986 	uxth.w	r9, r6
 801411c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8014120:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014124:	443b      	add	r3, r7
 8014126:	4293      	cmp	r3, r2
 8014128:	f6bf af7e 	bge.w	8014028 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801412c:	a817      	add	r0, sp, #92	@ 0x5c
 801412e:	f003 f965 	bl	80173fc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014132:	b1f8      	cbz	r0, 8014174 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8014134:	280a      	cmp	r0, #10
 8014136:	d1f1      	bne.n	801411c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8014138:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801413c:	444b      	add	r3, r9
 801413e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8014142:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8014146:	eba3 0309 	sub.w	r3, r3, r9
 801414a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801414e:	e7e5      	b.n	801411c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8014150:	b2b3      	uxth	r3, r6
 8014152:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8014156:	441a      	add	r2, r3
 8014158:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801415c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8014160:	1ad3      	subs	r3, r2, r3
 8014162:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8014166:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801416a:	b11b      	cbz	r3, 8014174 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801416c:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8014170:	2b00      	cmp	r3, #0
 8014172:	d0ba      	beq.n	80140ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8014174:	b063      	add	sp, #396	@ 0x18c
 8014176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801417a:	2a02      	cmp	r2, #2
 801417c:	d105      	bne.n	801418a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801417e:	7be2      	ldrb	r2, [r4, #15]
 8014180:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8014184:	1a80      	subs	r0, r0, r2
 8014186:	1ac0      	subs	r0, r0, r3
 8014188:	e773      	b.n	8014072 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801418a:	2000      	movs	r0, #0
 801418c:	e772      	b.n	8014074 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801418e:	7be0      	ldrb	r0, [r4, #15]
 8014190:	e770      	b.n	8014074 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8014192:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014196:	e773      	b.n	8014080 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8014198:	f1ba 0f00 	cmp.w	sl, #0
 801419c:	d0f7      	beq.n	801418e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801419e:	2264      	movs	r2, #100	@ 0x64
 80141a0:	4639      	mov	r1, r7
 80141a2:	a849      	add	r0, sp, #292	@ 0x124
 80141a4:	f00f fe11 	bl	8023dca <memcpy>
 80141a8:	2300      	movs	r3, #0
 80141aa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80141ae:	6821      	ldr	r1, [r4, #0]
 80141b0:	a849      	add	r0, sp, #292	@ 0x124
 80141b2:	f7ff fb9a 	bl	80138ea <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80141b6:	b203      	sxth	r3, r0
 80141b8:	e751      	b.n	801405e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

080141ba <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80141ba:	2b03      	cmp	r3, #3
 80141bc:	d818      	bhi.n	80141f0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80141be:	e8df f003 	tbb	[pc, r3]
 80141c2:	0602      	.short	0x0602
 80141c4:	130d      	.short	0x130d
 80141c6:	f9b0 2000 	ldrsh.w	r2, [r0]
 80141ca:	1850      	adds	r0, r2, r1
 80141cc:	4770      	bx	lr
 80141ce:	8803      	ldrh	r3, [r0, #0]
 80141d0:	8880      	ldrh	r0, [r0, #4]
 80141d2:	4418      	add	r0, r3
 80141d4:	b200      	sxth	r0, r0
 80141d6:	1a80      	subs	r0, r0, r2
 80141d8:	3801      	subs	r0, #1
 80141da:	4770      	bx	lr
 80141dc:	8803      	ldrh	r3, [r0, #0]
 80141de:	8880      	ldrh	r0, [r0, #4]
 80141e0:	4418      	add	r0, r3
 80141e2:	b200      	sxth	r0, r0
 80141e4:	1a40      	subs	r0, r0, r1
 80141e6:	e7f7      	b.n	80141d8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80141e8:	f9b0 0000 	ldrsh.w	r0, [r0]
 80141ec:	4410      	add	r0, r2
 80141ee:	4770      	bx	lr
 80141f0:	2000      	movs	r0, #0
 80141f2:	4770      	bx	lr

080141f4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80141f4:	2b03      	cmp	r3, #3
 80141f6:	d817      	bhi.n	8014228 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80141f8:	e8df f003 	tbb	[pc, r3]
 80141fc:	10090602 	.word	0x10090602
 8014200:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8014204:	1850      	adds	r0, r2, r1
 8014206:	4770      	bx	lr
 8014208:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801420c:	e7fa      	b.n	8014204 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801420e:	8843      	ldrh	r3, [r0, #2]
 8014210:	88c0      	ldrh	r0, [r0, #6]
 8014212:	4418      	add	r0, r3
 8014214:	b200      	sxth	r0, r0
 8014216:	1a80      	subs	r0, r0, r2
 8014218:	3801      	subs	r0, #1
 801421a:	4770      	bx	lr
 801421c:	8843      	ldrh	r3, [r0, #2]
 801421e:	88c0      	ldrh	r0, [r0, #6]
 8014220:	4418      	add	r0, r3
 8014222:	b200      	sxth	r0, r0
 8014224:	1a40      	subs	r0, r0, r1
 8014226:	e7f7      	b.n	8014218 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8014228:	2000      	movs	r0, #0
 801422a:	4770      	bx	lr

0801422c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801422c:	4b01      	ldr	r3, [pc, #4]	@ (8014234 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801422e:	2200      	movs	r2, #0
 8014230:	601a      	str	r2, [r3, #0]
 8014232:	4770      	bx	lr
 8014234:	240255dc 	.word	0x240255dc

08014238 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8014238:	4603      	mov	r3, r0
 801423a:	b1c8      	cbz	r0, 8014270 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801423c:	0c02      	lsrs	r2, r0, #16
 801423e:	0412      	lsls	r2, r2, #16
 8014240:	b9a2      	cbnz	r2, 801426c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8014242:	0403      	lsls	r3, r0, #16
 8014244:	2010      	movs	r0, #16
 8014246:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801424a:	bf04      	itt	eq
 801424c:	021b      	lsleq	r3, r3, #8
 801424e:	3008      	addeq	r0, #8
 8014250:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8014254:	bf04      	itt	eq
 8014256:	011b      	lsleq	r3, r3, #4
 8014258:	3004      	addeq	r0, #4
 801425a:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801425e:	bf04      	itt	eq
 8014260:	009b      	lsleq	r3, r3, #2
 8014262:	3002      	addeq	r0, #2
 8014264:	2b00      	cmp	r3, #0
 8014266:	db04      	blt.n	8014272 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8014268:	3001      	adds	r0, #1
 801426a:	4770      	bx	lr
 801426c:	2000      	movs	r0, #0
 801426e:	e7ea      	b.n	8014246 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8014270:	2020      	movs	r0, #32
 8014272:	4770      	bx	lr

08014274 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8014274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014278:	b087      	sub	sp, #28
 801427a:	460d      	mov	r5, r1
 801427c:	4616      	mov	r6, r2
 801427e:	4698      	mov	r8, r3
 8014280:	4601      	mov	r1, r0
 8014282:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8014286:	b120      	cbz	r0, 8014292 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8014288:	b11a      	cbz	r2, 8014292 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801428a:	2d1f      	cmp	r5, #31
 801428c:	d801      	bhi.n	8014292 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801428e:	2b1f      	cmp	r3, #31
 8014290:	d904      	bls.n	801429c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8014292:	2000      	movs	r0, #0
 8014294:	6038      	str	r0, [r7, #0]
 8014296:	b007      	add	sp, #28
 8014298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801429c:	b97d      	cbnz	r5, 80142be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801429e:	b143      	cbz	r3, 80142b2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80142a0:	4602      	mov	r2, r0
 80142a2:	462b      	mov	r3, r5
 80142a4:	4641      	mov	r1, r8
 80142a6:	4630      	mov	r0, r6
 80142a8:	e9cd 4700 	strd	r4, r7, [sp]
 80142ac:	f7ff ffe2 	bl	8014274 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80142b0:	e7f1      	b.n	8014296 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80142b2:	f04f 33ff 	mov.w	r3, #4294967295
 80142b6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80142ba:	603b      	str	r3, [r7, #0]
 80142bc:	e7eb      	b.n	8014296 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80142be:	fa32 fa05 	lsrs.w	sl, r2, r5
 80142c2:	d106      	bne.n	80142d2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 80142c4:	4346      	muls	r6, r0
 80142c6:	fbb6 f0f4 	udiv	r0, r6, r4
 80142ca:	fb04 6610 	mls	r6, r4, r0, r6
 80142ce:	603e      	str	r6, [r7, #0]
 80142d0:	e7e1      	b.n	8014296 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80142d2:	2201      	movs	r2, #1
 80142d4:	fa00 fb05 	lsl.w	fp, r0, r5
 80142d8:	40aa      	lsls	r2, r5
 80142da:	fbbb f9f4 	udiv	r9, fp, r4
 80142de:	3a01      	subs	r2, #1
 80142e0:	fb0a f309 	mul.w	r3, sl, r9
 80142e4:	fb04 b919 	mls	r9, r4, r9, fp
 80142e8:	4016      	ands	r6, r2
 80142ea:	9303      	str	r3, [sp, #12]
 80142ec:	4630      	mov	r0, r6
 80142ee:	f7ff ffa3 	bl	8014238 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80142f2:	462b      	mov	r3, r5
 80142f4:	460a      	mov	r2, r1
 80142f6:	4601      	mov	r1, r0
 80142f8:	4630      	mov	r0, r6
 80142fa:	e9cd 4700 	strd	r4, r7, [sp]
 80142fe:	f7ff ffb9 	bl	8014274 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014302:	4606      	mov	r6, r0
 8014304:	4648      	mov	r0, r9
 8014306:	eb05 0108 	add.w	r1, r5, r8
 801430a:	f7ff ff95 	bl	8014238 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801430e:	ab05      	add	r3, sp, #20
 8014310:	464a      	mov	r2, r9
 8014312:	e9cd 4300 	strd	r4, r3, [sp]
 8014316:	4603      	mov	r3, r0
 8014318:	4650      	mov	r0, sl
 801431a:	f7ff ffab 	bl	8014274 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801431e:	6839      	ldr	r1, [r7, #0]
 8014320:	9a05      	ldr	r2, [sp, #20]
 8014322:	9b03      	ldr	r3, [sp, #12]
 8014324:	4411      	add	r1, r2
 8014326:	fbb1 f2f4 	udiv	r2, r1, r4
 801432a:	18d3      	adds	r3, r2, r3
 801432c:	fb04 1412 	mls	r4, r4, r2, r1
 8014330:	441e      	add	r6, r3
 8014332:	603c      	str	r4, [r7, #0]
 8014334:	4430      	add	r0, r6
 8014336:	e7ae      	b.n	8014296 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08014338 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8014338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801433c:	b085      	sub	sp, #20
 801433e:	f1b0 0900 	subs.w	r9, r0, #0
 8014342:	461d      	mov	r5, r3
 8014344:	4617      	mov	r7, r2
 8014346:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8014348:	bfbb      	ittet	lt
 801434a:	f1c9 0900 	rsblt	r9, r9, #0
 801434e:	f04f 36ff 	movlt.w	r6, #4294967295
 8014352:	2601      	movge	r6, #1
 8014354:	6823      	ldrlt	r3, [r4, #0]
 8014356:	bfbc      	itt	lt
 8014358:	425b      	neglt	r3, r3
 801435a:	6023      	strlt	r3, [r4, #0]
 801435c:	2a00      	cmp	r2, #0
 801435e:	da04      	bge.n	801436a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8014360:	6823      	ldr	r3, [r4, #0]
 8014362:	4257      	negs	r7, r2
 8014364:	4276      	negs	r6, r6
 8014366:	425b      	negs	r3, r3
 8014368:	6023      	str	r3, [r4, #0]
 801436a:	2d00      	cmp	r5, #0
 801436c:	4638      	mov	r0, r7
 801436e:	bfba      	itte	lt
 8014370:	426d      	neglt	r5, r5
 8014372:	f04f 38ff 	movlt.w	r8, #4294967295
 8014376:	f04f 0801 	movge.w	r8, #1
 801437a:	f7ff ff5d 	bl	8014238 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801437e:	ab03      	add	r3, sp, #12
 8014380:	463a      	mov	r2, r7
 8014382:	e9cd 5300 	strd	r5, r3, [sp]
 8014386:	4603      	mov	r3, r0
 8014388:	4648      	mov	r0, r9
 801438a:	f7ff ff73 	bl	8014274 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801438e:	6823      	ldr	r3, [r4, #0]
 8014390:	9a03      	ldr	r2, [sp, #12]
 8014392:	4546      	cmp	r6, r8
 8014394:	441a      	add	r2, r3
 8014396:	fb92 f3f5 	sdiv	r3, r2, r5
 801439a:	4418      	add	r0, r3
 801439c:	fb05 2313 	mls	r3, r5, r3, r2
 80143a0:	bf18      	it	ne
 80143a2:	4240      	negne	r0, r0
 80143a4:	1c72      	adds	r2, r6, #1
 80143a6:	6023      	str	r3, [r4, #0]
 80143a8:	d105      	bne.n	80143b6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	f1c3 0200 	rsb	r2, r3, #0
 80143b0:	db0b      	blt.n	80143ca <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80143b2:	6022      	str	r2, [r4, #0]
 80143b4:	e006      	b.n	80143c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80143b6:	2e01      	cmp	r6, #1
 80143b8:	d104      	bne.n	80143c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	da02      	bge.n	80143c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80143be:	442b      	add	r3, r5
 80143c0:	3801      	subs	r0, #1
 80143c2:	6023      	str	r3, [r4, #0]
 80143c4:	b005      	add	sp, #20
 80143c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143ca:	3801      	subs	r0, #1
 80143cc:	1b52      	subs	r2, r2, r5
 80143ce:	e7f0      	b.n	80143b2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

080143d0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80143d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80143d4:	4c1c      	ldr	r4, [pc, #112]	@ (8014448 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80143d6:	4605      	mov	r5, r0
 80143d8:	6807      	ldr	r7, [r0, #0]
 80143da:	69a3      	ldr	r3, [r4, #24]
 80143dc:	b92b      	cbnz	r3, 80143ea <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80143de:	6840      	ldr	r0, [r0, #4]
 80143e0:	e9c5 7000 	strd	r7, r0, [r5]
 80143e4:	b004      	add	sp, #16
 80143e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ea:	f04f 0802 	mov.w	r8, #2
 80143ee:	68a2      	ldr	r2, [r4, #8]
 80143f0:	ae04      	add	r6, sp, #16
 80143f2:	6820      	ldr	r0, [r4, #0]
 80143f4:	fb93 f1f8 	sdiv	r1, r3, r8
 80143f8:	440a      	add	r2, r1
 80143fa:	69e1      	ldr	r1, [r4, #28]
 80143fc:	f846 2d04 	str.w	r2, [r6, #-4]!
 8014400:	463a      	mov	r2, r7
 8014402:	9600      	str	r6, [sp, #0]
 8014404:	f7ff ff98 	bl	8014338 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014408:	69a3      	ldr	r3, [r4, #24]
 801440a:	4607      	mov	r7, r0
 801440c:	686a      	ldr	r2, [r5, #4]
 801440e:	6a21      	ldr	r1, [r4, #32]
 8014410:	9600      	str	r6, [sp, #0]
 8014412:	6860      	ldr	r0, [r4, #4]
 8014414:	f7ff ff90 	bl	8014338 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014418:	69a3      	ldr	r3, [r4, #24]
 801441a:	6962      	ldr	r2, [r4, #20]
 801441c:	4407      	add	r7, r0
 801441e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014420:	9600      	str	r6, [sp, #0]
 8014422:	68e0      	ldr	r0, [r4, #12]
 8014424:	fb93 f8f8 	sdiv	r8, r3, r8
 8014428:	4442      	add	r2, r8
 801442a:	9203      	str	r2, [sp, #12]
 801442c:	682a      	ldr	r2, [r5, #0]
 801442e:	f7ff ff83 	bl	8014338 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014432:	4680      	mov	r8, r0
 8014434:	9600      	str	r6, [sp, #0]
 8014436:	69a3      	ldr	r3, [r4, #24]
 8014438:	686a      	ldr	r2, [r5, #4]
 801443a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801443c:	6920      	ldr	r0, [r4, #16]
 801443e:	f7ff ff7b 	bl	8014338 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014442:	4440      	add	r0, r8
 8014444:	e7cc      	b.n	80143e0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8014446:	bf00      	nop
 8014448:	240255e0 	.word	0x240255e0

0801444c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801444c:	4b07      	ldr	r3, [pc, #28]	@ (801446c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801444e:	781b      	ldrb	r3, [r3, #0]
 8014450:	2b01      	cmp	r3, #1
 8014452:	d109      	bne.n	8014468 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8014454:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014458:	f9b0 2000 	ldrsh.w	r2, [r0]
 801445c:	8003      	strh	r3, [r0, #0]
 801445e:	4b04      	ldr	r3, [pc, #16]	@ (8014470 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8014460:	881b      	ldrh	r3, [r3, #0]
 8014462:	3b01      	subs	r3, #1
 8014464:	1a9b      	subs	r3, r3, r2
 8014466:	800b      	strh	r3, [r1, #0]
 8014468:	4770      	bx	lr
 801446a:	bf00      	nop
 801446c:	240255c4 	.word	0x240255c4
 8014470:	240255c0 	.word	0x240255c0

08014474 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8014474:	4b07      	ldr	r3, [pc, #28]	@ (8014494 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8014476:	b510      	push	{r4, lr}
 8014478:	781b      	ldrb	r3, [r3, #0]
 801447a:	2b01      	cmp	r3, #1
 801447c:	d108      	bne.n	8014490 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801447e:	4b06      	ldr	r3, [pc, #24]	@ (8014498 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8014480:	880c      	ldrh	r4, [r1, #0]
 8014482:	881b      	ldrh	r3, [r3, #0]
 8014484:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014488:	3b01      	subs	r3, #1
 801448a:	1b1b      	subs	r3, r3, r4
 801448c:	8003      	strh	r3, [r0, #0]
 801448e:	800a      	strh	r2, [r1, #0]
 8014490:	bd10      	pop	{r4, pc}
 8014492:	bf00      	nop
 8014494:	240255c4 	.word	0x240255c4
 8014498:	240255c0 	.word	0x240255c0

0801449c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801449c:	4b0a      	ldr	r3, [pc, #40]	@ (80144c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801449e:	b510      	push	{r4, lr}
 80144a0:	781b      	ldrb	r3, [r3, #0]
 80144a2:	2b01      	cmp	r3, #1
 80144a4:	d10e      	bne.n	80144c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80144a6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80144aa:	8843      	ldrh	r3, [r0, #2]
 80144ac:	f9b0 4000 	ldrsh.w	r4, [r0]
 80144b0:	18ca      	adds	r2, r1, r3
 80144b2:	4b06      	ldr	r3, [pc, #24]	@ (80144cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80144b4:	8044      	strh	r4, [r0, #2]
 80144b6:	881b      	ldrh	r3, [r3, #0]
 80144b8:	1a9b      	subs	r3, r3, r2
 80144ba:	8003      	strh	r3, [r0, #0]
 80144bc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80144c0:	8081      	strh	r1, [r0, #4]
 80144c2:	80c3      	strh	r3, [r0, #6]
 80144c4:	bd10      	pop	{r4, pc}
 80144c6:	bf00      	nop
 80144c8:	240255c4 	.word	0x240255c4
 80144cc:	240255c0 	.word	0x240255c0

080144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80144d0:	4b08      	ldr	r3, [pc, #32]	@ (80144f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80144d2:	781b      	ldrb	r3, [r3, #0]
 80144d4:	2b01      	cmp	r3, #1
 80144d6:	d10c      	bne.n	80144f2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80144d8:	8803      	ldrh	r3, [r0, #0]
 80144da:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80144de:	8842      	ldrh	r2, [r0, #2]
 80144e0:	8002      	strh	r2, [r0, #0]
 80144e2:	185a      	adds	r2, r3, r1
 80144e4:	4b04      	ldr	r3, [pc, #16]	@ (80144f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80144e6:	881b      	ldrh	r3, [r3, #0]
 80144e8:	1a9b      	subs	r3, r3, r2
 80144ea:	8043      	strh	r3, [r0, #2]
 80144ec:	88c3      	ldrh	r3, [r0, #6]
 80144ee:	80c1      	strh	r1, [r0, #6]
 80144f0:	8083      	strh	r3, [r0, #4]
 80144f2:	4770      	bx	lr
 80144f4:	240255c4 	.word	0x240255c4
 80144f8:	240255c0 	.word	0x240255c0

080144fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80144fc:	4b07      	ldr	r3, [pc, #28]	@ (801451c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80144fe:	b510      	push	{r4, lr}
 8014500:	781b      	ldrb	r3, [r3, #0]
 8014502:	2b01      	cmp	r3, #1
 8014504:	d108      	bne.n	8014518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8014506:	f9b1 3000 	ldrsh.w	r3, [r1]
 801450a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801450e:	8003      	strh	r3, [r0, #0]
 8014510:	8893      	ldrh	r3, [r2, #4]
 8014512:	3b01      	subs	r3, #1
 8014514:	1b1b      	subs	r3, r3, r4
 8014516:	800b      	strh	r3, [r1, #0]
 8014518:	bd10      	pop	{r4, pc}
 801451a:	bf00      	nop
 801451c:	240255c4 	.word	0x240255c4

08014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8014520:	4b0a      	ldr	r3, [pc, #40]	@ (801454c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8014522:	460a      	mov	r2, r1
 8014524:	b510      	push	{r4, lr}
 8014526:	781b      	ldrb	r3, [r3, #0]
 8014528:	2b01      	cmp	r3, #1
 801452a:	d10d      	bne.n	8014548 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801452c:	8881      	ldrh	r1, [r0, #4]
 801452e:	8803      	ldrh	r3, [r0, #0]
 8014530:	440b      	add	r3, r1
 8014532:	4601      	mov	r1, r0
 8014534:	3b01      	subs	r3, #1
 8014536:	f821 3b02 	strh.w	r3, [r1], #2
 801453a:	f7ff ffdf 	bl	80144fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801453e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014542:	88c2      	ldrh	r2, [r0, #6]
 8014544:	80c3      	strh	r3, [r0, #6]
 8014546:	8082      	strh	r2, [r0, #4]
 8014548:	bd10      	pop	{r4, pc}
 801454a:	bf00      	nop
 801454c:	240255c4 	.word	0x240255c4

08014550 <_ZN8touchgfx11Application13requestRedrawEv>:
 8014550:	4b06      	ldr	r3, [pc, #24]	@ (801456c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8014552:	2100      	movs	r1, #0
 8014554:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014558:	4b05      	ldr	r3, [pc, #20]	@ (8014570 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801455a:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801455e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014562:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8014566:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801456a:	4770      	bx	lr
 801456c:	240255c0 	.word	0x240255c0
 8014570:	240255c2 	.word	0x240255c2

08014574 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8014574:	4b03      	ldr	r3, [pc, #12]	@ (8014584 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8014576:	6818      	ldr	r0, [r3, #0]
 8014578:	b110      	cbz	r0, 8014580 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801457a:	6803      	ldr	r3, [r0, #0]
 801457c:	699b      	ldr	r3, [r3, #24]
 801457e:	4718      	bx	r3
 8014580:	4770      	bx	lr
 8014582:	bf00      	nop
 8014584:	24025610 	.word	0x24025610

08014588 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8014588:	4770      	bx	lr
	...

0801458c <_ZN8touchgfx11Application4drawEv>:
 801458c:	4b09      	ldr	r3, [pc, #36]	@ (80145b4 <_ZN8touchgfx11Application4drawEv+0x28>)
 801458e:	b507      	push	{r0, r1, r2, lr}
 8014590:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014594:	2100      	movs	r1, #0
 8014596:	4b08      	ldr	r3, [pc, #32]	@ (80145b8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8014598:	9100      	str	r1, [sp, #0]
 801459a:	4669      	mov	r1, sp
 801459c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145a0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80145a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80145a8:	6803      	ldr	r3, [r0, #0]
 80145aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80145ac:	4798      	blx	r3
 80145ae:	b003      	add	sp, #12
 80145b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80145b4:	240255c0 	.word	0x240255c0
 80145b8:	240255c2 	.word	0x240255c2

080145bc <_ZN8touchgfx11Application10invalidateEv>:
 80145bc:	4b09      	ldr	r3, [pc, #36]	@ (80145e4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80145be:	b082      	sub	sp, #8
 80145c0:	2100      	movs	r1, #0
 80145c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80145c6:	4b08      	ldr	r3, [pc, #32]	@ (80145e8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80145c8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80145cc:	aa02      	add	r2, sp, #8
 80145ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145d2:	9100      	str	r1, [sp, #0]
 80145d4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80145d8:	6803      	ldr	r3, [r0, #0]
 80145da:	e912 0006 	ldmdb	r2, {r1, r2}
 80145de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80145e0:	b002      	add	sp, #8
 80145e2:	4718      	bx	r3
 80145e4:	240255c0 	.word	0x240255c0
 80145e8:	240255c2 	.word	0x240255c2

080145ec <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80145ec:	4b03      	ldr	r3, [pc, #12]	@ (80145fc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80145ee:	6818      	ldr	r0, [r3, #0]
 80145f0:	b110      	cbz	r0, 80145f8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80145f2:	6803      	ldr	r3, [r0, #0]
 80145f4:	69db      	ldr	r3, [r3, #28]
 80145f6:	4718      	bx	r3
 80145f8:	4770      	bx	lr
 80145fa:	bf00      	nop
 80145fc:	24025610 	.word	0x24025610

08014600 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8014600:	4b03      	ldr	r3, [pc, #12]	@ (8014610 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8014602:	6818      	ldr	r0, [r3, #0]
 8014604:	b110      	cbz	r0, 801460c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8014606:	6803      	ldr	r3, [r0, #0]
 8014608:	6a1b      	ldr	r3, [r3, #32]
 801460a:	4718      	bx	r3
 801460c:	4770      	bx	lr
 801460e:	bf00      	nop
 8014610:	24025610 	.word	0x24025610

08014614 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8014614:	2300      	movs	r3, #0
 8014616:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801461a:	4770      	bx	lr

0801461c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801461c:	4b03      	ldr	r3, [pc, #12]	@ (801462c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801461e:	6818      	ldr	r0, [r3, #0]
 8014620:	b110      	cbz	r0, 8014628 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8014622:	6803      	ldr	r3, [r0, #0]
 8014624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014626:	4718      	bx	r3
 8014628:	4770      	bx	lr
 801462a:	bf00      	nop
 801462c:	24025610 	.word	0x24025610

08014630 <_ZN8touchgfx11ApplicationD1Ev>:
 8014630:	4770      	bx	lr

08014632 <_ZN8touchgfx11ApplicationD0Ev>:
 8014632:	b510      	push	{r4, lr}
 8014634:	4604      	mov	r4, r0
 8014636:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 801463a:	f00e fcbe 	bl	8022fba <_ZdlPvj>
 801463e:	4620      	mov	r0, r4
 8014640:	bd10      	pop	{r4, pc}

08014642 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8014642:	b510      	push	{r4, lr}
 8014644:	f9b1 4000 	ldrsh.w	r4, [r1]
 8014648:	888a      	ldrh	r2, [r1, #4]
 801464a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801464e:	4422      	add	r2, r4
 8014650:	b212      	sxth	r2, r2
 8014652:	4293      	cmp	r3, r2
 8014654:	da15      	bge.n	8014682 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014656:	8882      	ldrh	r2, [r0, #4]
 8014658:	4413      	add	r3, r2
 801465a:	b21b      	sxth	r3, r3
 801465c:	429c      	cmp	r4, r3
 801465e:	da10      	bge.n	8014682 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014660:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8014664:	88c9      	ldrh	r1, [r1, #6]
 8014666:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801466a:	4419      	add	r1, r3
 801466c:	b209      	sxth	r1, r1
 801466e:	428a      	cmp	r2, r1
 8014670:	da07      	bge.n	8014682 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014672:	88c0      	ldrh	r0, [r0, #6]
 8014674:	4410      	add	r0, r2
 8014676:	b200      	sxth	r0, r0
 8014678:	4283      	cmp	r3, r0
 801467a:	bfac      	ite	ge
 801467c:	2000      	movge	r0, #0
 801467e:	2001      	movlt	r0, #1
 8014680:	bd10      	pop	{r4, pc}
 8014682:	2000      	movs	r0, #0
 8014684:	e7fc      	b.n	8014680 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08014686 <_ZN8touchgfx4Rect10restrictToEss>:
 8014686:	f9b0 3000 	ldrsh.w	r3, [r0]
 801468a:	2b00      	cmp	r3, #0
 801468c:	b510      	push	{r4, lr}
 801468e:	da04      	bge.n	801469a <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8014690:	8884      	ldrh	r4, [r0, #4]
 8014692:	4423      	add	r3, r4
 8014694:	8083      	strh	r3, [r0, #4]
 8014696:	2300      	movs	r3, #0
 8014698:	8003      	strh	r3, [r0, #0]
 801469a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801469e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80146a2:	1b09      	subs	r1, r1, r4
 80146a4:	428b      	cmp	r3, r1
 80146a6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80146aa:	bfc8      	it	gt
 80146ac:	8081      	strhgt	r1, [r0, #4]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	da04      	bge.n	80146bc <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80146b2:	88c1      	ldrh	r1, [r0, #6]
 80146b4:	440b      	add	r3, r1
 80146b6:	80c3      	strh	r3, [r0, #6]
 80146b8:	2300      	movs	r3, #0
 80146ba:	8043      	strh	r3, [r0, #2]
 80146bc:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80146c0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80146c4:	1a52      	subs	r2, r2, r1
 80146c6:	4293      	cmp	r3, r2
 80146c8:	bfc8      	it	gt
 80146ca:	80c2      	strhgt	r2, [r0, #6]
 80146cc:	bd10      	pop	{r4, pc}
	...

080146d0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80146d0:	4b10      	ldr	r3, [pc, #64]	@ (8014714 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80146d2:	b510      	push	{r4, lr}
 80146d4:	460c      	mov	r4, r1
 80146d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80146da:	4b0f      	ldr	r3, [pc, #60]	@ (8014718 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80146dc:	4620      	mov	r0, r4
 80146de:	f9b3 1000 	ldrsh.w	r1, [r3]
 80146e2:	f7ff ffd0 	bl	8014686 <_ZN8touchgfx4Rect10restrictToEss>
 80146e6:	4b0d      	ldr	r3, [pc, #52]	@ (801471c <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80146e8:	6818      	ldr	r0, [r3, #0]
 80146ea:	b190      	cbz	r0, 8014712 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80146ec:	6803      	ldr	r3, [r0, #0]
 80146ee:	4621      	mov	r1, r4
 80146f0:	689b      	ldr	r3, [r3, #8]
 80146f2:	4798      	blx	r3
 80146f4:	4b0a      	ldr	r3, [pc, #40]	@ (8014720 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80146f6:	6818      	ldr	r0, [r3, #0]
 80146f8:	b118      	cbz	r0, 8014702 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80146fa:	6803      	ldr	r3, [r0, #0]
 80146fc:	4621      	mov	r1, r4
 80146fe:	689b      	ldr	r3, [r3, #8]
 8014700:	4798      	blx	r3
 8014702:	4b08      	ldr	r3, [pc, #32]	@ (8014724 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8014704:	4621      	mov	r1, r4
 8014706:	6818      	ldr	r0, [r3, #0]
 8014708:	6803      	ldr	r3, [r0, #0]
 801470a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801470e:	69db      	ldr	r3, [r3, #28]
 8014710:	4718      	bx	r3
 8014712:	bd10      	pop	{r4, pc}
 8014714:	240255c2 	.word	0x240255c2
 8014718:	240255c0 	.word	0x240255c0
 801471c:	24025610 	.word	0x24025610
 8014720:	2402560c 	.word	0x2402560c
 8014724:	240255cc 	.word	0x240255cc

08014728 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8014728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801472a:	4606      	mov	r6, r0
 801472c:	4608      	mov	r0, r1
 801472e:	460f      	mov	r7, r1
 8014730:	f7fa fe53 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 8014734:	b9e8      	cbnz	r0, 8014772 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014736:	f9b7 5000 	ldrsh.w	r5, [r7]
 801473a:	f9b6 4000 	ldrsh.w	r4, [r6]
 801473e:	42a5      	cmp	r5, r4
 8014740:	db17      	blt.n	8014772 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014742:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8014746:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801474a:	429a      	cmp	r2, r3
 801474c:	db11      	blt.n	8014772 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801474e:	88b9      	ldrh	r1, [r7, #4]
 8014750:	440d      	add	r5, r1
 8014752:	88b1      	ldrh	r1, [r6, #4]
 8014754:	440c      	add	r4, r1
 8014756:	b22d      	sxth	r5, r5
 8014758:	b224      	sxth	r4, r4
 801475a:	42a5      	cmp	r5, r4
 801475c:	dc09      	bgt.n	8014772 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801475e:	88f8      	ldrh	r0, [r7, #6]
 8014760:	4410      	add	r0, r2
 8014762:	88f2      	ldrh	r2, [r6, #6]
 8014764:	4413      	add	r3, r2
 8014766:	b200      	sxth	r0, r0
 8014768:	b21b      	sxth	r3, r3
 801476a:	4298      	cmp	r0, r3
 801476c:	bfcc      	ite	gt
 801476e:	2000      	movgt	r0, #0
 8014770:	2001      	movle	r0, #1
 8014772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014774 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8014774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014776:	4604      	mov	r4, r0
 8014778:	4608      	mov	r0, r1
 801477a:	460d      	mov	r5, r1
 801477c:	f7fa fe2d 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 8014780:	b978      	cbnz	r0, 80147a2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8014782:	4620      	mov	r0, r4
 8014784:	f7fa fe29 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 8014788:	f9b5 6000 	ldrsh.w	r6, [r5]
 801478c:	b150      	cbz	r0, 80147a4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801478e:	8026      	strh	r6, [r4, #0]
 8014790:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8014794:	8063      	strh	r3, [r4, #2]
 8014796:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801479a:	80a3      	strh	r3, [r4, #4]
 801479c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80147a0:	80e3      	strh	r3, [r4, #6]
 80147a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147a4:	f9b4 1000 	ldrsh.w	r1, [r4]
 80147a8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80147ac:	42b1      	cmp	r1, r6
 80147ae:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80147b2:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80147b6:	460f      	mov	r7, r1
 80147b8:	88ed      	ldrh	r5, [r5, #6]
 80147ba:	bfa8      	it	ge
 80147bc:	4637      	movge	r7, r6
 80147be:	4293      	cmp	r3, r2
 80147c0:	4618      	mov	r0, r3
 80147c2:	4466      	add	r6, ip
 80147c4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80147c8:	bfa8      	it	ge
 80147ca:	4610      	movge	r0, r2
 80147cc:	442a      	add	r2, r5
 80147ce:	88e5      	ldrh	r5, [r4, #6]
 80147d0:	4461      	add	r1, ip
 80147d2:	b236      	sxth	r6, r6
 80147d4:	8027      	strh	r7, [r4, #0]
 80147d6:	442b      	add	r3, r5
 80147d8:	b209      	sxth	r1, r1
 80147da:	b212      	sxth	r2, r2
 80147dc:	8060      	strh	r0, [r4, #2]
 80147de:	b21b      	sxth	r3, r3
 80147e0:	428e      	cmp	r6, r1
 80147e2:	bfac      	ite	ge
 80147e4:	ebc7 0106 	rsbge	r1, r7, r6
 80147e8:	ebc7 0101 	rsblt	r1, r7, r1
 80147ec:	429a      	cmp	r2, r3
 80147ee:	bfac      	ite	ge
 80147f0:	ebc0 0202 	rsbge	r2, r0, r2
 80147f4:	ebc0 0203 	rsblt	r2, r0, r3
 80147f8:	80a1      	strh	r1, [r4, #4]
 80147fa:	80e2      	strh	r2, [r4, #6]
 80147fc:	e7d1      	b.n	80147a2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08014800 <_ZN8touchgfx11Application11getInstanceEv>:
 8014800:	4b01      	ldr	r3, [pc, #4]	@ (8014808 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8014802:	6818      	ldr	r0, [r3, #0]
 8014804:	4770      	bx	lr
 8014806:	bf00      	nop
 8014808:	24025620 	.word	0x24025620

0801480c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801480c:	2300      	movs	r3, #0
 801480e:	b510      	push	{r4, lr}
 8014810:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8014814:	4604      	mov	r4, r0
 8014816:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801481a:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801481e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8014822:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8014826:	429a      	cmp	r2, r3
 8014828:	d90e      	bls.n	8014848 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801482a:	18e2      	adds	r2, r4, r3
 801482c:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8014830:	b122      	cbz	r2, 801483c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8014832:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8014836:	6803      	ldr	r3, [r0, #0]
 8014838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801483a:	4798      	blx	r3
 801483c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8014840:	3301      	adds	r3, #1
 8014842:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8014846:	e7ea      	b.n	801481e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8014848:	bd10      	pop	{r4, pc}

0801484a <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801484a:	2300      	movs	r3, #0
 801484c:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8014850:	30a4      	adds	r0, #164	@ 0xa4
 8014852:	f820 3c24 	strh.w	r3, [r0, #-36]
 8014856:	f802 3b01 	strb.w	r3, [r2], #1
 801485a:	4282      	cmp	r2, r0
 801485c:	d1fb      	bne.n	8014856 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801485e:	4770      	bx	lr

08014860 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8014860:	b570      	push	{r4, r5, r6, lr}
 8014862:	4c0b      	ldr	r4, [pc, #44]	@ (8014890 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8014864:	4605      	mov	r5, r0
 8014866:	460e      	mov	r6, r1
 8014868:	6820      	ldr	r0, [r4, #0]
 801486a:	b110      	cbz	r0, 8014872 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801486c:	6803      	ldr	r3, [r0, #0]
 801486e:	695b      	ldr	r3, [r3, #20]
 8014870:	4798      	blx	r3
 8014872:	1d28      	adds	r0, r5, #4
 8014874:	f7ff ffe9 	bl	801484a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8014878:	6026      	str	r6, [r4, #0]
 801487a:	6833      	ldr	r3, [r6, #0]
 801487c:	4630      	mov	r0, r6
 801487e:	68db      	ldr	r3, [r3, #12]
 8014880:	4798      	blx	r3
 8014882:	682b      	ldr	r3, [r5, #0]
 8014884:	4628      	mov	r0, r5
 8014886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014888:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801488c:	4718      	bx	r3
 801488e:	bf00      	nop
 8014890:	24025610 	.word	0x24025610

08014894 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8014894:	2300      	movs	r3, #0
 8014896:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801489a:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801489e:	461a      	mov	r2, r3
 80148a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148a2:	461c      	mov	r4, r3
 80148a4:	461d      	mov	r5, r3
 80148a6:	459c      	cmp	ip, r3
 80148a8:	dd1a      	ble.n	80148e0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80148aa:	18c6      	adds	r6, r0, r3
 80148ac:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 80148b0:	b16e      	cbz	r6, 80148ce <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80148b2:	429a      	cmp	r2, r3
 80148b4:	d008      	beq.n	80148c8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80148b6:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 80148ba:	fa1f fe82 	uxth.w	lr, r2
 80148be:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 80148c2:	1887      	adds	r7, r0, r2
 80148c4:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 80148c8:	3201      	adds	r2, #1
 80148ca:	3301      	adds	r3, #1
 80148cc:	e7eb      	b.n	80148a6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 80148ce:	4299      	cmp	r1, r3
 80148d0:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 80148d4:	bfa8      	it	ge
 80148d6:	3501      	addge	r5, #1
 80148d8:	429e      	cmp	r6, r3
 80148da:	bfc8      	it	gt
 80148dc:	3401      	addgt	r4, #1
 80148de:	e7f4      	b.n	80148ca <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80148e0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 80148e4:	1b49      	subs	r1, r1, r5
 80148e6:	1b1b      	subs	r3, r3, r4
 80148e8:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 80148ec:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80148f0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80148f4:	4293      	cmp	r3, r2
 80148f6:	dd03      	ble.n	8014900 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80148f8:	3b01      	subs	r3, #1
 80148fa:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 80148fe:	e7f7      	b.n	80148f0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8014900:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08014904 <_ZN8touchgfx11Application15handleTickEventEv>:
 8014904:	b570      	push	{r4, r5, r6, lr}
 8014906:	4d16      	ldr	r5, [pc, #88]	@ (8014960 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8014908:	4604      	mov	r4, r0
 801490a:	6828      	ldr	r0, [r5, #0]
 801490c:	b140      	cbz	r0, 8014920 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801490e:	7a03      	ldrb	r3, [r0, #8]
 8014910:	b933      	cbnz	r3, 8014920 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8014912:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8014916:	6803      	ldr	r3, [r0, #0]
 8014918:	689b      	ldr	r3, [r3, #8]
 801491a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801491e:	4718      	bx	r3
 8014920:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8014924:	4e0f      	ldr	r6, [pc, #60]	@ (8014964 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8014926:	b973      	cbnz	r3, 8014946 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014928:	b168      	cbz	r0, 8014946 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801492a:	7a03      	ldrb	r3, [r0, #8]
 801492c:	b15b      	cbz	r3, 8014946 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801492e:	6830      	ldr	r0, [r6, #0]
 8014930:	b110      	cbz	r0, 8014938 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8014932:	6803      	ldr	r3, [r0, #0]
 8014934:	691b      	ldr	r3, [r3, #16]
 8014936:	4798      	blx	r3
 8014938:	6828      	ldr	r0, [r5, #0]
 801493a:	6803      	ldr	r3, [r0, #0]
 801493c:	68db      	ldr	r3, [r3, #12]
 801493e:	4798      	blx	r3
 8014940:	2301      	movs	r3, #1
 8014942:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8014946:	3404      	adds	r4, #4
 8014948:	4620      	mov	r0, r4
 801494a:	f7ff ff5f 	bl	801480c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801494e:	4620      	mov	r0, r4
 8014950:	f7ff ffa0 	bl	8014894 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8014954:	6830      	ldr	r0, [r6, #0]
 8014956:	b110      	cbz	r0, 801495e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8014958:	6803      	ldr	r3, [r0, #0]
 801495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801495c:	e7dd      	b.n	801491a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801495e:	bd70      	pop	{r4, r5, r6, pc}
 8014960:	24025614 	.word	0x24025614
 8014964:	24025610 	.word	0x24025610

08014968 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8014968:	4603      	mov	r3, r0
 801496a:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801496e:	2200      	movs	r2, #0
 8014970:	801a      	strh	r2, [r3, #0]
 8014972:	3308      	adds	r3, #8
 8014974:	f823 2c06 	strh.w	r2, [r3, #-6]
 8014978:	f823 2c04 	strh.w	r2, [r3, #-4]
 801497c:	f823 2c02 	strh.w	r2, [r3, #-2]
 8014980:	428b      	cmp	r3, r1
 8014982:	d1f5      	bne.n	8014970 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8014984:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8014988:	4770      	bx	lr
	...

0801498c <_ZN8touchgfx11ApplicationC1Ev>:
 801498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801498e:	4b1d      	ldr	r3, [pc, #116]	@ (8014a04 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8014990:	4606      	mov	r6, r0
 8014992:	4604      	mov	r4, r0
 8014994:	2500      	movs	r5, #0
 8014996:	f846 3b04 	str.w	r3, [r6], #4
 801499a:	22a8      	movs	r2, #168	@ 0xa8
 801499c:	2100      	movs	r1, #0
 801499e:	4630      	mov	r0, r6
 80149a0:	f00f f91e 	bl	8023be0 <memset>
 80149a4:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 80149a8:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80149ac:	4f16      	ldr	r7, [pc, #88]	@ (8014a08 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80149ae:	f7ff ffdb 	bl	8014968 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80149b2:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80149b6:	f7ff ffd7 	bl	8014968 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80149ba:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 80149be:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 80149c2:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 80149c6:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 80149ca:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 80149ce:	490f      	ldr	r1, [pc, #60]	@ (8014a0c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80149d0:	480f      	ldr	r0, [pc, #60]	@ (8014a10 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80149d2:	f00d fc81 	bl	80222d8 <CRC_Lock>
 80149d6:	4b0f      	ldr	r3, [pc, #60]	@ (8014a14 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80149d8:	b158      	cbz	r0, 80149f2 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80149da:	801d      	strh	r5, [r3, #0]
 80149dc:	2300      	movs	r3, #0
 80149de:	4a0e      	ldr	r2, [pc, #56]	@ (8014a18 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80149e0:	4630      	mov	r0, r6
 80149e2:	6013      	str	r3, [r2, #0]
 80149e4:	4a0d      	ldr	r2, [pc, #52]	@ (8014a1c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80149e6:	603b      	str	r3, [r7, #0]
 80149e8:	6013      	str	r3, [r2, #0]
 80149ea:	f7ff ff2e 	bl	801484a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80149ee:	4620      	mov	r0, r4
 80149f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80149f6:	2002      	movs	r0, #2
 80149f8:	801a      	strh	r2, [r3, #0]
 80149fa:	6038      	str	r0, [r7, #0]
 80149fc:	f001 ff42 	bl	8016884 <_ZN8touchgfx6Screen4drawEv>
 8014a00:	e7ec      	b.n	80149dc <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8014a02:	bf00      	nop
 8014a04:	08027458 	.word	0x08027458
 8014a08:	24025610 	.word	0x24025610
 8014a0c:	b5e8b5cd 	.word	0xb5e8b5cd
 8014a10:	f407a5c2 	.word	0xf407a5c2
 8014a14:	2400007c 	.word	0x2400007c
 8014a18:	24025620 	.word	0x24025620
 8014a1c:	24025614 	.word	0x24025614

08014a20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8014a20:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8014a24:	3b01      	subs	r3, #1
 8014a26:	b29b      	uxth	r3, r3
 8014a28:	428b      	cmp	r3, r1
 8014a2a:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8014a2e:	b510      	push	{r4, lr}
 8014a30:	d908      	bls.n	8014a44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8014a32:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8014a36:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8014a3a:	681a      	ldr	r2, [r3, #0]
 8014a3c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8014a40:	685a      	ldr	r2, [r3, #4]
 8014a42:	6062      	str	r2, [r4, #4]
 8014a44:	bd10      	pop	{r4, pc}
	...

08014a48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8014a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a4c:	b08f      	sub	sp, #60	@ 0x3c
 8014a4e:	4b92      	ldr	r3, [pc, #584]	@ (8014c98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 8014a50:	4683      	mov	fp, r0
 8014a52:	ac0a      	add	r4, sp, #40	@ 0x28
 8014a54:	e884 0006 	stmia.w	r4, {r1, r2}
 8014a58:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014a5c:	4620      	mov	r0, r4
 8014a5e:	4b8f      	ldr	r3, [pc, #572]	@ (8014c9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 8014a60:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014a64:	f7ff fe0f 	bl	8014686 <_ZN8touchgfx4Rect10restrictToEss>
 8014a68:	4620      	mov	r0, r4
 8014a6a:	f7fa fcb6 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 8014a6e:	2800      	cmp	r0, #0
 8014a70:	d170      	bne.n	8014b54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8014a72:	4b8b      	ldr	r3, [pc, #556]	@ (8014ca0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014a7a:	2b02      	cmp	r3, #2
 8014a7c:	d06a      	beq.n	8014b54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8014a7e:	9403      	str	r4, [sp, #12]
 8014a80:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8014a84:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8014a88:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8014a8c:	9301      	str	r3, [sp, #4]
 8014a8e:	35a4      	adds	r5, #164	@ 0xa4
 8014a90:	b15c      	cbz	r4, 8014aaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8014a92:	4629      	mov	r1, r5
 8014a94:	9803      	ldr	r0, [sp, #12]
 8014a96:	f7ff fe47 	bl	8014728 <_ZNK8touchgfx4Rect8includesERKS0_>
 8014a9a:	3c01      	subs	r4, #1
 8014a9c:	b118      	cbz	r0, 8014aa6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8014a9e:	b2a1      	uxth	r1, r4
 8014aa0:	9801      	ldr	r0, [sp, #4]
 8014aa2:	f7ff ffbd 	bl	8014a20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014aa6:	3d08      	subs	r5, #8
 8014aa8:	e7f2      	b.n	8014a90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8014aaa:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8014aae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014ab2:	f8cd a010 	str.w	sl, [sp, #16]
 8014ab6:	9302      	str	r3, [sp, #8]
 8014ab8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014abc:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8014ac0:	9306      	str	r3, [sp, #24]
 8014ac2:	445c      	add	r4, fp
 8014ac4:	2500      	movs	r5, #0
 8014ac6:	4626      	mov	r6, r4
 8014ac8:	f8cd a014 	str.w	sl, [sp, #20]
 8014acc:	462f      	mov	r7, r5
 8014ace:	9b05      	ldr	r3, [sp, #20]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d073      	beq.n	8014bbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 8014ad4:	9903      	ldr	r1, [sp, #12]
 8014ad6:	4630      	mov	r0, r6
 8014ad8:	f7ff fdb3 	bl	8014642 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014adc:	b350      	cbz	r0, 8014b34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8014ade:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8014ae2:	f9b6 c000 	ldrsh.w	ip, [r6]
 8014ae6:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8014aea:	45e6      	cmp	lr, ip
 8014aec:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8014af0:	db33      	blt.n	8014b5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 8014af2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8014af6:	88b3      	ldrh	r3, [r6, #4]
 8014af8:	4472      	add	r2, lr
 8014afa:	4463      	add	r3, ip
 8014afc:	b212      	sxth	r2, r2
 8014afe:	b21b      	sxth	r3, r3
 8014b00:	429a      	cmp	r2, r3
 8014b02:	dc2a      	bgt.n	8014b5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 8014b04:	fa1f f289 	uxth.w	r2, r9
 8014b08:	88f3      	ldrh	r3, [r6, #6]
 8014b0a:	45c8      	cmp	r8, r9
 8014b0c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8014b10:	4413      	add	r3, r2
 8014b12:	fa1f fc88 	uxth.w	ip, r8
 8014b16:	b29b      	uxth	r3, r3
 8014b18:	fa0f fe83 	sxth.w	lr, r3
 8014b1c:	db0f      	blt.n	8014b3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 8014b1e:	eba3 030c 	sub.w	r3, r3, ip
 8014b22:	1ac9      	subs	r1, r1, r3
 8014b24:	b209      	sxth	r1, r1
 8014b26:	2900      	cmp	r1, #0
 8014b28:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014b2c:	dd12      	ble.n	8014b54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8014b2e:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8014b32:	4605      	mov	r5, r0
 8014b34:	9b05      	ldr	r3, [sp, #20]
 8014b36:	3e08      	subs	r6, #8
 8014b38:	3b01      	subs	r3, #1
 8014b3a:	9305      	str	r3, [sp, #20]
 8014b3c:	e7c7      	b.n	8014ace <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 8014b3e:	4461      	add	r1, ip
 8014b40:	b209      	sxth	r1, r1
 8014b42:	4571      	cmp	r1, lr
 8014b44:	dc38      	bgt.n	8014bb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8014b46:	eba2 020c 	sub.w	r2, r2, ip
 8014b4a:	b212      	sxth	r2, r2
 8014b4c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8014b50:	2a00      	cmp	r2, #0
 8014b52:	dcee      	bgt.n	8014b32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8014b54:	b00f      	add	sp, #60	@ 0x3c
 8014b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b5a:	45c8      	cmp	r8, r9
 8014b5c:	db2c      	blt.n	8014bb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8014b5e:	88f3      	ldrh	r3, [r6, #6]
 8014b60:	4499      	add	r9, r3
 8014b62:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8014b66:	4498      	add	r8, r3
 8014b68:	fa0f f989 	sxth.w	r9, r9
 8014b6c:	fa0f f888 	sxth.w	r8, r8
 8014b70:	45c1      	cmp	r9, r8
 8014b72:	db21      	blt.n	8014bb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8014b74:	fa1f f28c 	uxth.w	r2, ip
 8014b78:	88b3      	ldrh	r3, [r6, #4]
 8014b7a:	45e6      	cmp	lr, ip
 8014b7c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8014b80:	4413      	add	r3, r2
 8014b82:	fa1f f88e 	uxth.w	r8, lr
 8014b86:	b29b      	uxth	r3, r3
 8014b88:	fa0f f983 	sxth.w	r9, r3
 8014b8c:	db0a      	blt.n	8014ba4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 8014b8e:	eba3 0308 	sub.w	r3, r3, r8
 8014b92:	1ac9      	subs	r1, r1, r3
 8014b94:	b209      	sxth	r1, r1
 8014b96:	2900      	cmp	r1, #0
 8014b98:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8014b9c:	ddda      	ble.n	8014b54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8014b9e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8014ba2:	e7c6      	b.n	8014b32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8014ba4:	4441      	add	r1, r8
 8014ba6:	b209      	sxth	r1, r1
 8014ba8:	4549      	cmp	r1, r9
 8014baa:	dc05      	bgt.n	8014bb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8014bac:	eba2 0208 	sub.w	r2, r2, r8
 8014bb0:	b212      	sxth	r2, r2
 8014bb2:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8014bb6:	e7cb      	b.n	8014b50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 8014bb8:	4607      	mov	r7, r0
 8014bba:	e7bb      	b.n	8014b34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8014bbc:	2d00      	cmp	r5, #0
 8014bbe:	d181      	bne.n	8014ac4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 8014bc0:	2f00      	cmp	r7, #0
 8014bc2:	f000 81df 	beq.w	8014f84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8014bc6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8014bca:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8014bce:	b2b3      	uxth	r3, r6
 8014bd0:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8014bd4:	9305      	str	r3, [sp, #20]
 8014bd6:	9a05      	ldr	r2, [sp, #20]
 8014bd8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8014bdc:	4413      	add	r3, r2
 8014bde:	b2ba      	uxth	r2, r7
 8014be0:	4492      	add	sl, r2
 8014be2:	b29b      	uxth	r3, r3
 8014be4:	fa1f fa8a 	uxth.w	sl, sl
 8014be8:	fa0f f883 	sxth.w	r8, r3
 8014bec:	fa0f f98a 	sxth.w	r9, sl
 8014bf0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8014bf4:	9b04      	ldr	r3, [sp, #16]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d054      	beq.n	8014ca4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 8014bfa:	9903      	ldr	r1, [sp, #12]
 8014bfc:	4620      	mov	r0, r4
 8014bfe:	f7ff fd20 	bl	8014642 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014c02:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014c06:	b1c0      	cbz	r0, 8014c3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014c08:	f9b4 e000 	ldrsh.w	lr, [r4]
 8014c0c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014c10:	4576      	cmp	r6, lr
 8014c12:	dc22      	bgt.n	8014c5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8014c14:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8014c18:	44f4      	add	ip, lr
 8014c1a:	fa0f fc8c 	sxth.w	ip, ip
 8014c1e:	45e0      	cmp	r8, ip
 8014c20:	db1b      	blt.n	8014c5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8014c22:	428f      	cmp	r7, r1
 8014c24:	fa1f fc81 	uxth.w	ip, r1
 8014c28:	88e1      	ldrh	r1, [r4, #6]
 8014c2a:	dc0d      	bgt.n	8014c48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 8014c2c:	ebaa 0c0c 	sub.w	ip, sl, ip
 8014c30:	f8a4 9002 	strh.w	r9, [r4, #2]
 8014c34:	eba1 010c 	sub.w	r1, r1, ip
 8014c38:	80e1      	strh	r1, [r4, #6]
 8014c3a:	4628      	mov	r0, r5
 8014c3c:	9904      	ldr	r1, [sp, #16]
 8014c3e:	3c08      	subs	r4, #8
 8014c40:	4605      	mov	r5, r0
 8014c42:	3901      	subs	r1, #1
 8014c44:	9104      	str	r1, [sp, #16]
 8014c46:	e7d3      	b.n	8014bf0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 8014c48:	4461      	add	r1, ip
 8014c4a:	b209      	sxth	r1, r1
 8014c4c:	4549      	cmp	r1, r9
 8014c4e:	dcf5      	bgt.n	8014c3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8014c50:	eba2 0c0c 	sub.w	ip, r2, ip
 8014c54:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014c58:	e7ef      	b.n	8014c3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014c5a:	428f      	cmp	r7, r1
 8014c5c:	dcee      	bgt.n	8014c3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8014c5e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8014c62:	4461      	add	r1, ip
 8014c64:	b209      	sxth	r1, r1
 8014c66:	4589      	cmp	r9, r1
 8014c68:	dbe8      	blt.n	8014c3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8014c6a:	4576      	cmp	r6, lr
 8014c6c:	fa1f fc8e 	uxth.w	ip, lr
 8014c70:	88a1      	ldrh	r1, [r4, #4]
 8014c72:	dc07      	bgt.n	8014c84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 8014c74:	eba3 0c0c 	sub.w	ip, r3, ip
 8014c78:	f8a4 8000 	strh.w	r8, [r4]
 8014c7c:	eba1 010c 	sub.w	r1, r1, ip
 8014c80:	80a1      	strh	r1, [r4, #4]
 8014c82:	e7da      	b.n	8014c3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014c84:	4461      	add	r1, ip
 8014c86:	b209      	sxth	r1, r1
 8014c88:	4588      	cmp	r8, r1
 8014c8a:	dbd7      	blt.n	8014c3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8014c8c:	9905      	ldr	r1, [sp, #20]
 8014c8e:	eba1 0c0c 	sub.w	ip, r1, ip
 8014c92:	f8a4 c004 	strh.w	ip, [r4, #4]
 8014c96:	e7d0      	b.n	8014c3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014c98:	240255c2 	.word	0x240255c2
 8014c9c:	240255c0 	.word	0x240255c0
 8014ca0:	240255cc 	.word	0x240255cc
 8014ca4:	2d00      	cmp	r5, #0
 8014ca6:	f000 816d 	beq.w	8014f84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8014caa:	9b06      	ldr	r3, [sp, #24]
 8014cac:	445b      	add	r3, fp
 8014cae:	461c      	mov	r4, r3
 8014cb0:	9b02      	ldr	r3, [sp, #8]
 8014cb2:	3301      	adds	r3, #1
 8014cb4:	f000 8166 	beq.w	8014f84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8014cb8:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8014cbc:	9803      	ldr	r0, [sp, #12]
 8014cbe:	4629      	mov	r1, r5
 8014cc0:	f7ff fd32 	bl	8014728 <_ZNK8touchgfx4Rect8includesERKS0_>
 8014cc4:	b120      	cbz	r0, 8014cd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 8014cc6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8014cca:	9801      	ldr	r0, [sp, #4]
 8014ccc:	f7ff fea8 	bl	8014a20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014cd0:	9903      	ldr	r1, [sp, #12]
 8014cd2:	4628      	mov	r0, r5
 8014cd4:	f7ff fcb5 	bl	8014642 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014cd8:	2800      	cmp	r0, #0
 8014cda:	f000 809c 	beq.w	8014e16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8014cde:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8014ce2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8014ce6:	fa1f f189 	uxth.w	r1, r9
 8014cea:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8014cee:	9309      	str	r3, [sp, #36]	@ 0x24
 8014cf0:	eb01 0c03 	add.w	ip, r1, r3
 8014cf4:	b283      	uxth	r3, r0
 8014cf6:	4548      	cmp	r0, r9
 8014cf8:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8014cfc:	fa1f fa8c 	uxth.w	sl, ip
 8014d00:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8014d04:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8014d08:	eb03 050c 	add.w	r5, r3, ip
 8014d0c:	b2ad      	uxth	r5, r5
 8014d0e:	9505      	str	r5, [sp, #20]
 8014d10:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8014d14:	9504      	str	r5, [sp, #16]
 8014d16:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8014d1a:	f340 8099 	ble.w	8014e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 8014d1e:	1a5b      	subs	r3, r3, r1
 8014d20:	4596      	cmp	lr, r2
 8014d22:	fa0f f08a 	sxth.w	r0, sl
 8014d26:	b29b      	uxth	r3, r3
 8014d28:	b21e      	sxth	r6, r3
 8014d2a:	dd2e      	ble.n	8014d8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 8014d2c:	9f02      	ldr	r7, [sp, #8]
 8014d2e:	fa1f fe8e 	uxth.w	lr, lr
 8014d32:	b292      	uxth	r2, r2
 8014d34:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8014d38:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8014d3c:	9f04      	ldr	r7, [sp, #16]
 8014d3e:	ebae 0102 	sub.w	r1, lr, r2
 8014d42:	44a6      	add	lr, r4
 8014d44:	1a3f      	subs	r7, r7, r0
 8014d46:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8014d4a:	b289      	uxth	r1, r1
 8014d4c:	4402      	add	r2, r0
 8014d4e:	fa0f fe8e 	sxth.w	lr, lr
 8014d52:	b20d      	sxth	r5, r1
 8014d54:	b212      	sxth	r2, r2
 8014d56:	436f      	muls	r7, r5
 8014d58:	ebae 0202 	sub.w	r2, lr, r2
 8014d5c:	4372      	muls	r2, r6
 8014d5e:	4297      	cmp	r7, r2
 8014d60:	db09      	blt.n	8014d76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 8014d62:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8014d66:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8014d6a:	449c      	add	ip, r3
 8014d6c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8014d70:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8014d74:	e684      	b.n	8014a80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014d76:	4421      	add	r1, r4
 8014d78:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8014d7c:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8014d80:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014d84:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8014d88:	e67a      	b.n	8014a80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014d8a:	9f04      	ldr	r7, [sp, #16]
 8014d8c:	42b8      	cmp	r0, r7
 8014d8e:	da27      	bge.n	8014de0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 8014d90:	9902      	ldr	r1, [sp, #8]
 8014d92:	1a3f      	subs	r7, r7, r0
 8014d94:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8014d98:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8014d9c:	eb05 010e 	add.w	r1, r5, lr
 8014da0:	fa1f f881 	uxth.w	r8, r1
 8014da4:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8014da8:	4411      	add	r1, r2
 8014daa:	fa0f f988 	sxth.w	r9, r8
 8014dae:	eba2 020e 	sub.w	r2, r2, lr
 8014db2:	eba1 0108 	sub.w	r1, r1, r8
 8014db6:	4372      	muls	r2, r6
 8014db8:	b289      	uxth	r1, r1
 8014dba:	fa0f f881 	sxth.w	r8, r1
 8014dbe:	fb08 f707 	mul.w	r7, r8, r7
 8014dc2:	42ba      	cmp	r2, r7
 8014dc4:	dc06      	bgt.n	8014dd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 8014dc6:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8014dca:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8014dce:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8014dd2:	e7ca      	b.n	8014d6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8014dd4:	4429      	add	r1, r5
 8014dd6:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8014dda:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014dde:	e64f      	b.n	8014a80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014de0:	9805      	ldr	r0, [sp, #20]
 8014de2:	2d06      	cmp	r5, #6
 8014de4:	ebaa 0000 	sub.w	r0, sl, r0
 8014de8:	b280      	uxth	r0, r0
 8014dea:	fa0f fe80 	sxth.w	lr, r0
 8014dee:	d817      	bhi.n	8014e20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 8014df0:	9b04      	ldr	r3, [sp, #16]
 8014df2:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8014df6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8014dfa:	1c6b      	adds	r3, r5, #1
 8014dfc:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8014e00:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8014e04:	9b01      	ldr	r3, [sp, #4]
 8014e06:	9801      	ldr	r0, [sp, #4]
 8014e08:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014e0c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8014e10:	805a      	strh	r2, [r3, #2]
 8014e12:	809e      	strh	r6, [r3, #4]
 8014e14:	80d9      	strh	r1, [r3, #6]
 8014e16:	9b02      	ldr	r3, [sp, #8]
 8014e18:	3c08      	subs	r4, #8
 8014e1a:	3b01      	subs	r3, #1
 8014e1c:	9302      	str	r3, [sp, #8]
 8014e1e:	e747      	b.n	8014cb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 8014e20:	9a02      	ldr	r2, [sp, #8]
 8014e22:	45b6      	cmp	lr, r6
 8014e24:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014e28:	db0d      	blt.n	8014e46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 8014e2a:	449c      	add	ip, r3
 8014e2c:	445a      	add	r2, fp
 8014e2e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8014e32:	fa1f fc8c 	uxth.w	ip, ip
 8014e36:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8014e3a:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8014e3e:	448c      	add	ip, r1
 8014e40:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8014e44:	e61c      	b.n	8014a80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014e46:	445a      	add	r2, fp
 8014e48:	4484      	add	ip, r0
 8014e4a:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8014e4e:	e78f      	b.n	8014d70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8014e50:	fa1f f18e 	uxth.w	r1, lr
 8014e54:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8014e58:	b293      	uxth	r3, r2
 8014e5a:	4596      	cmp	lr, r2
 8014e5c:	eb01 0806 	add.w	r8, r1, r6
 8014e60:	9306      	str	r3, [sp, #24]
 8014e62:	fa1f f888 	uxth.w	r8, r8
 8014e66:	9f06      	ldr	r7, [sp, #24]
 8014e68:	fa0f f388 	sxth.w	r3, r8
 8014e6c:	9307      	str	r3, [sp, #28]
 8014e6e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8014e72:	443b      	add	r3, r7
 8014e74:	b29b      	uxth	r3, r3
 8014e76:	9308      	str	r3, [sp, #32]
 8014e78:	da24      	bge.n	8014ec4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8014e7a:	9905      	ldr	r1, [sp, #20]
 8014e7c:	eba3 0308 	sub.w	r3, r3, r8
 8014e80:	eba2 020e 	sub.w	r2, r2, lr
 8014e84:	eba9 0000 	sub.w	r0, r9, r0
 8014e88:	ebaa 0401 	sub.w	r4, sl, r1
 8014e8c:	b29b      	uxth	r3, r3
 8014e8e:	b2a4      	uxth	r4, r4
 8014e90:	b219      	sxth	r1, r3
 8014e92:	b225      	sxth	r5, r4
 8014e94:	4348      	muls	r0, r1
 8014e96:	436a      	muls	r2, r5
 8014e98:	4282      	cmp	r2, r0
 8014e9a:	9a02      	ldr	r2, [sp, #8]
 8014e9c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014ea0:	445a      	add	r2, fp
 8014ea2:	dc06      	bgt.n	8014eb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8014ea4:	9b07      	ldr	r3, [sp, #28]
 8014ea6:	44a4      	add	ip, r4
 8014ea8:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8014eac:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8014eb0:	e75e      	b.n	8014d70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8014eb2:	9904      	ldr	r1, [sp, #16]
 8014eb4:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8014eb8:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8014ebc:	4433      	add	r3, r6
 8014ebe:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8014ec2:	e5dd      	b.n	8014a80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014ec4:	9f06      	ldr	r7, [sp, #24]
 8014ec6:	9b04      	ldr	r3, [sp, #16]
 8014ec8:	1bc9      	subs	r1, r1, r7
 8014eca:	fa0f f78a 	sxth.w	r7, sl
 8014ece:	b289      	uxth	r1, r1
 8014ed0:	429f      	cmp	r7, r3
 8014ed2:	fa0f fe81 	sxth.w	lr, r1
 8014ed6:	dd23      	ble.n	8014f20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 8014ed8:	9a05      	ldr	r2, [sp, #20]
 8014eda:	eba9 0000 	sub.w	r0, r9, r0
 8014ede:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8014ee2:	ebaa 0202 	sub.w	r2, sl, r2
 8014ee6:	9d07      	ldr	r5, [sp, #28]
 8014ee8:	fb0e f000 	mul.w	r0, lr, r0
 8014eec:	b292      	uxth	r2, r2
 8014eee:	eba5 0a03 	sub.w	sl, r5, r3
 8014ef2:	9b02      	ldr	r3, [sp, #8]
 8014ef4:	b214      	sxth	r4, r2
 8014ef6:	00db      	lsls	r3, r3, #3
 8014ef8:	fb04 fa0a 	mul.w	sl, r4, sl
 8014efc:	445b      	add	r3, fp
 8014efe:	4550      	cmp	r0, sl
 8014f00:	db03      	blt.n	8014f0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 8014f02:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8014f06:	4494      	add	ip, r2
 8014f08:	e732      	b.n	8014d70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8014f0a:	9a04      	ldr	r2, [sp, #16]
 8014f0c:	4431      	add	r1, r6
 8014f0e:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8014f12:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8014f16:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8014f1a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8014f1e:	e75c      	b.n	8014dda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 8014f20:	9b08      	ldr	r3, [sp, #32]
 8014f22:	2d06      	cmp	r5, #6
 8014f24:	eba3 0308 	sub.w	r3, r3, r8
 8014f28:	b29b      	uxth	r3, r3
 8014f2a:	b218      	sxth	r0, r3
 8014f2c:	d813      	bhi.n	8014f56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 8014f2e:	9b07      	ldr	r3, [sp, #28]
 8014f30:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8014f34:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8014f38:	1c6b      	adds	r3, r5, #1
 8014f3a:	9901      	ldr	r1, [sp, #4]
 8014f3c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8014f40:	9b01      	ldr	r3, [sp, #4]
 8014f42:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8014f46:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014f4a:	805a      	strh	r2, [r3, #2]
 8014f4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014f4e:	f8a3 e006 	strh.w	lr, [r3, #6]
 8014f52:	809a      	strh	r2, [r3, #4]
 8014f54:	e75f      	b.n	8014e16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8014f56:	9c02      	ldr	r4, [sp, #8]
 8014f58:	4570      	cmp	r0, lr
 8014f5a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8014f5e:	db0d      	blt.n	8014f7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8014f60:	4431      	add	r1, r6
 8014f62:	9b06      	ldr	r3, [sp, #24]
 8014f64:	445c      	add	r4, fp
 8014f66:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8014f6a:	b289      	uxth	r1, r1
 8014f6c:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8014f70:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014f74:	4419      	add	r1, r3
 8014f76:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8014f7a:	e581      	b.n	8014a80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014f7c:	445c      	add	r4, fp
 8014f7e:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8014f82:	e79b      	b.n	8014ebc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8014f84:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8014f88:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8014f8c:	1e65      	subs	r5, r4, #1
 8014f8e:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8014f92:	b2ad      	uxth	r5, r5
 8014f94:	42b5      	cmp	r5, r6
 8014f96:	d044      	beq.n	8015022 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5da>
 8014f98:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8014f9c:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8014fa0:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8014fa4:	4282      	cmp	r2, r0
 8014fa6:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8014faa:	d11f      	bne.n	8014fec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8014fac:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8014fb0:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8014fb4:	459c      	cmp	ip, r3
 8014fb6:	d119      	bne.n	8014fec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8014fb8:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8014fbc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8014fc0:	19d8      	adds	r0, r3, r7
 8014fc2:	b200      	sxth	r0, r0
 8014fc4:	4288      	cmp	r0, r1
 8014fc6:	d109      	bne.n	8014fdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8014fc8:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8014fcc:	4413      	add	r3, r2
 8014fce:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8014fd2:	4629      	mov	r1, r5
 8014fd4:	9801      	ldr	r0, [sp, #4]
 8014fd6:	f7ff fd23 	bl	8014a20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014fda:	e003      	b.n	8014fe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8014fdc:	4411      	add	r1, r2
 8014fde:	b209      	sxth	r1, r1
 8014fe0:	42b9      	cmp	r1, r7
 8014fe2:	d0f3      	beq.n	8014fcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8014fe4:	3d01      	subs	r5, #1
 8014fe6:	3c08      	subs	r4, #8
 8014fe8:	b2ad      	uxth	r5, r5
 8014fea:	e7d3      	b.n	8014f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8014fec:	42b9      	cmp	r1, r7
 8014fee:	d1f9      	bne.n	8014fe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8014ff0:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8014ff4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8014ff8:	4299      	cmp	r1, r3
 8014ffa:	d1f3      	bne.n	8014fe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8014ffc:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8015000:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8015004:	181f      	adds	r7, r3, r0
 8015006:	b23f      	sxth	r7, r7
 8015008:	42ba      	cmp	r2, r7
 801500a:	d105      	bne.n	8015018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d0>
 801500c:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8015010:	440b      	add	r3, r1
 8015012:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8015016:	e7dc      	b.n	8014fd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58a>
 8015018:	440a      	add	r2, r1
 801501a:	b212      	sxth	r2, r2
 801501c:	4290      	cmp	r0, r2
 801501e:	d1e1      	bne.n	8014fe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8015020:	e7f6      	b.n	8015010 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c8>
 8015022:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8015026:	2e07      	cmp	r6, #7
 8015028:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801502c:	d812      	bhi.n	8015054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60c>
 801502e:	1c75      	adds	r5, r6, #1
 8015030:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8015034:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8015038:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801503c:	9d01      	ldr	r5, [sp, #4]
 801503e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8015042:	442c      	add	r4, r5
 8015044:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8015048:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801504c:	8061      	strh	r1, [r4, #2]
 801504e:	80a2      	strh	r2, [r4, #4]
 8015050:	80e3      	strh	r3, [r4, #6]
 8015052:	e57f      	b.n	8014b54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8015054:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8015058:	3e01      	subs	r6, #1
 801505a:	445c      	add	r4, fp
 801505c:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8015060:	f04f 37ff 	mov.w	r7, #4294967295
 8015064:	2500      	movs	r5, #0
 8015066:	9305      	str	r3, [sp, #20]
 8015068:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801506c:	1e72      	subs	r2, r6, #1
 801506e:	9302      	str	r3, [sp, #8]
 8015070:	4691      	mov	r9, r2
 8015072:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8015076:	9304      	str	r3, [sp, #16]
 8015078:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801507c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8015080:	6818      	ldr	r0, [r3, #0]
 8015082:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015086:	9207      	str	r2, [sp, #28]
 8015088:	bf16      	itet	ne
 801508a:	9905      	ldrne	r1, [sp, #20]
 801508c:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8015090:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8015094:	9306      	str	r3, [sp, #24]
 8015096:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801509a:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801509e:	fb18 f801 	smulbb	r8, r8, r1
 80150a2:	6859      	ldr	r1, [r3, #4]
 80150a4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80150a8:	4671      	mov	r1, lr
 80150aa:	a80c      	add	r0, sp, #48	@ 0x30
 80150ac:	f7ff fb62 	bl	8014774 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80150b0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80150b4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 80150b8:	f04f 0c08 	mov.w	ip, #8
 80150bc:	9b04      	ldr	r3, [sp, #16]
 80150be:	9a02      	ldr	r2, [sp, #8]
 80150c0:	fb10 f001 	smulbb	r0, r0, r1
 80150c4:	fb02 8803 	mla	r8, r2, r3, r8
 80150c8:	eba0 0108 	sub.w	r1, r0, r8
 80150cc:	fb90 f0fc 	sdiv	r0, r0, ip
 80150d0:	4288      	cmp	r0, r1
 80150d2:	dc20      	bgt.n	8015116 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 80150d4:	4551      	cmp	r1, sl
 80150d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80150da:	da03      	bge.n	80150e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69c>
 80150dc:	b1d9      	cbz	r1, 8015116 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 80150de:	468a      	mov	sl, r1
 80150e0:	464f      	mov	r7, r9
 80150e2:	4635      	mov	r5, r6
 80150e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80150e8:	f119 0f02 	cmn.w	r9, #2
 80150ec:	d1c6      	bne.n	801507c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 80150ee:	4616      	mov	r6, r2
 80150f0:	3201      	adds	r2, #1
 80150f2:	f1a4 0408 	sub.w	r4, r4, #8
 80150f6:	d1b7      	bne.n	8015068 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 80150f8:	9b01      	ldr	r3, [sp, #4]
 80150fa:	b2ac      	uxth	r4, r5
 80150fc:	00ed      	lsls	r5, r5, #3
 80150fe:	1958      	adds	r0, r3, r5
 8015100:	1c7b      	adds	r3, r7, #1
 8015102:	d10b      	bne.n	801511c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d4>
 8015104:	4601      	mov	r1, r0
 8015106:	9803      	ldr	r0, [sp, #12]
 8015108:	f7ff fb34 	bl	8014774 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801510c:	4621      	mov	r1, r4
 801510e:	9801      	ldr	r0, [sp, #4]
 8015110:	f7ff fc86 	bl	8014a20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015114:	e4b4      	b.n	8014a80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8015116:	464f      	mov	r7, r9
 8015118:	4635      	mov	r5, r6
 801511a:	e7ed      	b.n	80150f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b0>
 801511c:	9b01      	ldr	r3, [sp, #4]
 801511e:	00ff      	lsls	r7, r7, #3
 8015120:	445d      	add	r5, fp
 8015122:	19d9      	adds	r1, r3, r7
 8015124:	445f      	add	r7, fp
 8015126:	f7ff fb25 	bl	8014774 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801512a:	9b03      	ldr	r3, [sp, #12]
 801512c:	cb03      	ldmia	r3!, {r0, r1}
 801512e:	9b03      	ldr	r3, [sp, #12]
 8015130:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8015134:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8015138:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801513c:	6869      	ldr	r1, [r5, #4]
 801513e:	c303      	stmia	r3!, {r0, r1}
 8015140:	e7e4      	b.n	801510c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8015142:	bf00      	nop

08015144 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8015144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015148:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801514c:	b0a1      	sub	sp, #132	@ 0x84
 801514e:	4604      	mov	r4, r0
 8015150:	4630      	mov	r0, r6
 8015152:	f7fa f942 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 8015156:	4605      	mov	r5, r0
 8015158:	b948      	cbnz	r0, 801516e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801515a:	6823      	ldr	r3, [r4, #0]
 801515c:	4620      	mov	r0, r4
 801515e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015160:	e896 0006 	ldmia.w	r6, {r1, r2}
 8015164:	4798      	blx	r3
 8015166:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801516a:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801516e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8015172:	2b00      	cmp	r3, #0
 8015174:	d149      	bne.n	801520a <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 8015176:	4bb2      	ldr	r3, [pc, #712]	@ (8015440 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 801517e:	1ebb      	subs	r3, r7, #2
 8015180:	425f      	negs	r7, r3
 8015182:	415f      	adcs	r7, r3
 8015184:	4baf      	ldr	r3, [pc, #700]	@ (8015444 <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d040      	beq.n	801520e <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 801518c:	4dae      	ldr	r5, [pc, #696]	@ (8015448 <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 801518e:	4628      	mov	r0, r5
 8015190:	f7fa f923 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 8015194:	4606      	mov	r6, r0
 8015196:	2800      	cmp	r0, #0
 8015198:	d139      	bne.n	801520e <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 801519a:	4628      	mov	r0, r5
 801519c:	f7ff f97e 	bl	801449c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80151a0:	6823      	ldr	r3, [r4, #0]
 80151a2:	6829      	ldr	r1, [r5, #0]
 80151a4:	4620      	mov	r0, r4
 80151a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151a8:	686a      	ldr	r2, [r5, #4]
 80151aa:	4798      	blx	r3
 80151ac:	802e      	strh	r6, [r5, #0]
 80151ae:	806e      	strh	r6, [r5, #2]
 80151b0:	80ae      	strh	r6, [r5, #4]
 80151b2:	80ee      	strh	r6, [r5, #6]
 80151b4:	af0f      	add	r7, sp, #60	@ 0x3c
 80151b6:	4ea5      	ldr	r6, [pc, #660]	@ (801544c <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 80151b8:	4638      	mov	r0, r7
 80151ba:	f7ff fbd5 	bl	8014968 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80151be:	8835      	ldrh	r5, [r6, #0]
 80151c0:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 80151c4:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80151c8:	462b      	mov	r3, r5
 80151ca:	4563      	cmp	r3, ip
 80151cc:	d224      	bcs.n	8015218 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 80151ce:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80151d2:	2907      	cmp	r1, #7
 80151d4:	d816      	bhi.n	8015204 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80151d6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80151da:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 80151de:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 80151e2:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 80151e6:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 80151ea:	1c4a      	adds	r2, r1, #1
 80151ec:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 80151f0:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 80151f4:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 80151f8:	f8a2 a002 	strh.w	sl, [r2, #2]
 80151fc:	f8a2 8004 	strh.w	r8, [r2, #4]
 8015200:	f8a2 e006 	strh.w	lr, [r2, #6]
 8015204:	3301      	adds	r3, #1
 8015206:	b29b      	uxth	r3, r3
 8015208:	e7df      	b.n	80151ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 801520a:	2701      	movs	r7, #1
 801520c:	e7ba      	b.n	8015184 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 801520e:	2f00      	cmp	r7, #0
 8015210:	d1d0      	bne.n	80151b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 8015212:	b021      	add	sp, #132	@ 0x84
 8015214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015218:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801521c:	42ab      	cmp	r3, r5
 801521e:	d90c      	bls.n	801523a <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 8015220:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8015224:	6822      	ldr	r2, [r4, #0]
 8015226:	3501      	adds	r5, #1
 8015228:	4620      	mov	r0, r4
 801522a:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801522c:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8015230:	b2ad      	uxth	r5, r5
 8015232:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8015236:	47b8      	blx	r7
 8015238:	e7ee      	b.n	8015218 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 801523a:	4d81      	ldr	r5, [pc, #516]	@ (8015440 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 801523c:	6828      	ldr	r0, [r5, #0]
 801523e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8015242:	2b01      	cmp	r3, #1
 8015244:	f040 813d 	bne.w	80154c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x37e>
 8015248:	4a81      	ldr	r2, [pc, #516]	@ (8015450 <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 801524a:	8833      	ldrh	r3, [r6, #0]
 801524c:	7812      	ldrb	r2, [r2, #0]
 801524e:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 8015252:	2a01      	cmp	r2, #1
 8015254:	d014      	beq.n	8015280 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8015256:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801525a:	f04f 0900 	mov.w	r9, #0
 801525e:	32ae      	adds	r2, #174	@ 0xae
 8015260:	4283      	cmp	r3, r0
 8015262:	f102 0208 	add.w	r2, r2, #8
 8015266:	f280 8083 	bge.w	8015370 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801526a:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 801526e:	3301      	adds	r3, #1
 8015270:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 8015274:	4439      	add	r1, r7
 8015276:	b209      	sxth	r1, r1
 8015278:	4589      	cmp	r9, r1
 801527a:	bfb8      	it	lt
 801527c:	4689      	movlt	r9, r1
 801527e:	e7ef      	b.n	8015260 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 8015280:	4f74      	ldr	r7, [pc, #464]	@ (8015454 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 8015282:	883a      	ldrh	r2, [r7, #0]
 8015284:	4693      	mov	fp, r2
 8015286:	4283      	cmp	r3, r0
 8015288:	da08      	bge.n	801529c <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 801528a:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 801528e:	3301      	adds	r3, #1
 8015290:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 8015294:	458b      	cmp	fp, r1
 8015296:	bfa8      	it	ge
 8015298:	468b      	movge	fp, r1
 801529a:	e7f4      	b.n	8015286 <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 801529c:	2a0f      	cmp	r2, #15
 801529e:	f04f 0300 	mov.w	r3, #0
 80152a2:	f8df 91b4 	ldr.w	r9, [pc, #436]	@ 8015458 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 80152a6:	bf8c      	ite	hi
 80152a8:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 80152ac:	f04f 0801 	movls.w	r8, #1
 80152b0:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 80152b4:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80152b8:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80152bc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80152c0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80152c4:	6828      	ldr	r0, [r5, #0]
 80152c6:	455b      	cmp	r3, fp
 80152c8:	f340 80c8 	ble.w	801545c <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80152cc:	6803      	ldr	r3, [r0, #0]
 80152ce:	f8b7 a000 	ldrh.w	sl, [r7]
 80152d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80152d6:	4798      	blx	r3
 80152d8:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 80152dc:	ebaa 0000 	sub.w	r0, sl, r0
 80152e0:	682b      	ldr	r3, [r5, #0]
 80152e2:	ebac 0e08 	sub.w	lr, ip, r8
 80152e6:	b280      	uxth	r0, r0
 80152e8:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 80152ec:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 80152f0:	4570      	cmp	r0, lr
 80152f2:	dd05      	ble.n	8015300 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 80152f4:	4558      	cmp	r0, fp
 80152f6:	dd03      	ble.n	8015300 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 80152f8:	b901      	cbnz	r1, 80152fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 80152fa:	b392      	cbz	r2, 8015362 <_ZN8touchgfx11Application15drawCachedAreasEv+0x21e>
 80152fc:	4658      	mov	r0, fp
 80152fe:	e006      	b.n	801530e <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ca>
 8015300:	2900      	cmp	r1, #0
 8015302:	d1fb      	bne.n	80152fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8015304:	2a00      	cmp	r2, #0
 8015306:	d1f9      	bne.n	80152fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8015308:	4558      	cmp	r0, fp
 801530a:	bfb8      	it	lt
 801530c:	4658      	movlt	r0, fp
 801530e:	f9b9 3000 	ldrsh.w	r3, [r9]
 8015312:	2200      	movs	r2, #0
 8015314:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8015318:	ebac 0000 	sub.w	r0, ip, r0
 801531c:	f8b6 a000 	ldrh.w	sl, [r6]
 8015320:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8015324:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8015328:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801532c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8015330:	4553      	cmp	r3, sl
 8015332:	ddc5      	ble.n	80152c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8015334:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8015338:	ab0d      	add	r3, sp, #52	@ 0x34
 801533a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801533e:	6851      	ldr	r1, [r2, #4]
 8015340:	c303      	stmia	r3!, {r0, r1}
 8015342:	a80d      	add	r0, sp, #52	@ 0x34
 8015344:	a90b      	add	r1, sp, #44	@ 0x2c
 8015346:	f7fa f805 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 801534a:	a80d      	add	r0, sp, #52	@ 0x34
 801534c:	f7fa f845 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 8015350:	b920      	cbnz	r0, 801535c <_ZN8touchgfx11Application15drawCachedAreasEv+0x218>
 8015352:	6823      	ldr	r3, [r4, #0]
 8015354:	a90d      	add	r1, sp, #52	@ 0x34
 8015356:	4620      	mov	r0, r4
 8015358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801535a:	4798      	blx	r3
 801535c:	f10a 0a01 	add.w	sl, sl, #1
 8015360:	e7e4      	b.n	801532c <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e8>
 8015362:	681a      	ldr	r2, [r3, #0]
 8015364:	2101      	movs	r1, #1
 8015366:	4618      	mov	r0, r3
 8015368:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 801536c:	4790      	blx	r2
 801536e:	e7a7      	b.n	80152c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8015370:	4b39      	ldr	r3, [pc, #228]	@ (8015458 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>)
 8015372:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8015454 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 8015376:	881f      	ldrh	r7, [r3, #0]
 8015378:	2300      	movs	r3, #0
 801537a:	2f0f      	cmp	r7, #15
 801537c:	bf8c      	ite	hi
 801537e:	08ff      	lsrhi	r7, r7, #3
 8015380:	2701      	movls	r7, #1
 8015382:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 8015386:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801538a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 801538e:	6828      	ldr	r0, [r5, #0]
 8015390:	4413      	add	r3, r2
 8015392:	b21b      	sxth	r3, r3
 8015394:	454b      	cmp	r3, r9
 8015396:	da61      	bge.n	801545c <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8015398:	6803      	ldr	r3, [r0, #0]
 801539a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801539e:	4798      	blx	r3
 80153a0:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 80153a4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80153a8:	682a      	ldr	r2, [r5, #0]
 80153aa:	4473      	add	r3, lr
 80153ac:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 80153b0:	b21b      	sxth	r3, r3
 80153b2:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 80153b6:	eb03 0e07 	add.w	lr, r3, r7
 80153ba:	4570      	cmp	r0, lr
 80153bc:	da0d      	bge.n	80153da <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 80153be:	4548      	cmp	r0, r9
 80153c0:	da0b      	bge.n	80153da <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 80153c2:	f1bc 0f00 	cmp.w	ip, #0
 80153c6:	d138      	bne.n	801543a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 80153c8:	2900      	cmp	r1, #0
 80153ca:	d136      	bne.n	801543a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 80153cc:	6813      	ldr	r3, [r2, #0]
 80153ce:	2101      	movs	r1, #1
 80153d0:	4610      	mov	r0, r2
 80153d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80153d6:	4798      	blx	r3
 80153d8:	e7d5      	b.n	8015386 <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 80153da:	f1bc 0f00 	cmp.w	ip, #0
 80153de:	d12c      	bne.n	801543a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 80153e0:	bb59      	cbnz	r1, 801543a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 80153e2:	4548      	cmp	r0, r9
 80153e4:	bfa8      	it	ge
 80153e6:	4648      	movge	r0, r9
 80153e8:	f9b8 2000 	ldrsh.w	r2, [r8]
 80153ec:	2100      	movs	r1, #0
 80153ee:	1ac0      	subs	r0, r0, r3
 80153f0:	f8b6 a000 	ldrh.w	sl, [r6]
 80153f4:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 80153f8:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80153fc:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8015400:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8015404:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8015408:	4553      	cmp	r3, sl
 801540a:	ddbc      	ble.n	8015386 <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 801540c:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8015410:	ab0d      	add	r3, sp, #52	@ 0x34
 8015412:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8015416:	6851      	ldr	r1, [r2, #4]
 8015418:	c303      	stmia	r3!, {r0, r1}
 801541a:	a80d      	add	r0, sp, #52	@ 0x34
 801541c:	a90b      	add	r1, sp, #44	@ 0x2c
 801541e:	f7f9 ff99 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 8015422:	a80d      	add	r0, sp, #52	@ 0x34
 8015424:	f7f9 ffd9 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 8015428:	b920      	cbnz	r0, 8015434 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f0>
 801542a:	6823      	ldr	r3, [r4, #0]
 801542c:	a90d      	add	r1, sp, #52	@ 0x34
 801542e:	4620      	mov	r0, r4
 8015430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015432:	4798      	blx	r3
 8015434:	f10a 0a01 	add.w	sl, sl, #1
 8015438:	e7e4      	b.n	8015404 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c0>
 801543a:	4648      	mov	r0, r9
 801543c:	e7d4      	b.n	80153e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a4>
 801543e:	bf00      	nop
 8015440:	240255cc 	.word	0x240255cc
 8015444:	2402560c 	.word	0x2402560c
 8015448:	24025618 	.word	0x24025618
 801544c:	2400007c 	.word	0x2400007c
 8015450:	240255c4 	.word	0x240255c4
 8015454:	240255c0 	.word	0x240255c0
 8015458:	240255c2 	.word	0x240255c2
 801545c:	6828      	ldr	r0, [r5, #0]
 801545e:	6803      	ldr	r3, [r0, #0]
 8015460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015462:	4798      	blx	r3
 8015464:	4ba4      	ldr	r3, [pc, #656]	@ (80156f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 8015466:	781b      	ldrb	r3, [r3, #0]
 8015468:	2b00      	cmp	r3, #0
 801546a:	f43f aed2 	beq.w	8015212 <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 801546e:	2300      	movs	r3, #0
 8015470:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 8015474:	a80f      	add	r0, sp, #60	@ 0x3c
 8015476:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 801547a:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801547e:	4b9f      	ldr	r3, [pc, #636]	@ (80156fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 8015480:	881b      	ldrh	r3, [r3, #0]
 8015482:	42b3      	cmp	r3, r6
 8015484:	f4bf aec5 	bcs.w	8015212 <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8015488:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801548c:	2907      	cmp	r1, #7
 801548e:	d815      	bhi.n	80154bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x378>
 8015490:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8015494:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8015498:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801549c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 80154a0:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80154a4:	1c4a      	adds	r2, r1, #1
 80154a6:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 80154aa:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 80154ae:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 80154b2:	f8a2 e002 	strh.w	lr, [r2, #2]
 80154b6:	f8a2 c004 	strh.w	ip, [r2, #4]
 80154ba:	80d7      	strh	r7, [r2, #6]
 80154bc:	3301      	adds	r3, #1
 80154be:	b29b      	uxth	r3, r3
 80154c0:	e7df      	b.n	8015482 <_ZN8touchgfx11Application15drawCachedAreasEv+0x33e>
 80154c2:	2b02      	cmp	r3, #2
 80154c4:	f040 80ce 	bne.w	8015664 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 80154c8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80154cc:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 80154d0:	9308      	str	r3, [sp, #32]
 80154d2:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 80154d6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80154da:	9307      	str	r3, [sp, #28]
 80154dc:	b2bf      	uxth	r7, r7
 80154de:	6803      	ldr	r3, [r0, #0]
 80154e0:	fa0f f887 	sxth.w	r8, r7
 80154e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80154e8:	4798      	blx	r3
 80154ea:	4b85      	ldr	r3, [pc, #532]	@ (8015700 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 80154ec:	4682      	mov	sl, r0
 80154ee:	2000      	movs	r0, #0
 80154f0:	881b      	ldrh	r3, [r3, #0]
 80154f2:	9302      	str	r3, [sp, #8]
 80154f4:	4b83      	ldr	r3, [pc, #524]	@ (8015704 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 80154f6:	881e      	ldrh	r6, [r3, #0]
 80154f8:	4b83      	ldr	r3, [pc, #524]	@ (8015708 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 80154fa:	781b      	ldrb	r3, [r3, #0]
 80154fc:	2b01      	cmp	r3, #1
 80154fe:	bf1e      	ittt	ne
 8015500:	9b02      	ldrne	r3, [sp, #8]
 8015502:	9602      	strne	r6, [sp, #8]
 8015504:	461e      	movne	r6, r3
 8015506:	f7ec fc53 	bl	8001db0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801550a:	fb96 fbfb 	sdiv	fp, r6, fp
 801550e:	fb0b f808 	mul.w	r8, fp, r8
 8015512:	45c2      	cmp	sl, r8
 8015514:	da0c      	bge.n	8015530 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 8015516:	6828      	ldr	r0, [r5, #0]
 8015518:	210a      	movs	r1, #10
 801551a:	6803      	ldr	r3, [r0, #0]
 801551c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015520:	4798      	blx	r3
 8015522:	6828      	ldr	r0, [r5, #0]
 8015524:	6803      	ldr	r3, [r0, #0]
 8015526:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801552a:	4798      	blx	r3
 801552c:	4682      	mov	sl, r0
 801552e:	e7f0      	b.n	8015512 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 8015530:	2000      	movs	r0, #0
 8015532:	f04f 0800 	mov.w	r8, #0
 8015536:	f7ec fc6b 	bl	8001e10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801553a:	fa1f f38b 	uxth.w	r3, fp
 801553e:	4645      	mov	r5, r8
 8015540:	fb17 f703 	smulbb	r7, r7, r3
 8015544:	9304      	str	r3, [sp, #16]
 8015546:	b2bb      	uxth	r3, r7
 8015548:	4f70      	ldr	r7, [pc, #448]	@ (801570c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 801554a:	9305      	str	r3, [sp, #20]
 801554c:	0973      	lsrs	r3, r6, #5
 801554e:	9306      	str	r3, [sp, #24]
 8015550:	42b5      	cmp	r5, r6
 8015552:	d087      	beq.n	8015464 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8015554:	6838      	ldr	r0, [r7, #0]
 8015556:	6803      	ldr	r3, [r0, #0]
 8015558:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801555c:	4798      	blx	r3
 801555e:	4582      	cmp	sl, r0
 8015560:	4681      	mov	r9, r0
 8015562:	d907      	bls.n	8015574 <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 8015564:	f1b8 0f00 	cmp.w	r8, #0
 8015568:	d007      	beq.n	801557a <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 801556a:	6838      	ldr	r0, [r7, #0]
 801556c:	6803      	ldr	r3, [r0, #0]
 801556e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8015572:	e776      	b.n	8015462 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8015574:	f1b8 0f00 	cmp.w	r8, #0
 8015578:	d003      	beq.n	8015582 <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 801557a:	454d      	cmp	r5, r9
 801557c:	d3f5      	bcc.n	801556a <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 801557e:	f04f 0801 	mov.w	r8, #1
 8015582:	9a04      	ldr	r2, [sp, #16]
 8015584:	fb95 f3fb 	sdiv	r3, r5, fp
 8015588:	9303      	str	r3, [sp, #12]
 801558a:	3301      	adds	r3, #1
 801558c:	fb13 f302 	smulbb	r3, r3, r2
 8015590:	b299      	uxth	r1, r3
 8015592:	f1b8 0f00 	cmp.w	r8, #0
 8015596:	d04d      	beq.n	8015634 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f0>
 8015598:	eb09 030b 	add.w	r3, r9, fp
 801559c:	42b3      	cmp	r3, r6
 801559e:	bfa8      	it	ge
 80155a0:	4633      	movge	r3, r6
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	9807      	ldr	r0, [sp, #28]
 80155a6:	428b      	cmp	r3, r1
 80155a8:	bf94      	ite	ls
 80155aa:	ebc5 0203 	rsbls	r2, r5, r3
 80155ae:	ebc5 0201 	rsbhi	r2, r5, r1
 80155b2:	4282      	cmp	r2, r0
 80155b4:	bfa8      	it	ge
 80155b6:	4602      	movge	r2, r0
 80155b8:	9808      	ldr	r0, [sp, #32]
 80155ba:	fa1f fa82 	uxth.w	sl, r2
 80155be:	4582      	cmp	sl, r0
 80155c0:	d205      	bcs.n	80155ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 80155c2:	fa15 f082 	uxtah	r0, r5, r2
 80155c6:	4286      	cmp	r6, r0
 80155c8:	d001      	beq.n	80155ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 80155ca:	4299      	cmp	r1, r3
 80155cc:	d23f      	bcs.n	801564e <_ZN8touchgfx11Application15drawCachedAreasEv+0x50a>
 80155ce:	2001      	movs	r0, #1
 80155d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80155d2:	f7ec fbed 	bl	8001db0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80155d6:	6838      	ldr	r0, [r7, #0]
 80155d8:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 80155dc:	6803      	ldr	r3, [r0, #0]
 80155de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80155e2:	4798      	blx	r3
 80155e4:	4b48      	ldr	r3, [pc, #288]	@ (8015708 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 80155e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80155e8:	2000      	movs	r0, #0
 80155ea:	781b      	ldrb	r3, [r3, #0]
 80155ec:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80155f0:	b212      	sxth	r2, r2
 80155f2:	2b01      	cmp	r3, #1
 80155f4:	d122      	bne.n	801563c <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f8>
 80155f6:	1b73      	subs	r3, r6, r5
 80155f8:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 80155fc:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8015600:	eba3 030a 	sub.w	r3, r3, sl
 8015604:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 8015608:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801560c:	6823      	ldr	r3, [r4, #0]
 801560e:	a90d      	add	r1, sp, #52	@ 0x34
 8015610:	4620      	mov	r0, r4
 8015612:	4455      	add	r5, sl
 8015614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015616:	4798      	blx	r3
 8015618:	6838      	ldr	r0, [r7, #0]
 801561a:	9b03      	ldr	r3, [sp, #12]
 801561c:	b2ad      	uxth	r5, r5
 801561e:	4259      	negs	r1, r3
 8015620:	6803      	ldr	r3, [r0, #0]
 8015622:	b209      	sxth	r1, r1
 8015624:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8015628:	4798      	blx	r3
 801562a:	2001      	movs	r0, #1
 801562c:	f7ec fbf0 	bl	8001e10 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015630:	46ca      	mov	sl, r9
 8015632:	e78d      	b.n	8015550 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 8015634:	9b05      	ldr	r3, [sp, #20]
 8015636:	eba9 0303 	sub.w	r3, r9, r3
 801563a:	e7b2      	b.n	80155a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 801563c:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8015640:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 8015644:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 8015648:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 801564c:	e7de      	b.n	801560c <_ZN8touchgfx11Application15drawCachedAreasEv+0x4c8>
 801564e:	6838      	ldr	r0, [r7, #0]
 8015650:	6803      	ldr	r3, [r0, #0]
 8015652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015654:	4798      	blx	r3
 8015656:	6838      	ldr	r0, [r7, #0]
 8015658:	9906      	ldr	r1, [sp, #24]
 801565a:	6803      	ldr	r3, [r0, #0]
 801565c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015660:	4798      	blx	r3
 8015662:	e7e5      	b.n	8015630 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ec>
 8015664:	2b03      	cmp	r3, #3
 8015666:	f040 8133 	bne.w	80158d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x78c>
 801566a:	4b27      	ldr	r3, [pc, #156]	@ (8015708 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801566c:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8015670:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 8015674:	781b      	ldrb	r3, [r3, #0]
 8015676:	2b01      	cmp	r3, #1
 8015678:	f000 8095 	beq.w	80157a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 801567c:	8832      	ldrh	r2, [r6, #0]
 801567e:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8015682:	3201      	adds	r2, #1
 8015684:	b292      	uxth	r2, r2
 8015686:	2900      	cmp	r1, #0
 8015688:	f43f aeec 	beq.w	8015464 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801568c:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 8015690:	4694      	mov	ip, r2
 8015692:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 8015696:	f04f 0800 	mov.w	r8, #0
 801569a:	441d      	add	r5, r3
 801569c:	b22d      	sxth	r5, r5
 801569e:	fa1f f38c 	uxth.w	r3, ip
 80156a2:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80156a6:	4299      	cmp	r1, r3
 80156a8:	f240 80bc 	bls.w	8015824 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e0>
 80156ac:	4427      	add	r7, r4
 80156ae:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 80156b2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80156b6:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 80156ba:	4283      	cmp	r3, r0
 80156bc:	f340 809e 	ble.w	80157fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b8>
 80156c0:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 80156c4:	46e0      	mov	r8, ip
 80156c6:	4405      	add	r5, r0
 80156c8:	b22d      	sxth	r5, r5
 80156ca:	429d      	cmp	r5, r3
 80156cc:	bfa8      	it	ge
 80156ce:	461d      	movge	r5, r3
 80156d0:	f10c 0c01 	add.w	ip, ip, #1
 80156d4:	e7e3      	b.n	801569e <_ZN8touchgfx11Application15drawCachedAreasEv+0x55a>
 80156d6:	d10a      	bne.n	80156ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x5aa>
 80156d8:	4562      	cmp	r2, ip
 80156da:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 80156de:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 80156e2:	bfb8      	it	lt
 80156e4:	4662      	movlt	r2, ip
 80156e6:	4288      	cmp	r0, r1
 80156e8:	bfb8      	it	lt
 80156ea:	4698      	movlt	r8, r3
 80156ec:	e084      	b.n	80157f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 80156ee:	428a      	cmp	r2, r1
 80156f0:	bfb8      	it	lt
 80156f2:	460a      	movlt	r2, r1
 80156f4:	e080      	b.n	80157f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 80156f6:	bf00      	nop
 80156f8:	240255ca 	.word	0x240255ca
 80156fc:	2400007c 	.word	0x2400007c
 8015700:	240255c2 	.word	0x240255c2
 8015704:	240255c0 	.word	0x240255c0
 8015708:	240255c4 	.word	0x240255c4
 801570c:	240255cc 	.word	0x240255cc
 8015710:	19e1      	adds	r1, r4, r7
 8015712:	ab0d      	add	r3, sp, #52	@ 0x34
 8015714:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8015718:	6849      	ldr	r1, [r1, #4]
 801571a:	c303      	stmia	r3!, {r0, r1}
 801571c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 8015720:	a80d      	add	r0, sp, #52	@ 0x34
 8015722:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8015726:	454b      	cmp	r3, r9
 8015728:	440b      	add	r3, r1
 801572a:	bfb8      	it	lt
 801572c:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 8015730:	1a9b      	subs	r3, r3, r2
 8015732:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8015736:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801573a:	f7fe fec9 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801573e:	a80d      	add	r0, sp, #52	@ 0x34
 8015740:	f7f9 fe4b 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 8015744:	bb78      	cbnz	r0, 80157a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8015746:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 801574a:	4427      	add	r7, r4
 801574c:	6828      	ldr	r0, [r5, #0]
 801574e:	45cc      	cmp	ip, r9
 8015750:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015754:	f8d0 e000 	ldr.w	lr, [r0]
 8015758:	bfd8      	it	le
 801575a:	fa1f fc8c 	uxthle.w	ip, ip
 801575e:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8015762:	bfc8      	it	gt
 8015764:	fa1f fc89 	uxthgt.w	ip, r9
 8015768:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801576c:	f8cd c000 	str.w	ip, [sp]
 8015770:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 8015774:	47d8      	blx	fp
 8015776:	4683      	mov	fp, r0
 8015778:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 801577c:	a80d      	add	r0, sp, #52	@ 0x34
 801577e:	f7fe fe8d 	bl	801449c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8015782:	6823      	ldr	r3, [r4, #0]
 8015784:	4620      	mov	r0, r4
 8015786:	a90d      	add	r1, sp, #52	@ 0x34
 8015788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801578a:	4798      	blx	r3
 801578c:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 8015790:	eba0 000b 	sub.w	r0, r0, fp
 8015794:	b200      	sxth	r0, r0
 8015796:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 801579a:	b920      	cbnz	r0, 80157a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 801579c:	fa1f f188 	uxth.w	r1, r8
 80157a0:	4650      	mov	r0, sl
 80157a2:	f7ff f93d 	bl	8014a20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80157a6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 80157aa:	f1bb 0f00 	cmp.w	fp, #0
 80157ae:	f43f ae59 	beq.w	8015464 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 80157b2:	8833      	ldrh	r3, [r6, #0]
 80157b4:	f04f 0800 	mov.w	r8, #0
 80157b8:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 80157bc:	3301      	adds	r3, #1
 80157be:	b29b      	uxth	r3, r3
 80157c0:	b299      	uxth	r1, r3
 80157c2:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80157c6:	458b      	cmp	fp, r1
 80157c8:	d9a2      	bls.n	8015710 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 80157ca:	4427      	add	r7, r4
 80157cc:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 80157d0:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 80157d4:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 80157d8:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 80157dc:	4408      	add	r0, r1
 80157de:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 80157e2:	4461      	add	r1, ip
 80157e4:	b200      	sxth	r0, r0
 80157e6:	b209      	sxth	r1, r1
 80157e8:	4288      	cmp	r0, r1
 80157ea:	f6bf af74 	bge.w	80156d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x592>
 80157ee:	4584      	cmp	ip, r0
 80157f0:	4662      	mov	r2, ip
 80157f2:	4698      	mov	r8, r3
 80157f4:	bfb8      	it	lt
 80157f6:	4602      	movlt	r2, r0
 80157f8:	3301      	adds	r3, #1
 80157fa:	e7e1      	b.n	80157c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x67c>
 80157fc:	d10e      	bne.n	801581c <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d8>
 80157fe:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 8015802:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8015806:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801580a:	4473      	add	r3, lr
 801580c:	b21b      	sxth	r3, r3
 801580e:	429d      	cmp	r5, r3
 8015810:	bfa8      	it	ge
 8015812:	461d      	movge	r5, r3
 8015814:	4287      	cmp	r7, r0
 8015816:	bfb8      	it	lt
 8015818:	46e0      	movlt	r8, ip
 801581a:	e759      	b.n	80156d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 801581c:	4285      	cmp	r5, r0
 801581e:	bfa8      	it	ge
 8015820:	4605      	movge	r5, r0
 8015822:	e755      	b.n	80156d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 8015824:	eb0a 0007 	add.w	r0, sl, r7
 8015828:	4427      	add	r7, r4
 801582a:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801582e:	45cb      	cmp	fp, r9
 8015830:	bfbc      	itt	lt
 8015832:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 8015836:	445d      	addlt	r5, fp
 8015838:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801583c:	bfb8      	it	lt
 801583e:	b22d      	sxthlt	r5, r5
 8015840:	f7f9 fdcb 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 8015844:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015848:	2800      	cmp	r0, #0
 801584a:	f47f af1c 	bne.w	8015686 <_ZN8touchgfx11Application15drawCachedAreasEv+0x542>
 801584e:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8015852:	fa1f fb8b 	uxth.w	fp, fp
 8015856:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 801585a:	1aad      	subs	r5, r5, r2
 801585c:	4829      	ldr	r0, [pc, #164]	@ (8015904 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7c0>)
 801585e:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8015862:	454d      	cmp	r5, r9
 8015864:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8015868:	6800      	ldr	r0, [r0, #0]
 801586a:	bfa8      	it	ge
 801586c:	464d      	movge	r5, r9
 801586e:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 8015872:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8015876:	b289      	uxth	r1, r1
 8015878:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801587c:	b2ad      	uxth	r5, r5
 801587e:	f8d0 c000 	ldr.w	ip, [r0]
 8015882:	b292      	uxth	r2, r2
 8015884:	455d      	cmp	r5, fp
 8015886:	bf94      	ite	ls
 8015888:	9500      	strls	r5, [sp, #0]
 801588a:	f8cd b000 	strhi.w	fp, [sp]
 801588e:	b29b      	uxth	r3, r3
 8015890:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 8015894:	47a8      	blx	r5
 8015896:	6823      	ldr	r3, [r4, #0]
 8015898:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 801589c:	a90d      	add	r1, sp, #52	@ 0x34
 801589e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80158a0:	4620      	mov	r0, r4
 80158a2:	4798      	blx	r3
 80158a4:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 80158a8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80158ac:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 80158b0:	1a5b      	subs	r3, r3, r1
 80158b2:	440a      	add	r2, r1
 80158b4:	b21b      	sxth	r3, r3
 80158b6:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 80158ba:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 80158be:	2b00      	cmp	r3, #0
 80158c0:	f47f aedc 	bne.w	801567c <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 80158c4:	fa1f f188 	uxth.w	r1, r8
 80158c8:	4650      	mov	r0, sl
 80158ca:	f7ff f8a9 	bl	8014a20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80158ce:	e6d5      	b.n	801567c <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 80158d0:	8835      	ldrh	r5, [r6, #0]
 80158d2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80158d6:	42ab      	cmp	r3, r5
 80158d8:	f67f adc4 	bls.w	8015464 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 80158dc:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80158e0:	ab0d      	add	r3, sp, #52	@ 0x34
 80158e2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80158e6:	6851      	ldr	r1, [r2, #4]
 80158e8:	c303      	stmia	r3!, {r0, r1}
 80158ea:	a80d      	add	r0, sp, #52	@ 0x34
 80158ec:	f7f9 fd75 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 80158f0:	b920      	cbnz	r0, 80158fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b8>
 80158f2:	6823      	ldr	r3, [r4, #0]
 80158f4:	a90d      	add	r1, sp, #52	@ 0x34
 80158f6:	4620      	mov	r0, r4
 80158f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80158fa:	4798      	blx	r3
 80158fc:	3501      	adds	r5, #1
 80158fe:	b2ad      	uxth	r5, r5
 8015900:	e7e7      	b.n	80158d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x78e>
 8015902:	bf00      	nop
 8015904:	240255cc 	.word	0x240255cc

08015908 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8015908:	4b03      	ldr	r3, [pc, #12]	@ (8015918 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801590a:	2200      	movs	r2, #0
 801590c:	801a      	strh	r2, [r3, #0]
 801590e:	805a      	strh	r2, [r3, #2]
 8015910:	809a      	strh	r2, [r3, #4]
 8015912:	80da      	strh	r2, [r3, #6]
 8015914:	4770      	bx	lr
 8015916:	bf00      	nop
 8015918:	24025618 	.word	0x24025618

0801591c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801591c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015920:	b09d      	sub	sp, #116	@ 0x74
 8015922:	4606      	mov	r6, r0
 8015924:	4614      	mov	r4, r2
 8015926:	468a      	mov	sl, r1
 8015928:	a803      	add	r0, sp, #12
 801592a:	461d      	mov	r5, r3
 801592c:	f001 f924 	bl	8016b78 <_ZN8touchgfx12TextProviderC1Ev>
 8015930:	6833      	ldr	r3, [r6, #0]
 8015932:	4630      	mov	r0, r6
 8015934:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8015938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801593a:	4798      	blx	r3
 801593c:	6833      	ldr	r3, [r6, #0]
 801593e:	4607      	mov	r7, r0
 8015940:	4630      	mov	r0, r6
 8015942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015944:	4798      	blx	r3
 8015946:	462a      	mov	r2, r5
 8015948:	2500      	movs	r5, #0
 801594a:	4621      	mov	r1, r4
 801594c:	9000      	str	r0, [sp, #0]
 801594e:	463b      	mov	r3, r7
 8015950:	462c      	mov	r4, r5
 8015952:	46a9      	mov	r9, r5
 8015954:	46a8      	mov	r8, r5
 8015956:	a803      	add	r0, sp, #12
 8015958:	f001 f961 	bl	8016c1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801595c:	2300      	movs	r3, #0
 801595e:	9302      	str	r3, [sp, #8]
 8015960:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015964:	429c      	cmp	r4, r3
 8015966:	d002      	beq.n	801596e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8015968:	455c      	cmp	r4, fp
 801596a:	bf18      	it	ne
 801596c:	4625      	movne	r5, r4
 801596e:	ab02      	add	r3, sp, #8
 8015970:	4632      	mov	r2, r6
 8015972:	4651      	mov	r1, sl
 8015974:	a803      	add	r0, sp, #12
 8015976:	f001 fc75 	bl	8017264 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801597a:	4604      	mov	r4, r0
 801597c:	b108      	cbz	r0, 8015982 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801597e:	280a      	cmp	r0, #10
 8015980:	d10a      	bne.n	8015998 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8015982:	45c1      	cmp	r9, r8
 8015984:	bf38      	it	cc
 8015986:	46c1      	movcc	r9, r8
 8015988:	f04f 0800 	mov.w	r8, #0
 801598c:	2c00      	cmp	r4, #0
 801598e:	d1e5      	bne.n	801595c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8015990:	4648      	mov	r0, r9
 8015992:	b01d      	add	sp, #116	@ 0x74
 8015994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015998:	9a02      	ldr	r2, [sp, #8]
 801599a:	2a00      	cmp	r2, #0
 801599c:	d0de      	beq.n	801595c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801599e:	7b57      	ldrb	r7, [r2, #13]
 80159a0:	4629      	mov	r1, r5
 80159a2:	6833      	ldr	r3, [r6, #0]
 80159a4:	007f      	lsls	r7, r7, #1
 80159a6:	8894      	ldrh	r4, [r2, #4]
 80159a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80159aa:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 80159ae:	7a97      	ldrb	r7, [r2, #10]
 80159b0:	4307      	orrs	r7, r0
 80159b2:	4630      	mov	r0, r6
 80159b4:	4798      	blx	r3
 80159b6:	4438      	add	r0, r7
 80159b8:	4480      	add	r8, r0
 80159ba:	fa1f f888 	uxth.w	r8, r8
 80159be:	e7e5      	b.n	801598c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080159c0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80159c0:	b508      	push	{r3, lr}
 80159c2:	6803      	ldr	r3, [r0, #0]
 80159c4:	68db      	ldr	r3, [r3, #12]
 80159c6:	4798      	blx	r3
 80159c8:	b128      	cbz	r0, 80159d6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80159ca:	7b43      	ldrb	r3, [r0, #13]
 80159cc:	7a80      	ldrb	r0, [r0, #10]
 80159ce:	005b      	lsls	r3, r3, #1
 80159d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80159d4:	4318      	orrs	r0, r3
 80159d6:	bd08      	pop	{r3, pc}

080159d8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80159d8:	b40e      	push	{r1, r2, r3}
 80159da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159dc:	b09e      	sub	sp, #120	@ 0x78
 80159de:	4605      	mov	r5, r0
 80159e0:	ab23      	add	r3, sp, #140	@ 0x8c
 80159e2:	a805      	add	r0, sp, #20
 80159e4:	f853 4b04 	ldr.w	r4, [r3], #4
 80159e8:	9303      	str	r3, [sp, #12]
 80159ea:	f001 f8c5 	bl	8016b78 <_ZN8touchgfx12TextProviderC1Ev>
 80159ee:	682b      	ldr	r3, [r5, #0]
 80159f0:	4628      	mov	r0, r5
 80159f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80159f4:	4798      	blx	r3
 80159f6:	682b      	ldr	r3, [r5, #0]
 80159f8:	4606      	mov	r6, r0
 80159fa:	4628      	mov	r0, r5
 80159fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80159fe:	4798      	blx	r3
 8015a00:	4633      	mov	r3, r6
 8015a02:	4621      	mov	r1, r4
 8015a04:	ae1e      	add	r6, sp, #120	@ 0x78
 8015a06:	2400      	movs	r4, #0
 8015a08:	9000      	str	r0, [sp, #0]
 8015a0a:	9a03      	ldr	r2, [sp, #12]
 8015a0c:	a805      	add	r0, sp, #20
 8015a0e:	f001 f906 	bl	8016c1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015a12:	f846 4d68 	str.w	r4, [r6, #-104]!
 8015a16:	462a      	mov	r2, r5
 8015a18:	4633      	mov	r3, r6
 8015a1a:	4621      	mov	r1, r4
 8015a1c:	a805      	add	r0, sp, #20
 8015a1e:	f001 fc21 	bl	8017264 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015a22:	b300      	cbz	r0, 8015a66 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8015a24:	280a      	cmp	r0, #10
 8015a26:	d01a      	beq.n	8015a5e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015a28:	9f04      	ldr	r7, [sp, #16]
 8015a2a:	b1c7      	cbz	r7, 8015a5e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015a2c:	7b78      	ldrb	r0, [r7, #13]
 8015a2e:	7a3b      	ldrb	r3, [r7, #8]
 8015a30:	00c1      	lsls	r1, r0, #3
 8015a32:	88ea      	ldrh	r2, [r5, #6]
 8015a34:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8015a38:	4319      	orrs	r1, r3
 8015a3a:	0643      	lsls	r3, r0, #25
 8015a3c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8015a40:	bf48      	it	mi
 8015a42:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8015a46:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8015a4a:	bf48      	it	mi
 8015a4c:	b219      	sxthmi	r1, r3
 8015a4e:	79fb      	ldrb	r3, [r7, #7]
 8015a50:	4303      	orrs	r3, r0
 8015a52:	4413      	add	r3, r2
 8015a54:	1a5b      	subs	r3, r3, r1
 8015a56:	b21b      	sxth	r3, r3
 8015a58:	429c      	cmp	r4, r3
 8015a5a:	bfb8      	it	lt
 8015a5c:	461c      	movlt	r4, r3
 8015a5e:	4633      	mov	r3, r6
 8015a60:	462a      	mov	r2, r5
 8015a62:	2100      	movs	r1, #0
 8015a64:	e7da      	b.n	8015a1c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8015a66:	b2a0      	uxth	r0, r4
 8015a68:	b01e      	add	sp, #120	@ 0x78
 8015a6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015a6e:	b003      	add	sp, #12
 8015a70:	4770      	bx	lr

08015a72 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8015a72:	7a43      	ldrb	r3, [r0, #9]
 8015a74:	8880      	ldrh	r0, [r0, #4]
 8015a76:	4418      	add	r0, r3
 8015a78:	b280      	uxth	r0, r0
 8015a7a:	4770      	bx	lr

08015a7c <_ZNK8touchgfx4Font13getFontHeightEv>:
 8015a7c:	6803      	ldr	r3, [r0, #0]
 8015a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015a80:	4718      	bx	r3

08015a82 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8015a82:	b40e      	push	{r1, r2, r3}
 8015a84:	b570      	push	{r4, r5, r6, lr}
 8015a86:	b09d      	sub	sp, #116	@ 0x74
 8015a88:	4604      	mov	r4, r0
 8015a8a:	ab21      	add	r3, sp, #132	@ 0x84
 8015a8c:	a803      	add	r0, sp, #12
 8015a8e:	f853 5b04 	ldr.w	r5, [r3], #4
 8015a92:	9302      	str	r3, [sp, #8]
 8015a94:	f001 f870 	bl	8016b78 <_ZN8touchgfx12TextProviderC1Ev>
 8015a98:	6823      	ldr	r3, [r4, #0]
 8015a9a:	4620      	mov	r0, r4
 8015a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015a9e:	4798      	blx	r3
 8015aa0:	6823      	ldr	r3, [r4, #0]
 8015aa2:	4606      	mov	r6, r0
 8015aa4:	4620      	mov	r0, r4
 8015aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015aa8:	2401      	movs	r4, #1
 8015aaa:	4798      	blx	r3
 8015aac:	4633      	mov	r3, r6
 8015aae:	9000      	str	r0, [sp, #0]
 8015ab0:	4629      	mov	r1, r5
 8015ab2:	9a02      	ldr	r2, [sp, #8]
 8015ab4:	a803      	add	r0, sp, #12
 8015ab6:	f001 f8b2 	bl	8016c1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015aba:	a803      	add	r0, sp, #12
 8015abc:	f001 fc9e 	bl	80173fc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015ac0:	b2a3      	uxth	r3, r4
 8015ac2:	b138      	cbz	r0, 8015ad4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8015ac4:	280a      	cmp	r0, #10
 8015ac6:	a803      	add	r0, sp, #12
 8015ac8:	bf04      	itt	eq
 8015aca:	3301      	addeq	r3, #1
 8015acc:	b21c      	sxtheq	r4, r3
 8015ace:	f001 fc95 	bl	80173fc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015ad2:	e7f5      	b.n	8015ac0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	b01d      	add	sp, #116	@ 0x74
 8015ad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015adc:	b003      	add	sp, #12
 8015ade:	4770      	bx	lr

08015ae0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8015ae0:	b40e      	push	{r1, r2, r3}
 8015ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ae4:	b09e      	sub	sp, #120	@ 0x78
 8015ae6:	4604      	mov	r4, r0
 8015ae8:	ab23      	add	r3, sp, #140	@ 0x8c
 8015aea:	a805      	add	r0, sp, #20
 8015aec:	f853 5b04 	ldr.w	r5, [r3], #4
 8015af0:	9303      	str	r3, [sp, #12]
 8015af2:	f001 f841 	bl	8016b78 <_ZN8touchgfx12TextProviderC1Ev>
 8015af6:	6823      	ldr	r3, [r4, #0]
 8015af8:	4620      	mov	r0, r4
 8015afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015afc:	4798      	blx	r3
 8015afe:	6823      	ldr	r3, [r4, #0]
 8015b00:	4606      	mov	r6, r0
 8015b02:	4620      	mov	r0, r4
 8015b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015b06:	4798      	blx	r3
 8015b08:	4633      	mov	r3, r6
 8015b0a:	4629      	mov	r1, r5
 8015b0c:	9000      	str	r0, [sp, #0]
 8015b0e:	9a03      	ldr	r2, [sp, #12]
 8015b10:	a805      	add	r0, sp, #20
 8015b12:	f001 f884 	bl	8016c1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015b16:	ad1e      	add	r5, sp, #120	@ 0x78
 8015b18:	2100      	movs	r1, #0
 8015b1a:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8015b1e:	4622      	mov	r2, r4
 8015b20:	a805      	add	r0, sp, #20
 8015b22:	f845 1d68 	str.w	r1, [r5, #-104]!
 8015b26:	462b      	mov	r3, r5
 8015b28:	f001 fb9c 	bl	8017264 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015b2c:	b1d8      	cbz	r0, 8015b66 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8015b2e:	280a      	cmp	r0, #10
 8015b30:	d012      	beq.n	8015b58 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8015b32:	9804      	ldr	r0, [sp, #16]
 8015b34:	b180      	cbz	r0, 8015b58 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8015b36:	7b47      	ldrb	r7, [r0, #13]
 8015b38:	88e2      	ldrh	r2, [r4, #6]
 8015b3a:	00fb      	lsls	r3, r7, #3
 8015b3c:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8015b40:	7a03      	ldrb	r3, [r0, #8]
 8015b42:	430b      	orrs	r3, r1
 8015b44:	0679      	lsls	r1, r7, #25
 8015b46:	bf44      	itt	mi
 8015b48:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015b4c:	b21b      	sxthmi	r3, r3
 8015b4e:	1ad3      	subs	r3, r2, r3
 8015b50:	b21b      	sxth	r3, r3
 8015b52:	429e      	cmp	r6, r3
 8015b54:	bfa8      	it	ge
 8015b56:	461e      	movge	r6, r3
 8015b58:	462b      	mov	r3, r5
 8015b5a:	4622      	mov	r2, r4
 8015b5c:	2100      	movs	r1, #0
 8015b5e:	a805      	add	r0, sp, #20
 8015b60:	f001 fb80 	bl	8017264 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015b64:	e7e2      	b.n	8015b2c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8015b66:	4630      	mov	r0, r6
 8015b68:	b01e      	add	sp, #120	@ 0x78
 8015b6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015b6e:	b003      	add	sp, #12
 8015b70:	4770      	bx	lr

08015b72 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8015b72:	b513      	push	{r0, r1, r4, lr}
 8015b74:	6803      	ldr	r3, [r0, #0]
 8015b76:	2400      	movs	r4, #0
 8015b78:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015b7c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015b80:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015b84:	4669      	mov	r1, sp
 8015b86:	691b      	ldr	r3, [r3, #16]
 8015b88:	9400      	str	r4, [sp, #0]
 8015b8a:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015b8e:	4798      	blx	r3
 8015b90:	b002      	add	sp, #8
 8015b92:	bd10      	pop	{r4, pc}

08015b94 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8015b94:	b538      	push	{r3, r4, r5, lr}
 8015b96:	680b      	ldr	r3, [r1, #0]
 8015b98:	460c      	mov	r4, r1
 8015b9a:	4605      	mov	r5, r0
 8015b9c:	68db      	ldr	r3, [r3, #12]
 8015b9e:	4798      	blx	r3
 8015ba0:	6823      	ldr	r3, [r4, #0]
 8015ba2:	4620      	mov	r0, r4
 8015ba4:	4629      	mov	r1, r5
 8015ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ba8:	4798      	blx	r3
 8015baa:	4628      	mov	r0, r5
 8015bac:	bd38      	pop	{r3, r4, r5, pc}

08015bae <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8015bae:	b410      	push	{r4}
 8015bb0:	880a      	ldrh	r2, [r1, #0]
 8015bb2:	8884      	ldrh	r4, [r0, #4]
 8015bb4:	4422      	add	r2, r4
 8015bb6:	800a      	strh	r2, [r1, #0]
 8015bb8:	884a      	ldrh	r2, [r1, #2]
 8015bba:	88c4      	ldrh	r4, [r0, #6]
 8015bbc:	4422      	add	r2, r4
 8015bbe:	804a      	strh	r2, [r1, #2]
 8015bc0:	6940      	ldr	r0, [r0, #20]
 8015bc2:	b120      	cbz	r0, 8015bce <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8015bc4:	6803      	ldr	r3, [r0, #0]
 8015bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bcc:	4718      	bx	r3
 8015bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015bd2:	4770      	bx	lr

08015bd4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8015bd4:	b570      	push	{r4, r5, r6, lr}
 8015bd6:	8882      	ldrh	r2, [r0, #4]
 8015bd8:	460c      	mov	r4, r1
 8015bda:	880b      	ldrh	r3, [r1, #0]
 8015bdc:	4605      	mov	r5, r0
 8015bde:	4413      	add	r3, r2
 8015be0:	800b      	strh	r3, [r1, #0]
 8015be2:	884b      	ldrh	r3, [r1, #2]
 8015be4:	88c2      	ldrh	r2, [r0, #6]
 8015be6:	4413      	add	r3, r2
 8015be8:	804b      	strh	r3, [r1, #2]
 8015bea:	1d01      	adds	r1, r0, #4
 8015bec:	4620      	mov	r0, r4
 8015bee:	f7f9 fbb1 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 8015bf2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	dd0b      	ble.n	8015c12 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015bfa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	dd07      	ble.n	8015c12 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015c02:	6968      	ldr	r0, [r5, #20]
 8015c04:	b128      	cbz	r0, 8015c12 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015c06:	6803      	ldr	r3, [r0, #0]
 8015c08:	4621      	mov	r1, r4
 8015c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c10:	4718      	bx	r3
 8015c12:	bd70      	pop	{r4, r5, r6, pc}

08015c14 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8015c14:	b570      	push	{r4, r5, r6, lr}
 8015c16:	8882      	ldrh	r2, [r0, #4]
 8015c18:	460c      	mov	r4, r1
 8015c1a:	880b      	ldrh	r3, [r1, #0]
 8015c1c:	4605      	mov	r5, r0
 8015c1e:	4413      	add	r3, r2
 8015c20:	800b      	strh	r3, [r1, #0]
 8015c22:	884b      	ldrh	r3, [r1, #2]
 8015c24:	88c2      	ldrh	r2, [r0, #6]
 8015c26:	4413      	add	r3, r2
 8015c28:	804b      	strh	r3, [r1, #2]
 8015c2a:	1d01      	adds	r1, r0, #4
 8015c2c:	4620      	mov	r0, r4
 8015c2e:	f7f9 fb91 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 8015c32:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	dd19      	ble.n	8015c6e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015c3a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	dd15      	ble.n	8015c6e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015c42:	6968      	ldr	r0, [r5, #20]
 8015c44:	b128      	cbz	r0, 8015c52 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8015c46:	6803      	ldr	r3, [r0, #0]
 8015c48:	4621      	mov	r1, r4
 8015c4a:	691b      	ldr	r3, [r3, #16]
 8015c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c50:	4718      	bx	r3
 8015c52:	4b07      	ldr	r3, [pc, #28]	@ (8015c70 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	3304      	adds	r3, #4
 8015c58:	429d      	cmp	r5, r3
 8015c5a:	d108      	bne.n	8015c6e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015c5c:	f7fe fdd0 	bl	8014800 <_ZN8touchgfx11Application11getInstanceEv>
 8015c60:	6803      	ldr	r3, [r0, #0]
 8015c62:	6821      	ldr	r1, [r4, #0]
 8015c64:	6862      	ldr	r2, [r4, #4]
 8015c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c6c:	4718      	bx	r3
 8015c6e:	bd70      	pop	{r4, r5, r6, pc}
 8015c70:	24025610 	.word	0x24025610

08015c74 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8015c74:	b570      	push	{r4, r5, r6, lr}
 8015c76:	4604      	mov	r4, r0
 8015c78:	4616      	mov	r6, r2
 8015c7a:	460d      	mov	r5, r1
 8015c7c:	b901      	cbnz	r1, 8015c80 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8015c7e:	b192      	cbz	r2, 8015ca6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8015c80:	6823      	ldr	r3, [r4, #0]
 8015c82:	4620      	mov	r0, r4
 8015c84:	699b      	ldr	r3, [r3, #24]
 8015c86:	4798      	blx	r3
 8015c88:	88e2      	ldrh	r2, [r4, #6]
 8015c8a:	88a1      	ldrh	r1, [r4, #4]
 8015c8c:	4620      	mov	r0, r4
 8015c8e:	4432      	add	r2, r6
 8015c90:	4429      	add	r1, r5
 8015c92:	b212      	sxth	r2, r2
 8015c94:	b209      	sxth	r1, r1
 8015c96:	f7ee fb64 	bl	8004362 <_ZN8touchgfx8Drawable5setXYEss>
 8015c9a:	6823      	ldr	r3, [r4, #0]
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	699b      	ldr	r3, [r3, #24]
 8015ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ca4:	4718      	bx	r3
 8015ca6:	bd70      	pop	{r4, r5, r6, pc}

08015ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8015ca8:	b510      	push	{r4, lr}
 8015caa:	2300      	movs	r3, #0
 8015cac:	4604      	mov	r4, r0
 8015cae:	4608      	mov	r0, r1
 8015cb0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8015cb4:	8023      	strh	r3, [r4, #0]
 8015cb6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015cba:	8063      	strh	r3, [r4, #2]
 8015cbc:	6803      	ldr	r3, [r0, #0]
 8015cbe:	80a1      	strh	r1, [r4, #4]
 8015cc0:	4621      	mov	r1, r4
 8015cc2:	80e2      	strh	r2, [r4, #6]
 8015cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015cc6:	4798      	blx	r3
 8015cc8:	4620      	mov	r0, r4
 8015cca:	bd10      	pop	{r4, pc}

08015ccc <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8015ccc:	4770      	bx	lr

08015cce <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8015cce:	b510      	push	{r4, lr}
 8015cd0:	4604      	mov	r4, r0
 8015cd2:	211c      	movs	r1, #28
 8015cd4:	f00d f971 	bl	8022fba <_ZdlPvj>
 8015cd8:	4620      	mov	r0, r4
 8015cda:	bd10      	pop	{r4, pc}

08015cdc <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8015cdc:	4a04      	ldr	r2, [pc, #16]	@ (8015cf0 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8015cde:	6002      	str	r2, [r0, #0]
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8015ce6:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015cea:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015cee:	4770      	bx	lr
 8015cf0:	080274ac 	.word	0x080274ac

08015cf4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 8015cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cf8:	4604      	mov	r4, r0
 8015cfa:	b087      	sub	sp, #28
 8015cfc:	8b45      	ldrh	r5, [r0, #26]
 8015cfe:	f8b2 c000 	ldrh.w	ip, [r2]
 8015d02:	9105      	str	r1, [sp, #20]
 8015d04:	1c68      	adds	r0, r5, #1
 8015d06:	68e1      	ldr	r1, [r4, #12]
 8015d08:	9203      	str	r2, [sp, #12]
 8015d0a:	b280      	uxth	r0, r0
 8015d0c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8015d10:	f01c 0501 	ands.w	r5, ip, #1
 8015d14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015d18:	9502      	str	r5, [sp, #8]
 8015d1a:	d07d      	beq.n	8015e18 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x124>
 8015d1c:	ee07 2a90 	vmov	s15, r2
 8015d20:	8360      	strh	r0, [r4, #26]
 8015d22:	f04f 0e00 	mov.w	lr, #0
 8015d26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015d2a:	ee06 ea10 	vmov	s12, lr
 8015d2e:	edc1 6a00 	vstr	s13, [r1]
 8015d32:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015d36:	8b61      	ldrh	r1, [r4, #26]
 8015d38:	ee07 2a10 	vmov	s14, r2
 8015d3c:	68e2      	ldr	r2, [r4, #12]
 8015d3e:	1c48      	adds	r0, r1, #1
 8015d40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015d44:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015d48:	8360      	strh	r0, [r4, #26]
 8015d4a:	ed82 7a00 	vstr	s14, [r2]
 8015d4e:	8b21      	ldrh	r1, [r4, #24]
 8015d50:	2501      	movs	r5, #1
 8015d52:	68a2      	ldr	r2, [r4, #8]
 8015d54:	3304      	adds	r3, #4
 8015d56:	1c48      	adds	r0, r1, #1
 8015d58:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8015d5c:	9300      	str	r3, [sp, #0]
 8015d5e:	46aa      	mov	sl, r5
 8015d60:	8320      	strh	r0, [r4, #24]
 8015d62:	462e      	mov	r6, r5
 8015d64:	5455      	strb	r5, [r2, r1]
 8015d66:	2200      	movs	r2, #0
 8015d68:	ee07 2a90 	vmov	s15, r2
 8015d6c:	4613      	mov	r3, r2
 8015d6e:	4611      	mov	r1, r2
 8015d70:	9201      	str	r2, [sp, #4]
 8015d72:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8015d76:	9805      	ldr	r0, [sp, #20]
 8015d78:	f108 0701 	add.w	r7, r8, #1
 8015d7c:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8015d80:	42a8      	cmp	r0, r5
 8015d82:	b2bf      	uxth	r7, r7
 8015d84:	eb0b 0908 	add.w	r9, fp, r8
 8015d88:	f340 80db 	ble.w	8015f42 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x24e>
 8015d8c:	fa4c f906 	asr.w	r9, ip, r6
 8015d90:	f009 0901 	and.w	r9, r9, #1
 8015d94:	fa5f f389 	uxtb.w	r3, r9
 8015d98:	9304      	str	r3, [sp, #16]
 8015d9a:	9b00      	ldr	r3, [sp, #0]
 8015d9c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015da0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015da4:	f1b9 0f00 	cmp.w	r9, #0
 8015da8:	d07d      	beq.n	8015ea6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1b2>
 8015daa:	ee05 1a10 	vmov	s10, r1
 8015dae:	8327      	strh	r7, [r4, #24]
 8015db0:	eef8 4ac5 	vcvt.f32.s32	s9, s10
 8015db4:	ee05 3a10 	vmov	s10, r3
 8015db8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015dbc:	f1ba 0f00 	cmp.w	sl, #0
 8015dc0:	d050      	beq.n	8015e64 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x170>
 8015dc2:	f04f 0002 	mov.w	r0, #2
 8015dc6:	f80b 0008 	strb.w	r0, [fp, r8]
 8015dca:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015dce:	68e7      	ldr	r7, [r4, #12]
 8015dd0:	f108 0901 	add.w	r9, r8, #1
 8015dd4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015dd8:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015ddc:	edc7 4a00 	vstr	s9, [r7]
 8015de0:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015de4:	68e7      	ldr	r7, [r4, #12]
 8015de6:	f108 0901 	add.w	r9, r8, #1
 8015dea:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015dee:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015df2:	ed87 5a00 	vstr	s10, [r7]
 8015df6:	3601      	adds	r6, #1
 8015df8:	2e10      	cmp	r6, #16
 8015dfa:	d106      	bne.n	8015e0a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x116>
 8015dfc:	9e01      	ldr	r6, [sp, #4]
 8015dfe:	9803      	ldr	r0, [sp, #12]
 8015e00:	3601      	adds	r6, #1
 8015e02:	9601      	str	r6, [sp, #4]
 8015e04:	f830 c016 	ldrh.w	ip, [r0, r6, lsl #1]
 8015e08:	2600      	movs	r6, #0
 8015e0a:	9800      	ldr	r0, [sp, #0]
 8015e0c:	3501      	adds	r5, #1
 8015e0e:	f8dd a010 	ldr.w	sl, [sp, #16]
 8015e12:	3004      	adds	r0, #4
 8015e14:	9000      	str	r0, [sp, #0]
 8015e16:	e7ac      	b.n	8015d72 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x7e>
 8015e18:	ee06 2a10 	vmov	s12, r2
 8015e1c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8015e20:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8015e24:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015e28:	ee16 5a10 	vmov	r5, s12
 8015e2c:	442a      	add	r2, r5
 8015e2e:	ee06 2a90 	vmov	s13, r2
 8015e32:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8015e36:	8360      	strh	r0, [r4, #26]
 8015e38:	4472      	add	r2, lr
 8015e3a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015e3e:	ee07 2a10 	vmov	s14, r2
 8015e42:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015e46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015e4a:	edc1 6a00 	vstr	s13, [r1]
 8015e4e:	8b61      	ldrh	r1, [r4, #26]
 8015e50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015e54:	68e2      	ldr	r2, [r4, #12]
 8015e56:	1c48      	adds	r0, r1, #1
 8015e58:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015e5c:	8360      	strh	r0, [r4, #26]
 8015e5e:	ed82 7a00 	vstr	s14, [r2]
 8015e62:	e774      	b.n	8015d4e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x5a>
 8015e64:	f04f 0005 	mov.w	r0, #5
 8015e68:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 8015e6c:	f80b 0008 	strb.w	r0, [fp, r8]
 8015e70:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015e74:	68e7      	ldr	r7, [r4, #12]
 8015e76:	f108 0901 	add.w	r9, r8, #1
 8015e7a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015e7e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015e82:	ed87 4a00 	vstr	s8, [r7]
 8015e86:	ee04 2a10 	vmov	s8, r2
 8015e8a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015e8e:	68e7      	ldr	r7, [r4, #12]
 8015e90:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8015e94:	f108 0901 	add.w	r9, r8, #1
 8015e98:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015e9c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015ea0:	ed87 4a00 	vstr	s8, [r7]
 8015ea4:	e791      	b.n	8015dca <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xd6>
 8015ea6:	f1ba 0f00 	cmp.w	sl, #0
 8015eaa:	d146      	bne.n	8015f3a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x246>
 8015eac:	f04f 0005 	mov.w	r0, #5
 8015eb0:	8327      	strh	r7, [r4, #24]
 8015eb2:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015eb6:	f80b 0008 	strb.w	r0, [fp, r8]
 8015eba:	ee17 0a90 	vmov	r0, s15
 8015ebe:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015ec2:	68e7      	ldr	r7, [r4, #12]
 8015ec4:	4408      	add	r0, r1
 8015ec6:	f108 0901 	add.w	r9, r8, #1
 8015eca:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015ece:	ee07 0a90 	vmov	s15, r0
 8015ed2:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015ed6:	ed87 5a00 	vstr	s10, [r7]
 8015eda:	ee05 2a10 	vmov	s10, r2
 8015ede:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ee6:	68e7      	ldr	r7, [r4, #12]
 8015ee8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015eec:	f108 0901 	add.w	r9, r8, #1
 8015ef0:	441a      	add	r2, r3
 8015ef2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015ef6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015efa:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015efe:	ed87 5a00 	vstr	s10, [r7]
 8015f02:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015f06:	68e7      	ldr	r7, [r4, #12]
 8015f08:	f108 0901 	add.w	r9, r8, #1
 8015f0c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015f10:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015f14:	edc7 7a00 	vstr	s15, [r7]
 8015f18:	ee07 2a90 	vmov	s15, r2
 8015f1c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015f24:	68e7      	ldr	r7, [r4, #12]
 8015f26:	f108 0901 	add.w	r9, r8, #1
 8015f2a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015f2e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015f32:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015f36:	edc7 7a00 	vstr	s15, [r7]
 8015f3a:	461a      	mov	r2, r3
 8015f3c:	ee07 1a90 	vmov	s15, r1
 8015f40:	e759      	b.n	8015df6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8015f42:	f1ba 0f00 	cmp.w	sl, #0
 8015f46:	d045      	beq.n	8015fd4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 8015f48:	ee05 1a90 	vmov	s11, r1
 8015f4c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015f50:	eef4 5a66 	vcmp.f32	s11, s13
 8015f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f58:	d108      	bne.n	8015f6c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x278>
 8015f5a:	ee05 3a90 	vmov	s11, r3
 8015f5e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015f62:	eef4 5a47 	vcmp.f32	s11, s14
 8015f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f6a:	d033      	beq.n	8015fd4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 8015f6c:	9b02      	ldr	r3, [sp, #8]
 8015f6e:	8327      	strh	r7, [r4, #24]
 8015f70:	b1b3      	cbz	r3, 8015fa0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2ac>
 8015f72:	2302      	movs	r3, #2
 8015f74:	f889 3000 	strb.w	r3, [r9]
 8015f78:	8b62      	ldrh	r2, [r4, #26]
 8015f7a:	68e3      	ldr	r3, [r4, #12]
 8015f7c:	1c51      	adds	r1, r2, #1
 8015f7e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015f82:	8361      	strh	r1, [r4, #26]
 8015f84:	edc3 6a00 	vstr	s13, [r3]
 8015f88:	8b62      	ldrh	r2, [r4, #26]
 8015f8a:	68e3      	ldr	r3, [r4, #12]
 8015f8c:	1c51      	adds	r1, r2, #1
 8015f8e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015f92:	8361      	strh	r1, [r4, #26]
 8015f94:	ed83 7a00 	vstr	s14, [r3]
 8015f98:	9800      	ldr	r0, [sp, #0]
 8015f9a:	b007      	add	sp, #28
 8015f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fa0:	2305      	movs	r3, #5
 8015fa2:	f889 3000 	strb.w	r3, [r9]
 8015fa6:	8b62      	ldrh	r2, [r4, #26]
 8015fa8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015fac:	68e3      	ldr	r3, [r4, #12]
 8015fae:	ee07 ea90 	vmov	s15, lr
 8015fb2:	1c51      	adds	r1, r2, #1
 8015fb4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015fbc:	8361      	strh	r1, [r4, #26]
 8015fbe:	ed83 6a00 	vstr	s12, [r3]
 8015fc2:	8b62      	ldrh	r2, [r4, #26]
 8015fc4:	68e3      	ldr	r3, [r4, #12]
 8015fc6:	1c51      	adds	r1, r2, #1
 8015fc8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015fcc:	8361      	strh	r1, [r4, #26]
 8015fce:	edc3 7a00 	vstr	s15, [r3]
 8015fd2:	e7d1      	b.n	8015f78 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 8015fd4:	ee05 2a90 	vmov	s11, r2
 8015fd8:	2305      	movs	r3, #5
 8015fda:	9902      	ldr	r1, [sp, #8]
 8015fdc:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015fe0:	8327      	strh	r7, [r4, #24]
 8015fe2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015fe6:	f889 3000 	strb.w	r3, [r9]
 8015fea:	b181      	cbz	r1, 801600e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x31a>
 8015fec:	8b62      	ldrh	r2, [r4, #26]
 8015fee:	68e3      	ldr	r3, [r4, #12]
 8015ff0:	1c51      	adds	r1, r2, #1
 8015ff2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015ff6:	8361      	strh	r1, [r4, #26]
 8015ff8:	ed83 5a00 	vstr	s10, [r3]
 8015ffc:	8b62      	ldrh	r2, [r4, #26]
 8015ffe:	68e3      	ldr	r3, [r4, #12]
 8016000:	1c51      	adds	r1, r2, #1
 8016002:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016006:	8361      	strh	r1, [r4, #26]
 8016008:	edc3 5a00 	vstr	s11, [r3]
 801600c:	e7b4      	b.n	8015f78 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 801600e:	8b65      	ldrh	r5, [r4, #26]
 8016010:	ee17 0a90 	vmov	r0, s15
 8016014:	68e1      	ldr	r1, [r4, #12]
 8016016:	4472      	add	r2, lr
 8016018:	1c6e      	adds	r6, r5, #1
 801601a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801601e:	8366      	strh	r6, [r4, #26]
 8016020:	ed81 5a00 	vstr	s10, [r1]
 8016024:	8b65      	ldrh	r5, [r4, #26]
 8016026:	68e1      	ldr	r1, [r4, #12]
 8016028:	1c6e      	adds	r6, r5, #1
 801602a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801602e:	8366      	strh	r6, [r4, #26]
 8016030:	edc1 5a00 	vstr	s11, [r1]
 8016034:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8016038:	8b65      	ldrh	r5, [r4, #26]
 801603a:	68e1      	ldr	r1, [r4, #12]
 801603c:	1c6e      	adds	r6, r5, #1
 801603e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8016042:	ee16 5a10 	vmov	r5, s12
 8016046:	8366      	strh	r6, [r4, #26]
 8016048:	4428      	add	r0, r5
 801604a:	ee07 0a90 	vmov	s15, r0
 801604e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016052:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016056:	edc1 7a00 	vstr	s15, [r1]
 801605a:	ee07 2a90 	vmov	s15, r2
 801605e:	8b61      	ldrh	r1, [r4, #26]
 8016060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016064:	68e5      	ldr	r5, [r4, #12]
 8016066:	1c4e      	adds	r6, r1, #1
 8016068:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801606c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016070:	8366      	strh	r6, [r4, #26]
 8016072:	edc1 7a00 	vstr	s15, [r1]
 8016076:	8b22      	ldrh	r2, [r4, #24]
 8016078:	68a1      	ldr	r1, [r4, #8]
 801607a:	1c55      	adds	r5, r2, #1
 801607c:	8325      	strh	r5, [r4, #24]
 801607e:	548b      	strb	r3, [r1, r2]
 8016080:	e791      	b.n	8015fa6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2b2>
	...

08016084 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8016084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016088:	4604      	mov	r4, r0
 801608a:	b08e      	sub	sp, #56	@ 0x38
 801608c:	4699      	mov	r9, r3
 801608e:	4688      	mov	r8, r1
 8016090:	4615      	mov	r5, r2
 8016092:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8016094:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8016098:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801609a:	f7ed fdc9 	bl	8003c30 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801609e:	6060      	str	r0, [r4, #4]
 80160a0:	f1b9 0f00 	cmp.w	r9, #0
 80160a4:	f000 80e8 	beq.w	8016278 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 80160a8:	2800      	cmp	r0, #0
 80160aa:	f000 80e5 	beq.w	8016278 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 80160ae:	a805      	add	r0, sp, #20
 80160b0:	f000 f8f9 	bl	80162a6 <_ZN8touchgfx9Matrix3x3C1Ev>
 80160b4:	6833      	ldr	r3, [r6, #0]
 80160b6:	4630      	mov	r0, r6
 80160b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80160ba:	4798      	blx	r3
 80160bc:	a805      	add	r0, sp, #20
 80160be:	eef0 0a40 	vmov.f32	s1, s0
 80160c2:	f000 f8f4 	bl	80162ae <_ZN8touchgfx9Matrix3x35scaleEff>
 80160c6:	6860      	ldr	r0, [r4, #4]
 80160c8:	f1ba 0f03 	cmp.w	sl, #3
 80160cc:	d83b      	bhi.n	8016146 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 80160ce:	e8df f00a 	tbb	[pc, sl]
 80160d2:	1002      	.short	0x1002
 80160d4:	9f71      	.short	0x9f71
 80160d6:	6803      	ldr	r3, [r0, #0]
 80160d8:	462a      	mov	r2, r5
 80160da:	4641      	mov	r1, r8
 80160dc:	689b      	ldr	r3, [r3, #8]
 80160de:	4798      	blx	r3
 80160e0:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 80160e4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80160e8:	ee07 7a90 	vmov	s15, r7
 80160ec:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80160f0:	e026      	b.n	8016140 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 80160f2:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 80160f6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80160fa:	8869      	ldrh	r1, [r5, #2]
 80160fc:	1a9b      	subs	r3, r3, r2
 80160fe:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016102:	aa03      	add	r2, sp, #12
 8016104:	1a5b      	subs	r3, r3, r1
 8016106:	4641      	mov	r1, r8
 8016108:	f8ad 300c 	strh.w	r3, [sp, #12]
 801610c:	882b      	ldrh	r3, [r5, #0]
 801610e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016112:	88ab      	ldrh	r3, [r5, #4]
 8016114:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016118:	6803      	ldr	r3, [r0, #0]
 801611a:	689b      	ldr	r3, [r3, #8]
 801611c:	4798      	blx	r3
 801611e:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8016280 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 8016122:	a805      	add	r0, sp, #20
 8016124:	f000 f8e8 	bl	80162f8 <_ZN8touchgfx9Matrix3x36rotateEf>
 8016128:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801612c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801612e:	ee07 7a90 	vmov	s15, r7
 8016132:	1a9b      	subs	r3, r3, r2
 8016134:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8016138:	ee00 3a10 	vmov	s0, r3
 801613c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8016140:	a805      	add	r0, sp, #20
 8016142:	f000 f927 	bl	8016394 <_ZN8touchgfx9Matrix3x39translateEff>
 8016146:	6860      	ldr	r0, [r4, #4]
 8016148:	a905      	add	r1, sp, #20
 801614a:	2500      	movs	r5, #0
 801614c:	f109 0602 	add.w	r6, r9, #2
 8016150:	6803      	ldr	r3, [r0, #0]
 8016152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016154:	4798      	blx	r3
 8016156:	6860      	ldr	r0, [r4, #4]
 8016158:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801615a:	6803      	ldr	r3, [r0, #0]
 801615c:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8016160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016162:	4798      	blx	r3
 8016164:	6860      	ldr	r0, [r4, #4]
 8016166:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 801616a:	6803      	ldr	r3, [r0, #0]
 801616c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801616e:	4798      	blx	r3
 8016170:	6860      	ldr	r0, [r4, #4]
 8016172:	2101      	movs	r1, #1
 8016174:	6803      	ldr	r3, [r0, #0]
 8016176:	68db      	ldr	r3, [r3, #12]
 8016178:	4798      	blx	r3
 801617a:	f8b9 7000 	ldrh.w	r7, [r9]
 801617e:	f104 0310 	add.w	r3, r4, #16
 8016182:	61a5      	str	r5, [r4, #24]
 8016184:	f104 0208 	add.w	r2, r4, #8
 8016188:	f104 0114 	add.w	r1, r4, #20
 801618c:	f104 000c 	add.w	r0, r4, #12
 8016190:	f7ee fb84 	bl	800489c <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8016194:	42af      	cmp	r7, r5
 8016196:	dd60      	ble.n	801625a <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8016198:	8831      	ldrh	r1, [r6, #0]
 801619a:	1cb2      	adds	r2, r6, #2
 801619c:	4620      	mov	r0, r4
 801619e:	3501      	adds	r5, #1
 80161a0:	f101 030f 	add.w	r3, r1, #15
 80161a4:	f3c3 1307 	ubfx	r3, r3, #4, #8
 80161a8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80161ac:	f7ff fda2 	bl	8015cf4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 80161b0:	4606      	mov	r6, r0
 80161b2:	e7ef      	b.n	8016194 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 80161b4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80161b8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80161bc:	8829      	ldrh	r1, [r5, #0]
 80161be:	1a9b      	subs	r3, r3, r2
 80161c0:	f8ad 2010 	strh.w	r2, [sp, #16]
 80161c4:	aa03      	add	r2, sp, #12
 80161c6:	1a5b      	subs	r3, r3, r1
 80161c8:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80161cc:	886d      	ldrh	r5, [r5, #2]
 80161ce:	f8ad 300c 	strh.w	r3, [sp, #12]
 80161d2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80161d6:	f8ad 1012 	strh.w	r1, [sp, #18]
 80161da:	1a5b      	subs	r3, r3, r1
 80161dc:	4641      	mov	r1, r8
 80161de:	1b5b      	subs	r3, r3, r5
 80161e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80161e4:	6803      	ldr	r3, [r0, #0]
 80161e6:	689b      	ldr	r3, [r3, #8]
 80161e8:	4798      	blx	r3
 80161ea:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8016284 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 80161ee:	a805      	add	r0, sp, #20
 80161f0:	f000 f882 	bl	80162f8 <_ZN8touchgfx9Matrix3x36rotateEf>
 80161f4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80161f8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80161fa:	1a9b      	subs	r3, r3, r2
 80161fc:	ee00 3a90 	vmov	s1, r3
 8016200:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8016204:	1bdb      	subs	r3, r3, r7
 8016206:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801620a:	ee00 3a10 	vmov	s0, r3
 801620e:	e795      	b.n	801613c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8016210:	886b      	ldrh	r3, [r5, #2]
 8016212:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8016216:	f8ad 300c 	strh.w	r3, [sp, #12]
 801621a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801621e:	8829      	ldrh	r1, [r5, #0]
 8016220:	1a9b      	subs	r3, r3, r2
 8016222:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016226:	aa03      	add	r2, sp, #12
 8016228:	1a5b      	subs	r3, r3, r1
 801622a:	4641      	mov	r1, r8
 801622c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016230:	88eb      	ldrh	r3, [r5, #6]
 8016232:	f8ad 3010 	strh.w	r3, [sp, #16]
 8016236:	6803      	ldr	r3, [r0, #0]
 8016238:	689b      	ldr	r3, [r3, #8]
 801623a:	4798      	blx	r3
 801623c:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8016288 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8016240:	a805      	add	r0, sp, #20
 8016242:	f000 f859 	bl	80162f8 <_ZN8touchgfx9Matrix3x36rotateEf>
 8016246:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801624a:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801624e:	1bdb      	subs	r3, r3, r7
 8016250:	ee00 3a90 	vmov	s1, r3
 8016254:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8016258:	e748      	b.n	80160ec <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801625a:	6860      	ldr	r0, [r4, #4]
 801625c:	2100      	movs	r1, #0
 801625e:	8b22      	ldrh	r2, [r4, #24]
 8016260:	6803      	ldr	r3, [r0, #0]
 8016262:	9101      	str	r1, [sp, #4]
 8016264:	8b61      	ldrh	r1, [r4, #26]
 8016266:	9100      	str	r1, [sp, #0]
 8016268:	6a1d      	ldr	r5, [r3, #32]
 801626a:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801626e:	47a8      	blx	r5
 8016270:	6860      	ldr	r0, [r4, #4]
 8016272:	6803      	ldr	r3, [r0, #0]
 8016274:	69db      	ldr	r3, [r3, #28]
 8016276:	4798      	blx	r3
 8016278:	b00e      	add	sp, #56	@ 0x38
 801627a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801627e:	bf00      	nop
 8016280:	42b40000 	.word	0x42b40000
 8016284:	43340000 	.word	0x43340000
 8016288:	43870000 	.word	0x43870000

0801628c <_ZN8touchgfx9Matrix3x35resetEv>:
 801628c:	2300      	movs	r3, #0
 801628e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8016292:	6043      	str	r3, [r0, #4]
 8016294:	6002      	str	r2, [r0, #0]
 8016296:	6083      	str	r3, [r0, #8]
 8016298:	60c3      	str	r3, [r0, #12]
 801629a:	6102      	str	r2, [r0, #16]
 801629c:	6143      	str	r3, [r0, #20]
 801629e:	6183      	str	r3, [r0, #24]
 80162a0:	61c3      	str	r3, [r0, #28]
 80162a2:	6202      	str	r2, [r0, #32]
 80162a4:	4770      	bx	lr

080162a6 <_ZN8touchgfx9Matrix3x3C1Ev>:
 80162a6:	b508      	push	{r3, lr}
 80162a8:	f7ff fff0 	bl	801628c <_ZN8touchgfx9Matrix3x35resetEv>
 80162ac:	bd08      	pop	{r3, pc}

080162ae <_ZN8touchgfx9Matrix3x35scaleEff>:
 80162ae:	edd0 7a00 	vldr	s15, [r0]
 80162b2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80162b6:	edc0 7a00 	vstr	s15, [r0]
 80162ba:	edd0 7a01 	vldr	s15, [r0, #4]
 80162be:	ee67 7a80 	vmul.f32	s15, s15, s0
 80162c2:	edc0 7a01 	vstr	s15, [r0, #4]
 80162c6:	edd0 7a02 	vldr	s15, [r0, #8]
 80162ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 80162ce:	edd0 7a03 	vldr	s15, [r0, #12]
 80162d2:	ee67 7aa0 	vmul.f32	s15, s15, s1
 80162d6:	ed80 0a02 	vstr	s0, [r0, #8]
 80162da:	edc0 7a03 	vstr	s15, [r0, #12]
 80162de:	edd0 7a04 	vldr	s15, [r0, #16]
 80162e2:	ee67 7aa0 	vmul.f32	s15, s15, s1
 80162e6:	edc0 7a04 	vstr	s15, [r0, #16]
 80162ea:	edd0 7a05 	vldr	s15, [r0, #20]
 80162ee:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80162f2:	edc0 0a05 	vstr	s1, [r0, #20]
 80162f6:	4770      	bx	lr

080162f8 <_ZN8touchgfx9Matrix3x36rotateEf>:
 80162f8:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801638c <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 80162fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016300:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8016390 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8016304:	b510      	push	{r4, lr}
 8016306:	ed2d 8b02 	vpush	{d8}
 801630a:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801630e:	4604      	mov	r4, r0
 8016310:	eeb0 0a68 	vmov.f32	s0, s17
 8016314:	f00c ff88 	bl	8023228 <cosf>
 8016318:	eeb0 8a40 	vmov.f32	s16, s0
 801631c:	eeb0 0a68 	vmov.f32	s0, s17
 8016320:	f00c febe 	bl	80230a0 <sinf>
 8016324:	edd4 6a03 	vldr	s13, [r4, #12]
 8016328:	edd4 4a00 	vldr	s9, [r4]
 801632c:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8016330:	ed94 7a04 	vldr	s14, [r4, #16]
 8016334:	ed94 5a01 	vldr	s10, [r4, #4]
 8016338:	ee66 6a88 	vmul.f32	s13, s13, s16
 801633c:	edd4 5a02 	vldr	s11, [r4, #8]
 8016340:	eee8 7a24 	vfma.f32	s15, s16, s9
 8016344:	eee0 6a24 	vfma.f32	s13, s0, s9
 8016348:	edc4 7a00 	vstr	s15, [r4]
 801634c:	ee60 7a47 	vnmul.f32	s15, s0, s14
 8016350:	ee27 7a08 	vmul.f32	s14, s14, s16
 8016354:	edc4 6a03 	vstr	s13, [r4, #12]
 8016358:	eee8 7a05 	vfma.f32	s15, s16, s10
 801635c:	eea0 7a05 	vfma.f32	s14, s0, s10
 8016360:	edc4 7a01 	vstr	s15, [r4, #4]
 8016364:	edd4 7a05 	vldr	s15, [r4, #20]
 8016368:	ed84 7a04 	vstr	s14, [r4, #16]
 801636c:	ee20 6a67 	vnmul.f32	s12, s0, s15
 8016370:	ee67 7a88 	vmul.f32	s15, s15, s16
 8016374:	eea8 6a25 	vfma.f32	s12, s16, s11
 8016378:	eee0 7a25 	vfma.f32	s15, s0, s11
 801637c:	ecbd 8b02 	vpop	{d8}
 8016380:	ed84 6a02 	vstr	s12, [r4, #8]
 8016384:	edc4 7a05 	vstr	s15, [r4, #20]
 8016388:	bd10      	pop	{r4, pc}
 801638a:	bf00      	nop
 801638c:	40490fdb 	.word	0x40490fdb
 8016390:	43340000 	.word	0x43340000

08016394 <_ZN8touchgfx9Matrix3x39translateEff>:
 8016394:	ed90 6a06 	vldr	s12, [r0, #24]
 8016398:	edd0 7a00 	vldr	s15, [r0]
 801639c:	edd0 6a07 	vldr	s13, [r0, #28]
 80163a0:	eee6 7a00 	vfma.f32	s15, s12, s0
 80163a4:	ed90 7a08 	vldr	s14, [r0, #32]
 80163a8:	edc0 7a00 	vstr	s15, [r0]
 80163ac:	edd0 7a01 	vldr	s15, [r0, #4]
 80163b0:	eee6 7a80 	vfma.f32	s15, s13, s0
 80163b4:	edc0 7a01 	vstr	s15, [r0, #4]
 80163b8:	edd0 7a02 	vldr	s15, [r0, #8]
 80163bc:	eee7 7a00 	vfma.f32	s15, s14, s0
 80163c0:	edc0 7a02 	vstr	s15, [r0, #8]
 80163c4:	edd0 7a03 	vldr	s15, [r0, #12]
 80163c8:	eee6 7a20 	vfma.f32	s15, s12, s1
 80163cc:	edc0 7a03 	vstr	s15, [r0, #12]
 80163d0:	edd0 7a04 	vldr	s15, [r0, #16]
 80163d4:	eee6 7aa0 	vfma.f32	s15, s13, s1
 80163d8:	edc0 7a04 	vstr	s15, [r0, #16]
 80163dc:	edd0 7a05 	vldr	s15, [r0, #20]
 80163e0:	eee7 7a20 	vfma.f32	s15, s14, s1
 80163e4:	edc0 7a05 	vstr	s15, [r0, #20]
 80163e8:	4770      	bx	lr

080163ea <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 80163ea:	edd0 6a01 	vldr	s13, [r0, #4]
 80163ee:	b084      	sub	sp, #16
 80163f0:	edd0 7a04 	vldr	s15, [r0, #16]
 80163f4:	ed90 7a03 	vldr	s14, [r0, #12]
 80163f8:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80163fc:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8016400:	edd0 6a00 	vldr	s13, [r0]
 8016404:	eee7 7a00 	vfma.f32	s15, s14, s0
 8016408:	ed90 7a05 	vldr	s14, [r0, #20]
 801640c:	eee6 0a80 	vfma.f32	s1, s13, s0
 8016410:	ed90 0a02 	vldr	s0, [r0, #8]
 8016414:	ee30 0a80 	vadd.f32	s0, s1, s0
 8016418:	ee77 0a87 	vadd.f32	s1, s15, s14
 801641c:	b004      	add	sp, #16
 801641e:	4770      	bx	lr

08016420 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8016420:	b530      	push	{r4, r5, lr}
 8016422:	8083      	strh	r3, [r0, #4]
 8016424:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016428:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801642c:	80c3      	strh	r3, [r0, #6]
 801642e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8016432:	6141      	str	r1, [r0, #20]
 8016434:	7203      	strb	r3, [r0, #8]
 8016436:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801643a:	8302      	strh	r2, [r0, #24]
 801643c:	7243      	strb	r3, [r0, #9]
 801643e:	7a83      	ldrb	r3, [r0, #10]
 8016440:	f365 0306 	bfi	r3, r5, #0, #7
 8016444:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8016448:	f365 13c7 	bfi	r3, r5, #7, #1
 801644c:	7283      	strb	r3, [r0, #10]
 801644e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8016452:	72c3      	strb	r3, [r0, #11]
 8016454:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8016458:	7303      	strb	r3, [r0, #12]
 801645a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801645e:	81c3      	strh	r3, [r0, #14]
 8016460:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8016464:	8203      	strh	r3, [r0, #16]
 8016466:	4b01      	ldr	r3, [pc, #4]	@ (801646c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8016468:	6003      	str	r3, [r0, #0]
 801646a:	bd30      	pop	{r4, r5, pc}
 801646c:	080274c0 	.word	0x080274c0

08016470 <_ZNK8touchgfx9ConstFont4findEt>:
 8016470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016472:	6944      	ldr	r4, [r0, #20]
 8016474:	b3bc      	cbz	r4, 80164e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016476:	88a3      	ldrh	r3, [r4, #4]
 8016478:	8b02      	ldrh	r2, [r0, #24]
 801647a:	1acb      	subs	r3, r1, r3
 801647c:	f102 32ff 	add.w	r2, r2, #4294967295
 8016480:	d431      	bmi.n	80164e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016482:	4293      	cmp	r3, r2
 8016484:	dd0c      	ble.n	80164a0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8016486:	230e      	movs	r3, #14
 8016488:	fb03 4302 	mla	r3, r3, r2, r4
 801648c:	889b      	ldrh	r3, [r3, #4]
 801648e:	1a5b      	subs	r3, r3, r1
 8016490:	1ad3      	subs	r3, r2, r3
 8016492:	429a      	cmp	r2, r3
 8016494:	db27      	blt.n	80164e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016496:	2b00      	cmp	r3, #0
 8016498:	bfbc      	itt	lt
 801649a:	2302      	movlt	r3, #2
 801649c:	fb92 f3f3 	sdivlt	r3, r2, r3
 80164a0:	2500      	movs	r5, #0
 80164a2:	260e      	movs	r6, #14
 80164a4:	4295      	cmp	r5, r2
 80164a6:	dc1e      	bgt.n	80164e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80164a8:	fb06 4003 	mla	r0, r6, r3, r4
 80164ac:	8887      	ldrh	r7, [r0, #4]
 80164ae:	42b9      	cmp	r1, r7
 80164b0:	d01a      	beq.n	80164e8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80164b2:	d20d      	bcs.n	80164d0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80164b4:	1e5a      	subs	r2, r3, #1
 80164b6:	4295      	cmp	r5, r2
 80164b8:	dc15      	bgt.n	80164e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80164ba:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80164be:	1a5b      	subs	r3, r3, r1
 80164c0:	1ad3      	subs	r3, r2, r3
 80164c2:	429a      	cmp	r2, r3
 80164c4:	db0f      	blt.n	80164e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80164c6:	429d      	cmp	r5, r3
 80164c8:	ddec      	ble.n	80164a4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80164ca:	1953      	adds	r3, r2, r5
 80164cc:	105b      	asrs	r3, r3, #1
 80164ce:	e7e9      	b.n	80164a4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80164d0:	1c5d      	adds	r5, r3, #1
 80164d2:	42aa      	cmp	r2, r5
 80164d4:	db07      	blt.n	80164e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80164d6:	8a43      	ldrh	r3, [r0, #18]
 80164d8:	1acb      	subs	r3, r1, r3
 80164da:	442b      	add	r3, r5
 80164dc:	429d      	cmp	r5, r3
 80164de:	dc02      	bgt.n	80164e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80164e0:	429a      	cmp	r2, r3
 80164e2:	dadf      	bge.n	80164a4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80164e4:	e7f1      	b.n	80164ca <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80164e6:	2000      	movs	r0, #0
 80164e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080164ea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80164ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164ec:	4604      	mov	r4, r0
 80164ee:	4617      	mov	r7, r2
 80164f0:	461e      	mov	r6, r3
 80164f2:	b911      	cbnz	r1, 80164fa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80164f4:	2500      	movs	r5, #0
 80164f6:	4628      	mov	r0, r5
 80164f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164fa:	290a      	cmp	r1, #10
 80164fc:	d0fa      	beq.n	80164f4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80164fe:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8016502:	4291      	cmp	r1, r2
 8016504:	d0f6      	beq.n	80164f4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016506:	f242 020b 	movw	r2, #8203	@ 0x200b
 801650a:	4291      	cmp	r1, r2
 801650c:	d0f2      	beq.n	80164f4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801650e:	f7ff ffaf 	bl	8016470 <_ZNK8touchgfx9ConstFont4findEt>
 8016512:	4605      	mov	r5, r0
 8016514:	b950      	cbnz	r0, 801652c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8016516:	6823      	ldr	r3, [r4, #0]
 8016518:	4620      	mov	r0, r4
 801651a:	691b      	ldr	r3, [r3, #16]
 801651c:	4798      	blx	r3
 801651e:	4601      	mov	r1, r0
 8016520:	4620      	mov	r0, r4
 8016522:	f7ff ffa5 	bl	8016470 <_ZNK8touchgfx9ConstFont4findEt>
 8016526:	4605      	mov	r5, r0
 8016528:	2800      	cmp	r0, #0
 801652a:	d0e3      	beq.n	80164f4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801652c:	6823      	ldr	r3, [r4, #0]
 801652e:	4629      	mov	r1, r5
 8016530:	4620      	mov	r0, r4
 8016532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016534:	4798      	blx	r3
 8016536:	6038      	str	r0, [r7, #0]
 8016538:	6823      	ldr	r3, [r4, #0]
 801653a:	4620      	mov	r0, r4
 801653c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801653e:	4798      	blx	r3
 8016540:	7030      	strb	r0, [r6, #0]
 8016542:	e7d8      	b.n	80164f6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08016544 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8016544:	2000      	movs	r0, #0
 8016546:	4770      	bx	lr

08016548 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8016548:	2001      	movs	r0, #1
 801654a:	4770      	bx	lr

0801654c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801654c:	2002      	movs	r0, #2
 801654e:	4770      	bx	lr

08016550 <_ZN8touchgfx6ScreenD1Ev>:
 8016550:	4770      	bx	lr

08016552 <_ZN8touchgfx12GestureEventD1Ev>:
 8016552:	4770      	bx	lr

08016554 <_ZN8touchgfx9DragEventD1Ev>:
 8016554:	4770      	bx	lr

08016556 <_ZN8touchgfx10ClickEventD1Ev>:
 8016556:	4770      	bx	lr

08016558 <_ZN8touchgfx10ClickEventD0Ev>:
 8016558:	b510      	push	{r4, lr}
 801655a:	4604      	mov	r4, r0
 801655c:	210c      	movs	r1, #12
 801655e:	f00c fd2c 	bl	8022fba <_ZdlPvj>
 8016562:	4620      	mov	r0, r4
 8016564:	bd10      	pop	{r4, pc}

08016566 <_ZN8touchgfx9DragEventD0Ev>:
 8016566:	b510      	push	{r4, lr}
 8016568:	4604      	mov	r4, r0
 801656a:	2110      	movs	r1, #16
 801656c:	f00c fd25 	bl	8022fba <_ZdlPvj>
 8016570:	4620      	mov	r0, r4
 8016572:	bd10      	pop	{r4, pc}

08016574 <_ZN8touchgfx12GestureEventD0Ev>:
 8016574:	b510      	push	{r4, lr}
 8016576:	4604      	mov	r4, r0
 8016578:	210c      	movs	r1, #12
 801657a:	f00c fd1e 	bl	8022fba <_ZdlPvj>
 801657e:	4620      	mov	r0, r4
 8016580:	bd10      	pop	{r4, pc}

08016582 <_ZN8touchgfx6ScreenD0Ev>:
 8016582:	b510      	push	{r4, lr}
 8016584:	4604      	mov	r4, r0
 8016586:	213c      	movs	r1, #60	@ 0x3c
 8016588:	f00c fd17 	bl	8022fba <_ZdlPvj>
 801658c:	4620      	mov	r0, r4
 801658e:	bd10      	pop	{r4, pc}

08016590 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8016590:	b530      	push	{r4, r5, lr}
 8016592:	460d      	mov	r5, r1
 8016594:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8016596:	b087      	sub	sp, #28
 8016598:	4604      	mov	r4, r0
 801659a:	b301      	cbz	r1, 80165de <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801659c:	a801      	add	r0, sp, #4
 801659e:	f7ff fb83 	bl	8015ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80165a2:	892a      	ldrh	r2, [r5, #8]
 80165a4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80165a8:	7928      	ldrb	r0, [r5, #4]
 80165aa:	1ad2      	subs	r2, r2, r3
 80165ac:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80165ae:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80165b2:	441a      	add	r2, r3
 80165b4:	896b      	ldrh	r3, [r5, #10]
 80165b6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80165ba:	f88d 0010 	strb.w	r0, [sp, #16]
 80165be:	1b5b      	subs	r3, r3, r5
 80165c0:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 80165c2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80165c4:	442b      	add	r3, r5
 80165c6:	4d07      	ldr	r5, [pc, #28]	@ (80165e4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80165c8:	f8ad 1012 	strh.w	r1, [sp, #18]
 80165cc:	a903      	add	r1, sp, #12
 80165ce:	9503      	str	r5, [sp, #12]
 80165d0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80165d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80165d8:	6803      	ldr	r3, [r0, #0]
 80165da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80165dc:	4798      	blx	r3
 80165de:	b007      	add	sp, #28
 80165e0:	bd30      	pop	{r4, r5, pc}
 80165e2:	bf00      	nop
 80165e4:	08027550 	.word	0x08027550

080165e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80165e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80165ee:	b08a      	sub	sp, #40	@ 0x28
 80165f0:	4604      	mov	r4, r0
 80165f2:	460d      	mov	r5, r1
 80165f4:	b113      	cbz	r3, 80165fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80165f6:	790b      	ldrb	r3, [r1, #4]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d044      	beq.n	8016686 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80165fc:	f104 0804 	add.w	r8, r4, #4
 8016600:	a803      	add	r0, sp, #12
 8016602:	4641      	mov	r1, r8
 8016604:	f7ff fb50 	bl	8015ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016608:	792b      	ldrb	r3, [r5, #4]
 801660a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801660e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8016612:	b983      	cbnz	r3, 8016636 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8016614:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8016618:	892a      	ldrh	r2, [r5, #8]
 801661a:	88e9      	ldrh	r1, [r5, #6]
 801661c:	4640      	mov	r0, r8
 801661e:	1b92      	subs	r2, r2, r6
 8016620:	9301      	str	r3, [sp, #4]
 8016622:	1bc9      	subs	r1, r1, r7
 8016624:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8016628:	b212      	sxth	r2, r2
 801662a:	9300      	str	r3, [sp, #0]
 801662c:	b209      	sxth	r1, r1
 801662e:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8016632:	f7f8 fdad 	bl	800f190 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8016636:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016638:	b329      	cbz	r1, 8016686 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801663a:	a805      	add	r0, sp, #20
 801663c:	f7ff fb34 	bl	8015ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016640:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016644:	792b      	ldrb	r3, [r5, #4]
 8016646:	a907      	add	r1, sp, #28
 8016648:	1abf      	subs	r7, r7, r2
 801664a:	88ea      	ldrh	r2, [r5, #6]
 801664c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801664e:	4417      	add	r7, r2
 8016650:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8016652:	f88d 3020 	strb.w	r3, [sp, #32]
 8016656:	4417      	add	r7, r2
 8016658:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801665c:	1ab6      	subs	r6, r6, r2
 801665e:	892a      	ldrh	r2, [r5, #8]
 8016660:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8016664:	4416      	add	r6, r2
 8016666:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016668:	4416      	add	r6, r2
 801666a:	4a08      	ldr	r2, [pc, #32]	@ (801668c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801666c:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8016670:	2600      	movs	r6, #0
 8016672:	9207      	str	r2, [sp, #28]
 8016674:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8016678:	6803      	ldr	r3, [r0, #0]
 801667a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801667c:	4798      	blx	r3
 801667e:	792b      	ldrb	r3, [r5, #4]
 8016680:	b10b      	cbz	r3, 8016686 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016682:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8016686:	b00a      	add	sp, #40	@ 0x28
 8016688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801668c:	08027528 	.word	0x08027528

08016690 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8016690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016694:	460c      	mov	r4, r1
 8016696:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8016698:	b088      	sub	sp, #32
 801669a:	4605      	mov	r5, r0
 801669c:	2900      	cmp	r1, #0
 801669e:	d06d      	beq.n	801677c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80166a0:	4668      	mov	r0, sp
 80166a2:	f7ff fb01 	bl	8015ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80166a6:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 80166a8:	88e3      	ldrh	r3, [r4, #6]
 80166aa:	f9bd 8000 	ldrsh.w	r8, [sp]
 80166ae:	440b      	add	r3, r1
 80166b0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80166b4:	b21b      	sxth	r3, r3
 80166b6:	4543      	cmp	r3, r8
 80166b8:	db31      	blt.n	801671e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80166ba:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80166be:	44c4      	add	ip, r8
 80166c0:	fa0f fc8c 	sxth.w	ip, ip
 80166c4:	4563      	cmp	r3, ip
 80166c6:	da2a      	bge.n	801671e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80166c8:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 80166ca:	8926      	ldrh	r6, [r4, #8]
 80166cc:	4416      	add	r6, r2
 80166ce:	b236      	sxth	r6, r6
 80166d0:	42be      	cmp	r6, r7
 80166d2:	db24      	blt.n	801671e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80166d4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80166d8:	4438      	add	r0, r7
 80166da:	b200      	sxth	r0, r0
 80166dc:	4286      	cmp	r6, r0
 80166de:	da1e      	bge.n	801671e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80166e0:	8963      	ldrh	r3, [r4, #10]
 80166e2:	4419      	add	r1, r3
 80166e4:	b209      	sxth	r1, r1
 80166e6:	4541      	cmp	r1, r8
 80166e8:	db08      	blt.n	80166fc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80166ea:	4561      	cmp	r1, ip
 80166ec:	da06      	bge.n	80166fc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80166ee:	89a3      	ldrh	r3, [r4, #12]
 80166f0:	441a      	add	r2, r3
 80166f2:	b212      	sxth	r2, r2
 80166f4:	42ba      	cmp	r2, r7
 80166f6:	db01      	blt.n	80166fc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80166f8:	4282      	cmp	r2, r0
 80166fa:	db10      	blt.n	801671e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80166fc:	4b21      	ldr	r3, [pc, #132]	@ (8016784 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80166fe:	a904      	add	r1, sp, #16
 8016700:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8016702:	9304      	str	r3, [sp, #16]
 8016704:	2302      	movs	r3, #2
 8016706:	f88d 3014 	strb.w	r3, [sp, #20]
 801670a:	2300      	movs	r3, #0
 801670c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016710:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016714:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016718:	6803      	ldr	r3, [r0, #0]
 801671a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801671c:	4798      	blx	r3
 801671e:	1d29      	adds	r1, r5, #4
 8016720:	a802      	add	r0, sp, #8
 8016722:	f7ff fac1 	bl	8015ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016726:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801672a:	88e0      	ldrh	r0, [r4, #6]
 801672c:	eba3 0808 	sub.w	r8, r3, r8
 8016730:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016734:	7921      	ldrb	r1, [r4, #4]
 8016736:	fa1f f888 	uxth.w	r8, r8
 801673a:	1bdf      	subs	r7, r3, r7
 801673c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8016740:	b2bb      	uxth	r3, r7
 8016742:	4440      	add	r0, r8
 8016744:	8922      	ldrh	r2, [r4, #8]
 8016746:	8967      	ldrh	r7, [r4, #10]
 8016748:	4460      	add	r0, ip
 801674a:	89a4      	ldrh	r4, [r4, #12]
 801674c:	441a      	add	r2, r3
 801674e:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8016750:	44b8      	add	r8, r7
 8016752:	4423      	add	r3, r4
 8016754:	f8ad 0016 	strh.w	r0, [sp, #22]
 8016758:	4432      	add	r2, r6
 801675a:	44e0      	add	r8, ip
 801675c:	4433      	add	r3, r6
 801675e:	4c0a      	ldr	r4, [pc, #40]	@ (8016788 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8016760:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8016762:	f88d 1014 	strb.w	r1, [sp, #20]
 8016766:	a904      	add	r1, sp, #16
 8016768:	9404      	str	r4, [sp, #16]
 801676a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801676e:	f8ad 801a 	strh.w	r8, [sp, #26]
 8016772:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016776:	6803      	ldr	r3, [r0, #0]
 8016778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801677a:	4798      	blx	r3
 801677c:	b008      	add	sp, #32
 801677e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016782:	bf00      	nop
 8016784:	08027528 	.word	0x08027528
 8016788:	0802753c 	.word	0x0802753c

0801678c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801678c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801678e:	4604      	mov	r4, r0
 8016790:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8016794:	3201      	adds	r2, #1
 8016796:	d112      	bne.n	80167be <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8016798:	2500      	movs	r5, #0
 801679a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801679e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80167a2:	6803      	ldr	r3, [r0, #0]
 80167a4:	9500      	str	r5, [sp, #0]
 80167a6:	466d      	mov	r5, sp
 80167a8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80167ac:	f8ad 2006 	strh.w	r2, [sp, #6]
 80167b0:	4629      	mov	r1, r5
 80167b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80167b4:	4798      	blx	r3
 80167b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80167ba:	e884 0003 	stmia.w	r4, {r0, r1}
 80167be:	4620      	mov	r0, r4
 80167c0:	b003      	add	sp, #12
 80167c2:	bd30      	pop	{r4, r5, pc}

080167c4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80167c4:	b513      	push	{r0, r1, r4, lr}
 80167c6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80167ca:	4604      	mov	r4, r0
 80167cc:	3301      	adds	r3, #1
 80167ce:	d109      	bne.n	80167e4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80167d0:	4601      	mov	r1, r0
 80167d2:	4668      	mov	r0, sp
 80167d4:	f7ff fa68 	bl	8015ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80167d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80167dc:	8423      	strh	r3, [r4, #32]
 80167de:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80167e2:	8463      	strh	r3, [r4, #34]	@ 0x22
 80167e4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80167e8:	b002      	add	sp, #8
 80167ea:	bd10      	pop	{r4, pc}

080167ec <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80167ec:	b513      	push	{r0, r1, r4, lr}
 80167ee:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 80167f2:	4604      	mov	r4, r0
 80167f4:	3301      	adds	r3, #1
 80167f6:	d109      	bne.n	801680c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80167f8:	4601      	mov	r1, r0
 80167fa:	4668      	mov	r0, sp
 80167fc:	f7ff fa54 	bl	8015ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016800:	f8bd 3000 	ldrh.w	r3, [sp]
 8016804:	8423      	strh	r3, [r4, #32]
 8016806:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801680a:	8463      	strh	r3, [r4, #34]	@ 0x22
 801680c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8016810:	b002      	add	sp, #8
 8016812:	bd10      	pop	{r4, pc}

08016814 <_ZN8touchgfx6ScreenC1Ev>:
 8016814:	b570      	push	{r4, r5, r6, lr}
 8016816:	4b17      	ldr	r3, [pc, #92]	@ (8016874 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8016818:	4605      	mov	r5, r0
 801681a:	4a17      	ldr	r2, [pc, #92]	@ (8016878 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801681c:	2101      	movs	r1, #1
 801681e:	f845 3b04 	str.w	r3, [r5], #4
 8016822:	2300      	movs	r3, #0
 8016824:	6042      	str	r2, [r0, #4]
 8016826:	4604      	mov	r4, r0
 8016828:	8103      	strh	r3, [r0, #8]
 801682a:	8143      	strh	r3, [r0, #10]
 801682c:	8183      	strh	r3, [r0, #12]
 801682e:	81c3      	strh	r3, [r0, #14]
 8016830:	8203      	strh	r3, [r0, #16]
 8016832:	8243      	strh	r3, [r0, #18]
 8016834:	8283      	strh	r3, [r0, #20]
 8016836:	82c3      	strh	r3, [r0, #22]
 8016838:	6203      	str	r3, [r0, #32]
 801683a:	8483      	strh	r3, [r0, #36]	@ 0x24
 801683c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801683e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8016842:	6343      	str	r3, [r0, #52]	@ 0x34
 8016844:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8016848:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801684c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8016850:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8016854:	4b09      	ldr	r3, [pc, #36]	@ (801687c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8016856:	4628      	mov	r0, r5
 8016858:	f9b3 6000 	ldrsh.w	r6, [r3]
 801685c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801685e:	4a08      	ldr	r2, [pc, #32]	@ (8016880 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8016860:	f9b2 1000 	ldrsh.w	r1, [r2]
 8016864:	4798      	blx	r3
 8016866:	6863      	ldr	r3, [r4, #4]
 8016868:	4628      	mov	r0, r5
 801686a:	4631      	mov	r1, r6
 801686c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801686e:	4798      	blx	r3
 8016870:	4620      	mov	r0, r4
 8016872:	bd70      	pop	{r4, r5, r6, pc}
 8016874:	08027564 	.word	0x08027564
 8016878:	08027184 	.word	0x08027184
 801687c:	240255c2 	.word	0x240255c2
 8016880:	240255c0 	.word	0x240255c0

08016884 <_ZN8touchgfx6Screen4drawEv>:
 8016884:	4b09      	ldr	r3, [pc, #36]	@ (80168ac <_ZN8touchgfx6Screen4drawEv+0x28>)
 8016886:	b507      	push	{r0, r1, r2, lr}
 8016888:	f9b3 2000 	ldrsh.w	r2, [r3]
 801688c:	2100      	movs	r1, #0
 801688e:	4b08      	ldr	r3, [pc, #32]	@ (80168b0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8016890:	9100      	str	r1, [sp, #0]
 8016892:	4669      	mov	r1, sp
 8016894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016898:	f8ad 2004 	strh.w	r2, [sp, #4]
 801689c:	f8ad 3006 	strh.w	r3, [sp, #6]
 80168a0:	6803      	ldr	r3, [r0, #0]
 80168a2:	689b      	ldr	r3, [r3, #8]
 80168a4:	4798      	blx	r3
 80168a6:	b003      	add	sp, #12
 80168a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80168ac:	240255c0 	.word	0x240255c0
 80168b0:	240255c2 	.word	0x240255c2

080168b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80168b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168b8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80168bc:	b089      	sub	sp, #36	@ 0x24
 80168be:	4680      	mov	r8, r0
 80168c0:	460c      	mov	r4, r1
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	4615      	mov	r5, r2
 80168c6:	dd0e      	ble.n	80168e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80168c8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	dd0a      	ble.n	80168e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80168d0:	4628      	mov	r0, r5
 80168d2:	f7ff ff5b 	bl	801678c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80168d6:	4621      	mov	r1, r4
 80168d8:	f7fd feb3 	bl	8014642 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80168dc:	69eb      	ldr	r3, [r5, #28]
 80168de:	b928      	cbnz	r0, 80168ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80168e0:	461d      	mov	r5, r3
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d1f4      	bne.n	80168d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80168e6:	b009      	add	sp, #36	@ 0x24
 80168e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168ec:	ae04      	add	r6, sp, #16
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	f000 80b5 	beq.w	8016a5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80168f4:	682b      	ldr	r3, [r5, #0]
 80168f6:	4629      	mov	r1, r5
 80168f8:	a802      	add	r0, sp, #8
 80168fa:	68db      	ldr	r3, [r3, #12]
 80168fc:	4798      	blx	r3
 80168fe:	4628      	mov	r0, r5
 8016900:	f7ff ff60 	bl	80167c4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016904:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8016908:	4407      	add	r7, r0
 801690a:	4628      	mov	r0, r5
 801690c:	f7ff ff6e 	bl	80167ec <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016910:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016914:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8016918:	b23f      	sxth	r7, r7
 801691a:	4418      	add	r0, r3
 801691c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016920:	4621      	mov	r1, r4
 8016922:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016926:	f8ad 0012 	strh.w	r0, [sp, #18]
 801692a:	4630      	mov	r0, r6
 801692c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016930:	f8ad 7010 	strh.w	r7, [sp, #16]
 8016934:	f7f8 fd0e 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 8016938:	4628      	mov	r0, r5
 801693a:	f7ff ff27 	bl	801678c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801693e:	ab06      	add	r3, sp, #24
 8016940:	4602      	mov	r2, r0
 8016942:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016946:	e883 0003 	stmia.w	r3, {r0, r1}
 801694a:	4611      	mov	r1, r2
 801694c:	4618      	mov	r0, r3
 801694e:	f7f8 fd01 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 8016952:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016956:	f9b4 1000 	ldrsh.w	r1, [r4]
 801695a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801695e:	4299      	cmp	r1, r3
 8016960:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8016964:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8016968:	d10b      	bne.n	8016982 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801696a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801696e:	4552      	cmp	r2, sl
 8016970:	d107      	bne.n	8016982 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016972:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016976:	455a      	cmp	r2, fp
 8016978:	d103      	bne.n	8016982 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801697a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801697e:	454a      	cmp	r2, r9
 8016980:	d06d      	beq.n	8016a5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016982:	f1bb 0f00 	cmp.w	fp, #0
 8016986:	dd65      	ble.n	8016a54 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8016988:	f1b9 0f00 	cmp.w	r9, #0
 801698c:	dd62      	ble.n	8016a54 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801698e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016992:	fa1f f08a 	uxth.w	r0, sl
 8016996:	4552      	cmp	r2, sl
 8016998:	9000      	str	r0, [sp, #0]
 801699a:	da12      	bge.n	80169c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801699c:	9301      	str	r3, [sp, #4]
 801699e:	9b00      	ldr	r3, [sp, #0]
 80169a0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80169a4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80169a8:	1a9a      	subs	r2, r3, r2
 80169aa:	f8ad 1010 	strh.w	r1, [sp, #16]
 80169ae:	4631      	mov	r1, r6
 80169b0:	f8ad 0014 	strh.w	r0, [sp, #20]
 80169b4:	4640      	mov	r0, r8
 80169b6:	f8ad 2016 	strh.w	r2, [sp, #22]
 80169ba:	69ea      	ldr	r2, [r5, #28]
 80169bc:	f7ff ff7a 	bl	80168b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80169c0:	9b01      	ldr	r3, [sp, #4]
 80169c2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80169c6:	b29f      	uxth	r7, r3
 80169c8:	429a      	cmp	r2, r3
 80169ca:	da0d      	bge.n	80169e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80169cc:	f8ad 2010 	strh.w	r2, [sp, #16]
 80169d0:	1aba      	subs	r2, r7, r2
 80169d2:	f8ad a012 	strh.w	sl, [sp, #18]
 80169d6:	4631      	mov	r1, r6
 80169d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80169dc:	4640      	mov	r0, r8
 80169de:	f8ad 9016 	strh.w	r9, [sp, #22]
 80169e2:	69ea      	ldr	r2, [r5, #28]
 80169e4:	f7ff ff66 	bl	80168b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80169e8:	8822      	ldrh	r2, [r4, #0]
 80169ea:	445f      	add	r7, fp
 80169ec:	88a3      	ldrh	r3, [r4, #4]
 80169ee:	b2bf      	uxth	r7, r7
 80169f0:	4413      	add	r3, r2
 80169f2:	b23a      	sxth	r2, r7
 80169f4:	b29b      	uxth	r3, r3
 80169f6:	b219      	sxth	r1, r3
 80169f8:	4291      	cmp	r1, r2
 80169fa:	dd0d      	ble.n	8016a18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80169fc:	1bdb      	subs	r3, r3, r7
 80169fe:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016a02:	f8ad a012 	strh.w	sl, [sp, #18]
 8016a06:	4631      	mov	r1, r6
 8016a08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016a0c:	4640      	mov	r0, r8
 8016a0e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8016a12:	69ea      	ldr	r2, [r5, #28]
 8016a14:	f7ff ff4e 	bl	80168b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016a18:	88e2      	ldrh	r2, [r4, #6]
 8016a1a:	8863      	ldrh	r3, [r4, #2]
 8016a1c:	4413      	add	r3, r2
 8016a1e:	9a00      	ldr	r2, [sp, #0]
 8016a20:	444a      	add	r2, r9
 8016a22:	b29b      	uxth	r3, r3
 8016a24:	fa1f f982 	uxth.w	r9, r2
 8016a28:	b219      	sxth	r1, r3
 8016a2a:	fa0f f289 	sxth.w	r2, r9
 8016a2e:	428a      	cmp	r2, r1
 8016a30:	da15      	bge.n	8016a5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016a32:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016a36:	eba3 0309 	sub.w	r3, r3, r9
 8016a3a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016a3e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8016a42:	4631      	mov	r1, r6
 8016a44:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016a48:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016a4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016a50:	69ea      	ldr	r2, [r5, #28]
 8016a52:	e001      	b.n	8016a58 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8016a54:	69ea      	ldr	r2, [r5, #28]
 8016a56:	4621      	mov	r1, r4
 8016a58:	4640      	mov	r0, r8
 8016a5a:	f7ff ff2b 	bl	80168b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016a5e:	4628      	mov	r0, r5
 8016a60:	f7ff fe94 	bl	801678c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016a64:	6861      	ldr	r1, [r4, #4]
 8016a66:	4602      	mov	r2, r0
 8016a68:	4633      	mov	r3, r6
 8016a6a:	6820      	ldr	r0, [r4, #0]
 8016a6c:	c303      	stmia	r3!, {r0, r1}
 8016a6e:	4611      	mov	r1, r2
 8016a70:	4630      	mov	r0, r6
 8016a72:	f7f8 fc6f 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 8016a76:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	f77f af33 	ble.w	80168e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016a80:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	f77f af2e 	ble.w	80168e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016a8a:	4628      	mov	r0, r5
 8016a8c:	f7ff fe9a 	bl	80167c4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016a90:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8016a94:	1a18      	subs	r0, r3, r0
 8016a96:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016a9a:	4628      	mov	r0, r5
 8016a9c:	f7ff fea6 	bl	80167ec <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016aa0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016aa4:	4631      	mov	r1, r6
 8016aa6:	1a18      	subs	r0, r3, r0
 8016aa8:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016aac:	4628      	mov	r0, r5
 8016aae:	682b      	ldr	r3, [r5, #0]
 8016ab0:	689b      	ldr	r3, [r3, #8]
 8016ab2:	4798      	blx	r3
 8016ab4:	e717      	b.n	80168e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08016ab6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8016ab6:	b570      	push	{r4, r5, r6, lr}
 8016ab8:	1d06      	adds	r6, r0, #4
 8016aba:	b086      	sub	sp, #24
 8016abc:	460c      	mov	r4, r1
 8016abe:	2300      	movs	r3, #0
 8016ac0:	4631      	mov	r1, r6
 8016ac2:	4605      	mov	r5, r0
 8016ac4:	a802      	add	r0, sp, #8
 8016ac6:	9301      	str	r3, [sp, #4]
 8016ac8:	f7ff f8ee 	bl	8015ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016acc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016ad0:	8822      	ldrh	r2, [r4, #0]
 8016ad2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8016ad6:	1ad2      	subs	r2, r2, r3
 8016ad8:	8863      	ldrh	r3, [r4, #2]
 8016ada:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8016ade:	1a5b      	subs	r3, r3, r1
 8016ae0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8016ae4:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016ae8:	aa01      	add	r2, sp, #4
 8016aea:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016aee:	4630      	mov	r0, r6
 8016af0:	f8ad 1016 	strh.w	r1, [sp, #22]
 8016af4:	a904      	add	r1, sp, #16
 8016af6:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016afa:	f7f8 fd03 	bl	800f504 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8016afe:	9a01      	ldr	r2, [sp, #4]
 8016b00:	b11a      	cbz	r2, 8016b0a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8016b02:	4621      	mov	r1, r4
 8016b04:	4628      	mov	r0, r5
 8016b06:	f7ff fed5 	bl	80168b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016b0a:	b006      	add	sp, #24
 8016b0c:	bd70      	pop	{r4, r5, r6, pc}

08016b0e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8016b0e:	4602      	mov	r2, r0
 8016b10:	b530      	push	{r4, r5, lr}
 8016b12:	4604      	mov	r4, r0
 8016b14:	b085      	sub	sp, #20
 8016b16:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8016b1a:	460d      	mov	r5, r1
 8016b1c:	466b      	mov	r3, sp
 8016b1e:	6851      	ldr	r1, [r2, #4]
 8016b20:	c303      	stmia	r3!, {r0, r1}
 8016b22:	4629      	mov	r1, r5
 8016b24:	4668      	mov	r0, sp
 8016b26:	f7f8 fc15 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 8016b2a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016b2e:	b12b      	cbz	r3, 8016b3c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8016b30:	4669      	mov	r1, sp
 8016b32:	4620      	mov	r0, r4
 8016b34:	f7ff ffbf 	bl	8016ab6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8016b38:	b005      	add	sp, #20
 8016b3a:	bd30      	pop	{r4, r5, pc}
 8016b3c:	3404      	adds	r4, #4
 8016b3e:	a802      	add	r0, sp, #8
 8016b40:	4621      	mov	r1, r4
 8016b42:	f7ff f8b1 	bl	8015ca8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016b46:	f8bd 3000 	ldrh.w	r3, [sp]
 8016b4a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8016b4e:	4669      	mov	r1, sp
 8016b50:	4620      	mov	r0, r4
 8016b52:	1a9b      	subs	r3, r3, r2
 8016b54:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8016b58:	f8ad 3000 	strh.w	r3, [sp]
 8016b5c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016b60:	1a9b      	subs	r3, r3, r2
 8016b62:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016b66:	f7f8 fc94 	bl	800f492 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8016b6a:	e7e5      	b.n	8016b38 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08016b6c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8016b6c:	460b      	mov	r3, r1
 8016b6e:	680a      	ldr	r2, [r1, #0]
 8016b70:	1d01      	adds	r1, r0, #4
 8016b72:	6992      	ldr	r2, [r2, #24]
 8016b74:	4618      	mov	r0, r3
 8016b76:	4710      	bx	r2

08016b78 <_ZN8touchgfx12TextProviderC1Ev>:
 8016b78:	b538      	push	{r3, r4, r5, lr}
 8016b7a:	2500      	movs	r5, #0
 8016b7c:	2302      	movs	r3, #2
 8016b7e:	4604      	mov	r4, r0
 8016b80:	220e      	movs	r2, #14
 8016b82:	7403      	strb	r3, [r0, #16]
 8016b84:	4629      	mov	r1, r5
 8016b86:	6145      	str	r5, [r0, #20]
 8016b88:	7605      	strb	r5, [r0, #24]
 8016b8a:	83c5      	strh	r5, [r0, #30]
 8016b8c:	8405      	strh	r5, [r0, #32]
 8016b8e:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8016b90:	8705      	strh	r5, [r0, #56]	@ 0x38
 8016b92:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8016b94:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8016b98:	e9c0 5500 	strd	r5, r5, [r0]
 8016b9c:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8016ba0:	304c      	adds	r0, #76	@ 0x4c
 8016ba2:	f00d f81d 	bl	8023be0 <memset>
 8016ba6:	2301      	movs	r3, #1
 8016ba8:	4620      	mov	r0, r4
 8016baa:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8016bae:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016bb2:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8016bb6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8016bba:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8016bbe:	f7ed fdfb 	bl	80047b8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8016bc2:	4620      	mov	r0, r4
 8016bc4:	bd38      	pop	{r3, r4, r5, pc}

08016bc6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8016bc6:	b530      	push	{r4, r5, lr}
 8016bc8:	2500      	movs	r5, #0
 8016bca:	2401      	movs	r4, #1
 8016bcc:	6843      	ldr	r3, [r0, #4]
 8016bce:	b913      	cbnz	r3, 8016bd6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8016bd0:	6803      	ldr	r3, [r0, #0]
 8016bd2:	b313      	cbz	r3, 8016c1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8016bd4:	6043      	str	r3, [r0, #4]
 8016bd6:	7e03      	ldrb	r3, [r0, #24]
 8016bd8:	b143      	cbz	r3, 8016bec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8016bda:	6943      	ldr	r3, [r0, #20]
 8016bdc:	b12b      	cbz	r3, 8016bea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016bde:	881a      	ldrh	r2, [r3, #0]
 8016be0:	b11a      	cbz	r2, 8016bea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016be2:	1c9a      	adds	r2, r3, #2
 8016be4:	6142      	str	r2, [r0, #20]
 8016be6:	8818      	ldrh	r0, [r3, #0]
 8016be8:	bd30      	pop	{r4, r5, pc}
 8016bea:	7605      	strb	r5, [r0, #24]
 8016bec:	6843      	ldr	r3, [r0, #4]
 8016bee:	8819      	ldrh	r1, [r3, #0]
 8016bf0:	b199      	cbz	r1, 8016c1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8016bf2:	1c9a      	adds	r2, r3, #2
 8016bf4:	2902      	cmp	r1, #2
 8016bf6:	6042      	str	r2, [r0, #4]
 8016bf8:	d1f5      	bne.n	8016be6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8016bfa:	7c03      	ldrb	r3, [r0, #16]
 8016bfc:	2b01      	cmp	r3, #1
 8016bfe:	d8e5      	bhi.n	8016bcc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016c00:	1c5a      	adds	r2, r3, #1
 8016c02:	3302      	adds	r3, #2
 8016c04:	7402      	strb	r2, [r0, #16]
 8016c06:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8016c0a:	6143      	str	r3, [r0, #20]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d0dd      	beq.n	8016bcc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016c10:	881b      	ldrh	r3, [r3, #0]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d0da      	beq.n	8016bcc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016c16:	7604      	strb	r4, [r0, #24]
 8016c18:	e7d8      	b.n	8016bcc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016c1a:	2000      	movs	r0, #0
 8016c1c:	e7e4      	b.n	8016be8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08016c1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8016c1e:	6001      	str	r1, [r0, #0]
 8016c20:	2100      	movs	r1, #0
 8016c22:	b430      	push	{r4, r5}
 8016c24:	6041      	str	r1, [r0, #4]
 8016c26:	6815      	ldr	r5, [r2, #0]
 8016c28:	6085      	str	r5, [r0, #8]
 8016c2a:	6852      	ldr	r2, [r2, #4]
 8016c2c:	6443      	str	r3, [r0, #68]	@ 0x44
 8016c2e:	9b02      	ldr	r3, [sp, #8]
 8016c30:	60c2      	str	r2, [r0, #12]
 8016c32:	7401      	strb	r1, [r0, #16]
 8016c34:	6141      	str	r1, [r0, #20]
 8016c36:	7601      	strb	r1, [r0, #24]
 8016c38:	8701      	strh	r1, [r0, #56]	@ 0x38
 8016c3a:	8401      	strh	r1, [r0, #32]
 8016c3c:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8016c40:	6483      	str	r3, [r0, #72]	@ 0x48
 8016c42:	bc30      	pop	{r4, r5}
 8016c44:	f7ed bdb8 	b.w	80047b8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08016c48 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8016c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c4a:	4605      	mov	r5, r0
 8016c4c:	4608      	mov	r0, r1
 8016c4e:	b1f1      	cbz	r1, 8016c8e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8016c50:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8016c54:	460b      	mov	r3, r1
 8016c56:	f101 0708 	add.w	r7, r1, #8
 8016c5a:	4622      	mov	r2, r4
 8016c5c:	6818      	ldr	r0, [r3, #0]
 8016c5e:	3308      	adds	r3, #8
 8016c60:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016c64:	4626      	mov	r6, r4
 8016c66:	42bb      	cmp	r3, r7
 8016c68:	c603      	stmia	r6!, {r0, r1}
 8016c6a:	4634      	mov	r4, r6
 8016c6c:	d1f6      	bne.n	8016c5c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8016c6e:	6818      	ldr	r0, [r3, #0]
 8016c70:	6030      	str	r0, [r6, #0]
 8016c72:	4610      	mov	r0, r2
 8016c74:	889b      	ldrh	r3, [r3, #4]
 8016c76:	80b3      	strh	r3, [r6, #4]
 8016c78:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8016c7c:	015b      	lsls	r3, r3, #5
 8016c7e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8016c82:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8016c86:	430b      	orrs	r3, r1
 8016c88:	425b      	negs	r3, r3
 8016c8a:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8016c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016c90 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8016c90:	b538      	push	{r3, r4, r5, lr}
 8016c92:	460c      	mov	r4, r1
 8016c94:	6811      	ldr	r1, [r2, #0]
 8016c96:	4610      	mov	r0, r2
 8016c98:	68cd      	ldr	r5, [r1, #12]
 8016c9a:	4619      	mov	r1, r3
 8016c9c:	47a8      	blx	r5
 8016c9e:	2800      	cmp	r0, #0
 8016ca0:	bf08      	it	eq
 8016ca2:	4620      	moveq	r0, r4
 8016ca4:	bd38      	pop	{r3, r4, r5, pc}
	...

08016ca8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8016ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cac:	468c      	mov	ip, r1
 8016cae:	4605      	mov	r5, r0
 8016cb0:	4614      	mov	r4, r2
 8016cb2:	b942      	cbnz	r2, 8016cc6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8016cb4:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8016cb8:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8016cbc:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8016cc0:	4620      	mov	r0, r4
 8016cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cc6:	7b50      	ldrb	r0, [r2, #13]
 8016cc8:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8016ccc:	8893      	ldrh	r3, [r2, #4]
 8016cce:	0106      	lsls	r6, r0, #4
 8016cd0:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8016cd4:	79e6      	ldrb	r6, [r4, #7]
 8016cd6:	4316      	orrs	r6, r2
 8016cd8:	185a      	adds	r2, r3, r1
 8016cda:	b291      	uxth	r1, r2
 8016cdc:	b2b7      	uxth	r7, r6
 8016cde:	291d      	cmp	r1, #29
 8016ce0:	d87f      	bhi.n	8016de2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8016ce2:	2201      	movs	r2, #1
 8016ce4:	10f6      	asrs	r6, r6, #3
 8016ce6:	408a      	lsls	r2, r1
 8016ce8:	498b      	ldr	r1, [pc, #556]	@ (8016f18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 8016cea:	420a      	tst	r2, r1
 8016cec:	d12e      	bne.n	8016d4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8016cee:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8016cf2:	d076      	beq.n	8016de2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8016cf4:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8016cf8:	4623      	mov	r3, r4
 8016cfa:	f104 0e08 	add.w	lr, r4, #8
 8016cfe:	4614      	mov	r4, r2
 8016d00:	6818      	ldr	r0, [r3, #0]
 8016d02:	3308      	adds	r3, #8
 8016d04:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016d08:	4694      	mov	ip, r2
 8016d0a:	4573      	cmp	r3, lr
 8016d0c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016d10:	4662      	mov	r2, ip
 8016d12:	d1f5      	bne.n	8016d00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8016d14:	6818      	ldr	r0, [r3, #0]
 8016d16:	f8cc 0000 	str.w	r0, [ip]
 8016d1a:	889b      	ldrh	r3, [r3, #4]
 8016d1c:	f8ac 3004 	strh.w	r3, [ip, #4]
 8016d20:	b2b3      	uxth	r3, r6
 8016d22:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 8016d26:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 8016d2a:	1aca      	subs	r2, r1, r3
 8016d2c:	1bcf      	subs	r7, r1, r7
 8016d2e:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8016d32:	b292      	uxth	r2, r2
 8016d34:	1afb      	subs	r3, r7, r3
 8016d36:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 8016d3a:	10d2      	asrs	r2, r2, #3
 8016d3c:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8016d40:	4302      	orrs	r2, r0
 8016d42:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 8016d46:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 8016d4a:	e7b9      	b.n	8016cc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8016d4c:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8016d50:	4623      	mov	r3, r4
 8016d52:	f104 0808 	add.w	r8, r4, #8
 8016d56:	4614      	mov	r4, r2
 8016d58:	6818      	ldr	r0, [r3, #0]
 8016d5a:	3308      	adds	r3, #8
 8016d5c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016d60:	4696      	mov	lr, r2
 8016d62:	4543      	cmp	r3, r8
 8016d64:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8016d68:	4672      	mov	r2, lr
 8016d6a:	d1f5      	bne.n	8016d58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8016d6c:	6818      	ldr	r0, [r3, #0]
 8016d6e:	f8ce 0000 	str.w	r0, [lr]
 8016d72:	889b      	ldrh	r3, [r3, #4]
 8016d74:	f8ae 3004 	strh.w	r3, [lr, #4]
 8016d78:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 8016d7a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8016d7e:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8016d80:	f640 6333 	movw	r3, #3635	@ 0xe33
 8016d84:	4299      	cmp	r1, r3
 8016d86:	d111      	bne.n	8016dac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8016d88:	f8dc 3000 	ldr.w	r3, [ip]
 8016d8c:	4660      	mov	r0, ip
 8016d8e:	68db      	ldr	r3, [r3, #12]
 8016d90:	4798      	blx	r3
 8016d92:	7b41      	ldrb	r1, [r0, #13]
 8016d94:	00cb      	lsls	r3, r1, #3
 8016d96:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016d9a:	7a03      	ldrb	r3, [r0, #8]
 8016d9c:	4313      	orrs	r3, r2
 8016d9e:	064a      	lsls	r2, r1, #25
 8016da0:	bf44      	itt	mi
 8016da2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016da6:	b21b      	sxthmi	r3, r3
 8016da8:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8016dac:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8016db0:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8016db4:	443b      	add	r3, r7
 8016db6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8016dba:	4433      	add	r3, r6
 8016dbc:	b29b      	uxth	r3, r3
 8016dbe:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8016dc2:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8016dc6:	10db      	asrs	r3, r3, #3
 8016dc8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016dcc:	4313      	orrs	r3, r2
 8016dce:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8016dd2:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8016dd6:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8016dda:	1a9b      	subs	r3, r3, r2
 8016ddc:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8016de0:	e76e      	b.n	8016cc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8016de2:	f023 0204 	bic.w	r2, r3, #4
 8016de6:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8016dea:	428a      	cmp	r2, r1
 8016dec:	d003      	beq.n	8016df6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8016dee:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8016df2:	4293      	cmp	r3, r2
 8016df4:	d138      	bne.n	8016e68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 8016df6:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 8016dfa:	4622      	mov	r2, r4
 8016dfc:	f104 0808 	add.w	r8, r4, #8
 8016e00:	4634      	mov	r4, r6
 8016e02:	6810      	ldr	r0, [r2, #0]
 8016e04:	3208      	adds	r2, #8
 8016e06:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8016e0a:	46b6      	mov	lr, r6
 8016e0c:	4542      	cmp	r2, r8
 8016e0e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8016e12:	4676      	mov	r6, lr
 8016e14:	d1f5      	bne.n	8016e02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 8016e16:	6810      	ldr	r0, [r2, #0]
 8016e18:	3b01      	subs	r3, #1
 8016e1a:	4621      	mov	r1, r4
 8016e1c:	f8ce 0000 	str.w	r0, [lr]
 8016e20:	b29b      	uxth	r3, r3
 8016e22:	8892      	ldrh	r2, [r2, #4]
 8016e24:	4628      	mov	r0, r5
 8016e26:	f8ae 2004 	strh.w	r2, [lr, #4]
 8016e2a:	4662      	mov	r2, ip
 8016e2c:	f7ff ff30 	bl	8016c90 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016e30:	7b41      	ldrb	r1, [r0, #13]
 8016e32:	00cb      	lsls	r3, r1, #3
 8016e34:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016e38:	7a03      	ldrb	r3, [r0, #8]
 8016e3a:	0648      	lsls	r0, r1, #25
 8016e3c:	ea43 0302 	orr.w	r3, r3, r2
 8016e40:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8016e44:	bf44      	itt	mi
 8016e46:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016e4a:	b21b      	sxthmi	r3, r3
 8016e4c:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8016e50:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8016e54:	005b      	lsls	r3, r3, #1
 8016e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016e5a:	4313      	orrs	r3, r2
 8016e5c:	115a      	asrs	r2, r3, #5
 8016e5e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8016e62:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 8016e66:	e047      	b.n	8016ef8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 8016e68:	00c2      	lsls	r2, r0, #3
 8016e6a:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8016e6e:	7a22      	ldrb	r2, [r4, #8]
 8016e70:	430a      	orrs	r2, r1
 8016e72:	0641      	lsls	r1, r0, #25
 8016e74:	f640 6109 	movw	r1, #3593	@ 0xe09
 8016e78:	bf44      	itt	mi
 8016e7a:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8016e7e:	b212      	sxthmi	r2, r2
 8016e80:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8016e84:	f023 0210 	bic.w	r2, r3, #16
 8016e88:	428a      	cmp	r2, r1
 8016e8a:	d003      	beq.n	8016e94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 8016e8c:	f640 6213 	movw	r2, #3603	@ 0xe13
 8016e90:	4293      	cmp	r3, r2
 8016e92:	d13e      	bne.n	8016f12 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 8016e94:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8016e98:	f104 0808 	add.w	r8, r4, #8
 8016e9c:	4696      	mov	lr, r2
 8016e9e:	6820      	ldr	r0, [r4, #0]
 8016ea0:	3408      	adds	r4, #8
 8016ea2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8016ea6:	4616      	mov	r6, r2
 8016ea8:	4544      	cmp	r4, r8
 8016eaa:	c603      	stmia	r6!, {r0, r1}
 8016eac:	4632      	mov	r2, r6
 8016eae:	d1f6      	bne.n	8016e9e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8016eb0:	6820      	ldr	r0, [r4, #0]
 8016eb2:	6030      	str	r0, [r6, #0]
 8016eb4:	4628      	mov	r0, r5
 8016eb6:	88a1      	ldrh	r1, [r4, #4]
 8016eb8:	4674      	mov	r4, lr
 8016eba:	80b1      	strh	r1, [r6, #4]
 8016ebc:	4671      	mov	r1, lr
 8016ebe:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8016ec2:	0076      	lsls	r6, r6, #1
 8016ec4:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8016ec8:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8016ecc:	4316      	orrs	r6, r2
 8016ece:	f640 6213 	movw	r2, #3603	@ 0xe13
 8016ed2:	4293      	cmp	r3, r2
 8016ed4:	4662      	mov	r2, ip
 8016ed6:	bf16      	itet	ne
 8016ed8:	f103 33ff 	addne.w	r3, r3, #4294967295
 8016edc:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8016ee0:	b29b      	uxthne	r3, r3
 8016ee2:	f7ff fed5 	bl	8016c90 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016ee6:	7b43      	ldrb	r3, [r0, #13]
 8016ee8:	7a82      	ldrb	r2, [r0, #10]
 8016eea:	005b      	lsls	r3, r3, #1
 8016eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016ef0:	4313      	orrs	r3, r2
 8016ef2:	1af6      	subs	r6, r6, r3
 8016ef4:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 8016ef8:	7b61      	ldrb	r1, [r4, #13]
 8016efa:	00cb      	lsls	r3, r1, #3
 8016efc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016f00:	7a23      	ldrb	r3, [r4, #8]
 8016f02:	4313      	orrs	r3, r2
 8016f04:	064a      	lsls	r2, r1, #25
 8016f06:	bf44      	itt	mi
 8016f08:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016f0c:	b21b      	sxthmi	r3, r3
 8016f0e:	1bdb      	subs	r3, r3, r7
 8016f10:	e719      	b.n	8016d46 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8016f12:	2300      	movs	r3, #0
 8016f14:	e7a5      	b.n	8016e62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8016f16:	bf00      	nop
 8016f18:	3fc00079 	.word	0x3fc00079

08016f1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8016f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f20:	4604      	mov	r4, r0
 8016f22:	b942      	cbnz	r2, 8016f36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8016f24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016f28:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8016f2c:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8016f30:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8016f34:	e047      	b.n	8016fc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016f36:	7b51      	ldrb	r1, [r2, #13]
 8016f38:	8893      	ldrh	r3, [r2, #4]
 8016f3a:	010d      	lsls	r5, r1, #4
 8016f3c:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8016f40:	79d5      	ldrb	r5, [r2, #7]
 8016f42:	4305      	orrs	r5, r0
 8016f44:	2d04      	cmp	r5, #4
 8016f46:	bfcc      	ite	gt
 8016f48:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8016f4c:	f04f 0e01 	movle.w	lr, #1
 8016f50:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8016f54:	f200 80ab 	bhi.w	80170ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8016f58:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8016f5c:	4283      	cmp	r3, r0
 8016f5e:	d216      	bcs.n	8016f8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f60:	f240 605b 	movw	r0, #1627	@ 0x65b
 8016f64:	4283      	cmp	r3, r0
 8016f66:	d859      	bhi.n	801701c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8016f68:	f240 6057 	movw	r0, #1623	@ 0x657
 8016f6c:	4283      	cmp	r3, r0
 8016f6e:	d20e      	bcs.n	8016f8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f70:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8016f74:	d24a      	bcs.n	801700c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8016f76:	f240 604e 	movw	r0, #1614	@ 0x64e
 8016f7a:	4283      	cmp	r3, r0
 8016f7c:	d207      	bcs.n	8016f8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f7e:	f240 601a 	movw	r0, #1562	@ 0x61a
 8016f82:	4283      	cmp	r3, r0
 8016f84:	d02a      	beq.n	8016fdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016f86:	d821      	bhi.n	8016fcc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8016f88:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8016f8c:	d35b      	bcc.n	8017046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016f8e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8016f92:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016f96:	f040 80d0 	bne.w	801713a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016f9a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8016f9e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016fa2:	f040 80ca 	bne.w	801713a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016fa6:	00cb      	lsls	r3, r1, #3
 8016fa8:	0649      	lsls	r1, r1, #25
 8016faa:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016fae:	7a13      	ldrb	r3, [r2, #8]
 8016fb0:	ea43 0300 	orr.w	r3, r3, r0
 8016fb4:	bf44      	itt	mi
 8016fb6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016fba:	b21b      	sxthmi	r3, r3
 8016fbc:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016fc0:	1b5d      	subs	r5, r3, r5
 8016fc2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016fc6:	4610      	mov	r0, r2
 8016fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fcc:	f240 604b 	movw	r0, #1611	@ 0x64b
 8016fd0:	4283      	cmp	r3, r0
 8016fd2:	d338      	bcc.n	8017046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016fd4:	f240 604c 	movw	r0, #1612	@ 0x64c
 8016fd8:	4283      	cmp	r3, r0
 8016fda:	d9d8      	bls.n	8016f8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016fdc:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8016fe0:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8016fe4:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016fe8:	f040 80f3 	bne.w	80171d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016fec:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016ff0:	f040 80ef 	bne.w	80171d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016ff4:	00cb      	lsls	r3, r1, #3
 8016ff6:	064e      	lsls	r6, r1, #25
 8016ff8:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016ffc:	7a13      	ldrb	r3, [r2, #8]
 8016ffe:	ea43 0300 	orr.w	r3, r3, r0
 8017002:	bf44      	itt	mi
 8017004:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8017008:	b21b      	sxthmi	r3, r3
 801700a:	e7d9      	b.n	8016fc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801700c:	f240 6054 	movw	r0, #1620	@ 0x654
 8017010:	4283      	cmp	r3, r0
 8017012:	d8e3      	bhi.n	8016fdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017014:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8017018:	d9e0      	bls.n	8016fdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801701a:	e7b8      	b.n	8016f8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801701c:	f240 6074 	movw	r0, #1652	@ 0x674
 8017020:	4283      	cmp	r3, r0
 8017022:	d0b4      	beq.n	8016f8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017024:	d82d      	bhi.n	8017082 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8017026:	f240 605e 	movw	r0, #1630	@ 0x65e
 801702a:	4283      	cmp	r3, r0
 801702c:	d804      	bhi.n	8017038 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801702e:	f240 605d 	movw	r0, #1629	@ 0x65d
 8017032:	4283      	cmp	r3, r0
 8017034:	d3d2      	bcc.n	8016fdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017036:	e7aa      	b.n	8016f8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017038:	f240 605f 	movw	r0, #1631	@ 0x65f
 801703c:	4283      	cmp	r3, r0
 801703e:	d0cd      	beq.n	8016fdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017040:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8017044:	d0a3      	beq.n	8016f8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017046:	00cb      	lsls	r3, r1, #3
 8017048:	0649      	lsls	r1, r1, #25
 801704a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801704e:	7a13      	ldrb	r3, [r2, #8]
 8017050:	ea43 0300 	orr.w	r3, r3, r0
 8017054:	bf44      	itt	mi
 8017056:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801705a:	b21b      	sxthmi	r3, r3
 801705c:	1b5d      	subs	r5, r3, r5
 801705e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8017062:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8017066:	7b53      	ldrb	r3, [r2, #13]
 8017068:	015b      	lsls	r3, r3, #5
 801706a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801706e:	7993      	ldrb	r3, [r2, #6]
 8017070:	430b      	orrs	r3, r1
 8017072:	2105      	movs	r1, #5
 8017074:	005b      	lsls	r3, r3, #1
 8017076:	fb93 f3f1 	sdiv	r3, r3, r1
 801707a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801707e:	440b      	add	r3, r1
 8017080:	e756      	b.n	8016f30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8017082:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8017086:	4283      	cmp	r3, r0
 8017088:	d809      	bhi.n	801709e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801708a:	f240 60df 	movw	r0, #1759	@ 0x6df
 801708e:	4283      	cmp	r3, r0
 8017090:	f4bf af7d 	bcs.w	8016f8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017094:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8017098:	2b05      	cmp	r3, #5
 801709a:	d8d4      	bhi.n	8017046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801709c:	e777      	b.n	8016f8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801709e:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 80170a2:	4283      	cmp	r3, r0
 80170a4:	d09a      	beq.n	8016fdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80170a6:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 80170aa:	4283      	cmp	r3, r0
 80170ac:	e7ca      	b.n	8017044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80170ae:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 80170b2:	d22b      	bcs.n	801710c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80170b4:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 80170b8:	4283      	cmp	r3, r0
 80170ba:	d28f      	bcs.n	8016fdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80170bc:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80170c0:	4283      	cmp	r3, r0
 80170c2:	d816      	bhi.n	80170f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80170c4:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 80170c8:	4283      	cmp	r3, r0
 80170ca:	f4bf af60 	bcs.w	8016f8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80170ce:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 80170d2:	4283      	cmp	r3, r0
 80170d4:	d80a      	bhi.n	80170ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 80170d6:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 80170da:	4283      	cmp	r3, r0
 80170dc:	f4bf af57 	bcs.w	8016f8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80170e0:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 80170e4:	4283      	cmp	r3, r0
 80170e6:	f43f af79 	beq.w	8016fdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80170ea:	e7ac      	b.n	8017046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80170ec:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 80170f0:	e7f8      	b.n	80170e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 80170f2:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 80170f6:	4283      	cmp	r3, r0
 80170f8:	d802      	bhi.n	8017100 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80170fa:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80170fe:	e798      	b.n	8017032 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8017100:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8017104:	4283      	cmp	r3, r0
 8017106:	f47f af42 	bne.w	8016f8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801710a:	e767      	b.n	8016fdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801710c:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8017110:	4283      	cmp	r3, r0
 8017112:	f43f af63 	beq.w	8016fdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017116:	d802      	bhi.n	801711e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8017118:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801711c:	e7f2      	b.n	8017104 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801711e:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8017122:	4283      	cmp	r3, r0
 8017124:	d805      	bhi.n	8017132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8017126:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801712a:	4283      	cmp	r3, r0
 801712c:	f4ff af2f 	bcc.w	8016f8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017130:	e754      	b.n	8016fdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017132:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8017136:	4283      	cmp	r3, r0
 8017138:	e7af      	b.n	801709a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801713a:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801713e:	4617      	mov	r7, r2
 8017140:	f102 0808 	add.w	r8, r2, #8
 8017144:	4666      	mov	r6, ip
 8017146:	6838      	ldr	r0, [r7, #0]
 8017148:	3708      	adds	r7, #8
 801714a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801714e:	46e6      	mov	lr, ip
 8017150:	4547      	cmp	r7, r8
 8017152:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8017156:	46f4      	mov	ip, lr
 8017158:	d1f5      	bne.n	8017146 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801715a:	6838      	ldr	r0, [r7, #0]
 801715c:	f8ce 0000 	str.w	r0, [lr]
 8017160:	88b9      	ldrh	r1, [r7, #4]
 8017162:	f8ae 1004 	strh.w	r1, [lr, #4]
 8017166:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801716a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801716e:	d009      	beq.n	8017184 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8017170:	7b51      	ldrb	r1, [r2, #13]
 8017172:	7992      	ldrb	r2, [r2, #6]
 8017174:	0149      	lsls	r1, r1, #5
 8017176:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801717a:	4311      	orrs	r1, r2
 801717c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017180:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8017184:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8017188:	b2ad      	uxth	r5, r5
 801718a:	d00d      	beq.n	80171a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801718c:	442b      	add	r3, r5
 801718e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8017192:	b29b      	uxth	r3, r3
 8017194:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8017198:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801719c:	10db      	asrs	r3, r3, #3
 801719e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80171a2:	4313      	orrs	r3, r2
 80171a4:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80171a8:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80171ac:	00cb      	lsls	r3, r1, #3
 80171ae:	064f      	lsls	r7, r1, #25
 80171b0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80171b4:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80171b8:	ea43 0302 	orr.w	r3, r3, r2
 80171bc:	bf44      	itt	mi
 80171be:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80171c2:	b21b      	sxthmi	r3, r3
 80171c4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80171c8:	1b5b      	subs	r3, r3, r5
 80171ca:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 80171ce:	4632      	mov	r2, r6
 80171d0:	e6f9      	b.n	8016fc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80171d2:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 80171d6:	4617      	mov	r7, r2
 80171d8:	f102 0908 	add.w	r9, r2, #8
 80171dc:	4666      	mov	r6, ip
 80171de:	6838      	ldr	r0, [r7, #0]
 80171e0:	3708      	adds	r7, #8
 80171e2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80171e6:	46e0      	mov	r8, ip
 80171e8:	454f      	cmp	r7, r9
 80171ea:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80171ee:	46c4      	mov	ip, r8
 80171f0:	d1f5      	bne.n	80171de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 80171f2:	6838      	ldr	r0, [r7, #0]
 80171f4:	f8c8 0000 	str.w	r0, [r8]
 80171f8:	88b9      	ldrh	r1, [r7, #4]
 80171fa:	f8a8 1004 	strh.w	r1, [r8, #4]
 80171fe:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8017202:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8017206:	d009      	beq.n	801721c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8017208:	7b51      	ldrb	r1, [r2, #13]
 801720a:	7992      	ldrb	r2, [r2, #6]
 801720c:	0149      	lsls	r1, r1, #5
 801720e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8017212:	4311      	orrs	r1, r2
 8017214:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017218:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801721c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8017220:	d00e      	beq.n	8017240 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8017222:	eba3 030e 	sub.w	r3, r3, lr
 8017226:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801722a:	b29b      	uxth	r3, r3
 801722c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8017230:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8017234:	10db      	asrs	r3, r3, #3
 8017236:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801723a:	4313      	orrs	r3, r2
 801723c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8017240:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8017244:	00cb      	lsls	r3, r1, #3
 8017246:	0648      	lsls	r0, r1, #25
 8017248:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801724c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8017250:	ea43 0302 	orr.w	r3, r3, r2
 8017254:	bf44      	itt	mi
 8017256:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801725a:	b21b      	sxthmi	r3, r3
 801725c:	1b5d      	subs	r5, r3, r5
 801725e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8017262:	e7b4      	b.n	80171ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08017264 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8017264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017268:	461e      	mov	r6, r3
 801726a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801726c:	4604      	mov	r4, r0
 801726e:	4617      	mov	r7, r2
 8017270:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017274:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8017278:	f7ed fa5c 	bl	8004734 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801727c:	4605      	mov	r5, r0
 801727e:	b918      	cbnz	r0, 8017288 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8017280:	6030      	str	r0, [r6, #0]
 8017282:	4628      	mov	r0, r5
 8017284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017288:	683b      	ldr	r3, [r7, #0]
 801728a:	4601      	mov	r1, r0
 801728c:	4638      	mov	r0, r7
 801728e:	68db      	ldr	r3, [r3, #12]
 8017290:	4798      	blx	r3
 8017292:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8017296:	4602      	mov	r2, r0
 8017298:	6030      	str	r0, [r6, #0]
 801729a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801729e:	d213      	bcs.n	80172c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80172a0:	4643      	mov	r3, r8
 80172a2:	4639      	mov	r1, r7
 80172a4:	4620      	mov	r0, r4
 80172a6:	f7ff fe39 	bl	8016f1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80172aa:	6030      	str	r0, [r6, #0]
 80172ac:	6833      	ldr	r3, [r6, #0]
 80172ae:	b143      	cbz	r3, 80172c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80172b0:	7b5a      	ldrb	r2, [r3, #13]
 80172b2:	7a9b      	ldrb	r3, [r3, #10]
 80172b4:	0052      	lsls	r2, r2, #1
 80172b6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80172ba:	4313      	orrs	r3, r2
 80172bc:	bf0c      	ite	eq
 80172be:	2301      	moveq	r3, #1
 80172c0:	2300      	movne	r3, #0
 80172c2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 80172c6:	e7dc      	b.n	8017282 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80172c8:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 80172cc:	b29b      	uxth	r3, r3
 80172ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80172d0:	d804      	bhi.n	80172dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80172d2:	4639      	mov	r1, r7
 80172d4:	4620      	mov	r0, r4
 80172d6:	f7ff fce7 	bl	8016ca8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80172da:	e7e6      	b.n	80172aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80172dc:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d0e3      	beq.n	80172ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80172e4:	f640 1302 	movw	r3, #2306	@ 0x902
 80172e8:	429d      	cmp	r5, r3
 80172ea:	d1df      	bne.n	80172ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80172ec:	4601      	mov	r1, r0
 80172ee:	4620      	mov	r0, r4
 80172f0:	f7ff fcaa 	bl	8016c48 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80172f4:	e7d9      	b.n	80172aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080172f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80172f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172fa:	461e      	mov	r6, r3
 80172fc:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80172fe:	4604      	mov	r4, r0
 8017300:	4617      	mov	r7, r2
 8017302:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017306:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801730a:	f7ed fa13 	bl	8004734 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801730e:	4605      	mov	r5, r0
 8017310:	b918      	cbnz	r0, 801731a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8017312:	6030      	str	r0, [r6, #0]
 8017314:	4628      	mov	r0, r5
 8017316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801731a:	683b      	ldr	r3, [r7, #0]
 801731c:	4601      	mov	r1, r0
 801731e:	4638      	mov	r0, r7
 8017320:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8017324:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017328:	47c8      	blx	r9
 801732a:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801732e:	4602      	mov	r2, r0
 8017330:	6030      	str	r0, [r6, #0]
 8017332:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8017336:	d213      	bcs.n	8017360 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8017338:	4643      	mov	r3, r8
 801733a:	4639      	mov	r1, r7
 801733c:	4620      	mov	r0, r4
 801733e:	f7ff fded 	bl	8016f1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8017342:	6030      	str	r0, [r6, #0]
 8017344:	6833      	ldr	r3, [r6, #0]
 8017346:	b143      	cbz	r3, 801735a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8017348:	7b5a      	ldrb	r2, [r3, #13]
 801734a:	7a9b      	ldrb	r3, [r3, #10]
 801734c:	0052      	lsls	r2, r2, #1
 801734e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8017352:	4313      	orrs	r3, r2
 8017354:	bf0c      	ite	eq
 8017356:	2301      	moveq	r3, #1
 8017358:	2300      	movne	r3, #0
 801735a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801735e:	e7d9      	b.n	8017314 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8017360:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8017364:	b29b      	uxth	r3, r3
 8017366:	2b7f      	cmp	r3, #127	@ 0x7f
 8017368:	d804      	bhi.n	8017374 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801736a:	4639      	mov	r1, r7
 801736c:	4620      	mov	r0, r4
 801736e:	f7ff fc9b 	bl	8016ca8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017372:	e7e6      	b.n	8017342 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8017374:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8017378:	2b00      	cmp	r3, #0
 801737a:	d0e3      	beq.n	8017344 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801737c:	f640 1302 	movw	r3, #2306	@ 0x902
 8017380:	429d      	cmp	r5, r3
 8017382:	d1df      	bne.n	8017344 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8017384:	4601      	mov	r1, r0
 8017386:	4620      	mov	r0, r4
 8017388:	f7ff fc5e 	bl	8016c48 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801738c:	e7d9      	b.n	8017342 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801738e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801738e:	b510      	push	{r4, lr}
 8017390:	4604      	mov	r4, r0
 8017392:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8017396:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8017398:	b1e1      	cbz	r1, 80173d4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801739a:	2b0a      	cmp	r3, #10
 801739c:	d02d      	beq.n	80173fa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801739e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80173a0:	3901      	subs	r1, #1
 80173a2:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80173a6:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 80173a8:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 80173ac:	1c51      	adds	r1, r2, #1
 80173ae:	b289      	uxth	r1, r1
 80173b0:	2901      	cmp	r1, #1
 80173b2:	bf8a      	itet	hi
 80173b4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80173b8:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 80173ba:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 80173bc:	1c5a      	adds	r2, r3, #1
 80173be:	8722      	strh	r2, [r4, #56]	@ 0x38
 80173c0:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80173c2:	4413      	add	r3, r2
 80173c4:	b29b      	uxth	r3, r3
 80173c6:	2b09      	cmp	r3, #9
 80173c8:	bf88      	it	hi
 80173ca:	3b0a      	subhi	r3, #10
 80173cc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80173d0:	8458      	strh	r0, [r3, #34]	@ 0x22
 80173d2:	e7de      	b.n	8017392 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80173d4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80173d6:	2b0a      	cmp	r3, #10
 80173d8:	d00f      	beq.n	80173fa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80173da:	4620      	mov	r0, r4
 80173dc:	f7ff fbf3 	bl	8016bc6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80173e0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80173e2:	1c5a      	adds	r2, r3, #1
 80173e4:	8722      	strh	r2, [r4, #56]	@ 0x38
 80173e6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80173e8:	4413      	add	r3, r2
 80173ea:	b29b      	uxth	r3, r3
 80173ec:	2b09      	cmp	r3, #9
 80173ee:	bf88      	it	hi
 80173f0:	3b0a      	subhi	r3, #10
 80173f2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80173f6:	8458      	strh	r0, [r3, #34]	@ 0x22
 80173f8:	e7ec      	b.n	80173d4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80173fa:	bd10      	pop	{r4, pc}

080173fc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80173fc:	b538      	push	{r3, r4, r5, lr}
 80173fe:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8017400:	4604      	mov	r4, r0
 8017402:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8017406:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8017408:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801740a:	3a01      	subs	r2, #1
 801740c:	8702      	strh	r2, [r0, #56]	@ 0x38
 801740e:	1c5a      	adds	r2, r3, #1
 8017410:	b292      	uxth	r2, r2
 8017412:	2a09      	cmp	r2, #9
 8017414:	bf8a      	itet	hi
 8017416:	3b09      	subhi	r3, #9
 8017418:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801741a:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801741c:	f7ff ffb7 	bl	801738e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8017420:	8c23      	ldrh	r3, [r4, #32]
 8017422:	2b01      	cmp	r3, #1
 8017424:	bf9c      	itt	ls
 8017426:	3301      	addls	r3, #1
 8017428:	8423      	strhls	r3, [r4, #32]
 801742a:	8be3      	ldrh	r3, [r4, #30]
 801742c:	b90b      	cbnz	r3, 8017432 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801742e:	2302      	movs	r3, #2
 8017430:	83e3      	strh	r3, [r4, #30]
 8017432:	8be3      	ldrh	r3, [r4, #30]
 8017434:	4628      	mov	r0, r5
 8017436:	3b01      	subs	r3, #1
 8017438:	b29b      	uxth	r3, r3
 801743a:	83e3      	strh	r3, [r4, #30]
 801743c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017440:	8365      	strh	r5, [r4, #26]
 8017442:	bd38      	pop	{r3, r4, r5, pc}

08017444 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8017444:	428a      	cmp	r2, r1
 8017446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801744a:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801744c:	d932      	bls.n	80174b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801744e:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8017450:	1a54      	subs	r4, r2, r1
 8017452:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8017456:	19ee      	adds	r6, r5, r7
 8017458:	fa1f fe84 	uxth.w	lr, r4
 801745c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8017460:	3e01      	subs	r6, #1
 8017462:	b2b4      	uxth	r4, r6
 8017464:	eba4 090e 	sub.w	r9, r4, lr
 8017468:	fa1f f989 	uxth.w	r9, r9
 801746c:	2c09      	cmp	r4, #9
 801746e:	4626      	mov	r6, r4
 8017470:	bf88      	it	hi
 8017472:	f1a4 060a 	subhi.w	r6, r4, #10
 8017476:	f1bc 0f00 	cmp.w	ip, #0
 801747a:	f104 34ff 	add.w	r4, r4, #4294967295
 801747e:	bf08      	it	eq
 8017480:	f04f 0c02 	moveq.w	ip, #2
 8017484:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8017488:	b2a4      	uxth	r4, r4
 801748a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801748e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8017492:	454c      	cmp	r4, r9
 8017494:	fa1f fc8c 	uxth.w	ip, ip
 8017498:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801749c:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 80174a0:	d1e4      	bne.n	801746c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80174a2:	eba5 050e 	sub.w	r5, r5, lr
 80174a6:	eb0e 0408 	add.w	r4, lr, r8
 80174aa:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 80174ae:	8705      	strh	r5, [r0, #56]	@ 0x38
 80174b0:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 80174b4:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 80174b6:	250a      	movs	r5, #10
 80174b8:	1a64      	subs	r4, r4, r1
 80174ba:	4439      	add	r1, r7
 80174bc:	b289      	uxth	r1, r1
 80174be:	8704      	strh	r4, [r0, #56]	@ 0x38
 80174c0:	2909      	cmp	r1, #9
 80174c2:	bf88      	it	hi
 80174c4:	390a      	subhi	r1, #10
 80174c6:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80174c8:	b18a      	cbz	r2, 80174ee <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80174ca:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 80174cc:	3a01      	subs	r2, #1
 80174ce:	3101      	adds	r1, #1
 80174d0:	b292      	uxth	r2, r2
 80174d2:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80174d6:	8701      	strh	r1, [r0, #56]	@ 0x38
 80174d8:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80174da:	b901      	cbnz	r1, 80174de <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80174dc:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80174de:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80174e0:	3901      	subs	r1, #1
 80174e2:	b289      	uxth	r1, r1
 80174e4:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80174e6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80174ea:	844c      	strh	r4, [r1, #34]	@ 0x22
 80174ec:	e7ec      	b.n	80174c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 80174ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174f2:	f7ff bf4c 	b.w	801738e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080174f6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80174f6:	b570      	push	{r4, r5, r6, lr}
 80174f8:	2500      	movs	r5, #0
 80174fa:	4295      	cmp	r5, r2
 80174fc:	d011      	beq.n	8017522 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80174fe:	8bc4      	ldrh	r4, [r0, #30]
 8017500:	f831 6b02 	ldrh.w	r6, [r1], #2
 8017504:	4414      	add	r4, r2
 8017506:	3c01      	subs	r4, #1
 8017508:	1b64      	subs	r4, r4, r5
 801750a:	b2a4      	uxth	r4, r4
 801750c:	2c01      	cmp	r4, #1
 801750e:	bf88      	it	hi
 8017510:	3c02      	subhi	r4, #2
 8017512:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017516:	8b64      	ldrh	r4, [r4, #26]
 8017518:	42b4      	cmp	r4, r6
 801751a:	d117      	bne.n	801754c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801751c:	3501      	adds	r5, #1
 801751e:	b2ad      	uxth	r5, r5
 8017520:	e7eb      	b.n	80174fa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8017522:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017526:	2400      	movs	r4, #0
 8017528:	4413      	add	r3, r2
 801752a:	b2a2      	uxth	r2, r4
 801752c:	429a      	cmp	r2, r3
 801752e:	da0f      	bge.n	8017550 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8017530:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8017532:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8017536:	3401      	adds	r4, #1
 8017538:	4432      	add	r2, r6
 801753a:	b292      	uxth	r2, r2
 801753c:	2a09      	cmp	r2, #9
 801753e:	bf88      	it	hi
 8017540:	3a0a      	subhi	r2, #10
 8017542:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8017546:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8017548:	42aa      	cmp	r2, r5
 801754a:	d0ee      	beq.n	801752a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801754c:	2000      	movs	r0, #0
 801754e:	bd70      	pop	{r4, r5, r6, pc}
 8017550:	2001      	movs	r0, #1
 8017552:	e7fc      	b.n	801754e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08017554 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8017554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017558:	4605      	mov	r5, r0
 801755a:	4616      	mov	r6, r2
 801755c:	1c8c      	adds	r4, r1, #2
 801755e:	8809      	ldrh	r1, [r1, #0]
 8017560:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8017564:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8017568:	42b3      	cmp	r3, r6
 801756a:	d124      	bne.n	80175b6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801756c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8017570:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017574:	f001 070f 	and.w	r7, r1, #15
 8017578:	4652      	mov	r2, sl
 801757a:	f8cd 8000 	str.w	r8, [sp]
 801757e:	464b      	mov	r3, r9
 8017580:	4621      	mov	r1, r4
 8017582:	4628      	mov	r0, r5
 8017584:	f7ff ffb7 	bl	80174f6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8017588:	4683      	mov	fp, r0
 801758a:	b168      	cbz	r0, 80175a8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801758c:	eb0a 0109 	add.w	r1, sl, r9
 8017590:	463a      	mov	r2, r7
 8017592:	4628      	mov	r0, r5
 8017594:	4441      	add	r1, r8
 8017596:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801759a:	4649      	mov	r1, r9
 801759c:	f7ff ff52 	bl	8017444 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80175a0:	4658      	mov	r0, fp
 80175a2:	b003      	add	sp, #12
 80175a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175a8:	eb07 010a 	add.w	r1, r7, sl
 80175ac:	4449      	add	r1, r9
 80175ae:	4441      	add	r1, r8
 80175b0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80175b4:	e7d2      	b.n	801755c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80175b6:	f04f 0b00 	mov.w	fp, #0
 80175ba:	e7f1      	b.n	80175a0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080175bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80175bc:	b570      	push	{r4, r5, r6, lr}
 80175be:	8810      	ldrh	r0, [r2, #0]
 80175c0:	4298      	cmp	r0, r3
 80175c2:	d817      	bhi.n	80175f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80175c4:	1e48      	subs	r0, r1, #1
 80175c6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80175ca:	4298      	cmp	r0, r3
 80175cc:	d312      	bcc.n	80175f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80175ce:	2400      	movs	r4, #0
 80175d0:	428c      	cmp	r4, r1
 80175d2:	d20f      	bcs.n	80175f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80175d4:	1860      	adds	r0, r4, r1
 80175d6:	1040      	asrs	r0, r0, #1
 80175d8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80175dc:	0085      	lsls	r5, r0, #2
 80175de:	42b3      	cmp	r3, r6
 80175e0:	d902      	bls.n	80175e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80175e2:	3001      	adds	r0, #1
 80175e4:	b284      	uxth	r4, r0
 80175e6:	e7f3      	b.n	80175d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80175e8:	d201      	bcs.n	80175ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80175ea:	b281      	uxth	r1, r0
 80175ec:	e7f0      	b.n	80175d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80175ee:	442a      	add	r2, r5
 80175f0:	8850      	ldrh	r0, [r2, #2]
 80175f2:	bd70      	pop	{r4, r5, r6, pc}
 80175f4:	2000      	movs	r0, #0
 80175f6:	e7fc      	b.n	80175f2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080175f8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80175f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175fc:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 80175fe:	4604      	mov	r4, r0
 8017600:	260b      	movs	r6, #11
 8017602:	886f      	ldrh	r7, [r5, #2]
 8017604:	087f      	lsrs	r7, r7, #1
 8017606:	3e01      	subs	r6, #1
 8017608:	d013      	beq.n	8017632 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801760a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801760c:	462a      	mov	r2, r5
 801760e:	4639      	mov	r1, r7
 8017610:	4620      	mov	r0, r4
 8017612:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017616:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801761a:	4643      	mov	r3, r8
 801761c:	f7ff ffce 	bl	80175bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8017620:	b138      	cbz	r0, 8017632 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017622:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8017626:	4642      	mov	r2, r8
 8017628:	4620      	mov	r0, r4
 801762a:	f7ff ff93 	bl	8017554 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801762e:	2800      	cmp	r0, #0
 8017630:	d1e9      	bne.n	8017606 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8017632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017638 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8017638:	b570      	push	{r4, r5, r6, lr}
 801763a:	694a      	ldr	r2, [r1, #20]
 801763c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801763e:	684b      	ldr	r3, [r1, #4]
 8017640:	1b54      	subs	r4, r2, r5
 8017642:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8017644:	f000 8106 	beq.w	8017854 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8017648:	1b9b      	subs	r3, r3, r6
 801764a:	d003      	beq.n	8017654 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801764c:	4363      	muls	r3, r4
 801764e:	2210      	movs	r2, #16
 8017650:	fb93 f3f2 	sdiv	r3, r3, r2
 8017654:	680c      	ldr	r4, [r1, #0]
 8017656:	698a      	ldr	r2, [r1, #24]
 8017658:	1b65      	subs	r5, r4, r5
 801765a:	f000 80fd 	beq.w	8017858 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801765e:	1b92      	subs	r2, r2, r6
 8017660:	d003      	beq.n	801766a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017662:	436a      	muls	r2, r5
 8017664:	2410      	movs	r4, #16
 8017666:	fb92 f2f4 	sdiv	r2, r2, r4
 801766a:	1a9b      	subs	r3, r3, r2
 801766c:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8017894 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8017670:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017674:	460a      	mov	r2, r1
 8017676:	ee07 3a90 	vmov	s15, r3
 801767a:	f100 040c 	add.w	r4, r0, #12
 801767e:	4603      	mov	r3, r0
 8017680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017684:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017688:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801768c:	eeb1 6a43 	vneg.f32	s12, s6
 8017690:	edd2 7a02 	vldr	s15, [r2, #8]
 8017694:	3214      	adds	r2, #20
 8017696:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801769a:	ece3 6a01 	vstmia	r3!, {s13}
 801769e:	429c      	cmp	r4, r3
 80176a0:	ed52 7a02 	vldr	s15, [r2, #-8]
 80176a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80176a8:	edc3 7a02 	vstr	s15, [r3, #8]
 80176ac:	ed52 7a01 	vldr	s15, [r2, #-4]
 80176b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80176b4:	edc3 7a05 	vstr	s15, [r3, #20]
 80176b8:	d1ea      	bne.n	8017690 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80176ba:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80176bc:	698b      	ldr	r3, [r1, #24]
 80176be:	edd0 4a02 	vldr	s9, [r0, #8]
 80176c2:	1a9b      	subs	r3, r3, r2
 80176c4:	edd0 3a00 	vldr	s7, [r0]
 80176c8:	edd0 6a01 	vldr	s13, [r0, #4]
 80176cc:	ee07 3a90 	vmov	s15, r3
 80176d0:	684b      	ldr	r3, [r1, #4]
 80176d2:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80176d6:	ed90 5a05 	vldr	s10, [r0, #20]
 80176da:	1a9b      	subs	r3, r3, r2
 80176dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80176e0:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80176e4:	ed90 2a03 	vldr	s4, [r0, #12]
 80176e8:	ee07 3a10 	vmov	s14, r3
 80176ec:	edd0 5a04 	vldr	s11, [r0, #16]
 80176f0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80176f4:	ed90 1a07 	vldr	s2, [r0, #28]
 80176f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80176fc:	edd0 2a06 	vldr	s5, [r0, #24]
 8017700:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8017704:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8017708:	ee27 7a04 	vmul.f32	s14, s14, s8
 801770c:	ee32 5a45 	vsub.f32	s10, s4, s10
 8017710:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017714:	ee67 7a83 	vmul.f32	s15, s15, s6
 8017718:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801771c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801771e:	694a      	ldr	r2, [r1, #20]
 8017720:	1b13      	subs	r3, r2, r4
 8017722:	ee07 3a10 	vmov	s14, r3
 8017726:	680b      	ldr	r3, [r1, #0]
 8017728:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801772c:	1b1b      	subs	r3, r3, r4
 801772e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017732:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8017736:	ee07 3a10 	vmov	s14, r3
 801773a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801773e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017742:	eee6 4a87 	vfma.f32	s9, s13, s14
 8017746:	ee64 4a86 	vmul.f32	s9, s9, s12
 801774a:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801774e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8017750:	698b      	ldr	r3, [r1, #24]
 8017752:	1a9b      	subs	r3, r3, r2
 8017754:	ee06 3a90 	vmov	s13, r3
 8017758:	684b      	ldr	r3, [r1, #4]
 801775a:	1a9b      	subs	r3, r3, r2
 801775c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017760:	ee07 3a10 	vmov	s14, r3
 8017764:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017768:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801776c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8017770:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017774:	eee5 6a87 	vfma.f32	s13, s11, s14
 8017778:	ee66 6a83 	vmul.f32	s13, s13, s6
 801777c:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8017780:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8017782:	694a      	ldr	r2, [r1, #20]
 8017784:	1b13      	subs	r3, r2, r4
 8017786:	ee07 3a10 	vmov	s14, r3
 801778a:	680b      	ldr	r3, [r1, #0]
 801778c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017790:	1b1b      	subs	r3, r3, r4
 8017792:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017796:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801779a:	ee07 3a10 	vmov	s14, r3
 801779e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80177a2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80177a6:	eea5 5a87 	vfma.f32	s10, s11, s14
 80177aa:	edd0 5a08 	vldr	s11, [r0, #32]
 80177ae:	ee31 1a65 	vsub.f32	s2, s2, s11
 80177b2:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80177b6:	ee25 5a06 	vmul.f32	s10, s10, s12
 80177ba:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 80177be:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80177c0:	698b      	ldr	r3, [r1, #24]
 80177c2:	1a9b      	subs	r3, r3, r2
 80177c4:	ee07 3a10 	vmov	s14, r3
 80177c8:	684b      	ldr	r3, [r1, #4]
 80177ca:	1a9b      	subs	r3, r3, r2
 80177cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80177d0:	ee01 3a90 	vmov	s3, r3
 80177d4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80177d8:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80177dc:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80177e0:	ee61 1a84 	vmul.f32	s3, s3, s8
 80177e4:	eea1 7a21 	vfma.f32	s14, s2, s3
 80177e8:	ee27 7a03 	vmul.f32	s14, s14, s6
 80177ec:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80177f0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80177f2:	694a      	ldr	r2, [r1, #20]
 80177f4:	1b13      	subs	r3, r2, r4
 80177f6:	ee03 3a10 	vmov	s6, r3
 80177fa:	680b      	ldr	r3, [r1, #0]
 80177fc:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8017800:	1b1b      	subs	r3, r3, r4
 8017802:	ee23 3a04 	vmul.f32	s6, s6, s8
 8017806:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801780a:	ee03 3a10 	vmov	s6, r3
 801780e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8017812:	ee23 4a04 	vmul.f32	s8, s6, s8
 8017816:	eee1 5a04 	vfma.f32	s11, s2, s8
 801781a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801781e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8017822:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8017826:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801782a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801782e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017832:	dd13      	ble.n	801785c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8017834:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017838:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801783c:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801783e:	eee3 7a87 	vfma.f32	s15, s7, s14
 8017842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801784a:	dd15      	ble.n	8017878 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801784c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017850:	6403      	str	r3, [r0, #64]	@ 0x40
 8017852:	bd70      	pop	{r4, r5, r6, pc}
 8017854:	4623      	mov	r3, r4
 8017856:	e6fd      	b.n	8017654 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017858:	462a      	mov	r2, r5
 801785a:	e706      	b.n	801766a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801785c:	d502      	bpl.n	8017864 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801785e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8017862:	e7e9      	b.n	8017838 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8017864:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8017868:	eea3 2a85 	vfma.f32	s4, s7, s10
 801786c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8017870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017874:	dade      	bge.n	8017834 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8017876:	e7f2      	b.n	801785e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8017878:	d502      	bpl.n	8017880 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801787a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801787e:	e7e7      	b.n	8017850 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8017880:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8017884:	eee3 4a86 	vfma.f32	s9, s7, s12
 8017888:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801788c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017890:	dadc      	bge.n	801784c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8017892:	e7f2      	b.n	801787a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8017894:	3d800000 	.word	0x3d800000

08017898 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8017898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801789c:	2714      	movs	r7, #20
 801789e:	435f      	muls	r7, r3
 80178a0:	eb02 0c07 	add.w	ip, r2, r7
 80178a4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80178a8:	f115 0e0f 	adds.w	lr, r5, #15
 80178ac:	f100 80a2 	bmi.w	80179f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80178b0:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80178b4:	9c08      	ldr	r4, [sp, #32]
 80178b6:	2614      	movs	r6, #20
 80178b8:	f8c0 e014 	str.w	lr, [r0, #20]
 80178bc:	4366      	muls	r6, r4
 80178be:	eb02 0806 	add.w	r8, r2, r6
 80178c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80178c6:	f115 040f 	adds.w	r4, r5, #15
 80178ca:	f100 809f 	bmi.w	8017a0c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80178ce:	1124      	asrs	r4, r4, #4
 80178d0:	eba4 040e 	sub.w	r4, r4, lr
 80178d4:	6184      	str	r4, [r0, #24]
 80178d6:	2c00      	cmp	r4, #0
 80178d8:	f000 808a 	beq.w	80179f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80178dc:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80178e0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80178e4:	5995      	ldr	r5, [r2, r6]
 80178e6:	eba4 0809 	sub.w	r8, r4, r9
 80178ea:	59d4      	ldr	r4, [r2, r7]
 80178ec:	eba5 0a04 	sub.w	sl, r5, r4
 80178f0:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80178f4:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80178f8:	fb0e fe05 	mul.w	lr, lr, r5
 80178fc:	fb0a ee19 	mls	lr, sl, r9, lr
 8017900:	fb08 e404 	mla	r4, r8, r4, lr
 8017904:	3c01      	subs	r4, #1
 8017906:	19a4      	adds	r4, r4, r6
 8017908:	f100 808c 	bmi.w	8017a24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801790c:	fb94 fef6 	sdiv	lr, r4, r6
 8017910:	fb06 441e 	mls	r4, r6, lr, r4
 8017914:	f8c0 e000 	str.w	lr, [r0]
 8017918:	6104      	str	r4, [r0, #16]
 801791a:	2d00      	cmp	r5, #0
 801791c:	f2c0 8095 	blt.w	8017a4a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8017920:	fb95 f4f6 	sdiv	r4, r5, r6
 8017924:	fb06 5514 	mls	r5, r6, r4, r5
 8017928:	6044      	str	r4, [r0, #4]
 801792a:	6085      	str	r5, [r0, #8]
 801792c:	60c6      	str	r6, [r0, #12]
 801792e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017932:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8017936:	6945      	ldr	r5, [r0, #20]
 8017938:	59d2      	ldr	r2, [r2, r7]
 801793a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801793e:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8017a6c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8017942:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8017946:	ee07 4a10 	vmov	s14, r4
 801794a:	6804      	ldr	r4, [r0, #0]
 801794c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8017950:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017954:	ee07 2a90 	vmov	s15, r2
 8017958:	ee27 7a26 	vmul.f32	s14, s14, s13
 801795c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017960:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017964:	edd3 6a00 	vldr	s13, [r3]
 8017968:	eee6 6a07 	vfma.f32	s13, s12, s14
 801796c:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8017970:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017974:	edc0 6a07 	vstr	s13, [r0, #28]
 8017978:	edd0 6a01 	vldr	s13, [r0, #4]
 801797c:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8017980:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017984:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8017988:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801798c:	ed80 6a08 	vstr	s12, [r0, #32]
 8017990:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8017992:	6242      	str	r2, [r0, #36]	@ 0x24
 8017994:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8017998:	ed93 6a03 	vldr	s12, [r3, #12]
 801799c:	eea5 6a87 	vfma.f32	s12, s11, s14
 80179a0:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80179a4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80179a8:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 80179ac:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80179b0:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 80179b4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80179b8:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 80179bc:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80179be:	6302      	str	r2, [r0, #48]	@ 0x30
 80179c0:	ed93 6a06 	vldr	s12, [r3, #24]
 80179c4:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 80179c8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80179cc:	eeb0 7a46 	vmov.f32	s14, s12
 80179d0:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 80179d4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80179d8:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80179dc:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 80179e0:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 80179e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80179e8:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 80179ec:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80179ee:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80179f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179f4:	2410      	movs	r4, #16
 80179f6:	f1c5 0501 	rsb	r5, r5, #1
 80179fa:	fb9e fef4 	sdiv	lr, lr, r4
 80179fe:	f015 050f 	ands.w	r5, r5, #15
 8017a02:	bf18      	it	ne
 8017a04:	2501      	movne	r5, #1
 8017a06:	ebae 0e05 	sub.w	lr, lr, r5
 8017a0a:	e753      	b.n	80178b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8017a0c:	f04f 0910 	mov.w	r9, #16
 8017a10:	f1c5 0501 	rsb	r5, r5, #1
 8017a14:	fb94 f4f9 	sdiv	r4, r4, r9
 8017a18:	f015 050f 	ands.w	r5, r5, #15
 8017a1c:	bf18      	it	ne
 8017a1e:	2501      	movne	r5, #1
 8017a20:	1b64      	subs	r4, r4, r5
 8017a22:	e755      	b.n	80178d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8017a24:	4264      	negs	r4, r4
 8017a26:	fb94 fef6 	sdiv	lr, r4, r6
 8017a2a:	f1ce 0800 	rsb	r8, lr, #0
 8017a2e:	fb06 441e 	mls	r4, r6, lr, r4
 8017a32:	f8c0 8000 	str.w	r8, [r0]
 8017a36:	6104      	str	r4, [r0, #16]
 8017a38:	2c00      	cmp	r4, #0
 8017a3a:	f43f af6e 	beq.w	801791a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8017a3e:	ea6f 0e0e 	mvn.w	lr, lr
 8017a42:	1b34      	subs	r4, r6, r4
 8017a44:	f8c0 e000 	str.w	lr, [r0]
 8017a48:	e766      	b.n	8017918 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8017a4a:	426d      	negs	r5, r5
 8017a4c:	fb95 f4f6 	sdiv	r4, r5, r6
 8017a50:	f1c4 0e00 	rsb	lr, r4, #0
 8017a54:	fb06 5514 	mls	r5, r6, r4, r5
 8017a58:	f8c0 e004 	str.w	lr, [r0, #4]
 8017a5c:	6085      	str	r5, [r0, #8]
 8017a5e:	2d00      	cmp	r5, #0
 8017a60:	f43f af64 	beq.w	801792c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8017a64:	43e4      	mvns	r4, r4
 8017a66:	1b75      	subs	r5, r6, r5
 8017a68:	6044      	str	r4, [r0, #4]
 8017a6a:	e75e      	b.n	801792a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8017a6c:	3d800000 	.word	0x3d800000

08017a70 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8017a70:	4602      	mov	r2, r0
 8017a72:	b148      	cbz	r0, 8017a88 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8017a74:	2300      	movs	r3, #0
 8017a76:	b298      	uxth	r0, r3
 8017a78:	3301      	adds	r3, #1
 8017a7a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017a7e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8017a82:	2900      	cmp	r1, #0
 8017a84:	d1f7      	bne.n	8017a76 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8017a86:	4770      	bx	lr
 8017a88:	4770      	bx	lr

08017a8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8017a8a:	b530      	push	{r4, r5, lr}
 8017a8c:	4604      	mov	r4, r0
 8017a8e:	b159      	cbz	r1, 8017aa8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8017a90:	b148      	cbz	r0, 8017aa6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8017a92:	2300      	movs	r3, #0
 8017a94:	b298      	uxth	r0, r3
 8017a96:	4282      	cmp	r2, r0
 8017a98:	d905      	bls.n	8017aa6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8017a9a:	5ccd      	ldrb	r5, [r1, r3]
 8017a9c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8017aa0:	3301      	adds	r3, #1
 8017aa2:	2d00      	cmp	r5, #0
 8017aa4:	d1f6      	bne.n	8017a94 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8017aa6:	bd30      	pop	{r4, r5, pc}
 8017aa8:	4608      	mov	r0, r1
 8017aaa:	e7fc      	b.n	8017aa6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08017aac <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 8017aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017aae:	b08b      	sub	sp, #44	@ 0x2c
 8017ab0:	468c      	mov	ip, r1
 8017ab2:	4604      	mov	r4, r0
 8017ab4:	2100      	movs	r1, #0
 8017ab6:	261f      	movs	r6, #31
 8017ab8:	af01      	add	r7, sp, #4
 8017aba:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8017abe:	1e71      	subs	r1, r6, #1
 8017ac0:	fb94 fef3 	sdiv	lr, r4, r3
 8017ac4:	fb03 441e 	mls	r4, r3, lr, r4
 8017ac8:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8017acc:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8017ad0:	b2ec      	uxtb	r4, r5
 8017ad2:	2d09      	cmp	r5, #9
 8017ad4:	bfd4      	ite	le
 8017ad6:	3430      	addle	r4, #48	@ 0x30
 8017ad8:	3457      	addgt	r4, #87	@ 0x57
 8017ada:	b2e4      	uxtb	r4, r4
 8017adc:	55bc      	strb	r4, [r7, r6]
 8017ade:	4674      	mov	r4, lr
 8017ae0:	b974      	cbnz	r4, 8017b00 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 8017ae2:	2800      	cmp	r0, #0
 8017ae4:	da05      	bge.n	8017af2 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 8017ae6:	ab0a      	add	r3, sp, #40	@ 0x28
 8017ae8:	4419      	add	r1, r3
 8017aea:	232d      	movs	r3, #45	@ 0x2d
 8017aec:	f801 3c24 	strb.w	r3, [r1, #-36]
 8017af0:	1eb1      	subs	r1, r6, #2
 8017af2:	3101      	adds	r1, #1
 8017af4:	4660      	mov	r0, ip
 8017af6:	4439      	add	r1, r7
 8017af8:	f7ff ffc7 	bl	8017a8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8017afc:	b00b      	add	sp, #44	@ 0x2c
 8017afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b00:	460e      	mov	r6, r1
 8017b02:	e7dc      	b.n	8017abe <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

08017b04 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 8017b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b06:	468c      	mov	ip, r1
 8017b08:	b08b      	sub	sp, #44	@ 0x2c
 8017b0a:	2100      	movs	r1, #0
 8017b0c:	ae01      	add	r6, sp, #4
 8017b0e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8017b12:	211f      	movs	r1, #31
 8017b14:	fbb0 f7f3 	udiv	r7, r0, r3
 8017b18:	fb03 0517 	mls	r5, r3, r7, r0
 8017b1c:	4638      	mov	r0, r7
 8017b1e:	b2ec      	uxtb	r4, r5
 8017b20:	2d09      	cmp	r5, #9
 8017b22:	bfd4      	ite	le
 8017b24:	3430      	addle	r4, #48	@ 0x30
 8017b26:	3457      	addgt	r4, #87	@ 0x57
 8017b28:	b2e4      	uxtb	r4, r4
 8017b2a:	558c      	strb	r4, [r1, r6]
 8017b2c:	1e4c      	subs	r4, r1, #1
 8017b2e:	b92f      	cbnz	r7, 8017b3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 8017b30:	4431      	add	r1, r6
 8017b32:	4660      	mov	r0, ip
 8017b34:	f7ff ffa9 	bl	8017a8a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8017b38:	b00b      	add	sp, #44	@ 0x2c
 8017b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b3c:	4621      	mov	r1, r4
 8017b3e:	e7e9      	b.n	8017b14 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08017b40 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8017b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b44:	b085      	sub	sp, #20
 8017b46:	4691      	mov	r9, r2
 8017b48:	6802      	ldr	r2, [r0, #0]
 8017b4a:	4688      	mov	r8, r1
 8017b4c:	461c      	mov	r4, r3
 8017b4e:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 8017b52:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 8017b56:	4683      	mov	fp, r0
 8017b58:	4610      	mov	r0, r2
 8017b5a:	9103      	str	r1, [sp, #12]
 8017b5c:	9302      	str	r3, [sp, #8]
 8017b5e:	9201      	str	r2, [sp, #4]
 8017b60:	f7ff ff86 	bl	8017a70 <_ZN8touchgfx7Unicode6strlenEPKt>
 8017b64:	f1b8 0f00 	cmp.w	r8, #0
 8017b68:	bf0c      	ite	eq
 8017b6a:	4684      	moveq	ip, r0
 8017b6c:	f100 0c01 	addne.w	ip, r0, #1
 8017b70:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 8017b74:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8017b78:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8017b7a:	fa1f fc8c 	uxth.w	ip, ip
 8017b7e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8017b80:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 8017b84:	9903      	ldr	r1, [sp, #12]
 8017b86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017b8a:	d041      	beq.n	8017c10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8017b8c:	d834      	bhi.n	8017bf8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8017b8e:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 8017b92:	d059      	beq.n	8017c48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8017b94:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 8017b98:	d03a      	beq.n	8017c10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8017b9a:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 8017b9e:	d034      	beq.n	8017c0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8017ba0:	2400      	movs	r4, #0
 8017ba2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8017ba6:	3a01      	subs	r2, #1
 8017ba8:	b169      	cbz	r1, 8017bc6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017baa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017bac:	458c      	cmp	ip, r1
 8017bae:	da09      	bge.n	8017bc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8017bb0:	eba1 010c 	sub.w	r1, r1, ip
 8017bb4:	b289      	uxth	r1, r1
 8017bb6:	b933      	cbnz	r3, 8017bc6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017bb8:	2e00      	cmp	r6, #0
 8017bba:	d051      	beq.n	8017c60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8017bbc:	2800      	cmp	r0, #0
 8017bbe:	d04f      	beq.n	8017c60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8017bc0:	440c      	add	r4, r1
 8017bc2:	b2a4      	uxth	r4, r4
 8017bc4:	2100      	movs	r1, #0
 8017bc6:	682b      	ldr	r3, [r5, #0]
 8017bc8:	4293      	cmp	r3, r2
 8017bca:	da07      	bge.n	8017bdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8017bcc:	f1b8 0f00 	cmp.w	r8, #0
 8017bd0:	d004      	beq.n	8017bdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8017bd2:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8017bd6:	682b      	ldr	r3, [r5, #0]
 8017bd8:	3301      	adds	r3, #1
 8017bda:	602b      	str	r3, [r5, #0]
 8017bdc:	2730      	movs	r7, #48	@ 0x30
 8017bde:	2c00      	cmp	r4, #0
 8017be0:	d04e      	beq.n	8017c80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8017be2:	682e      	ldr	r6, [r5, #0]
 8017be4:	3c01      	subs	r4, #1
 8017be6:	42b2      	cmp	r2, r6
 8017be8:	b2a4      	uxth	r4, r4
 8017bea:	dd49      	ble.n	8017c80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8017bec:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8017bf0:	682b      	ldr	r3, [r5, #0]
 8017bf2:	3301      	adds	r3, #1
 8017bf4:	602b      	str	r3, [r5, #0]
 8017bf6:	e7f2      	b.n	8017bde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8017bf8:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 8017bfc:	d01d      	beq.n	8017c3a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8017bfe:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 8017c02:	d002      	beq.n	8017c0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8017c04:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 8017c08:	e7c9      	b.n	8017b9e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8017c0a:	4684      	mov	ip, r0
 8017c0c:	f04f 0800 	mov.w	r8, #0
 8017c10:	2c00      	cmp	r4, #0
 8017c12:	d0c6      	beq.n	8017ba2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8017c14:	b947      	cbnz	r7, 8017c28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8017c16:	2801      	cmp	r0, #1
 8017c18:	d106      	bne.n	8017c28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8017c1a:	8814      	ldrh	r4, [r2, #0]
 8017c1c:	2c30      	cmp	r4, #48	@ 0x30
 8017c1e:	bf02      	ittt	eq
 8017c20:	3202      	addeq	r2, #2
 8017c22:	4638      	moveq	r0, r7
 8017c24:	f8cb 2000 	streq.w	r2, [fp]
 8017c28:	45bc      	cmp	ip, r7
 8017c2a:	da14      	bge.n	8017c56 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8017c2c:	b2bf      	uxth	r7, r7
 8017c2e:	eba7 040c 	sub.w	r4, r7, ip
 8017c32:	46bc      	mov	ip, r7
 8017c34:	b2a4      	uxth	r4, r4
 8017c36:	2600      	movs	r6, #0
 8017c38:	e7b3      	b.n	8017ba2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8017c3a:	4684      	mov	ip, r0
 8017c3c:	b16c      	cbz	r4, 8017c5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8017c3e:	42b8      	cmp	r0, r7
 8017c40:	dd00      	ble.n	8017c44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8017c42:	b2b8      	uxth	r0, r7
 8017c44:	2400      	movs	r4, #0
 8017c46:	e003      	b.n	8017c50 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8017c48:	f04f 0c01 	mov.w	ip, #1
 8017c4c:	2400      	movs	r4, #0
 8017c4e:	4660      	mov	r0, ip
 8017c50:	4626      	mov	r6, r4
 8017c52:	46a0      	mov	r8, r4
 8017c54:	e7a5      	b.n	8017ba2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8017c56:	2400      	movs	r4, #0
 8017c58:	e7ed      	b.n	8017c36 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8017c5a:	4626      	mov	r6, r4
 8017c5c:	46a0      	mov	r8, r4
 8017c5e:	e7a0      	b.n	8017ba2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8017c60:	2900      	cmp	r1, #0
 8017c62:	d0b0      	beq.n	8017bc6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017c64:	2720      	movs	r7, #32
 8017c66:	682e      	ldr	r6, [r5, #0]
 8017c68:	2900      	cmp	r1, #0
 8017c6a:	d0ac      	beq.n	8017bc6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017c6c:	3901      	subs	r1, #1
 8017c6e:	4296      	cmp	r6, r2
 8017c70:	b289      	uxth	r1, r1
 8017c72:	daa7      	bge.n	8017bc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8017c74:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8017c78:	682b      	ldr	r3, [r5, #0]
 8017c7a:	3301      	adds	r3, #1
 8017c7c:	602b      	str	r3, [r5, #0]
 8017c7e:	e7f2      	b.n	8017c66 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8017c80:	b188      	cbz	r0, 8017ca6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8017c82:	682b      	ldr	r3, [r5, #0]
 8017c84:	3801      	subs	r0, #1
 8017c86:	429a      	cmp	r2, r3
 8017c88:	b280      	uxth	r0, r0
 8017c8a:	dd0c      	ble.n	8017ca6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8017c8c:	f8db 3000 	ldr.w	r3, [fp]
 8017c90:	1c9c      	adds	r4, r3, #2
 8017c92:	f8cb 4000 	str.w	r4, [fp]
 8017c96:	881c      	ldrh	r4, [r3, #0]
 8017c98:	682b      	ldr	r3, [r5, #0]
 8017c9a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8017c9e:	682b      	ldr	r3, [r5, #0]
 8017ca0:	3301      	adds	r3, #1
 8017ca2:	602b      	str	r3, [r5, #0]
 8017ca4:	e7ec      	b.n	8017c80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8017ca6:	2620      	movs	r6, #32
 8017ca8:	b151      	cbz	r1, 8017cc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8017caa:	6828      	ldr	r0, [r5, #0]
 8017cac:	3901      	subs	r1, #1
 8017cae:	4282      	cmp	r2, r0
 8017cb0:	b289      	uxth	r1, r1
 8017cb2:	dd05      	ble.n	8017cc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8017cb4:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8017cb8:	682b      	ldr	r3, [r5, #0]
 8017cba:	3301      	adds	r3, #1
 8017cbc:	602b      	str	r3, [r5, #0]
 8017cbe:	e7f3      	b.n	8017ca8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8017cc0:	b005      	add	sp, #20
 8017cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017cc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8017cc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017cca:	2400      	movs	r4, #0
 8017ccc:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8017cd0:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 8017cd4:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 8017cd8:	8014      	strh	r4, [r2, #0]
 8017cda:	701c      	strb	r4, [r3, #0]
 8017cdc:	f888 4000 	strb.w	r4, [r8]
 8017ce0:	f88c 4000 	strb.w	r4, [ip]
 8017ce4:	f88e 4000 	strb.w	r4, [lr]
 8017ce8:	703c      	strb	r4, [r7, #0]
 8017cea:	6804      	ldr	r4, [r0, #0]
 8017cec:	b1a4      	cbz	r4, 8017d18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8017cee:	8824      	ldrh	r4, [r4, #0]
 8017cf0:	f04f 0901 	mov.w	r9, #1
 8017cf4:	b314      	cbz	r4, 8017d3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8017cf6:	2c2b      	cmp	r4, #43	@ 0x2b
 8017cf8:	d001      	beq.n	8017cfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8017cfa:	2c20      	cmp	r4, #32
 8017cfc:	d110      	bne.n	8017d20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8017cfe:	8014      	strh	r4, [r2, #0]
 8017d00:	6804      	ldr	r4, [r0, #0]
 8017d02:	b10c      	cbz	r4, 8017d08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8017d04:	3402      	adds	r4, #2
 8017d06:	6004      	str	r4, [r0, #0]
 8017d08:	680c      	ldr	r4, [r1, #0]
 8017d0a:	b10c      	cbz	r4, 8017d10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8017d0c:	3401      	adds	r4, #1
 8017d0e:	600c      	str	r4, [r1, #0]
 8017d10:	6804      	ldr	r4, [r0, #0]
 8017d12:	b17c      	cbz	r4, 8017d34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8017d14:	8824      	ldrh	r4, [r4, #0]
 8017d16:	e7ed      	b.n	8017cf4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8017d18:	680c      	ldr	r4, [r1, #0]
 8017d1a:	b17c      	cbz	r4, 8017d3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8017d1c:	7824      	ldrb	r4, [r4, #0]
 8017d1e:	e7e7      	b.n	8017cf0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8017d20:	2c2d      	cmp	r4, #45	@ 0x2d
 8017d22:	d102      	bne.n	8017d2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8017d24:	f883 9000 	strb.w	r9, [r3]
 8017d28:	e7ea      	b.n	8017d00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8017d2a:	2c23      	cmp	r4, #35	@ 0x23
 8017d2c:	d107      	bne.n	8017d3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8017d2e:	f888 9000 	strb.w	r9, [r8]
 8017d32:	e7e5      	b.n	8017d00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8017d34:	680c      	ldr	r4, [r1, #0]
 8017d36:	b10c      	cbz	r4, 8017d3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8017d38:	7824      	ldrb	r4, [r4, #0]
 8017d3a:	e7db      	b.n	8017cf4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8017d3c:	2400      	movs	r4, #0
 8017d3e:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8017d42:	2b09      	cmp	r3, #9
 8017d44:	d901      	bls.n	8017d4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8017d46:	2c2a      	cmp	r4, #42	@ 0x2a
 8017d48:	d122      	bne.n	8017d90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8017d4a:	2301      	movs	r3, #1
 8017d4c:	2c30      	cmp	r4, #48	@ 0x30
 8017d4e:	f88e 3000 	strb.w	r3, [lr]
 8017d52:	d10d      	bne.n	8017d70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8017d54:	f88c 3000 	strb.w	r3, [ip]
 8017d58:	6803      	ldr	r3, [r0, #0]
 8017d5a:	b10b      	cbz	r3, 8017d60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8017d5c:	3302      	adds	r3, #2
 8017d5e:	6003      	str	r3, [r0, #0]
 8017d60:	680b      	ldr	r3, [r1, #0]
 8017d62:	b10b      	cbz	r3, 8017d68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8017d64:	3301      	adds	r3, #1
 8017d66:	600b      	str	r3, [r1, #0]
 8017d68:	6803      	ldr	r3, [r0, #0]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d02f      	beq.n	8017dce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8017d6e:	881c      	ldrh	r4, [r3, #0]
 8017d70:	2c2a      	cmp	r4, #42	@ 0x2a
 8017d72:	d135      	bne.n	8017de0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8017d74:	f04f 33ff 	mov.w	r3, #4294967295
 8017d78:	6033      	str	r3, [r6, #0]
 8017d7a:	6803      	ldr	r3, [r0, #0]
 8017d7c:	b10b      	cbz	r3, 8017d82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8017d7e:	3302      	adds	r3, #2
 8017d80:	6003      	str	r3, [r0, #0]
 8017d82:	680b      	ldr	r3, [r1, #0]
 8017d84:	b10b      	cbz	r3, 8017d8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8017d86:	3301      	adds	r3, #1
 8017d88:	600b      	str	r3, [r1, #0]
 8017d8a:	6803      	ldr	r3, [r0, #0]
 8017d8c:	b31b      	cbz	r3, 8017dd6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8017d8e:	881c      	ldrh	r4, [r3, #0]
 8017d90:	2c2e      	cmp	r4, #46	@ 0x2e
 8017d92:	d11a      	bne.n	8017dca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8017d94:	2301      	movs	r3, #1
 8017d96:	703b      	strb	r3, [r7, #0]
 8017d98:	6803      	ldr	r3, [r0, #0]
 8017d9a:	b10b      	cbz	r3, 8017da0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8017d9c:	3302      	adds	r3, #2
 8017d9e:	6003      	str	r3, [r0, #0]
 8017da0:	680b      	ldr	r3, [r1, #0]
 8017da2:	b10b      	cbz	r3, 8017da8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8017da4:	3301      	adds	r3, #1
 8017da6:	600b      	str	r3, [r1, #0]
 8017da8:	6803      	ldr	r3, [r0, #0]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d036      	beq.n	8017e1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8017dae:	881b      	ldrh	r3, [r3, #0]
 8017db0:	2b2a      	cmp	r3, #42	@ 0x2a
 8017db2:	d137      	bne.n	8017e24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8017db4:	f04f 33ff 	mov.w	r3, #4294967295
 8017db8:	602b      	str	r3, [r5, #0]
 8017dba:	6803      	ldr	r3, [r0, #0]
 8017dbc:	b10b      	cbz	r3, 8017dc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8017dbe:	3302      	adds	r3, #2
 8017dc0:	6003      	str	r3, [r0, #0]
 8017dc2:	680b      	ldr	r3, [r1, #0]
 8017dc4:	b10b      	cbz	r3, 8017dca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8017dc6:	3301      	adds	r3, #1
 8017dc8:	600b      	str	r3, [r1, #0]
 8017dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017dce:	680c      	ldr	r4, [r1, #0]
 8017dd0:	b134      	cbz	r4, 8017de0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8017dd2:	7824      	ldrb	r4, [r4, #0]
 8017dd4:	e7cc      	b.n	8017d70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8017dd6:	680b      	ldr	r3, [r1, #0]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d0f6      	beq.n	8017dca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8017ddc:	781c      	ldrb	r4, [r3, #0]
 8017dde:	e7d7      	b.n	8017d90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8017de0:	2300      	movs	r3, #0
 8017de2:	220a      	movs	r2, #10
 8017de4:	6033      	str	r3, [r6, #0]
 8017de6:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017dea:	fa1f f38c 	uxth.w	r3, ip
 8017dee:	2b09      	cmp	r3, #9
 8017df0:	d8ce      	bhi.n	8017d90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8017df2:	6833      	ldr	r3, [r6, #0]
 8017df4:	fb02 c303 	mla	r3, r2, r3, ip
 8017df8:	6033      	str	r3, [r6, #0]
 8017dfa:	6803      	ldr	r3, [r0, #0]
 8017dfc:	b10b      	cbz	r3, 8017e02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8017dfe:	3302      	adds	r3, #2
 8017e00:	6003      	str	r3, [r0, #0]
 8017e02:	680b      	ldr	r3, [r1, #0]
 8017e04:	b10b      	cbz	r3, 8017e0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8017e06:	3301      	adds	r3, #1
 8017e08:	600b      	str	r3, [r1, #0]
 8017e0a:	6803      	ldr	r3, [r0, #0]
 8017e0c:	b10b      	cbz	r3, 8017e12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8017e0e:	881c      	ldrh	r4, [r3, #0]
 8017e10:	e7e9      	b.n	8017de6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8017e12:	680c      	ldr	r4, [r1, #0]
 8017e14:	2c00      	cmp	r4, #0
 8017e16:	d0e6      	beq.n	8017de6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8017e18:	7824      	ldrb	r4, [r4, #0]
 8017e1a:	e7e4      	b.n	8017de6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8017e1c:	680b      	ldr	r3, [r1, #0]
 8017e1e:	b10b      	cbz	r3, 8017e24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8017e20:	781b      	ldrb	r3, [r3, #0]
 8017e22:	e7c5      	b.n	8017db0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8017e24:	2200      	movs	r2, #0
 8017e26:	240a      	movs	r4, #10
 8017e28:	602a      	str	r2, [r5, #0]
 8017e2a:	3b30      	subs	r3, #48	@ 0x30
 8017e2c:	682a      	ldr	r2, [r5, #0]
 8017e2e:	b29e      	uxth	r6, r3
 8017e30:	2e09      	cmp	r6, #9
 8017e32:	d813      	bhi.n	8017e5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8017e34:	fb04 3302 	mla	r3, r4, r2, r3
 8017e38:	602b      	str	r3, [r5, #0]
 8017e3a:	6803      	ldr	r3, [r0, #0]
 8017e3c:	b10b      	cbz	r3, 8017e42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8017e3e:	3302      	adds	r3, #2
 8017e40:	6003      	str	r3, [r0, #0]
 8017e42:	680b      	ldr	r3, [r1, #0]
 8017e44:	b10b      	cbz	r3, 8017e4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8017e46:	3301      	adds	r3, #1
 8017e48:	600b      	str	r3, [r1, #0]
 8017e4a:	6803      	ldr	r3, [r0, #0]
 8017e4c:	b10b      	cbz	r3, 8017e52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8017e4e:	881b      	ldrh	r3, [r3, #0]
 8017e50:	e7eb      	b.n	8017e2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8017e52:	680b      	ldr	r3, [r1, #0]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d0e8      	beq.n	8017e2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8017e58:	781b      	ldrb	r3, [r3, #0]
 8017e5a:	e7e6      	b.n	8017e2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8017e5c:	2a06      	cmp	r2, #6
 8017e5e:	bfa8      	it	ge
 8017e60:	2206      	movge	r2, #6
 8017e62:	602a      	str	r2, [r5, #0]
 8017e64:	e7b1      	b.n	8017dca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08017e66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8017e66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e6a:	b0a3      	sub	sp, #140	@ 0x8c
 8017e6c:	2600      	movs	r6, #0
 8017e6e:	4607      	mov	r7, r0
 8017e70:	4688      	mov	r8, r1
 8017e72:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 8017e76:	4631      	mov	r1, r6
 8017e78:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8017e7a:	4648      	mov	r0, r9
 8017e7c:	960d      	str	r6, [sp, #52]	@ 0x34
 8017e7e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017e82:	2242      	movs	r2, #66	@ 0x42
 8017e84:	f00b feac 	bl	8023be0 <memset>
 8017e88:	b15f      	cbz	r7, 8017ea2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8017e8a:	f108 3aff 	add.w	sl, r8, #4294967295
 8017e8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017e92:	b152      	cbz	r2, 8017eaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8017e94:	8812      	ldrh	r2, [r2, #0]
 8017e96:	b10a      	cbz	r2, 8017e9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8017e98:	459a      	cmp	sl, r3
 8017e9a:	dc2e      	bgt.n	8017efa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8017ea2:	4638      	mov	r0, r7
 8017ea4:	b023      	add	sp, #140	@ 0x8c
 8017ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017eaa:	9a08      	ldr	r2, [sp, #32]
 8017eac:	2a00      	cmp	r2, #0
 8017eae:	d0f5      	beq.n	8017e9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8017eb0:	7812      	ldrb	r2, [r2, #0]
 8017eb2:	e7f0      	b.n	8017e96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8017eb4:	2d00      	cmp	r5, #0
 8017eb6:	d0ea      	beq.n	8017e8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017eb8:	782a      	ldrb	r2, [r5, #0]
 8017eba:	b142      	cbz	r2, 8017ece <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8017ebc:	2a25      	cmp	r2, #37	@ 0x25
 8017ebe:	d001      	beq.n	8017ec4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8017ec0:	459a      	cmp	sl, r3
 8017ec2:	dc08      	bgt.n	8017ed6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8017ec4:	f1bb 0f00 	cmp.w	fp, #0
 8017ec8:	d121      	bne.n	8017f0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8017eca:	2d00      	cmp	r5, #0
 8017ecc:	d0df      	beq.n	8017e8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017ece:	782a      	ldrb	r2, [r5, #0]
 8017ed0:	f04f 0b00 	mov.w	fp, #0
 8017ed4:	e01d      	b.n	8017f12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8017ed6:	f1bb 0f00 	cmp.w	fp, #0
 8017eda:	d077      	beq.n	8017fcc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8017edc:	f8bb 2000 	ldrh.w	r2, [fp]
 8017ee0:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8017ee4:	f1bb 0f00 	cmp.w	fp, #0
 8017ee8:	d002      	beq.n	8017ef0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8017eea:	f10b 0202 	add.w	r2, fp, #2
 8017eee:	9209      	str	r2, [sp, #36]	@ 0x24
 8017ef0:	b10d      	cbz	r5, 8017ef6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8017ef2:	3501      	adds	r5, #1
 8017ef4:	9508      	str	r5, [sp, #32]
 8017ef6:	3301      	adds	r3, #1
 8017ef8:	930d      	str	r3, [sp, #52]	@ 0x34
 8017efa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017efc:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8017f00:	f1bb 0f00 	cmp.w	fp, #0
 8017f04:	d0d6      	beq.n	8017eb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8017f06:	f8bb 2000 	ldrh.w	r2, [fp]
 8017f0a:	2a00      	cmp	r2, #0
 8017f0c:	d1d6      	bne.n	8017ebc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8017f0e:	f8bb 2000 	ldrh.w	r2, [fp]
 8017f12:	2a00      	cmp	r2, #0
 8017f14:	d0bb      	beq.n	8017e8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017f16:	459a      	cmp	sl, r3
 8017f18:	ddb9      	ble.n	8017e8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017f1a:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 8017f1e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8017f22:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 8017f26:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 8017f2a:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 8017f2e:	960e      	str	r6, [sp, #56]	@ 0x38
 8017f30:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 8017f34:	960f      	str	r6, [sp, #60]	@ 0x3c
 8017f36:	f1bb 0f00 	cmp.w	fp, #0
 8017f3a:	d002      	beq.n	8017f42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8017f3c:	f10b 0302 	add.w	r3, fp, #2
 8017f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f42:	b10d      	cbz	r5, 8017f48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8017f44:	1c6b      	adds	r3, r5, #1
 8017f46:	9308      	str	r3, [sp, #32]
 8017f48:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017f4a:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8017f4e:	a908      	add	r1, sp, #32
 8017f50:	a809      	add	r0, sp, #36	@ 0x24
 8017f52:	9305      	str	r3, [sp, #20]
 8017f54:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 8017f58:	9304      	str	r3, [sp, #16]
 8017f5a:	ab0e      	add	r3, sp, #56	@ 0x38
 8017f5c:	9303      	str	r3, [sp, #12]
 8017f5e:	ab0c      	add	r3, sp, #48	@ 0x30
 8017f60:	9302      	str	r3, [sp, #8]
 8017f62:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8017f66:	9301      	str	r3, [sp, #4]
 8017f68:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8017f6c:	9300      	str	r3, [sp, #0]
 8017f6e:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 8017f72:	f7ff fea8 	bl	8017cc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8017f76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	bfbf      	itttt	lt
 8017f7c:	6823      	ldrlt	r3, [r4, #0]
 8017f7e:	3404      	addlt	r4, #4
 8017f80:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017f84:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8017f86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	bfbe      	ittt	lt
 8017f8c:	6823      	ldrlt	r3, [r4, #0]
 8017f8e:	3404      	addlt	r4, #4
 8017f90:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017f94:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8017f98:	bfb8      	it	lt
 8017f9a:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 8017f9c:	b1d9      	cbz	r1, 8017fd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8017f9e:	880b      	ldrh	r3, [r1, #0]
 8017fa0:	2b69      	cmp	r3, #105	@ 0x69
 8017fa2:	d01f      	beq.n	8017fe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017fa4:	d82f      	bhi.n	8018006 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8017fa6:	2b58      	cmp	r3, #88	@ 0x58
 8017fa8:	d01c      	beq.n	8017fe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8017faa:	d818      	bhi.n	8017fde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8017fac:	2b25      	cmp	r3, #37	@ 0x25
 8017fae:	d034      	beq.n	801801a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8017fb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017fb2:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8017fb6:	f1bb 0f00 	cmp.w	fp, #0
 8017fba:	f000 80b7 	beq.w	801812c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 8017fbe:	f8bb 5000 	ldrh.w	r5, [fp]
 8017fc2:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8017fc6:	3301      	adds	r3, #1
 8017fc8:	930d      	str	r3, [sp, #52]	@ 0x34
 8017fca:	e029      	b.n	8018020 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8017fcc:	b10d      	cbz	r5, 8017fd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8017fce:	782a      	ldrb	r2, [r5, #0]
 8017fd0:	e786      	b.n	8017ee0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8017fd2:	462a      	mov	r2, r5
 8017fd4:	e784      	b.n	8017ee0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8017fd6:	2a00      	cmp	r2, #0
 8017fd8:	d0ea      	beq.n	8017fb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8017fda:	7813      	ldrb	r3, [r2, #0]
 8017fdc:	e7e0      	b.n	8017fa0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8017fde:	3b63      	subs	r3, #99	@ 0x63
 8017fe0:	2b01      	cmp	r3, #1
 8017fe2:	d8e5      	bhi.n	8017fb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8017fe4:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8017fe8:	b329      	cbz	r1, 8018036 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8017fea:	880b      	ldrh	r3, [r1, #0]
 8017fec:	2b69      	cmp	r3, #105	@ 0x69
 8017fee:	d063      	beq.n	80180b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8017ff0:	d825      	bhi.n	801803e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8017ff2:	2b63      	cmp	r3, #99	@ 0x63
 8017ff4:	d038      	beq.n	8018068 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8017ff6:	2b64      	cmp	r3, #100	@ 0x64
 8017ff8:	d05e      	beq.n	80180b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8017ffa:	2b58      	cmp	r3, #88	@ 0x58
 8017ffc:	d07a      	beq.n	80180f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8017ffe:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 8018002:	4625      	mov	r5, r4
 8018004:	e036      	b.n	8018074 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8018006:	2b73      	cmp	r3, #115	@ 0x73
 8018008:	d0ec      	beq.n	8017fe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801800a:	d802      	bhi.n	8018012 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801800c:	2b6f      	cmp	r3, #111	@ 0x6f
 801800e:	d1cf      	bne.n	8017fb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8018010:	e7e8      	b.n	8017fe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8018012:	2b75      	cmp	r3, #117	@ 0x75
 8018014:	d0e6      	beq.n	8017fe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8018016:	2b78      	cmp	r3, #120	@ 0x78
 8018018:	e7f9      	b.n	801800e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801801a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801801c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8018020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018022:	b10b      	cbz	r3, 8018028 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8018024:	3302      	adds	r3, #2
 8018026:	9309      	str	r3, [sp, #36]	@ 0x24
 8018028:	9b08      	ldr	r3, [sp, #32]
 801802a:	2b00      	cmp	r3, #0
 801802c:	f43f af2f 	beq.w	8017e8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018030:	3301      	adds	r3, #1
 8018032:	9308      	str	r3, [sp, #32]
 8018034:	e72b      	b.n	8017e8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8018036:	2a00      	cmp	r2, #0
 8018038:	d0e1      	beq.n	8017ffe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801803a:	7813      	ldrb	r3, [r2, #0]
 801803c:	e7d6      	b.n	8017fec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801803e:	2b73      	cmp	r3, #115	@ 0x73
 8018040:	d036      	beq.n	80180b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 8018042:	d807      	bhi.n	8018054 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8018044:	2b6f      	cmp	r3, #111	@ 0x6f
 8018046:	d1da      	bne.n	8017ffe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8018048:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801804a:	1d25      	adds	r5, r4, #4
 801804c:	2308      	movs	r3, #8
 801804e:	eba8 0202 	sub.w	r2, r8, r2
 8018052:	e049      	b.n	80180e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8018054:	2b75      	cmp	r3, #117	@ 0x75
 8018056:	d042      	beq.n	80180de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8018058:	2b78      	cmp	r3, #120	@ 0x78
 801805a:	d1d0      	bne.n	8017ffe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801805c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801805e:	1d25      	adds	r5, r4, #4
 8018060:	2310      	movs	r3, #16
 8018062:	eba8 0202 	sub.w	r2, r8, r2
 8018066:	e03f      	b.n	80180e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8018068:	6823      	ldr	r3, [r4, #0]
 801806a:	1d25      	adds	r5, r4, #4
 801806c:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8018070:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8018074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018076:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801807a:	2b00      	cmp	r3, #0
 801807c:	d051      	beq.n	8018122 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801807e:	881a      	ldrh	r2, [r3, #0]
 8018080:	a80d      	add	r0, sp, #52	@ 0x34
 8018082:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8018086:	462c      	mov	r4, r5
 8018088:	9005      	str	r0, [sp, #20]
 801808a:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801808e:	9004      	str	r0, [sp, #16]
 8018090:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8018092:	9003      	str	r0, [sp, #12]
 8018094:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 8018098:	9002      	str	r0, [sp, #8]
 801809a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801809c:	9001      	str	r0, [sp, #4]
 801809e:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 80180a2:	e9cd 8706 	strd	r8, r7, [sp, #24]
 80180a6:	9000      	str	r0, [sp, #0]
 80180a8:	a810      	add	r0, sp, #64	@ 0x40
 80180aa:	f7ff fd49 	bl	8017b40 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80180ae:	e7b7      	b.n	8018020 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80180b0:	1d25      	adds	r5, r4, #4
 80180b2:	6823      	ldr	r3, [r4, #0]
 80180b4:	9310      	str	r3, [sp, #64]	@ 0x40
 80180b6:	e7dd      	b.n	8018074 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80180b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80180ba:	230a      	movs	r3, #10
 80180bc:	4649      	mov	r1, r9
 80180be:	6820      	ldr	r0, [r4, #0]
 80180c0:	eba8 0202 	sub.w	r2, r8, r2
 80180c4:	1d25      	adds	r5, r4, #4
 80180c6:	b292      	uxth	r2, r2
 80180c8:	f7ff fcf0 	bl	8017aac <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 80180cc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80180d0:	2b2d      	cmp	r3, #45	@ 0x2d
 80180d2:	d1cf      	bne.n	8018074 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80180d4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80180d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80180da:	3302      	adds	r3, #2
 80180dc:	e7ea      	b.n	80180b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 80180de:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80180e0:	1d25      	adds	r5, r4, #4
 80180e2:	230a      	movs	r3, #10
 80180e4:	eba8 0202 	sub.w	r2, r8, r2
 80180e8:	b292      	uxth	r2, r2
 80180ea:	4649      	mov	r1, r9
 80180ec:	6820      	ldr	r0, [r4, #0]
 80180ee:	f7ff fd09 	bl	8017b04 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 80180f2:	e7bf      	b.n	8018074 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80180f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80180f6:	2310      	movs	r3, #16
 80180f8:	4649      	mov	r1, r9
 80180fa:	6820      	ldr	r0, [r4, #0]
 80180fc:	eba8 0202 	sub.w	r2, r8, r2
 8018100:	1d25      	adds	r5, r4, #4
 8018102:	b292      	uxth	r2, r2
 8018104:	f7ff fcfe 	bl	8017b04 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8018108:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801810c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8018110:	2b00      	cmp	r3, #0
 8018112:	d0af      	beq.n	8018074 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8018114:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8018118:	2919      	cmp	r1, #25
 801811a:	d8f7      	bhi.n	801810c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801811c:	3b20      	subs	r3, #32
 801811e:	8013      	strh	r3, [r2, #0]
 8018120:	e7f4      	b.n	801810c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8018122:	9a08      	ldr	r2, [sp, #32]
 8018124:	2a00      	cmp	r2, #0
 8018126:	d0ab      	beq.n	8018080 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8018128:	7812      	ldrb	r2, [r2, #0]
 801812a:	e7a9      	b.n	8018080 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801812c:	2d00      	cmp	r5, #0
 801812e:	f43f af48 	beq.w	8017fc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 8018132:	782d      	ldrb	r5, [r5, #0]
 8018134:	e745      	b.n	8017fc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08018136 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8018136:	b507      	push	{r0, r1, r2, lr}
 8018138:	9300      	str	r3, [sp, #0]
 801813a:	4613      	mov	r3, r2
 801813c:	2200      	movs	r2, #0
 801813e:	f7ff fe92 	bl	8017e66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8018142:	b003      	add	sp, #12
 8018144:	f85d fb04 	ldr.w	pc, [sp], #4

08018148 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8018148:	b40c      	push	{r2, r3}
 801814a:	b507      	push	{r0, r1, r2, lr}
 801814c:	ab04      	add	r3, sp, #16
 801814e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018152:	9301      	str	r3, [sp, #4]
 8018154:	f7ff ffef 	bl	8018136 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8018158:	b003      	add	sp, #12
 801815a:	f85d eb04 	ldr.w	lr, [sp], #4
 801815e:	b002      	add	sp, #8
 8018160:	4770      	bx	lr
	...

08018164 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8018164:	4b01      	ldr	r3, [pc, #4]	@ (801816c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8018166:	6018      	str	r0, [r3, #0]
 8018168:	4770      	bx	lr
 801816a:	bf00      	nop
 801816c:	24025634 	.word	0x24025634

08018170 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8018170:	4b06      	ldr	r3, [pc, #24]	@ (801818c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8018172:	881a      	ldrh	r2, [r3, #0]
 8018174:	4282      	cmp	r2, r0
 8018176:	d807      	bhi.n	8018188 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8018178:	4b05      	ldr	r3, [pc, #20]	@ (8018190 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801817a:	881b      	ldrh	r3, [r3, #0]
 801817c:	4413      	add	r3, r2
 801817e:	4298      	cmp	r0, r3
 8018180:	bfac      	ite	ge
 8018182:	2000      	movge	r0, #0
 8018184:	2001      	movlt	r0, #1
 8018186:	4770      	bx	lr
 8018188:	2000      	movs	r0, #0
 801818a:	4770      	bx	lr
 801818c:	24025654 	.word	0x24025654
 8018190:	24025658 	.word	0x24025658

08018194 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8018194:	b508      	push	{r3, lr}
 8018196:	4601      	mov	r1, r0
 8018198:	f7ff ffea 	bl	8018170 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801819c:	b118      	cbz	r0, 80181a6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801819e:	4b02      	ldr	r3, [pc, #8]	@ (80181a8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80181a6:	bd08      	pop	{r3, pc}
 80181a8:	24025638 	.word	0x24025638

080181ac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 80181ac:	b538      	push	{r3, r4, r5, lr}
 80181ae:	4604      	mov	r4, r0
 80181b0:	f7ff ffde 	bl	8018170 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80181b4:	b1d8      	cbz	r0, 80181ee <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 80181b6:	4b0f      	ldr	r3, [pc, #60]	@ (80181f4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 80181b8:	881b      	ldrh	r3, [r3, #0]
 80181ba:	1ae4      	subs	r4, r4, r3
 80181bc:	230e      	movs	r3, #14
 80181be:	4363      	muls	r3, r4
 80181c0:	4c0d      	ldr	r4, [pc, #52]	@ (80181f8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 80181c2:	6825      	ldr	r5, [r4, #0]
 80181c4:	18ea      	adds	r2, r5, r3
 80181c6:	7b12      	ldrb	r2, [r2, #12]
 80181c8:	f012 0220 	ands.w	r2, r2, #32
 80181cc:	d010      	beq.n	80181f0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 80181ce:	f9b1 2000 	ldrsh.w	r2, [r1]
 80181d2:	52ea      	strh	r2, [r5, r3]
 80181d4:	6822      	ldr	r2, [r4, #0]
 80181d6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80181da:	441a      	add	r2, r3
 80181dc:	8055      	strh	r5, [r2, #2]
 80181de:	6822      	ldr	r2, [r4, #0]
 80181e0:	4413      	add	r3, r2
 80181e2:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 80181e6:	809a      	strh	r2, [r3, #4]
 80181e8:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80181ec:	80da      	strh	r2, [r3, #6]
 80181ee:	bd38      	pop	{r3, r4, r5, pc}
 80181f0:	4610      	mov	r0, r2
 80181f2:	e7fc      	b.n	80181ee <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 80181f4:	24025654 	.word	0x24025654
 80181f8:	2402563c 	.word	0x2402563c

080181fc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 80181fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8018200:	4606      	mov	r6, r0
 8018202:	460c      	mov	r4, r1
 8018204:	f7ff ffb4 	bl	8018170 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8018208:	b918      	cbnz	r0, 8018212 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801820a:	2000      	movs	r0, #0
 801820c:	b002      	add	sp, #8
 801820e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018212:	4608      	mov	r0, r1
 8018214:	f7f7 f8e1 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 8018218:	2800      	cmp	r0, #0
 801821a:	d1f6      	bne.n	801820a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801821c:	4b3f      	ldr	r3, [pc, #252]	@ (801831c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801821e:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8018320 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8018222:	881d      	ldrh	r5, [r3, #0]
 8018224:	f8d9 a000 	ldr.w	sl, [r9]
 8018228:	46c8      	mov	r8, r9
 801822a:	1b73      	subs	r3, r6, r5
 801822c:	250e      	movs	r5, #14
 801822e:	435d      	muls	r5, r3
 8018230:	eb0a 0705 	add.w	r7, sl, r5
 8018234:	7b3b      	ldrb	r3, [r7, #12]
 8018236:	f013 0f20 	tst.w	r3, #32
 801823a:	d0e6      	beq.n	801820a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801823c:	4621      	mov	r1, r4
 801823e:	4638      	mov	r0, r7
 8018240:	f7fc fa72 	bl	8014728 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018244:	2800      	cmp	r0, #0
 8018246:	d1e1      	bne.n	801820c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8018248:	4639      	mov	r1, r7
 801824a:	4620      	mov	r0, r4
 801824c:	f7fc fa6c 	bl	8014728 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018250:	b108      	cbz	r0, 8018256 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8018252:	4621      	mov	r1, r4
 8018254:	e020      	b.n	8018298 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8018256:	f9b4 2000 	ldrsh.w	r2, [r4]
 801825a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801825e:	429a      	cmp	r2, r3
 8018260:	d11e      	bne.n	80182a0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8018262:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018266:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801826a:	429a      	cmp	r2, r3
 801826c:	d118      	bne.n	80182a0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801826e:	6820      	ldr	r0, [r4, #0]
 8018270:	466b      	mov	r3, sp
 8018272:	6861      	ldr	r1, [r4, #4]
 8018274:	c303      	stmia	r3!, {r0, r1}
 8018276:	4639      	mov	r1, r7
 8018278:	4668      	mov	r0, sp
 801827a:	f7fc fa7b 	bl	8014774 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801827e:	f8d9 3000 	ldr.w	r3, [r9]
 8018282:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018286:	442b      	add	r3, r5
 8018288:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801828c:	4413      	add	r3, r2
 801828e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8018292:	4293      	cmp	r3, r2
 8018294:	dc04      	bgt.n	80182a0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8018296:	4669      	mov	r1, sp
 8018298:	4630      	mov	r0, r6
 801829a:	f7ff ff87 	bl	80181ac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801829e:	e7b5      	b.n	801820c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80182a0:	f8d8 3000 	ldr.w	r3, [r8]
 80182a4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80182a8:	442b      	add	r3, r5
 80182aa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80182ae:	4291      	cmp	r1, r2
 80182b0:	d119      	bne.n	80182e6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80182b2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80182b6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80182ba:	4291      	cmp	r1, r2
 80182bc:	d113      	bne.n	80182e6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80182be:	6820      	ldr	r0, [r4, #0]
 80182c0:	466a      	mov	r2, sp
 80182c2:	6861      	ldr	r1, [r4, #4]
 80182c4:	c203      	stmia	r2!, {r0, r1}
 80182c6:	4619      	mov	r1, r3
 80182c8:	4668      	mov	r0, sp
 80182ca:	f7fc fa53 	bl	8014774 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80182ce:	f8d8 3000 	ldr.w	r3, [r8]
 80182d2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80182d6:	442b      	add	r3, r5
 80182d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80182dc:	4413      	add	r3, r2
 80182de:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80182e2:	4293      	cmp	r3, r2
 80182e4:	ddd7      	ble.n	8018296 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 80182e6:	4620      	mov	r0, r4
 80182e8:	f7f7 f877 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 80182ec:	b990      	cbnz	r0, 8018314 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 80182ee:	88a7      	ldrh	r7, [r4, #4]
 80182f0:	88e3      	ldrh	r3, [r4, #6]
 80182f2:	fb17 f703 	smulbb	r7, r7, r3
 80182f6:	f8d8 3000 	ldr.w	r3, [r8]
 80182fa:	441d      	add	r5, r3
 80182fc:	4628      	mov	r0, r5
 80182fe:	f7f7 f86c 	bl	800f3da <_ZNK8touchgfx4Rect7isEmptyEv>
 8018302:	b948      	cbnz	r0, 8018318 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8018304:	88ab      	ldrh	r3, [r5, #4]
 8018306:	88ea      	ldrh	r2, [r5, #6]
 8018308:	fb13 f302 	smulbb	r3, r3, r2
 801830c:	42bb      	cmp	r3, r7
 801830e:	f6bf af7c 	bge.w	801820a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8018312:	e79e      	b.n	8018252 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8018314:	2700      	movs	r7, #0
 8018316:	e7ee      	b.n	80182f6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8018318:	2300      	movs	r3, #0
 801831a:	e7f7      	b.n	801830c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801831c:	24025654 	.word	0x24025654
 8018320:	2402563c 	.word	0x2402563c

08018324 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8018324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018326:	4c24      	ldr	r4, [pc, #144]	@ (80183b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8018328:	6823      	ldr	r3, [r4, #0]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d042      	beq.n	80183b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801832e:	4a23      	ldr	r2, [pc, #140]	@ (80183bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8018330:	4d23      	ldr	r5, [pc, #140]	@ (80183c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8018332:	8811      	ldrh	r1, [r2, #0]
 8018334:	f8b5 c000 	ldrh.w	ip, [r5]
 8018338:	4822      	ldr	r0, [pc, #136]	@ (80183c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801833a:	4461      	add	r1, ip
 801833c:	1c4a      	adds	r2, r1, #1
 801833e:	008f      	lsls	r7, r1, #2
 8018340:	f022 0201 	bic.w	r2, r2, #1
 8018344:	19de      	adds	r6, r3, r7
 8018346:	0412      	lsls	r2, r2, #16
 8018348:	6006      	str	r6, [r0, #0]
 801834a:	4e1f      	ldr	r6, [pc, #124]	@ (80183c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801834c:	0c12      	lsrs	r2, r2, #16
 801834e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8018352:	19da      	adds	r2, r3, r7
 8018354:	6032      	str	r2, [r6, #0]
 8018356:	220e      	movs	r2, #14
 8018358:	fb02 f20c 	mul.w	r2, r2, ip
 801835c:	3203      	adds	r2, #3
 801835e:	f022 0203 	bic.w	r2, r2, #3
 8018362:	443a      	add	r2, r7
 8018364:	4f19      	ldr	r7, [pc, #100]	@ (80183cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8018366:	4413      	add	r3, r2
 8018368:	603b      	str	r3, [r7, #0]
 801836a:	2300      	movs	r3, #0
 801836c:	4f18      	ldr	r7, [pc, #96]	@ (80183d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801836e:	469c      	mov	ip, r3
 8018370:	803b      	strh	r3, [r7, #0]
 8018372:	4f18      	ldr	r7, [pc, #96]	@ (80183d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8018374:	683f      	ldr	r7, [r7, #0]
 8018376:	1aba      	subs	r2, r7, r2
 8018378:	4f17      	ldr	r7, [pc, #92]	@ (80183d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801837a:	603a      	str	r2, [r7, #0]
 801837c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8018380:	4a16      	ldr	r2, [pc, #88]	@ (80183dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8018382:	8013      	strh	r3, [r2, #0]
 8018384:	428b      	cmp	r3, r1
 8018386:	d10d      	bne.n	80183a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8018388:	882d      	ldrh	r5, [r5, #0]
 801838a:	2300      	movs	r3, #0
 801838c:	6830      	ldr	r0, [r6, #0]
 801838e:	240e      	movs	r4, #14
 8018390:	429d      	cmp	r5, r3
 8018392:	d90f      	bls.n	80183b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8018394:	fb04 0203 	mla	r2, r4, r3, r0
 8018398:	3301      	adds	r3, #1
 801839a:	7b11      	ldrb	r1, [r2, #12]
 801839c:	f36f 1145 	bfc	r1, #5, #1
 80183a0:	7311      	strb	r1, [r2, #12]
 80183a2:	e7f5      	b.n	8018390 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80183a4:	6822      	ldr	r2, [r4, #0]
 80183a6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80183aa:	6802      	ldr	r2, [r0, #0]
 80183ac:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80183b0:	3301      	adds	r3, #1
 80183b2:	e7e7      	b.n	8018384 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80183b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183b6:	bf00      	nop
 80183b8:	24025638 	.word	0x24025638
 80183bc:	24025654 	.word	0x24025654
 80183c0:	24025658 	.word	0x24025658
 80183c4:	2402564c 	.word	0x2402564c
 80183c8:	2402563c 	.word	0x2402563c
 80183cc:	24025644 	.word	0x24025644
 80183d0:	24025656 	.word	0x24025656
 80183d4:	24025640 	.word	0x24025640
 80183d8:	24025650 	.word	0x24025650
 80183dc:	24025648 	.word	0x24025648

080183e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80183e0:	4b06      	ldr	r3, [pc, #24]	@ (80183fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	b943      	cbnz	r3, 80183f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80183e6:	b139      	cbz	r1, 80183f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80183e8:	4b05      	ldr	r3, [pc, #20]	@ (8018400 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80183ea:	801a      	strh	r2, [r3, #0]
 80183ec:	4b05      	ldr	r3, [pc, #20]	@ (8018404 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80183ee:	6019      	str	r1, [r3, #0]
 80183f0:	4b05      	ldr	r3, [pc, #20]	@ (8018408 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80183f2:	6018      	str	r0, [r3, #0]
 80183f4:	f7ff bf96 	b.w	8018324 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80183f8:	4770      	bx	lr
 80183fa:	bf00      	nop
 80183fc:	24025644 	.word	0x24025644
 8018400:	24025658 	.word	0x24025658
 8018404:	24025640 	.word	0x24025640
 8018408:	24025638 	.word	0x24025638

0801840c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801840c:	b470      	push	{r4, r5, r6}
 801840e:	4c07      	ldr	r4, [pc, #28]	@ (801842c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8018410:	4605      	mov	r5, r0
 8018412:	4610      	mov	r0, r2
 8018414:	9a03      	ldr	r2, [sp, #12]
 8018416:	6826      	ldr	r6, [r4, #0]
 8018418:	b936      	cbnz	r6, 8018428 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801841a:	6025      	str	r5, [r4, #0]
 801841c:	4c04      	ldr	r4, [pc, #16]	@ (8018430 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801841e:	8021      	strh	r1, [r4, #0]
 8018420:	4619      	mov	r1, r3
 8018422:	bc70      	pop	{r4, r5, r6}
 8018424:	f7ff bfdc 	b.w	80183e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8018428:	bc70      	pop	{r4, r5, r6}
 801842a:	4770      	bx	lr
 801842c:	2402565c 	.word	0x2402565c
 8018430:	24025654 	.word	0x24025654

08018434 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8018434:	4a12      	ldr	r2, [pc, #72]	@ (8018480 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8018436:	8803      	ldrh	r3, [r0, #0]
 8018438:	8812      	ldrh	r2, [r2, #0]
 801843a:	4293      	cmp	r3, r2
 801843c:	d207      	bcs.n	801844e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801843e:	4a11      	ldr	r2, [pc, #68]	@ (8018484 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8018440:	2114      	movs	r1, #20
 8018442:	6812      	ldr	r2, [r2, #0]
 8018444:	fb01 2303 	mla	r3, r1, r3, r2
 8018448:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801844c:	4770      	bx	lr
 801844e:	490e      	ldr	r1, [pc, #56]	@ (8018488 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8018450:	8809      	ldrh	r1, [r1, #0]
 8018452:	4411      	add	r1, r2
 8018454:	428b      	cmp	r3, r1
 8018456:	da04      	bge.n	8018462 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8018458:	1a9b      	subs	r3, r3, r2
 801845a:	4a0c      	ldr	r2, [pc, #48]	@ (801848c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801845c:	210e      	movs	r1, #14
 801845e:	6812      	ldr	r2, [r2, #0]
 8018460:	e7f0      	b.n	8018444 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8018462:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8018466:	4293      	cmp	r3, r2
 8018468:	d108      	bne.n	801847c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801846a:	4b09      	ldr	r3, [pc, #36]	@ (8018490 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801846c:	781b      	ldrb	r3, [r3, #0]
 801846e:	b91b      	cbnz	r3, 8018478 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8018470:	4b08      	ldr	r3, [pc, #32]	@ (8018494 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8018472:	f9b3 0000 	ldrsh.w	r0, [r3]
 8018476:	4770      	bx	lr
 8018478:	4b07      	ldr	r3, [pc, #28]	@ (8018498 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801847a:	e7fa      	b.n	8018472 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801847c:	2000      	movs	r0, #0
 801847e:	4770      	bx	lr
 8018480:	24025654 	.word	0x24025654
 8018484:	2402565c 	.word	0x2402565c
 8018488:	24025658 	.word	0x24025658
 801848c:	2402563c 	.word	0x2402563c
 8018490:	240255c4 	.word	0x240255c4
 8018494:	240255c6 	.word	0x240255c6
 8018498:	240255c8 	.word	0x240255c8

0801849c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801849c:	4a12      	ldr	r2, [pc, #72]	@ (80184e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801849e:	8803      	ldrh	r3, [r0, #0]
 80184a0:	8812      	ldrh	r2, [r2, #0]
 80184a2:	4293      	cmp	r3, r2
 80184a4:	d207      	bcs.n	80184b6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80184a6:	4a11      	ldr	r2, [pc, #68]	@ (80184ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80184a8:	2114      	movs	r1, #20
 80184aa:	6812      	ldr	r2, [r2, #0]
 80184ac:	fb01 2303 	mla	r3, r1, r3, r2
 80184b0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80184b4:	4770      	bx	lr
 80184b6:	490e      	ldr	r1, [pc, #56]	@ (80184f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80184b8:	8809      	ldrh	r1, [r1, #0]
 80184ba:	4411      	add	r1, r2
 80184bc:	428b      	cmp	r3, r1
 80184be:	da04      	bge.n	80184ca <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80184c0:	1a9b      	subs	r3, r3, r2
 80184c2:	4a0c      	ldr	r2, [pc, #48]	@ (80184f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80184c4:	210e      	movs	r1, #14
 80184c6:	6812      	ldr	r2, [r2, #0]
 80184c8:	e7f0      	b.n	80184ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80184ca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80184ce:	4293      	cmp	r3, r2
 80184d0:	d108      	bne.n	80184e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80184d2:	4b09      	ldr	r3, [pc, #36]	@ (80184f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80184d4:	781b      	ldrb	r3, [r3, #0]
 80184d6:	b91b      	cbnz	r3, 80184e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80184d8:	4b08      	ldr	r3, [pc, #32]	@ (80184fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80184da:	f9b3 0000 	ldrsh.w	r0, [r3]
 80184de:	4770      	bx	lr
 80184e0:	4b07      	ldr	r3, [pc, #28]	@ (8018500 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80184e2:	e7fa      	b.n	80184da <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80184e4:	2000      	movs	r0, #0
 80184e6:	4770      	bx	lr
 80184e8:	24025654 	.word	0x24025654
 80184ec:	2402565c 	.word	0x2402565c
 80184f0:	24025658 	.word	0x24025658
 80184f4:	2402563c 	.word	0x2402563c
 80184f8:	240255c4 	.word	0x240255c4
 80184fc:	240255c8 	.word	0x240255c8
 8018500:	240255c6 	.word	0x240255c6

08018504 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8018504:	4a22      	ldr	r2, [pc, #136]	@ (8018590 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8018506:	b530      	push	{r4, r5, lr}
 8018508:	880b      	ldrh	r3, [r1, #0]
 801850a:	8812      	ldrh	r2, [r2, #0]
 801850c:	4293      	cmp	r3, r2
 801850e:	d213      	bcs.n	8018538 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8018510:	4a20      	ldr	r2, [pc, #128]	@ (8018594 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8018512:	2114      	movs	r1, #20
 8018514:	6812      	ldr	r2, [r2, #0]
 8018516:	fb01 2303 	mla	r3, r1, r3, r2
 801851a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801851e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8018522:	8a1a      	ldrh	r2, [r3, #16]
 8018524:	8a5b      	ldrh	r3, [r3, #18]
 8018526:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801852a:	8004      	strh	r4, [r0, #0]
 801852c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018530:	8041      	strh	r1, [r0, #2]
 8018532:	8082      	strh	r2, [r0, #4]
 8018534:	80c3      	strh	r3, [r0, #6]
 8018536:	e024      	b.n	8018582 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8018538:	4917      	ldr	r1, [pc, #92]	@ (8018598 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801853a:	8809      	ldrh	r1, [r1, #0]
 801853c:	4411      	add	r1, r2
 801853e:	428b      	cmp	r3, r1
 8018540:	da10      	bge.n	8018564 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8018542:	1a9b      	subs	r3, r3, r2
 8018544:	220e      	movs	r2, #14
 8018546:	4353      	muls	r3, r2
 8018548:	4a14      	ldr	r2, [pc, #80]	@ (801859c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801854a:	6811      	ldr	r1, [r2, #0]
 801854c:	18ca      	adds	r2, r1, r3
 801854e:	5ecd      	ldrsh	r5, [r1, r3]
 8018550:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8018554:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8018558:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801855c:	8005      	strh	r5, [r0, #0]
 801855e:	8044      	strh	r4, [r0, #2]
 8018560:	8081      	strh	r1, [r0, #4]
 8018562:	e7e7      	b.n	8018534 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8018564:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8018568:	4293      	cmp	r3, r2
 801856a:	d10b      	bne.n	8018584 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801856c:	4b0c      	ldr	r3, [pc, #48]	@ (80185a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801856e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018572:	4b0c      	ldr	r3, [pc, #48]	@ (80185a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8018574:	8081      	strh	r1, [r0, #4]
 8018576:	f9b3 2000 	ldrsh.w	r2, [r3]
 801857a:	2300      	movs	r3, #0
 801857c:	80c2      	strh	r2, [r0, #6]
 801857e:	8003      	strh	r3, [r0, #0]
 8018580:	8043      	strh	r3, [r0, #2]
 8018582:	bd30      	pop	{r4, r5, pc}
 8018584:	2300      	movs	r3, #0
 8018586:	8003      	strh	r3, [r0, #0]
 8018588:	8043      	strh	r3, [r0, #2]
 801858a:	8083      	strh	r3, [r0, #4]
 801858c:	e7d2      	b.n	8018534 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801858e:	bf00      	nop
 8018590:	24025654 	.word	0x24025654
 8018594:	2402565c 	.word	0x2402565c
 8018598:	24025658 	.word	0x24025658
 801859c:	2402563c 	.word	0x2402563c
 80185a0:	240255c0 	.word	0x240255c0
 80185a4:	240255c2 	.word	0x240255c2

080185a8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80185a8:	4a12      	ldr	r2, [pc, #72]	@ (80185f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80185aa:	8803      	ldrh	r3, [r0, #0]
 80185ac:	8811      	ldrh	r1, [r2, #0]
 80185ae:	428b      	cmp	r3, r1
 80185b0:	d20b      	bcs.n	80185ca <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80185b2:	4a11      	ldr	r2, [pc, #68]	@ (80185f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80185b4:	6812      	ldr	r2, [r2, #0]
 80185b6:	b112      	cbz	r2, 80185be <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80185b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80185bc:	b9c0      	cbnz	r0, 80185f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80185be:	4a0f      	ldr	r2, [pc, #60]	@ (80185fc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80185c0:	6811      	ldr	r1, [r2, #0]
 80185c2:	2214      	movs	r2, #20
 80185c4:	4353      	muls	r3, r2
 80185c6:	58c8      	ldr	r0, [r1, r3]
 80185c8:	4770      	bx	lr
 80185ca:	4a0d      	ldr	r2, [pc, #52]	@ (8018600 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80185cc:	8812      	ldrh	r2, [r2, #0]
 80185ce:	440a      	add	r2, r1
 80185d0:	4293      	cmp	r3, r2
 80185d2:	da04      	bge.n	80185de <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80185d4:	4a08      	ldr	r2, [pc, #32]	@ (80185f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80185d6:	6812      	ldr	r2, [r2, #0]
 80185d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80185dc:	4770      	bx	lr
 80185de:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80185e2:	4293      	cmp	r3, r2
 80185e4:	d103      	bne.n	80185ee <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80185e6:	4b07      	ldr	r3, [pc, #28]	@ (8018604 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80185ec:	4770      	bx	lr
 80185ee:	2000      	movs	r0, #0
 80185f0:	4770      	bx	lr
 80185f2:	bf00      	nop
 80185f4:	24025654 	.word	0x24025654
 80185f8:	24025638 	.word	0x24025638
 80185fc:	2402565c 	.word	0x2402565c
 8018600:	24025658 	.word	0x24025658
 8018604:	240255cc 	.word	0x240255cc

08018608 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8018608:	4b24      	ldr	r3, [pc, #144]	@ (801869c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801860a:	8802      	ldrh	r2, [r0, #0]
 801860c:	8818      	ldrh	r0, [r3, #0]
 801860e:	4282      	cmp	r2, r0
 8018610:	d221      	bcs.n	8018656 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8018612:	4b23      	ldr	r3, [pc, #140]	@ (80186a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8018614:	6819      	ldr	r1, [r3, #0]
 8018616:	2314      	movs	r3, #20
 8018618:	fb03 1302 	mla	r3, r3, r2, r1
 801861c:	6858      	ldr	r0, [r3, #4]
 801861e:	2800      	cmp	r0, #0
 8018620:	d03a      	beq.n	8018698 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018622:	4920      	ldr	r1, [pc, #128]	@ (80186a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8018624:	6809      	ldr	r1, [r1, #0]
 8018626:	2900      	cmp	r1, #0
 8018628:	d036      	beq.n	8018698 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801862a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801862e:	2900      	cmp	r1, #0
 8018630:	d032      	beq.n	8018698 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018632:	891a      	ldrh	r2, [r3, #8]
 8018634:	8958      	ldrh	r0, [r3, #10]
 8018636:	4350      	muls	r0, r2
 8018638:	7c5a      	ldrb	r2, [r3, #17]
 801863a:	7cdb      	ldrb	r3, [r3, #19]
 801863c:	0952      	lsrs	r2, r2, #5
 801863e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8018642:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8018646:	2b0b      	cmp	r3, #11
 8018648:	bf18      	it	ne
 801864a:	0040      	lslne	r0, r0, #1
 801864c:	3003      	adds	r0, #3
 801864e:	f020 0003 	bic.w	r0, r0, #3
 8018652:	4408      	add	r0, r1
 8018654:	4770      	bx	lr
 8018656:	4b14      	ldr	r3, [pc, #80]	@ (80186a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8018658:	881b      	ldrh	r3, [r3, #0]
 801865a:	4403      	add	r3, r0
 801865c:	429a      	cmp	r2, r3
 801865e:	da1a      	bge.n	8018696 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018660:	4b12      	ldr	r3, [pc, #72]	@ (80186ac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8018662:	1a10      	subs	r0, r2, r0
 8018664:	210e      	movs	r1, #14
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	fb01 3000 	mla	r0, r1, r0, r3
 801866c:	7b03      	ldrb	r3, [r0, #12]
 801866e:	f003 031f 	and.w	r3, r3, #31
 8018672:	2b0b      	cmp	r3, #11
 8018674:	d10b      	bne.n	801868e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8018676:	8903      	ldrh	r3, [r0, #8]
 8018678:	8940      	ldrh	r0, [r0, #10]
 801867a:	4358      	muls	r0, r3
 801867c:	4b09      	ldr	r3, [pc, #36]	@ (80186a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801867e:	3003      	adds	r0, #3
 8018680:	6819      	ldr	r1, [r3, #0]
 8018682:	f020 0303 	bic.w	r3, r0, #3
 8018686:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801868a:	4418      	add	r0, r3
 801868c:	4770      	bx	lr
 801868e:	2b0d      	cmp	r3, #13
 8018690:	d101      	bne.n	8018696 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018692:	300d      	adds	r0, #13
 8018694:	4770      	bx	lr
 8018696:	2000      	movs	r0, #0
 8018698:	4770      	bx	lr
 801869a:	bf00      	nop
 801869c:	24025654 	.word	0x24025654
 80186a0:	2402565c 	.word	0x2402565c
 80186a4:	24025638 	.word	0x24025638
 80186a8:	24025658 	.word	0x24025658
 80186ac:	2402563c 	.word	0x2402563c

080186b0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80186b0:	4b1f      	ldr	r3, [pc, #124]	@ (8018730 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 80186b2:	b510      	push	{r4, lr}
 80186b4:	8802      	ldrh	r2, [r0, #0]
 80186b6:	881b      	ldrh	r3, [r3, #0]
 80186b8:	429a      	cmp	r2, r3
 80186ba:	d21a      	bcs.n	80186f2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 80186bc:	4b1d      	ldr	r3, [pc, #116]	@ (8018734 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 80186be:	2114      	movs	r1, #20
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	fb01 3102 	mla	r1, r1, r2, r3
 80186c6:	7c4b      	ldrb	r3, [r1, #17]
 80186c8:	0958      	lsrs	r0, r3, #5
 80186ca:	7ccb      	ldrb	r3, [r1, #19]
 80186cc:	491a      	ldr	r1, [pc, #104]	@ (8018738 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 80186ce:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80186d2:	6809      	ldr	r1, [r1, #0]
 80186d4:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 80186d8:	b2d8      	uxtb	r0, r3
 80186da:	b149      	cbz	r1, 80186f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80186dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80186e0:	b132      	cbz	r2, 80186f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80186e2:	2b0e      	cmp	r3, #14
 80186e4:	d021      	beq.n	801872a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 80186e6:	280f      	cmp	r0, #15
 80186e8:	d01d      	beq.n	8018726 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 80186ea:	2810      	cmp	r0, #16
 80186ec:	bf08      	it	eq
 80186ee:	2002      	moveq	r0, #2
 80186f0:	bd10      	pop	{r4, pc}
 80186f2:	4912      	ldr	r1, [pc, #72]	@ (801873c <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 80186f4:	8809      	ldrh	r1, [r1, #0]
 80186f6:	4419      	add	r1, r3
 80186f8:	428a      	cmp	r2, r1
 80186fa:	da09      	bge.n	8018710 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 80186fc:	1ad3      	subs	r3, r2, r3
 80186fe:	4a10      	ldr	r2, [pc, #64]	@ (8018740 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8018700:	210e      	movs	r1, #14
 8018702:	6812      	ldr	r2, [r2, #0]
 8018704:	fb01 2303 	mla	r3, r1, r3, r2
 8018708:	7b18      	ldrb	r0, [r3, #12]
 801870a:	f000 001f 	and.w	r0, r0, #31
 801870e:	e7ef      	b.n	80186f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8018710:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8018714:	429a      	cmp	r2, r3
 8018716:	d108      	bne.n	801872a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8018718:	f7eb fcd6 	bl	80040c8 <_ZN8touchgfx3HAL3lcdEv>
 801871c:	6803      	ldr	r3, [r0, #0]
 801871e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018724:	4718      	bx	r3
 8018726:	2001      	movs	r0, #1
 8018728:	e7e2      	b.n	80186f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801872a:	2000      	movs	r0, #0
 801872c:	e7e0      	b.n	80186f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801872e:	bf00      	nop
 8018730:	24025654 	.word	0x24025654
 8018734:	2402565c 	.word	0x2402565c
 8018738:	24025638 	.word	0x24025638
 801873c:	24025658 	.word	0x24025658
 8018740:	2402563c 	.word	0x2402563c

08018744 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8018744:	2018      	movs	r0, #24
 8018746:	4770      	bx	lr

08018748 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8018748:	2001      	movs	r0, #1
 801874a:	4770      	bx	lr

0801874c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801874c:	4b02      	ldr	r3, [pc, #8]	@ (8018758 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801874e:	8818      	ldrh	r0, [r3, #0]
 8018750:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018754:	b280      	uxth	r0, r0
 8018756:	4770      	bx	lr
 8018758:	240255c6 	.word	0x240255c6

0801875c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801875c:	2bff      	cmp	r3, #255	@ 0xff
 801875e:	d04c      	beq.n	80187fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8018760:	2a2c      	cmp	r2, #44	@ 0x2c
 8018762:	d030      	beq.n	80187c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 8018764:	d80f      	bhi.n	8018786 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8018766:	2a08      	cmp	r2, #8
 8018768:	d043      	beq.n	80187f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801876a:	d805      	bhi.n	8018778 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801876c:	2a04      	cmp	r2, #4
 801876e:	d03e      	beq.n	80187ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8018770:	2a05      	cmp	r2, #5
 8018772:	d03a      	beq.n	80187ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8018774:	2300      	movs	r3, #0
 8018776:	e024      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018778:	2a0a      	cmp	r2, #10
 801877a:	d03a      	beq.n	80187f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801877c:	d301      	bcc.n	8018782 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801877e:	2a0b      	cmp	r2, #11
 8018780:	d1f8      	bne.n	8018774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018782:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8018784:	e01d      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018786:	2a30      	cmp	r2, #48	@ 0x30
 8018788:	d035      	beq.n	80187f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801878a:	d80a      	bhi.n	80187a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 801878c:	2a2e      	cmp	r2, #46	@ 0x2e
 801878e:	684b      	ldr	r3, [r1, #4]
 8018790:	d023      	beq.n	80187da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8018792:	d90d      	bls.n	80187b0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 8018794:	781a      	ldrb	r2, [r3, #0]
 8018796:	785b      	ldrb	r3, [r3, #1]
 8018798:	2b00      	cmp	r3, #0
 801879a:	d1eb      	bne.n	8018774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801879c:	b98a      	cbnz	r2, 80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801879e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80187a0:	e00f      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80187a2:	2a32      	cmp	r2, #50	@ 0x32
 80187a4:	d027      	beq.n	80187f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80187a6:	d301      	bcc.n	80187ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 80187a8:	2a33      	cmp	r2, #51	@ 0x33
 80187aa:	d1e3      	bne.n	8018774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80187ac:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80187ae:	e008      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80187b0:	781a      	ldrb	r2, [r3, #0]
 80187b2:	785b      	ldrb	r3, [r3, #1]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d1dd      	bne.n	8018774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80187b8:	2a00      	cmp	r2, #0
 80187ba:	d0f0      	beq.n	801879e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 80187bc:	2a01      	cmp	r2, #1
 80187be:	d1d9      	bne.n	8018774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80187c0:	6943      	ldr	r3, [r0, #20]
 80187c2:	4618      	mov	r0, r3
 80187c4:	4770      	bx	lr
 80187c6:	684b      	ldr	r3, [r1, #4]
 80187c8:	781a      	ldrb	r2, [r3, #0]
 80187ca:	785b      	ldrb	r3, [r3, #1]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d1d1      	bne.n	8018774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80187d0:	b14a      	cbz	r2, 80187e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 80187d2:	2a01      	cmp	r2, #1
 80187d4:	bf08      	it	eq
 80187d6:	68c3      	ldreq	r3, [r0, #12]
 80187d8:	e7f3      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80187da:	781a      	ldrb	r2, [r3, #0]
 80187dc:	785b      	ldrb	r3, [r3, #1]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d1c8      	bne.n	8018774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80187e2:	2a00      	cmp	r2, #0
 80187e4:	d1ed      	bne.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80187e6:	69c3      	ldr	r3, [r0, #28]
 80187e8:	e7eb      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80187ea:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80187ec:	e7e9      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80187ee:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80187f0:	e7e7      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80187f2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80187f4:	e7e5      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80187f6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80187f8:	e7e3      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80187fa:	2a2c      	cmp	r2, #44	@ 0x2c
 80187fc:	d030      	beq.n	8018860 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 80187fe:	d80f      	bhi.n	8018820 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8018800:	2a08      	cmp	r2, #8
 8018802:	d042      	beq.n	801888a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8018804:	d805      	bhi.n	8018812 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8018806:	2a04      	cmp	r2, #4
 8018808:	d03d      	beq.n	8018886 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801880a:	2a05      	cmp	r2, #5
 801880c:	d1b2      	bne.n	8018774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801880e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8018810:	e7d7      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018812:	2a0a      	cmp	r2, #10
 8018814:	d039      	beq.n	801888a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8018816:	d301      	bcc.n	801881c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8018818:	2a0b      	cmp	r2, #11
 801881a:	d1ab      	bne.n	8018774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801881c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801881e:	e7d0      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018820:	2a30      	cmp	r2, #48	@ 0x30
 8018822:	d034      	beq.n	801888e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8018824:	d80b      	bhi.n	801883e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8018826:	2a2e      	cmp	r2, #46	@ 0x2e
 8018828:	684b      	ldr	r3, [r1, #4]
 801882a:	d023      	beq.n	8018874 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801882c:	d90e      	bls.n	801884c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801882e:	781a      	ldrb	r2, [r3, #0]
 8018830:	785b      	ldrb	r3, [r3, #1]
 8018832:	2b00      	cmp	r3, #0
 8018834:	d19e      	bne.n	8018774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018836:	2a00      	cmp	r2, #0
 8018838:	d1c3      	bne.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801883a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801883c:	e7c1      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801883e:	2a32      	cmp	r2, #50	@ 0x32
 8018840:	d025      	beq.n	801888e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8018842:	d301      	bcc.n	8018848 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8018844:	2a33      	cmp	r2, #51	@ 0x33
 8018846:	d195      	bne.n	8018774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018848:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801884a:	e7ba      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801884c:	781a      	ldrb	r2, [r3, #0]
 801884e:	785b      	ldrb	r3, [r3, #1]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d18f      	bne.n	8018774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018854:	2a00      	cmp	r2, #0
 8018856:	d0f0      	beq.n	801883a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 8018858:	2a01      	cmp	r2, #1
 801885a:	d18b      	bne.n	8018774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801885c:	6983      	ldr	r3, [r0, #24]
 801885e:	e7b0      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018860:	684b      	ldr	r3, [r1, #4]
 8018862:	781a      	ldrb	r2, [r3, #0]
 8018864:	785b      	ldrb	r3, [r3, #1]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d184      	bne.n	8018774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801886a:	b152      	cbz	r2, 8018882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801886c:	2a01      	cmp	r2, #1
 801886e:	bf08      	it	eq
 8018870:	6903      	ldreq	r3, [r0, #16]
 8018872:	e7a6      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018874:	781a      	ldrb	r2, [r3, #0]
 8018876:	785b      	ldrb	r3, [r3, #1]
 8018878:	2b00      	cmp	r3, #0
 801887a:	f47f af7b 	bne.w	8018774 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801887e:	2a00      	cmp	r2, #0
 8018880:	d19f      	bne.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018882:	6a03      	ldr	r3, [r0, #32]
 8018884:	e79d      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018886:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018888:	e79b      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801888a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801888c:	e799      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801888e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8018890:	e797      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

08018892 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018892:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018896:	b085      	sub	sp, #20
 8018898:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801889a:	9203      	str	r2, [sp, #12]
 801889c:	6870      	ldr	r0, [r6, #4]
 801889e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80188a2:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80188a6:	9101      	str	r1, [sp, #4]
 80188a8:	fa1f f885 	uxth.w	r8, r5
 80188ac:	43ed      	mvns	r5, r5
 80188ae:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80188b2:	b2ed      	uxtb	r5, r5
 80188b4:	fb00 2404 	mla	r4, r0, r4, r2
 80188b8:	6832      	ldr	r2, [r6, #0]
 80188ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80188be:	4414      	add	r4, r2
 80188c0:	f8dc 2000 	ldr.w	r2, [ip]
 80188c4:	9202      	str	r2, [sp, #8]
 80188c6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80188ca:	f102 0e04 	add.w	lr, r2, #4
 80188ce:	9a01      	ldr	r2, [sp, #4]
 80188d0:	2a00      	cmp	r2, #0
 80188d2:	dc03      	bgt.n	80188dc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80188d4:	9a03      	ldr	r2, [sp, #12]
 80188d6:	2a00      	cmp	r2, #0
 80188d8:	f340 8116 	ble.w	8018b08 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80188dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80188de:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80188e2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80188e6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80188e8:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80188ec:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	dd0e      	ble.n	8018912 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80188f4:	1406      	asrs	r6, r0, #16
 80188f6:	d405      	bmi.n	8018904 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80188f8:	4556      	cmp	r6, sl
 80188fa:	da03      	bge.n	8018904 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80188fc:	1416      	asrs	r6, r2, #16
 80188fe:	d401      	bmi.n	8018904 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018900:	454e      	cmp	r6, r9
 8018902:	db07      	blt.n	8018914 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8018904:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018906:	3b01      	subs	r3, #1
 8018908:	3403      	adds	r4, #3
 801890a:	4430      	add	r0, r6
 801890c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801890e:	4432      	add	r2, r6
 8018910:	e7ee      	b.n	80188f0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8018912:	d063      	beq.n	80189dc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8018914:	1e5e      	subs	r6, r3, #1
 8018916:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8018918:	fb07 0706 	mla	r7, r7, r6, r0
 801891c:	143f      	asrs	r7, r7, #16
 801891e:	d454      	bmi.n	80189ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018920:	4557      	cmp	r7, sl
 8018922:	da52      	bge.n	80189ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018924:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8018926:	fb07 2606 	mla	r6, r7, r6, r2
 801892a:	1436      	asrs	r6, r6, #16
 801892c:	d44d      	bmi.n	80189ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801892e:	454e      	cmp	r6, r9
 8018930:	da4b      	bge.n	80189ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018932:	1ce6      	adds	r6, r4, #3
 8018934:	4699      	mov	r9, r3
 8018936:	f1b9 0f00 	cmp.w	r9, #0
 801893a:	f106 0603 	add.w	r6, r6, #3
 801893e:	dd48      	ble.n	80189d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8018940:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8018944:	1417      	asrs	r7, r2, #16
 8018946:	9902      	ldr	r1, [sp, #8]
 8018948:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801894c:	f109 39ff 	add.w	r9, r9, #4294967295
 8018950:	fb0b 1707 	mla	r7, fp, r7, r1
 8018954:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8018958:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801895a:	f817 700a 	ldrb.w	r7, [r7, sl]
 801895e:	fb1b fb05 	smulbb	fp, fp, r5
 8018962:	4408      	add	r0, r1
 8018964:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018966:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801896a:	440a      	add	r2, r1
 801896c:	eb0e 0a07 	add.w	sl, lr, r7
 8018970:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8018974:	fb07 b708 	mla	r7, r7, r8, fp
 8018978:	b2bf      	uxth	r7, r7
 801897a:	f107 0b01 	add.w	fp, r7, #1
 801897e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018982:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8018986:	fb1b fb05 	smulbb	fp, fp, r5
 801898a:	123f      	asrs	r7, r7, #8
 801898c:	f806 7c06 	strb.w	r7, [r6, #-6]
 8018990:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8018994:	fb07 b708 	mla	r7, r7, r8, fp
 8018998:	b2bf      	uxth	r7, r7
 801899a:	f107 0b01 	add.w	fp, r7, #1
 801899e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80189a2:	123f      	asrs	r7, r7, #8
 80189a4:	f806 7c05 	strb.w	r7, [r6, #-5]
 80189a8:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80189ac:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80189b0:	fb1a fa05 	smulbb	sl, sl, r5
 80189b4:	fb07 a708 	mla	r7, r7, r8, sl
 80189b8:	b2bf      	uxth	r7, r7
 80189ba:	f107 0a01 	add.w	sl, r7, #1
 80189be:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80189c2:	123f      	asrs	r7, r7, #8
 80189c4:	f806 7c04 	strb.w	r7, [r6, #-4]
 80189c8:	e7b5      	b.n	8018936 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80189ca:	2700      	movs	r7, #0
 80189cc:	1bde      	subs	r6, r3, r7
 80189ce:	2e00      	cmp	r6, #0
 80189d0:	dc42      	bgt.n	8018a58 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80189d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80189d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80189da:	441c      	add	r4, r3
 80189dc:	9b01      	ldr	r3, [sp, #4]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	f340 8092 	ble.w	8018b08 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80189e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80189e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80189ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80189ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80189f2:	eef0 6a62 	vmov.f32	s13, s5
 80189f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80189fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80189fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018a02:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 8018a06:	eef0 6a43 	vmov.f32	s13, s6
 8018a0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018a0e:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 8018a12:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018a16:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018a1a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018a1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018a22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018a26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018a2a:	ee12 2a90 	vmov	r2, s5
 8018a2e:	eef0 2a47 	vmov.f32	s5, s14
 8018a32:	fb92 f3f3 	sdiv	r3, r2, r3
 8018a36:	ee13 2a10 	vmov	r2, s6
 8018a3a:	9311      	str	r3, [sp, #68]	@ 0x44
 8018a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018a3e:	eeb0 3a67 	vmov.f32	s6, s15
 8018a42:	fb92 f3f3 	sdiv	r3, r2, r3
 8018a46:	9312      	str	r3, [sp, #72]	@ 0x48
 8018a48:	9b01      	ldr	r3, [sp, #4]
 8018a4a:	9a03      	ldr	r2, [sp, #12]
 8018a4c:	3b01      	subs	r3, #1
 8018a4e:	9301      	str	r3, [sp, #4]
 8018a50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018a52:	bf08      	it	eq
 8018a54:	4613      	moveq	r3, r2
 8018a56:	e73a      	b.n	80188ce <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018a58:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8018a5c:	d44e      	bmi.n	8018afc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8018a5e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018a62:	4556      	cmp	r6, sl
 8018a64:	dd4a      	ble.n	8018afc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8018a66:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8018a6a:	d447      	bmi.n	8018afc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8018a6c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8018a70:	4559      	cmp	r1, fp
 8018a72:	dd43      	ble.n	8018afc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8018a74:	fa0f f986 	sxth.w	r9, r6
 8018a78:	9902      	ldr	r1, [sp, #8]
 8018a7a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8018a7e:	fb0b 1909 	mla	r9, fp, r9, r1
 8018a82:	f814 b006 	ldrb.w	fp, [r4, r6]
 8018a86:	f819 900a 	ldrb.w	r9, [r9, sl]
 8018a8a:	fb1b fb05 	smulbb	fp, fp, r5
 8018a8e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018a92:	eb0e 0a09 	add.w	sl, lr, r9
 8018a96:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8018a9a:	fb09 b908 	mla	r9, r9, r8, fp
 8018a9e:	fa1f f989 	uxth.w	r9, r9
 8018aa2:	f109 0b01 	add.w	fp, r9, #1
 8018aa6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018aaa:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018aae:	f804 9006 	strb.w	r9, [r4, r6]
 8018ab2:	4426      	add	r6, r4
 8018ab4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018ab8:	f896 b001 	ldrb.w	fp, [r6, #1]
 8018abc:	fb1b fb05 	smulbb	fp, fp, r5
 8018ac0:	fb09 b908 	mla	r9, r9, r8, fp
 8018ac4:	fa1f f989 	uxth.w	r9, r9
 8018ac8:	f109 0b01 	add.w	fp, r9, #1
 8018acc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018ad0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018ad4:	f886 9001 	strb.w	r9, [r6, #1]
 8018ad8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018adc:	f896 a002 	ldrb.w	sl, [r6, #2]
 8018ae0:	fb1a fa05 	smulbb	sl, sl, r5
 8018ae4:	fb09 a908 	mla	r9, r9, r8, sl
 8018ae8:	fa1f f989 	uxth.w	r9, r9
 8018aec:	f109 0a01 	add.w	sl, r9, #1
 8018af0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8018af4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018af8:	f886 9002 	strb.w	r9, [r6, #2]
 8018afc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8018afe:	3701      	adds	r7, #1
 8018b00:	4408      	add	r0, r1
 8018b02:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018b04:	440a      	add	r2, r1
 8018b06:	e761      	b.n	80189cc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018b08:	b005      	add	sp, #20
 8018b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018b0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b12:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018b14:	4693      	mov	fp, r2
 8018b16:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8018b18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018b1c:	6868      	ldr	r0, [r5, #4]
 8018b1e:	6877      	ldr	r7, [r6, #4]
 8018b20:	9100      	str	r1, [sp, #0]
 8018b22:	3704      	adds	r7, #4
 8018b24:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8018b28:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 8018b2c:	fb00 2404 	mla	r4, r0, r4, r2
 8018b30:	682a      	ldr	r2, [r5, #0]
 8018b32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018b36:	4414      	add	r4, r2
 8018b38:	6832      	ldr	r2, [r6, #0]
 8018b3a:	9201      	str	r2, [sp, #4]
 8018b3c:	9a00      	ldr	r2, [sp, #0]
 8018b3e:	2a00      	cmp	r2, #0
 8018b40:	dc03      	bgt.n	8018b4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018b42:	f1bb 0f00 	cmp.w	fp, #0
 8018b46:	f340 80bc 	ble.w	8018cc2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8018b4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018b4c:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8018b50:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018b54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018b56:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8018b5a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	dd0c      	ble.n	8018b7c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018b62:	1405      	asrs	r5, r0, #16
 8018b64:	d405      	bmi.n	8018b72 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018b66:	4555      	cmp	r5, sl
 8018b68:	da03      	bge.n	8018b72 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018b6a:	1415      	asrs	r5, r2, #16
 8018b6c:	d401      	bmi.n	8018b72 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018b6e:	454d      	cmp	r5, r9
 8018b70:	db05      	blt.n	8018b7e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018b72:	4440      	add	r0, r8
 8018b74:	4472      	add	r2, lr
 8018b76:	3b01      	subs	r3, #1
 8018b78:	3403      	adds	r4, #3
 8018b7a:	e7f0      	b.n	8018b5e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8018b7c:	d03f      	beq.n	8018bfe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8018b7e:	1e5d      	subs	r5, r3, #1
 8018b80:	fb08 0c05 	mla	ip, r8, r5, r0
 8018b84:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8018b88:	d42e      	bmi.n	8018be8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018b8a:	45d4      	cmp	ip, sl
 8018b8c:	da2c      	bge.n	8018be8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018b8e:	fb0e 2505 	mla	r5, lr, r5, r2
 8018b92:	142d      	asrs	r5, r5, #16
 8018b94:	d428      	bmi.n	8018be8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018b96:	454d      	cmp	r5, r9
 8018b98:	da26      	bge.n	8018be8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018b9a:	1ce5      	adds	r5, r4, #3
 8018b9c:	469c      	mov	ip, r3
 8018b9e:	f1bc 0f00 	cmp.w	ip, #0
 8018ba2:	f105 0503 	add.w	r5, r5, #3
 8018ba6:	dd25      	ble.n	8018bf4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8018ba8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8018bac:	ea4f 4922 	mov.w	r9, r2, asr #16
 8018bb0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018bb4:	4472      	add	r2, lr
 8018bb6:	468a      	mov	sl, r1
 8018bb8:	9901      	ldr	r1, [sp, #4]
 8018bba:	fb0a 1909 	mla	r9, sl, r9, r1
 8018bbe:	1401      	asrs	r1, r0, #16
 8018bc0:	4440      	add	r0, r8
 8018bc2:	f819 9001 	ldrb.w	r9, [r9, r1]
 8018bc6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018bca:	eb07 0a09 	add.w	sl, r7, r9
 8018bce:	f817 9009 	ldrb.w	r9, [r7, r9]
 8018bd2:	f805 9c06 	strb.w	r9, [r5, #-6]
 8018bd6:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018bda:	f805 9c05 	strb.w	r9, [r5, #-5]
 8018bde:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018be2:	f805 9c04 	strb.w	r9, [r5, #-4]
 8018be6:	e7da      	b.n	8018b9e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018be8:	2500      	movs	r5, #0
 8018bea:	eba3 0c05 	sub.w	ip, r3, r5
 8018bee:	f1bc 0f00 	cmp.w	ip, #0
 8018bf2:	dc3b      	bgt.n	8018c6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8018bf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018bf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018bfc:	441c      	add	r4, r3
 8018bfe:	9b00      	ldr	r3, [sp, #0]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	dd5e      	ble.n	8018cc2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8018c04:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018c08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018c0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018c0e:	eeb0 6a62 	vmov.f32	s12, s5
 8018c12:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018c16:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018c1a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018c1e:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8018c22:	eeb0 6a43 	vmov.f32	s12, s6
 8018c26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018c2a:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8018c2e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018c32:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018c36:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018c3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018c3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018c42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018c46:	ee12 2a90 	vmov	r2, s5
 8018c4a:	eef0 2a47 	vmov.f32	s5, s14
 8018c4e:	fb92 f8f3 	sdiv	r8, r2, r3
 8018c52:	ee13 2a10 	vmov	r2, s6
 8018c56:	eeb0 3a67 	vmov.f32	s6, s15
 8018c5a:	fb92 fef3 	sdiv	lr, r2, r3
 8018c5e:	9b00      	ldr	r3, [sp, #0]
 8018c60:	3b01      	subs	r3, #1
 8018c62:	9300      	str	r3, [sp, #0]
 8018c64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018c66:	bf08      	it	eq
 8018c68:	465b      	moveq	r3, fp
 8018c6a:	e767      	b.n	8018b3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8018c6c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018c70:	d423      	bmi.n	8018cba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8018c72:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8018c76:	45cc      	cmp	ip, r9
 8018c78:	dd1f      	ble.n	8018cba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8018c7a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018c7e:	d41c      	bmi.n	8018cba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8018c80:	68f1      	ldr	r1, [r6, #12]
 8018c82:	4551      	cmp	r1, sl
 8018c84:	dd19      	ble.n	8018cba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8018c86:	fa0f fc8c 	sxth.w	ip, ip
 8018c8a:	9901      	ldr	r1, [sp, #4]
 8018c8c:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8018c90:	f81c c009 	ldrb.w	ip, [ip, r9]
 8018c94:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8018c98:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8018c9c:	eb07 090c 	add.w	r9, r7, ip
 8018ca0:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8018ca4:	f804 a00c 	strb.w	sl, [r4, ip]
 8018ca8:	44a4      	add	ip, r4
 8018caa:	f899 a001 	ldrb.w	sl, [r9, #1]
 8018cae:	f88c a001 	strb.w	sl, [ip, #1]
 8018cb2:	f899 9002 	ldrb.w	r9, [r9, #2]
 8018cb6:	f88c 9002 	strb.w	r9, [ip, #2]
 8018cba:	4440      	add	r0, r8
 8018cbc:	4472      	add	r2, lr
 8018cbe:	3501      	adds	r5, #1
 8018cc0:	e793      	b.n	8018bea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8018cc2:	b003      	add	sp, #12
 8018cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018cc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ccc:	b085      	sub	sp, #20
 8018cce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018cd2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018cd4:	9202      	str	r2, [sp, #8]
 8018cd6:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8018cda:	6860      	ldr	r0, [r4, #4]
 8018cdc:	9203      	str	r2, [sp, #12]
 8018cde:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8018ce2:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8018ce6:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8018cea:	fb00 2505 	mla	r5, r0, r5, r2
 8018cee:	6822      	ldr	r2, [r4, #0]
 8018cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018cf4:	4415      	add	r5, r2
 8018cf6:	f8dc 2000 	ldr.w	r2, [ip]
 8018cfa:	9200      	str	r2, [sp, #0]
 8018cfc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018d00:	3204      	adds	r2, #4
 8018d02:	9201      	str	r2, [sp, #4]
 8018d04:	2900      	cmp	r1, #0
 8018d06:	dc03      	bgt.n	8018d10 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018d08:	9a02      	ldr	r2, [sp, #8]
 8018d0a:	2a00      	cmp	r2, #0
 8018d0c:	f340 8127 	ble.w	8018f5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8018d10:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018d12:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018d16:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8018d1a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018d1c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018d20:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	dd0d      	ble.n	8018d44 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018d28:	1422      	asrs	r2, r4, #16
 8018d2a:	d405      	bmi.n	8018d38 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018d2c:	4542      	cmp	r2, r8
 8018d2e:	da03      	bge.n	8018d38 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018d30:	1402      	asrs	r2, r0, #16
 8018d32:	d401      	bmi.n	8018d38 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018d34:	42ba      	cmp	r2, r7
 8018d36:	db06      	blt.n	8018d46 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018d38:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018d3a:	4474      	add	r4, lr
 8018d3c:	3b01      	subs	r3, #1
 8018d3e:	3503      	adds	r5, #3
 8018d40:	4410      	add	r0, r2
 8018d42:	e7ef      	b.n	8018d24 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018d44:	d075      	beq.n	8018e32 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8018d46:	1e5a      	subs	r2, r3, #1
 8018d48:	fb0e 4602 	mla	r6, lr, r2, r4
 8018d4c:	1436      	asrs	r6, r6, #16
 8018d4e:	d465      	bmi.n	8018e1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018d50:	4546      	cmp	r6, r8
 8018d52:	da63      	bge.n	8018e1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018d54:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018d56:	fb06 0202 	mla	r2, r6, r2, r0
 8018d5a:	1412      	asrs	r2, r2, #16
 8018d5c:	d45e      	bmi.n	8018e1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018d5e:	42ba      	cmp	r2, r7
 8018d60:	da5c      	bge.n	8018e1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018d62:	1cef      	adds	r7, r5, #3
 8018d64:	4699      	mov	r9, r3
 8018d66:	f1b9 0f00 	cmp.w	r9, #0
 8018d6a:	dd5d      	ble.n	8018e28 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8018d6c:	1402      	asrs	r2, r0, #16
 8018d6e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018d72:	1426      	asrs	r6, r4, #16
 8018d74:	4692      	mov	sl, r2
 8018d76:	9a00      	ldr	r2, [sp, #0]
 8018d78:	fb08 220a 	mla	r2, r8, sl, r2
 8018d7c:	5d92      	ldrb	r2, [r2, r6]
 8018d7e:	9e01      	ldr	r6, [sp, #4]
 8018d80:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8018d84:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8018d88:	d041      	beq.n	8018e0e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018d8a:	9a03      	ldr	r2, [sp, #12]
 8018d8c:	fa5f fb86 	uxtb.w	fp, r6
 8018d90:	fb02 f808 	mul.w	r8, r2, r8
 8018d94:	f108 0201 	add.w	r2, r8, #1
 8018d98:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8018d9c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8018da0:	1212      	asrs	r2, r2, #8
 8018da2:	fa1f fa82 	uxth.w	sl, r2
 8018da6:	43d2      	mvns	r2, r2
 8018da8:	fb1b fb0a 	smulbb	fp, fp, sl
 8018dac:	b2d2      	uxtb	r2, r2
 8018dae:	fb08 b802 	mla	r8, r8, r2, fp
 8018db2:	fa1f f888 	uxth.w	r8, r8
 8018db6:	f108 0b01 	add.w	fp, r8, #1
 8018dba:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018dbe:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8018dc2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018dc6:	fb1b fb0a 	smulbb	fp, fp, sl
 8018dca:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018dce:	fb16 fa0a 	smulbb	sl, r6, sl
 8018dd2:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8018dd6:	f807 8c03 	strb.w	r8, [r7, #-3]
 8018dda:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8018dde:	fb06 aa02 	mla	sl, r6, r2, sl
 8018de2:	fb08 b802 	mla	r8, r8, r2, fp
 8018de6:	fa1f fa8a 	uxth.w	sl, sl
 8018dea:	fa1f f888 	uxth.w	r8, r8
 8018dee:	f10a 0601 	add.w	r6, sl, #1
 8018df2:	f108 0b01 	add.w	fp, r8, #1
 8018df6:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8018dfa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018dfe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018e02:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018e06:	f807 ac01 	strb.w	sl, [r7, #-1]
 8018e0a:	f807 8c02 	strb.w	r8, [r7, #-2]
 8018e0e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018e10:	4474      	add	r4, lr
 8018e12:	3703      	adds	r7, #3
 8018e14:	f109 39ff 	add.w	r9, r9, #4294967295
 8018e18:	4410      	add	r0, r2
 8018e1a:	e7a4      	b.n	8018d66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018e1c:	f04f 0800 	mov.w	r8, #0
 8018e20:	eba3 0208 	sub.w	r2, r3, r8
 8018e24:	2a00      	cmp	r2, #0
 8018e26:	dc3b      	bgt.n	8018ea0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8018e28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018e2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018e30:	441d      	add	r5, r3
 8018e32:	2900      	cmp	r1, #0
 8018e34:	f340 8093 	ble.w	8018f5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8018e38:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018e3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018e3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018e42:	3901      	subs	r1, #1
 8018e44:	eeb0 6a62 	vmov.f32	s12, s5
 8018e48:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018e4c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018e50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018e54:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8018e58:	eeb0 6a43 	vmov.f32	s12, s6
 8018e5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018e60:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8018e64:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018e68:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018e6c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018e70:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018e74:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018e78:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018e7c:	ee12 2a90 	vmov	r2, s5
 8018e80:	eef0 2a47 	vmov.f32	s5, s14
 8018e84:	fb92 fef3 	sdiv	lr, r2, r3
 8018e88:	ee13 2a10 	vmov	r2, s6
 8018e8c:	eeb0 3a67 	vmov.f32	s6, s15
 8018e90:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e94:	9a02      	ldr	r2, [sp, #8]
 8018e96:	9312      	str	r3, [sp, #72]	@ 0x48
 8018e98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018e9a:	bf08      	it	eq
 8018e9c:	4613      	moveq	r3, r2
 8018e9e:	e731      	b.n	8018d04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018ea0:	1427      	asrs	r7, r4, #16
 8018ea2:	d456      	bmi.n	8018f52 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018ea4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018ea8:	42be      	cmp	r6, r7
 8018eaa:	dd52      	ble.n	8018f52 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018eac:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018eb0:	d44f      	bmi.n	8018f52 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018eb2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018eb6:	454a      	cmp	r2, r9
 8018eb8:	dd4b      	ble.n	8018f52 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018eba:	9a00      	ldr	r2, [sp, #0]
 8018ebc:	b236      	sxth	r6, r6
 8018ebe:	fb09 2606 	mla	r6, r9, r6, r2
 8018ec2:	5df2      	ldrb	r2, [r6, r7]
 8018ec4:	9e01      	ldr	r6, [sp, #4]
 8018ec6:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8018eca:	0e3a      	lsrs	r2, r7, #24
 8018ecc:	d041      	beq.n	8018f52 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8018ece:	9e03      	ldr	r6, [sp, #12]
 8018ed0:	fa5f fb87 	uxtb.w	fp, r7
 8018ed4:	4372      	muls	r2, r6
 8018ed6:	1c56      	adds	r6, r2, #1
 8018ed8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018edc:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8018ee0:	1212      	asrs	r2, r2, #8
 8018ee2:	f815 9006 	ldrb.w	r9, [r5, r6]
 8018ee6:	fa1f fa82 	uxth.w	sl, r2
 8018eea:	43d2      	mvns	r2, r2
 8018eec:	fb1b fb0a 	smulbb	fp, fp, sl
 8018ef0:	b2d2      	uxtb	r2, r2
 8018ef2:	fb09 b902 	mla	r9, r9, r2, fp
 8018ef6:	fa1f f989 	uxth.w	r9, r9
 8018efa:	f109 0b01 	add.w	fp, r9, #1
 8018efe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018f02:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8018f06:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8018f0a:	fb1b fb0a 	smulbb	fp, fp, sl
 8018f0e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018f12:	fb17 fa0a 	smulbb	sl, r7, sl
 8018f16:	f805 9006 	strb.w	r9, [r5, r6]
 8018f1a:	442e      	add	r6, r5
 8018f1c:	78b7      	ldrb	r7, [r6, #2]
 8018f1e:	f896 9001 	ldrb.w	r9, [r6, #1]
 8018f22:	fb07 aa02 	mla	sl, r7, r2, sl
 8018f26:	fb09 b902 	mla	r9, r9, r2, fp
 8018f2a:	fa1f fa8a 	uxth.w	sl, sl
 8018f2e:	fa1f f989 	uxth.w	r9, r9
 8018f32:	f10a 0701 	add.w	r7, sl, #1
 8018f36:	f109 0b01 	add.w	fp, r9, #1
 8018f3a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018f3e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018f42:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018f46:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018f4a:	f886 a002 	strb.w	sl, [r6, #2]
 8018f4e:	f886 9001 	strb.w	r9, [r6, #1]
 8018f52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018f54:	4474      	add	r4, lr
 8018f56:	f108 0801 	add.w	r8, r8, #1
 8018f5a:	4410      	add	r0, r2
 8018f5c:	e760      	b.n	8018e20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8018f5e:	b005      	add	sp, #20
 8018f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f64 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f68:	b085      	sub	sp, #20
 8018f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018f6e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8018f70:	9203      	str	r2, [sp, #12]
 8018f72:	6868      	ldr	r0, [r5, #4]
 8018f74:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8018f78:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8018f7c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8018f80:	fb00 2404 	mla	r4, r0, r4, r2
 8018f84:	682a      	ldr	r2, [r5, #0]
 8018f86:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018f8a:	4414      	add	r4, r2
 8018f8c:	f8dc 2000 	ldr.w	r2, [ip]
 8018f90:	9201      	str	r2, [sp, #4]
 8018f92:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018f96:	3204      	adds	r2, #4
 8018f98:	9202      	str	r2, [sp, #8]
 8018f9a:	2900      	cmp	r1, #0
 8018f9c:	dc03      	bgt.n	8018fa6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8018f9e:	9a03      	ldr	r2, [sp, #12]
 8018fa0:	2a00      	cmp	r2, #0
 8018fa2:	f340 8137 	ble.w	8019214 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018fa6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018fa8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018fac:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018fb0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018fb2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018fb6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	dd0d      	ble.n	8018fda <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018fbe:	1405      	asrs	r5, r0, #16
 8018fc0:	d405      	bmi.n	8018fce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018fc2:	4545      	cmp	r5, r8
 8018fc4:	da03      	bge.n	8018fce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018fc6:	1415      	asrs	r5, r2, #16
 8018fc8:	d401      	bmi.n	8018fce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018fca:	42bd      	cmp	r5, r7
 8018fcc:	db06      	blt.n	8018fdc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018fce:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8018fd0:	4470      	add	r0, lr
 8018fd2:	3b01      	subs	r3, #1
 8018fd4:	3403      	adds	r4, #3
 8018fd6:	442a      	add	r2, r5
 8018fd8:	e7ef      	b.n	8018fba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8018fda:	d070      	beq.n	80190be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8018fdc:	1e5d      	subs	r5, r3, #1
 8018fde:	fb0e 0605 	mla	r6, lr, r5, r0
 8018fe2:	1436      	asrs	r6, r6, #16
 8018fe4:	d462      	bmi.n	80190ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018fe6:	4546      	cmp	r6, r8
 8018fe8:	da60      	bge.n	80190ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018fea:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018fec:	fb06 2505 	mla	r5, r6, r5, r2
 8018ff0:	142d      	asrs	r5, r5, #16
 8018ff2:	d45b      	bmi.n	80190ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018ff4:	42bd      	cmp	r5, r7
 8018ff6:	da59      	bge.n	80190ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018ff8:	1ce5      	adds	r5, r4, #3
 8018ffa:	469a      	mov	sl, r3
 8018ffc:	f1ba 0f00 	cmp.w	sl, #0
 8019000:	dd58      	ble.n	80190b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8019002:	1416      	asrs	r6, r2, #16
 8019004:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019008:	1407      	asrs	r7, r0, #16
 801900a:	46b1      	mov	r9, r6
 801900c:	9e01      	ldr	r6, [sp, #4]
 801900e:	fb08 6609 	mla	r6, r8, r9, r6
 8019012:	5df6      	ldrb	r6, [r6, r7]
 8019014:	9f02      	ldr	r7, [sp, #8]
 8019016:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801901a:	0e37      	lsrs	r7, r6, #24
 801901c:	2fff      	cmp	r7, #255	@ 0xff
 801901e:	f000 80f0 	beq.w	8019202 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8019022:	fa5f f887 	uxtb.w	r8, r7
 8019026:	b3d7      	cbz	r7, 801909e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8019028:	fa1f f788 	uxth.w	r7, r8
 801902c:	ea6f 0808 	mvn.w	r8, r8
 8019030:	fa5f fb86 	uxtb.w	fp, r6
 8019034:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8019038:	fa5f f888 	uxtb.w	r8, r8
 801903c:	fb1b fb07 	smulbb	fp, fp, r7
 8019040:	fb09 b908 	mla	r9, r9, r8, fp
 8019044:	fa1f f989 	uxth.w	r9, r9
 8019048:	f109 0b01 	add.w	fp, r9, #1
 801904c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019050:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8019054:	fb1b fb08 	smulbb	fp, fp, r8
 8019058:	ea4f 2929 	mov.w	r9, r9, asr #8
 801905c:	f805 9c03 	strb.w	r9, [r5, #-3]
 8019060:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8019064:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8019068:	fb09 b907 	mla	r9, r9, r7, fp
 801906c:	fa1f f989 	uxth.w	r9, r9
 8019070:	f109 0b01 	add.w	fp, r9, #1
 8019074:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019078:	ea4f 2929 	mov.w	r9, r9, asr #8
 801907c:	f805 9c02 	strb.w	r9, [r5, #-2]
 8019080:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8019084:	fb19 f808 	smulbb	r8, r9, r8
 8019088:	fb06 8607 	mla	r6, r6, r7, r8
 801908c:	b2b6      	uxth	r6, r6
 801908e:	f106 0801 	add.w	r8, r6, #1
 8019092:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8019096:	ea4f 2828 	mov.w	r8, r8, asr #8
 801909a:	f805 8c01 	strb.w	r8, [r5, #-1]
 801909e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80190a0:	4470      	add	r0, lr
 80190a2:	3503      	adds	r5, #3
 80190a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80190a8:	4432      	add	r2, r6
 80190aa:	e7a7      	b.n	8018ffc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80190ac:	2600      	movs	r6, #0
 80190ae:	1b9d      	subs	r5, r3, r6
 80190b0:	2d00      	cmp	r5, #0
 80190b2:	dc3b      	bgt.n	801912c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80190b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80190b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80190bc:	441c      	add	r4, r3
 80190be:	2900      	cmp	r1, #0
 80190c0:	f340 80a8 	ble.w	8019214 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80190c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80190c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80190ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80190ce:	3901      	subs	r1, #1
 80190d0:	eeb0 6a62 	vmov.f32	s12, s5
 80190d4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80190d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80190dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80190e0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80190e4:	eeb0 6a43 	vmov.f32	s12, s6
 80190e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80190ec:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80190f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80190f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80190f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80190fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019100:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019104:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019108:	ee12 2a90 	vmov	r2, s5
 801910c:	eef0 2a47 	vmov.f32	s5, s14
 8019110:	fb92 fef3 	sdiv	lr, r2, r3
 8019114:	ee13 2a10 	vmov	r2, s6
 8019118:	eeb0 3a67 	vmov.f32	s6, s15
 801911c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019120:	9a03      	ldr	r2, [sp, #12]
 8019122:	9312      	str	r3, [sp, #72]	@ 0x48
 8019124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019126:	bf08      	it	eq
 8019128:	4613      	moveq	r3, r2
 801912a:	e736      	b.n	8018f9a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801912c:	ea5f 4820 	movs.w	r8, r0, asr #16
 8019130:	d457      	bmi.n	80191e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019132:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8019136:	4547      	cmp	r7, r8
 8019138:	dd53      	ble.n	80191e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801913a:	ea5f 4922 	movs.w	r9, r2, asr #16
 801913e:	d450      	bmi.n	80191e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019140:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8019144:	454d      	cmp	r5, r9
 8019146:	dd4c      	ble.n	80191e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019148:	9d01      	ldr	r5, [sp, #4]
 801914a:	b23f      	sxth	r7, r7
 801914c:	fb09 5707 	mla	r7, r9, r7, r5
 8019150:	f817 5008 	ldrb.w	r5, [r7, r8]
 8019154:	9f02      	ldr	r7, [sp, #8]
 8019156:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801915a:	0e2f      	lsrs	r7, r5, #24
 801915c:	2fff      	cmp	r7, #255	@ 0xff
 801915e:	d045      	beq.n	80191ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8019160:	fa5f f987 	uxtb.w	r9, r7
 8019164:	b3ef      	cbz	r7, 80191e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019166:	fa1f f889 	uxth.w	r8, r9
 801916a:	ea6f 0909 	mvn.w	r9, r9
 801916e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8019172:	fa5f fb85 	uxtb.w	fp, r5
 8019176:	f814 a007 	ldrb.w	sl, [r4, r7]
 801917a:	fa5f f989 	uxtb.w	r9, r9
 801917e:	fb1b fb08 	smulbb	fp, fp, r8
 8019182:	fb0a ba09 	mla	sl, sl, r9, fp
 8019186:	fa1f fa8a 	uxth.w	sl, sl
 801918a:	f10a 0b01 	add.w	fp, sl, #1
 801918e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8019192:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019196:	f804 a007 	strb.w	sl, [r4, r7]
 801919a:	4427      	add	r7, r4
 801919c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80191a0:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80191a4:	f897 b001 	ldrb.w	fp, [r7, #1]
 80191a8:	fb1b fb09 	smulbb	fp, fp, r9
 80191ac:	fb0a ba08 	mla	sl, sl, r8, fp
 80191b0:	fa1f fa8a 	uxth.w	sl, sl
 80191b4:	f10a 0b01 	add.w	fp, sl, #1
 80191b8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80191bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80191c0:	f887 a001 	strb.w	sl, [r7, #1]
 80191c4:	f897 a002 	ldrb.w	sl, [r7, #2]
 80191c8:	fb1a f909 	smulbb	r9, sl, r9
 80191cc:	fb05 9508 	mla	r5, r5, r8, r9
 80191d0:	b2ad      	uxth	r5, r5
 80191d2:	f105 0901 	add.w	r9, r5, #1
 80191d6:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 80191da:	ea4f 2929 	mov.w	r9, r9, asr #8
 80191de:	f887 9002 	strb.w	r9, [r7, #2]
 80191e2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80191e4:	4470      	add	r0, lr
 80191e6:	3601      	adds	r6, #1
 80191e8:	442a      	add	r2, r5
 80191ea:	e760      	b.n	80190ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80191ec:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80191f0:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80191f4:	55e5      	strb	r5, [r4, r7]
 80191f6:	4427      	add	r7, r4
 80191f8:	0c2d      	lsrs	r5, r5, #16
 80191fa:	f887 8001 	strb.w	r8, [r7, #1]
 80191fe:	70bd      	strb	r5, [r7, #2]
 8019200:	e7ef      	b.n	80191e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019202:	0a37      	lsrs	r7, r6, #8
 8019204:	f805 6c03 	strb.w	r6, [r5, #-3]
 8019208:	0c36      	lsrs	r6, r6, #16
 801920a:	f805 7c02 	strb.w	r7, [r5, #-2]
 801920e:	f805 6c01 	strb.w	r6, [r5, #-1]
 8019212:	e744      	b.n	801909e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8019214:	b005      	add	sp, #20
 8019216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801921a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801921a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801921e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8019220:	9201      	str	r2, [sp, #4]
 8019222:	6870      	ldr	r0, [r6, #4]
 8019224:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8019228:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801922c:	fa1f fe85 	uxth.w	lr, r5
 8019230:	43ed      	mvns	r5, r5
 8019232:	f8dc 8000 	ldr.w	r8, [ip]
 8019236:	b2ed      	uxtb	r5, r5
 8019238:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801923c:	fb00 2404 	mla	r4, r0, r4, r2
 8019240:	6832      	ldr	r2, [r6, #0]
 8019242:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019246:	4414      	add	r4, r2
 8019248:	2900      	cmp	r1, #0
 801924a:	dc03      	bgt.n	8019254 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801924c:	9a01      	ldr	r2, [sp, #4]
 801924e:	2a00      	cmp	r2, #0
 8019250:	f340 810d 	ble.w	801946e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8019254:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019256:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801925a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801925e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019260:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8019264:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8019268:	2b00      	cmp	r3, #0
 801926a:	dd0e      	ble.n	801928a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801926c:	1406      	asrs	r6, r0, #16
 801926e:	d405      	bmi.n	801927c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8019270:	4556      	cmp	r6, sl
 8019272:	da03      	bge.n	801927c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8019274:	1416      	asrs	r6, r2, #16
 8019276:	d401      	bmi.n	801927c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8019278:	454e      	cmp	r6, r9
 801927a:	db07      	blt.n	801928c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801927c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801927e:	3b01      	subs	r3, #1
 8019280:	3403      	adds	r4, #3
 8019282:	4430      	add	r0, r6
 8019284:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8019286:	4432      	add	r2, r6
 8019288:	e7ee      	b.n	8019268 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801928a:	d060      	beq.n	801934e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801928c:	1e5e      	subs	r6, r3, #1
 801928e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8019290:	fb07 0706 	mla	r7, r7, r6, r0
 8019294:	143f      	asrs	r7, r7, #16
 8019296:	d451      	bmi.n	801933c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8019298:	4557      	cmp	r7, sl
 801929a:	da4f      	bge.n	801933c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801929c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801929e:	fb07 2606 	mla	r6, r7, r6, r2
 80192a2:	1436      	asrs	r6, r6, #16
 80192a4:	d44a      	bmi.n	801933c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80192a6:	454e      	cmp	r6, r9
 80192a8:	da48      	bge.n	801933c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80192aa:	1ce6      	adds	r6, r4, #3
 80192ac:	4699      	mov	r9, r3
 80192ae:	f1b9 0f00 	cmp.w	r9, #0
 80192b2:	f106 0603 	add.w	r6, r6, #3
 80192b6:	dd45      	ble.n	8019344 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80192b8:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80192bc:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80192c0:	1417      	asrs	r7, r2, #16
 80192c2:	f109 39ff 	add.w	r9, r9, #4294967295
 80192c6:	fb0b a707 	mla	r7, fp, r7, sl
 80192ca:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80192ce:	fb1b fb05 	smulbb	fp, fp, r5
 80192d2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80192d6:	eb08 0a07 	add.w	sl, r8, r7
 80192da:	f818 7007 	ldrb.w	r7, [r8, r7]
 80192de:	fb07 b70e 	mla	r7, r7, lr, fp
 80192e2:	b2bf      	uxth	r7, r7
 80192e4:	f107 0b01 	add.w	fp, r7, #1
 80192e8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80192ec:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80192f0:	fb1b fb05 	smulbb	fp, fp, r5
 80192f4:	123f      	asrs	r7, r7, #8
 80192f6:	f806 7c06 	strb.w	r7, [r6, #-6]
 80192fa:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80192fe:	fb07 b70e 	mla	r7, r7, lr, fp
 8019302:	b2bf      	uxth	r7, r7
 8019304:	f107 0b01 	add.w	fp, r7, #1
 8019308:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801930c:	123f      	asrs	r7, r7, #8
 801930e:	f806 7c05 	strb.w	r7, [r6, #-5]
 8019312:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8019316:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801931a:	fb1a fa05 	smulbb	sl, sl, r5
 801931e:	fb07 a70e 	mla	r7, r7, lr, sl
 8019322:	b2bf      	uxth	r7, r7
 8019324:	f107 0a01 	add.w	sl, r7, #1
 8019328:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801932c:	123f      	asrs	r7, r7, #8
 801932e:	f806 7c04 	strb.w	r7, [r6, #-4]
 8019332:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8019334:	4438      	add	r0, r7
 8019336:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8019338:	443a      	add	r2, r7
 801933a:	e7b8      	b.n	80192ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801933c:	2700      	movs	r7, #0
 801933e:	1bde      	subs	r6, r3, r7
 8019340:	2e00      	cmp	r6, #0
 8019342:	dc3f      	bgt.n	80193c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8019344:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801934c:	441c      	add	r4, r3
 801934e:	2900      	cmp	r1, #0
 8019350:	f340 808d 	ble.w	801946e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8019354:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801935a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801935e:	3901      	subs	r1, #1
 8019360:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019364:	eef0 6a62 	vmov.f32	s13, s5
 8019368:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801936c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019370:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019374:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 8019378:	eef0 6a43 	vmov.f32	s13, s6
 801937c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019380:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 8019384:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019388:	ee61 7a27 	vmul.f32	s15, s2, s15
 801938c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019390:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019394:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019398:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801939c:	ee12 2a90 	vmov	r2, s5
 80193a0:	eef0 2a47 	vmov.f32	s5, s14
 80193a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80193a8:	ee13 2a10 	vmov	r2, s6
 80193ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 80193ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80193b0:	eeb0 3a67 	vmov.f32	s6, s15
 80193b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80193b8:	9a01      	ldr	r2, [sp, #4]
 80193ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80193bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80193be:	bf08      	it	eq
 80193c0:	4613      	moveq	r3, r2
 80193c2:	e741      	b.n	8019248 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80193c4:	ea5f 4920 	movs.w	r9, r0, asr #16
 80193c8:	d44b      	bmi.n	8019462 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80193ca:	f8dc b008 	ldr.w	fp, [ip, #8]
 80193ce:	45cb      	cmp	fp, r9
 80193d0:	dd47      	ble.n	8019462 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80193d2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80193d6:	d444      	bmi.n	8019462 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80193d8:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80193dc:	4556      	cmp	r6, sl
 80193de:	dd40      	ble.n	8019462 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80193e0:	fa0f f68b 	sxth.w	r6, fp
 80193e4:	fb0a 9906 	mla	r9, sl, r6, r9
 80193e8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80193ec:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80193f0:	f814 b006 	ldrb.w	fp, [r4, r6]
 80193f4:	fb1b fb05 	smulbb	fp, fp, r5
 80193f8:	eb08 0a09 	add.w	sl, r8, r9
 80193fc:	f818 9009 	ldrb.w	r9, [r8, r9]
 8019400:	fb09 b90e 	mla	r9, r9, lr, fp
 8019404:	fa1f f989 	uxth.w	r9, r9
 8019408:	f109 0b01 	add.w	fp, r9, #1
 801940c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019410:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019414:	f804 9006 	strb.w	r9, [r4, r6]
 8019418:	4426      	add	r6, r4
 801941a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801941e:	f896 b001 	ldrb.w	fp, [r6, #1]
 8019422:	fb1b fb05 	smulbb	fp, fp, r5
 8019426:	fb09 b90e 	mla	r9, r9, lr, fp
 801942a:	fa1f f989 	uxth.w	r9, r9
 801942e:	f109 0b01 	add.w	fp, r9, #1
 8019432:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019436:	ea4f 2929 	mov.w	r9, r9, asr #8
 801943a:	f886 9001 	strb.w	r9, [r6, #1]
 801943e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8019442:	f896 a002 	ldrb.w	sl, [r6, #2]
 8019446:	fb1a fa05 	smulbb	sl, sl, r5
 801944a:	fb09 a90e 	mla	r9, r9, lr, sl
 801944e:	fa1f f989 	uxth.w	r9, r9
 8019452:	f109 0a01 	add.w	sl, r9, #1
 8019456:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801945a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801945e:	f886 9002 	strb.w	r9, [r6, #2]
 8019462:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8019464:	3701      	adds	r7, #1
 8019466:	4430      	add	r0, r6
 8019468:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801946a:	4432      	add	r2, r6
 801946c:	e767      	b.n	801933e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801946e:	b003      	add	sp, #12
 8019470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019474 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019478:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801947a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801947e:	9201      	str	r2, [sp, #4]
 8019480:	6868      	ldr	r0, [r5, #4]
 8019482:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8019484:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8019488:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801948c:	fb00 2404 	mla	r4, r0, r4, r2
 8019490:	682a      	ldr	r2, [r5, #0]
 8019492:	f8d7 8000 	ldr.w	r8, [r7]
 8019496:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801949a:	4414      	add	r4, r2
 801949c:	2900      	cmp	r1, #0
 801949e:	dc03      	bgt.n	80194a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80194a0:	9a01      	ldr	r2, [sp, #4]
 80194a2:	2a00      	cmp	r2, #0
 80194a4:	f340 80af 	ble.w	8019606 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80194a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80194aa:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80194ae:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80194b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80194b4:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80194b8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80194bc:	2b00      	cmp	r3, #0
 80194be:	dd0c      	ble.n	80194da <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80194c0:	1405      	asrs	r5, r0, #16
 80194c2:	d405      	bmi.n	80194d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80194c4:	4555      	cmp	r5, sl
 80194c6:	da03      	bge.n	80194d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80194c8:	1415      	asrs	r5, r2, #16
 80194ca:	d401      	bmi.n	80194d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80194cc:	454d      	cmp	r5, r9
 80194ce:	db05      	blt.n	80194dc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80194d0:	4470      	add	r0, lr
 80194d2:	4462      	add	r2, ip
 80194d4:	3b01      	subs	r3, #1
 80194d6:	3403      	adds	r4, #3
 80194d8:	e7f0      	b.n	80194bc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80194da:	d038      	beq.n	801954e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80194dc:	1e5d      	subs	r5, r3, #1
 80194de:	fb0e 0605 	mla	r6, lr, r5, r0
 80194e2:	1436      	asrs	r6, r6, #16
 80194e4:	d42a      	bmi.n	801953c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80194e6:	4556      	cmp	r6, sl
 80194e8:	da28      	bge.n	801953c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80194ea:	fb0c 2505 	mla	r5, ip, r5, r2
 80194ee:	142d      	asrs	r5, r5, #16
 80194f0:	d424      	bmi.n	801953c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80194f2:	454d      	cmp	r5, r9
 80194f4:	da22      	bge.n	801953c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80194f6:	1ce6      	adds	r6, r4, #3
 80194f8:	4699      	mov	r9, r3
 80194fa:	f1b9 0f00 	cmp.w	r9, #0
 80194fe:	f106 0603 	add.w	r6, r6, #3
 8019502:	dd1f      	ble.n	8019544 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8019504:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8019508:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801950c:	1415      	asrs	r5, r2, #16
 801950e:	4470      	add	r0, lr
 8019510:	4462      	add	r2, ip
 8019512:	f109 39ff 	add.w	r9, r9, #4294967295
 8019516:	fb0b a505 	mla	r5, fp, r5, sl
 801951a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801951e:	eb08 0a05 	add.w	sl, r8, r5
 8019522:	f818 5005 	ldrb.w	r5, [r8, r5]
 8019526:	f806 5c06 	strb.w	r5, [r6, #-6]
 801952a:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801952e:	f806 5c05 	strb.w	r5, [r6, #-5]
 8019532:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8019536:	f806 5c04 	strb.w	r5, [r6, #-4]
 801953a:	e7de      	b.n	80194fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801953c:	2600      	movs	r6, #0
 801953e:	1b9d      	subs	r5, r3, r6
 8019540:	2d00      	cmp	r5, #0
 8019542:	dc38      	bgt.n	80195b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019544:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019548:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801954c:	441c      	add	r4, r3
 801954e:	2900      	cmp	r1, #0
 8019550:	dd59      	ble.n	8019606 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8019552:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019556:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019558:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801955c:	3901      	subs	r1, #1
 801955e:	eeb0 6a62 	vmov.f32	s12, s5
 8019562:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019566:	ee31 1a05 	vadd.f32	s2, s2, s10
 801956a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801956e:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8019572:	eeb0 6a43 	vmov.f32	s12, s6
 8019576:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801957a:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801957e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019582:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019586:	ee77 2a62 	vsub.f32	s5, s14, s5
 801958a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801958e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019592:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019596:	ee12 2a90 	vmov	r2, s5
 801959a:	eef0 2a47 	vmov.f32	s5, s14
 801959e:	fb92 fef3 	sdiv	lr, r2, r3
 80195a2:	ee13 2a10 	vmov	r2, s6
 80195a6:	eeb0 3a67 	vmov.f32	s6, s15
 80195aa:	fb92 fcf3 	sdiv	ip, r2, r3
 80195ae:	9a01      	ldr	r2, [sp, #4]
 80195b0:	bf08      	it	eq
 80195b2:	4613      	moveq	r3, r2
 80195b4:	e772      	b.n	801949c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80195b6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80195ba:	d420      	bmi.n	80195fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80195bc:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80195c0:	45cb      	cmp	fp, r9
 80195c2:	dd1c      	ble.n	80195fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80195c4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80195c8:	d419      	bmi.n	80195fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80195ca:	68fd      	ldr	r5, [r7, #12]
 80195cc:	4555      	cmp	r5, sl
 80195ce:	dd16      	ble.n	80195fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80195d0:	fa0f f58b 	sxth.w	r5, fp
 80195d4:	fb0a 9505 	mla	r5, sl, r5, r9
 80195d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80195dc:	f818 9005 	ldrb.w	r9, [r8, r5]
 80195e0:	eb08 0b05 	add.w	fp, r8, r5
 80195e4:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 80195e8:	f804 9005 	strb.w	r9, [r4, r5]
 80195ec:	4425      	add	r5, r4
 80195ee:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80195f2:	f885 9001 	strb.w	r9, [r5, #1]
 80195f6:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80195fa:	f885 9002 	strb.w	r9, [r5, #2]
 80195fe:	4470      	add	r0, lr
 8019600:	4462      	add	r2, ip
 8019602:	3601      	adds	r6, #1
 8019604:	e79b      	b.n	801953e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8019606:	b003      	add	sp, #12
 8019608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801960c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801960c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019610:	b085      	sub	sp, #20
 8019612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019616:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8019618:	9202      	str	r2, [sp, #8]
 801961a:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801961e:	6860      	ldr	r0, [r4, #4]
 8019620:	9203      	str	r2, [sp, #12]
 8019622:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8019626:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801962a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801962e:	fb00 2505 	mla	r5, r0, r5, r2
 8019632:	6822      	ldr	r2, [r4, #0]
 8019634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019638:	4415      	add	r5, r2
 801963a:	f8dc 2000 	ldr.w	r2, [ip]
 801963e:	9201      	str	r2, [sp, #4]
 8019640:	2900      	cmp	r1, #0
 8019642:	dc03      	bgt.n	801964c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8019644:	9a02      	ldr	r2, [sp, #8]
 8019646:	2a00      	cmp	r2, #0
 8019648:	f340 8122 	ble.w	8019890 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801964c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801964e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019652:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8019656:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019658:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801965c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8019660:	2b00      	cmp	r3, #0
 8019662:	dd0d      	ble.n	8019680 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8019664:	1422      	asrs	r2, r4, #16
 8019666:	d405      	bmi.n	8019674 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019668:	4542      	cmp	r2, r8
 801966a:	da03      	bge.n	8019674 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801966c:	1402      	asrs	r2, r0, #16
 801966e:	d401      	bmi.n	8019674 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019670:	42ba      	cmp	r2, r7
 8019672:	db06      	blt.n	8019682 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019674:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019676:	4474      	add	r4, lr
 8019678:	3b01      	subs	r3, #1
 801967a:	3503      	adds	r5, #3
 801967c:	4410      	add	r0, r2
 801967e:	e7ef      	b.n	8019660 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8019680:	d072      	beq.n	8019768 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8019682:	1e5a      	subs	r2, r3, #1
 8019684:	fb0e 4602 	mla	r6, lr, r2, r4
 8019688:	1436      	asrs	r6, r6, #16
 801968a:	d462      	bmi.n	8019752 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801968c:	4546      	cmp	r6, r8
 801968e:	da60      	bge.n	8019752 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019690:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8019692:	fb06 0202 	mla	r2, r6, r2, r0
 8019696:	1412      	asrs	r2, r2, #16
 8019698:	d45b      	bmi.n	8019752 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801969a:	42ba      	cmp	r2, r7
 801969c:	da59      	bge.n	8019752 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801969e:	1cef      	adds	r7, r5, #3
 80196a0:	4699      	mov	r9, r3
 80196a2:	f1b9 0f00 	cmp.w	r9, #0
 80196a6:	dd5a      	ble.n	801975e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80196a8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80196ac:	1426      	asrs	r6, r4, #16
 80196ae:	1402      	asrs	r2, r0, #16
 80196b0:	fb08 6202 	mla	r2, r8, r2, r6
 80196b4:	9e01      	ldr	r6, [sp, #4]
 80196b6:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80196ba:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80196be:	d041      	beq.n	8019744 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80196c0:	9a03      	ldr	r2, [sp, #12]
 80196c2:	fa5f fb86 	uxtb.w	fp, r6
 80196c6:	fb02 f808 	mul.w	r8, r2, r8
 80196ca:	f108 0201 	add.w	r2, r8, #1
 80196ce:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80196d2:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80196d6:	1212      	asrs	r2, r2, #8
 80196d8:	fa1f fa82 	uxth.w	sl, r2
 80196dc:	43d2      	mvns	r2, r2
 80196de:	fb1b fb0a 	smulbb	fp, fp, sl
 80196e2:	b2d2      	uxtb	r2, r2
 80196e4:	fb08 b802 	mla	r8, r8, r2, fp
 80196e8:	fa1f f888 	uxth.w	r8, r8
 80196ec:	f108 0b01 	add.w	fp, r8, #1
 80196f0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80196f4:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80196f8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80196fc:	fb1b fb0a 	smulbb	fp, fp, sl
 8019700:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019704:	fb16 fa0a 	smulbb	sl, r6, sl
 8019708:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801970c:	f807 8c03 	strb.w	r8, [r7, #-3]
 8019710:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8019714:	fb06 aa02 	mla	sl, r6, r2, sl
 8019718:	fb08 b802 	mla	r8, r8, r2, fp
 801971c:	fa1f fa8a 	uxth.w	sl, sl
 8019720:	fa1f f888 	uxth.w	r8, r8
 8019724:	f10a 0601 	add.w	r6, sl, #1
 8019728:	f108 0b01 	add.w	fp, r8, #1
 801972c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8019730:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019734:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019738:	ea4f 2828 	mov.w	r8, r8, asr #8
 801973c:	f807 ac01 	strb.w	sl, [r7, #-1]
 8019740:	f807 8c02 	strb.w	r8, [r7, #-2]
 8019744:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019746:	4474      	add	r4, lr
 8019748:	3703      	adds	r7, #3
 801974a:	f109 39ff 	add.w	r9, r9, #4294967295
 801974e:	4410      	add	r0, r2
 8019750:	e7a7      	b.n	80196a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8019752:	f04f 0800 	mov.w	r8, #0
 8019756:	eba3 0208 	sub.w	r2, r3, r8
 801975a:	2a00      	cmp	r2, #0
 801975c:	dc3b      	bgt.n	80197d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801975e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019762:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019766:	441d      	add	r5, r3
 8019768:	2900      	cmp	r1, #0
 801976a:	f340 8091 	ble.w	8019890 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801976e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019774:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019778:	3901      	subs	r1, #1
 801977a:	eeb0 6a62 	vmov.f32	s12, s5
 801977e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019782:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019786:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801978a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801978e:	eeb0 6a43 	vmov.f32	s12, s6
 8019792:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019796:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801979a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801979e:	ee61 7a27 	vmul.f32	s15, s2, s15
 80197a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80197a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80197aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80197ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80197b2:	ee12 2a90 	vmov	r2, s5
 80197b6:	eef0 2a47 	vmov.f32	s5, s14
 80197ba:	fb92 fef3 	sdiv	lr, r2, r3
 80197be:	ee13 2a10 	vmov	r2, s6
 80197c2:	eeb0 3a67 	vmov.f32	s6, s15
 80197c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80197ca:	9a02      	ldr	r2, [sp, #8]
 80197cc:	9312      	str	r3, [sp, #72]	@ 0x48
 80197ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80197d0:	bf08      	it	eq
 80197d2:	4613      	moveq	r3, r2
 80197d4:	e734      	b.n	8019640 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80197d6:	1427      	asrs	r7, r4, #16
 80197d8:	d454      	bmi.n	8019884 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80197da:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80197de:	42be      	cmp	r6, r7
 80197e0:	dd50      	ble.n	8019884 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80197e2:	ea5f 4920 	movs.w	r9, r0, asr #16
 80197e6:	d44d      	bmi.n	8019884 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80197e8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80197ec:	454a      	cmp	r2, r9
 80197ee:	dd49      	ble.n	8019884 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80197f0:	b236      	sxth	r6, r6
 80197f2:	9a01      	ldr	r2, [sp, #4]
 80197f4:	fb09 7606 	mla	r6, r9, r6, r7
 80197f8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80197fc:	0e3a      	lsrs	r2, r7, #24
 80197fe:	d041      	beq.n	8019884 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019800:	9e03      	ldr	r6, [sp, #12]
 8019802:	fa5f fb87 	uxtb.w	fp, r7
 8019806:	4372      	muls	r2, r6
 8019808:	1c56      	adds	r6, r2, #1
 801980a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801980e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8019812:	1212      	asrs	r2, r2, #8
 8019814:	f815 9006 	ldrb.w	r9, [r5, r6]
 8019818:	fa1f fa82 	uxth.w	sl, r2
 801981c:	43d2      	mvns	r2, r2
 801981e:	fb1b fb0a 	smulbb	fp, fp, sl
 8019822:	b2d2      	uxtb	r2, r2
 8019824:	fb09 b902 	mla	r9, r9, r2, fp
 8019828:	fa1f f989 	uxth.w	r9, r9
 801982c:	f109 0b01 	add.w	fp, r9, #1
 8019830:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019834:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8019838:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801983c:	fb1b fb0a 	smulbb	fp, fp, sl
 8019840:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019844:	fb17 fa0a 	smulbb	sl, r7, sl
 8019848:	f805 9006 	strb.w	r9, [r5, r6]
 801984c:	442e      	add	r6, r5
 801984e:	78b7      	ldrb	r7, [r6, #2]
 8019850:	f896 9001 	ldrb.w	r9, [r6, #1]
 8019854:	fb07 aa02 	mla	sl, r7, r2, sl
 8019858:	fb09 b902 	mla	r9, r9, r2, fp
 801985c:	fa1f fa8a 	uxth.w	sl, sl
 8019860:	fa1f f989 	uxth.w	r9, r9
 8019864:	f10a 0701 	add.w	r7, sl, #1
 8019868:	f109 0b01 	add.w	fp, r9, #1
 801986c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019870:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019874:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019878:	ea4f 2929 	mov.w	r9, r9, asr #8
 801987c:	f886 a002 	strb.w	sl, [r6, #2]
 8019880:	f886 9001 	strb.w	r9, [r6, #1]
 8019884:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019886:	4474      	add	r4, lr
 8019888:	f108 0801 	add.w	r8, r8, #1
 801988c:	4410      	add	r0, r2
 801988e:	e762      	b.n	8019756 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8019890:	b005      	add	sp, #20
 8019892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019896 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019896:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801989a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801989c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80198a0:	9201      	str	r2, [sp, #4]
 80198a2:	6860      	ldr	r0, [r4, #4]
 80198a4:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 80198a8:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 80198ac:	fb00 2505 	mla	r5, r0, r5, r2
 80198b0:	6822      	ldr	r2, [r4, #0]
 80198b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80198b6:	4415      	add	r5, r2
 80198b8:	f8dc 2000 	ldr.w	r2, [ip]
 80198bc:	9200      	str	r2, [sp, #0]
 80198be:	2900      	cmp	r1, #0
 80198c0:	dc03      	bgt.n	80198ca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80198c2:	9a01      	ldr	r2, [sp, #4]
 80198c4:	2a00      	cmp	r2, #0
 80198c6:	f340 812b 	ble.w	8019b20 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80198ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80198cc:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80198d0:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80198d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80198d6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80198da:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80198de:	2b00      	cmp	r3, #0
 80198e0:	dd0e      	ble.n	8019900 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80198e2:	1422      	asrs	r2, r4, #16
 80198e4:	d405      	bmi.n	80198f2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80198e6:	4572      	cmp	r2, lr
 80198e8:	da03      	bge.n	80198f2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80198ea:	1402      	asrs	r2, r0, #16
 80198ec:	d401      	bmi.n	80198f2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80198ee:	42ba      	cmp	r2, r7
 80198f0:	db07      	blt.n	8019902 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80198f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80198f4:	3b01      	subs	r3, #1
 80198f6:	3503      	adds	r5, #3
 80198f8:	4414      	add	r4, r2
 80198fa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80198fc:	4410      	add	r0, r2
 80198fe:	e7ee      	b.n	80198de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019900:	d06f      	beq.n	80199e2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8019902:	1e5a      	subs	r2, r3, #1
 8019904:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8019906:	fb06 4602 	mla	r6, r6, r2, r4
 801990a:	1436      	asrs	r6, r6, #16
 801990c:	d45e      	bmi.n	80199cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801990e:	4576      	cmp	r6, lr
 8019910:	da5c      	bge.n	80199cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019912:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8019914:	fb06 0202 	mla	r2, r6, r2, r0
 8019918:	1412      	asrs	r2, r2, #16
 801991a:	d457      	bmi.n	80199cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801991c:	42ba      	cmp	r2, r7
 801991e:	da55      	bge.n	80199cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019920:	1cee      	adds	r6, r5, #3
 8019922:	469a      	mov	sl, r3
 8019924:	f1ba 0f00 	cmp.w	sl, #0
 8019928:	dd56      	ble.n	80199d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801992a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801992e:	1427      	asrs	r7, r4, #16
 8019930:	1402      	asrs	r2, r0, #16
 8019932:	fb0e 7202 	mla	r2, lr, r2, r7
 8019936:	9f00      	ldr	r7, [sp, #0]
 8019938:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801993c:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8019940:	d03c      	beq.n	80199bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019942:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8019946:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801994a:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801994e:	fa5f f28e 	uxtb.w	r2, lr
 8019952:	b2ff      	uxtb	r7, r7
 8019954:	f000 80dd 	beq.w	8019b12 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8019958:	fa1f f882 	uxth.w	r8, r2
 801995c:	43d2      	mvns	r2, r2
 801995e:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8019962:	fb17 f708 	smulbb	r7, r7, r8
 8019966:	b2d2      	uxtb	r2, r2
 8019968:	fb19 f908 	smulbb	r9, r9, r8
 801996c:	fb0e 7702 	mla	r7, lr, r2, r7
 8019970:	fb1b f808 	smulbb	r8, fp, r8
 8019974:	b2bf      	uxth	r7, r7
 8019976:	f107 0e01 	add.w	lr, r7, #1
 801997a:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801997e:	123f      	asrs	r7, r7, #8
 8019980:	f806 7c03 	strb.w	r7, [r6, #-3]
 8019984:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8019988:	fb07 9902 	mla	r9, r7, r2, r9
 801998c:	fa1f f989 	uxth.w	r9, r9
 8019990:	f109 0701 	add.w	r7, r9, #1
 8019994:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8019998:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801999c:	fb07 8802 	mla	r8, r7, r2, r8
 80199a0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80199a4:	fa1f f888 	uxth.w	r8, r8
 80199a8:	f806 9c02 	strb.w	r9, [r6, #-2]
 80199ac:	f108 0201 	add.w	r2, r8, #1
 80199b0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80199b4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80199b8:	f806 8c01 	strb.w	r8, [r6, #-1]
 80199bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80199be:	3603      	adds	r6, #3
 80199c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80199c4:	4414      	add	r4, r2
 80199c6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80199c8:	4410      	add	r0, r2
 80199ca:	e7ab      	b.n	8019924 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80199cc:	f04f 0e00 	mov.w	lr, #0
 80199d0:	eba3 020e 	sub.w	r2, r3, lr
 80199d4:	2a00      	cmp	r2, #0
 80199d6:	dc3d      	bgt.n	8019a54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80199d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80199dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80199e0:	441d      	add	r5, r3
 80199e2:	2900      	cmp	r1, #0
 80199e4:	f340 809c 	ble.w	8019b20 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80199e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80199ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80199ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80199f2:	3901      	subs	r1, #1
 80199f4:	eeb0 6a62 	vmov.f32	s12, s5
 80199f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80199fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019a00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019a04:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8019a08:	eeb0 6a43 	vmov.f32	s12, s6
 8019a0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019a10:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8019a14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019a18:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019a1c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019a20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019a24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019a28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019a2c:	ee12 2a90 	vmov	r2, s5
 8019a30:	eef0 2a47 	vmov.f32	s5, s14
 8019a34:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a38:	ee13 2a10 	vmov	r2, s6
 8019a3c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019a3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019a40:	eeb0 3a67 	vmov.f32	s6, s15
 8019a44:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a48:	9a01      	ldr	r2, [sp, #4]
 8019a4a:	9310      	str	r3, [sp, #64]	@ 0x40
 8019a4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019a4e:	bf08      	it	eq
 8019a50:	4613      	moveq	r3, r2
 8019a52:	e734      	b.n	80198be <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8019a54:	1427      	asrs	r7, r4, #16
 8019a56:	d44d      	bmi.n	8019af4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019a58:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8019a5c:	42be      	cmp	r6, r7
 8019a5e:	dd49      	ble.n	8019af4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019a60:	ea5f 4820 	movs.w	r8, r0, asr #16
 8019a64:	d446      	bmi.n	8019af4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019a66:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019a6a:	4542      	cmp	r2, r8
 8019a6c:	dd42      	ble.n	8019af4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019a6e:	b236      	sxth	r6, r6
 8019a70:	9a00      	ldr	r2, [sp, #0]
 8019a72:	fb08 7606 	mla	r6, r8, r6, r7
 8019a76:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8019a7a:	0e3a      	lsrs	r2, r7, #24
 8019a7c:	d03a      	beq.n	8019af4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019a7e:	2aff      	cmp	r2, #255	@ 0xff
 8019a80:	b2d6      	uxtb	r6, r2
 8019a82:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8019a86:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8019a8a:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8019a8e:	b2ff      	uxtb	r7, r7
 8019a90:	d037      	beq.n	8019b02 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8019a92:	fa1f f986 	uxth.w	r9, r6
 8019a96:	4472      	add	r2, lr
 8019a98:	43f6      	mvns	r6, r6
 8019a9a:	f815 8002 	ldrb.w	r8, [r5, r2]
 8019a9e:	fb17 f709 	smulbb	r7, r7, r9
 8019aa2:	fb1a fa09 	smulbb	sl, sl, r9
 8019aa6:	b2f6      	uxtb	r6, r6
 8019aa8:	fb1b f909 	smulbb	r9, fp, r9
 8019aac:	fb08 7706 	mla	r7, r8, r6, r7
 8019ab0:	b2bf      	uxth	r7, r7
 8019ab2:	f107 0801 	add.w	r8, r7, #1
 8019ab6:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8019aba:	123f      	asrs	r7, r7, #8
 8019abc:	54af      	strb	r7, [r5, r2]
 8019abe:	442a      	add	r2, r5
 8019ac0:	7857      	ldrb	r7, [r2, #1]
 8019ac2:	fb07 aa06 	mla	sl, r7, r6, sl
 8019ac6:	fa1f fa8a 	uxth.w	sl, sl
 8019aca:	f10a 0701 	add.w	r7, sl, #1
 8019ace:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019ad2:	7897      	ldrb	r7, [r2, #2]
 8019ad4:	fb07 9906 	mla	r9, r7, r6, r9
 8019ad8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019adc:	fa1f f989 	uxth.w	r9, r9
 8019ae0:	f882 a001 	strb.w	sl, [r2, #1]
 8019ae4:	f109 0601 	add.w	r6, r9, #1
 8019ae8:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8019aec:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019af0:	f882 9002 	strb.w	r9, [r2, #2]
 8019af4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019af6:	f10e 0e01 	add.w	lr, lr, #1
 8019afa:	4414      	add	r4, r2
 8019afc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019afe:	4410      	add	r0, r2
 8019b00:	e766      	b.n	80199d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8019b02:	4472      	add	r2, lr
 8019b04:	54af      	strb	r7, [r5, r2]
 8019b06:	442a      	add	r2, r5
 8019b08:	f882 a001 	strb.w	sl, [r2, #1]
 8019b0c:	f882 b002 	strb.w	fp, [r2, #2]
 8019b10:	e7f0      	b.n	8019af4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019b12:	f806 7c03 	strb.w	r7, [r6, #-3]
 8019b16:	f806 9c02 	strb.w	r9, [r6, #-2]
 8019b1a:	f806 bc01 	strb.w	fp, [r6, #-1]
 8019b1e:	e74d      	b.n	80199bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019b20:	b003      	add	sp, #12
 8019b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019b28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b2c:	b087      	sub	sp, #28
 8019b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019b32:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8019b34:	9204      	str	r2, [sp, #16]
 8019b36:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8019b3a:	6860      	ldr	r0, [r4, #4]
 8019b3c:	9205      	str	r2, [sp, #20]
 8019b3e:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8019b42:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8019b46:	9101      	str	r1, [sp, #4]
 8019b48:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8019b4c:	fb00 2505 	mla	r5, r0, r5, r2
 8019b50:	6822      	ldr	r2, [r4, #0]
 8019b52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019b56:	4415      	add	r5, r2
 8019b58:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019b5c:	3201      	adds	r2, #1
 8019b5e:	f022 0201 	bic.w	r2, r2, #1
 8019b62:	9202      	str	r2, [sp, #8]
 8019b64:	f8dc 2000 	ldr.w	r2, [ip]
 8019b68:	9203      	str	r2, [sp, #12]
 8019b6a:	9a01      	ldr	r2, [sp, #4]
 8019b6c:	2a00      	cmp	r2, #0
 8019b6e:	dc03      	bgt.n	8019b78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8019b70:	9a04      	ldr	r2, [sp, #16]
 8019b72:	2a00      	cmp	r2, #0
 8019b74:	f340 8135 	ble.w	8019de2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8019b78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019b7a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019b7e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8019b82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019b84:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019b88:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	dd0d      	ble.n	8019bac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019b90:	1422      	asrs	r2, r4, #16
 8019b92:	d405      	bmi.n	8019ba0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019b94:	4542      	cmp	r2, r8
 8019b96:	da03      	bge.n	8019ba0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019b98:	1402      	asrs	r2, r0, #16
 8019b9a:	d401      	bmi.n	8019ba0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019b9c:	42ba      	cmp	r2, r7
 8019b9e:	db06      	blt.n	8019bae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019ba0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019ba2:	4474      	add	r4, lr
 8019ba4:	3b01      	subs	r3, #1
 8019ba6:	3503      	adds	r5, #3
 8019ba8:	4410      	add	r0, r2
 8019baa:	e7ef      	b.n	8019b8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019bac:	d077      	beq.n	8019c9e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8019bae:	1e5a      	subs	r2, r3, #1
 8019bb0:	fb0e 4602 	mla	r6, lr, r2, r4
 8019bb4:	1436      	asrs	r6, r6, #16
 8019bb6:	d469      	bmi.n	8019c8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019bb8:	4546      	cmp	r6, r8
 8019bba:	da67      	bge.n	8019c8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019bbc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8019bbe:	fb06 0202 	mla	r2, r6, r2, r0
 8019bc2:	1412      	asrs	r2, r2, #16
 8019bc4:	d462      	bmi.n	8019c8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019bc6:	42ba      	cmp	r2, r7
 8019bc8:	da60      	bge.n	8019c8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019bca:	1cee      	adds	r6, r5, #3
 8019bcc:	4699      	mov	r9, r3
 8019bce:	f1b9 0f00 	cmp.w	r9, #0
 8019bd2:	dd5f      	ble.n	8019c94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8019bd4:	1422      	asrs	r2, r4, #16
 8019bd6:	9902      	ldr	r1, [sp, #8]
 8019bd8:	1407      	asrs	r7, r0, #16
 8019bda:	fb01 2707 	mla	r7, r1, r7, r2
 8019bde:	9903      	ldr	r1, [sp, #12]
 8019be0:	087a      	lsrs	r2, r7, #1
 8019be2:	5c8a      	ldrb	r2, [r1, r2]
 8019be4:	07f9      	lsls	r1, r7, #31
 8019be6:	bf54      	ite	pl
 8019be8:	f002 020f 	andpl.w	r2, r2, #15
 8019bec:	1112      	asrmi	r2, r2, #4
 8019bee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019bf2:	b2d2      	uxtb	r2, r2
 8019bf4:	2a00      	cmp	r2, #0
 8019bf6:	d042      	beq.n	8019c7e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8019bf8:	497b      	ldr	r1, [pc, #492]	@ (8019de8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8019bfa:	680f      	ldr	r7, [r1, #0]
 8019bfc:	9905      	ldr	r1, [sp, #20]
 8019bfe:	fa5f fb87 	uxtb.w	fp, r7
 8019c02:	434a      	muls	r2, r1
 8019c04:	f102 0801 	add.w	r8, r2, #1
 8019c08:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8019c0c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8019c10:	1212      	asrs	r2, r2, #8
 8019c12:	fa1f fa82 	uxth.w	sl, r2
 8019c16:	43d2      	mvns	r2, r2
 8019c18:	fb1b fb0a 	smulbb	fp, fp, sl
 8019c1c:	b2d2      	uxtb	r2, r2
 8019c1e:	fb08 b802 	mla	r8, r8, r2, fp
 8019c22:	fa1f f888 	uxth.w	r8, r8
 8019c26:	f108 0b01 	add.w	fp, r8, #1
 8019c2a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019c2e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8019c32:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8019c36:	fb1b fb0a 	smulbb	fp, fp, sl
 8019c3a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019c3e:	fb17 fa0a 	smulbb	sl, r7, sl
 8019c42:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8019c46:	f806 8c03 	strb.w	r8, [r6, #-3]
 8019c4a:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8019c4e:	fb07 aa02 	mla	sl, r7, r2, sl
 8019c52:	fb08 b802 	mla	r8, r8, r2, fp
 8019c56:	fa1f fa8a 	uxth.w	sl, sl
 8019c5a:	fa1f f888 	uxth.w	r8, r8
 8019c5e:	f10a 0701 	add.w	r7, sl, #1
 8019c62:	f108 0b01 	add.w	fp, r8, #1
 8019c66:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019c6a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019c6e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019c72:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019c76:	f806 ac01 	strb.w	sl, [r6, #-1]
 8019c7a:	f806 8c02 	strb.w	r8, [r6, #-2]
 8019c7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019c80:	4474      	add	r4, lr
 8019c82:	3603      	adds	r6, #3
 8019c84:	f109 39ff 	add.w	r9, r9, #4294967295
 8019c88:	4410      	add	r0, r2
 8019c8a:	e7a0      	b.n	8019bce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019c8c:	2700      	movs	r7, #0
 8019c8e:	1bda      	subs	r2, r3, r7
 8019c90:	2a00      	cmp	r2, #0
 8019c92:	dc3e      	bgt.n	8019d12 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8019c94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019c98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019c9c:	441d      	add	r5, r3
 8019c9e:	9b01      	ldr	r3, [sp, #4]
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	f340 809e 	ble.w	8019de2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8019ca6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019caa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019cac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019cb0:	eeb0 6a62 	vmov.f32	s12, s5
 8019cb4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019cb8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019cbc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019cc0:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8019cc4:	eeb0 6a43 	vmov.f32	s12, s6
 8019cc8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ccc:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8019cd0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019cd4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019cd8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019cdc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019ce0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019ce4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019ce8:	ee12 2a90 	vmov	r2, s5
 8019cec:	eef0 2a47 	vmov.f32	s5, s14
 8019cf0:	fb92 fef3 	sdiv	lr, r2, r3
 8019cf4:	ee13 2a10 	vmov	r2, s6
 8019cf8:	eeb0 3a67 	vmov.f32	s6, s15
 8019cfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d00:	9314      	str	r3, [sp, #80]	@ 0x50
 8019d02:	9b01      	ldr	r3, [sp, #4]
 8019d04:	9a04      	ldr	r2, [sp, #16]
 8019d06:	3b01      	subs	r3, #1
 8019d08:	9301      	str	r3, [sp, #4]
 8019d0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019d0c:	bf08      	it	eq
 8019d0e:	4613      	moveq	r3, r2
 8019d10:	e72b      	b.n	8019b6a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8019d12:	1426      	asrs	r6, r4, #16
 8019d14:	d460      	bmi.n	8019dd8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019d16:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019d1a:	42b2      	cmp	r2, r6
 8019d1c:	dd5c      	ble.n	8019dd8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019d1e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8019d22:	d459      	bmi.n	8019dd8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019d24:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019d28:	4542      	cmp	r2, r8
 8019d2a:	dd55      	ble.n	8019dd8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019d2c:	9a02      	ldr	r2, [sp, #8]
 8019d2e:	9903      	ldr	r1, [sp, #12]
 8019d30:	fb08 6602 	mla	r6, r8, r2, r6
 8019d34:	0872      	lsrs	r2, r6, #1
 8019d36:	07f6      	lsls	r6, r6, #31
 8019d38:	5c8a      	ldrb	r2, [r1, r2]
 8019d3a:	bf54      	ite	pl
 8019d3c:	f002 020f 	andpl.w	r2, r2, #15
 8019d40:	1112      	asrmi	r2, r2, #4
 8019d42:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019d46:	b2d2      	uxtb	r2, r2
 8019d48:	2a00      	cmp	r2, #0
 8019d4a:	d045      	beq.n	8019dd8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019d4c:	4926      	ldr	r1, [pc, #152]	@ (8019de8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8019d4e:	f8d1 8000 	ldr.w	r8, [r1]
 8019d52:	9905      	ldr	r1, [sp, #20]
 8019d54:	fa5f fb88 	uxtb.w	fp, r8
 8019d58:	434a      	muls	r2, r1
 8019d5a:	1c56      	adds	r6, r2, #1
 8019d5c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019d60:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019d64:	1212      	asrs	r2, r2, #8
 8019d66:	f815 9006 	ldrb.w	r9, [r5, r6]
 8019d6a:	fa1f fa82 	uxth.w	sl, r2
 8019d6e:	43d2      	mvns	r2, r2
 8019d70:	fb1b fb0a 	smulbb	fp, fp, sl
 8019d74:	b2d2      	uxtb	r2, r2
 8019d76:	fb09 b902 	mla	r9, r9, r2, fp
 8019d7a:	fa1f f989 	uxth.w	r9, r9
 8019d7e:	f109 0b01 	add.w	fp, r9, #1
 8019d82:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019d86:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8019d8a:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8019d8e:	fb1b fb0a 	smulbb	fp, fp, sl
 8019d92:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019d96:	fb18 fa0a 	smulbb	sl, r8, sl
 8019d9a:	f805 9006 	strb.w	r9, [r5, r6]
 8019d9e:	442e      	add	r6, r5
 8019da0:	f896 8002 	ldrb.w	r8, [r6, #2]
 8019da4:	f896 9001 	ldrb.w	r9, [r6, #1]
 8019da8:	fb08 aa02 	mla	sl, r8, r2, sl
 8019dac:	fb09 b902 	mla	r9, r9, r2, fp
 8019db0:	fa1f fa8a 	uxth.w	sl, sl
 8019db4:	fa1f f989 	uxth.w	r9, r9
 8019db8:	f10a 0801 	add.w	r8, sl, #1
 8019dbc:	f109 0b01 	add.w	fp, r9, #1
 8019dc0:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8019dc4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019dc8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019dcc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019dd0:	f886 a002 	strb.w	sl, [r6, #2]
 8019dd4:	f886 9001 	strb.w	r9, [r6, #1]
 8019dd8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019dda:	4474      	add	r4, lr
 8019ddc:	3701      	adds	r7, #1
 8019dde:	4410      	add	r0, r2
 8019de0:	e755      	b.n	8019c8e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8019de2:	b007      	add	sp, #28
 8019de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019de8:	240255dc 	.word	0x240255dc

08019dec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019df0:	b085      	sub	sp, #20
 8019df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019df6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8019df8:	9203      	str	r2, [sp, #12]
 8019dfa:	6860      	ldr	r0, [r4, #4]
 8019dfc:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8019e00:	9100      	str	r1, [sp, #0]
 8019e02:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 8019e06:	fb00 2606 	mla	r6, r0, r6, r2
 8019e0a:	6822      	ldr	r2, [r4, #0]
 8019e0c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019e10:	4416      	add	r6, r2
 8019e12:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019e16:	3201      	adds	r2, #1
 8019e18:	f022 0201 	bic.w	r2, r2, #1
 8019e1c:	9201      	str	r2, [sp, #4]
 8019e1e:	f8dc 2000 	ldr.w	r2, [ip]
 8019e22:	9202      	str	r2, [sp, #8]
 8019e24:	9a00      	ldr	r2, [sp, #0]
 8019e26:	2a00      	cmp	r2, #0
 8019e28:	dc03      	bgt.n	8019e32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8019e2a:	9a03      	ldr	r2, [sp, #12]
 8019e2c:	2a00      	cmp	r2, #0
 8019e2e:	f340 8140 	ble.w	801a0b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8019e32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019e34:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019e38:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 8019e3c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019e3e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019e42:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	dd0e      	ble.n	8019e68 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019e4a:	142a      	asrs	r2, r5, #16
 8019e4c:	d405      	bmi.n	8019e5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019e4e:	4572      	cmp	r2, lr
 8019e50:	da03      	bge.n	8019e5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019e52:	1422      	asrs	r2, r4, #16
 8019e54:	d401      	bmi.n	8019e5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019e56:	42ba      	cmp	r2, r7
 8019e58:	db07      	blt.n	8019e6a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019e5a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019e5c:	3b01      	subs	r3, #1
 8019e5e:	3603      	adds	r6, #3
 8019e60:	4415      	add	r5, r2
 8019e62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019e64:	4414      	add	r4, r2
 8019e66:	e7ee      	b.n	8019e46 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8019e68:	d072      	beq.n	8019f50 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019e6a:	1e5a      	subs	r2, r3, #1
 8019e6c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8019e6e:	fb00 5002 	mla	r0, r0, r2, r5
 8019e72:	1400      	asrs	r0, r0, #16
 8019e74:	d463      	bmi.n	8019f3e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019e76:	4570      	cmp	r0, lr
 8019e78:	da61      	bge.n	8019f3e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019e7a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8019e7c:	fb00 4202 	mla	r2, r0, r2, r4
 8019e80:	1412      	asrs	r2, r2, #16
 8019e82:	d45c      	bmi.n	8019f3e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019e84:	42ba      	cmp	r2, r7
 8019e86:	da5a      	bge.n	8019f3e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8019e88:	1cf0      	adds	r0, r6, #3
 8019e8a:	469a      	mov	sl, r3
 8019e8c:	f1ba 0f00 	cmp.w	sl, #0
 8019e90:	dd59      	ble.n	8019f46 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8019e92:	142a      	asrs	r2, r5, #16
 8019e94:	9901      	ldr	r1, [sp, #4]
 8019e96:	1427      	asrs	r7, r4, #16
 8019e98:	fb01 2707 	mla	r7, r1, r7, r2
 8019e9c:	9902      	ldr	r1, [sp, #8]
 8019e9e:	087a      	lsrs	r2, r7, #1
 8019ea0:	5c8a      	ldrb	r2, [r1, r2]
 8019ea2:	07f9      	lsls	r1, r7, #31
 8019ea4:	bf54      	ite	pl
 8019ea6:	f002 020f 	andpl.w	r2, r2, #15
 8019eaa:	1112      	asrmi	r2, r2, #4
 8019eac:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019eb0:	b2d2      	uxtb	r2, r2
 8019eb2:	2a00      	cmp	r2, #0
 8019eb4:	d03b      	beq.n	8019f2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019eb6:	4980      	ldr	r1, [pc, #512]	@ (801a0b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8019eb8:	2aff      	cmp	r2, #255	@ 0xff
 8019eba:	680f      	ldr	r7, [r1, #0]
 8019ebc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8019ec0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8019ec4:	b2ff      	uxtb	r7, r7
 8019ec6:	f000 80ed 	beq.w	801a0a4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8019eca:	fa1f f882 	uxth.w	r8, r2
 8019ece:	43d2      	mvns	r2, r2
 8019ed0:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8019ed4:	fb17 f708 	smulbb	r7, r7, r8
 8019ed8:	b2d2      	uxtb	r2, r2
 8019eda:	fb19 f908 	smulbb	r9, r9, r8
 8019ede:	fb0e 7702 	mla	r7, lr, r2, r7
 8019ee2:	fb1b f808 	smulbb	r8, fp, r8
 8019ee6:	b2bf      	uxth	r7, r7
 8019ee8:	f107 0e01 	add.w	lr, r7, #1
 8019eec:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8019ef0:	123f      	asrs	r7, r7, #8
 8019ef2:	f800 7c03 	strb.w	r7, [r0, #-3]
 8019ef6:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8019efa:	fb07 9902 	mla	r9, r7, r2, r9
 8019efe:	fa1f f989 	uxth.w	r9, r9
 8019f02:	f109 0701 	add.w	r7, r9, #1
 8019f06:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8019f0a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8019f0e:	fb07 8802 	mla	r8, r7, r2, r8
 8019f12:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019f16:	fa1f f888 	uxth.w	r8, r8
 8019f1a:	f800 9c02 	strb.w	r9, [r0, #-2]
 8019f1e:	f108 0201 	add.w	r2, r8, #1
 8019f22:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019f26:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019f2a:	f800 8c01 	strb.w	r8, [r0, #-1]
 8019f2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019f30:	3003      	adds	r0, #3
 8019f32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019f36:	4415      	add	r5, r2
 8019f38:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019f3a:	4414      	add	r4, r2
 8019f3c:	e7a6      	b.n	8019e8c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019f3e:	2700      	movs	r7, #0
 8019f40:	1bda      	subs	r2, r3, r7
 8019f42:	2a00      	cmp	r2, #0
 8019f44:	dc40      	bgt.n	8019fc8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8019f46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019f4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019f4e:	441e      	add	r6, r3
 8019f50:	9b00      	ldr	r3, [sp, #0]
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	f340 80ad 	ble.w	801a0b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8019f58:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019f5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f5e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019f62:	eeb0 6a62 	vmov.f32	s12, s5
 8019f66:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019f6a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019f6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f72:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8019f76:	eeb0 6a43 	vmov.f32	s12, s6
 8019f7a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f7e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8019f82:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019f86:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019f8a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019f8e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019f92:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019f96:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019f9a:	ee12 2a90 	vmov	r2, s5
 8019f9e:	eef0 2a47 	vmov.f32	s5, s14
 8019fa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8019fa6:	ee13 2a10 	vmov	r2, s6
 8019faa:	9311      	str	r3, [sp, #68]	@ 0x44
 8019fac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019fae:	eeb0 3a67 	vmov.f32	s6, s15
 8019fb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8019fb6:	9312      	str	r3, [sp, #72]	@ 0x48
 8019fb8:	9b00      	ldr	r3, [sp, #0]
 8019fba:	9a03      	ldr	r2, [sp, #12]
 8019fbc:	3b01      	subs	r3, #1
 8019fbe:	9300      	str	r3, [sp, #0]
 8019fc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019fc2:	bf08      	it	eq
 8019fc4:	4613      	moveq	r3, r2
 8019fc6:	e72d      	b.n	8019e24 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8019fc8:	1428      	asrs	r0, r5, #16
 8019fca:	d45c      	bmi.n	801a086 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019fcc:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019fd0:	4282      	cmp	r2, r0
 8019fd2:	dd58      	ble.n	801a086 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019fd4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8019fd8:	d455      	bmi.n	801a086 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019fda:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019fde:	4572      	cmp	r2, lr
 8019fe0:	dd51      	ble.n	801a086 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019fe2:	9a01      	ldr	r2, [sp, #4]
 8019fe4:	9902      	ldr	r1, [sp, #8]
 8019fe6:	fb0e 0002 	mla	r0, lr, r2, r0
 8019fea:	0842      	lsrs	r2, r0, #1
 8019fec:	07c0      	lsls	r0, r0, #31
 8019fee:	5c8a      	ldrb	r2, [r1, r2]
 8019ff0:	bf54      	ite	pl
 8019ff2:	f002 020f 	andpl.w	r2, r2, #15
 8019ff6:	1112      	asrmi	r2, r2, #4
 8019ff8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019ffc:	b2d2      	uxtb	r2, r2
 8019ffe:	2a00      	cmp	r2, #0
 801a000:	d041      	beq.n	801a086 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a002:	492d      	ldr	r1, [pc, #180]	@ (801a0b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801a004:	2aff      	cmp	r2, #255	@ 0xff
 801a006:	6808      	ldr	r0, [r1, #0]
 801a008:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801a00c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a010:	fa5f fe80 	uxtb.w	lr, r0
 801a014:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801a018:	d03b      	beq.n	801a092 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801a01a:	fa1f f982 	uxth.w	r9, r2
 801a01e:	4438      	add	r0, r7
 801a020:	43d2      	mvns	r2, r2
 801a022:	f816 8000 	ldrb.w	r8, [r6, r0]
 801a026:	fb1e fe09 	smulbb	lr, lr, r9
 801a02a:	fb1a fa09 	smulbb	sl, sl, r9
 801a02e:	b2d2      	uxtb	r2, r2
 801a030:	fb1b f909 	smulbb	r9, fp, r9
 801a034:	fb08 ee02 	mla	lr, r8, r2, lr
 801a038:	fa1f fe8e 	uxth.w	lr, lr
 801a03c:	f10e 0801 	add.w	r8, lr, #1
 801a040:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801a044:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a048:	f806 e000 	strb.w	lr, [r6, r0]
 801a04c:	4430      	add	r0, r6
 801a04e:	f890 e001 	ldrb.w	lr, [r0, #1]
 801a052:	fb0e aa02 	mla	sl, lr, r2, sl
 801a056:	fa1f fa8a 	uxth.w	sl, sl
 801a05a:	f10a 0e01 	add.w	lr, sl, #1
 801a05e:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801a062:	f890 e002 	ldrb.w	lr, [r0, #2]
 801a066:	fb0e 9902 	mla	r9, lr, r2, r9
 801a06a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a06e:	fa1f f989 	uxth.w	r9, r9
 801a072:	f880 a001 	strb.w	sl, [r0, #1]
 801a076:	f109 0201 	add.w	r2, r9, #1
 801a07a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801a07e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a082:	f880 9002 	strb.w	r9, [r0, #2]
 801a086:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a088:	3701      	adds	r7, #1
 801a08a:	4415      	add	r5, r2
 801a08c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a08e:	4414      	add	r4, r2
 801a090:	e756      	b.n	8019f40 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a092:	4438      	add	r0, r7
 801a094:	f806 e000 	strb.w	lr, [r6, r0]
 801a098:	4430      	add	r0, r6
 801a09a:	f880 a001 	strb.w	sl, [r0, #1]
 801a09e:	f880 b002 	strb.w	fp, [r0, #2]
 801a0a2:	e7f0      	b.n	801a086 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a0a4:	f800 7c03 	strb.w	r7, [r0, #-3]
 801a0a8:	f800 9c02 	strb.w	r9, [r0, #-2]
 801a0ac:	f800 bc01 	strb.w	fp, [r0, #-1]
 801a0b0:	e73d      	b.n	8019f2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801a0b2:	b005      	add	sp, #20
 801a0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0b8:	240255dc 	.word	0x240255dc

0801a0bc <_ZN8touchgfx8LCD24bppD1Ev>:
 801a0bc:	4770      	bx	lr

0801a0be <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 801a0be:	4770      	bx	lr

0801a0c0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801a0c0:	4770      	bx	lr

0801a0c2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801a0c2:	4770      	bx	lr

0801a0c4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801a0c4:	4770      	bx	lr

0801a0c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801a0c6:	4770      	bx	lr

0801a0c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801a0c8:	4770      	bx	lr

0801a0ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801a0ca:	4770      	bx	lr

0801a0cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801a0cc:	4770      	bx	lr

0801a0ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a0ce:	4770      	bx	lr

0801a0d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a0d0:	4770      	bx	lr

0801a0d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a0d2:	4770      	bx	lr

0801a0d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a0d4:	4770      	bx	lr

0801a0d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a0d6:	4770      	bx	lr

0801a0d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801a0d8:	4770      	bx	lr

0801a0da <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a0da:	4770      	bx	lr

0801a0dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801a0dc:	4770      	bx	lr

0801a0de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a0de:	4770      	bx	lr

0801a0e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a0e0:	4770      	bx	lr

0801a0e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a0e2:	4770      	bx	lr

0801a0e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a0e4:	4770      	bx	lr

0801a0e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a0e6:	4770      	bx	lr

0801a0e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801a0e8:	4770      	bx	lr

0801a0ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a0ea:	4770      	bx	lr

0801a0ec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801a0ec:	4770      	bx	lr
	...

0801a0f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801a0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0f2:	4606      	mov	r6, r0
 801a0f4:	b087      	sub	sp, #28
 801a0f6:	4615      	mov	r5, r2
 801a0f8:	461f      	mov	r7, r3
 801a0fa:	b353      	cbz	r3, 801a152 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801a0fc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a100:	2b00      	cmp	r3, #0
 801a102:	dd26      	ble.n	801a152 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801a104:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a108:	2b00      	cmp	r3, #0
 801a10a:	dd22      	ble.n	801a152 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801a10c:	6808      	ldr	r0, [r1, #0]
 801a10e:	aa04      	add	r2, sp, #16
 801a110:	6849      	ldr	r1, [r1, #4]
 801a112:	4c1b      	ldr	r4, [pc, #108]	@ (801a180 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801a114:	c203      	stmia	r2!, {r0, r1}
 801a116:	a804      	add	r0, sp, #16
 801a118:	f7fa f9da 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a11c:	6820      	ldr	r0, [r4, #0]
 801a11e:	6803      	ldr	r3, [r0, #0]
 801a120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a122:	4798      	blx	r3
 801a124:	2fff      	cmp	r7, #255	@ 0xff
 801a126:	d016      	beq.n	801a156 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801a128:	f010 0f08 	tst.w	r0, #8
 801a12c:	6820      	ldr	r0, [r4, #0]
 801a12e:	d015      	beq.n	801a15c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801a130:	2400      	movs	r4, #0
 801a132:	6801      	ldr	r1, [r0, #0]
 801a134:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a138:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a13c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801a140:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801a144:	9401      	str	r4, [sp, #4]
 801a146:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801a14a:	9400      	str	r4, [sp, #0]
 801a14c:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 801a14e:	4629      	mov	r1, r5
 801a150:	47a0      	blx	r4
 801a152:	b007      	add	sp, #28
 801a154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a156:	f010 0f02 	tst.w	r0, #2
 801a15a:	e7e7      	b.n	801a12c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801a15c:	6803      	ldr	r3, [r0, #0]
 801a15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a160:	4798      	blx	r3
 801a162:	4b08      	ldr	r3, [pc, #32]	@ (801a184 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801a164:	4601      	mov	r1, r0
 801a166:	4630      	mov	r0, r6
 801a168:	881a      	ldrh	r2, [r3, #0]
 801a16a:	6833      	ldr	r3, [r6, #0]
 801a16c:	e9cd 5700 	strd	r5, r7, [sp]
 801a170:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801a172:	ab04      	add	r3, sp, #16
 801a174:	47a8      	blx	r5
 801a176:	6820      	ldr	r0, [r4, #0]
 801a178:	6803      	ldr	r3, [r0, #0]
 801a17a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a17c:	4798      	blx	r3
 801a17e:	e7e8      	b.n	801a152 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801a180:	240255cc 	.word	0x240255cc
 801a184:	240255c6 	.word	0x240255c6

0801a188 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801a188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a18c:	b08b      	sub	sp, #44	@ 0x2c
 801a18e:	460d      	mov	r5, r1
 801a190:	4616      	mov	r6, r2
 801a192:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 801a196:	f1b8 0f00 	cmp.w	r8, #0
 801a19a:	d047      	beq.n	801a22c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801a19c:	6810      	ldr	r0, [r2, #0]
 801a19e:	ac06      	add	r4, sp, #24
 801a1a0:	6851      	ldr	r1, [r2, #4]
 801a1a2:	4f51      	ldr	r7, [pc, #324]	@ (801a2e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801a1a4:	c403      	stmia	r4!, {r0, r1}
 801a1a6:	6818      	ldr	r0, [r3, #0]
 801a1a8:	ac08      	add	r4, sp, #32
 801a1aa:	6859      	ldr	r1, [r3, #4]
 801a1ac:	c403      	stmia	r4!, {r0, r1}
 801a1ae:	a806      	add	r0, sp, #24
 801a1b0:	f7fa f98e 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a1b4:	4631      	mov	r1, r6
 801a1b6:	a808      	add	r0, sp, #32
 801a1b8:	f7fa f9b2 	bl	8014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a1bc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801a1c0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801a1c4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a1c8:	6838      	ldr	r0, [r7, #0]
 801a1ca:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a1ce:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801a1d2:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801a1d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a1da:	440d      	add	r5, r1
 801a1dc:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801a1e0:	440a      	add	r2, r1
 801a1e2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a1e6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a1ea:	4413      	add	r3, r2
 801a1ec:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801a1f0:	6803      	ldr	r3, [r0, #0]
 801a1f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a1f4:	4798      	blx	r3
 801a1f6:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801a1fa:	d01a      	beq.n	801a232 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801a1fc:	f010 0f04 	tst.w	r0, #4
 801a200:	6838      	ldr	r0, [r7, #0]
 801a202:	d019      	beq.n	801a238 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801a204:	2100      	movs	r1, #0
 801a206:	6807      	ldr	r7, [r0, #0]
 801a208:	b2a4      	uxth	r4, r4
 801a20a:	f8cd 800c 	str.w	r8, [sp, #12]
 801a20e:	b2b6      	uxth	r6, r6
 801a210:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801a214:	9401      	str	r4, [sp, #4]
 801a216:	9600      	str	r6, [sp, #0]
 801a218:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801a21c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801a220:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a224:	9102      	str	r1, [sp, #8]
 801a226:	4629      	mov	r1, r5
 801a228:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 801a22a:	47a0      	blx	r4
 801a22c:	b00b      	add	sp, #44	@ 0x2c
 801a22e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a232:	f010 0f01 	tst.w	r0, #1
 801a236:	e7e3      	b.n	801a200 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801a238:	6803      	ldr	r3, [r0, #0]
 801a23a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a23c:	4798      	blx	r3
 801a23e:	4a2b      	ldr	r2, [pc, #172]	@ (801a2ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801a240:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801a244:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801a248:	8813      	ldrh	r3, [r2, #0]
 801a24a:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801a24e:	fb03 f404 	mul.w	r4, r3, r4
 801a252:	fb03 c101 	mla	r1, r3, r1, ip
 801a256:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a25a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a25e:	4408      	add	r0, r1
 801a260:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801a264:	4404      	add	r4, r0
 801a266:	d02e      	beq.n	801a2c6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801a268:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801a26c:	1b9b      	subs	r3, r3, r6
 801a26e:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 801a272:	1b96      	subs	r6, r2, r6
 801a274:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a278:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a27c:	42a0      	cmp	r0, r4
 801a27e:	d22d      	bcs.n	801a2dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801a280:	eb00 0e01 	add.w	lr, r0, r1
 801a284:	4570      	cmp	r0, lr
 801a286:	d210      	bcs.n	801a2aa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801a288:	f890 9000 	ldrb.w	r9, [r0]
 801a28c:	f815 2b01 	ldrb.w	r2, [r5], #1
 801a290:	fb19 f90c 	smulbb	r9, r9, ip
 801a294:	fb02 9208 	mla	r2, r2, r8, r9
 801a298:	b292      	uxth	r2, r2
 801a29a:	f102 0901 	add.w	r9, r2, #1
 801a29e:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801a2a2:	1212      	asrs	r2, r2, #8
 801a2a4:	f800 2b01 	strb.w	r2, [r0], #1
 801a2a8:	e7ec      	b.n	801a284 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801a2aa:	4418      	add	r0, r3
 801a2ac:	4435      	add	r5, r6
 801a2ae:	e7e5      	b.n	801a27c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801a2b0:	8813      	ldrh	r3, [r2, #0]
 801a2b2:	1b9b      	subs	r3, r3, r6
 801a2b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a2b8:	4418      	add	r0, r3
 801a2ba:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a2be:	1b9b      	subs	r3, r3, r6
 801a2c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a2c4:	441d      	add	r5, r3
 801a2c6:	42a0      	cmp	r0, r4
 801a2c8:	d208      	bcs.n	801a2dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801a2ca:	eb00 0c01 	add.w	ip, r0, r1
 801a2ce:	4560      	cmp	r0, ip
 801a2d0:	d2ee      	bcs.n	801a2b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801a2d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a2d6:	f800 3b01 	strb.w	r3, [r0], #1
 801a2da:	e7f8      	b.n	801a2ce <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801a2dc:	6838      	ldr	r0, [r7, #0]
 801a2de:	6803      	ldr	r3, [r0, #0]
 801a2e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a2e2:	4798      	blx	r3
 801a2e4:	e7a2      	b.n	801a22c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801a2e6:	bf00      	nop
 801a2e8:	240255cc 	.word	0x240255cc
 801a2ec:	240255c6 	.word	0x240255c6

0801a2f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801a2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2f2:	2300      	movs	r3, #0
 801a2f4:	b085      	sub	sp, #20
 801a2f6:	9300      	str	r3, [sp, #0]
 801a2f8:	4b41      	ldr	r3, [pc, #260]	@ (801a400 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801a2fa:	781b      	ldrb	r3, [r3, #0]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d136      	bne.n	801a36e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801a300:	4a40      	ldr	r2, [pc, #256]	@ (801a404 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801a302:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a306:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d131      	bne.n	801a372 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801a30e:	4b3e      	ldr	r3, [pc, #248]	@ (801a408 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801a310:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a314:	ac02      	add	r4, sp, #8
 801a316:	6808      	ldr	r0, [r1, #0]
 801a318:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a31c:	ab02      	add	r3, sp, #8
 801a31e:	6849      	ldr	r1, [r1, #4]
 801a320:	4d3a      	ldr	r5, [pc, #232]	@ (801a40c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801a322:	c303      	stmia	r3!, {r0, r1}
 801a324:	4669      	mov	r1, sp
 801a326:	4620      	mov	r0, r4
 801a328:	f7fa f8fa 	bl	8014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a32c:	4668      	mov	r0, sp
 801a32e:	f7fa f8cf 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a332:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a336:	f8bd 2000 	ldrh.w	r2, [sp]
 801a33a:	462e      	mov	r6, r5
 801a33c:	6828      	ldr	r0, [r5, #0]
 801a33e:	4413      	add	r3, r2
 801a340:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801a344:	f8ad 3008 	strh.w	r3, [sp, #8]
 801a348:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a34c:	4413      	add	r3, r2
 801a34e:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a352:	6803      	ldr	r3, [r0, #0]
 801a354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a356:	4798      	blx	r3
 801a358:	f010 0f01 	tst.w	r0, #1
 801a35c:	d00b      	beq.n	801a376 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801a35e:	6828      	ldr	r0, [r5, #0]
 801a360:	6803      	ldr	r3, [r0, #0]
 801a362:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a368:	4798      	blx	r3
 801a36a:	b005      	add	sp, #20
 801a36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a36e:	4a26      	ldr	r2, [pc, #152]	@ (801a408 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801a370:	e7c7      	b.n	801a302 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801a372:	4b24      	ldr	r3, [pc, #144]	@ (801a404 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801a374:	e7cc      	b.n	801a310 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801a376:	6830      	ldr	r0, [r6, #0]
 801a378:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801a37c:	6803      	ldr	r3, [r0, #0]
 801a37e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801a382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a384:	4798      	blx	r3
 801a386:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801a38a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a38e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801a392:	fb14 3402 	smlabb	r4, r4, r2, r3
 801a396:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a39a:	4404      	add	r4, r0
 801a39c:	6830      	ldr	r0, [r6, #0]
 801a39e:	6803      	ldr	r3, [r0, #0]
 801a3a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a3a2:	4798      	blx	r3
 801a3a4:	4917      	ldr	r1, [pc, #92]	@ (801a404 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801a3a6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801a3aa:	880b      	ldrh	r3, [r1, #0]
 801a3ac:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801a3b0:	fb03 c202 	mla	r2, r3, r2, ip
 801a3b4:	437b      	muls	r3, r7
 801a3b6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801a3ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a3be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a3c2:	4410      	add	r0, r2
 801a3c4:	18c2      	adds	r2, r0, r3
 801a3c6:	4290      	cmp	r0, r2
 801a3c8:	d214      	bcs.n	801a3f4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801a3ca:	eb00 0c07 	add.w	ip, r0, r7
 801a3ce:	4560      	cmp	r0, ip
 801a3d0:	d204      	bcs.n	801a3dc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801a3d2:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a3d6:	f800 3b01 	strb.w	r3, [r0], #1
 801a3da:	e7f8      	b.n	801a3ce <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801a3dc:	880b      	ldrh	r3, [r1, #0]
 801a3de:	1b5b      	subs	r3, r3, r5
 801a3e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a3e4:	4418      	add	r0, r3
 801a3e6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a3ea:	1b5b      	subs	r3, r3, r5
 801a3ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a3f0:	441c      	add	r4, r3
 801a3f2:	e7e8      	b.n	801a3c6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801a3f4:	6830      	ldr	r0, [r6, #0]
 801a3f6:	6803      	ldr	r3, [r0, #0]
 801a3f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a3fa:	4798      	blx	r3
 801a3fc:	e7b5      	b.n	801a36a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801a3fe:	bf00      	nop
 801a400:	240255c4 	.word	0x240255c4
 801a404:	240255c6 	.word	0x240255c6
 801a408:	240255c8 	.word	0x240255c8
 801a40c:	240255cc 	.word	0x240255cc

0801a410 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a414:	b08f      	sub	sp, #60	@ 0x3c
 801a416:	461c      	mov	r4, r3
 801a418:	9203      	str	r2, [sp, #12]
 801a41a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801a41e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a420:	6820      	ldr	r0, [r4, #0]
 801a422:	9100      	str	r1, [sp, #0]
 801a424:	9204      	str	r2, [sp, #16]
 801a426:	aa0a      	add	r2, sp, #40	@ 0x28
 801a428:	6861      	ldr	r1, [r4, #4]
 801a42a:	c203      	stmia	r2!, {r0, r1}
 801a42c:	6818      	ldr	r0, [r3, #0]
 801a42e:	aa0c      	add	r2, sp, #48	@ 0x30
 801a430:	6859      	ldr	r1, [r3, #4]
 801a432:	c203      	stmia	r2!, {r0, r1}
 801a434:	a80a      	add	r0, sp, #40	@ 0x28
 801a436:	f7fa f84b 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a43a:	4621      	mov	r1, r4
 801a43c:	a80c      	add	r0, sp, #48	@ 0x30
 801a43e:	f7fa f86f 	bl	8014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a442:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801a446:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801a44a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801a44e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801a452:	bfdb      	ittet	le
 801a454:	b2b3      	uxthle	r3, r6
 801a456:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801a45a:	2301      	movgt	r3, #1
 801a45c:	fb92 f3f3 	sdivle	r3, r2, r3
 801a460:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a464:	441d      	add	r5, r3
 801a466:	fb92 f1f3 	sdiv	r1, r2, r3
 801a46a:	fa1f fc81 	uxth.w	ip, r1
 801a46e:	3d01      	subs	r5, #1
 801a470:	fb0c 2413 	mls	r4, ip, r3, r2
 801a474:	4661      	mov	r1, ip
 801a476:	fb14 f406 	smulbb	r4, r4, r6
 801a47a:	4404      	add	r4, r0
 801a47c:	fb95 f5f3 	sdiv	r5, r5, r3
 801a480:	b2a4      	uxth	r4, r4
 801a482:	b131      	cbz	r1, 801a492 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801a484:	9b03      	ldr	r3, [sp, #12]
 801a486:	9900      	ldr	r1, [sp, #0]
 801a488:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a48c:	ba1b      	rev	r3, r3
 801a48e:	4419      	add	r1, r3
 801a490:	9100      	str	r1, [sp, #0]
 801a492:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801a496:	b2ad      	uxth	r5, r5
 801a498:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801a49c:	4418      	add	r0, r3
 801a49e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801a4a2:	00ad      	lsls	r5, r5, #2
 801a4a4:	441a      	add	r2, r3
 801a4a6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801a4aa:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801a4ae:	9301      	str	r3, [sp, #4]
 801a4b0:	4b79      	ldr	r3, [pc, #484]	@ (801a698 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801a4b2:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a4b6:	6818      	ldr	r0, [r3, #0]
 801a4b8:	6803      	ldr	r3, [r0, #0]
 801a4ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a4bc:	4798      	blx	r3
 801a4be:	4a77      	ldr	r2, [pc, #476]	@ (801a69c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801a4c0:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801a4c4:	2c00      	cmp	r4, #0
 801a4c6:	8813      	ldrh	r3, [r2, #0]
 801a4c8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801a4cc:	9209      	str	r2, [sp, #36]	@ 0x24
 801a4ce:	fb03 c101 	mla	r1, r3, r1, ip
 801a4d2:	fb06 f303 	mul.w	r3, r6, r3
 801a4d6:	bf18      	it	ne
 801a4d8:	2600      	movne	r6, #0
 801a4da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a4de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a4e2:	4408      	add	r0, r1
 801a4e4:	4403      	add	r3, r0
 801a4e6:	9306      	str	r3, [sp, #24]
 801a4e8:	f105 0304 	add.w	r3, r5, #4
 801a4ec:	9305      	str	r3, [sp, #20]
 801a4ee:	9b01      	ldr	r3, [sp, #4]
 801a4f0:	bf08      	it	eq
 801a4f2:	461e      	moveq	r6, r3
 801a4f4:	2300      	movs	r3, #0
 801a4f6:	b2b6      	uxth	r6, r6
 801a4f8:	9302      	str	r3, [sp, #8]
 801a4fa:	9a06      	ldr	r2, [sp, #24]
 801a4fc:	4290      	cmp	r0, r2
 801a4fe:	f080 80c2 	bcs.w	801a686 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801a502:	b963      	cbnz	r3, 801a51e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801a504:	9b00      	ldr	r3, [sp, #0]
 801a506:	781a      	ldrb	r2, [r3, #0]
 801a508:	0993      	lsrs	r3, r2, #6
 801a50a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a50e:	9202      	str	r2, [sp, #8]
 801a510:	1e5a      	subs	r2, r3, #1
 801a512:	2a02      	cmp	r2, #2
 801a514:	d815      	bhi.n	801a542 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801a516:	9a00      	ldr	r2, [sp, #0]
 801a518:	b29b      	uxth	r3, r3
 801a51a:	3201      	adds	r2, #1
 801a51c:	9200      	str	r2, [sp, #0]
 801a51e:	b1b4      	cbz	r4, 801a54e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801a520:	429c      	cmp	r4, r3
 801a522:	bf91      	iteee	ls
 801a524:	1b1c      	subls	r4, r3, r4
 801a526:	1ae4      	subhi	r4, r4, r3
 801a528:	4635      	movhi	r5, r6
 801a52a:	f04f 0e00 	movhi.w	lr, #0
 801a52e:	bf9b      	ittet	ls
 801a530:	fa1f fe84 	uxthls.w	lr, r4
 801a534:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801a538:	b2a4      	uxthhi	r4, r4
 801a53a:	2400      	movls	r4, #0
 801a53c:	4673      	mov	r3, lr
 801a53e:	462e      	mov	r6, r5
 801a540:	e7db      	b.n	801a4fa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801a542:	9a00      	ldr	r2, [sp, #0]
 801a544:	9b00      	ldr	r3, [sp, #0]
 801a546:	3202      	adds	r2, #2
 801a548:	785b      	ldrb	r3, [r3, #1]
 801a54a:	9200      	str	r2, [sp, #0]
 801a54c:	e7e7      	b.n	801a51e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801a54e:	2204      	movs	r2, #4
 801a550:	9905      	ldr	r1, [sp, #20]
 801a552:	429e      	cmp	r6, r3
 801a554:	4615      	mov	r5, r2
 801a556:	9a02      	ldr	r2, [sp, #8]
 801a558:	bf94      	ite	ls
 801a55a:	eba3 0e06 	subls.w	lr, r3, r6
 801a55e:	46a6      	movhi	lr, r4
 801a560:	fb15 1202 	smlabb	r2, r5, r2, r1
 801a564:	9903      	ldr	r1, [sp, #12]
 801a566:	bf8c      	ite	hi
 801a568:	1af5      	subhi	r5, r6, r3
 801a56a:	fa1f fe8e 	uxthls.w	lr, lr
 801a56e:	f851 c002 	ldr.w	ip, [r1, r2]
 801a572:	bf9a      	itte	ls
 801a574:	4625      	movls	r5, r4
 801a576:	4632      	movls	r2, r6
 801a578:	b2ad      	uxthhi	r5, r5
 801a57a:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801a57e:	bf88      	it	hi
 801a580:	461a      	movhi	r2, r3
 801a582:	b179      	cbz	r1, 801a5a4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801a584:	29ff      	cmp	r1, #255	@ 0xff
 801a586:	fa5f f98c 	uxtb.w	r9, ip
 801a58a:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801a58e:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801a592:	d126      	bne.n	801a5e2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801a594:	9f04      	ldr	r7, [sp, #16]
 801a596:	2fff      	cmp	r7, #255	@ 0xff
 801a598:	d123      	bne.n	801a5e2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801a59a:	4682      	mov	sl, r0
 801a59c:	4611      	mov	r1, r2
 801a59e:	f10a 0a03 	add.w	sl, sl, #3
 801a5a2:	b9a9      	cbnz	r1, 801a5d0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801a5a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a5a8:	429e      	cmp	r6, r3
 801a5aa:	4410      	add	r0, r2
 801a5ac:	d8c6      	bhi.n	801a53c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801a5ae:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801a5b2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801a5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a5b8:	1b64      	subs	r4, r4, r5
 801a5ba:	9a01      	ldr	r2, [sp, #4]
 801a5bc:	881b      	ldrh	r3, [r3, #0]
 801a5be:	b2a4      	uxth	r4, r4
 801a5c0:	1a9b      	subs	r3, r3, r2
 801a5c2:	2c00      	cmp	r4, #0
 801a5c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a5c8:	bf18      	it	ne
 801a5ca:	2500      	movne	r5, #0
 801a5cc:	4418      	add	r0, r3
 801a5ce:	e7b5      	b.n	801a53c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801a5d0:	3901      	subs	r1, #1
 801a5d2:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801a5d6:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801a5da:	f80a cc01 	strb.w	ip, [sl, #-1]
 801a5de:	b289      	uxth	r1, r1
 801a5e0:	e7dd      	b.n	801a59e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801a5e2:	9f04      	ldr	r7, [sp, #16]
 801a5e4:	fb07 fa01 	mul.w	sl, r7, r1
 801a5e8:	f10a 0101 	add.w	r1, sl, #1
 801a5ec:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801a5f0:	1209      	asrs	r1, r1, #8
 801a5f2:	ea6f 0a01 	mvn.w	sl, r1
 801a5f6:	b289      	uxth	r1, r1
 801a5f8:	fb19 f901 	smulbb	r9, r9, r1
 801a5fc:	fa5f fa8a 	uxtb.w	sl, sl
 801a600:	fb18 f801 	smulbb	r8, r8, r1
 801a604:	fb1c f101 	smulbb	r1, ip, r1
 801a608:	fa1f f789 	uxth.w	r7, r9
 801a60c:	4684      	mov	ip, r0
 801a60e:	4691      	mov	r9, r2
 801a610:	9707      	str	r7, [sp, #28]
 801a612:	b289      	uxth	r1, r1
 801a614:	fa1f f788 	uxth.w	r7, r8
 801a618:	9708      	str	r7, [sp, #32]
 801a61a:	f10c 0c03 	add.w	ip, ip, #3
 801a61e:	f1b9 0f00 	cmp.w	r9, #0
 801a622:	d0bf      	beq.n	801a5a4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801a624:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801a628:	f109 39ff 	add.w	r9, r9, #4294967295
 801a62c:	9f07      	ldr	r7, [sp, #28]
 801a62e:	fa1f f989 	uxth.w	r9, r9
 801a632:	fb08 780a 	mla	r8, r8, sl, r7
 801a636:	9f08      	ldr	r7, [sp, #32]
 801a638:	fa1f f888 	uxth.w	r8, r8
 801a63c:	f108 0b01 	add.w	fp, r8, #1
 801a640:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a644:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a648:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801a64c:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801a650:	fb08 780a 	mla	r8, r8, sl, r7
 801a654:	fa1f f888 	uxth.w	r8, r8
 801a658:	f108 0b01 	add.w	fp, r8, #1
 801a65c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a660:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a664:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801a668:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801a66c:	fb08 180a 	mla	r8, r8, sl, r1
 801a670:	fa1f f888 	uxth.w	r8, r8
 801a674:	f108 0b01 	add.w	fp, r8, #1
 801a678:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a67c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a680:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801a684:	e7c9      	b.n	801a61a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801a686:	4b04      	ldr	r3, [pc, #16]	@ (801a698 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801a688:	6818      	ldr	r0, [r3, #0]
 801a68a:	6803      	ldr	r3, [r0, #0]
 801a68c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a68e:	4798      	blx	r3
 801a690:	b00f      	add	sp, #60	@ 0x3c
 801a692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a696:	bf00      	nop
 801a698:	240255cc 	.word	0x240255cc
 801a69c:	240255c6 	.word	0x240255c6

0801a6a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6a4:	b089      	sub	sp, #36	@ 0x24
 801a6a6:	4607      	mov	r7, r0
 801a6a8:	4689      	mov	r9, r1
 801a6aa:	4692      	mov	sl, r2
 801a6ac:	ac08      	add	r4, sp, #32
 801a6ae:	461e      	mov	r6, r3
 801a6b0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801a6b4:	4620      	mov	r0, r4
 801a6b6:	f7fd ff77 	bl	80185a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a6ba:	683b      	ldr	r3, [r7, #0]
 801a6bc:	4605      	mov	r5, r0
 801a6be:	4620      	mov	r0, r4
 801a6c0:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801a6c4:	f7fd feb6 	bl	8018434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a6c8:	4683      	mov	fp, r0
 801a6ca:	4620      	mov	r0, r4
 801a6cc:	f7fd fee6 	bl	801849c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a6d0:	4653      	mov	r3, sl
 801a6d2:	464a      	mov	r2, r9
 801a6d4:	4639      	mov	r1, r7
 801a6d6:	9500      	str	r5, [sp, #0]
 801a6d8:	e9cd b001 	strd	fp, r0, [sp, #4]
 801a6dc:	a806      	add	r0, sp, #24
 801a6de:	47c0      	blx	r8
 801a6e0:	a906      	add	r1, sp, #24
 801a6e2:	4630      	mov	r0, r6
 801a6e4:	f7fd fd8a 	bl	80181fc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801a6e8:	4628      	mov	r0, r5
 801a6ea:	b009      	add	sp, #36	@ 0x24
 801a6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a6f0 <_ZN8touchgfx8LCD24bppD0Ev>:
 801a6f0:	b510      	push	{r4, lr}
 801a6f2:	4604      	mov	r4, r0
 801a6f4:	216c      	movs	r1, #108	@ 0x6c
 801a6f6:	f008 fc60 	bl	8022fba <_ZdlPvj>
 801a6fa:	4620      	mov	r0, r4
 801a6fc:	bd10      	pop	{r4, pc}

0801a6fe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801a6fe:	b510      	push	{r4, lr}
 801a700:	4604      	mov	r4, r0
 801a702:	2104      	movs	r1, #4
 801a704:	f008 fc59 	bl	8022fba <_ZdlPvj>
 801a708:	4620      	mov	r0, r4
 801a70a:	bd10      	pop	{r4, pc}

0801a70c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801a70c:	b510      	push	{r4, lr}
 801a70e:	4604      	mov	r4, r0
 801a710:	2104      	movs	r1, #4
 801a712:	f008 fc52 	bl	8022fba <_ZdlPvj>
 801a716:	4620      	mov	r0, r4
 801a718:	bd10      	pop	{r4, pc}

0801a71a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801a71a:	b510      	push	{r4, lr}
 801a71c:	4604      	mov	r4, r0
 801a71e:	f640 0144 	movw	r1, #2116	@ 0x844
 801a722:	f008 fc4a 	bl	8022fba <_ZdlPvj>
 801a726:	4620      	mov	r0, r4
 801a728:	bd10      	pop	{r4, pc}

0801a72a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 801a72a:	b510      	push	{r4, lr}
 801a72c:	4604      	mov	r4, r0
 801a72e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801a732:	f008 fc42 	bl	8022fba <_ZdlPvj>
 801a736:	4620      	mov	r0, r4
 801a738:	bd10      	pop	{r4, pc}

0801a73a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a73a:	b510      	push	{r4, lr}
 801a73c:	4604      	mov	r4, r0
 801a73e:	2104      	movs	r1, #4
 801a740:	f008 fc3b 	bl	8022fba <_ZdlPvj>
 801a744:	4620      	mov	r0, r4
 801a746:	bd10      	pop	{r4, pc}

0801a748 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801a748:	b510      	push	{r4, lr}
 801a74a:	4604      	mov	r4, r0
 801a74c:	2104      	movs	r1, #4
 801a74e:	f008 fc34 	bl	8022fba <_ZdlPvj>
 801a752:	4620      	mov	r0, r4
 801a754:	bd10      	pop	{r4, pc}

0801a756 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a756:	b510      	push	{r4, lr}
 801a758:	4604      	mov	r4, r0
 801a75a:	2104      	movs	r1, #4
 801a75c:	f008 fc2d 	bl	8022fba <_ZdlPvj>
 801a760:	4620      	mov	r0, r4
 801a762:	bd10      	pop	{r4, pc}

0801a764 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a764:	b510      	push	{r4, lr}
 801a766:	4604      	mov	r4, r0
 801a768:	2104      	movs	r1, #4
 801a76a:	f008 fc26 	bl	8022fba <_ZdlPvj>
 801a76e:	4620      	mov	r0, r4
 801a770:	bd10      	pop	{r4, pc}

0801a772 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a772:	b510      	push	{r4, lr}
 801a774:	4604      	mov	r4, r0
 801a776:	2104      	movs	r1, #4
 801a778:	f008 fc1f 	bl	8022fba <_ZdlPvj>
 801a77c:	4620      	mov	r0, r4
 801a77e:	bd10      	pop	{r4, pc}

0801a780 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a780:	b510      	push	{r4, lr}
 801a782:	4604      	mov	r4, r0
 801a784:	2104      	movs	r1, #4
 801a786:	f008 fc18 	bl	8022fba <_ZdlPvj>
 801a78a:	4620      	mov	r0, r4
 801a78c:	bd10      	pop	{r4, pc}

0801a78e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a78e:	b510      	push	{r4, lr}
 801a790:	4604      	mov	r4, r0
 801a792:	2104      	movs	r1, #4
 801a794:	f008 fc11 	bl	8022fba <_ZdlPvj>
 801a798:	4620      	mov	r0, r4
 801a79a:	bd10      	pop	{r4, pc}

0801a79c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a79c:	b510      	push	{r4, lr}
 801a79e:	4604      	mov	r4, r0
 801a7a0:	2104      	movs	r1, #4
 801a7a2:	f008 fc0a 	bl	8022fba <_ZdlPvj>
 801a7a6:	4620      	mov	r0, r4
 801a7a8:	bd10      	pop	{r4, pc}

0801a7aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a7aa:	b510      	push	{r4, lr}
 801a7ac:	4604      	mov	r4, r0
 801a7ae:	2104      	movs	r1, #4
 801a7b0:	f008 fc03 	bl	8022fba <_ZdlPvj>
 801a7b4:	4620      	mov	r0, r4
 801a7b6:	bd10      	pop	{r4, pc}

0801a7b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801a7b8:	b510      	push	{r4, lr}
 801a7ba:	4604      	mov	r4, r0
 801a7bc:	2104      	movs	r1, #4
 801a7be:	f008 fbfc 	bl	8022fba <_ZdlPvj>
 801a7c2:	4620      	mov	r0, r4
 801a7c4:	bd10      	pop	{r4, pc}

0801a7c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a7c6:	b510      	push	{r4, lr}
 801a7c8:	4604      	mov	r4, r0
 801a7ca:	2104      	movs	r1, #4
 801a7cc:	f008 fbf5 	bl	8022fba <_ZdlPvj>
 801a7d0:	4620      	mov	r0, r4
 801a7d2:	bd10      	pop	{r4, pc}

0801a7d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a7d4:	b510      	push	{r4, lr}
 801a7d6:	4604      	mov	r4, r0
 801a7d8:	2104      	movs	r1, #4
 801a7da:	f008 fbee 	bl	8022fba <_ZdlPvj>
 801a7de:	4620      	mov	r0, r4
 801a7e0:	bd10      	pop	{r4, pc}

0801a7e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a7e2:	b510      	push	{r4, lr}
 801a7e4:	4604      	mov	r4, r0
 801a7e6:	2104      	movs	r1, #4
 801a7e8:	f008 fbe7 	bl	8022fba <_ZdlPvj>
 801a7ec:	4620      	mov	r0, r4
 801a7ee:	bd10      	pop	{r4, pc}

0801a7f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a7f0:	b510      	push	{r4, lr}
 801a7f2:	4604      	mov	r4, r0
 801a7f4:	2104      	movs	r1, #4
 801a7f6:	f008 fbe0 	bl	8022fba <_ZdlPvj>
 801a7fa:	4620      	mov	r0, r4
 801a7fc:	bd10      	pop	{r4, pc}

0801a7fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a7fe:	b510      	push	{r4, lr}
 801a800:	4604      	mov	r4, r0
 801a802:	2104      	movs	r1, #4
 801a804:	f008 fbd9 	bl	8022fba <_ZdlPvj>
 801a808:	4620      	mov	r0, r4
 801a80a:	bd10      	pop	{r4, pc}

0801a80c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a80c:	b510      	push	{r4, lr}
 801a80e:	4604      	mov	r4, r0
 801a810:	2104      	movs	r1, #4
 801a812:	f008 fbd2 	bl	8022fba <_ZdlPvj>
 801a816:	4620      	mov	r0, r4
 801a818:	bd10      	pop	{r4, pc}

0801a81a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801a81a:	b510      	push	{r4, lr}
 801a81c:	4604      	mov	r4, r0
 801a81e:	2104      	movs	r1, #4
 801a820:	f008 fbcb 	bl	8022fba <_ZdlPvj>
 801a824:	4620      	mov	r0, r4
 801a826:	bd10      	pop	{r4, pc}

0801a828 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801a828:	b510      	push	{r4, lr}
 801a82a:	4604      	mov	r4, r0
 801a82c:	2104      	movs	r1, #4
 801a82e:	f008 fbc4 	bl	8022fba <_ZdlPvj>
 801a832:	4620      	mov	r0, r4
 801a834:	bd10      	pop	{r4, pc}

0801a836 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801a836:	b510      	push	{r4, lr}
 801a838:	4604      	mov	r4, r0
 801a83a:	2104      	movs	r1, #4
 801a83c:	f008 fbbd 	bl	8022fba <_ZdlPvj>
 801a840:	4620      	mov	r0, r4
 801a842:	bd10      	pop	{r4, pc}

0801a844 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801a844:	b510      	push	{r4, lr}
 801a846:	4604      	mov	r4, r0
 801a848:	2104      	movs	r1, #4
 801a84a:	f008 fbb6 	bl	8022fba <_ZdlPvj>
 801a84e:	4620      	mov	r0, r4
 801a850:	bd10      	pop	{r4, pc}
	...

0801a854 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801a854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a858:	b08f      	sub	sp, #60	@ 0x3c
 801a85a:	461c      	mov	r4, r3
 801a85c:	460e      	mov	r6, r1
 801a85e:	9206      	str	r2, [sp, #24]
 801a860:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801a864:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a866:	9202      	str	r2, [sp, #8]
 801a868:	2a00      	cmp	r2, #0
 801a86a:	f000 8128 	beq.w	801aabe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801a86e:	6820      	ldr	r0, [r4, #0]
 801a870:	aa0a      	add	r2, sp, #40	@ 0x28
 801a872:	6861      	ldr	r1, [r4, #4]
 801a874:	c203      	stmia	r2!, {r0, r1}
 801a876:	6818      	ldr	r0, [r3, #0]
 801a878:	aa0c      	add	r2, sp, #48	@ 0x30
 801a87a:	6859      	ldr	r1, [r3, #4]
 801a87c:	c203      	stmia	r2!, {r0, r1}
 801a87e:	a80a      	add	r0, sp, #40	@ 0x28
 801a880:	f7f9 fe26 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a884:	4621      	mov	r1, r4
 801a886:	a80c      	add	r0, sp, #48	@ 0x30
 801a888:	f7f9 fe4a 	bl	8014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a88c:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801a890:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801a894:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801a898:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801a89c:	bfdb      	ittet	le
 801a89e:	b2bb      	uxthle	r3, r7
 801a8a0:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801a8a4:	2301      	movgt	r3, #1
 801a8a6:	fb92 f3f3 	sdivle	r3, r2, r3
 801a8aa:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a8ae:	441d      	add	r5, r3
 801a8b0:	fb92 f1f3 	sdiv	r1, r2, r3
 801a8b4:	fa1f fc81 	uxth.w	ip, r1
 801a8b8:	3d01      	subs	r5, #1
 801a8ba:	fb0c 2413 	mls	r4, ip, r3, r2
 801a8be:	4661      	mov	r1, ip
 801a8c0:	fb14 f407 	smulbb	r4, r4, r7
 801a8c4:	4404      	add	r4, r0
 801a8c6:	fb95 f5f3 	sdiv	r5, r5, r3
 801a8ca:	b2a4      	uxth	r4, r4
 801a8cc:	b121      	cbz	r1, 801a8d8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801a8ce:	9b06      	ldr	r3, [sp, #24]
 801a8d0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a8d4:	ba1b      	rev	r3, r3
 801a8d6:	441e      	add	r6, r3
 801a8d8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801a8dc:	b2ad      	uxth	r5, r5
 801a8de:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801a8e2:	4418      	add	r0, r3
 801a8e4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801a8e8:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801a8ec:	00ad      	lsls	r5, r5, #2
 801a8ee:	441a      	add	r2, r3
 801a8f0:	4b74      	ldr	r3, [pc, #464]	@ (801aac4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801a8f2:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801a8f6:	6818      	ldr	r0, [r3, #0]
 801a8f8:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a8fc:	6803      	ldr	r3, [r0, #0]
 801a8fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a900:	4798      	blx	r3
 801a902:	4a71      	ldr	r2, [pc, #452]	@ (801aac8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801a904:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801a908:	2c00      	cmp	r4, #0
 801a90a:	8813      	ldrh	r3, [r2, #0]
 801a90c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801a910:	9209      	str	r2, [sp, #36]	@ 0x24
 801a912:	fb03 c101 	mla	r1, r3, r1, ip
 801a916:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a91a:	fb03 f307 	mul.w	r3, r3, r7
 801a91e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a922:	9204      	str	r2, [sp, #16]
 801a924:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a928:	9a02      	ldr	r2, [sp, #8]
 801a92a:	4408      	add	r0, r1
 801a92c:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801a930:	4403      	add	r3, r0
 801a932:	b292      	uxth	r2, r2
 801a934:	9307      	str	r3, [sp, #28]
 801a936:	f105 0304 	add.w	r3, r5, #4
 801a93a:	bf0c      	ite	eq
 801a93c:	4645      	moveq	r5, r8
 801a93e:	2500      	movne	r5, #0
 801a940:	9308      	str	r3, [sp, #32]
 801a942:	2300      	movs	r3, #0
 801a944:	b2ad      	uxth	r5, r5
 801a946:	9205      	str	r2, [sp, #20]
 801a948:	9303      	str	r3, [sp, #12]
 801a94a:	9a07      	ldr	r2, [sp, #28]
 801a94c:	4282      	cmp	r2, r0
 801a94e:	f240 80b1 	bls.w	801aab4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801a952:	b95b      	cbnz	r3, 801a96c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801a954:	7832      	ldrb	r2, [r6, #0]
 801a956:	0993      	lsrs	r3, r2, #6
 801a958:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a95c:	9203      	str	r2, [sp, #12]
 801a95e:	1e5a      	subs	r2, r3, #1
 801a960:	2a02      	cmp	r2, #2
 801a962:	bf8d      	iteet	hi
 801a964:	7873      	ldrbhi	r3, [r6, #1]
 801a966:	3601      	addls	r6, #1
 801a968:	b29b      	uxthls	r3, r3
 801a96a:	3602      	addhi	r6, #2
 801a96c:	b184      	cbz	r4, 801a990 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801a96e:	429c      	cmp	r4, r3
 801a970:	bf91      	iteee	ls
 801a972:	1b1c      	subls	r4, r3, r4
 801a974:	1ae4      	subhi	r4, r4, r3
 801a976:	4629      	movhi	r1, r5
 801a978:	f04f 0e00 	movhi.w	lr, #0
 801a97c:	bf9b      	ittet	ls
 801a97e:	fa1f fe84 	uxthls.w	lr, r4
 801a982:	2400      	movls	r4, #0
 801a984:	b2a4      	uxthhi	r4, r4
 801a986:	fa1f f188 	uxthls.w	r1, r8
 801a98a:	4673      	mov	r3, lr
 801a98c:	460d      	mov	r5, r1
 801a98e:	e7dc      	b.n	801a94a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801a990:	2203      	movs	r2, #3
 801a992:	9908      	ldr	r1, [sp, #32]
 801a994:	42ab      	cmp	r3, r5
 801a996:	4617      	mov	r7, r2
 801a998:	9a03      	ldr	r2, [sp, #12]
 801a99a:	bf24      	itt	cs
 801a99c:	eba3 0e05 	subcs.w	lr, r3, r5
 801a9a0:	9501      	strcs	r5, [sp, #4]
 801a9a2:	fb17 1702 	smlabb	r7, r7, r2, r1
 801a9a6:	9a06      	ldr	r2, [sp, #24]
 801a9a8:	bf34      	ite	cc
 801a9aa:	1ae9      	subcc	r1, r5, r3
 801a9ac:	fa1f fe8e 	uxthcs.w	lr, lr
 801a9b0:	4417      	add	r7, r2
 801a9b2:	9a02      	ldr	r2, [sp, #8]
 801a9b4:	bf2f      	iteee	cs
 801a9b6:	4621      	movcs	r1, r4
 801a9b8:	b289      	uxthcc	r1, r1
 801a9ba:	9301      	strcc	r3, [sp, #4]
 801a9bc:	46a6      	movcc	lr, r4
 801a9be:	2aff      	cmp	r2, #255	@ 0xff
 801a9c0:	d11e      	bne.n	801aa00 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801a9c2:	4681      	mov	r9, r0
 801a9c4:	f8dd c004 	ldr.w	ip, [sp, #4]
 801a9c8:	f109 0903 	add.w	r9, r9, #3
 801a9cc:	f1bc 0f00 	cmp.w	ip, #0
 801a9d0:	d15f      	bne.n	801aa92 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801a9d2:	9a01      	ldr	r2, [sp, #4]
 801a9d4:	42ab      	cmp	r3, r5
 801a9d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a9da:	4410      	add	r0, r2
 801a9dc:	d3d5      	bcc.n	801a98a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801a9de:	fa1f f188 	uxth.w	r1, r8
 801a9e2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801a9e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a9e8:	1a64      	subs	r4, r4, r1
 801a9ea:	881b      	ldrh	r3, [r3, #0]
 801a9ec:	b2a4      	uxth	r4, r4
 801a9ee:	eba3 0308 	sub.w	r3, r3, r8
 801a9f2:	2c00      	cmp	r4, #0
 801a9f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a9f8:	bf18      	it	ne
 801a9fa:	2100      	movne	r1, #0
 801a9fc:	4418      	add	r0, r3
 801a9fe:	e7c4      	b.n	801a98a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801aa00:	4684      	mov	ip, r0
 801aa02:	f8dd a004 	ldr.w	sl, [sp, #4]
 801aa06:	f10c 0c03 	add.w	ip, ip, #3
 801aa0a:	f1ba 0f00 	cmp.w	sl, #0
 801aa0e:	d0e0      	beq.n	801a9d2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801aa10:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801aa14:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aa18:	9a05      	ldr	r2, [sp, #20]
 801aa1a:	f897 9000 	ldrb.w	r9, [r7]
 801aa1e:	fa1f fa8a 	uxth.w	sl, sl
 801aa22:	fb1b fb02 	smulbb	fp, fp, r2
 801aa26:	9a04      	ldr	r2, [sp, #16]
 801aa28:	fb09 b902 	mla	r9, r9, r2, fp
 801aa2c:	9a05      	ldr	r2, [sp, #20]
 801aa2e:	fa1f f989 	uxth.w	r9, r9
 801aa32:	f109 0b01 	add.w	fp, r9, #1
 801aa36:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801aa3a:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801aa3e:	fb1b fb02 	smulbb	fp, fp, r2
 801aa42:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aa46:	9a04      	ldr	r2, [sp, #16]
 801aa48:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801aa4c:	f897 9001 	ldrb.w	r9, [r7, #1]
 801aa50:	fb09 b902 	mla	r9, r9, r2, fp
 801aa54:	9a05      	ldr	r2, [sp, #20]
 801aa56:	fa1f f989 	uxth.w	r9, r9
 801aa5a:	f109 0b01 	add.w	fp, r9, #1
 801aa5e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801aa62:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801aa66:	fb1b fb02 	smulbb	fp, fp, r2
 801aa6a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aa6e:	9a04      	ldr	r2, [sp, #16]
 801aa70:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801aa74:	f897 9002 	ldrb.w	r9, [r7, #2]
 801aa78:	fb09 b902 	mla	r9, r9, r2, fp
 801aa7c:	fa1f f989 	uxth.w	r9, r9
 801aa80:	f109 0b01 	add.w	fp, r9, #1
 801aa84:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801aa88:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aa8c:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801aa90:	e7b9      	b.n	801aa06 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801aa92:	f897 a000 	ldrb.w	sl, [r7]
 801aa96:	f10c 3cff 	add.w	ip, ip, #4294967295
 801aa9a:	f809 ac03 	strb.w	sl, [r9, #-3]
 801aa9e:	fa1f fc8c 	uxth.w	ip, ip
 801aaa2:	f897 a001 	ldrb.w	sl, [r7, #1]
 801aaa6:	f809 ac02 	strb.w	sl, [r9, #-2]
 801aaaa:	f897 a002 	ldrb.w	sl, [r7, #2]
 801aaae:	f809 ac01 	strb.w	sl, [r9, #-1]
 801aab2:	e789      	b.n	801a9c8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801aab4:	4b03      	ldr	r3, [pc, #12]	@ (801aac4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801aab6:	6818      	ldr	r0, [r3, #0]
 801aab8:	6803      	ldr	r3, [r0, #0]
 801aaba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aabc:	4798      	blx	r3
 801aabe:	b00f      	add	sp, #60	@ 0x3c
 801aac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aac4:	240255cc 	.word	0x240255cc
 801aac8:	240255c6 	.word	0x240255c6

0801aacc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801aacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aad0:	b09b      	sub	sp, #108	@ 0x6c
 801aad2:	461d      	mov	r5, r3
 801aad4:	4604      	mov	r4, r0
 801aad6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801aad8:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801aadc:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801aae0:	9208      	str	r2, [sp, #32]
 801aae2:	2a00      	cmp	r2, #0
 801aae4:	f000 81f3 	beq.w	801aece <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801aae8:	6828      	ldr	r0, [r5, #0]
 801aaea:	aa16      	add	r2, sp, #88	@ 0x58
 801aaec:	6869      	ldr	r1, [r5, #4]
 801aaee:	c203      	stmia	r2!, {r0, r1}
 801aaf0:	6818      	ldr	r0, [r3, #0]
 801aaf2:	aa18      	add	r2, sp, #96	@ 0x60
 801aaf4:	6859      	ldr	r1, [r3, #4]
 801aaf6:	c203      	stmia	r2!, {r0, r1}
 801aaf8:	a816      	add	r0, sp, #88	@ 0x58
 801aafa:	f7f9 fce9 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aafe:	4629      	mov	r1, r5
 801ab00:	a818      	add	r0, sp, #96	@ 0x60
 801ab02:	f7f9 fd0d 	bl	8014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ab06:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801ab0a:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801ab0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ab12:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801ab16:	bfdb      	ittet	le
 801ab18:	b29a      	uxthle	r2, r3
 801ab1a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801ab1e:	f04f 0a01 	movgt.w	sl, #1
 801ab22:	fb91 faf2 	sdivle	sl, r1, r2
 801ab26:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801ab2a:	4456      	add	r6, sl
 801ab2c:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801ab30:	3e01      	subs	r6, #1
 801ab32:	fb92 f0fa 	sdiv	r0, r2, sl
 801ab36:	b280      	uxth	r0, r0
 801ab38:	fb00 281a 	mls	r8, r0, sl, r2
 801ab3c:	900e      	str	r0, [sp, #56]	@ 0x38
 801ab3e:	fb18 f803 	smulbb	r8, r8, r3
 801ab42:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801ab46:	4488      	add	r8, r1
 801ab48:	4419      	add	r1, r3
 801ab4a:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801ab4e:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801ab52:	fa1f f888 	uxth.w	r8, r8
 801ab56:	441a      	add	r2, r3
 801ab58:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801ab5c:	9303      	str	r3, [sp, #12]
 801ab5e:	4b9c      	ldr	r3, [pc, #624]	@ (801add0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801ab60:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801ab64:	6818      	ldr	r0, [r3, #0]
 801ab66:	6803      	ldr	r3, [r0, #0]
 801ab68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab6a:	4798      	blx	r3
 801ab6c:	4b99      	ldr	r3, [pc, #612]	@ (801add4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801ab6e:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801ab72:	f1b8 0f00 	cmp.w	r8, #0
 801ab76:	881a      	ldrh	r2, [r3, #0]
 801ab78:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801ab7c:	fb02 f505 	mul.w	r5, r2, r5
 801ab80:	fb02 7101 	mla	r1, r2, r1, r7
 801ab84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ab88:	9314      	str	r3, [sp, #80]	@ 0x50
 801ab8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ab8e:	9b08      	ldr	r3, [sp, #32]
 801ab90:	fb96 f6fa 	sdiv	r6, r6, sl
 801ab94:	4408      	add	r0, r1
 801ab96:	f106 0601 	add.w	r6, r6, #1
 801ab9a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801ab9e:	f04f 0100 	mov.w	r1, #0
 801aba2:	eb00 0205 	add.w	r2, r0, r5
 801aba6:	b2b6      	uxth	r6, r6
 801aba8:	b29b      	uxth	r3, r3
 801abaa:	910b      	str	r1, [sp, #44]	@ 0x2c
 801abac:	9209      	str	r2, [sp, #36]	@ 0x24
 801abae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801abb0:	930d      	str	r3, [sp, #52]	@ 0x34
 801abb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801abb6:	4b88      	ldr	r3, [pc, #544]	@ (801add8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801abb8:	f106 0204 	add.w	r2, r6, #4
 801abbc:	eba3 0304 	sub.w	r3, r3, r4
 801abc0:	9205      	str	r2, [sp, #20]
 801abc2:	9a03      	ldr	r2, [sp, #12]
 801abc4:	bf18      	it	ne
 801abc6:	2200      	movne	r2, #0
 801abc8:	9315      	str	r3, [sp, #84]	@ 0x54
 801abca:	b292      	uxth	r2, r2
 801abcc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801abce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801abd0:	fa11 f383 	uxtah	r3, r1, r3
 801abd4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801abd6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801abda:	3304      	adds	r3, #4
 801abdc:	9306      	str	r3, [sp, #24]
 801abde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801abe0:	4283      	cmp	r3, r0
 801abe2:	f240 816f 	bls.w	801aec4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801abe6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801abea:	f04f 0900 	mov.w	r9, #0
 801abee:	9d06      	ldr	r5, [sp, #24]
 801abf0:	fbb8 f3f3 	udiv	r3, r8, r3
 801abf4:	ebaa 0303 	sub.w	r3, sl, r3
 801abf8:	782d      	ldrb	r5, [r5, #0]
 801abfa:	b29b      	uxth	r3, r3
 801abfc:	950f      	str	r5, [sp, #60]	@ 0x3c
 801abfe:	3501      	adds	r5, #1
 801ac00:	9312      	str	r3, [sp, #72]	@ 0x48
 801ac02:	9b06      	ldr	r3, [sp, #24]
 801ac04:	9504      	str	r5, [sp, #16]
 801ac06:	7859      	ldrb	r1, [r3, #1]
 801ac08:	789b      	ldrb	r3, [r3, #2]
 801ac0a:	021b      	lsls	r3, r3, #8
 801ac0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801ac10:	9906      	ldr	r1, [sp, #24]
 801ac12:	78c9      	ldrb	r1, [r1, #3]
 801ac14:	430b      	orrs	r3, r1
 801ac16:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ac18:	4419      	add	r1, r3
 801ac1a:	1c4d      	adds	r5, r1, #1
 801ac1c:	7849      	ldrb	r1, [r1, #1]
 801ac1e:	9502      	str	r5, [sp, #8]
 801ac20:	0209      	lsls	r1, r1, #8
 801ac22:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801ac24:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801ac28:	5ceb      	ldrb	r3, [r5, r3]
 801ac2a:	4319      	orrs	r1, r3
 801ac2c:	b28b      	uxth	r3, r1
 801ac2e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801ac32:	930a      	str	r3, [sp, #40]	@ 0x28
 801ac34:	2300      	movs	r3, #0
 801ac36:	9307      	str	r3, [sp, #28]
 801ac38:	2301      	movs	r3, #1
 801ac3a:	e9cd 3300 	strd	r3, r3, [sp]
 801ac3e:	469c      	mov	ip, r3
 801ac40:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ac44:	930c      	str	r3, [sp, #48]	@ 0x30
 801ac46:	f1b8 0f00 	cmp.w	r8, #0
 801ac4a:	f000 8082 	beq.w	801ad52 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801ac4e:	45c4      	cmp	ip, r8
 801ac50:	d270      	bcs.n	801ad34 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801ac52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac54:	eba8 080c 	sub.w	r8, r8, ip
 801ac58:	4611      	mov	r1, r2
 801ac5a:	4283      	cmp	r3, r0
 801ac5c:	fa1f f888 	uxth.w	r8, r8
 801ac60:	d802      	bhi.n	801ac68 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801ac62:	e074      	b.n	801ad4e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	d15f      	bne.n	801ad28 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801ac68:	9b02      	ldr	r3, [sp, #8]
 801ac6a:	9a01      	ldr	r2, [sp, #4]
 801ac6c:	785b      	ldrb	r3, [r3, #1]
 801ac6e:	f1c2 0207 	rsb	r2, r2, #7
 801ac72:	9d01      	ldr	r5, [sp, #4]
 801ac74:	4093      	lsls	r3, r2
 801ac76:	005b      	lsls	r3, r3, #1
 801ac78:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801ac7c:	9b02      	ldr	r3, [sp, #8]
 801ac7e:	781b      	ldrb	r3, [r3, #0]
 801ac80:	412b      	asrs	r3, r5
 801ac82:	b2db      	uxtb	r3, r3
 801ac84:	4313      	orrs	r3, r2
 801ac86:	462a      	mov	r2, r5
 801ac88:	3201      	adds	r2, #1
 801ac8a:	b29e      	uxth	r6, r3
 801ac8c:	b2d2      	uxtb	r2, r2
 801ac8e:	2a08      	cmp	r2, #8
 801ac90:	9201      	str	r2, [sp, #4]
 801ac92:	9a02      	ldr	r2, [sp, #8]
 801ac94:	bf09      	itett	eq
 801ac96:	3202      	addeq	r2, #2
 801ac98:	3201      	addne	r2, #1
 801ac9a:	9202      	streq	r2, [sp, #8]
 801ac9c:	2200      	moveq	r2, #0
 801ac9e:	bf14      	ite	ne
 801aca0:	9202      	strne	r2, [sp, #8]
 801aca2:	9201      	streq	r2, [sp, #4]
 801aca4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801aca6:	42b2      	cmp	r2, r6
 801aca8:	d309      	bcc.n	801acbe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801acaa:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801acae:	2301      	movs	r3, #1
 801acb0:	9a04      	ldr	r2, [sp, #16]
 801acb2:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801acb6:	d30e      	bcc.n	801acd6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801acb8:	9300      	str	r3, [sp, #0]
 801acba:	2500      	movs	r5, #0
 801acbc:	e035      	b.n	801ad2a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801acbe:	9b04      	ldr	r3, [sp, #16]
 801acc0:	429e      	cmp	r6, r3
 801acc2:	d318      	bcc.n	801acf6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801acc4:	9b00      	ldr	r3, [sp, #0]
 801acc6:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801acca:	18e3      	adds	r3, r4, r3
 801accc:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801acd0:	9b00      	ldr	r3, [sp, #0]
 801acd2:	3301      	adds	r3, #1
 801acd4:	b29b      	uxth	r3, r3
 801acd6:	9a04      	ldr	r2, [sp, #16]
 801acd8:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801acdc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ace0:	9f00      	ldr	r7, [sp, #0]
 801ace2:	7115      	strb	r5, [r2, #4]
 801ace4:	3701      	adds	r7, #1
 801ace6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801ace8:	7157      	strb	r7, [r2, #5]
 801acea:	80d5      	strh	r5, [r2, #6]
 801acec:	9a04      	ldr	r2, [sp, #16]
 801acee:	3201      	adds	r2, #1
 801acf0:	b292      	uxth	r2, r2
 801acf2:	9204      	str	r2, [sp, #16]
 801acf4:	e7e0      	b.n	801acb8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801acf6:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801acfa:	4632      	mov	r2, r6
 801acfc:	795b      	ldrb	r3, [r3, #5]
 801acfe:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801ad02:	4425      	add	r5, r4
 801ad04:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801ad06:	eb07 0c05 	add.w	ip, r7, r5
 801ad0a:	f1bc 0f00 	cmp.w	ip, #0
 801ad0e:	dd07      	ble.n	801ad20 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801ad10:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ad14:	f892 c004 	ldrb.w	ip, [r2, #4]
 801ad18:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801ad1c:	88d2      	ldrh	r2, [r2, #6]
 801ad1e:	e7f1      	b.n	801ad04 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801ad20:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801ad24:	b29b      	uxth	r3, r3
 801ad26:	e7c3      	b.n	801acb0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801ad28:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ad2a:	460a      	mov	r2, r1
 801ad2c:	960a      	str	r6, [sp, #40]	@ 0x28
 801ad2e:	46a9      	mov	r9, r5
 801ad30:	469c      	mov	ip, r3
 801ad32:	e788      	b.n	801ac46 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801ad34:	ebac 0308 	sub.w	r3, ip, r8
 801ad38:	eb09 0508 	add.w	r5, r9, r8
 801ad3c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801ad40:	b29b      	uxth	r3, r3
 801ad42:	b2ad      	uxth	r5, r5
 801ad44:	f04f 0800 	mov.w	r8, #0
 801ad48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ad4a:	4282      	cmp	r2, r0
 801ad4c:	d88a      	bhi.n	801ac64 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801ad4e:	460a      	mov	r2, r1
 801ad50:	e745      	b.n	801abde <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801ad52:	4594      	cmp	ip, r2
 801ad54:	9d08      	ldr	r5, [sp, #32]
 801ad56:	4686      	mov	lr, r0
 801ad58:	bf27      	ittee	cs
 801ad5a:	ebac 0302 	subcs.w	r3, ip, r2
 801ad5e:	4616      	movcs	r6, r2
 801ad60:	eba2 010c 	subcc.w	r1, r2, ip
 801ad64:	4666      	movcc	r6, ip
 801ad66:	bf27      	ittee	cs
 801ad68:	b29b      	uxthcs	r3, r3
 801ad6a:	4641      	movcs	r1, r8
 801ad6c:	b289      	uxthcc	r1, r1
 801ad6e:	4643      	movcc	r3, r8
 801ad70:	2dff      	cmp	r5, #255	@ 0xff
 801ad72:	eb09 0506 	add.w	r5, r9, r6
 801ad76:	b2ad      	uxth	r5, r5
 801ad78:	d130      	bne.n	801addc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801ad7a:	45a9      	cmp	r9, r5
 801ad7c:	f10e 0e03 	add.w	lr, lr, #3
 801ad80:	d17a      	bne.n	801ae78 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801ad82:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ad86:	4594      	cmp	ip, r2
 801ad88:	4430      	add	r0, r6
 801ad8a:	d3db      	bcc.n	801ad44 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801ad8c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ad8e:	9903      	ldr	r1, [sp, #12]
 801ad90:	8812      	ldrh	r2, [r2, #0]
 801ad92:	1a52      	subs	r2, r2, r1
 801ad94:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ad96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ad9a:	4410      	add	r0, r2
 801ad9c:	9a07      	ldr	r2, [sp, #28]
 801ad9e:	3201      	adds	r2, #1
 801ada0:	428a      	cmp	r2, r1
 801ada2:	9207      	str	r2, [sp, #28]
 801ada4:	f040 8081 	bne.w	801aeaa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801ada8:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801adac:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801adb0:	9b03      	ldr	r3, [sp, #12]
 801adb2:	eba8 080c 	sub.w	r8, r8, ip
 801adb6:	fa1f f888 	uxth.w	r8, r8
 801adba:	f1b8 0f00 	cmp.w	r8, #0
 801adbe:	bf08      	it	eq
 801adc0:	461a      	moveq	r2, r3
 801adc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801adc4:	bf18      	it	ne
 801adc6:	2200      	movne	r2, #0
 801adc8:	3301      	adds	r3, #1
 801adca:	b292      	uxth	r2, r2
 801adcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801adce:	e6fd      	b.n	801abcc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801add0:	240255cc 	.word	0x240255cc
 801add4:	240255c6 	.word	0x240255c6
 801add8:	fffff7fb 	.word	0xfffff7fb
 801addc:	45a9      	cmp	r9, r5
 801adde:	f10e 0e03 	add.w	lr, lr, #3
 801ade2:	d0ce      	beq.n	801ad82 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801ade4:	f109 0701 	add.w	r7, r9, #1
 801ade8:	44a1      	add	r9, r4
 801adea:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801adee:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801adf2:	9713      	str	r7, [sp, #76]	@ 0x4c
 801adf4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801adf8:	9f05      	ldr	r7, [sp, #20]
 801adfa:	eb07 0908 	add.w	r9, r7, r8
 801adfe:	f817 8008 	ldrb.w	r8, [r7, r8]
 801ae02:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801ae04:	fb1b fb07 	smulbb	fp, fp, r7
 801ae08:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ae0a:	fb08 b807 	mla	r8, r8, r7, fp
 801ae0e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801ae10:	fa1f f888 	uxth.w	r8, r8
 801ae14:	f108 0b01 	add.w	fp, r8, #1
 801ae18:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ae1c:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801ae20:	fb1b fb07 	smulbb	fp, fp, r7
 801ae24:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ae28:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ae2a:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801ae2e:	f899 8001 	ldrb.w	r8, [r9, #1]
 801ae32:	fb08 b807 	mla	r8, r8, r7, fp
 801ae36:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801ae38:	fa1f f888 	uxth.w	r8, r8
 801ae3c:	f108 0b01 	add.w	fp, r8, #1
 801ae40:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ae44:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ae48:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801ae4c:	f899 8002 	ldrb.w	r8, [r9, #2]
 801ae50:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801ae54:	fb19 f907 	smulbb	r9, r9, r7
 801ae58:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ae5a:	fb08 9807 	mla	r8, r8, r7, r9
 801ae5e:	fa1f f888 	uxth.w	r8, r8
 801ae62:	f108 0901 	add.w	r9, r8, #1
 801ae66:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801ae6a:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801ae6e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ae72:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801ae76:	e7b1      	b.n	801addc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801ae78:	f109 0b01 	add.w	fp, r9, #1
 801ae7c:	44a1      	add	r9, r4
 801ae7e:	9f05      	ldr	r7, [sp, #20]
 801ae80:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801ae84:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ae88:	eb07 0908 	add.w	r9, r7, r8
 801ae8c:	f817 8008 	ldrb.w	r8, [r7, r8]
 801ae90:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801ae94:	f899 8001 	ldrb.w	r8, [r9, #1]
 801ae98:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801ae9c:	f899 8002 	ldrb.w	r8, [r9, #2]
 801aea0:	fa1f f98b 	uxth.w	r9, fp
 801aea4:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801aea8:	e767      	b.n	801ad7a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801aeaa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801aeae:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801aeb2:	eba8 0801 	sub.w	r8, r8, r1
 801aeb6:	fa1f f888 	uxth.w	r8, r8
 801aeba:	f1b8 0f00 	cmp.w	r8, #0
 801aebe:	bf18      	it	ne
 801aec0:	2100      	movne	r1, #0
 801aec2:	e741      	b.n	801ad48 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801aec4:	4b03      	ldr	r3, [pc, #12]	@ (801aed4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801aec6:	6818      	ldr	r0, [r3, #0]
 801aec8:	6803      	ldr	r3, [r0, #0]
 801aeca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aecc:	4798      	blx	r3
 801aece:	b01b      	add	sp, #108	@ 0x6c
 801aed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aed4:	240255cc 	.word	0x240255cc

0801aed8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aedc:	b09d      	sub	sp, #116	@ 0x74
 801aede:	461d      	mov	r5, r3
 801aee0:	4604      	mov	r4, r0
 801aee2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801aee4:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801aee8:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801aeec:	920c      	str	r2, [sp, #48]	@ 0x30
 801aeee:	2a00      	cmp	r2, #0
 801aef0:	f000 81de 	beq.w	801b2b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801aef4:	6828      	ldr	r0, [r5, #0]
 801aef6:	aa18      	add	r2, sp, #96	@ 0x60
 801aef8:	6869      	ldr	r1, [r5, #4]
 801aefa:	c203      	stmia	r2!, {r0, r1}
 801aefc:	6818      	ldr	r0, [r3, #0]
 801aefe:	aa1a      	add	r2, sp, #104	@ 0x68
 801af00:	6859      	ldr	r1, [r3, #4]
 801af02:	c203      	stmia	r2!, {r0, r1}
 801af04:	a818      	add	r0, sp, #96	@ 0x60
 801af06:	f7f9 fae3 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801af0a:	4629      	mov	r1, r5
 801af0c:	a81a      	add	r0, sp, #104	@ 0x68
 801af0e:	f7f9 fb07 	bl	8014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801af12:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801af16:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801af1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801af1e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801af22:	bfdb      	ittet	le
 801af24:	b29a      	uxthle	r2, r3
 801af26:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801af2a:	2201      	movgt	r2, #1
 801af2c:	fb91 f2f2 	sdivle	r2, r1, r2
 801af30:	9201      	str	r2, [sp, #4]
 801af32:	9801      	ldr	r0, [sp, #4]
 801af34:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801af38:	9901      	ldr	r1, [sp, #4]
 801af3a:	fb92 f0f0 	sdiv	r0, r2, r0
 801af3e:	b280      	uxth	r0, r0
 801af40:	440f      	add	r7, r1
 801af42:	900d      	str	r0, [sp, #52]	@ 0x34
 801af44:	3f01      	subs	r7, #1
 801af46:	9801      	ldr	r0, [sp, #4]
 801af48:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801af4a:	fb05 2510 	mls	r5, r5, r0, r2
 801af4e:	fb97 f7f1 	sdiv	r7, r7, r1
 801af52:	fb15 f503 	smulbb	r5, r5, r3
 801af56:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801af5a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801af5e:	3701      	adds	r7, #1
 801af60:	440d      	add	r5, r1
 801af62:	4419      	add	r1, r3
 801af64:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801af68:	b2bf      	uxth	r7, r7
 801af6a:	441a      	add	r2, r3
 801af6c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801af70:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801af74:	00bf      	lsls	r7, r7, #2
 801af76:	9304      	str	r3, [sp, #16]
 801af78:	b2ad      	uxth	r5, r5
 801af7a:	4bb0      	ldr	r3, [pc, #704]	@ (801b23c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801af7c:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801af80:	6818      	ldr	r0, [r3, #0]
 801af82:	6803      	ldr	r3, [r0, #0]
 801af84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af86:	4798      	blx	r3
 801af88:	4bad      	ldr	r3, [pc, #692]	@ (801b240 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801af8a:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801af8e:	2d00      	cmp	r5, #0
 801af90:	881a      	ldrh	r2, [r3, #0]
 801af92:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801af96:	fb02 f606 	mul.w	r6, r2, r6
 801af9a:	fb02 c101 	mla	r1, r2, r1, ip
 801af9e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801afa2:	9316      	str	r3, [sp, #88]	@ 0x58
 801afa4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801afa8:	4ba6      	ldr	r3, [pc, #664]	@ (801b244 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801afaa:	eb00 0801 	add.w	r8, r0, r1
 801afae:	bf18      	it	ne
 801afb0:	2100      	movne	r1, #0
 801afb2:	eba3 0304 	sub.w	r3, r3, r4
 801afb6:	eb08 0206 	add.w	r2, r8, r6
 801afba:	9317      	str	r3, [sp, #92]	@ 0x5c
 801afbc:	9208      	str	r2, [sp, #32]
 801afbe:	f107 0204 	add.w	r2, r7, #4
 801afc2:	9211      	str	r2, [sp, #68]	@ 0x44
 801afc4:	9a04      	ldr	r2, [sp, #16]
 801afc6:	bf08      	it	eq
 801afc8:	4611      	moveq	r1, r2
 801afca:	2200      	movs	r2, #0
 801afcc:	b289      	uxth	r1, r1
 801afce:	920b      	str	r2, [sp, #44]	@ 0x2c
 801afd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801afd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801afd4:	fa12 f383 	uxtah	r3, r2, r3
 801afd8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801afda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801afde:	3304      	adds	r3, #4
 801afe0:	9306      	str	r3, [sp, #24]
 801afe2:	9b08      	ldr	r3, [sp, #32]
 801afe4:	4543      	cmp	r3, r8
 801afe6:	f240 815e 	bls.w	801b2a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801afea:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801afee:	f04f 0b01 	mov.w	fp, #1
 801aff2:	9a01      	ldr	r2, [sp, #4]
 801aff4:	9806      	ldr	r0, [sp, #24]
 801aff6:	465e      	mov	r6, fp
 801aff8:	f8cd b008 	str.w	fp, [sp, #8]
 801affc:	7800      	ldrb	r0, [r0, #0]
 801affe:	fbb5 f3f3 	udiv	r3, r5, r3
 801b002:	1ad3      	subs	r3, r2, r3
 801b004:	900e      	str	r0, [sp, #56]	@ 0x38
 801b006:	3001      	adds	r0, #1
 801b008:	b29b      	uxth	r3, r3
 801b00a:	9005      	str	r0, [sp, #20]
 801b00c:	9312      	str	r3, [sp, #72]	@ 0x48
 801b00e:	9b06      	ldr	r3, [sp, #24]
 801b010:	785a      	ldrb	r2, [r3, #1]
 801b012:	789b      	ldrb	r3, [r3, #2]
 801b014:	021b      	lsls	r3, r3, #8
 801b016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b01a:	9a06      	ldr	r2, [sp, #24]
 801b01c:	78d2      	ldrb	r2, [r2, #3]
 801b01e:	4313      	orrs	r3, r2
 801b020:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b022:	441a      	add	r2, r3
 801b024:	1c50      	adds	r0, r2, #1
 801b026:	7852      	ldrb	r2, [r2, #1]
 801b028:	9003      	str	r0, [sp, #12]
 801b02a:	0212      	lsls	r2, r2, #8
 801b02c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801b02e:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801b032:	5cc3      	ldrb	r3, [r0, r3]
 801b034:	431a      	orrs	r2, r3
 801b036:	b293      	uxth	r3, r2
 801b038:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801b03c:	930a      	str	r3, [sp, #40]	@ 0x28
 801b03e:	2300      	movs	r3, #0
 801b040:	461a      	mov	r2, r3
 801b042:	9307      	str	r3, [sp, #28]
 801b044:	2d00      	cmp	r5, #0
 801b046:	d07c      	beq.n	801b142 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801b048:	42ae      	cmp	r6, r5
 801b04a:	d26c      	bcs.n	801b126 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801b04c:	9b08      	ldr	r3, [sp, #32]
 801b04e:	1bad      	subs	r5, r5, r6
 801b050:	4608      	mov	r0, r1
 801b052:	4543      	cmp	r3, r8
 801b054:	b2ad      	uxth	r5, r5
 801b056:	d802      	bhi.n	801b05e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801b058:	e071      	b.n	801b13e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d15d      	bne.n	801b11a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801b05e:	9b03      	ldr	r3, [sp, #12]
 801b060:	9a02      	ldr	r2, [sp, #8]
 801b062:	785b      	ldrb	r3, [r3, #1]
 801b064:	f1c2 0207 	rsb	r2, r2, #7
 801b068:	9902      	ldr	r1, [sp, #8]
 801b06a:	4093      	lsls	r3, r2
 801b06c:	005b      	lsls	r3, r3, #1
 801b06e:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801b072:	9b03      	ldr	r3, [sp, #12]
 801b074:	781b      	ldrb	r3, [r3, #0]
 801b076:	410b      	asrs	r3, r1
 801b078:	3101      	adds	r1, #1
 801b07a:	b2c9      	uxtb	r1, r1
 801b07c:	b2db      	uxtb	r3, r3
 801b07e:	2908      	cmp	r1, #8
 801b080:	9102      	str	r1, [sp, #8]
 801b082:	9903      	ldr	r1, [sp, #12]
 801b084:	ea43 0302 	orr.w	r3, r3, r2
 801b088:	bf0c      	ite	eq
 801b08a:	3102      	addeq	r1, #2
 801b08c:	3101      	addne	r1, #1
 801b08e:	b29a      	uxth	r2, r3
 801b090:	bf05      	ittet	eq
 801b092:	9103      	streq	r1, [sp, #12]
 801b094:	2100      	moveq	r1, #0
 801b096:	9103      	strne	r1, [sp, #12]
 801b098:	9102      	streq	r1, [sp, #8]
 801b09a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801b09c:	4291      	cmp	r1, r2
 801b09e:	d30a      	bcc.n	801b0b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801b0a0:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801b0a4:	2301      	movs	r3, #1
 801b0a6:	9905      	ldr	r1, [sp, #20]
 801b0a8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801b0ac:	d30f      	bcc.n	801b0ce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801b0ae:	469b      	mov	fp, r3
 801b0b0:	f04f 0c00 	mov.w	ip, #0
 801b0b4:	e032      	b.n	801b11c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801b0b6:	9b05      	ldr	r3, [sp, #20]
 801b0b8:	429a      	cmp	r2, r3
 801b0ba:	d318      	bcc.n	801b0ee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801b0bc:	eb04 030b 	add.w	r3, r4, fp
 801b0c0:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801b0c4:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801b0c8:	f10b 0301 	add.w	r3, fp, #1
 801b0cc:	b29b      	uxth	r3, r3
 801b0ce:	9905      	ldr	r1, [sp, #20]
 801b0d0:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801b0d4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801b0d8:	710e      	strb	r6, [r1, #4]
 801b0da:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801b0dc:	80ce      	strh	r6, [r1, #6]
 801b0de:	f10b 0601 	add.w	r6, fp, #1
 801b0e2:	714e      	strb	r6, [r1, #5]
 801b0e4:	9905      	ldr	r1, [sp, #20]
 801b0e6:	3101      	adds	r1, #1
 801b0e8:	b289      	uxth	r1, r1
 801b0ea:	9105      	str	r1, [sp, #20]
 801b0ec:	e7df      	b.n	801b0ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801b0ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b0f2:	4611      	mov	r1, r2
 801b0f4:	795b      	ldrb	r3, [r3, #5]
 801b0f6:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801b0fa:	4426      	add	r6, r4
 801b0fc:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801b0fe:	4437      	add	r7, r6
 801b100:	2f00      	cmp	r7, #0
 801b102:	dd06      	ble.n	801b112 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801b104:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801b108:	790f      	ldrb	r7, [r1, #4]
 801b10a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b10e:	88c9      	ldrh	r1, [r1, #6]
 801b110:	e7f4      	b.n	801b0fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801b112:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801b116:	b29b      	uxth	r3, r3
 801b118:	e7c5      	b.n	801b0a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801b11a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b11c:	920a      	str	r2, [sp, #40]	@ 0x28
 801b11e:	4601      	mov	r1, r0
 801b120:	4662      	mov	r2, ip
 801b122:	461e      	mov	r6, r3
 801b124:	e78e      	b.n	801b044 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801b126:	1b73      	subs	r3, r6, r5
 801b128:	eb02 0c05 	add.w	ip, r2, r5
 801b12c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801b130:	b29b      	uxth	r3, r3
 801b132:	fa1f fc8c 	uxth.w	ip, ip
 801b136:	2500      	movs	r5, #0
 801b138:	9a08      	ldr	r2, [sp, #32]
 801b13a:	4542      	cmp	r2, r8
 801b13c:	d88d      	bhi.n	801b05a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801b13e:	4601      	mov	r1, r0
 801b140:	e74f      	b.n	801afe2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801b142:	428e      	cmp	r6, r1
 801b144:	bf2b      	itete	cs
 801b146:	468e      	movcs	lr, r1
 801b148:	46b6      	movcc	lr, r6
 801b14a:	1a73      	subcs	r3, r6, r1
 801b14c:	1b88      	subcc	r0, r1, r6
 801b14e:	eb02 0c0e 	add.w	ip, r2, lr
 801b152:	bf2b      	itete	cs
 801b154:	4628      	movcs	r0, r5
 801b156:	462b      	movcc	r3, r5
 801b158:	b29b      	uxthcs	r3, r3
 801b15a:	b280      	uxthcc	r0, r0
 801b15c:	f108 0503 	add.w	r5, r8, #3
 801b160:	fa1f fc8c 	uxth.w	ip, ip
 801b164:	4562      	cmp	r2, ip
 801b166:	d06f      	beq.n	801b248 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801b168:	1c57      	adds	r7, r2, #1
 801b16a:	4422      	add	r2, r4
 801b16c:	b2bf      	uxth	r7, r7
 801b16e:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801b172:	9713      	str	r7, [sp, #76]	@ 0x4c
 801b174:	2704      	movs	r7, #4
 801b176:	46b9      	mov	r9, r7
 801b178:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801b17a:	fb19 7202 	smlabb	r2, r9, r2, r7
 801b17e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b180:	58bf      	ldr	r7, [r7, r2]
 801b182:	0e3a      	lsrs	r2, r7, #24
 801b184:	9209      	str	r2, [sp, #36]	@ 0x24
 801b186:	d016      	beq.n	801b1b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801b188:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801b18c:	fa5f fa87 	uxtb.w	sl, r7
 801b190:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b194:	fa5f f289 	uxtb.w	r2, r9
 801b198:	9214      	str	r2, [sp, #80]	@ 0x50
 801b19a:	b2fa      	uxtb	r2, r7
 801b19c:	9215      	str	r2, [sp, #84]	@ 0x54
 801b19e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b1a0:	2aff      	cmp	r2, #255	@ 0xff
 801b1a2:	d10b      	bne.n	801b1bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801b1a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b1a6:	2aff      	cmp	r2, #255	@ 0xff
 801b1a8:	d108      	bne.n	801b1bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801b1aa:	f805 ac03 	strb.w	sl, [r5, #-3]
 801b1ae:	f805 9c02 	strb.w	r9, [r5, #-2]
 801b1b2:	f805 7c01 	strb.w	r7, [r5, #-1]
 801b1b6:	3503      	adds	r5, #3
 801b1b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b1ba:	e7d3      	b.n	801b164 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801b1bc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801b1be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b1c0:	437a      	muls	r2, r7
 801b1c2:	1c57      	adds	r7, r2, #1
 801b1c4:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801b1c8:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801b1cc:	1212      	asrs	r2, r2, #8
 801b1ce:	fa1f f982 	uxth.w	r9, r2
 801b1d2:	43d2      	mvns	r2, r2
 801b1d4:	fb1a fa09 	smulbb	sl, sl, r9
 801b1d8:	b2d2      	uxtb	r2, r2
 801b1da:	fb07 a702 	mla	r7, r7, r2, sl
 801b1de:	9209      	str	r2, [sp, #36]	@ 0x24
 801b1e0:	b2bf      	uxth	r7, r7
 801b1e2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b1e4:	f107 0a01 	add.w	sl, r7, #1
 801b1e8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801b1ec:	fb12 fa09 	smulbb	sl, r2, r9
 801b1f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b1f2:	123f      	asrs	r7, r7, #8
 801b1f4:	f805 7c03 	strb.w	r7, [r5, #-3]
 801b1f8:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801b1fc:	fb07 aa02 	mla	sl, r7, r2, sl
 801b200:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801b202:	fb12 f909 	smulbb	r9, r2, r9
 801b206:	fa1f fa8a 	uxth.w	sl, sl
 801b20a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b20c:	f10a 0701 	add.w	r7, sl, #1
 801b210:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b214:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801b218:	fb07 9902 	mla	r9, r7, r2, r9
 801b21c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b220:	fa1f f989 	uxth.w	r9, r9
 801b224:	f805 ac02 	strb.w	sl, [r5, #-2]
 801b228:	f109 0201 	add.w	r2, r9, #1
 801b22c:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801b230:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b234:	f805 9c01 	strb.w	r9, [r5, #-1]
 801b238:	e7bd      	b.n	801b1b6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801b23a:	bf00      	nop
 801b23c:	240255cc 	.word	0x240255cc
 801b240:	240255c6 	.word	0x240255c6
 801b244:	fffff7fb 	.word	0xfffff7fb
 801b248:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b24c:	428e      	cmp	r6, r1
 801b24e:	44f0      	add	r8, lr
 801b250:	f4ff af71 	bcc.w	801b136 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801b254:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b256:	9904      	ldr	r1, [sp, #16]
 801b258:	8812      	ldrh	r2, [r2, #0]
 801b25a:	1a52      	subs	r2, r2, r1
 801b25c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801b25e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b262:	4490      	add	r8, r2
 801b264:	9a07      	ldr	r2, [sp, #28]
 801b266:	3201      	adds	r2, #1
 801b268:	428a      	cmp	r2, r1
 801b26a:	9207      	str	r2, [sp, #28]
 801b26c:	d111      	bne.n	801b292 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801b26e:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801b272:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801b276:	9b04      	ldr	r3, [sp, #16]
 801b278:	eba5 050c 	sub.w	r5, r5, ip
 801b27c:	b2ad      	uxth	r5, r5
 801b27e:	2d00      	cmp	r5, #0
 801b280:	bf08      	it	eq
 801b282:	4619      	moveq	r1, r3
 801b284:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b286:	bf18      	it	ne
 801b288:	2100      	movne	r1, #0
 801b28a:	3301      	adds	r3, #1
 801b28c:	b289      	uxth	r1, r1
 801b28e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b290:	e69e      	b.n	801afd0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801b292:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801b296:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801b29a:	1a2d      	subs	r5, r5, r0
 801b29c:	b2ad      	uxth	r5, r5
 801b29e:	2d00      	cmp	r5, #0
 801b2a0:	bf18      	it	ne
 801b2a2:	2000      	movne	r0, #0
 801b2a4:	e748      	b.n	801b138 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801b2a6:	4b04      	ldr	r3, [pc, #16]	@ (801b2b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801b2a8:	6818      	ldr	r0, [r3, #0]
 801b2aa:	6803      	ldr	r3, [r0, #0]
 801b2ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b2ae:	4798      	blx	r3
 801b2b0:	b01d      	add	sp, #116	@ 0x74
 801b2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2b6:	bf00      	nop
 801b2b8:	240255cc 	.word	0x240255cc

0801b2bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801b2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2c0:	b08f      	sub	sp, #60	@ 0x3c
 801b2c2:	4616      	mov	r6, r2
 801b2c4:	4681      	mov	r9, r0
 801b2c6:	460d      	mov	r5, r1
 801b2c8:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801b2cc:	9205      	str	r2, [sp, #20]
 801b2ce:	2a00      	cmp	r2, #0
 801b2d0:	f000 82a8 	beq.w	801b824 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 801b2d4:	6830      	ldr	r0, [r6, #0]
 801b2d6:	ac0a      	add	r4, sp, #40	@ 0x28
 801b2d8:	6871      	ldr	r1, [r6, #4]
 801b2da:	c403      	stmia	r4!, {r0, r1}
 801b2dc:	6818      	ldr	r0, [r3, #0]
 801b2de:	ac0c      	add	r4, sp, #48	@ 0x30
 801b2e0:	6859      	ldr	r1, [r3, #4]
 801b2e2:	c403      	stmia	r4!, {r0, r1}
 801b2e4:	a80a      	add	r0, sp, #40	@ 0x28
 801b2e6:	f7f9 f8f3 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b2ea:	4631      	mov	r1, r6
 801b2ec:	a80c      	add	r0, sp, #48	@ 0x30
 801b2ee:	f7f9 f917 	bl	8014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b2f2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801b2f6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801b2fa:	bfdb      	ittet	le
 801b2fc:	b293      	uxthle	r3, r2
 801b2fe:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801b302:	2301      	movgt	r3, #1
 801b304:	fb91 f3f3 	sdivle	r3, r1, r3
 801b308:	9300      	str	r3, [sp, #0]
 801b30a:	f105 0308 	add.w	r3, r5, #8
 801b30e:	9900      	ldr	r1, [sp, #0]
 801b310:	9306      	str	r3, [sp, #24]
 801b312:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801b316:	440b      	add	r3, r1
 801b318:	3b01      	subs	r3, #1
 801b31a:	fb93 f3f1 	sdiv	r3, r3, r1
 801b31e:	3b01      	subs	r3, #1
 801b320:	9906      	ldr	r1, [sp, #24]
 801b322:	b29b      	uxth	r3, r3
 801b324:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b328:	9900      	ldr	r1, [sp, #0]
 801b32a:	9307      	str	r3, [sp, #28]
 801b32c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801b330:	fb93 f0f1 	sdiv	r0, r3, r1
 801b334:	b284      	uxth	r4, r0
 801b336:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801b33a:	b280      	uxth	r0, r0
 801b33c:	9402      	str	r4, [sp, #8]
 801b33e:	9d02      	ldr	r5, [sp, #8]
 801b340:	9c00      	ldr	r4, [sp, #0]
 801b342:	fb05 3514 	mls	r5, r5, r4, r3
 801b346:	fb15 f502 	smulbb	r5, r5, r2
 801b34a:	440d      	add	r5, r1
 801b34c:	b2ad      	uxth	r5, r5
 801b34e:	2800      	cmp	r0, #0
 801b350:	d071      	beq.n	801b436 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 801b352:	1e42      	subs	r2, r0, #1
 801b354:	9806      	ldr	r0, [sp, #24]
 801b356:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801b35a:	9a07      	ldr	r2, [sp, #28]
 801b35c:	fa98 f888 	rev.w	r8, r8
 801b360:	4490      	add	r8, r2
 801b362:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801b366:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801b36a:	4411      	add	r1, r2
 801b36c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801b370:	f8df b348 	ldr.w	fp, [pc, #840]	@ 801b6bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801b374:	4413      	add	r3, r2
 801b376:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801b37a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801b37e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801b382:	9301      	str	r3, [sp, #4]
 801b384:	4bcb      	ldr	r3, [pc, #812]	@ (801b6b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 801b386:	6818      	ldr	r0, [r3, #0]
 801b388:	6803      	ldr	r3, [r0, #0]
 801b38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b38c:	4798      	blx	r3
 801b38e:	4bca      	ldr	r3, [pc, #808]	@ (801b6b8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 801b390:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801b394:	881b      	ldrh	r3, [r3, #0]
 801b396:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 801b39a:	fb03 2707 	mla	r7, r3, r7, r2
 801b39e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b3a2:	4363      	muls	r3, r4
 801b3a4:	2400      	movs	r4, #0
 801b3a6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b3aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b3ae:	4621      	mov	r1, r4
 801b3b0:	4407      	add	r7, r0
 801b3b2:	18fb      	adds	r3, r7, r3
 801b3b4:	9309      	str	r3, [sp, #36]	@ 0x24
 801b3b6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801b3ba:	fb95 f3f3 	sdiv	r3, r5, r3
 801b3be:	9304      	str	r3, [sp, #16]
 801b3c0:	f109 0304 	add.w	r3, r9, #4
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	9308      	str	r3, [sp, #32]
 801b3c8:	f008 fc0a 	bl	8023be0 <memset>
 801b3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b3ce:	42bb      	cmp	r3, r7
 801b3d0:	f240 8223 	bls.w	801b81a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 801b3d4:	2003      	movs	r0, #3
 801b3d6:	f04f 0c07 	mov.w	ip, #7
 801b3da:	f04f 0e0b 	mov.w	lr, #11
 801b3de:	2d00      	cmp	r5, #0
 801b3e0:	f000 813c 	beq.w	801b65c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 801b3e4:	f898 3000 	ldrb.w	r3, [r8]
 801b3e8:	b2db      	uxtb	r3, r3
 801b3ea:	2bfe      	cmp	r3, #254	@ 0xfe
 801b3ec:	d126      	bne.n	801b43c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 801b3ee:	f898 1001 	ldrb.w	r1, [r8, #1]
 801b3f2:	f108 0604 	add.w	r6, r8, #4
 801b3f6:	f898 2002 	ldrb.w	r2, [r8, #2]
 801b3fa:	3d01      	subs	r5, #1
 801b3fc:	b2c9      	uxtb	r1, r1
 801b3fe:	f898 8003 	ldrb.w	r8, [r8, #3]
 801b402:	b2d2      	uxtb	r2, r2
 801b404:	f361 0407 	bfi	r4, r1, #0, #8
 801b408:	fa5f f888 	uxtb.w	r8, r8
 801b40c:	b2ad      	uxth	r5, r5
 801b40e:	f362 240f 	bfi	r4, r2, #8, #8
 801b412:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b416:	fb10 2208 	smlabb	r2, r0, r8, r2
 801b41a:	f368 4417 	bfi	r4, r8, #16, #8
 801b41e:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801b422:	0e23      	lsrs	r3, r4, #24
 801b424:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801b428:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b42c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801b430:	605c      	str	r4, [r3, #4]
 801b432:	46b0      	mov	r8, r6
 801b434:	e7d3      	b.n	801b3de <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801b436:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b43a:	e792      	b.n	801b362 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 801b43c:	2bff      	cmp	r3, #255	@ 0xff
 801b43e:	d127      	bne.n	801b490 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 801b440:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b444:	f108 0605 	add.w	r6, r8, #5
 801b448:	f898 3002 	ldrb.w	r3, [r8, #2]
 801b44c:	3d01      	subs	r5, #1
 801b44e:	b2d2      	uxtb	r2, r2
 801b450:	f898 1003 	ldrb.w	r1, [r8, #3]
 801b454:	b2db      	uxtb	r3, r3
 801b456:	f898 8004 	ldrb.w	r8, [r8, #4]
 801b45a:	f362 0407 	bfi	r4, r2, #0, #8
 801b45e:	b2c9      	uxtb	r1, r1
 801b460:	fa5f f888 	uxtb.w	r8, r8
 801b464:	f363 240f 	bfi	r4, r3, #8, #8
 801b468:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801b46c:	b2ad      	uxth	r5, r5
 801b46e:	fb10 3301 	smlabb	r3, r0, r1, r3
 801b472:	f361 4417 	bfi	r4, r1, #16, #8
 801b476:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801b47a:	f368 641f 	bfi	r4, r8, #24, #8
 801b47e:	fb1e 3808 	smlabb	r8, lr, r8, r3
 801b482:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801b486:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801b48a:	f8c8 4004 	str.w	r4, [r8, #4]
 801b48e:	e7d0      	b.n	801b432 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801b490:	119a      	asrs	r2, r3, #6
 801b492:	f108 0601 	add.w	r6, r8, #1
 801b496:	d107      	bne.n	801b4a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 801b498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b49c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801b4a0:	685c      	ldr	r4, [r3, #4]
 801b4a2:	3d01      	subs	r5, #1
 801b4a4:	b2ad      	uxth	r5, r5
 801b4a6:	e7c4      	b.n	801b432 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801b4a8:	2a01      	cmp	r2, #1
 801b4aa:	d129      	bne.n	801b500 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 801b4ac:	f003 0203 	and.w	r2, r3, #3
 801b4b0:	1ea1      	subs	r1, r4, #2
 801b4b2:	4411      	add	r1, r2
 801b4b4:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801b4b8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b4bc:	b2c9      	uxtb	r1, r1
 801b4be:	3a02      	subs	r2, #2
 801b4c0:	3b02      	subs	r3, #2
 801b4c2:	f361 0407 	bfi	r4, r1, #0, #8
 801b4c6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801b4ca:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801b4ce:	f362 240f 	bfi	r4, r2, #8, #8
 801b4d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b4d6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801b4da:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801b4de:	fb10 2203 	smlabb	r2, r0, r3, r2
 801b4e2:	f363 4417 	bfi	r4, r3, #16, #8
 801b4e6:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801b4ea:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801b4ee:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801b4f2:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801b4f6:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801b4fa:	f8c8 4004 	str.w	r4, [r8, #4]
 801b4fe:	e7d0      	b.n	801b4a2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801b500:	2a02      	cmp	r2, #2
 801b502:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b506:	d12e      	bne.n	801b566 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801b508:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b50c:	f1a3 0a20 	sub.w	sl, r3, #32
 801b510:	f108 0602 	add.w	r6, r8, #2
 801b514:	b2d2      	uxtb	r2, r2
 801b516:	f002 010f 	and.w	r1, r2, #15
 801b51a:	1112      	asrs	r2, r2, #4
 801b51c:	3908      	subs	r1, #8
 801b51e:	3a08      	subs	r2, #8
 801b520:	4451      	add	r1, sl
 801b522:	4492      	add	sl, r2
 801b524:	4421      	add	r1, r4
 801b526:	b2c9      	uxtb	r1, r1
 801b528:	f361 0407 	bfi	r4, r1, #0, #8
 801b52c:	f3c4 2807 	ubfx	r8, r4, #8, #8
 801b530:	f1a8 0820 	sub.w	r8, r8, #32
 801b534:	4443      	add	r3, r8
 801b536:	b2db      	uxtb	r3, r3
 801b538:	f363 240f 	bfi	r4, r3, #8, #8
 801b53c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801b540:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 801b544:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801b548:	fb10 330a 	smlabb	r3, r0, sl, r3
 801b54c:	f36a 4417 	bfi	r4, sl, #16, #8
 801b550:	fb1c 3301 	smlabb	r3, ip, r1, r3
 801b554:	0e22      	lsrs	r2, r4, #24
 801b556:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801b55a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801b55e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801b562:	6054      	str	r4, [r2, #4]
 801b564:	e79d      	b.n	801b4a2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801b566:	3301      	adds	r3, #1
 801b568:	42ab      	cmp	r3, r5
 801b56a:	dd59      	ble.n	801b620 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 801b56c:	1b5d      	subs	r5, r3, r5
 801b56e:	2d00      	cmp	r5, #0
 801b570:	dc58      	bgt.n	801b624 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 801b572:	f8dd a004 	ldr.w	sl, [sp, #4]
 801b576:	f04f 0800 	mov.w	r8, #0
 801b57a:	f1ba 0f00 	cmp.w	sl, #0
 801b57e:	f340 8108 	ble.w	801b792 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 801b582:	1c73      	adds	r3, r6, #1
 801b584:	9303      	str	r3, [sp, #12]
 801b586:	7833      	ldrb	r3, [r6, #0]
 801b588:	b2db      	uxtb	r3, r3
 801b58a:	2bfe      	cmp	r3, #254	@ 0xfe
 801b58c:	d16a      	bne.n	801b664 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 801b58e:	7871      	ldrb	r1, [r6, #1]
 801b590:	1d33      	adds	r3, r6, #4
 801b592:	78b2      	ldrb	r2, [r6, #2]
 801b594:	b2c9      	uxtb	r1, r1
 801b596:	78f0      	ldrb	r0, [r6, #3]
 801b598:	b2d2      	uxtb	r2, r2
 801b59a:	9303      	str	r3, [sp, #12]
 801b59c:	f361 0407 	bfi	r4, r1, #0, #8
 801b5a0:	b2c0      	uxtb	r0, r0
 801b5a2:	2303      	movs	r3, #3
 801b5a4:	f362 240f 	bfi	r4, r2, #8, #8
 801b5a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b5ac:	fb13 2200 	smlabb	r2, r3, r0, r2
 801b5b0:	f360 4417 	bfi	r4, r0, #16, #8
 801b5b4:	2307      	movs	r3, #7
 801b5b6:	0e25      	lsrs	r5, r4, #24
 801b5b8:	fb13 2101 	smlabb	r1, r3, r1, r2
 801b5bc:	230b      	movs	r3, #11
 801b5be:	fb13 1305 	smlabb	r3, r3, r5, r1
 801b5c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b5c6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801b5ca:	605c      	str	r4, [r3, #4]
 801b5cc:	2501      	movs	r5, #1
 801b5ce:	462e      	mov	r6, r5
 801b5d0:	eb06 0308 	add.w	r3, r6, r8
 801b5d4:	ebaa 0a06 	sub.w	sl, sl, r6
 801b5d8:	1bad      	subs	r5, r5, r6
 801b5da:	2b40      	cmp	r3, #64	@ 0x40
 801b5dc:	dd16      	ble.n	801b60c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801b5de:	4658      	mov	r0, fp
 801b5e0:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801b5e4:	f7e7 feb8 	bl	8003358 <_ZN8touchgfx5paint9flushLineEPmi>
 801b5e8:	4659      	mov	r1, fp
 801b5ea:	9b05      	ldr	r3, [sp, #20]
 801b5ec:	4642      	mov	r2, r8
 801b5ee:	4638      	mov	r0, r7
 801b5f0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b5f4:	f7e7 ff18 	bl	8003428 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801b5f8:	4b30      	ldr	r3, [pc, #192]	@ (801b6bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801b5fa:	4447      	add	r7, r8
 801b5fc:	f04f 0800 	mov.w	r8, #0
 801b600:	459b      	cmp	fp, r3
 801b602:	bf0c      	ite	eq
 801b604:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 801b6c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801b608:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 801b6bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801b60c:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 801b610:	4633      	mov	r3, r6
 801b612:	3b01      	subs	r3, #1
 801b614:	f842 4b04 	str.w	r4, [r2], #4
 801b618:	d1fb      	bne.n	801b612 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801b61a:	44b0      	add	r8, r6
 801b61c:	9e03      	ldr	r6, [sp, #12]
 801b61e:	e7ac      	b.n	801b57a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 801b620:	1aed      	subs	r5, r5, r3
 801b622:	e73f      	b.n	801b4a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 801b624:	9b01      	ldr	r3, [sp, #4]
 801b626:	42ab      	cmp	r3, r5
 801b628:	bfa8      	it	ge
 801b62a:	462b      	movge	r3, r5
 801b62c:	4698      	mov	r8, r3
 801b62e:	9b01      	ldr	r3, [sp, #4]
 801b630:	eba3 0a08 	sub.w	sl, r3, r8
 801b634:	0e23      	lsrs	r3, r4, #24
 801b636:	eba5 0508 	sub.w	r5, r5, r8
 801b63a:	d00b      	beq.n	801b654 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 801b63c:	9a05      	ldr	r2, [sp, #20]
 801b63e:	4641      	mov	r1, r8
 801b640:	4638      	mov	r0, r7
 801b642:	4353      	muls	r3, r2
 801b644:	1c5a      	adds	r2, r3, #1
 801b646:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801b64a:	4622      	mov	r2, r4
 801b64c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b650:	f7e7 fe9c 	bl	800338c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801b654:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b658:	4447      	add	r7, r8
 801b65a:	e78c      	b.n	801b576 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801b65c:	f8dd a004 	ldr.w	sl, [sp, #4]
 801b660:	4646      	mov	r6, r8
 801b662:	e788      	b.n	801b576 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801b664:	2bff      	cmp	r3, #255	@ 0xff
 801b666:	d11d      	bne.n	801b6a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801b668:	7870      	ldrb	r0, [r6, #1]
 801b66a:	1d73      	adds	r3, r6, #5
 801b66c:	78b2      	ldrb	r2, [r6, #2]
 801b66e:	b2c0      	uxtb	r0, r0
 801b670:	78f5      	ldrb	r5, [r6, #3]
 801b672:	b2d2      	uxtb	r2, r2
 801b674:	9303      	str	r3, [sp, #12]
 801b676:	f360 0407 	bfi	r4, r0, #0, #8
 801b67a:	7933      	ldrb	r3, [r6, #4]
 801b67c:	b2ed      	uxtb	r5, r5
 801b67e:	b2d9      	uxtb	r1, r3
 801b680:	f362 240f 	bfi	r4, r2, #8, #8
 801b684:	2303      	movs	r3, #3
 801b686:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b68a:	f365 4417 	bfi	r4, r5, #16, #8
 801b68e:	fb13 2205 	smlabb	r2, r3, r5, r2
 801b692:	2307      	movs	r3, #7
 801b694:	f361 641f 	bfi	r4, r1, #24, #8
 801b698:	fb13 2000 	smlabb	r0, r3, r0, r2
 801b69c:	230b      	movs	r3, #11
 801b69e:	fb13 0301 	smlabb	r3, r3, r1, r0
 801b6a2:	e78e      	b.n	801b5c2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801b6a4:	119d      	asrs	r5, r3, #6
 801b6a6:	d10d      	bne.n	801b6c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 801b6a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b6ac:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801b6b0:	685c      	ldr	r4, [r3, #4]
 801b6b2:	e78b      	b.n	801b5cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801b6b4:	240255cc 	.word	0x240255cc
 801b6b8:	240255c6 	.word	0x240255c6
 801b6bc:	24009740 	.word	0x24009740
 801b6c0:	24009840 	.word	0x24009840
 801b6c4:	2d01      	cmp	r5, #1
 801b6c6:	d12a      	bne.n	801b71e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801b6c8:	f003 0203 	and.w	r2, r3, #3
 801b6cc:	1ea1      	subs	r1, r4, #2
 801b6ce:	2603      	movs	r6, #3
 801b6d0:	4411      	add	r1, r2
 801b6d2:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801b6d6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b6da:	b2c9      	uxtb	r1, r1
 801b6dc:	3a02      	subs	r2, #2
 801b6de:	3b02      	subs	r3, #2
 801b6e0:	f361 0407 	bfi	r4, r1, #0, #8
 801b6e4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801b6e8:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801b6ec:	f362 240f 	bfi	r4, r2, #8, #8
 801b6f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b6f4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801b6f8:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801b6fc:	fb16 2203 	smlabb	r2, r6, r3, r2
 801b700:	f363 4417 	bfi	r4, r3, #16, #8
 801b704:	2307      	movs	r3, #7
 801b706:	0e20      	lsrs	r0, r4, #24
 801b708:	fb13 2101 	smlabb	r1, r3, r1, r2
 801b70c:	230b      	movs	r3, #11
 801b70e:	fb13 1300 	smlabb	r3, r3, r0, r1
 801b712:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b716:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801b71a:	605c      	str	r4, [r3, #4]
 801b71c:	e757      	b.n	801b5ce <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 801b71e:	2d02      	cmp	r5, #2
 801b720:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b724:	d12f      	bne.n	801b786 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801b726:	1cb2      	adds	r2, r6, #2
 801b728:	f1a3 0020 	sub.w	r0, r3, #32
 801b72c:	9203      	str	r2, [sp, #12]
 801b72e:	7872      	ldrb	r2, [r6, #1]
 801b730:	b2d2      	uxtb	r2, r2
 801b732:	f002 010f 	and.w	r1, r2, #15
 801b736:	1112      	asrs	r2, r2, #4
 801b738:	3908      	subs	r1, #8
 801b73a:	3a08      	subs	r2, #8
 801b73c:	4401      	add	r1, r0
 801b73e:	4402      	add	r2, r0
 801b740:	4421      	add	r1, r4
 801b742:	b2c9      	uxtb	r1, r1
 801b744:	f361 0407 	bfi	r4, r1, #0, #8
 801b748:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801b74c:	3d20      	subs	r5, #32
 801b74e:	442b      	add	r3, r5
 801b750:	2503      	movs	r5, #3
 801b752:	b2db      	uxtb	r3, r3
 801b754:	f363 240f 	bfi	r4, r3, #8, #8
 801b758:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801b75c:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801b760:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801b764:	fb15 3302 	smlabb	r3, r5, r2, r3
 801b768:	f362 4417 	bfi	r4, r2, #16, #8
 801b76c:	2207      	movs	r2, #7
 801b76e:	0e20      	lsrs	r0, r4, #24
 801b770:	fb12 3201 	smlabb	r2, r2, r1, r3
 801b774:	210b      	movs	r1, #11
 801b776:	fb11 2100 	smlabb	r1, r1, r0, r2
 801b77a:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801b77e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801b782:	604c      	str	r4, [r1, #4]
 801b784:	e722      	b.n	801b5cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801b786:	1c5d      	adds	r5, r3, #1
 801b788:	4656      	mov	r6, sl
 801b78a:	45aa      	cmp	sl, r5
 801b78c:	bfa8      	it	ge
 801b78e:	462e      	movge	r6, r5
 801b790:	e71e      	b.n	801b5d0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 801b792:	f1b8 0f00 	cmp.w	r8, #0
 801b796:	d00d      	beq.n	801b7b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 801b798:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801b79c:	4658      	mov	r0, fp
 801b79e:	f7e7 fddb 	bl	8003358 <_ZN8touchgfx5paint9flushLineEPmi>
 801b7a2:	4642      	mov	r2, r8
 801b7a4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b7a8:	4638      	mov	r0, r7
 801b7aa:	9b05      	ldr	r3, [sp, #20]
 801b7ac:	4659      	mov	r1, fp
 801b7ae:	4447      	add	r7, r8
 801b7b0:	f7e7 fe3a 	bl	8003428 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801b7b4:	4b1d      	ldr	r3, [pc, #116]	@ (801b82c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 801b7b6:	9a01      	ldr	r2, [sp, #4]
 801b7b8:	881b      	ldrh	r3, [r3, #0]
 801b7ba:	1a9b      	subs	r3, r3, r2
 801b7bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b7c0:	441f      	add	r7, r3
 801b7c2:	9b04      	ldr	r3, [sp, #16]
 801b7c4:	3301      	adds	r3, #1
 801b7c6:	9304      	str	r3, [sp, #16]
 801b7c8:	9a04      	ldr	r2, [sp, #16]
 801b7ca:	9b00      	ldr	r3, [sp, #0]
 801b7cc:	4293      	cmp	r3, r2
 801b7ce:	d11d      	bne.n	801b80c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 801b7d0:	9b02      	ldr	r3, [sp, #8]
 801b7d2:	2400      	movs	r4, #0
 801b7d4:	9a02      	ldr	r2, [sp, #8]
 801b7d6:	f103 0801 	add.w	r8, r3, #1
 801b7da:	9b06      	ldr	r3, [sp, #24]
 801b7dc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801b7e0:	4621      	mov	r1, r4
 801b7e2:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b7e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b7ea:	9b07      	ldr	r3, [sp, #28]
 801b7ec:	ba36      	rev	r6, r6
 801b7ee:	9808      	ldr	r0, [sp, #32]
 801b7f0:	441e      	add	r6, r3
 801b7f2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801b7f6:	1aed      	subs	r5, r5, r3
 801b7f8:	f008 f9f2 	bl	8023be0 <memset>
 801b7fc:	f8cd 8008 	str.w	r8, [sp, #8]
 801b800:	b2ad      	uxth	r5, r5
 801b802:	9404      	str	r4, [sp, #16]
 801b804:	f7e7 fd9e 	bl	8003344 <_ZN8touchgfx5paint8tearDownEv>
 801b808:	46b0      	mov	r8, r6
 801b80a:	e5df      	b.n	801b3cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 801b80c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801b810:	9a01      	ldr	r2, [sp, #4]
 801b812:	1a9b      	subs	r3, r3, r2
 801b814:	1b5d      	subs	r5, r3, r5
 801b816:	b2ad      	uxth	r5, r5
 801b818:	e7f4      	b.n	801b804 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801b81a:	4b05      	ldr	r3, [pc, #20]	@ (801b830 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 801b81c:	6818      	ldr	r0, [r3, #0]
 801b81e:	6803      	ldr	r3, [r0, #0]
 801b820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b822:	4798      	blx	r3
 801b824:	b00f      	add	sp, #60	@ 0x3c
 801b826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b82a:	bf00      	nop
 801b82c:	240255c6 	.word	0x240255c6
 801b830:	240255cc 	.word	0x240255cc

0801b834 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 801b834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b838:	b093      	sub	sp, #76	@ 0x4c
 801b83a:	460d      	mov	r5, r1
 801b83c:	4616      	mov	r6, r2
 801b83e:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 801b842:	9000      	str	r0, [sp, #0]
 801b844:	f1bb 0f00 	cmp.w	fp, #0
 801b848:	f000 82ac 	beq.w	801bda4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 801b84c:	6810      	ldr	r0, [r2, #0]
 801b84e:	ac0e      	add	r4, sp, #56	@ 0x38
 801b850:	6851      	ldr	r1, [r2, #4]
 801b852:	c403      	stmia	r4!, {r0, r1}
 801b854:	6818      	ldr	r0, [r3, #0]
 801b856:	ac10      	add	r4, sp, #64	@ 0x40
 801b858:	6859      	ldr	r1, [r3, #4]
 801b85a:	c403      	stmia	r4!, {r0, r1}
 801b85c:	a80e      	add	r0, sp, #56	@ 0x38
 801b85e:	f7f8 fe37 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b862:	4631      	mov	r1, r6
 801b864:	a810      	add	r0, sp, #64	@ 0x40
 801b866:	f7f8 fe5b 	bl	8014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b86a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801b86e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801b872:	bfdb      	ittet	le
 801b874:	b293      	uxthle	r3, r2
 801b876:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801b87a:	2301      	movgt	r3, #1
 801b87c:	fb91 f3f3 	sdivle	r3, r1, r3
 801b880:	9301      	str	r3, [sp, #4]
 801b882:	f105 0308 	add.w	r3, r5, #8
 801b886:	9901      	ldr	r1, [sp, #4]
 801b888:	9305      	str	r3, [sp, #20]
 801b88a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801b88e:	440b      	add	r3, r1
 801b890:	3b01      	subs	r3, #1
 801b892:	fb93 f3f1 	sdiv	r3, r3, r1
 801b896:	3b01      	subs	r3, #1
 801b898:	9905      	ldr	r1, [sp, #20]
 801b89a:	b29b      	uxth	r3, r3
 801b89c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b8a0:	9901      	ldr	r1, [sp, #4]
 801b8a2:	9306      	str	r3, [sp, #24]
 801b8a4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801b8a8:	fb93 f0f1 	sdiv	r0, r3, r1
 801b8ac:	b284      	uxth	r4, r0
 801b8ae:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801b8b2:	9403      	str	r4, [sp, #12]
 801b8b4:	9d03      	ldr	r5, [sp, #12]
 801b8b6:	9c01      	ldr	r4, [sp, #4]
 801b8b8:	fb05 3714 	mls	r7, r5, r4, r3
 801b8bc:	fb17 f702 	smulbb	r7, r7, r2
 801b8c0:	440f      	add	r7, r1
 801b8c2:	b2bf      	uxth	r7, r7
 801b8c4:	2d00      	cmp	r5, #0
 801b8c6:	d06b      	beq.n	801b9a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 801b8c8:	1e6a      	subs	r2, r5, #1
 801b8ca:	9805      	ldr	r0, [sp, #20]
 801b8cc:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 801b8d0:	9a06      	ldr	r2, [sp, #24]
 801b8d2:	fa99 f989 	rev.w	r9, r9
 801b8d6:	4491      	add	r9, r2
 801b8d8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801b8dc:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801b8e0:	4411      	add	r1, r2
 801b8e2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801b8e6:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801bc44 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 801b8ea:	4413      	add	r3, r2
 801b8ec:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801b8f0:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801b8f4:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801b8f8:	9302      	str	r3, [sp, #8]
 801b8fa:	4bd0      	ldr	r3, [pc, #832]	@ (801bc3c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 801b8fc:	6818      	ldr	r0, [r3, #0]
 801b8fe:	6803      	ldr	r3, [r0, #0]
 801b900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b902:	4798      	blx	r3
 801b904:	4bce      	ldr	r3, [pc, #824]	@ (801bc40 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 801b906:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801b90a:	881b      	ldrh	r3, [r3, #0]
 801b90c:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801b910:	fb03 2404 	mla	r4, r3, r4, r2
 801b914:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b918:	436b      	muls	r3, r5
 801b91a:	2500      	movs	r5, #0
 801b91c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b920:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b924:	4629      	mov	r1, r5
 801b926:	4404      	add	r4, r0
 801b928:	18e3      	adds	r3, r4, r3
 801b92a:	930d      	str	r3, [sp, #52]	@ 0x34
 801b92c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801b930:	fb97 f3f3 	sdiv	r3, r7, r3
 801b934:	9304      	str	r3, [sp, #16]
 801b936:	9b00      	ldr	r3, [sp, #0]
 801b938:	3304      	adds	r3, #4
 801b93a:	4618      	mov	r0, r3
 801b93c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b93e:	f008 f94f 	bl	8023be0 <memset>
 801b942:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b944:	42a3      	cmp	r3, r4
 801b946:	f240 8228 	bls.w	801bd9a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 801b94a:	2003      	movs	r0, #3
 801b94c:	2607      	movs	r6, #7
 801b94e:	2f00      	cmp	r7, #0
 801b950:	f000 80cb 	beq.w	801baea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 801b954:	f899 3000 	ldrb.w	r3, [r9]
 801b958:	b2db      	uxtb	r3, r3
 801b95a:	2bfe      	cmp	r3, #254	@ 0xfe
 801b95c:	d123      	bne.n	801b9a6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 801b95e:	f899 3001 	ldrb.w	r3, [r9, #1]
 801b962:	3f01      	subs	r7, #1
 801b964:	f899 2002 	ldrb.w	r2, [r9, #2]
 801b968:	f109 0804 	add.w	r8, r9, #4
 801b96c:	b2db      	uxtb	r3, r3
 801b96e:	f899 1003 	ldrb.w	r1, [r9, #3]
 801b972:	b2d2      	uxtb	r2, r2
 801b974:	f363 0507 	bfi	r5, r3, #0, #8
 801b978:	b2c9      	uxtb	r1, r1
 801b97a:	b2bf      	uxth	r7, r7
 801b97c:	f362 250f 	bfi	r5, r2, #8, #8
 801b980:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b984:	fb10 2201 	smlabb	r2, r0, r1, r2
 801b988:	f361 4517 	bfi	r5, r1, #16, #8
 801b98c:	fb16 2303 	smlabb	r3, r6, r3, r2
 801b990:	9a00      	ldr	r2, [sp, #0]
 801b992:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b996:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b99a:	605d      	str	r5, [r3, #4]
 801b99c:	46c1      	mov	r9, r8
 801b99e:	e7d6      	b.n	801b94e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 801b9a0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801b9a4:	e798      	b.n	801b8d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 801b9a6:	119a      	asrs	r2, r3, #6
 801b9a8:	f109 0801 	add.w	r8, r9, #1
 801b9ac:	d108      	bne.n	801b9c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 801b9ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b9b2:	9a00      	ldr	r2, [sp, #0]
 801b9b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b9b8:	685d      	ldr	r5, [r3, #4]
 801b9ba:	3f01      	subs	r7, #1
 801b9bc:	b2bf      	uxth	r7, r7
 801b9be:	e7ed      	b.n	801b99c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 801b9c0:	2a01      	cmp	r2, #1
 801b9c2:	d125      	bne.n	801ba10 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 801b9c4:	f003 0103 	and.w	r1, r3, #3
 801b9c8:	1eaa      	subs	r2, r5, #2
 801b9ca:	440a      	add	r2, r1
 801b9cc:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801b9d0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b9d4:	b2d2      	uxtb	r2, r2
 801b9d6:	3902      	subs	r1, #2
 801b9d8:	3b02      	subs	r3, #2
 801b9da:	f362 0507 	bfi	r5, r2, #0, #8
 801b9de:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801b9e2:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801b9e6:	f361 250f 	bfi	r5, r1, #8, #8
 801b9ea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801b9ee:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801b9f2:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801b9f6:	fb10 1103 	smlabb	r1, r0, r3, r1
 801b9fa:	f363 4517 	bfi	r5, r3, #16, #8
 801b9fe:	9b00      	ldr	r3, [sp, #0]
 801ba00:	fb16 1202 	smlabb	r2, r6, r2, r1
 801ba04:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801ba08:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801ba0c:	6055      	str	r5, [r2, #4]
 801ba0e:	e7d4      	b.n	801b9ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801ba10:	2a02      	cmp	r2, #2
 801ba12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ba16:	d12c      	bne.n	801ba72 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 801ba18:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ba1c:	f1a3 0c20 	sub.w	ip, r3, #32
 801ba20:	f109 0802 	add.w	r8, r9, #2
 801ba24:	b2d2      	uxtb	r2, r2
 801ba26:	f002 010f 	and.w	r1, r2, #15
 801ba2a:	1112      	asrs	r2, r2, #4
 801ba2c:	3908      	subs	r1, #8
 801ba2e:	3a08      	subs	r2, #8
 801ba30:	4461      	add	r1, ip
 801ba32:	4494      	add	ip, r2
 801ba34:	4429      	add	r1, r5
 801ba36:	b2c9      	uxtb	r1, r1
 801ba38:	f361 0507 	bfi	r5, r1, #0, #8
 801ba3c:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801ba40:	f1ae 0e20 	sub.w	lr, lr, #32
 801ba44:	4473      	add	r3, lr
 801ba46:	b2db      	uxtb	r3, r3
 801ba48:	f363 250f 	bfi	r5, r3, #8, #8
 801ba4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801ba50:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 801ba54:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801ba58:	fb10 330c 	smlabb	r3, r0, ip, r3
 801ba5c:	f36c 4517 	bfi	r5, ip, #16, #8
 801ba60:	fb16 3101 	smlabb	r1, r6, r1, r3
 801ba64:	9b00      	ldr	r3, [sp, #0]
 801ba66:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801ba6a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801ba6e:	604d      	str	r5, [r1, #4]
 801ba70:	e7a3      	b.n	801b9ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801ba72:	3301      	adds	r3, #1
 801ba74:	42bb      	cmp	r3, r7
 801ba76:	dd23      	ble.n	801bac0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 801ba78:	eba3 0907 	sub.w	r9, r3, r7
 801ba7c:	f1b9 0f00 	cmp.w	r9, #0
 801ba80:	dc20      	bgt.n	801bac4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 801ba82:	9e02      	ldr	r6, [sp, #8]
 801ba84:	2700      	movs	r7, #0
 801ba86:	2e00      	cmp	r6, #0
 801ba88:	f340 8142 	ble.w	801bd10 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 801ba8c:	f108 0301 	add.w	r3, r8, #1
 801ba90:	9307      	str	r3, [sp, #28]
 801ba92:	f898 3000 	ldrb.w	r3, [r8]
 801ba96:	b2db      	uxtb	r3, r3
 801ba98:	119a      	asrs	r2, r3, #6
 801ba9a:	d12a      	bne.n	801baf2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 801ba9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801baa0:	9a00      	ldr	r2, [sp, #0]
 801baa2:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801baa6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801baaa:	685d      	ldr	r5, [r3, #4]
 801baac:	f040 811f 	bne.w	801bcee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801bab0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801bab4:	7025      	strb	r5, [r4, #0]
 801bab6:	7063      	strb	r3, [r4, #1]
 801bab8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801babc:	70a3      	strb	r3, [r4, #2]
 801babe:	e04e      	b.n	801bb5e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801bac0:	1aff      	subs	r7, r7, r3
 801bac2:	e77b      	b.n	801b9bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 801bac4:	9b02      	ldr	r3, [sp, #8]
 801bac6:	4620      	mov	r0, r4
 801bac8:	462a      	mov	r2, r5
 801baca:	454b      	cmp	r3, r9
 801bacc:	bfa8      	it	ge
 801bace:	464b      	movge	r3, r9
 801bad0:	461f      	mov	r7, r3
 801bad2:	9b02      	ldr	r3, [sp, #8]
 801bad4:	4639      	mov	r1, r7
 801bad6:	1bde      	subs	r6, r3, r7
 801bad8:	eba9 0907 	sub.w	r9, r9, r7
 801badc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bae0:	465b      	mov	r3, fp
 801bae2:	f7e7 fc53 	bl	800338c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801bae6:	443c      	add	r4, r7
 801bae8:	e7cc      	b.n	801ba84 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801baea:	46c8      	mov	r8, r9
 801baec:	9e02      	ldr	r6, [sp, #8]
 801baee:	46b9      	mov	r9, r7
 801baf0:	e7c8      	b.n	801ba84 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801baf2:	2a01      	cmp	r2, #1
 801baf4:	d136      	bne.n	801bb64 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 801baf6:	f003 0103 	and.w	r1, r3, #3
 801bafa:	1ea8      	subs	r0, r5, #2
 801bafc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801bb00:	4408      	add	r0, r1
 801bb02:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801bb06:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801bb0a:	b2c0      	uxtb	r0, r0
 801bb0c:	f1a1 0102 	sub.w	r1, r1, #2
 801bb10:	f1a3 0302 	sub.w	r3, r3, #2
 801bb14:	f360 0507 	bfi	r5, r0, #0, #8
 801bb18:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801bb1c:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801bb20:	f361 250f 	bfi	r5, r1, #8, #8
 801bb24:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 801bb28:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801bb2c:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 801bb30:	f04f 0303 	mov.w	r3, #3
 801bb34:	fb13 ce08 	smlabb	lr, r3, r8, ip
 801bb38:	f04f 0c07 	mov.w	ip, #7
 801bb3c:	9b00      	ldr	r3, [sp, #0]
 801bb3e:	f368 4517 	bfi	r5, r8, #16, #8
 801bb42:	fb1c ec00 	smlabb	ip, ip, r0, lr
 801bb46:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 801bb4a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801bb4e:	f8cc 5004 	str.w	r5, [ip, #4]
 801bb52:	f040 80cd 	bne.w	801bcf0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801bb56:	7020      	strb	r0, [r4, #0]
 801bb58:	7061      	strb	r1, [r4, #1]
 801bb5a:	f884 8002 	strb.w	r8, [r4, #2]
 801bb5e:	3e01      	subs	r6, #1
 801bb60:	3403      	adds	r4, #3
 801bb62:	e0c1      	b.n	801bce8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801bb64:	2a02      	cmp	r2, #2
 801bb66:	d13d      	bne.n	801bbe4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 801bb68:	f898 1001 	ldrb.w	r1, [r8, #1]
 801bb6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bb70:	f108 0202 	add.w	r2, r8, #2
 801bb74:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801bb78:	b2c9      	uxtb	r1, r1
 801bb7a:	f1a3 0c20 	sub.w	ip, r3, #32
 801bb7e:	9207      	str	r2, [sp, #28]
 801bb80:	f001 000f 	and.w	r0, r1, #15
 801bb84:	f1a0 0008 	sub.w	r0, r0, #8
 801bb88:	4460      	add	r0, ip
 801bb8a:	4428      	add	r0, r5
 801bb8c:	b2c0      	uxtb	r0, r0
 801bb8e:	f360 0507 	bfi	r5, r0, #0, #8
 801bb92:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801bb96:	f1a2 0220 	sub.w	r2, r2, #32
 801bb9a:	4413      	add	r3, r2
 801bb9c:	ea4f 1221 	mov.w	r2, r1, asr #4
 801bba0:	b2db      	uxtb	r3, r3
 801bba2:	f1a2 0208 	sub.w	r2, r2, #8
 801bba6:	f363 250f 	bfi	r5, r3, #8, #8
 801bbaa:	4462      	add	r2, ip
 801bbac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801bbb0:	f04f 0c03 	mov.w	ip, #3
 801bbb4:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 801bbb8:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801bbbc:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 801bbc0:	f04f 0107 	mov.w	r1, #7
 801bbc4:	f362 4517 	bfi	r5, r2, #16, #8
 801bbc8:	fb11 c100 	smlabb	r1, r1, r0, ip
 801bbcc:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 801bbd0:	9900      	ldr	r1, [sp, #0]
 801bbd2:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 801bbd6:	604d      	str	r5, [r1, #4]
 801bbd8:	f040 8089 	bne.w	801bcee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801bbdc:	7020      	strb	r0, [r4, #0]
 801bbde:	7063      	strb	r3, [r4, #1]
 801bbe0:	70a2      	strb	r2, [r4, #2]
 801bbe2:	e7bc      	b.n	801bb5e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801bbe4:	2bfe      	cmp	r3, #254	@ 0xfe
 801bbe6:	d12f      	bne.n	801bc48 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 801bbe8:	f898 0001 	ldrb.w	r0, [r8, #1]
 801bbec:	f108 0304 	add.w	r3, r8, #4
 801bbf0:	f898 2002 	ldrb.w	r2, [r8, #2]
 801bbf4:	f04f 0c03 	mov.w	ip, #3
 801bbf8:	f898 1003 	ldrb.w	r1, [r8, #3]
 801bbfc:	b2c0      	uxtb	r0, r0
 801bbfe:	b2d2      	uxtb	r2, r2
 801bc00:	9307      	str	r3, [sp, #28]
 801bc02:	b2c9      	uxtb	r1, r1
 801bc04:	f360 0507 	bfi	r5, r0, #0, #8
 801bc08:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801bc0c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801bc10:	f362 250f 	bfi	r5, r2, #8, #8
 801bc14:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 801bc18:	f04f 0307 	mov.w	r3, #7
 801bc1c:	f361 4517 	bfi	r5, r1, #16, #8
 801bc20:	fb13 c300 	smlabb	r3, r3, r0, ip
 801bc24:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 801bc28:	9b00      	ldr	r3, [sp, #0]
 801bc2a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801bc2e:	605d      	str	r5, [r3, #4]
 801bc30:	d15d      	bne.n	801bcee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801bc32:	7020      	strb	r0, [r4, #0]
 801bc34:	7062      	strb	r2, [r4, #1]
 801bc36:	70a1      	strb	r1, [r4, #2]
 801bc38:	e791      	b.n	801bb5e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801bc3a:	bf00      	nop
 801bc3c:	240255cc 	.word	0x240255cc
 801bc40:	240255c6 	.word	0x240255c6
 801bc44:	24009740 	.word	0x24009740
 801bc48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bc4c:	1c5a      	adds	r2, r3, #1
 801bc4e:	b94b      	cbnz	r3, 801bc64 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 801bc50:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801bc54:	d14c      	bne.n	801bcf0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801bc56:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801bc5a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801bc5e:	7025      	strb	r5, [r4, #0]
 801bc60:	7062      	strb	r2, [r4, #1]
 801bc62:	e72b      	b.n	801babc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 801bc64:	4296      	cmp	r6, r2
 801bc66:	46b0      	mov	r8, r6
 801bc68:	bfa8      	it	ge
 801bc6a:	4690      	movge	r8, r2
 801bc6c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801bc70:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801bc74:	eba6 0608 	sub.w	r6, r6, r8
 801bc78:	eba2 0908 	sub.w	r9, r2, r8
 801bc7c:	9308      	str	r3, [sp, #32]
 801bc7e:	b2eb      	uxtb	r3, r5
 801bc80:	930c      	str	r3, [sp, #48]	@ 0x30
 801bc82:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801bc86:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bc88:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801bc8c:	930a      	str	r3, [sp, #40]	@ 0x28
 801bc8e:	9b08      	ldr	r3, [sp, #32]
 801bc90:	d030      	beq.n	801bcf4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 801bc92:	18fb      	adds	r3, r7, r3
 801bc94:	2bc0      	cmp	r3, #192	@ 0xc0
 801bc96:	dd15      	ble.n	801bcc4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 801bc98:	4650      	mov	r0, sl
 801bc9a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801bc9e:	f7e7 fb5b 	bl	8003358 <_ZN8touchgfx5paint9flushLineEPmi>
 801bca2:	2203      	movs	r2, #3
 801bca4:	4651      	mov	r1, sl
 801bca6:	465b      	mov	r3, fp
 801bca8:	4620      	mov	r0, r4
 801bcaa:	443c      	add	r4, r7
 801bcac:	fb97 f2f2 	sdiv	r2, r7, r2
 801bcb0:	f7e7 fb96 	bl	80033e0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801bcb4:	4b3d      	ldr	r3, [pc, #244]	@ (801bdac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 801bcb6:	2700      	movs	r7, #0
 801bcb8:	459a      	cmp	sl, r3
 801bcba:	bf0c      	ite	eq
 801bcbc:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 801bdb8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 801bcc0:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 801bdac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 801bcc4:	eb0a 0307 	add.w	r3, sl, r7
 801bcc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bcca:	f1b8 0801 	subs.w	r8, r8, #1
 801bcce:	f103 0303 	add.w	r3, r3, #3
 801bcd2:	f803 2c03 	strb.w	r2, [r3, #-3]
 801bcd6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bcd8:	f803 2c02 	strb.w	r2, [r3, #-2]
 801bcdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bcde:	f803 2c01 	strb.w	r2, [r3, #-1]
 801bce2:	d1f1      	bne.n	801bcc8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 801bce4:	9b08      	ldr	r3, [sp, #32]
 801bce6:	441f      	add	r7, r3
 801bce8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801bcec:	e6cb      	b.n	801ba86 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 801bcee:	2201      	movs	r2, #1
 801bcf0:	4690      	mov	r8, r2
 801bcf2:	e7bb      	b.n	801bc6c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 801bcf4:	4423      	add	r3, r4
 801bcf6:	42a3      	cmp	r3, r4
 801bcf8:	d9f6      	bls.n	801bce8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801bcfa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bcfc:	3403      	adds	r4, #3
 801bcfe:	f804 2c03 	strb.w	r2, [r4, #-3]
 801bd02:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bd04:	f804 2c02 	strb.w	r2, [r4, #-2]
 801bd08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bd0a:	f804 2c01 	strb.w	r2, [r4, #-1]
 801bd0e:	e7f2      	b.n	801bcf6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 801bd10:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801bd14:	d00e      	beq.n	801bd34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801bd16:	b16f      	cbz	r7, 801bd34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801bd18:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801bd1c:	4650      	mov	r0, sl
 801bd1e:	f7e7 fb1b 	bl	8003358 <_ZN8touchgfx5paint9flushLineEPmi>
 801bd22:	2203      	movs	r2, #3
 801bd24:	4620      	mov	r0, r4
 801bd26:	443c      	add	r4, r7
 801bd28:	465b      	mov	r3, fp
 801bd2a:	4651      	mov	r1, sl
 801bd2c:	fb97 f2f2 	sdiv	r2, r7, r2
 801bd30:	f7e7 fb56 	bl	80033e0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801bd34:	4b1e      	ldr	r3, [pc, #120]	@ (801bdb0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 801bd36:	9a02      	ldr	r2, [sp, #8]
 801bd38:	881b      	ldrh	r3, [r3, #0]
 801bd3a:	1a9b      	subs	r3, r3, r2
 801bd3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bd40:	441c      	add	r4, r3
 801bd42:	9b04      	ldr	r3, [sp, #16]
 801bd44:	3301      	adds	r3, #1
 801bd46:	9304      	str	r3, [sp, #16]
 801bd48:	9a04      	ldr	r2, [sp, #16]
 801bd4a:	9b01      	ldr	r3, [sp, #4]
 801bd4c:	4293      	cmp	r3, r2
 801bd4e:	d11c      	bne.n	801bd8a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 801bd50:	9b03      	ldr	r3, [sp, #12]
 801bd52:	2500      	movs	r5, #0
 801bd54:	9a03      	ldr	r2, [sp, #12]
 801bd56:	1c5e      	adds	r6, r3, #1
 801bd58:	9b05      	ldr	r3, [sp, #20]
 801bd5a:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 801bd5e:	4629      	mov	r1, r5
 801bd60:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801bd64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801bd68:	9b06      	ldr	r3, [sp, #24]
 801bd6a:	fa98 f888 	rev.w	r8, r8
 801bd6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd70:	4498      	add	r8, r3
 801bd72:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801bd76:	1aff      	subs	r7, r7, r3
 801bd78:	f007 ff32 	bl	8023be0 <memset>
 801bd7c:	b2bf      	uxth	r7, r7
 801bd7e:	e9cd 6503 	strd	r6, r5, [sp, #12]
 801bd82:	f7e7 fadf 	bl	8003344 <_ZN8touchgfx5paint8tearDownEv>
 801bd86:	46c1      	mov	r9, r8
 801bd88:	e5db      	b.n	801b942 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 801bd8a:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 801bd8e:	9b02      	ldr	r3, [sp, #8]
 801bd90:	1aff      	subs	r7, r7, r3
 801bd92:	eba7 0709 	sub.w	r7, r7, r9
 801bd96:	b2bf      	uxth	r7, r7
 801bd98:	e7f3      	b.n	801bd82 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 801bd9a:	4b06      	ldr	r3, [pc, #24]	@ (801bdb4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 801bd9c:	6818      	ldr	r0, [r3, #0]
 801bd9e:	6803      	ldr	r3, [r0, #0]
 801bda0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bda2:	4798      	blx	r3
 801bda4:	b013      	add	sp, #76	@ 0x4c
 801bda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdaa:	bf00      	nop
 801bdac:	24009740 	.word	0x24009740
 801bdb0:	240255c6 	.word	0x240255c6
 801bdb4:	240255cc 	.word	0x240255cc
 801bdb8:	24009840 	.word	0x24009840

0801bdbc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801bdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bdc0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801bdc4:	9c06      	ldr	r4, [sp, #24]
 801bdc6:	2800      	cmp	r0, #0
 801bdc8:	d06e      	beq.n	801bea8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801bdca:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801bdce:	2d00      	cmp	r5, #0
 801bdd0:	dd6a      	ble.n	801bea8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801bdd2:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801bdd6:	f1bc 0f00 	cmp.w	ip, #0
 801bdda:	dd65      	ble.n	801bea8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801bddc:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801bde0:	28ff      	cmp	r0, #255	@ 0xff
 801bde2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bde6:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801bdea:	fb02 3306 	mla	r3, r2, r6, r3
 801bdee:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801bdf2:	b2e4      	uxtb	r4, r4
 801bdf4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bdf8:	4419      	add	r1, r3
 801bdfa:	fb02 f30c 	mul.w	r3, r2, ip
 801bdfe:	eba2 0205 	sub.w	r2, r2, r5
 801be02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801be06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801be0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801be0e:	440b      	add	r3, r1
 801be10:	d03e      	beq.n	801be90 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801be12:	fa1f fc80 	uxth.w	ip, r0
 801be16:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801be1a:	fb06 f60c 	mul.w	r6, r6, ip
 801be1e:	b280      	uxth	r0, r0
 801be20:	fb07 f70c 	mul.w	r7, r7, ip
 801be24:	fb04 f40c 	mul.w	r4, r4, ip
 801be28:	4299      	cmp	r1, r3
 801be2a:	d23d      	bcs.n	801bea8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801be2c:	eb01 0c05 	add.w	ip, r1, r5
 801be30:	458c      	cmp	ip, r1
 801be32:	f101 0e03 	add.w	lr, r1, #3
 801be36:	d928      	bls.n	801be8a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801be38:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801be3c:	fb11 f100 	smulbb	r1, r1, r0
 801be40:	4421      	add	r1, r4
 801be42:	b289      	uxth	r1, r1
 801be44:	f101 0801 	add.w	r8, r1, #1
 801be48:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801be4c:	1209      	asrs	r1, r1, #8
 801be4e:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801be52:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801be56:	fb11 f100 	smulbb	r1, r1, r0
 801be5a:	4439      	add	r1, r7
 801be5c:	b289      	uxth	r1, r1
 801be5e:	f101 0801 	add.w	r8, r1, #1
 801be62:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801be66:	1209      	asrs	r1, r1, #8
 801be68:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801be6c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801be70:	fb11 f100 	smulbb	r1, r1, r0
 801be74:	4431      	add	r1, r6
 801be76:	b289      	uxth	r1, r1
 801be78:	f101 0801 	add.w	r8, r1, #1
 801be7c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801be80:	1209      	asrs	r1, r1, #8
 801be82:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801be86:	4671      	mov	r1, lr
 801be88:	e7d2      	b.n	801be30 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801be8a:	4411      	add	r1, r2
 801be8c:	e7cc      	b.n	801be28 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801be8e:	4411      	add	r1, r2
 801be90:	4299      	cmp	r1, r3
 801be92:	d209      	bcs.n	801bea8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801be94:	1948      	adds	r0, r1, r5
 801be96:	4281      	cmp	r1, r0
 801be98:	d2f9      	bcs.n	801be8e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801be9a:	700c      	strb	r4, [r1, #0]
 801be9c:	3103      	adds	r1, #3
 801be9e:	f801 7c02 	strb.w	r7, [r1, #-2]
 801bea2:	f801 6c01 	strb.w	r6, [r1, #-1]
 801bea6:	e7f6      	b.n	801be96 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801bea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801beac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801beac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801beb0:	b093      	sub	sp, #76	@ 0x4c
 801beb2:	4699      	mov	r9, r3
 801beb4:	4617      	mov	r7, r2
 801beb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801beba:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801bebe:	4604      	mov	r4, r0
 801bec0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bec4:	a80c      	add	r0, sp, #48	@ 0x30
 801bec6:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801beca:	460d      	mov	r5, r1
 801becc:	4649      	mov	r1, r9
 801bece:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801bed2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801bed6:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801beda:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801bede:	f7f3 fa39 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 801bee2:	4639      	mov	r1, r7
 801bee4:	a80c      	add	r0, sp, #48	@ 0x30
 801bee6:	f7f3 fa35 	bl	800f354 <_ZN8touchgfx4RectaNERKS0_>
 801beea:	4b78      	ldr	r3, [pc, #480]	@ (801c0cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801beec:	8818      	ldrh	r0, [r3, #0]
 801beee:	4b78      	ldr	r3, [pc, #480]	@ (801c0d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801bef0:	b202      	sxth	r2, r0
 801bef2:	8819      	ldrh	r1, [r3, #0]
 801bef4:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801bef8:	b20f      	sxth	r7, r1
 801befa:	2b00      	cmp	r3, #0
 801befc:	da07      	bge.n	801bf0e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801befe:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801bf02:	4463      	add	r3, ip
 801bf04:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801bf08:	2300      	movs	r3, #0
 801bf0a:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801bf0e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801bf12:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801bf16:	1ad2      	subs	r2, r2, r3
 801bf18:	4594      	cmp	ip, r2
 801bf1a:	bfc4      	itt	gt
 801bf1c:	1ac2      	subgt	r2, r0, r3
 801bf1e:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801bf22:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801bf26:	2a00      	cmp	r2, #0
 801bf28:	da07      	bge.n	801bf3a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801bf2a:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801bf2e:	4462      	add	r2, ip
 801bf30:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801bf34:	2200      	movs	r2, #0
 801bf36:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801bf3a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801bf3e:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801bf42:	1abf      	subs	r7, r7, r2
 801bf44:	45bc      	cmp	ip, r7
 801bf46:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801c0d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801bf4a:	bfc8      	it	gt
 801bf4c:	1a8f      	subgt	r7, r1, r2
 801bf4e:	f89c c000 	ldrb.w	ip, [ip]
 801bf52:	bfc8      	it	gt
 801bf54:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801bf58:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801bf5c:	f1bc 0f00 	cmp.w	ip, #0
 801bf60:	d176      	bne.n	801c050 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801bf62:	4287      	cmp	r7, r0
 801bf64:	bf14      	ite	ne
 801bf66:	2100      	movne	r1, #0
 801bf68:	2101      	moveq	r1, #1
 801bf6a:	2f00      	cmp	r7, #0
 801bf6c:	9107      	str	r1, [sp, #28]
 801bf6e:	dd73      	ble.n	801c058 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801bf70:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801bf74:	2900      	cmp	r1, #0
 801bf76:	9104      	str	r1, [sp, #16]
 801bf78:	dd6e      	ble.n	801c058 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801bf7a:	f8b9 1000 	ldrh.w	r1, [r9]
 801bf7e:	a80e      	add	r0, sp, #56	@ 0x38
 801bf80:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801bf84:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801bf88:	1a5b      	subs	r3, r3, r1
 801bf8a:	a910      	add	r1, sp, #64	@ 0x40
 801bf8c:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801bf90:	b21b      	sxth	r3, r3
 801bf92:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801bf96:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801c0dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801bf9a:	9305      	str	r3, [sp, #20]
 801bf9c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801bfa0:	1ad2      	subs	r2, r2, r3
 801bfa2:	b213      	sxth	r3, r2
 801bfa4:	9306      	str	r3, [sp, #24]
 801bfa6:	9b05      	ldr	r3, [sp, #20]
 801bfa8:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801bfac:	9b06      	ldr	r3, [sp, #24]
 801bfae:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801bfb2:	9b04      	ldr	r3, [sp, #16]
 801bfb4:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801bfb8:	2300      	movs	r3, #0
 801bfba:	9310      	str	r3, [sp, #64]	@ 0x40
 801bfbc:	f7f8 fab0 	bl	8014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bfc0:	4640      	mov	r0, r8
 801bfc2:	f7f8 fa85 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bfc6:	a810      	add	r0, sp, #64	@ 0x40
 801bfc8:	f7f8 fa82 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bfcc:	4b41      	ldr	r3, [pc, #260]	@ (801c0d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801bfce:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801bfd2:	4628      	mov	r0, r5
 801bfd4:	881b      	ldrh	r3, [r3, #0]
 801bfd6:	9308      	str	r3, [sp, #32]
 801bfd8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801bfdc:	b21b      	sxth	r3, r3
 801bfde:	9303      	str	r3, [sp, #12]
 801bfe0:	682b      	ldr	r3, [r5, #0]
 801bfe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bfe4:	4798      	blx	r3
 801bfe6:	9a03      	ldr	r2, [sp, #12]
 801bfe8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801bfec:	4681      	mov	r9, r0
 801bfee:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801bff2:	fb13 f302 	smulbb	r3, r3, r2
 801bff6:	2203      	movs	r2, #3
 801bff8:	f8da 0000 	ldr.w	r0, [sl]
 801bffc:	fb15 3302 	smlabb	r3, r5, r2, r3
 801c000:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801c002:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c004:	441d      	add	r5, r3
 801c006:	6803      	ldr	r3, [r0, #0]
 801c008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c00a:	4798      	blx	r3
 801c00c:	9009      	str	r0, [sp, #36]	@ 0x24
 801c00e:	f8da 0000 	ldr.w	r0, [sl]
 801c012:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801c016:	6803      	ldr	r3, [r0, #0]
 801c018:	910a      	str	r1, [sp, #40]	@ 0x28
 801c01a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c01c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801c020:	4798      	blx	r3
 801c022:	f010 0f01 	tst.w	r0, #1
 801c026:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801c02a:	d01e      	beq.n	801c06a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801c02c:	f8da 0000 	ldr.w	r0, [sl]
 801c030:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801c034:	6803      	ldr	r3, [r0, #0]
 801c036:	9200      	str	r2, [sp, #0]
 801c038:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 801c03a:	462b      	mov	r3, r5
 801c03c:	e898 0006 	ldmia.w	r8, {r1, r2}
 801c040:	47b0      	blx	r6
 801c042:	9b05      	ldr	r3, [sp, #20]
 801c044:	80a7      	strh	r7, [r4, #4]
 801c046:	8023      	strh	r3, [r4, #0]
 801c048:	9b06      	ldr	r3, [sp, #24]
 801c04a:	8063      	strh	r3, [r4, #2]
 801c04c:	9b04      	ldr	r3, [sp, #16]
 801c04e:	e007      	b.n	801c060 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801c050:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801c054:	4288      	cmp	r0, r1
 801c056:	e785      	b.n	801bf64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801c058:	2300      	movs	r3, #0
 801c05a:	8023      	strh	r3, [r4, #0]
 801c05c:	8063      	strh	r3, [r4, #2]
 801c05e:	80a3      	strh	r3, [r4, #4]
 801c060:	4620      	mov	r0, r4
 801c062:	80e3      	strh	r3, [r4, #6]
 801c064:	b013      	add	sp, #76	@ 0x4c
 801c066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c06a:	fb09 f606 	mul.w	r6, r9, r6
 801c06e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c070:	fb11 6602 	smlabb	r6, r1, r2, r6
 801c074:	9a07      	ldr	r2, [sp, #28]
 801c076:	4433      	add	r3, r6
 801c078:	461e      	mov	r6, r3
 801c07a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801c07e:	b16a      	cbz	r2, 801c09c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801c080:	9a08      	ldr	r2, [sp, #32]
 801c082:	4593      	cmp	fp, r2
 801c084:	d10a      	bne.n	801c09c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801c086:	f8da 0000 	ldr.w	r0, [sl]
 801c08a:	fb09 f303 	mul.w	r3, r9, r3
 801c08e:	4629      	mov	r1, r5
 801c090:	6802      	ldr	r2, [r0, #0]
 801c092:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801c096:	4632      	mov	r2, r6
 801c098:	47d0      	blx	sl
 801c09a:	e7d2      	b.n	801c042 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801c09c:	9a03      	ldr	r2, [sp, #12]
 801c09e:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801c0dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801c0a2:	fb02 5803 	mla	r8, r2, r3, r5
 801c0a6:	4545      	cmp	r5, r8
 801c0a8:	d2cb      	bcs.n	801c042 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801c0aa:	f8db 0000 	ldr.w	r0, [fp]
 801c0ae:	4629      	mov	r1, r5
 801c0b0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801c0b4:	6802      	ldr	r2, [r0, #0]
 801c0b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c0ba:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801c0be:	4632      	mov	r2, r6
 801c0c0:	47d0      	blx	sl
 801c0c2:	9b03      	ldr	r3, [sp, #12]
 801c0c4:	444e      	add	r6, r9
 801c0c6:	441d      	add	r5, r3
 801c0c8:	e7ed      	b.n	801c0a6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801c0ca:	bf00      	nop
 801c0cc:	240255c0 	.word	0x240255c0
 801c0d0:	240255c2 	.word	0x240255c2
 801c0d4:	240255c6 	.word	0x240255c6
 801c0d8:	240255c4 	.word	0x240255c4
 801c0dc:	240255cc 	.word	0x240255cc

0801c0e0 <_ZN8touchgfx8LCD24bppC1Ev>:
 801c0e0:	2200      	movs	r2, #0
 801c0e2:	490e      	ldr	r1, [pc, #56]	@ (801c11c <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801c0e4:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801c0e8:	6001      	str	r1, [r0, #0]
 801c0ea:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801c0ee:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801c0f2:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801c0f6:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801c0fa:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801c0fe:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801c102:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801c106:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801c10a:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801c10e:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801c112:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801c116:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801c11a:	4770      	bx	lr
 801c11c:	08027788 	.word	0x08027788

0801c120 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801c120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c124:	b091      	sub	sp, #68	@ 0x44
 801c126:	4607      	mov	r7, r0
 801c128:	4688      	mov	r8, r1
 801c12a:	6810      	ldr	r0, [r2, #0]
 801c12c:	6851      	ldr	r1, [r2, #4]
 801c12e:	ac0c      	add	r4, sp, #48	@ 0x30
 801c130:	4616      	mov	r6, r2
 801c132:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801c136:	4d64      	ldr	r5, [pc, #400]	@ (801c2c8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801c138:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801c2cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801c13c:	c403      	stmia	r4!, {r0, r1}
 801c13e:	6818      	ldr	r0, [r3, #0]
 801c140:	ac0e      	add	r4, sp, #56	@ 0x38
 801c142:	6859      	ldr	r1, [r3, #4]
 801c144:	c403      	stmia	r4!, {r0, r1}
 801c146:	a80c      	add	r0, sp, #48	@ 0x30
 801c148:	f7f8 f9c2 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c14c:	4631      	mov	r1, r6
 801c14e:	a80e      	add	r0, sp, #56	@ 0x38
 801c150:	f7f8 f9e6 	bl	8014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c154:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801c158:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801c15c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801c160:	6828      	ldr	r0, [r5, #0]
 801c162:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c166:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801c16a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801c16e:	440f      	add	r7, r1
 801c170:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801c174:	440a      	add	r2, r1
 801c176:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801c17a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801c17e:	4413      	add	r3, r2
 801c180:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801c184:	6803      	ldr	r3, [r0, #0]
 801c186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c188:	4798      	blx	r3
 801c18a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801c18e:	6828      	ldr	r0, [r5, #0]
 801c190:	d01f      	beq.n	801c1d2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801c192:	2201      	movs	r2, #1
 801c194:	2500      	movs	r5, #0
 801c196:	6801      	ldr	r1, [r0, #0]
 801c198:	b2a4      	uxth	r4, r4
 801c19a:	b2b6      	uxth	r6, r6
 801c19c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801c1a0:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801c1a4:	250b      	movs	r5, #11
 801c1a6:	9507      	str	r5, [sp, #28]
 801c1a8:	f8ba 5000 	ldrh.w	r5, [sl]
 801c1ac:	f8cd 9010 	str.w	r9, [sp, #16]
 801c1b0:	9602      	str	r6, [sp, #8]
 801c1b2:	9401      	str	r4, [sp, #4]
 801c1b4:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801c1b8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801c1bc:	9203      	str	r2, [sp, #12]
 801c1be:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801c1c2:	9200      	str	r2, [sp, #0]
 801c1c4:	4642      	mov	r2, r8
 801c1c6:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 801c1c8:	4639      	mov	r1, r7
 801c1ca:	47a0      	blx	r4
 801c1cc:	b011      	add	sp, #68	@ 0x44
 801c1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1d2:	6803      	ldr	r3, [r0, #0]
 801c1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1d6:	4798      	blx	r3
 801c1d8:	f8ba 5000 	ldrh.w	r5, [sl]
 801c1dc:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801c1e0:	f04f 0e04 	mov.w	lr, #4
 801c1e4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801c1e8:	436e      	muls	r6, r5
 801c1ea:	fb05 2303 	mla	r3, r5, r3, r2
 801c1ee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c1f2:	1b2d      	subs	r5, r5, r4
 801c1f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c1f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c1fc:	4418      	add	r0, r3
 801c1fe:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801c202:	1982      	adds	r2, r0, r6
 801c204:	1b1b      	subs	r3, r3, r4
 801c206:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c20a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c20c:	4290      	cmp	r0, r2
 801c20e:	d254      	bcs.n	801c2ba <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801c210:	eb00 0a04 	add.w	sl, r0, r4
 801c214:	4550      	cmp	r0, sl
 801c216:	d24c      	bcs.n	801c2b2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801c218:	f817 1b01 	ldrb.w	r1, [r7], #1
 801c21c:	fb1e e101 	smlabb	r1, lr, r1, lr
 801c220:	eb08 0c01 	add.w	ip, r8, r1
 801c224:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801c228:	b173      	cbz	r3, 801c248 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801c22a:	2bff      	cmp	r3, #255	@ 0xff
 801c22c:	f818 b001 	ldrb.w	fp, [r8, r1]
 801c230:	d10c      	bne.n	801c24c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801c232:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801c236:	d109      	bne.n	801c24c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801c238:	f880 b000 	strb.w	fp, [r0]
 801c23c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801c240:	7043      	strb	r3, [r0, #1]
 801c242:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801c246:	7083      	strb	r3, [r0, #2]
 801c248:	3003      	adds	r0, #3
 801c24a:	e7e3      	b.n	801c214 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801c24c:	fb09 f103 	mul.w	r1, r9, r3
 801c250:	1c4b      	adds	r3, r1, #1
 801c252:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801c256:	7801      	ldrb	r1, [r0, #0]
 801c258:	121b      	asrs	r3, r3, #8
 801c25a:	b29e      	uxth	r6, r3
 801c25c:	43db      	mvns	r3, r3
 801c25e:	fb1b fb06 	smulbb	fp, fp, r6
 801c262:	b2db      	uxtb	r3, r3
 801c264:	fb01 b103 	mla	r1, r1, r3, fp
 801c268:	b289      	uxth	r1, r1
 801c26a:	f101 0b01 	add.w	fp, r1, #1
 801c26e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801c272:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c276:	fb1b fb03 	smulbb	fp, fp, r3
 801c27a:	1209      	asrs	r1, r1, #8
 801c27c:	7001      	strb	r1, [r0, #0]
 801c27e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801c282:	fb01 b106 	mla	r1, r1, r6, fp
 801c286:	b289      	uxth	r1, r1
 801c288:	f101 0b01 	add.w	fp, r1, #1
 801c28c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801c290:	1209      	asrs	r1, r1, #8
 801c292:	7041      	strb	r1, [r0, #1]
 801c294:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801c298:	f890 c002 	ldrb.w	ip, [r0, #2]
 801c29c:	fb1c f303 	smulbb	r3, ip, r3
 801c2a0:	fb01 3606 	mla	r6, r1, r6, r3
 801c2a4:	b2b6      	uxth	r6, r6
 801c2a6:	1c73      	adds	r3, r6, #1
 801c2a8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801c2ac:	1236      	asrs	r6, r6, #8
 801c2ae:	7086      	strb	r6, [r0, #2]
 801c2b0:	e7ca      	b.n	801c248 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801c2b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c2b4:	4428      	add	r0, r5
 801c2b6:	441f      	add	r7, r3
 801c2b8:	e7a8      	b.n	801c20c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801c2ba:	4b03      	ldr	r3, [pc, #12]	@ (801c2c8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801c2bc:	6818      	ldr	r0, [r3, #0]
 801c2be:	6803      	ldr	r3, [r0, #0]
 801c2c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c2c2:	4798      	blx	r3
 801c2c4:	e782      	b.n	801c1cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801c2c6:	bf00      	nop
 801c2c8:	240255cc 	.word	0x240255cc
 801c2cc:	240255c6 	.word	0x240255c6

0801c2d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801c2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2d4:	b091      	sub	sp, #68	@ 0x44
 801c2d6:	4680      	mov	r8, r0
 801c2d8:	460e      	mov	r6, r1
 801c2da:	6810      	ldr	r0, [r2, #0]
 801c2dc:	6851      	ldr	r1, [r2, #4]
 801c2de:	ad0c      	add	r5, sp, #48	@ 0x30
 801c2e0:	4614      	mov	r4, r2
 801c2e2:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801c2e6:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801c480 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801c2ea:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801c484 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801c2ee:	c503      	stmia	r5!, {r0, r1}
 801c2f0:	6818      	ldr	r0, [r3, #0]
 801c2f2:	ad0e      	add	r5, sp, #56	@ 0x38
 801c2f4:	6859      	ldr	r1, [r3, #4]
 801c2f6:	c503      	stmia	r5!, {r0, r1}
 801c2f8:	a80c      	add	r0, sp, #48	@ 0x30
 801c2fa:	f7f8 f8e9 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c2fe:	4621      	mov	r1, r4
 801c300:	a80e      	add	r0, sp, #56	@ 0x38
 801c302:	f7f8 f90d 	bl	8014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c306:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801c30a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801c30e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801c312:	f8d9 0000 	ldr.w	r0, [r9]
 801c316:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c31a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801c31e:	eb08 0401 	add.w	r4, r8, r1
 801c322:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801c326:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801c32a:	440a      	add	r2, r1
 801c32c:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801c330:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801c334:	4413      	add	r3, r2
 801c336:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801c33a:	6803      	ldr	r3, [r0, #0]
 801c33c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c33e:	4798      	blx	r3
 801c340:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801c344:	f8d9 0000 	ldr.w	r0, [r9]
 801c348:	d022      	beq.n	801c390 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801c34a:	2200      	movs	r2, #0
 801c34c:	f04f 0c01 	mov.w	ip, #1
 801c350:	6801      	ldr	r1, [r0, #0]
 801c352:	b2ad      	uxth	r5, r5
 801c354:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801c358:	e9cd c208 	strd	ip, r2, [sp, #32]
 801c35c:	f04f 0c0b 	mov.w	ip, #11
 801c360:	f8cd c01c 	str.w	ip, [sp, #28]
 801c364:	f8ba c000 	ldrh.w	ip, [sl]
 801c368:	9704      	str	r7, [sp, #16]
 801c36a:	9502      	str	r5, [sp, #8]
 801c36c:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801c370:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801c374:	9203      	str	r2, [sp, #12]
 801c376:	fa1f f288 	uxth.w	r2, r8
 801c37a:	9201      	str	r2, [sp, #4]
 801c37c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801c380:	9200      	str	r2, [sp, #0]
 801c382:	4632      	mov	r2, r6
 801c384:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 801c386:	4621      	mov	r1, r4
 801c388:	47a8      	blx	r5
 801c38a:	b011      	add	sp, #68	@ 0x44
 801c38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c390:	6803      	ldr	r3, [r0, #0]
 801c392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c394:	4798      	blx	r3
 801c396:	f8ba 2000 	ldrh.w	r2, [sl]
 801c39a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801c39e:	f04f 0e03 	mov.w	lr, #3
 801c3a2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801c3a6:	4355      	muls	r5, r2
 801c3a8:	fa1f fc87 	uxth.w	ip, r7
 801c3ac:	fb02 1303 	mla	r3, r2, r3, r1
 801c3b0:	eba2 0208 	sub.w	r2, r2, r8
 801c3b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c3b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c3c0:	4418      	add	r0, r3
 801c3c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c3c4:	1943      	adds	r3, r0, r5
 801c3c6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801c3ca:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801c3ce:	eba2 0208 	sub.w	r2, r2, r8
 801c3d2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c3d6:	b2ad      	uxth	r5, r5
 801c3d8:	4298      	cmp	r0, r3
 801c3da:	d24a      	bcs.n	801c472 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801c3dc:	eb00 0908 	add.w	r9, r0, r8
 801c3e0:	4621      	mov	r1, r4
 801c3e2:	4548      	cmp	r0, r9
 801c3e4:	460c      	mov	r4, r1
 801c3e6:	d240      	bcs.n	801c46a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801c3e8:	f04f 0a04 	mov.w	sl, #4
 801c3ec:	7824      	ldrb	r4, [r4, #0]
 801c3ee:	2fff      	cmp	r7, #255	@ 0xff
 801c3f0:	f101 0101 	add.w	r1, r1, #1
 801c3f4:	fb1e a404 	smlabb	r4, lr, r4, sl
 801c3f8:	eb06 0a04 	add.w	sl, r6, r4
 801c3fc:	f816 b004 	ldrb.w	fp, [r6, r4]
 801c400:	d02b      	beq.n	801c45a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801c402:	7804      	ldrb	r4, [r0, #0]
 801c404:	fb14 f405 	smulbb	r4, r4, r5
 801c408:	fb0b 440c 	mla	r4, fp, ip, r4
 801c40c:	b2a4      	uxth	r4, r4
 801c40e:	f104 0b01 	add.w	fp, r4, #1
 801c412:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801c416:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c41a:	fb1b fb05 	smulbb	fp, fp, r5
 801c41e:	1224      	asrs	r4, r4, #8
 801c420:	7004      	strb	r4, [r0, #0]
 801c422:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801c426:	fb04 b40c 	mla	r4, r4, ip, fp
 801c42a:	b2a4      	uxth	r4, r4
 801c42c:	f104 0b01 	add.w	fp, r4, #1
 801c430:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801c434:	1224      	asrs	r4, r4, #8
 801c436:	7044      	strb	r4, [r0, #1]
 801c438:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801c43c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801c440:	fb1a fa05 	smulbb	sl, sl, r5
 801c444:	fb04 a40c 	mla	r4, r4, ip, sl
 801c448:	b2a4      	uxth	r4, r4
 801c44a:	f104 0a01 	add.w	sl, r4, #1
 801c44e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801c452:	1224      	asrs	r4, r4, #8
 801c454:	7084      	strb	r4, [r0, #2]
 801c456:	3003      	adds	r0, #3
 801c458:	e7c3      	b.n	801c3e2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801c45a:	f880 b000 	strb.w	fp, [r0]
 801c45e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801c462:	7044      	strb	r4, [r0, #1]
 801c464:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801c468:	e7f4      	b.n	801c454 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801c46a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c46c:	4420      	add	r0, r4
 801c46e:	188c      	adds	r4, r1, r2
 801c470:	e7b2      	b.n	801c3d8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801c472:	4b03      	ldr	r3, [pc, #12]	@ (801c480 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801c474:	6818      	ldr	r0, [r3, #0]
 801c476:	6803      	ldr	r3, [r0, #0]
 801c478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c47a:	4798      	blx	r3
 801c47c:	e785      	b.n	801c38a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801c47e:	bf00      	nop
 801c480:	240255cc 	.word	0x240255cc
 801c484:	240255c6 	.word	0x240255c6

0801c488 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801c488:	b4f0      	push	{r4, r5, r6, r7}
 801c48a:	460c      	mov	r4, r1
 801c48c:	4611      	mov	r1, r2
 801c48e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801c492:	461a      	mov	r2, r3
 801c494:	780f      	ldrb	r7, [r1, #0]
 801c496:	9b04      	ldr	r3, [sp, #16]
 801c498:	784e      	ldrb	r6, [r1, #1]
 801c49a:	b11f      	cbz	r7, 801c4a4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801c49c:	2f01      	cmp	r7, #1
 801c49e:	d01d      	beq.n	801c4dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801c4a0:	bcf0      	pop	{r4, r5, r6, r7}
 801c4a2:	4770      	bx	lr
 801c4a4:	2e03      	cmp	r6, #3
 801c4a6:	d8fb      	bhi.n	801c4a0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801c4a8:	e8df f006 	tbb	[pc, r6]
 801c4ac:	16140702 	.word	0x16140702
 801c4b0:	9504      	str	r5, [sp, #16]
 801c4b2:	4620      	mov	r0, r4
 801c4b4:	bcf0      	pop	{r4, r5, r6, r7}
 801c4b6:	f7ff be33 	b.w	801c120 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801c4ba:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801c4bc:	2800      	cmp	r0, #0
 801c4be:	d0ef      	beq.n	801c4a0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801c4c0:	6806      	ldr	r6, [r0, #0]
 801c4c2:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801c4c6:	68f5      	ldr	r5, [r6, #12]
 801c4c8:	4613      	mov	r3, r2
 801c4ca:	46ac      	mov	ip, r5
 801c4cc:	460a      	mov	r2, r1
 801c4ce:	4621      	mov	r1, r4
 801c4d0:	bcf0      	pop	{r4, r5, r6, r7}
 801c4d2:	4760      	bx	ip
 801c4d4:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801c4d6:	e7f1      	b.n	801c4bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801c4d8:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801c4da:	e7ef      	b.n	801c4bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801c4dc:	2e03      	cmp	r6, #3
 801c4de:	d8df      	bhi.n	801c4a0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801c4e0:	e8df f006 	tbb	[pc, r6]
 801c4e4:	110f0702 	.word	0x110f0702
 801c4e8:	9504      	str	r5, [sp, #16]
 801c4ea:	4620      	mov	r0, r4
 801c4ec:	bcf0      	pop	{r4, r5, r6, r7}
 801c4ee:	f7ff beef 	b.w	801c2d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801c4f2:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801c4f4:	2800      	cmp	r0, #0
 801c4f6:	d0d3      	beq.n	801c4a0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801c4f8:	6806      	ldr	r6, [r0, #0]
 801c4fa:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801c4fe:	68b5      	ldr	r5, [r6, #8]
 801c500:	e7e2      	b.n	801c4c8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801c502:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801c504:	e7f6      	b.n	801c4f4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801c506:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801c508:	e7f4      	b.n	801c4f4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801c50c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801c50c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c510:	4605      	mov	r5, r0
 801c512:	b08f      	sub	sp, #60	@ 0x3c
 801c514:	460c      	mov	r4, r1
 801c516:	461f      	mov	r7, r3
 801c518:	2b00      	cmp	r3, #0
 801c51a:	d052      	beq.n	801c5c2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801c51c:	6808      	ldr	r0, [r1, #0]
 801c51e:	ab0a      	add	r3, sp, #40	@ 0x28
 801c520:	6849      	ldr	r1, [r1, #4]
 801c522:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801c6ec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801c526:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801c6f0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801c52a:	c303      	stmia	r3!, {r0, r1}
 801c52c:	6810      	ldr	r0, [r2, #0]
 801c52e:	ab0c      	add	r3, sp, #48	@ 0x30
 801c530:	6851      	ldr	r1, [r2, #4]
 801c532:	c303      	stmia	r3!, {r0, r1}
 801c534:	a80a      	add	r0, sp, #40	@ 0x28
 801c536:	f7f7 ffcb 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c53a:	4621      	mov	r1, r4
 801c53c:	a80c      	add	r0, sp, #48	@ 0x30
 801c53e:	f7f7 ffef 	bl	8014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c542:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801c546:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801c54a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801c54e:	f8d8 0000 	ldr.w	r0, [r8]
 801c552:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c556:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801c55a:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801c55e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801c562:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801c566:	440a      	add	r2, r1
 801c568:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801c56c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801c570:	4413      	add	r3, r2
 801c572:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801c576:	6803      	ldr	r3, [r0, #0]
 801c578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c57a:	4798      	blx	r3
 801c57c:	2fff      	cmp	r7, #255	@ 0xff
 801c57e:	d023      	beq.n	801c5c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801c580:	f010 0f04 	tst.w	r0, #4
 801c584:	f8d8 0000 	ldr.w	r0, [r8]
 801c588:	d021      	beq.n	801c5ce <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801c58a:	2100      	movs	r1, #0
 801c58c:	f04f 0e01 	mov.w	lr, #1
 801c590:	f8d0 c000 	ldr.w	ip, [r0]
 801c594:	b2a4      	uxth	r4, r4
 801c596:	9106      	str	r1, [sp, #24]
 801c598:	b2b6      	uxth	r6, r6
 801c59a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801c59e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801c5a2:	e9cd e107 	strd	lr, r1, [sp, #28]
 801c5a6:	f8b9 e000 	ldrh.w	lr, [r9]
 801c5aa:	9703      	str	r7, [sp, #12]
 801c5ac:	9401      	str	r4, [sp, #4]
 801c5ae:	9600      	str	r6, [sp, #0]
 801c5b0:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801c5b4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801c5b8:	9102      	str	r1, [sp, #8]
 801c5ba:	4629      	mov	r1, r5
 801c5bc:	f8dc 4044 	ldr.w	r4, [ip, #68]	@ 0x44
 801c5c0:	47a0      	blx	r4
 801c5c2:	b00f      	add	sp, #60	@ 0x3c
 801c5c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c5c8:	f010 0f01 	tst.w	r0, #1
 801c5cc:	e7da      	b.n	801c584 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801c5ce:	6803      	ldr	r3, [r0, #0]
 801c5d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c5d2:	4798      	blx	r3
 801c5d4:	f8b9 1000 	ldrh.w	r1, [r9]
 801c5d8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801c5dc:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801c5e0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801c5e4:	434c      	muls	r4, r1
 801c5e6:	2fff      	cmp	r7, #255	@ 0xff
 801c5e8:	fb01 2303 	mla	r3, r1, r3, r2
 801c5ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c5f0:	eba1 0106 	sub.w	r1, r1, r6
 801c5f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c5f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c5fc:	4418      	add	r0, r3
 801c5fe:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801c602:	eba3 0606 	sub.w	r6, r3, r6
 801c606:	4404      	add	r4, r0
 801c608:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801c60c:	d04a      	beq.n	801c6a4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801c60e:	43fa      	mvns	r2, r7
 801c610:	b2bb      	uxth	r3, r7
 801c612:	b2d7      	uxtb	r7, r2
 801c614:	42a0      	cmp	r0, r4
 801c616:	d263      	bcs.n	801c6e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801c618:	eb00 0e0c 	add.w	lr, r0, ip
 801c61c:	4586      	cmp	lr, r0
 801c61e:	f100 0803 	add.w	r8, r0, #3
 801c622:	d93a      	bls.n	801c69a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801c624:	f835 2b02 	ldrh.w	r2, [r5], #2
 801c628:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801c62c:	00d0      	lsls	r0, r2, #3
 801c62e:	fb19 f907 	smulbb	r9, r9, r7
 801c632:	b2c0      	uxtb	r0, r0
 801c634:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801c638:	fb00 9003 	mla	r0, r0, r3, r9
 801c63c:	b280      	uxth	r0, r0
 801c63e:	f100 0901 	add.w	r9, r0, #1
 801c642:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801c646:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801c64a:	fb19 f907 	smulbb	r9, r9, r7
 801c64e:	1200      	asrs	r0, r0, #8
 801c650:	f808 0c03 	strb.w	r0, [r8, #-3]
 801c654:	10d0      	asrs	r0, r2, #3
 801c656:	1212      	asrs	r2, r2, #8
 801c658:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801c65c:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801c660:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801c664:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c668:	fb00 9003 	mla	r0, r0, r3, r9
 801c66c:	b280      	uxth	r0, r0
 801c66e:	f100 0901 	add.w	r9, r0, #1
 801c672:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801c676:	1200      	asrs	r0, r0, #8
 801c678:	f808 0c02 	strb.w	r0, [r8, #-2]
 801c67c:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801c680:	fb10 f007 	smulbb	r0, r0, r7
 801c684:	fb02 0203 	mla	r2, r2, r3, r0
 801c688:	b292      	uxth	r2, r2
 801c68a:	1c50      	adds	r0, r2, #1
 801c68c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c690:	4640      	mov	r0, r8
 801c692:	1212      	asrs	r2, r2, #8
 801c694:	f808 2c01 	strb.w	r2, [r8, #-1]
 801c698:	e7c0      	b.n	801c61c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801c69a:	4408      	add	r0, r1
 801c69c:	4435      	add	r5, r6
 801c69e:	e7b9      	b.n	801c614 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801c6a0:	4408      	add	r0, r1
 801c6a2:	4435      	add	r5, r6
 801c6a4:	42a0      	cmp	r0, r4
 801c6a6:	d21b      	bcs.n	801c6e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801c6a8:	eb00 070c 	add.w	r7, r0, ip
 801c6ac:	42b8      	cmp	r0, r7
 801c6ae:	d2f7      	bcs.n	801c6a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801c6b0:	f835 3b02 	ldrh.w	r3, [r5], #2
 801c6b4:	3003      	adds	r0, #3
 801c6b6:	00da      	lsls	r2, r3, #3
 801c6b8:	b2d2      	uxtb	r2, r2
 801c6ba:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c6be:	f800 2c03 	strb.w	r2, [r0, #-3]
 801c6c2:	10da      	asrs	r2, r3, #3
 801c6c4:	121b      	asrs	r3, r3, #8
 801c6c6:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801c6ca:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801c6ce:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801c6d2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801c6d6:	f800 2c02 	strb.w	r2, [r0, #-2]
 801c6da:	f800 3c01 	strb.w	r3, [r0, #-1]
 801c6de:	e7e5      	b.n	801c6ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801c6e0:	4b02      	ldr	r3, [pc, #8]	@ (801c6ec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801c6e2:	6818      	ldr	r0, [r3, #0]
 801c6e4:	6803      	ldr	r3, [r0, #0]
 801c6e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c6e8:	4798      	blx	r3
 801c6ea:	e76a      	b.n	801c5c2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801c6ec:	240255cc 	.word	0x240255cc
 801c6f0:	240255c6 	.word	0x240255c6

0801c6f4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801c6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6f8:	b08a      	sub	sp, #40	@ 0x28
 801c6fa:	460d      	mov	r5, r1
 801c6fc:	4604      	mov	r4, r0
 801c6fe:	461e      	mov	r6, r3
 801c700:	6808      	ldr	r0, [r1, #0]
 801c702:	ab06      	add	r3, sp, #24
 801c704:	6849      	ldr	r1, [r1, #4]
 801c706:	4f5d      	ldr	r7, [pc, #372]	@ (801c87c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801c708:	c303      	stmia	r3!, {r0, r1}
 801c70a:	6810      	ldr	r0, [r2, #0]
 801c70c:	ab08      	add	r3, sp, #32
 801c70e:	6851      	ldr	r1, [r2, #4]
 801c710:	c303      	stmia	r3!, {r0, r1}
 801c712:	a806      	add	r0, sp, #24
 801c714:	f7f7 fedc 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c718:	4629      	mov	r1, r5
 801c71a:	a808      	add	r0, sp, #32
 801c71c:	f7f7 ff00 	bl	8014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c720:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c724:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801c728:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c72c:	6838      	ldr	r0, [r7, #0]
 801c72e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c732:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801c736:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801c73a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801c73e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c742:	440a      	add	r2, r1
 801c744:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c748:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c74c:	4413      	add	r3, r2
 801c74e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801c752:	6803      	ldr	r3, [r0, #0]
 801c754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c756:	4798      	blx	r3
 801c758:	2eff      	cmp	r6, #255	@ 0xff
 801c75a:	d119      	bne.n	801c790 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801c75c:	f010 0f20 	tst.w	r0, #32
 801c760:	6838      	ldr	r0, [r7, #0]
 801c762:	d018      	beq.n	801c796 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801c764:	b2ad      	uxth	r5, r5
 801c766:	2700      	movs	r7, #0
 801c768:	6801      	ldr	r1, [r0, #0]
 801c76a:	9501      	str	r5, [sp, #4]
 801c76c:	fa1f f588 	uxth.w	r5, r8
 801c770:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801c774:	9500      	str	r5, [sp, #0]
 801c776:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c77a:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801c77e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801c782:	9602      	str	r6, [sp, #8]
 801c784:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 801c786:	4621      	mov	r1, r4
 801c788:	47a8      	blx	r5
 801c78a:	b00a      	add	sp, #40	@ 0x28
 801c78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c790:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801c794:	e7e4      	b.n	801c760 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801c796:	6803      	ldr	r3, [r0, #0]
 801c798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c79a:	4798      	blx	r3
 801c79c:	4b38      	ldr	r3, [pc, #224]	@ (801c880 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801c79e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c7a2:	f8b3 c000 	ldrh.w	ip, [r3]
 801c7a6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801c7aa:	fb0c f505 	mul.w	r5, ip, r5
 801c7ae:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801c7b2:	fb0c 2303 	mla	r3, ip, r3, r2
 801c7b6:	ebac 0c08 	sub.w	ip, ip, r8
 801c7ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c7be:	ebae 0e08 	sub.w	lr, lr, r8
 801c7c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c7c6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c7ca:	4418      	add	r0, r3
 801c7cc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801c7d0:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801c7d4:	4405      	add	r5, r0
 801c7d6:	42a8      	cmp	r0, r5
 801c7d8:	d24a      	bcs.n	801c870 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801c7da:	eb00 0803 	add.w	r8, r0, r3
 801c7de:	4540      	cmp	r0, r8
 801c7e0:	d243      	bcs.n	801c86a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801c7e2:	78e2      	ldrb	r2, [r4, #3]
 801c7e4:	b15a      	cbz	r2, 801c7fe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801c7e6:	2aff      	cmp	r2, #255	@ 0xff
 801c7e8:	f894 9000 	ldrb.w	r9, [r4]
 801c7ec:	d10a      	bne.n	801c804 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801c7ee:	2eff      	cmp	r6, #255	@ 0xff
 801c7f0:	d108      	bne.n	801c804 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801c7f2:	f880 9000 	strb.w	r9, [r0]
 801c7f6:	7862      	ldrb	r2, [r4, #1]
 801c7f8:	7042      	strb	r2, [r0, #1]
 801c7fa:	78a2      	ldrb	r2, [r4, #2]
 801c7fc:	7082      	strb	r2, [r0, #2]
 801c7fe:	3003      	adds	r0, #3
 801c800:	3404      	adds	r4, #4
 801c802:	e7ec      	b.n	801c7de <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801c804:	4372      	muls	r2, r6
 801c806:	1c51      	adds	r1, r2, #1
 801c808:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801c80c:	1209      	asrs	r1, r1, #8
 801c80e:	fa1f fa81 	uxth.w	sl, r1
 801c812:	43c9      	mvns	r1, r1
 801c814:	fb19 f90a 	smulbb	r9, r9, sl
 801c818:	b2ca      	uxtb	r2, r1
 801c81a:	7801      	ldrb	r1, [r0, #0]
 801c81c:	fb01 9902 	mla	r9, r1, r2, r9
 801c820:	fa1f f989 	uxth.w	r9, r9
 801c824:	f109 0101 	add.w	r1, r9, #1
 801c828:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801c82c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c830:	f880 9000 	strb.w	r9, [r0]
 801c834:	f890 9001 	ldrb.w	r9, [r0, #1]
 801c838:	7861      	ldrb	r1, [r4, #1]
 801c83a:	fb19 f902 	smulbb	r9, r9, r2
 801c83e:	fb01 910a 	mla	r1, r1, sl, r9
 801c842:	b289      	uxth	r1, r1
 801c844:	f101 0901 	add.w	r9, r1, #1
 801c848:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801c84c:	1209      	asrs	r1, r1, #8
 801c84e:	7041      	strb	r1, [r0, #1]
 801c850:	7881      	ldrb	r1, [r0, #2]
 801c852:	f894 9002 	ldrb.w	r9, [r4, #2]
 801c856:	fb11 f202 	smulbb	r2, r1, r2
 801c85a:	fb09 220a 	mla	r2, r9, sl, r2
 801c85e:	b292      	uxth	r2, r2
 801c860:	1c51      	adds	r1, r2, #1
 801c862:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c866:	1212      	asrs	r2, r2, #8
 801c868:	e7c8      	b.n	801c7fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801c86a:	4460      	add	r0, ip
 801c86c:	4474      	add	r4, lr
 801c86e:	e7b2      	b.n	801c7d6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801c870:	6838      	ldr	r0, [r7, #0]
 801c872:	6803      	ldr	r3, [r0, #0]
 801c874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c876:	4798      	blx	r3
 801c878:	e787      	b.n	801c78a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801c87a:	bf00      	nop
 801c87c:	240255cc 	.word	0x240255cc
 801c880:	240255c6 	.word	0x240255c6

0801c884 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801c884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c888:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801c88c:	4607      	mov	r7, r0
 801c88e:	460c      	mov	r4, r1
 801c890:	4692      	mov	sl, r2
 801c892:	4699      	mov	r9, r3
 801c894:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c896:	b335      	cbz	r5, 801c8e6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c898:	4608      	mov	r0, r1
 801c89a:	f7fb fdcb 	bl	8018434 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c89e:	4680      	mov	r8, r0
 801c8a0:	4620      	mov	r0, r4
 801c8a2:	f7fb fdfb 	bl	801849c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c8a6:	f8ad 000e 	strh.w	r0, [sp, #14]
 801c8aa:	4620      	mov	r0, r4
 801c8ac:	f8ad a008 	strh.w	sl, [sp, #8]
 801c8b0:	f8ad 900a 	strh.w	r9, [sp, #10]
 801c8b4:	f8ad 800c 	strh.w	r8, [sp, #12]
 801c8b8:	f7fb fefa 	bl	80186b0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c8bc:	2810      	cmp	r0, #16
 801c8be:	d812      	bhi.n	801c8e6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c8c0:	e8df f000 	tbb	[pc, r0]
 801c8c4:	11092d24 	.word	0x11092d24
 801c8c8:	11111111 	.word	0x11111111
 801c8cc:	14111111 	.word	0x14111111
 801c8d0:	4c111111 	.word	0x4c111111
 801c8d4:	3c          	.byte	0x3c
 801c8d5:	00          	.byte	0x00
 801c8d6:	4620      	mov	r0, r4
 801c8d8:	f7fb fe66 	bl	80185a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c8dc:	462b      	mov	r3, r5
 801c8de:	4632      	mov	r2, r6
 801c8e0:	a902      	add	r1, sp, #8
 801c8e2:	f7ff ff07 	bl	801c6f4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c8e6:	b004      	add	sp, #16
 801c8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8ec:	4620      	mov	r0, r4
 801c8ee:	f7fb fe5b 	bl	80185a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c8f2:	4680      	mov	r8, r0
 801c8f4:	4620      	mov	r0, r4
 801c8f6:	f7fb fe87 	bl	8018608 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801c8fa:	ab02      	add	r3, sp, #8
 801c8fc:	4602      	mov	r2, r0
 801c8fe:	4641      	mov	r1, r8
 801c900:	4638      	mov	r0, r7
 801c902:	e9cd 6500 	strd	r6, r5, [sp]
 801c906:	f7ff fdbf 	bl	801c488 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801c90a:	e7ec      	b.n	801c8e6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c90c:	4620      	mov	r0, r4
 801c90e:	f7fb fe4b 	bl	80185a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c912:	462b      	mov	r3, r5
 801c914:	4632      	mov	r2, r6
 801c916:	a902      	add	r1, sp, #8
 801c918:	f7ff fdf8 	bl	801c50c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801c91c:	e7e3      	b.n	801c8e6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c91e:	683b      	ldr	r3, [r7, #0]
 801c920:	4620      	mov	r0, r4
 801c922:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801c926:	f7fb fe3f 	bl	80185a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c92a:	2300      	movs	r3, #0
 801c92c:	4601      	mov	r1, r0
 801c92e:	aa02      	add	r2, sp, #8
 801c930:	4638      	mov	r0, r7
 801c932:	e9cd 5300 	strd	r5, r3, [sp]
 801c936:	4633      	mov	r3, r6
 801c938:	47c0      	blx	r8
 801c93a:	e7d4      	b.n	801c8e6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c93c:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801c93e:	2f00      	cmp	r7, #0
 801c940:	d0d1      	beq.n	801c8e6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c942:	683b      	ldr	r3, [r7, #0]
 801c944:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801c948:	4620      	mov	r0, r4
 801c94a:	f7fb fe2d 	bl	80185a8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c94e:	9500      	str	r5, [sp, #0]
 801c950:	4601      	mov	r1, r0
 801c952:	4633      	mov	r3, r6
 801c954:	aa02      	add	r2, sp, #8
 801c956:	4638      	mov	r0, r7
 801c958:	47c0      	blx	r8
 801c95a:	e7c4      	b.n	801c8e6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c95c:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801c95e:	2f00      	cmp	r7, #0
 801c960:	d0c1      	beq.n	801c8e6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c962:	683b      	ldr	r3, [r7, #0]
 801c964:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801c968:	e7ee      	b.n	801c948 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0801c96a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801c96a:	b4f0      	push	{r4, r5, r6, r7}
 801c96c:	4616      	mov	r6, r2
 801c96e:	461c      	mov	r4, r3
 801c970:	460d      	mov	r5, r1
 801c972:	9a04      	ldr	r2, [sp, #16]
 801c974:	2e01      	cmp	r6, #1
 801c976:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c97a:	d00e      	beq.n	801c99a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801c97c:	d303      	bcc.n	801c986 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801c97e:	2e02      	cmp	r6, #2
 801c980:	d006      	beq.n	801c990 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801c982:	bcf0      	pop	{r4, r5, r6, r7}
 801c984:	4770      	bx	lr
 801c986:	4621      	mov	r1, r4
 801c988:	4628      	mov	r0, r5
 801c98a:	bcf0      	pop	{r4, r5, r6, r7}
 801c98c:	f7ff bdbe 	b.w	801c50c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801c990:	4621      	mov	r1, r4
 801c992:	4628      	mov	r0, r5
 801c994:	bcf0      	pop	{r4, r5, r6, r7}
 801c996:	f7ff bead 	b.w	801c6f4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c99a:	6805      	ldr	r5, [r0, #0]
 801c99c:	2600      	movs	r6, #0
 801c99e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801c9a2:	68ed      	ldr	r5, [r5, #12]
 801c9a4:	4613      	mov	r3, r2
 801c9a6:	4622      	mov	r2, r4
 801c9a8:	46ac      	mov	ip, r5
 801c9aa:	bcf0      	pop	{r4, r5, r6, r7}
 801c9ac:	4760      	bx	ip
	...

0801c9b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801c9b0:	b160      	cbz	r0, 801c9cc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801c9b2:	2903      	cmp	r1, #3
 801c9b4:	d818      	bhi.n	801c9e8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801c9b6:	e8df f001 	tbb	[pc, r1]
 801c9ba:	1902      	.short	0x1902
 801c9bc:	1b06      	.short	0x1b06
 801c9be:	4b0e      	ldr	r3, [pc, #56]	@ (801c9f8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801c9c0:	8818      	ldrh	r0, [r3, #0]
 801c9c2:	4240      	negs	r0, r0
 801c9c4:	4770      	bx	lr
 801c9c6:	4b0c      	ldr	r3, [pc, #48]	@ (801c9f8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801c9c8:	8818      	ldrh	r0, [r3, #0]
 801c9ca:	4770      	bx	lr
 801c9cc:	2903      	cmp	r1, #3
 801c9ce:	d80b      	bhi.n	801c9e8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801c9d0:	a301      	add	r3, pc, #4	@ (adr r3, 801c9d8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801c9d2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801c9d6:	bf00      	nop
 801c9d8:	0801c9ed 	.word	0x0801c9ed
 801c9dc:	0801c9c7 	.word	0x0801c9c7
 801c9e0:	0801c9f1 	.word	0x0801c9f1
 801c9e4:	0801c9bf 	.word	0x0801c9bf
 801c9e8:	2000      	movs	r0, #0
 801c9ea:	4770      	bx	lr
 801c9ec:	2001      	movs	r0, #1
 801c9ee:	4770      	bx	lr
 801c9f0:	f04f 30ff 	mov.w	r0, #4294967295
 801c9f4:	4770      	bx	lr
 801c9f6:	bf00      	nop
 801c9f8:	240255c6 	.word	0x240255c6

0801c9fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801c9fc:	b160      	cbz	r0, 801ca18 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801c9fe:	2903      	cmp	r1, #3
 801ca00:	d818      	bhi.n	801ca34 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801ca02:	e8df f001 	tbb	[pc, r1]
 801ca06:	0219      	.short	0x0219
 801ca08:	051b      	.short	0x051b
 801ca0a:	4b0e      	ldr	r3, [pc, #56]	@ (801ca44 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801ca0c:	8818      	ldrh	r0, [r3, #0]
 801ca0e:	4770      	bx	lr
 801ca10:	4b0c      	ldr	r3, [pc, #48]	@ (801ca44 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801ca12:	8818      	ldrh	r0, [r3, #0]
 801ca14:	4240      	negs	r0, r0
 801ca16:	4770      	bx	lr
 801ca18:	2903      	cmp	r1, #3
 801ca1a:	d80b      	bhi.n	801ca34 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801ca1c:	a301      	add	r3, pc, #4	@ (adr r3, 801ca24 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801ca1e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ca22:	bf00      	nop
 801ca24:	0801ca0b 	.word	0x0801ca0b
 801ca28:	0801ca3d 	.word	0x0801ca3d
 801ca2c:	0801ca11 	.word	0x0801ca11
 801ca30:	0801ca39 	.word	0x0801ca39
 801ca34:	2000      	movs	r0, #0
 801ca36:	4770      	bx	lr
 801ca38:	2001      	movs	r0, #1
 801ca3a:	4770      	bx	lr
 801ca3c:	f04f 30ff 	mov.w	r0, #4294967295
 801ca40:	4770      	bx	lr
 801ca42:	bf00      	nop
 801ca44:	240255c6 	.word	0x240255c6

0801ca48 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801ca48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca4c:	b097      	sub	sp, #92	@ 0x5c
 801ca4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ca50:	a912      	add	r1, sp, #72	@ 0x48
 801ca52:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801ca56:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801ca5a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801ca5e:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801ca62:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801ca66:	e881 000c 	stmia.w	r1, {r2, r3}
 801ca6a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801ca6e:	930a      	str	r3, [sp, #40]	@ 0x28
 801ca70:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801ca74:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801ca78:	9311      	str	r3, [sp, #68]	@ 0x44
 801ca7a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801ca7e:	798d      	ldrb	r5, [r1, #6]
 801ca80:	930c      	str	r3, [sp, #48]	@ 0x30
 801ca82:	7b4b      	ldrb	r3, [r1, #13]
 801ca84:	0158      	lsls	r0, r3, #5
 801ca86:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801ca8a:	4328      	orrs	r0, r5
 801ca8c:	9009      	str	r0, [sp, #36]	@ 0x24
 801ca8e:	f000 817c 	beq.w	801cd8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ca92:	011b      	lsls	r3, r3, #4
 801ca94:	79c8      	ldrb	r0, [r1, #7]
 801ca96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ca9a:	4303      	orrs	r3, r0
 801ca9c:	930e      	str	r3, [sp, #56]	@ 0x38
 801ca9e:	f000 8174 	beq.w	801cd8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801caa2:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801caa6:	b29b      	uxth	r3, r3
 801caa8:	2f00      	cmp	r7, #0
 801caaa:	f000 8116 	beq.w	801ccda <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801caae:	1aff      	subs	r7, r7, r3
 801cab0:	b2bf      	uxth	r7, r7
 801cab2:	043b      	lsls	r3, r7, #16
 801cab4:	d502      	bpl.n	801cabc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801cab6:	1bf6      	subs	r6, r6, r7
 801cab8:	2700      	movs	r7, #0
 801caba:	b236      	sxth	r6, r6
 801cabc:	f9b2 1000 	ldrsh.w	r1, [r2]
 801cac0:	a812      	add	r0, sp, #72	@ 0x48
 801cac2:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801cac6:	428e      	cmp	r6, r1
 801cac8:	b28b      	uxth	r3, r1
 801caca:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801cace:	bfbf      	itttt	lt
 801cad0:	18ff      	addlt	r7, r7, r3
 801cad2:	1bbe      	sublt	r6, r7, r6
 801cad4:	b2b7      	uxthlt	r7, r6
 801cad6:	460e      	movlt	r6, r1
 801cad8:	8891      	ldrh	r1, [r2, #4]
 801cada:	440b      	add	r3, r1
 801cadc:	4631      	mov	r1, r6
 801cade:	b21b      	sxth	r3, r3
 801cae0:	9310      	str	r3, [sp, #64]	@ 0x40
 801cae2:	88d3      	ldrh	r3, [r2, #6]
 801cae4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cae6:	449a      	add	sl, r3
 801cae8:	fa0f f38a 	sxth.w	r3, sl
 801caec:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801caf0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801caf2:	4bb5      	ldr	r3, [pc, #724]	@ (801cdc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801caf4:	f893 b000 	ldrb.w	fp, [r3]
 801caf8:	f10b 3cff 	add.w	ip, fp, #4294967295
 801cafc:	f1dc 0300 	rsbs	r3, ip, #0
 801cb00:	eb43 030c 	adc.w	r3, r3, ip
 801cb04:	930d      	str	r3, [sp, #52]	@ 0x34
 801cb06:	464b      	mov	r3, r9
 801cb08:	f7f7 fb57 	bl	80141ba <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801cb0c:	4631      	mov	r1, r6
 801cb0e:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801cb12:	464b      	mov	r3, r9
 801cb14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cb16:	a812      	add	r0, sp, #72	@ 0x48
 801cb18:	f7f7 fb6c 	bl	80141f4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801cb1c:	a916      	add	r1, sp, #88	@ 0x58
 801cb1e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801cb22:	a815      	add	r0, sp, #84	@ 0x54
 801cb24:	f7f7 fc92 	bl	801444c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801cb28:	f1b9 0f00 	cmp.w	r9, #0
 801cb2c:	f040 80d8 	bne.w	801cce0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801cb30:	f1bb 0f01 	cmp.w	fp, #1
 801cb34:	f040 80dc 	bne.w	801ccf0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801cb38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cb3a:	b153      	cbz	r3, 801cb52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801cb3c:	2508      	movs	r5, #8
 801cb3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cb40:	fb95 f3f8 	sdiv	r3, r5, r8
 801cb44:	1e5d      	subs	r5, r3, #1
 801cb46:	4415      	add	r5, r2
 801cb48:	fb95 f5f3 	sdiv	r5, r5, r3
 801cb4c:	fb15 f503 	smulbb	r5, r5, r3
 801cb50:	b2ad      	uxth	r5, r5
 801cb52:	b907      	cbnz	r7, 801cb56 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801cb54:	b16c      	cbz	r4, 801cb72 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801cb56:	fb04 7305 	mla	r3, r4, r5, r7
 801cb5a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801cb5c:	ebaa 0a04 	sub.w	sl, sl, r4
 801cb60:	fb08 f303 	mul.w	r3, r8, r3
 801cb64:	fa1f fa8a 	uxth.w	sl, sl
 801cb68:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801cb6c:	f003 0407 	and.w	r4, r3, #7
 801cb70:	9226      	str	r2, [sp, #152]	@ 0x98
 801cb72:	4649      	mov	r1, r9
 801cb74:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801cb76:	f7ff ff1b 	bl	801c9b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801cb7a:	4683      	mov	fp, r0
 801cb7c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801cb7e:	f7ff ff3d 	bl	801c9fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801cb82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cb84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cb86:	4681      	mov	r9, r0
 801cb88:	1a9b      	subs	r3, r3, r2
 801cb8a:	459a      	cmp	sl, r3
 801cb8c:	bfa8      	it	ge
 801cb8e:	469a      	movge	sl, r3
 801cb90:	f1ba 0f00 	cmp.w	sl, #0
 801cb94:	f340 80f9 	ble.w	801cd8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801cb98:	1bf6      	subs	r6, r6, r7
 801cb9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cb9c:	1b9e      	subs	r6, r3, r6
 801cb9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cba0:	429e      	cmp	r6, r3
 801cba2:	bfd4      	ite	le
 801cba4:	ebc7 0706 	rsble	r7, r7, r6
 801cba8:	ebc7 0703 	rsbgt	r7, r7, r3
 801cbac:	2f00      	cmp	r7, #0
 801cbae:	f340 80ec 	ble.w	801cd8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801cbb2:	1bed      	subs	r5, r5, r7
 801cbb4:	fb08 f305 	mul.w	r3, r8, r5
 801cbb8:	930d      	str	r3, [sp, #52]	@ 0x34
 801cbba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cbbc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801cbc0:	930e      	str	r3, [sp, #56]	@ 0x38
 801cbc2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cbc4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cbc8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cbca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cbcc:	b2db      	uxtb	r3, r3
 801cbce:	9310      	str	r3, [sp, #64]	@ 0x40
 801cbd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	f040 80de 	bne.w	801cd94 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801cbd8:	4b7c      	ldr	r3, [pc, #496]	@ (801cdcc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801cbda:	6818      	ldr	r0, [r3, #0]
 801cbdc:	6803      	ldr	r3, [r0, #0]
 801cbde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cbe0:	4798      	blx	r3
 801cbe2:	2301      	movs	r3, #1
 801cbe4:	4a7a      	ldr	r2, [pc, #488]	@ (801cdd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801cbe6:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801cbea:	fb07 9b1b 	mls	fp, r7, fp, r9
 801cbee:	fa03 f308 	lsl.w	r3, r3, r8
 801cbf2:	8811      	ldrh	r1, [r2, #0]
 801cbf4:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801cbf8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801cbfc:	3b01      	subs	r3, #1
 801cbfe:	fb06 bb07 	mla	fp, r6, r7, fp
 801cc02:	b2db      	uxtb	r3, r3
 801cc04:	930a      	str	r3, [sp, #40]	@ 0x28
 801cc06:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801cc0a:	fb01 2303 	mla	r3, r1, r3, r2
 801cc0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc12:	18c3      	adds	r3, r0, r3
 801cc14:	9309      	str	r3, [sp, #36]	@ 0x24
 801cc16:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801cc18:	781a      	ldrb	r2, [r3, #0]
 801cc1a:	4122      	asrs	r2, r4
 801cc1c:	b2d2      	uxtb	r2, r2
 801cc1e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801cc22:	f0c0 80d7 	bcc.w	801cdd4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801cc26:	46be      	mov	lr, r7
 801cc28:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801cc2a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801cc2e:	f0c0 80ba 	bcc.w	801cda6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801cc32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cc34:	4013      	ands	r3, r2
 801cc36:	d041      	beq.n	801ccbc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801cc38:	20ff      	movs	r0, #255	@ 0xff
 801cc3a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801cc3c:	fb90 f5f5 	sdiv	r5, r0, r5
 801cc40:	436b      	muls	r3, r5
 801cc42:	2bfe      	cmp	r3, #254	@ 0xfe
 801cc44:	dd03      	ble.n	801cc4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801cc46:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801cc48:	4285      	cmp	r5, r0
 801cc4a:	f000 80a5 	beq.w	801cd98 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801cc4e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801cc50:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801cc52:	fb15 f303 	smulbb	r3, r5, r3
 801cc56:	b29b      	uxth	r3, r3
 801cc58:	1c5d      	adds	r5, r3, #1
 801cc5a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801cc5e:	780d      	ldrb	r5, [r1, #0]
 801cc60:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cc64:	fa1f fc83 	uxth.w	ip, r3
 801cc68:	43db      	mvns	r3, r3
 801cc6a:	fb10 f90c 	smulbb	r9, r0, ip
 801cc6e:	b2db      	uxtb	r3, r3
 801cc70:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801cc72:	fb05 9503 	mla	r5, r5, r3, r9
 801cc76:	b2ad      	uxth	r5, r5
 801cc78:	f105 0901 	add.w	r9, r5, #1
 801cc7c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801cc80:	fb10 f90c 	smulbb	r9, r0, ip
 801cc84:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801cc86:	122d      	asrs	r5, r5, #8
 801cc88:	fb10 fc0c 	smulbb	ip, r0, ip
 801cc8c:	700d      	strb	r5, [r1, #0]
 801cc8e:	784d      	ldrb	r5, [r1, #1]
 801cc90:	fb05 9503 	mla	r5, r5, r3, r9
 801cc94:	b2ad      	uxth	r5, r5
 801cc96:	f105 0901 	add.w	r9, r5, #1
 801cc9a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801cc9e:	122d      	asrs	r5, r5, #8
 801cca0:	704d      	strb	r5, [r1, #1]
 801cca2:	788d      	ldrb	r5, [r1, #2]
 801cca4:	fb05 cc03 	mla	ip, r5, r3, ip
 801cca8:	fa1f fc8c 	uxth.w	ip, ip
 801ccac:	f10c 0301 	add.w	r3, ip, #1
 801ccb0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ccb4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ccb8:	f881 c002 	strb.w	ip, [r1, #2]
 801ccbc:	4444      	add	r4, r8
 801ccbe:	4431      	add	r1, r6
 801ccc0:	b2a4      	uxth	r4, r4
 801ccc2:	2c07      	cmp	r4, #7
 801ccc4:	bf89      	itett	hi
 801ccc6:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801ccc8:	fa42 f208 	asrls.w	r2, r2, r8
 801cccc:	2400      	movhi	r4, #0
 801ccce:	785a      	ldrbhi	r2, [r3, #1]
 801ccd0:	bf8a      	itet	hi
 801ccd2:	3301      	addhi	r3, #1
 801ccd4:	b2d2      	uxtbls	r2, r2
 801ccd6:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801ccd8:	e7a7      	b.n	801cc2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801ccda:	441e      	add	r6, r3
 801ccdc:	b236      	sxth	r6, r6
 801ccde:	e6ed      	b.n	801cabc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801cce0:	f1b9 0f01 	cmp.w	r9, #1
 801cce4:	f47f af28 	bne.w	801cb38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801cce8:	f1bb 0f01 	cmp.w	fp, #1
 801ccec:	f47f af24 	bne.w	801cb38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ccf0:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801cdcc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801ccf4:	f8db 0000 	ldr.w	r0, [fp]
 801ccf8:	6803      	ldr	r3, [r0, #0]
 801ccfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ccfc:	4798      	blx	r3
 801ccfe:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801cd02:	465a      	mov	r2, fp
 801cd04:	d006      	beq.n	801cd14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801cd06:	f1b8 0f04 	cmp.w	r8, #4
 801cd0a:	d141      	bne.n	801cd90 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801cd0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cd0e:	3300      	adds	r3, #0
 801cd10:	bf18      	it	ne
 801cd12:	2301      	movne	r3, #1
 801cd14:	0580      	lsls	r0, r0, #22
 801cd16:	d566      	bpl.n	801cde6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801cd18:	f1b8 0f08 	cmp.w	r8, #8
 801cd1c:	d163      	bne.n	801cde6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	bf0c      	ite	eq
 801cd22:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801cd26:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801cd2a:	2f00      	cmp	r7, #0
 801cd2c:	f47f af04 	bne.w	801cb38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801cd30:	2c00      	cmp	r4, #0
 801cd32:	f47f af01 	bne.w	801cb38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801cd36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd38:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801cd3a:	18f3      	adds	r3, r6, r3
 801cd3c:	4283      	cmp	r3, r0
 801cd3e:	f73f aefb 	bgt.w	801cb38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801cd42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cd44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cd46:	4403      	add	r3, r0
 801cd48:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801cd4a:	4283      	cmp	r3, r0
 801cd4c:	f73f aef4 	bgt.w	801cb38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801cd50:	f1b8 0f08 	cmp.w	r8, #8
 801cd54:	6810      	ldr	r0, [r2, #0]
 801cd56:	f04f 0600 	mov.w	r6, #0
 801cd5a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801cd5e:	bf18      	it	ne
 801cd60:	3501      	addne	r5, #1
 801cd62:	6804      	ldr	r4, [r0, #0]
 801cd64:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801cd68:	bf18      	it	ne
 801cd6a:	f025 0501 	bicne.w	r5, r5, #1
 801cd6e:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801cd72:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801cd74:	bf18      	it	ne
 801cd76:	b2ad      	uxthne	r5, r5
 801cd78:	9104      	str	r1, [sp, #16]
 801cd7a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801cd7c:	e9cd 5a00 	strd	r5, sl, [sp]
 801cd80:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801cd84:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801cd86:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 801cd88:	47a0      	blx	r4
 801cd8a:	b017      	add	sp, #92	@ 0x5c
 801cd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd90:	2300      	movs	r3, #0
 801cd92:	e7bf      	b.n	801cd14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801cd94:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801cd96:	e724      	b.n	801cbe2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801cd98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cd9a:	700b      	strb	r3, [r1, #0]
 801cd9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cd9e:	704b      	strb	r3, [r1, #1]
 801cda0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cda2:	708b      	strb	r3, [r1, #2]
 801cda4:	e78a      	b.n	801ccbc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801cda6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cda8:	b153      	cbz	r3, 801cdc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801cdaa:	441c      	add	r4, r3
 801cdac:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801cdae:	b2a4      	uxth	r4, r4
 801cdb0:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801cdb4:	f004 0407 	and.w	r4, r4, #7
 801cdb8:	781a      	ldrb	r2, [r3, #0]
 801cdba:	9326      	str	r3, [sp, #152]	@ 0x98
 801cdbc:	4122      	asrs	r2, r4
 801cdbe:	b2d2      	uxtb	r2, r2
 801cdc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cdc2:	445b      	add	r3, fp
 801cdc4:	9309      	str	r3, [sp, #36]	@ 0x24
 801cdc6:	e72a      	b.n	801cc1e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801cdc8:	240255c4 	.word	0x240255c4
 801cdcc:	240255cc 	.word	0x240255cc
 801cdd0:	240255c6 	.word	0x240255c6
 801cdd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d1d7      	bne.n	801cd8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801cdda:	4b06      	ldr	r3, [pc, #24]	@ (801cdf4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801cddc:	6818      	ldr	r0, [r3, #0]
 801cdde:	6803      	ldr	r3, [r0, #0]
 801cde0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cde2:	4798      	blx	r3
 801cde4:	e7d1      	b.n	801cd8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801cde6:	2b00      	cmp	r3, #0
 801cde8:	f43f aea6 	beq.w	801cb38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801cdec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801cdf0:	e79b      	b.n	801cd2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801cdf2:	bf00      	nop
 801cdf4:	240255cc 	.word	0x240255cc

0801cdf8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801cdf8:	b538      	push	{r3, r4, r5, lr}
 801cdfa:	4c15      	ldr	r4, [pc, #84]	@ (801ce50 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801cdfc:	4605      	mov	r5, r0
 801cdfe:	7823      	ldrb	r3, [r4, #0]
 801ce00:	f3bf 8f5b 	dmb	ish
 801ce04:	07da      	lsls	r2, r3, #31
 801ce06:	d40b      	bmi.n	801ce20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ce08:	4620      	mov	r0, r4
 801ce0a:	f006 f8d8 	bl	8022fbe <__cxa_guard_acquire>
 801ce0e:	b138      	cbz	r0, 801ce20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ce10:	4620      	mov	r0, r4
 801ce12:	f006 f8e0 	bl	8022fd6 <__cxa_guard_release>
 801ce16:	4a0f      	ldr	r2, [pc, #60]	@ (801ce54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ce18:	490f      	ldr	r1, [pc, #60]	@ (801ce58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ce1a:	4810      	ldr	r0, [pc, #64]	@ (801ce5c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ce1c:	f006 f8c8 	bl	8022fb0 <__aeabi_atexit>
 801ce20:	4c0f      	ldr	r4, [pc, #60]	@ (801ce60 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ce22:	7823      	ldrb	r3, [r4, #0]
 801ce24:	f3bf 8f5b 	dmb	ish
 801ce28:	07db      	lsls	r3, r3, #31
 801ce2a:	d40b      	bmi.n	801ce44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ce2c:	4620      	mov	r0, r4
 801ce2e:	f006 f8c6 	bl	8022fbe <__cxa_guard_acquire>
 801ce32:	b138      	cbz	r0, 801ce44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ce34:	4620      	mov	r0, r4
 801ce36:	f006 f8ce 	bl	8022fd6 <__cxa_guard_release>
 801ce3a:	4a06      	ldr	r2, [pc, #24]	@ (801ce54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ce3c:	4909      	ldr	r1, [pc, #36]	@ (801ce64 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ce3e:	480a      	ldr	r0, [pc, #40]	@ (801ce68 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ce40:	f006 f8b6 	bl	8022fb0 <__aeabi_atexit>
 801ce44:	4b05      	ldr	r3, [pc, #20]	@ (801ce5c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ce46:	616b      	str	r3, [r5, #20]
 801ce48:	4b07      	ldr	r3, [pc, #28]	@ (801ce68 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ce4a:	61ab      	str	r3, [r5, #24]
 801ce4c:	bd38      	pop	{r3, r4, r5, pc}
 801ce4e:	bf00      	nop
 801ce50:	240256b0 	.word	0x240256b0
 801ce54:	24000000 	.word	0x24000000
 801ce58:	0801a0e9 	.word	0x0801a0e9
 801ce5c:	240000c8 	.word	0x240000c8
 801ce60:	240256b4 	.word	0x240256b4
 801ce64:	0801a0e7 	.word	0x0801a0e7
 801ce68:	240000cc 	.word	0x240000cc

0801ce6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801ce6c:	b538      	push	{r3, r4, r5, lr}
 801ce6e:	4c15      	ldr	r4, [pc, #84]	@ (801cec4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801ce70:	4605      	mov	r5, r0
 801ce72:	7823      	ldrb	r3, [r4, #0]
 801ce74:	f3bf 8f5b 	dmb	ish
 801ce78:	07da      	lsls	r2, r3, #31
 801ce7a:	d40b      	bmi.n	801ce94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ce7c:	4620      	mov	r0, r4
 801ce7e:	f006 f89e 	bl	8022fbe <__cxa_guard_acquire>
 801ce82:	b138      	cbz	r0, 801ce94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ce84:	4620      	mov	r0, r4
 801ce86:	f006 f8a6 	bl	8022fd6 <__cxa_guard_release>
 801ce8a:	4a0f      	ldr	r2, [pc, #60]	@ (801cec8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ce8c:	490f      	ldr	r1, [pc, #60]	@ (801cecc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801ce8e:	4810      	ldr	r0, [pc, #64]	@ (801ced0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ce90:	f006 f88e 	bl	8022fb0 <__aeabi_atexit>
 801ce94:	4c0f      	ldr	r4, [pc, #60]	@ (801ced4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801ce96:	7823      	ldrb	r3, [r4, #0]
 801ce98:	f3bf 8f5b 	dmb	ish
 801ce9c:	07db      	lsls	r3, r3, #31
 801ce9e:	d40b      	bmi.n	801ceb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801cea0:	4620      	mov	r0, r4
 801cea2:	f006 f88c 	bl	8022fbe <__cxa_guard_acquire>
 801cea6:	b138      	cbz	r0, 801ceb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801cea8:	4620      	mov	r0, r4
 801ceaa:	f006 f894 	bl	8022fd6 <__cxa_guard_release>
 801ceae:	4a06      	ldr	r2, [pc, #24]	@ (801cec8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ceb0:	4909      	ldr	r1, [pc, #36]	@ (801ced8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801ceb2:	480a      	ldr	r0, [pc, #40]	@ (801cedc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801ceb4:	f006 f87c 	bl	8022fb0 <__aeabi_atexit>
 801ceb8:	4b05      	ldr	r3, [pc, #20]	@ (801ced0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ceba:	60eb      	str	r3, [r5, #12]
 801cebc:	4b07      	ldr	r3, [pc, #28]	@ (801cedc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801cebe:	612b      	str	r3, [r5, #16]
 801cec0:	bd38      	pop	{r3, r4, r5, pc}
 801cec2:	bf00      	nop
 801cec4:	24025690 	.word	0x24025690
 801cec8:	24000000 	.word	0x24000000
 801cecc:	0801a0ed 	.word	0x0801a0ed
 801ced0:	240000a8 	.word	0x240000a8
 801ced4:	24025694 	.word	0x24025694
 801ced8:	0801a0eb 	.word	0x0801a0eb
 801cedc:	240000ac 	.word	0x240000ac

0801cee0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801cee0:	b510      	push	{r4, lr}
 801cee2:	4604      	mov	r4, r0
 801cee4:	f7ff ff88 	bl	801cdf8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801cee8:	4620      	mov	r0, r4
 801ceea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ceee:	f7ff bfbd 	b.w	801ce6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801cef4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801cef4:	b538      	push	{r3, r4, r5, lr}
 801cef6:	4c15      	ldr	r4, [pc, #84]	@ (801cf4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801cef8:	4605      	mov	r5, r0
 801cefa:	7823      	ldrb	r3, [r4, #0]
 801cefc:	f3bf 8f5b 	dmb	ish
 801cf00:	07da      	lsls	r2, r3, #31
 801cf02:	d40b      	bmi.n	801cf1c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801cf04:	4620      	mov	r0, r4
 801cf06:	f006 f85a 	bl	8022fbe <__cxa_guard_acquire>
 801cf0a:	b138      	cbz	r0, 801cf1c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801cf0c:	4620      	mov	r0, r4
 801cf0e:	f006 f862 	bl	8022fd6 <__cxa_guard_release>
 801cf12:	4a0f      	ldr	r2, [pc, #60]	@ (801cf50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801cf14:	490f      	ldr	r1, [pc, #60]	@ (801cf54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801cf16:	4810      	ldr	r0, [pc, #64]	@ (801cf58 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801cf18:	f006 f84a 	bl	8022fb0 <__aeabi_atexit>
 801cf1c:	4c0f      	ldr	r4, [pc, #60]	@ (801cf5c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801cf1e:	7823      	ldrb	r3, [r4, #0]
 801cf20:	f3bf 8f5b 	dmb	ish
 801cf24:	07db      	lsls	r3, r3, #31
 801cf26:	d40b      	bmi.n	801cf40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801cf28:	4620      	mov	r0, r4
 801cf2a:	f006 f848 	bl	8022fbe <__cxa_guard_acquire>
 801cf2e:	b138      	cbz	r0, 801cf40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801cf30:	4620      	mov	r0, r4
 801cf32:	f006 f850 	bl	8022fd6 <__cxa_guard_release>
 801cf36:	4a06      	ldr	r2, [pc, #24]	@ (801cf50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801cf38:	4909      	ldr	r1, [pc, #36]	@ (801cf60 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801cf3a:	480a      	ldr	r0, [pc, #40]	@ (801cf64 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801cf3c:	f006 f838 	bl	8022fb0 <__aeabi_atexit>
 801cf40:	4b05      	ldr	r3, [pc, #20]	@ (801cf58 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801cf42:	626b      	str	r3, [r5, #36]	@ 0x24
 801cf44:	4b07      	ldr	r3, [pc, #28]	@ (801cf64 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801cf46:	62ab      	str	r3, [r5, #40]	@ 0x28
 801cf48:	bd38      	pop	{r3, r4, r5, pc}
 801cf4a:	bf00      	nop
 801cf4c:	240256b8 	.word	0x240256b8
 801cf50:	24000000 	.word	0x24000000
 801cf54:	0801a0e1 	.word	0x0801a0e1
 801cf58:	240000d0 	.word	0x240000d0
 801cf5c:	240256bc 	.word	0x240256bc
 801cf60:	0801a0df 	.word	0x0801a0df
 801cf64:	240000d4 	.word	0x240000d4

0801cf68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801cf68:	b538      	push	{r3, r4, r5, lr}
 801cf6a:	4c15      	ldr	r4, [pc, #84]	@ (801cfc0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801cf6c:	4605      	mov	r5, r0
 801cf6e:	7823      	ldrb	r3, [r4, #0]
 801cf70:	f3bf 8f5b 	dmb	ish
 801cf74:	07da      	lsls	r2, r3, #31
 801cf76:	d40b      	bmi.n	801cf90 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801cf78:	4620      	mov	r0, r4
 801cf7a:	f006 f820 	bl	8022fbe <__cxa_guard_acquire>
 801cf7e:	b138      	cbz	r0, 801cf90 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801cf80:	4620      	mov	r0, r4
 801cf82:	f006 f828 	bl	8022fd6 <__cxa_guard_release>
 801cf86:	4a0f      	ldr	r2, [pc, #60]	@ (801cfc4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801cf88:	490f      	ldr	r1, [pc, #60]	@ (801cfc8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801cf8a:	4810      	ldr	r0, [pc, #64]	@ (801cfcc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801cf8c:	f006 f810 	bl	8022fb0 <__aeabi_atexit>
 801cf90:	4c0f      	ldr	r4, [pc, #60]	@ (801cfd0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801cf92:	7823      	ldrb	r3, [r4, #0]
 801cf94:	f3bf 8f5b 	dmb	ish
 801cf98:	07db      	lsls	r3, r3, #31
 801cf9a:	d40b      	bmi.n	801cfb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801cf9c:	4620      	mov	r0, r4
 801cf9e:	f006 f80e 	bl	8022fbe <__cxa_guard_acquire>
 801cfa2:	b138      	cbz	r0, 801cfb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801cfa4:	4620      	mov	r0, r4
 801cfa6:	f006 f816 	bl	8022fd6 <__cxa_guard_release>
 801cfaa:	4a06      	ldr	r2, [pc, #24]	@ (801cfc4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801cfac:	4909      	ldr	r1, [pc, #36]	@ (801cfd4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801cfae:	480a      	ldr	r0, [pc, #40]	@ (801cfd8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801cfb0:	f005 fffe 	bl	8022fb0 <__aeabi_atexit>
 801cfb4:	4b05      	ldr	r3, [pc, #20]	@ (801cfcc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801cfb6:	61eb      	str	r3, [r5, #28]
 801cfb8:	4b07      	ldr	r3, [pc, #28]	@ (801cfd8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801cfba:	622b      	str	r3, [r5, #32]
 801cfbc:	bd38      	pop	{r3, r4, r5, pc}
 801cfbe:	bf00      	nop
 801cfc0:	24025698 	.word	0x24025698
 801cfc4:	24000000 	.word	0x24000000
 801cfc8:	0801a0e5 	.word	0x0801a0e5
 801cfcc:	240000b0 	.word	0x240000b0
 801cfd0:	2402569c 	.word	0x2402569c
 801cfd4:	0801a0e3 	.word	0x0801a0e3
 801cfd8:	240000b4 	.word	0x240000b4

0801cfdc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801cfdc:	b510      	push	{r4, lr}
 801cfde:	4604      	mov	r4, r0
 801cfe0:	f7ff ff88 	bl	801cef4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801cfe4:	4620      	mov	r0, r4
 801cfe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cfea:	f7ff bfbd 	b.w	801cf68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801cff0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801cff0:	b538      	push	{r3, r4, r5, lr}
 801cff2:	4c15      	ldr	r4, [pc, #84]	@ (801d048 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801cff4:	4605      	mov	r5, r0
 801cff6:	7823      	ldrb	r3, [r4, #0]
 801cff8:	f3bf 8f5b 	dmb	ish
 801cffc:	07da      	lsls	r2, r3, #31
 801cffe:	d40b      	bmi.n	801d018 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801d000:	4620      	mov	r0, r4
 801d002:	f005 ffdc 	bl	8022fbe <__cxa_guard_acquire>
 801d006:	b138      	cbz	r0, 801d018 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801d008:	4620      	mov	r0, r4
 801d00a:	f005 ffe4 	bl	8022fd6 <__cxa_guard_release>
 801d00e:	4a0f      	ldr	r2, [pc, #60]	@ (801d04c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801d010:	490f      	ldr	r1, [pc, #60]	@ (801d050 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801d012:	4810      	ldr	r0, [pc, #64]	@ (801d054 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801d014:	f005 ffcc 	bl	8022fb0 <__aeabi_atexit>
 801d018:	4c0f      	ldr	r4, [pc, #60]	@ (801d058 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801d01a:	7823      	ldrb	r3, [r4, #0]
 801d01c:	f3bf 8f5b 	dmb	ish
 801d020:	07db      	lsls	r3, r3, #31
 801d022:	d40b      	bmi.n	801d03c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801d024:	4620      	mov	r0, r4
 801d026:	f005 ffca 	bl	8022fbe <__cxa_guard_acquire>
 801d02a:	b138      	cbz	r0, 801d03c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801d02c:	4620      	mov	r0, r4
 801d02e:	f005 ffd2 	bl	8022fd6 <__cxa_guard_release>
 801d032:	4a06      	ldr	r2, [pc, #24]	@ (801d04c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801d034:	4909      	ldr	r1, [pc, #36]	@ (801d05c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801d036:	480a      	ldr	r0, [pc, #40]	@ (801d060 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801d038:	f005 ffba 	bl	8022fb0 <__aeabi_atexit>
 801d03c:	4b05      	ldr	r3, [pc, #20]	@ (801d054 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801d03e:	636b      	str	r3, [r5, #52]	@ 0x34
 801d040:	4b07      	ldr	r3, [pc, #28]	@ (801d060 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801d042:	63ab      	str	r3, [r5, #56]	@ 0x38
 801d044:	bd38      	pop	{r3, r4, r5, pc}
 801d046:	bf00      	nop
 801d048:	240256a0 	.word	0x240256a0
 801d04c:	24000000 	.word	0x24000000
 801d050:	0801a0d9 	.word	0x0801a0d9
 801d054:	240000b8 	.word	0x240000b8
 801d058:	240256a4 	.word	0x240256a4
 801d05c:	0801a0d7 	.word	0x0801a0d7
 801d060:	240000bc 	.word	0x240000bc

0801d064 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801d064:	b538      	push	{r3, r4, r5, lr}
 801d066:	4c15      	ldr	r4, [pc, #84]	@ (801d0bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801d068:	4605      	mov	r5, r0
 801d06a:	7823      	ldrb	r3, [r4, #0]
 801d06c:	f3bf 8f5b 	dmb	ish
 801d070:	07da      	lsls	r2, r3, #31
 801d072:	d40b      	bmi.n	801d08c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801d074:	4620      	mov	r0, r4
 801d076:	f005 ffa2 	bl	8022fbe <__cxa_guard_acquire>
 801d07a:	b138      	cbz	r0, 801d08c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801d07c:	4620      	mov	r0, r4
 801d07e:	f005 ffaa 	bl	8022fd6 <__cxa_guard_release>
 801d082:	4a0f      	ldr	r2, [pc, #60]	@ (801d0c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801d084:	490f      	ldr	r1, [pc, #60]	@ (801d0c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801d086:	4810      	ldr	r0, [pc, #64]	@ (801d0c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801d088:	f005 ff92 	bl	8022fb0 <__aeabi_atexit>
 801d08c:	4c0f      	ldr	r4, [pc, #60]	@ (801d0cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801d08e:	7823      	ldrb	r3, [r4, #0]
 801d090:	f3bf 8f5b 	dmb	ish
 801d094:	07db      	lsls	r3, r3, #31
 801d096:	d40b      	bmi.n	801d0b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801d098:	4620      	mov	r0, r4
 801d09a:	f005 ff90 	bl	8022fbe <__cxa_guard_acquire>
 801d09e:	b138      	cbz	r0, 801d0b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801d0a0:	4620      	mov	r0, r4
 801d0a2:	f005 ff98 	bl	8022fd6 <__cxa_guard_release>
 801d0a6:	4a06      	ldr	r2, [pc, #24]	@ (801d0c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801d0a8:	4909      	ldr	r1, [pc, #36]	@ (801d0d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801d0aa:	480a      	ldr	r0, [pc, #40]	@ (801d0d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801d0ac:	f005 ff80 	bl	8022fb0 <__aeabi_atexit>
 801d0b0:	4b05      	ldr	r3, [pc, #20]	@ (801d0c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801d0b2:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801d0b4:	4b07      	ldr	r3, [pc, #28]	@ (801d0d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801d0b6:	632b      	str	r3, [r5, #48]	@ 0x30
 801d0b8:	bd38      	pop	{r3, r4, r5, pc}
 801d0ba:	bf00      	nop
 801d0bc:	24025678 	.word	0x24025678
 801d0c0:	24000000 	.word	0x24000000
 801d0c4:	0801a0dd 	.word	0x0801a0dd
 801d0c8:	24000090 	.word	0x24000090
 801d0cc:	2402567c 	.word	0x2402567c
 801d0d0:	0801a0db 	.word	0x0801a0db
 801d0d4:	24000094 	.word	0x24000094

0801d0d8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801d0d8:	b510      	push	{r4, lr}
 801d0da:	4604      	mov	r4, r0
 801d0dc:	f7ff ff88 	bl	801cff0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801d0e0:	4620      	mov	r0, r4
 801d0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d0e6:	f7ff bfbd 	b.w	801d064 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801d0ec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801d0ec:	b538      	push	{r3, r4, r5, lr}
 801d0ee:	4c15      	ldr	r4, [pc, #84]	@ (801d144 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801d0f0:	4605      	mov	r5, r0
 801d0f2:	7823      	ldrb	r3, [r4, #0]
 801d0f4:	f3bf 8f5b 	dmb	ish
 801d0f8:	07da      	lsls	r2, r3, #31
 801d0fa:	d40b      	bmi.n	801d114 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801d0fc:	4620      	mov	r0, r4
 801d0fe:	f005 ff5e 	bl	8022fbe <__cxa_guard_acquire>
 801d102:	b138      	cbz	r0, 801d114 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801d104:	4620      	mov	r0, r4
 801d106:	f005 ff66 	bl	8022fd6 <__cxa_guard_release>
 801d10a:	4a0f      	ldr	r2, [pc, #60]	@ (801d148 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801d10c:	490f      	ldr	r1, [pc, #60]	@ (801d14c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801d10e:	4810      	ldr	r0, [pc, #64]	@ (801d150 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801d110:	f005 ff4e 	bl	8022fb0 <__aeabi_atexit>
 801d114:	4c0f      	ldr	r4, [pc, #60]	@ (801d154 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801d116:	7823      	ldrb	r3, [r4, #0]
 801d118:	f3bf 8f5b 	dmb	ish
 801d11c:	07db      	lsls	r3, r3, #31
 801d11e:	d40b      	bmi.n	801d138 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801d120:	4620      	mov	r0, r4
 801d122:	f005 ff4c 	bl	8022fbe <__cxa_guard_acquire>
 801d126:	b138      	cbz	r0, 801d138 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801d128:	4620      	mov	r0, r4
 801d12a:	f005 ff54 	bl	8022fd6 <__cxa_guard_release>
 801d12e:	4a06      	ldr	r2, [pc, #24]	@ (801d148 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801d130:	4909      	ldr	r1, [pc, #36]	@ (801d158 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801d132:	480a      	ldr	r0, [pc, #40]	@ (801d15c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801d134:	f005 ff3c 	bl	8022fb0 <__aeabi_atexit>
 801d138:	4b05      	ldr	r3, [pc, #20]	@ (801d150 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801d13a:	646b      	str	r3, [r5, #68]	@ 0x44
 801d13c:	4b07      	ldr	r3, [pc, #28]	@ (801d15c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801d13e:	64ab      	str	r3, [r5, #72]	@ 0x48
 801d140:	bd38      	pop	{r3, r4, r5, pc}
 801d142:	bf00      	nop
 801d144:	240256a8 	.word	0x240256a8
 801d148:	24000000 	.word	0x24000000
 801d14c:	0801a0d1 	.word	0x0801a0d1
 801d150:	240000c0 	.word	0x240000c0
 801d154:	240256ac 	.word	0x240256ac
 801d158:	0801a0cf 	.word	0x0801a0cf
 801d15c:	240000c4 	.word	0x240000c4

0801d160 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801d160:	b538      	push	{r3, r4, r5, lr}
 801d162:	4c15      	ldr	r4, [pc, #84]	@ (801d1b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801d164:	4605      	mov	r5, r0
 801d166:	7823      	ldrb	r3, [r4, #0]
 801d168:	f3bf 8f5b 	dmb	ish
 801d16c:	07da      	lsls	r2, r3, #31
 801d16e:	d40b      	bmi.n	801d188 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801d170:	4620      	mov	r0, r4
 801d172:	f005 ff24 	bl	8022fbe <__cxa_guard_acquire>
 801d176:	b138      	cbz	r0, 801d188 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801d178:	4620      	mov	r0, r4
 801d17a:	f005 ff2c 	bl	8022fd6 <__cxa_guard_release>
 801d17e:	4a0f      	ldr	r2, [pc, #60]	@ (801d1bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801d180:	490f      	ldr	r1, [pc, #60]	@ (801d1c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801d182:	4810      	ldr	r0, [pc, #64]	@ (801d1c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801d184:	f005 ff14 	bl	8022fb0 <__aeabi_atexit>
 801d188:	4c0f      	ldr	r4, [pc, #60]	@ (801d1c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801d18a:	7823      	ldrb	r3, [r4, #0]
 801d18c:	f3bf 8f5b 	dmb	ish
 801d190:	07db      	lsls	r3, r3, #31
 801d192:	d40b      	bmi.n	801d1ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801d194:	4620      	mov	r0, r4
 801d196:	f005 ff12 	bl	8022fbe <__cxa_guard_acquire>
 801d19a:	b138      	cbz	r0, 801d1ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801d19c:	4620      	mov	r0, r4
 801d19e:	f005 ff1a 	bl	8022fd6 <__cxa_guard_release>
 801d1a2:	4a06      	ldr	r2, [pc, #24]	@ (801d1bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801d1a4:	4909      	ldr	r1, [pc, #36]	@ (801d1cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801d1a6:	480a      	ldr	r0, [pc, #40]	@ (801d1d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801d1a8:	f005 ff02 	bl	8022fb0 <__aeabi_atexit>
 801d1ac:	4b05      	ldr	r3, [pc, #20]	@ (801d1c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801d1ae:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801d1b0:	4b07      	ldr	r3, [pc, #28]	@ (801d1d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801d1b2:	642b      	str	r3, [r5, #64]	@ 0x40
 801d1b4:	bd38      	pop	{r3, r4, r5, pc}
 801d1b6:	bf00      	nop
 801d1b8:	24025688 	.word	0x24025688
 801d1bc:	24000000 	.word	0x24000000
 801d1c0:	0801a0d5 	.word	0x0801a0d5
 801d1c4:	240000a0 	.word	0x240000a0
 801d1c8:	2402568c 	.word	0x2402568c
 801d1cc:	0801a0d3 	.word	0x0801a0d3
 801d1d0:	240000a4 	.word	0x240000a4

0801d1d4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801d1d4:	b510      	push	{r4, lr}
 801d1d6:	4604      	mov	r4, r0
 801d1d8:	f7ff ff88 	bl	801d0ec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801d1dc:	4620      	mov	r0, r4
 801d1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d1e2:	f7ff bfbd 	b.w	801d160 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801d1e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801d1e8:	b538      	push	{r3, r4, r5, lr}
 801d1ea:	4c15      	ldr	r4, [pc, #84]	@ (801d240 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801d1ec:	4605      	mov	r5, r0
 801d1ee:	7823      	ldrb	r3, [r4, #0]
 801d1f0:	f3bf 8f5b 	dmb	ish
 801d1f4:	07da      	lsls	r2, r3, #31
 801d1f6:	d40b      	bmi.n	801d210 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801d1f8:	4620      	mov	r0, r4
 801d1fa:	f005 fee0 	bl	8022fbe <__cxa_guard_acquire>
 801d1fe:	b138      	cbz	r0, 801d210 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801d200:	4620      	mov	r0, r4
 801d202:	f005 fee8 	bl	8022fd6 <__cxa_guard_release>
 801d206:	4a0f      	ldr	r2, [pc, #60]	@ (801d244 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801d208:	490f      	ldr	r1, [pc, #60]	@ (801d248 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801d20a:	4810      	ldr	r0, [pc, #64]	@ (801d24c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801d20c:	f005 fed0 	bl	8022fb0 <__aeabi_atexit>
 801d210:	4c0f      	ldr	r4, [pc, #60]	@ (801d250 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801d212:	7823      	ldrb	r3, [r4, #0]
 801d214:	f3bf 8f5b 	dmb	ish
 801d218:	07db      	lsls	r3, r3, #31
 801d21a:	d40b      	bmi.n	801d234 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801d21c:	4620      	mov	r0, r4
 801d21e:	f005 fece 	bl	8022fbe <__cxa_guard_acquire>
 801d222:	b138      	cbz	r0, 801d234 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801d224:	4620      	mov	r0, r4
 801d226:	f005 fed6 	bl	8022fd6 <__cxa_guard_release>
 801d22a:	4a06      	ldr	r2, [pc, #24]	@ (801d244 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801d22c:	4909      	ldr	r1, [pc, #36]	@ (801d254 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801d22e:	480a      	ldr	r0, [pc, #40]	@ (801d258 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801d230:	f005 febe 	bl	8022fb0 <__aeabi_atexit>
 801d234:	4b05      	ldr	r3, [pc, #20]	@ (801d24c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801d236:	656b      	str	r3, [r5, #84]	@ 0x54
 801d238:	4b07      	ldr	r3, [pc, #28]	@ (801d258 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801d23a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801d23c:	bd38      	pop	{r3, r4, r5, pc}
 801d23e:	bf00      	nop
 801d240:	24025680 	.word	0x24025680
 801d244:	24000000 	.word	0x24000000
 801d248:	0801a0c9 	.word	0x0801a0c9
 801d24c:	24000098 	.word	0x24000098
 801d250:	24025684 	.word	0x24025684
 801d254:	0801a0c7 	.word	0x0801a0c7
 801d258:	2400009c 	.word	0x2400009c

0801d25c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801d25c:	b538      	push	{r3, r4, r5, lr}
 801d25e:	4c15      	ldr	r4, [pc, #84]	@ (801d2b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801d260:	4605      	mov	r5, r0
 801d262:	7823      	ldrb	r3, [r4, #0]
 801d264:	f3bf 8f5b 	dmb	ish
 801d268:	07da      	lsls	r2, r3, #31
 801d26a:	d40b      	bmi.n	801d284 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801d26c:	4620      	mov	r0, r4
 801d26e:	f005 fea6 	bl	8022fbe <__cxa_guard_acquire>
 801d272:	b138      	cbz	r0, 801d284 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801d274:	4620      	mov	r0, r4
 801d276:	f005 feae 	bl	8022fd6 <__cxa_guard_release>
 801d27a:	4a0f      	ldr	r2, [pc, #60]	@ (801d2b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801d27c:	490f      	ldr	r1, [pc, #60]	@ (801d2bc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801d27e:	4810      	ldr	r0, [pc, #64]	@ (801d2c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801d280:	f005 fe96 	bl	8022fb0 <__aeabi_atexit>
 801d284:	4c0f      	ldr	r4, [pc, #60]	@ (801d2c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801d286:	7823      	ldrb	r3, [r4, #0]
 801d288:	f3bf 8f5b 	dmb	ish
 801d28c:	07db      	lsls	r3, r3, #31
 801d28e:	d40b      	bmi.n	801d2a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801d290:	4620      	mov	r0, r4
 801d292:	f005 fe94 	bl	8022fbe <__cxa_guard_acquire>
 801d296:	b138      	cbz	r0, 801d2a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801d298:	4620      	mov	r0, r4
 801d29a:	f005 fe9c 	bl	8022fd6 <__cxa_guard_release>
 801d29e:	4a06      	ldr	r2, [pc, #24]	@ (801d2b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801d2a0:	4909      	ldr	r1, [pc, #36]	@ (801d2c8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801d2a2:	480a      	ldr	r0, [pc, #40]	@ (801d2cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801d2a4:	f005 fe84 	bl	8022fb0 <__aeabi_atexit>
 801d2a8:	4b05      	ldr	r3, [pc, #20]	@ (801d2c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801d2aa:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801d2ac:	4b07      	ldr	r3, [pc, #28]	@ (801d2cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801d2ae:	652b      	str	r3, [r5, #80]	@ 0x50
 801d2b0:	bd38      	pop	{r3, r4, r5, pc}
 801d2b2:	bf00      	nop
 801d2b4:	24025670 	.word	0x24025670
 801d2b8:	24000000 	.word	0x24000000
 801d2bc:	0801a0cd 	.word	0x0801a0cd
 801d2c0:	24000088 	.word	0x24000088
 801d2c4:	24025674 	.word	0x24025674
 801d2c8:	0801a0cb 	.word	0x0801a0cb
 801d2cc:	2400008c 	.word	0x2400008c

0801d2d0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801d2d0:	b510      	push	{r4, lr}
 801d2d2:	4604      	mov	r4, r0
 801d2d4:	f7ff ff88 	bl	801d1e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801d2d8:	4620      	mov	r0, r4
 801d2da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d2de:	f7ff bfbd 	b.w	801d25c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801d2e2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801d2e2:	b510      	push	{r4, lr}
 801d2e4:	4604      	mov	r4, r0
 801d2e6:	f7ff fff3 	bl	801d2d0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801d2ea:	4620      	mov	r0, r4
 801d2ec:	f7ff ff72 	bl	801d1d4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801d2f0:	4620      	mov	r0, r4
 801d2f2:	f7ff fe73 	bl	801cfdc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801d2f6:	4620      	mov	r0, r4
 801d2f8:	f7ff fdf2 	bl	801cee0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801d2fc:	4620      	mov	r0, r4
 801d2fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d302:	f7ff bee9 	b.w	801d0d8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801d308 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801d308:	b538      	push	{r3, r4, r5, lr}
 801d30a:	4c0b      	ldr	r4, [pc, #44]	@ (801d338 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801d30c:	4605      	mov	r5, r0
 801d30e:	7823      	ldrb	r3, [r4, #0]
 801d310:	f3bf 8f5b 	dmb	ish
 801d314:	07db      	lsls	r3, r3, #31
 801d316:	d40b      	bmi.n	801d330 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801d318:	4620      	mov	r0, r4
 801d31a:	f005 fe50 	bl	8022fbe <__cxa_guard_acquire>
 801d31e:	b138      	cbz	r0, 801d330 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801d320:	4620      	mov	r0, r4
 801d322:	f005 fe58 	bl	8022fd6 <__cxa_guard_release>
 801d326:	4a05      	ldr	r2, [pc, #20]	@ (801d33c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801d328:	4905      	ldr	r1, [pc, #20]	@ (801d340 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801d32a:	4806      	ldr	r0, [pc, #24]	@ (801d344 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801d32c:	f005 fe40 	bl	8022fb0 <__aeabi_atexit>
 801d330:	4b04      	ldr	r3, [pc, #16]	@ (801d344 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801d332:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801d334:	bd38      	pop	{r3, r4, r5, pc}
 801d336:	bf00      	nop
 801d338:	24025664 	.word	0x24025664
 801d33c:	24000000 	.word	0x24000000
 801d340:	0801a0c5 	.word	0x0801a0c5
 801d344:	24000080 	.word	0x24000080

0801d348 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801d348:	b538      	push	{r3, r4, r5, lr}
 801d34a:	4c0b      	ldr	r4, [pc, #44]	@ (801d378 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801d34c:	4605      	mov	r5, r0
 801d34e:	7823      	ldrb	r3, [r4, #0]
 801d350:	f3bf 8f5b 	dmb	ish
 801d354:	07db      	lsls	r3, r3, #31
 801d356:	d40b      	bmi.n	801d370 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801d358:	4620      	mov	r0, r4
 801d35a:	f005 fe30 	bl	8022fbe <__cxa_guard_acquire>
 801d35e:	b138      	cbz	r0, 801d370 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801d360:	4620      	mov	r0, r4
 801d362:	f005 fe38 	bl	8022fd6 <__cxa_guard_release>
 801d366:	4a05      	ldr	r2, [pc, #20]	@ (801d37c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801d368:	4905      	ldr	r1, [pc, #20]	@ (801d380 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801d36a:	4806      	ldr	r0, [pc, #24]	@ (801d384 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801d36c:	f005 fe20 	bl	8022fb0 <__aeabi_atexit>
 801d370:	4b04      	ldr	r3, [pc, #16]	@ (801d384 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801d372:	662b      	str	r3, [r5, #96]	@ 0x60
 801d374:	bd38      	pop	{r3, r4, r5, pc}
 801d376:	bf00      	nop
 801d378:	24025668 	.word	0x24025668
 801d37c:	24000000 	.word	0x24000000
 801d380:	0801a0c3 	.word	0x0801a0c3
 801d384:	24000084 	.word	0x24000084

0801d388 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801d388:	b570      	push	{r4, r5, r6, lr}
 801d38a:	4d0c      	ldr	r5, [pc, #48]	@ (801d3bc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801d38c:	4606      	mov	r6, r0
 801d38e:	4c0c      	ldr	r4, [pc, #48]	@ (801d3c0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801d390:	782b      	ldrb	r3, [r5, #0]
 801d392:	f3bf 8f5b 	dmb	ish
 801d396:	f013 0f01 	tst.w	r3, #1
 801d39a:	d10d      	bne.n	801d3b8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801d39c:	4628      	mov	r0, r5
 801d39e:	f005 fe0e 	bl	8022fbe <__cxa_guard_acquire>
 801d3a2:	b148      	cbz	r0, 801d3b8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801d3a4:	4b07      	ldr	r3, [pc, #28]	@ (801d3c4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801d3a6:	4628      	mov	r0, r5
 801d3a8:	6023      	str	r3, [r4, #0]
 801d3aa:	f005 fe14 	bl	8022fd6 <__cxa_guard_release>
 801d3ae:	4a06      	ldr	r2, [pc, #24]	@ (801d3c8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801d3b0:	4620      	mov	r0, r4
 801d3b2:	4906      	ldr	r1, [pc, #24]	@ (801d3cc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801d3b4:	f005 fdfc 	bl	8022fb0 <__aeabi_atexit>
 801d3b8:	6674      	str	r4, [r6, #100]	@ 0x64
 801d3ba:	bd70      	pop	{r4, r5, r6, pc}
 801d3bc:	2402566c 	.word	0x2402566c
 801d3c0:	240257c4 	.word	0x240257c4
 801d3c4:	080275c8 	.word	0x080275c8
 801d3c8:	24000000 	.word	0x24000000
 801d3cc:	0801a0c1 	.word	0x0801a0c1

0801d3d0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801d3d0:	b510      	push	{r4, lr}
 801d3d2:	4604      	mov	r4, r0
 801d3d4:	f7ff ff98 	bl	801d308 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801d3d8:	4620      	mov	r0, r4
 801d3da:	f7ff ffb5 	bl	801d348 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801d3de:	4620      	mov	r0, r4
 801d3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d3e4:	f7ff bfd0 	b.w	801d388 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801d3e8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801d3e8:	b570      	push	{r4, r5, r6, lr}
 801d3ea:	4d0c      	ldr	r5, [pc, #48]	@ (801d41c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801d3ec:	4606      	mov	r6, r0
 801d3ee:	4c0c      	ldr	r4, [pc, #48]	@ (801d420 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801d3f0:	782b      	ldrb	r3, [r5, #0]
 801d3f2:	f3bf 8f5b 	dmb	ish
 801d3f6:	f013 0f01 	tst.w	r3, #1
 801d3fa:	d10d      	bne.n	801d418 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801d3fc:	4628      	mov	r0, r5
 801d3fe:	f005 fdde 	bl	8022fbe <__cxa_guard_acquire>
 801d402:	b148      	cbz	r0, 801d418 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801d404:	4b07      	ldr	r3, [pc, #28]	@ (801d424 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801d406:	4628      	mov	r0, r5
 801d408:	6023      	str	r3, [r4, #0]
 801d40a:	f005 fde4 	bl	8022fd6 <__cxa_guard_release>
 801d40e:	4a06      	ldr	r2, [pc, #24]	@ (801d428 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801d410:	4620      	mov	r0, r4
 801d412:	4906      	ldr	r1, [pc, #24]	@ (801d42c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801d414:	f005 fdcc 	bl	8022fb0 <__aeabi_atexit>
 801d418:	66b4      	str	r4, [r6, #104]	@ 0x68
 801d41a:	bd70      	pop	{r4, r5, r6, pc}
 801d41c:	24025660 	.word	0x24025660
 801d420:	240256c0 	.word	0x240256c0
 801d424:	080275e0 	.word	0x080275e0
 801d428:	24000000 	.word	0x24000000
 801d42c:	0801a0bf 	.word	0x0801a0bf

0801d430 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801d430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d434:	b087      	sub	sp, #28
 801d436:	788d      	ldrb	r5, [r1, #2]
 801d438:	f891 9000 	ldrb.w	r9, [r1]
 801d43c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801d440:	9501      	str	r5, [sp, #4]
 801d442:	784d      	ldrb	r5, [r1, #1]
 801d444:	9203      	str	r2, [sp, #12]
 801d446:	9502      	str	r5, [sp, #8]
 801d448:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801d44c:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801d450:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801d454:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801d458:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801d45c:	fb06 0708 	mla	r7, r6, r8, r0
 801d460:	2e00      	cmp	r6, #0
 801d462:	eb02 0a07 	add.w	sl, r2, r7
 801d466:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801d46a:	9d01      	ldr	r5, [sp, #4]
 801d46c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801d470:	ea45 0509 	orr.w	r5, r5, r9
 801d474:	9505      	str	r5, [sp, #20]
 801d476:	f2c0 80b2 	blt.w	801d5de <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801d47a:	45b3      	cmp	fp, r6
 801d47c:	f340 80af 	ble.w	801d5de <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801d480:	2800      	cmp	r0, #0
 801d482:	f2c0 80aa 	blt.w	801d5da <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801d486:	4580      	cmp	r8, r0
 801d488:	f340 80a7 	ble.w	801d5da <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801d48c:	9a03      	ldr	r2, [sp, #12]
 801d48e:	5dd7      	ldrb	r7, [r2, r7]
 801d490:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d494:	441f      	add	r7, r3
 801d496:	1c42      	adds	r2, r0, #1
 801d498:	f100 80a4 	bmi.w	801d5e4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801d49c:	4590      	cmp	r8, r2
 801d49e:	f340 80a1 	ble.w	801d5e4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801d4a2:	2c00      	cmp	r4, #0
 801d4a4:	f000 809e 	beq.w	801d5e4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801d4a8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801d4ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d4b0:	441d      	add	r5, r3
 801d4b2:	3601      	adds	r6, #1
 801d4b4:	f100 809a 	bmi.w	801d5ec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801d4b8:	45b3      	cmp	fp, r6
 801d4ba:	f340 8097 	ble.w	801d5ec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801d4be:	f1bc 0f00 	cmp.w	ip, #0
 801d4c2:	f000 8093 	beq.w	801d5ec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801d4c6:	2800      	cmp	r0, #0
 801d4c8:	f2c0 808e 	blt.w	801d5e8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801d4cc:	4580      	cmp	r8, r0
 801d4ce:	f340 808b 	ble.w	801d5e8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801d4d2:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801d4d6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d4da:	441e      	add	r6, r3
 801d4dc:	3001      	adds	r0, #1
 801d4de:	f100 8088 	bmi.w	801d5f2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801d4e2:	4580      	cmp	r8, r0
 801d4e4:	f340 8085 	ble.w	801d5f2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801d4e8:	2c00      	cmp	r4, #0
 801d4ea:	f000 8082 	beq.w	801d5f2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801d4ee:	44d0      	add	r8, sl
 801d4f0:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d4f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d4f8:	4413      	add	r3, r2
 801d4fa:	b2a4      	uxth	r4, r4
 801d4fc:	f895 a000 	ldrb.w	sl, [r5]
 801d500:	fa1f fc8c 	uxth.w	ip, ip
 801d504:	fb04 fb0c 	mul.w	fp, r4, ip
 801d508:	0124      	lsls	r4, r4, #4
 801d50a:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801d50e:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801d512:	eba4 040b 	sub.w	r4, r4, fp
 801d516:	fa1f f08c 	uxth.w	r0, ip
 801d51a:	b2a2      	uxth	r2, r4
 801d51c:	783c      	ldrb	r4, [r7, #0]
 801d51e:	eba8 0800 	sub.w	r8, r8, r0
 801d522:	fa1f fc8e 	uxth.w	ip, lr
 801d526:	fb02 fa0a 	mul.w	sl, r2, sl
 801d52a:	ea6f 0e0e 	mvn.w	lr, lr
 801d52e:	fa1f f888 	uxth.w	r8, r8
 801d532:	fa5f fe8e 	uxtb.w	lr, lr
 801d536:	fb08 aa04 	mla	sl, r8, r4, sl
 801d53a:	7834      	ldrb	r4, [r6, #0]
 801d53c:	fb19 f90e 	smulbb	r9, r9, lr
 801d540:	fb00 aa04 	mla	sl, r0, r4, sl
 801d544:	781c      	ldrb	r4, [r3, #0]
 801d546:	fb0b a404 	mla	r4, fp, r4, sl
 801d54a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801d54e:	fb04 990c 	mla	r9, r4, ip, r9
 801d552:	fa1f f989 	uxth.w	r9, r9
 801d556:	f109 0401 	add.w	r4, r9, #1
 801d55a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801d55e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d562:	f881 9000 	strb.w	r9, [r1]
 801d566:	f895 9001 	ldrb.w	r9, [r5, #1]
 801d56a:	787c      	ldrb	r4, [r7, #1]
 801d56c:	fb02 f909 	mul.w	r9, r2, r9
 801d570:	fb08 9904 	mla	r9, r8, r4, r9
 801d574:	7874      	ldrb	r4, [r6, #1]
 801d576:	fb00 9904 	mla	r9, r0, r4, r9
 801d57a:	785c      	ldrb	r4, [r3, #1]
 801d57c:	fb0b 9404 	mla	r4, fp, r4, r9
 801d580:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801d584:	9c02      	ldr	r4, [sp, #8]
 801d586:	fb14 f90e 	smulbb	r9, r4, lr
 801d58a:	fb0a 940c 	mla	r4, sl, ip, r9
 801d58e:	b2a4      	uxth	r4, r4
 801d590:	f104 0901 	add.w	r9, r4, #1
 801d594:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801d598:	1224      	asrs	r4, r4, #8
 801d59a:	704c      	strb	r4, [r1, #1]
 801d59c:	78ad      	ldrb	r5, [r5, #2]
 801d59e:	78bc      	ldrb	r4, [r7, #2]
 801d5a0:	436a      	muls	r2, r5
 801d5a2:	789b      	ldrb	r3, [r3, #2]
 801d5a4:	fb08 2204 	mla	r2, r8, r4, r2
 801d5a8:	78b4      	ldrb	r4, [r6, #2]
 801d5aa:	fb00 2004 	mla	r0, r0, r4, r2
 801d5ae:	fb0b 0b03 	mla	fp, fp, r3, r0
 801d5b2:	9b01      	ldr	r3, [sp, #4]
 801d5b4:	fb13 fe0e 	smulbb	lr, r3, lr
 801d5b8:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801d5bc:	fb0b ec0c 	mla	ip, fp, ip, lr
 801d5c0:	fa1f fc8c 	uxth.w	ip, ip
 801d5c4:	f10c 0e01 	add.w	lr, ip, #1
 801d5c8:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801d5cc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d5d0:	f881 c002 	strb.w	ip, [r1, #2]
 801d5d4:	b007      	add	sp, #28
 801d5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5da:	af05      	add	r7, sp, #20
 801d5dc:	e75b      	b.n	801d496 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801d5de:	ad05      	add	r5, sp, #20
 801d5e0:	462f      	mov	r7, r5
 801d5e2:	e766      	b.n	801d4b2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801d5e4:	ad05      	add	r5, sp, #20
 801d5e6:	e764      	b.n	801d4b2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801d5e8:	ae05      	add	r6, sp, #20
 801d5ea:	e777      	b.n	801d4dc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801d5ec:	ab05      	add	r3, sp, #20
 801d5ee:	461e      	mov	r6, r3
 801d5f0:	e783      	b.n	801d4fa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801d5f2:	ab05      	add	r3, sp, #20
 801d5f4:	e781      	b.n	801d4fa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801d5f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d5f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5fa:	b093      	sub	sp, #76	@ 0x4c
 801d5fc:	9210      	str	r2, [sp, #64]	@ 0x40
 801d5fe:	9309      	str	r3, [sp, #36]	@ 0x24
 801d600:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d602:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801d606:	9011      	str	r0, [sp, #68]	@ 0x44
 801d608:	930e      	str	r3, [sp, #56]	@ 0x38
 801d60a:	6850      	ldr	r0, [r2, #4]
 801d60c:	910d      	str	r1, [sp, #52]	@ 0x34
 801d60e:	6812      	ldr	r2, [r2, #0]
 801d610:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801d614:	fb00 1303 	mla	r3, r0, r3, r1
 801d618:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d61c:	18d3      	adds	r3, r2, r3
 801d61e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d620:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d622:	681b      	ldr	r3, [r3, #0]
 801d624:	930c      	str	r3, [sp, #48]	@ 0x30
 801d626:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d628:	685c      	ldr	r4, [r3, #4]
 801d62a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d62c:	3404      	adds	r4, #4
 801d62e:	43db      	mvns	r3, r3
 801d630:	b2db      	uxtb	r3, r3
 801d632:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d634:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d636:	2b00      	cmp	r3, #0
 801d638:	dc03      	bgt.n	801d642 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d63a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d63c:	2b00      	cmp	r3, #0
 801d63e:	f340 8250 	ble.w	801dae2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801d642:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d644:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d648:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d64c:	1e48      	subs	r0, r1, #1
 801d64e:	1e55      	subs	r5, r2, #1
 801d650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d652:	2b00      	cmp	r3, #0
 801d654:	f340 80ee 	ble.w	801d834 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801d658:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801d65a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d65c:	1436      	asrs	r6, r6, #16
 801d65e:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d662:	d406      	bmi.n	801d672 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d664:	4286      	cmp	r6, r0
 801d666:	da04      	bge.n	801d672 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d668:	2b00      	cmp	r3, #0
 801d66a:	db02      	blt.n	801d672 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d66c:	42ab      	cmp	r3, r5
 801d66e:	f2c0 80e2 	blt.w	801d836 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801d672:	3601      	adds	r6, #1
 801d674:	f100 80cf 	bmi.w	801d816 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801d678:	42b1      	cmp	r1, r6
 801d67a:	f2c0 80cc 	blt.w	801d816 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801d67e:	3301      	adds	r3, #1
 801d680:	f100 80c9 	bmi.w	801d816 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801d684:	429a      	cmp	r2, r3
 801d686:	f2c0 80c6 	blt.w	801d816 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801d68a:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801d68e:	f1bb 0f00 	cmp.w	fp, #0
 801d692:	f340 80f1 	ble.w	801d878 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801d696:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d698:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d69a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801d69c:	141d      	asrs	r5, r3, #16
 801d69e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d6a0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d6a4:	68c7      	ldr	r7, [r0, #12]
 801d6a6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801d6a8:	1418      	asrs	r0, r3, #16
 801d6aa:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801d6ae:	6892      	ldr	r2, [r2, #8]
 801d6b0:	f100 8137 	bmi.w	801d922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801d6b4:	f102 3cff 	add.w	ip, r2, #4294967295
 801d6b8:	4560      	cmp	r0, ip
 801d6ba:	f280 8132 	bge.w	801d922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801d6be:	2d00      	cmp	r5, #0
 801d6c0:	f2c0 812f 	blt.w	801d922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801d6c4:	f107 3cff 	add.w	ip, r7, #4294967295
 801d6c8:	4565      	cmp	r5, ip
 801d6ca:	f280 812a 	bge.w	801d922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801d6ce:	b212      	sxth	r2, r2
 801d6d0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801d6d2:	fb05 0002 	mla	r0, r5, r2, r0
 801d6d6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d6d8:	f817 c000 	ldrb.w	ip, [r7, r0]
 801d6dc:	4405      	add	r5, r0
 801d6de:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d6e2:	eb04 0e0c 	add.w	lr, r4, ip
 801d6e6:	f1b8 0f00 	cmp.w	r8, #0
 801d6ea:	f000 810c 	beq.w	801d906 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801d6ee:	786f      	ldrb	r7, [r5, #1]
 801d6f0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d6f4:	4427      	add	r7, r4
 801d6f6:	2900      	cmp	r1, #0
 801d6f8:	f000 810d 	beq.w	801d916 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801d6fc:	18a8      	adds	r0, r5, r2
 801d6fe:	5caa      	ldrb	r2, [r5, r2]
 801d700:	7840      	ldrb	r0, [r0, #1]
 801d702:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d706:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d70a:	4422      	add	r2, r4
 801d70c:	4420      	add	r0, r4
 801d70e:	fa1f f388 	uxth.w	r3, r8
 801d712:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801d716:	b289      	uxth	r1, r1
 801d718:	f897 c000 	ldrb.w	ip, [r7]
 801d71c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801d720:	fb03 f901 	mul.w	r9, r3, r1
 801d724:	011b      	lsls	r3, r3, #4
 801d726:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d72a:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801d72e:	eba3 0309 	sub.w	r3, r3, r9
 801d732:	b289      	uxth	r1, r1
 801d734:	b29b      	uxth	r3, r3
 801d736:	eba8 0801 	sub.w	r8, r8, r1
 801d73a:	fb03 fc0c 	mul.w	ip, r3, ip
 801d73e:	fa1f f888 	uxth.w	r8, r8
 801d742:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d744:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d746:	fb08 cc0a 	mla	ip, r8, sl, ip
 801d74a:	f892 a000 	ldrb.w	sl, [r2]
 801d74e:	fb01 cc0a 	mla	ip, r1, sl, ip
 801d752:	f890 a000 	ldrb.w	sl, [r0]
 801d756:	fb09 cc0a 	mla	ip, r9, sl, ip
 801d75a:	f896 a000 	ldrb.w	sl, [r6]
 801d75e:	fb1a fa03 	smulbb	sl, sl, r3
 801d762:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d766:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d768:	fb0c ac05 	mla	ip, ip, r5, sl
 801d76c:	fa1f fc8c 	uxth.w	ip, ip
 801d770:	f10c 0a01 	add.w	sl, ip, #1
 801d774:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801d778:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d77c:	f886 a000 	strb.w	sl, [r6]
 801d780:	f897 c001 	ldrb.w	ip, [r7, #1]
 801d784:	f89e a001 	ldrb.w	sl, [lr, #1]
 801d788:	fb03 fc0c 	mul.w	ip, r3, ip
 801d78c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d78e:	fb08 cc0a 	mla	ip, r8, sl, ip
 801d792:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d796:	fb01 cc0a 	mla	ip, r1, sl, ip
 801d79a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d79e:	fb09 cc0a 	mla	ip, r9, sl, ip
 801d7a2:	f896 a001 	ldrb.w	sl, [r6, #1]
 801d7a6:	fb1a fa03 	smulbb	sl, sl, r3
 801d7aa:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d7ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d7b0:	fb0c ac05 	mla	ip, ip, r5, sl
 801d7b4:	fa1f fc8c 	uxth.w	ip, ip
 801d7b8:	f10c 0a01 	add.w	sl, ip, #1
 801d7bc:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801d7c0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d7c4:	f886 c001 	strb.w	ip, [r6, #1]
 801d7c8:	78bf      	ldrb	r7, [r7, #2]
 801d7ca:	f89e c002 	ldrb.w	ip, [lr, #2]
 801d7ce:	437b      	muls	r3, r7
 801d7d0:	fb08 330c 	mla	r3, r8, ip, r3
 801d7d4:	f892 c002 	ldrb.w	ip, [r2, #2]
 801d7d8:	7882      	ldrb	r2, [r0, #2]
 801d7da:	fb01 310c 	mla	r1, r1, ip, r3
 801d7de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d7e0:	fb09 1902 	mla	r9, r9, r2, r1
 801d7e4:	78b1      	ldrb	r1, [r6, #2]
 801d7e6:	fb11 f103 	smulbb	r1, r1, r3
 801d7ea:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801d7ee:	fb09 1505 	mla	r5, r9, r5, r1
 801d7f2:	b2ad      	uxth	r5, r5
 801d7f4:	1c6b      	adds	r3, r5, #1
 801d7f6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d7fa:	122d      	asrs	r5, r5, #8
 801d7fc:	70b5      	strb	r5, [r6, #2]
 801d7fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d800:	3603      	adds	r6, #3
 801d802:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801d804:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d808:	4413      	add	r3, r2
 801d80a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d80c:	931d      	str	r3, [sp, #116]	@ 0x74
 801d80e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d810:	4413      	add	r3, r2
 801d812:	931e      	str	r3, [sp, #120]	@ 0x78
 801d814:	e73b      	b.n	801d68e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d816:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d818:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801d81a:	4433      	add	r3, r6
 801d81c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d81e:	931d      	str	r3, [sp, #116]	@ 0x74
 801d820:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d822:	4433      	add	r3, r6
 801d824:	931e      	str	r3, [sp, #120]	@ 0x78
 801d826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d828:	3b01      	subs	r3, #1
 801d82a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d82c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d82e:	3303      	adds	r3, #3
 801d830:	930a      	str	r3, [sp, #40]	@ 0x28
 801d832:	e70d      	b.n	801d650 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d834:	d028      	beq.n	801d888 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801d836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d838:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801d83a:	3b01      	subs	r3, #1
 801d83c:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801d83e:	fb00 5003 	mla	r0, r0, r3, r5
 801d842:	1400      	asrs	r0, r0, #16
 801d844:	f53f af21 	bmi.w	801d68a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d848:	3901      	subs	r1, #1
 801d84a:	4288      	cmp	r0, r1
 801d84c:	f6bf af1d 	bge.w	801d68a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d850:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801d852:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d854:	fb01 0303 	mla	r3, r1, r3, r0
 801d858:	141b      	asrs	r3, r3, #16
 801d85a:	f53f af16 	bmi.w	801d68a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d85e:	3a01      	subs	r2, #1
 801d860:	4293      	cmp	r3, r2
 801d862:	f6bf af12 	bge.w	801d68a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d866:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d868:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801d86c:	1cdf      	adds	r7, r3, #3
 801d86e:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801d872:	f1b9 0f00 	cmp.w	r9, #0
 801d876:	dc73      	bgt.n	801d960 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801d878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d87a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d87c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d880:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d884:	441a      	add	r2, r3
 801d886:	920a      	str	r2, [sp, #40]	@ 0x28
 801d888:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	f340 8129 	ble.w	801dae2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801d890:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d894:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d896:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d89a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d89e:	eef0 6a62 	vmov.f32	s13, s5
 801d8a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d8a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d8aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d8ae:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801d8b2:	eef0 6a43 	vmov.f32	s13, s6
 801d8b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d8ba:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801d8be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d8c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d8c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d8ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d8ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d8d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d8d6:	ee12 2a90 	vmov	r2, s5
 801d8da:	eef0 2a47 	vmov.f32	s5, s14
 801d8de:	fb92 f3f3 	sdiv	r3, r2, r3
 801d8e2:	ee13 2a10 	vmov	r2, s6
 801d8e6:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d8e8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d8ea:	eeb0 3a67 	vmov.f32	s6, s15
 801d8ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801d8f2:	9320      	str	r3, [sp, #128]	@ 0x80
 801d8f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d8f6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d8f8:	3b01      	subs	r3, #1
 801d8fa:	930d      	str	r3, [sp, #52]	@ 0x34
 801d8fc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d8fe:	bf08      	it	eq
 801d900:	4613      	moveq	r3, r2
 801d902:	9309      	str	r3, [sp, #36]	@ 0x24
 801d904:	e696      	b.n	801d634 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d906:	b149      	cbz	r1, 801d91c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801d908:	5caa      	ldrb	r2, [r5, r2]
 801d90a:	4670      	mov	r0, lr
 801d90c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d910:	4422      	add	r2, r4
 801d912:	4677      	mov	r7, lr
 801d914:	e6fb      	b.n	801d70e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d916:	4670      	mov	r0, lr
 801d918:	4672      	mov	r2, lr
 801d91a:	e6f8      	b.n	801d70e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d91c:	4670      	mov	r0, lr
 801d91e:	4672      	mov	r2, lr
 801d920:	e7f7      	b.n	801d912 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801d922:	f110 0c01 	adds.w	ip, r0, #1
 801d926:	f53f af6a 	bmi.w	801d7fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d92a:	4562      	cmp	r2, ip
 801d92c:	f6ff af67 	blt.w	801d7fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d930:	f115 0c01 	adds.w	ip, r5, #1
 801d934:	f53f af63 	bmi.w	801d7fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d938:	4567      	cmp	r7, ip
 801d93a:	f6ff af60 	blt.w	801d7fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d93e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d940:	b23f      	sxth	r7, r7
 801d942:	b212      	sxth	r2, r2
 801d944:	9002      	str	r0, [sp, #8]
 801d946:	9701      	str	r7, [sp, #4]
 801d948:	9200      	str	r2, [sp, #0]
 801d94a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d94c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d94e:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801d952:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801d956:	4623      	mov	r3, r4
 801d958:	4631      	mov	r1, r6
 801d95a:	f7ff fd69 	bl	801d430 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801d95e:	e74e      	b.n	801d7fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d960:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d962:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d964:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d968:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801d96a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801d96c:	1400      	asrs	r0, r0, #16
 801d96e:	142d      	asrs	r5, r5, #16
 801d970:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d972:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d976:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d97a:	fb02 5000 	mla	r0, r2, r0, r5
 801d97e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d980:	f815 e000 	ldrb.w	lr, [r5, r0]
 801d984:	eb05 0c00 	add.w	ip, r5, r0
 801d988:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d98c:	eb04 060e 	add.w	r6, r4, lr
 801d990:	2b00      	cmp	r3, #0
 801d992:	f000 8097 	beq.w	801dac4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801d996:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801d99a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d99e:	4425      	add	r5, r4
 801d9a0:	2900      	cmp	r1, #0
 801d9a2:	f000 8098 	beq.w	801dad6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801d9a6:	eb0c 0002 	add.w	r0, ip, r2
 801d9aa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d9ae:	7840      	ldrb	r0, [r0, #1]
 801d9b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d9b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d9b8:	4422      	add	r2, r4
 801d9ba:	4420      	add	r0, r4
 801d9bc:	b29b      	uxth	r3, r3
 801d9be:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801d9c2:	b289      	uxth	r1, r1
 801d9c4:	f895 e000 	ldrb.w	lr, [r5]
 801d9c8:	3703      	adds	r7, #3
 801d9ca:	f109 39ff 	add.w	r9, r9, #4294967295
 801d9ce:	fb03 f801 	mul.w	r8, r3, r1
 801d9d2:	011b      	lsls	r3, r3, #4
 801d9d4:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801d9d8:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801d9dc:	eba3 0308 	sub.w	r3, r3, r8
 801d9e0:	b289      	uxth	r1, r1
 801d9e2:	b29b      	uxth	r3, r3
 801d9e4:	ebac 0c01 	sub.w	ip, ip, r1
 801d9e8:	fb03 fe0e 	mul.w	lr, r3, lr
 801d9ec:	fa1f fc8c 	uxth.w	ip, ip
 801d9f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d9f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d9f4:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d9f8:	f892 b000 	ldrb.w	fp, [r2]
 801d9fc:	fb01 ee0b 	mla	lr, r1, fp, lr
 801da00:	f890 b000 	ldrb.w	fp, [r0]
 801da04:	fb08 ee0b 	mla	lr, r8, fp, lr
 801da08:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801da0c:	fb1b fb03 	smulbb	fp, fp, r3
 801da10:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801da14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da16:	fb0e be0a 	mla	lr, lr, sl, fp
 801da1a:	fa1f fe8e 	uxth.w	lr, lr
 801da1e:	f10e 0b01 	add.w	fp, lr, #1
 801da22:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801da26:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801da2a:	f807 ec06 	strb.w	lr, [r7, #-6]
 801da2e:	f895 e001 	ldrb.w	lr, [r5, #1]
 801da32:	f896 b001 	ldrb.w	fp, [r6, #1]
 801da36:	fb03 fe0e 	mul.w	lr, r3, lr
 801da3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801da3c:	fb0c ee0b 	mla	lr, ip, fp, lr
 801da40:	f892 b001 	ldrb.w	fp, [r2, #1]
 801da44:	fb01 ee0b 	mla	lr, r1, fp, lr
 801da48:	f890 b001 	ldrb.w	fp, [r0, #1]
 801da4c:	fb08 ee0b 	mla	lr, r8, fp, lr
 801da50:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801da54:	fb1b fb03 	smulbb	fp, fp, r3
 801da58:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801da5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da5e:	fb0e be0a 	mla	lr, lr, sl, fp
 801da62:	fa1f fe8e 	uxth.w	lr, lr
 801da66:	f10e 0b01 	add.w	fp, lr, #1
 801da6a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801da6e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801da72:	f807 ec05 	strb.w	lr, [r7, #-5]
 801da76:	78ad      	ldrb	r5, [r5, #2]
 801da78:	78b6      	ldrb	r6, [r6, #2]
 801da7a:	436b      	muls	r3, r5
 801da7c:	7895      	ldrb	r5, [r2, #2]
 801da7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801da80:	fb0c 3306 	mla	r3, ip, r6, r3
 801da84:	fb01 3305 	mla	r3, r1, r5, r3
 801da88:	7885      	ldrb	r5, [r0, #2]
 801da8a:	fb08 3805 	mla	r8, r8, r5, r3
 801da8e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801da92:	fb13 f302 	smulbb	r3, r3, r2
 801da96:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801da9a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801da9c:	fb08 380a 	mla	r8, r8, sl, r3
 801daa0:	fa1f f888 	uxth.w	r8, r8
 801daa4:	f108 0301 	add.w	r3, r8, #1
 801daa8:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801daac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801daae:	4413      	add	r3, r2
 801dab0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801dab2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dab6:	931d      	str	r3, [sp, #116]	@ 0x74
 801dab8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801daba:	f807 8c04 	strb.w	r8, [r7, #-4]
 801dabe:	4413      	add	r3, r2
 801dac0:	931e      	str	r3, [sp, #120]	@ 0x78
 801dac2:	e6d6      	b.n	801d872 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801dac4:	b151      	cbz	r1, 801dadc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801dac6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801daca:	4630      	mov	r0, r6
 801dacc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dad0:	4422      	add	r2, r4
 801dad2:	4635      	mov	r5, r6
 801dad4:	e772      	b.n	801d9bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801dad6:	4630      	mov	r0, r6
 801dad8:	4632      	mov	r2, r6
 801dada:	e76f      	b.n	801d9bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801dadc:	4630      	mov	r0, r6
 801dade:	4632      	mov	r2, r6
 801dae0:	e7f7      	b.n	801dad2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801dae2:	b013      	add	sp, #76	@ 0x4c
 801dae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dae8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801dae8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801daec:	784c      	ldrb	r4, [r1, #1]
 801daee:	f891 a002 	ldrb.w	sl, [r1, #2]
 801daf2:	0224      	lsls	r4, r4, #8
 801daf4:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801daf8:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801dafc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801db00:	f891 a000 	ldrb.w	sl, [r1]
 801db04:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801db08:	ea44 040a 	orr.w	r4, r4, sl
 801db0c:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801db10:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801db14:	9401      	str	r4, [sp, #4]
 801db16:	fb05 c70e 	mla	r7, r5, lr, ip
 801db1a:	2d00      	cmp	r5, #0
 801db1c:	eb02 0807 	add.w	r8, r2, r7
 801db20:	db72      	blt.n	801dc08 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801db22:	45a9      	cmp	r9, r5
 801db24:	dd70      	ble.n	801dc08 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801db26:	f1bc 0f00 	cmp.w	ip, #0
 801db2a:	db6b      	blt.n	801dc04 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801db2c:	45e6      	cmp	lr, ip
 801db2e:	dd69      	ble.n	801dc04 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801db30:	5dd7      	ldrb	r7, [r2, r7]
 801db32:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801db36:	441f      	add	r7, r3
 801db38:	f11c 0201 	adds.w	r2, ip, #1
 801db3c:	d467      	bmi.n	801dc0e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801db3e:	4596      	cmp	lr, r2
 801db40:	dd65      	ble.n	801dc0e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801db42:	2800      	cmp	r0, #0
 801db44:	d063      	beq.n	801dc0e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801db46:	f898 4001 	ldrb.w	r4, [r8, #1]
 801db4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801db4e:	441c      	add	r4, r3
 801db50:	3501      	adds	r5, #1
 801db52:	d460      	bmi.n	801dc16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801db54:	45a9      	cmp	r9, r5
 801db56:	dd5e      	ble.n	801dc16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801db58:	2e00      	cmp	r6, #0
 801db5a:	d05c      	beq.n	801dc16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801db5c:	f1bc 0f00 	cmp.w	ip, #0
 801db60:	db57      	blt.n	801dc12 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801db62:	45e6      	cmp	lr, ip
 801db64:	dd55      	ble.n	801dc12 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801db66:	f818 500e 	ldrb.w	r5, [r8, lr]
 801db6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801db6e:	441d      	add	r5, r3
 801db70:	f11c 0201 	adds.w	r2, ip, #1
 801db74:	d452      	bmi.n	801dc1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801db76:	4596      	cmp	lr, r2
 801db78:	dd50      	ble.n	801dc1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801db7a:	2800      	cmp	r0, #0
 801db7c:	d04e      	beq.n	801dc1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801db7e:	44c6      	add	lr, r8
 801db80:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801db84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801db88:	4413      	add	r3, r2
 801db8a:	b280      	uxth	r0, r0
 801db8c:	f897 8000 	ldrb.w	r8, [r7]
 801db90:	b2b2      	uxth	r2, r6
 801db92:	fb00 f602 	mul.w	r6, r0, r2
 801db96:	0100      	lsls	r0, r0, #4
 801db98:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801db9c:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801dba0:	1b80      	subs	r0, r0, r6
 801dba2:	fa1f fc82 	uxth.w	ip, r2
 801dba6:	b282      	uxth	r2, r0
 801dba8:	7820      	ldrb	r0, [r4, #0]
 801dbaa:	ebae 0e0c 	sub.w	lr, lr, ip
 801dbae:	4350      	muls	r0, r2
 801dbb0:	fa1f fe8e 	uxth.w	lr, lr
 801dbb4:	fb0e 0808 	mla	r8, lr, r8, r0
 801dbb8:	7828      	ldrb	r0, [r5, #0]
 801dbba:	fb0c 8800 	mla	r8, ip, r0, r8
 801dbbe:	7818      	ldrb	r0, [r3, #0]
 801dbc0:	fb06 8000 	mla	r0, r6, r0, r8
 801dbc4:	1200      	asrs	r0, r0, #8
 801dbc6:	7008      	strb	r0, [r1, #0]
 801dbc8:	7860      	ldrb	r0, [r4, #1]
 801dbca:	f897 8001 	ldrb.w	r8, [r7, #1]
 801dbce:	4350      	muls	r0, r2
 801dbd0:	fb0e 0808 	mla	r8, lr, r8, r0
 801dbd4:	7868      	ldrb	r0, [r5, #1]
 801dbd6:	fb0c 8800 	mla	r8, ip, r0, r8
 801dbda:	7858      	ldrb	r0, [r3, #1]
 801dbdc:	fb06 8000 	mla	r0, r6, r0, r8
 801dbe0:	1200      	asrs	r0, r0, #8
 801dbe2:	7048      	strb	r0, [r1, #1]
 801dbe4:	78a0      	ldrb	r0, [r4, #2]
 801dbe6:	78bf      	ldrb	r7, [r7, #2]
 801dbe8:	4350      	muls	r0, r2
 801dbea:	78aa      	ldrb	r2, [r5, #2]
 801dbec:	fb0e 0007 	mla	r0, lr, r7, r0
 801dbf0:	fb0c 0c02 	mla	ip, ip, r2, r0
 801dbf4:	789a      	ldrb	r2, [r3, #2]
 801dbf6:	fb06 c202 	mla	r2, r6, r2, ip
 801dbfa:	1212      	asrs	r2, r2, #8
 801dbfc:	708a      	strb	r2, [r1, #2]
 801dbfe:	b002      	add	sp, #8
 801dc00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc04:	af01      	add	r7, sp, #4
 801dc06:	e797      	b.n	801db38 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801dc08:	ac01      	add	r4, sp, #4
 801dc0a:	4627      	mov	r7, r4
 801dc0c:	e7a0      	b.n	801db50 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801dc0e:	ac01      	add	r4, sp, #4
 801dc10:	e79e      	b.n	801db50 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801dc12:	ad01      	add	r5, sp, #4
 801dc14:	e7ac      	b.n	801db70 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801dc16:	ab01      	add	r3, sp, #4
 801dc18:	461d      	mov	r5, r3
 801dc1a:	e7b6      	b.n	801db8a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801dc1c:	ab01      	add	r3, sp, #4
 801dc1e:	e7b4      	b.n	801db8a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801dc20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc24:	b08d      	sub	sp, #52	@ 0x34
 801dc26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dc2a:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801dc2e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801dc30:	900b      	str	r0, [sp, #44]	@ 0x2c
 801dc32:	9306      	str	r3, [sp, #24]
 801dc34:	6850      	ldr	r0, [r2, #4]
 801dc36:	6812      	ldr	r2, [r2, #0]
 801dc38:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801dc3a:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801dc3e:	fb00 1303 	mla	r3, r0, r3, r1
 801dc42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc46:	18d3      	adds	r3, r2, r3
 801dc48:	9307      	str	r3, [sp, #28]
 801dc4a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801dc4c:	681b      	ldr	r3, [r3, #0]
 801dc4e:	9308      	str	r3, [sp, #32]
 801dc50:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801dc52:	685d      	ldr	r5, [r3, #4]
 801dc54:	3504      	adds	r5, #4
 801dc56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc58:	2b00      	cmp	r3, #0
 801dc5a:	dc03      	bgt.n	801dc64 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801dc5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dc5e:	2b00      	cmp	r3, #0
 801dc60:	f340 81e6 	ble.w	801e030 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801dc64:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801dc66:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dc6a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dc6e:	1e48      	subs	r0, r1, #1
 801dc70:	1e56      	subs	r6, r2, #1
 801dc72:	9b06      	ldr	r3, [sp, #24]
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	f340 80bd 	ble.w	801ddf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801dc7a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801dc7c:	1427      	asrs	r7, r4, #16
 801dc7e:	ea4f 4323 	mov.w	r3, r3, asr #16
 801dc82:	d406      	bmi.n	801dc92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dc84:	4287      	cmp	r7, r0
 801dc86:	da04      	bge.n	801dc92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	db02      	blt.n	801dc92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dc8c:	42b3      	cmp	r3, r6
 801dc8e:	f2c0 80b2 	blt.w	801ddf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801dc92:	3701      	adds	r7, #1
 801dc94:	f100 80a1 	bmi.w	801ddda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801dc98:	42b9      	cmp	r1, r7
 801dc9a:	f2c0 809e 	blt.w	801ddda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801dc9e:	3301      	adds	r3, #1
 801dca0:	f100 809b 	bmi.w	801ddda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801dca4:	429a      	cmp	r2, r3
 801dca6:	f2c0 8098 	blt.w	801ddda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801dcaa:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801dcae:	f1bb 0f00 	cmp.w	fp, #0
 801dcb2:	f340 80bf 	ble.w	801de34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801dcb6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801dcb8:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801dcba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801dcbc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801dcc0:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801dcc4:	1420      	asrs	r0, r4, #16
 801dcc6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801dcc8:	ea4f 4723 	mov.w	r7, r3, asr #16
 801dccc:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801dcd0:	6892      	ldr	r2, [r2, #8]
 801dcd2:	f100 8103 	bmi.w	801dedc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801dcd6:	f102 3eff 	add.w	lr, r2, #4294967295
 801dcda:	4570      	cmp	r0, lr
 801dcdc:	f280 80fe 	bge.w	801dedc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801dce0:	2f00      	cmp	r7, #0
 801dce2:	f2c0 80fb 	blt.w	801dedc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801dce6:	f10c 3eff 	add.w	lr, ip, #4294967295
 801dcea:	4577      	cmp	r7, lr
 801dcec:	f280 80f6 	bge.w	801dedc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801dcf0:	b212      	sxth	r2, r2
 801dcf2:	fb07 0002 	mla	r0, r7, r2, r0
 801dcf6:	9f08      	ldr	r7, [sp, #32]
 801dcf8:	f817 8000 	ldrb.w	r8, [r7, r0]
 801dcfc:	eb07 0e00 	add.w	lr, r7, r0
 801dd00:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801dd04:	eb05 0c08 	add.w	ip, r5, r8
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	f000 80d8 	beq.w	801debe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801dd0e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801dd12:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801dd16:	442f      	add	r7, r5
 801dd18:	2900      	cmp	r1, #0
 801dd1a:	f000 80d9 	beq.w	801ded0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801dd1e:	eb0e 0002 	add.w	r0, lr, r2
 801dd22:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801dd26:	7840      	ldrb	r0, [r0, #1]
 801dd28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dd2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801dd30:	442a      	add	r2, r5
 801dd32:	4428      	add	r0, r5
 801dd34:	b29b      	uxth	r3, r3
 801dd36:	f815 a008 	ldrb.w	sl, [r5, r8]
 801dd3a:	b289      	uxth	r1, r1
 801dd3c:	f897 8000 	ldrb.w	r8, [r7]
 801dd40:	fb03 f901 	mul.w	r9, r3, r1
 801dd44:	011b      	lsls	r3, r3, #4
 801dd46:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801dd4a:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801dd4e:	eba3 0309 	sub.w	r3, r3, r9
 801dd52:	b289      	uxth	r1, r1
 801dd54:	b29b      	uxth	r3, r3
 801dd56:	ebae 0e01 	sub.w	lr, lr, r1
 801dd5a:	fb03 f808 	mul.w	r8, r3, r8
 801dd5e:	fa1f fe8e 	uxth.w	lr, lr
 801dd62:	fb0e 880a 	mla	r8, lr, sl, r8
 801dd66:	f892 a000 	ldrb.w	sl, [r2]
 801dd6a:	fb01 880a 	mla	r8, r1, sl, r8
 801dd6e:	f890 a000 	ldrb.w	sl, [r0]
 801dd72:	fb09 880a 	mla	r8, r9, sl, r8
 801dd76:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dd7a:	f886 8000 	strb.w	r8, [r6]
 801dd7e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801dd82:	f89c a001 	ldrb.w	sl, [ip, #1]
 801dd86:	fb03 f808 	mul.w	r8, r3, r8
 801dd8a:	fb0e 880a 	mla	r8, lr, sl, r8
 801dd8e:	f892 a001 	ldrb.w	sl, [r2, #1]
 801dd92:	fb01 880a 	mla	r8, r1, sl, r8
 801dd96:	f890 a001 	ldrb.w	sl, [r0, #1]
 801dd9a:	fb09 880a 	mla	r8, r9, sl, r8
 801dd9e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dda2:	f886 8001 	strb.w	r8, [r6, #1]
 801dda6:	78bf      	ldrb	r7, [r7, #2]
 801dda8:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ddac:	437b      	muls	r3, r7
 801ddae:	7892      	ldrb	r2, [r2, #2]
 801ddb0:	fb0e 330c 	mla	r3, lr, ip, r3
 801ddb4:	fb01 3102 	mla	r1, r1, r2, r3
 801ddb8:	7882      	ldrb	r2, [r0, #2]
 801ddba:	fb09 1902 	mla	r9, r9, r2, r1
 801ddbe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ddc2:	f886 9002 	strb.w	r9, [r6, #2]
 801ddc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ddc8:	3603      	adds	r6, #3
 801ddca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ddcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ddd0:	441c      	add	r4, r3
 801ddd2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ddd4:	4413      	add	r3, r2
 801ddd6:	9318      	str	r3, [sp, #96]	@ 0x60
 801ddd8:	e769      	b.n	801dcae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ddda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dddc:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801ddde:	441c      	add	r4, r3
 801dde0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801dde2:	443b      	add	r3, r7
 801dde4:	9318      	str	r3, [sp, #96]	@ 0x60
 801dde6:	9b06      	ldr	r3, [sp, #24]
 801dde8:	3b01      	subs	r3, #1
 801ddea:	9306      	str	r3, [sp, #24]
 801ddec:	9b07      	ldr	r3, [sp, #28]
 801ddee:	3303      	adds	r3, #3
 801ddf0:	9307      	str	r3, [sp, #28]
 801ddf2:	e73e      	b.n	801dc72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ddf4:	d026      	beq.n	801de44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801ddf6:	9b06      	ldr	r3, [sp, #24]
 801ddf8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801ddfa:	3b01      	subs	r3, #1
 801ddfc:	fb00 4003 	mla	r0, r0, r3, r4
 801de00:	1400      	asrs	r0, r0, #16
 801de02:	f53f af52 	bmi.w	801dcaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801de06:	3901      	subs	r1, #1
 801de08:	4288      	cmp	r0, r1
 801de0a:	f6bf af4e 	bge.w	801dcaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801de0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801de10:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801de12:	fb01 0303 	mla	r3, r1, r3, r0
 801de16:	141b      	asrs	r3, r3, #16
 801de18:	f53f af47 	bmi.w	801dcaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801de1c:	3a01      	subs	r2, #1
 801de1e:	4293      	cmp	r3, r2
 801de20:	f6bf af43 	bge.w	801dcaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801de24:	9b07      	ldr	r3, [sp, #28]
 801de26:	f8dd a018 	ldr.w	sl, [sp, #24]
 801de2a:	f103 0803 	add.w	r8, r3, #3
 801de2e:	f1ba 0f00 	cmp.w	sl, #0
 801de32:	dc71      	bgt.n	801df18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801de34:	9b06      	ldr	r3, [sp, #24]
 801de36:	9a07      	ldr	r2, [sp, #28]
 801de38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801de3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de40:	441a      	add	r2, r3
 801de42:	9207      	str	r2, [sp, #28]
 801de44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de46:	2b00      	cmp	r3, #0
 801de48:	f340 80f2 	ble.w	801e030 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801de4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801de50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801de52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de56:	eeb0 6a62 	vmov.f32	s12, s5
 801de5a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801de5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de66:	ee16 4a10 	vmov	r4, s12
 801de6a:	eeb0 6a43 	vmov.f32	s12, s6
 801de6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de72:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801de76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801de7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801de7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801de82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801de86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801de8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801de8e:	ee12 2a90 	vmov	r2, s5
 801de92:	eef0 2a47 	vmov.f32	s5, s14
 801de96:	fb92 f3f3 	sdiv	r3, r2, r3
 801de9a:	ee13 2a10 	vmov	r2, s6
 801de9e:	9319      	str	r3, [sp, #100]	@ 0x64
 801dea0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dea2:	eeb0 3a67 	vmov.f32	s6, s15
 801dea6:	fb92 f3f3 	sdiv	r3, r2, r3
 801deaa:	931a      	str	r3, [sp, #104]	@ 0x68
 801deac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801deae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801deb0:	3b01      	subs	r3, #1
 801deb2:	9309      	str	r3, [sp, #36]	@ 0x24
 801deb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801deb6:	bf08      	it	eq
 801deb8:	4613      	moveq	r3, r2
 801deba:	9306      	str	r3, [sp, #24]
 801debc:	e6cb      	b.n	801dc56 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801debe:	b151      	cbz	r1, 801ded6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801dec0:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801dec4:	4660      	mov	r0, ip
 801dec6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801deca:	442a      	add	r2, r5
 801decc:	4667      	mov	r7, ip
 801dece:	e731      	b.n	801dd34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801ded0:	4660      	mov	r0, ip
 801ded2:	4662      	mov	r2, ip
 801ded4:	e72e      	b.n	801dd34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801ded6:	4660      	mov	r0, ip
 801ded8:	4662      	mov	r2, ip
 801deda:	e7f7      	b.n	801decc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801dedc:	f110 0e01 	adds.w	lr, r0, #1
 801dee0:	f53f af71 	bmi.w	801ddc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801dee4:	4572      	cmp	r2, lr
 801dee6:	f6ff af6e 	blt.w	801ddc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801deea:	f117 0e01 	adds.w	lr, r7, #1
 801deee:	f53f af6a 	bmi.w	801ddc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801def2:	45f4      	cmp	ip, lr
 801def4:	f6ff af67 	blt.w	801ddc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801def8:	b212      	sxth	r2, r2
 801defa:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801defe:	fa0f f38c 	sxth.w	r3, ip
 801df02:	9200      	str	r2, [sp, #0]
 801df04:	4631      	mov	r1, r6
 801df06:	9a08      	ldr	r2, [sp, #32]
 801df08:	9301      	str	r3, [sp, #4]
 801df0a:	462b      	mov	r3, r5
 801df0c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801df10:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801df12:	f7ff fde9 	bl	801dae8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801df16:	e756      	b.n	801ddc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801df18:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801df1a:	1426      	asrs	r6, r4, #16
 801df1c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801df1e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801df22:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801df26:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801df28:	1400      	asrs	r0, r0, #16
 801df2a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801df2e:	fb02 6000 	mla	r0, r2, r0, r6
 801df32:	9e08      	ldr	r6, [sp, #32]
 801df34:	f816 e000 	ldrb.w	lr, [r6, r0]
 801df38:	eb06 0c00 	add.w	ip, r6, r0
 801df3c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801df40:	eb05 070e 	add.w	r7, r5, lr
 801df44:	2b00      	cmp	r3, #0
 801df46:	d064      	beq.n	801e012 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801df48:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801df4c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801df50:	442e      	add	r6, r5
 801df52:	2900      	cmp	r1, #0
 801df54:	d066      	beq.n	801e024 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801df56:	eb0c 0002 	add.w	r0, ip, r2
 801df5a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801df5e:	7840      	ldrb	r0, [r0, #1]
 801df60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801df64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801df68:	442a      	add	r2, r5
 801df6a:	4428      	add	r0, r5
 801df6c:	b29b      	uxth	r3, r3
 801df6e:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801df72:	b289      	uxth	r1, r1
 801df74:	f896 e000 	ldrb.w	lr, [r6]
 801df78:	f108 0803 	add.w	r8, r8, #3
 801df7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801df80:	fb03 f901 	mul.w	r9, r3, r1
 801df84:	011b      	lsls	r3, r3, #4
 801df86:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801df8a:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801df8e:	eba3 0309 	sub.w	r3, r3, r9
 801df92:	b289      	uxth	r1, r1
 801df94:	b29b      	uxth	r3, r3
 801df96:	ebac 0c01 	sub.w	ip, ip, r1
 801df9a:	fb03 fe0e 	mul.w	lr, r3, lr
 801df9e:	fa1f fc8c 	uxth.w	ip, ip
 801dfa2:	fb0c ee0b 	mla	lr, ip, fp, lr
 801dfa6:	f892 b000 	ldrb.w	fp, [r2]
 801dfaa:	fb01 ee0b 	mla	lr, r1, fp, lr
 801dfae:	f890 b000 	ldrb.w	fp, [r0]
 801dfb2:	fb09 ee0b 	mla	lr, r9, fp, lr
 801dfb6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801dfba:	f808 ec06 	strb.w	lr, [r8, #-6]
 801dfbe:	f896 e001 	ldrb.w	lr, [r6, #1]
 801dfc2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801dfc6:	fb03 fe0e 	mul.w	lr, r3, lr
 801dfca:	fb0c ee0b 	mla	lr, ip, fp, lr
 801dfce:	f892 b001 	ldrb.w	fp, [r2, #1]
 801dfd2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801dfd6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801dfda:	fb09 ee0b 	mla	lr, r9, fp, lr
 801dfde:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801dfe2:	f808 ec05 	strb.w	lr, [r8, #-5]
 801dfe6:	78b6      	ldrb	r6, [r6, #2]
 801dfe8:	78bf      	ldrb	r7, [r7, #2]
 801dfea:	4373      	muls	r3, r6
 801dfec:	7896      	ldrb	r6, [r2, #2]
 801dfee:	7882      	ldrb	r2, [r0, #2]
 801dff0:	fb0c 3307 	mla	r3, ip, r7, r3
 801dff4:	fb01 3306 	mla	r3, r1, r6, r3
 801dff8:	fb09 3902 	mla	r9, r9, r2, r3
 801dffc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dffe:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e000:	441c      	add	r4, r3
 801e002:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e004:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e008:	4413      	add	r3, r2
 801e00a:	f808 9c04 	strb.w	r9, [r8, #-4]
 801e00e:	9318      	str	r3, [sp, #96]	@ 0x60
 801e010:	e70d      	b.n	801de2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801e012:	b151      	cbz	r1, 801e02a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801e014:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801e018:	4638      	mov	r0, r7
 801e01a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e01e:	442a      	add	r2, r5
 801e020:	463e      	mov	r6, r7
 801e022:	e7a3      	b.n	801df6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801e024:	4638      	mov	r0, r7
 801e026:	463a      	mov	r2, r7
 801e028:	e7a0      	b.n	801df6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801e02a:	4638      	mov	r0, r7
 801e02c:	463a      	mov	r2, r7
 801e02e:	e7f7      	b.n	801e020 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801e030:	b00d      	add	sp, #52	@ 0x34
 801e032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e036 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801e036:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e03a:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801e03e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801e042:	2d00      	cmp	r5, #0
 801e044:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801e048:	fb05 700c 	mla	r0, r5, ip, r7
 801e04c:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801e050:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801e054:	eb02 0800 	add.w	r8, r2, r0
 801e058:	f2c0 8118 	blt.w	801e28c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801e05c:	45a9      	cmp	r9, r5
 801e05e:	f340 8115 	ble.w	801e28c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801e062:	2f00      	cmp	r7, #0
 801e064:	f2c0 8110 	blt.w	801e288 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801e068:	45bc      	cmp	ip, r7
 801e06a:	f340 810d 	ble.w	801e288 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801e06e:	5c12      	ldrb	r2, [r2, r0]
 801e070:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e074:	1c7a      	adds	r2, r7, #1
 801e076:	f100 810c 	bmi.w	801e292 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801e07a:	4594      	cmp	ip, r2
 801e07c:	f340 8109 	ble.w	801e292 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801e080:	2c00      	cmp	r4, #0
 801e082:	f000 8108 	beq.w	801e296 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801e086:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e08a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e08e:	3501      	adds	r5, #1
 801e090:	f100 8105 	bmi.w	801e29e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801e094:	45a9      	cmp	r9, r5
 801e096:	f340 8102 	ble.w	801e29e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801e09a:	f1be 0f00 	cmp.w	lr, #0
 801e09e:	f000 8101 	beq.w	801e2a4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801e0a2:	2f00      	cmp	r7, #0
 801e0a4:	f2c0 80f9 	blt.w	801e29a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801e0a8:	45bc      	cmp	ip, r7
 801e0aa:	f340 80f6 	ble.w	801e29a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801e0ae:	f818 200c 	ldrb.w	r2, [r8, ip]
 801e0b2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801e0b6:	3701      	adds	r7, #1
 801e0b8:	f100 80f7 	bmi.w	801e2aa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801e0bc:	45bc      	cmp	ip, r7
 801e0be:	f340 80f4 	ble.w	801e2aa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801e0c2:	2c00      	cmp	r4, #0
 801e0c4:	f000 80f3 	beq.w	801e2ae <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801e0c8:	44c4      	add	ip, r8
 801e0ca:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e0ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801e0d2:	fa1f fc84 	uxth.w	ip, r4
 801e0d6:	fa1f f48e 	uxth.w	r4, lr
 801e0da:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801e0de:	fb04 fe0c 	mul.w	lr, r4, ip
 801e0e2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801e0e6:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801e0ea:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801e0ee:	ebac 070e 	sub.w	r7, ip, lr
 801e0f2:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801e0f6:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801e0fa:	b2a4      	uxth	r4, r4
 801e0fc:	b2bf      	uxth	r7, r7
 801e0fe:	1b1b      	subs	r3, r3, r4
 801e100:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801e104:	fb07 fc0a 	mul.w	ip, r7, sl
 801e108:	b29b      	uxth	r3, r3
 801e10a:	fb03 cc0b 	mla	ip, r3, fp, ip
 801e10e:	9300      	str	r3, [sp, #0]
 801e110:	fb04 cc09 	mla	ip, r4, r9, ip
 801e114:	fb0e cc08 	mla	ip, lr, r8, ip
 801e118:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e11c:	9301      	str	r3, [sp, #4]
 801e11e:	2b00      	cmp	r3, #0
 801e120:	f000 80af 	beq.w	801e282 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801e124:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801e128:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801e12c:	fb0b fc0c 	mul.w	ip, fp, ip
 801e130:	fb0b f606 	mul.w	r6, fp, r6
 801e134:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801e138:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e13c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801e140:	44dc      	add	ip, fp
 801e142:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801e146:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801e14a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e14e:	fb0a fb0b 	mul.w	fp, sl, fp
 801e152:	fb0a fa00 	mul.w	sl, sl, r0
 801e156:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801e15a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801e15e:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801e162:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e166:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801e16a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e16e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801e172:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e176:	0a36      	lsrs	r6, r6, #8
 801e178:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e17c:	44dc      	add	ip, fp
 801e17e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801e182:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801e186:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801e18a:	fb09 fb0b 	mul.w	fp, r9, fp
 801e18e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e192:	fb09 f905 	mul.w	r9, r9, r5
 801e196:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801e19a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e19e:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801e1a2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e1a6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e1aa:	fb0c fc07 	mul.w	ip, ip, r7
 801e1ae:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801e1b2:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801e1b6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e1ba:	4458      	add	r0, fp
 801e1bc:	fb08 f505 	mul.w	r5, r8, r5
 801e1c0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e1c4:	fb08 f802 	mul.w	r8, r8, r2
 801e1c8:	0a00      	lsrs	r0, r0, #8
 801e1ca:	0a2a      	lsrs	r2, r5, #8
 801e1cc:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801e1d0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e1d4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801e1d8:	4415      	add	r5, r2
 801e1da:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801e1de:	0a2d      	lsrs	r5, r5, #8
 801e1e0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e1e4:	9a00      	ldr	r2, [sp, #0]
 801e1e6:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801e1ea:	fb03 cc02 	mla	ip, r3, r2, ip
 801e1ee:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e1f2:	9b01      	ldr	r3, [sp, #4]
 801e1f4:	fb05 c50e 	mla	r5, r5, lr, ip
 801e1f8:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801e1fc:	fb00 5004 	mla	r0, r0, r4, r5
 801e200:	0a00      	lsrs	r0, r0, #8
 801e202:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801e206:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801e20a:	4378      	muls	r0, r7
 801e20c:	fb02 0006 	mla	r0, r2, r6, r0
 801e210:	fb0e 0e08 	mla	lr, lr, r8, r0
 801e214:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801e218:	fb04 e000 	mla	r0, r4, r0, lr
 801e21c:	0a00      	lsrs	r0, r0, #8
 801e21e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801e222:	4328      	orrs	r0, r5
 801e224:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801e228:	b2ad      	uxth	r5, r5
 801e22a:	b2c4      	uxtb	r4, r0
 801e22c:	436b      	muls	r3, r5
 801e22e:	fb14 f405 	smulbb	r4, r4, r5
 801e232:	1c5a      	adds	r2, r3, #1
 801e234:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e238:	780b      	ldrb	r3, [r1, #0]
 801e23a:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801e23e:	b2d2      	uxtb	r2, r2
 801e240:	fb03 4302 	mla	r3, r3, r2, r4
 801e244:	b29b      	uxth	r3, r3
 801e246:	1c5c      	adds	r4, r3, #1
 801e248:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e24c:	784c      	ldrb	r4, [r1, #1]
 801e24e:	fb14 f402 	smulbb	r4, r4, r2
 801e252:	121b      	asrs	r3, r3, #8
 801e254:	700b      	strb	r3, [r1, #0]
 801e256:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801e25a:	fb03 4305 	mla	r3, r3, r5, r4
 801e25e:	b29b      	uxth	r3, r3
 801e260:	1c5c      	adds	r4, r3, #1
 801e262:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e266:	0c04      	lsrs	r4, r0, #16
 801e268:	7888      	ldrb	r0, [r1, #2]
 801e26a:	121b      	asrs	r3, r3, #8
 801e26c:	fb10 f002 	smulbb	r0, r0, r2
 801e270:	704b      	strb	r3, [r1, #1]
 801e272:	fb04 0005 	mla	r0, r4, r5, r0
 801e276:	b280      	uxth	r0, r0
 801e278:	1c43      	adds	r3, r0, #1
 801e27a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e27e:	1200      	asrs	r0, r0, #8
 801e280:	7088      	strb	r0, [r1, #2]
 801e282:	b003      	add	sp, #12
 801e284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e288:	2600      	movs	r6, #0
 801e28a:	e6f3      	b.n	801e074 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801e28c:	2000      	movs	r0, #0
 801e28e:	4606      	mov	r6, r0
 801e290:	e6fd      	b.n	801e08e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801e292:	2000      	movs	r0, #0
 801e294:	e6fb      	b.n	801e08e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801e296:	4620      	mov	r0, r4
 801e298:	e6f9      	b.n	801e08e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801e29a:	2500      	movs	r5, #0
 801e29c:	e70b      	b.n	801e0b6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801e29e:	2200      	movs	r2, #0
 801e2a0:	4615      	mov	r5, r2
 801e2a2:	e716      	b.n	801e0d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801e2a4:	4672      	mov	r2, lr
 801e2a6:	4675      	mov	r5, lr
 801e2a8:	e713      	b.n	801e0d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801e2aa:	2200      	movs	r2, #0
 801e2ac:	e711      	b.n	801e0d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801e2ae:	4622      	mov	r2, r4
 801e2b0:	e70f      	b.n	801e0d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801e2b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e2b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2b6:	b09f      	sub	sp, #124	@ 0x7c
 801e2b8:	921b      	str	r2, [sp, #108]	@ 0x6c
 801e2ba:	9309      	str	r3, [sp, #36]	@ 0x24
 801e2bc:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801e2be:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801e2c2:	901d      	str	r0, [sp, #116]	@ 0x74
 801e2c4:	931c      	str	r3, [sp, #112]	@ 0x70
 801e2c6:	6850      	ldr	r0, [r2, #4]
 801e2c8:	9119      	str	r1, [sp, #100]	@ 0x64
 801e2ca:	6812      	ldr	r2, [r2, #0]
 801e2cc:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801e2ce:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801e2d2:	fb00 1303 	mla	r3, r0, r3, r1
 801e2d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e2da:	18d3      	adds	r3, r2, r3
 801e2dc:	930c      	str	r3, [sp, #48]	@ 0x30
 801e2de:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	9312      	str	r3, [sp, #72]	@ 0x48
 801e2e4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801e2e6:	685e      	ldr	r6, [r3, #4]
 801e2e8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801e2ec:	3604      	adds	r6, #4
 801e2ee:	930d      	str	r3, [sp, #52]	@ 0x34
 801e2f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	dc03      	bgt.n	801e2fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e2f6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	f340 8378 	ble.w	801e9ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801e2fe:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801e300:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e304:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e308:	1e48      	subs	r0, r1, #1
 801e30a:	1e57      	subs	r7, r2, #1
 801e30c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e30e:	2b00      	cmp	r3, #0
 801e310:	f340 818c 	ble.w	801e62c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801e314:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801e316:	142b      	asrs	r3, r5, #16
 801e318:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e31c:	d406      	bmi.n	801e32c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e31e:	4584      	cmp	ip, r0
 801e320:	da04      	bge.n	801e32c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e322:	2b00      	cmp	r3, #0
 801e324:	db02      	blt.n	801e32c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e326:	42bb      	cmp	r3, r7
 801e328:	f2c0 8181 	blt.w	801e62e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801e32c:	f11c 0c01 	adds.w	ip, ip, #1
 801e330:	f100 816f 	bmi.w	801e612 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801e334:	4561      	cmp	r1, ip
 801e336:	f2c0 816c 	blt.w	801e612 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801e33a:	3301      	adds	r3, #1
 801e33c:	f100 8169 	bmi.w	801e612 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801e340:	429a      	cmp	r2, r3
 801e342:	f2c0 8166 	blt.w	801e612 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801e346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e348:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801e34a:	931a      	str	r3, [sp, #104]	@ 0x68
 801e34c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801e34e:	2b00      	cmp	r3, #0
 801e350:	f340 818c 	ble.w	801e66c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801e354:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801e356:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e35a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e35e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e362:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801e364:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801e368:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801e36a:	141b      	asrs	r3, r3, #16
 801e36c:	f100 81d0 	bmi.w	801e710 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801e370:	f100 38ff 	add.w	r8, r0, #4294967295
 801e374:	4543      	cmp	r3, r8
 801e376:	f280 81cb 	bge.w	801e710 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801e37a:	f1bc 0f00 	cmp.w	ip, #0
 801e37e:	f2c0 81c7 	blt.w	801e710 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801e382:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e386:	45c4      	cmp	ip, r8
 801e388:	f280 81c2 	bge.w	801e710 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801e38c:	b200      	sxth	r0, r0
 801e38e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e390:	fb0c 3300 	mla	r3, ip, r0, r3
 801e394:	eb04 0803 	add.w	r8, r4, r3
 801e398:	5ce3      	ldrb	r3, [r4, r3]
 801e39a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e39e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e3a2:	2a00      	cmp	r2, #0
 801e3a4:	f000 81a9 	beq.w	801e6fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801e3a8:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e3ac:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e3b0:	940e      	str	r4, [sp, #56]	@ 0x38
 801e3b2:	0e24      	lsrs	r4, r4, #24
 801e3b4:	9415      	str	r4, [sp, #84]	@ 0x54
 801e3b6:	b179      	cbz	r1, 801e3d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e3b8:	eb08 0c00 	add.w	ip, r8, r0
 801e3bc:	f818 0000 	ldrb.w	r0, [r8, r0]
 801e3c0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801e3c4:	900a      	str	r0, [sp, #40]	@ 0x28
 801e3c6:	0e00      	lsrs	r0, r0, #24
 801e3c8:	9013      	str	r0, [sp, #76]	@ 0x4c
 801e3ca:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801e3ce:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801e3d2:	900f      	str	r0, [sp, #60]	@ 0x3c
 801e3d4:	0e00      	lsrs	r0, r0, #24
 801e3d6:	9016      	str	r0, [sp, #88]	@ 0x58
 801e3d8:	b292      	uxth	r2, r2
 801e3da:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e3dc:	b289      	uxth	r1, r1
 801e3de:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e3e0:	fb02 f901 	mul.w	r9, r2, r1
 801e3e4:	0112      	lsls	r2, r2, #4
 801e3e6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e3ea:	eba2 0809 	sub.w	r8, r2, r9
 801e3ee:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801e3f2:	b289      	uxth	r1, r1
 801e3f4:	fa1f f888 	uxth.w	r8, r8
 801e3f8:	1a52      	subs	r2, r2, r1
 801e3fa:	fb08 f000 	mul.w	r0, r8, r0
 801e3fe:	b292      	uxth	r2, r2
 801e400:	fb02 000e 	mla	r0, r2, lr, r0
 801e404:	fb01 0004 	mla	r0, r1, r4, r0
 801e408:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e40a:	fb09 0004 	mla	r0, r9, r4, r0
 801e40e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e412:	2800      	cmp	r0, #0
 801e414:	f000 80f2 	beq.w	801e5fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e418:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801e41c:	d01b      	beq.n	801e456 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e41e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e422:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e426:	fb0e fa0a 	mul.w	sl, lr, sl
 801e42a:	fb0e fe03 	mul.w	lr, lr, r3
 801e42e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e432:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e436:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801e43a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e43e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e442:	4453      	add	r3, sl
 801e444:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e448:	0a1b      	lsrs	r3, r3, #8
 801e44a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e44e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e452:	ea43 030c 	orr.w	r3, r3, ip
 801e456:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e458:	2cff      	cmp	r4, #255	@ 0xff
 801e45a:	d021      	beq.n	801e4a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801e45c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e45e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e462:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e464:	fb04 fb0b 	mul.w	fp, r4, fp
 801e468:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e46a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e46e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e470:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e474:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e478:	fb04 fa0a 	mul.w	sl, r4, sl
 801e47c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e480:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e484:	44de      	add	lr, fp
 801e486:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e48a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e48e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e492:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e496:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e49a:	ea4e 040a 	orr.w	r4, lr, sl
 801e49e:	940e      	str	r4, [sp, #56]	@ 0x38
 801e4a0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e4a2:	2cff      	cmp	r4, #255	@ 0xff
 801e4a4:	d021      	beq.n	801e4ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801e4a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e4a8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e4ac:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e4ae:	fb04 fb0b 	mul.w	fp, r4, fp
 801e4b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e4b4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e4b8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e4ba:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e4be:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e4c2:	fb04 fa0a 	mul.w	sl, r4, sl
 801e4c6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e4ca:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e4ce:	44de      	add	lr, fp
 801e4d0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e4d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e4d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e4dc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e4e0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e4e4:	ea4e 040a 	orr.w	r4, lr, sl
 801e4e8:	940a      	str	r4, [sp, #40]	@ 0x28
 801e4ea:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e4ec:	2cff      	cmp	r4, #255	@ 0xff
 801e4ee:	d021      	beq.n	801e534 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801e4f0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e4f2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e4f6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e4f8:	fb04 fb0b 	mul.w	fp, r4, fp
 801e4fc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e4fe:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e502:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e504:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e508:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e50c:	fb04 fa0a 	mul.w	sl, r4, sl
 801e510:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e514:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e518:	44de      	add	lr, fp
 801e51a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e51e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e522:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e526:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e52a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e52e:	ea4e 040a 	orr.w	r4, lr, sl
 801e532:	940f      	str	r4, [sp, #60]	@ 0x3c
 801e534:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e536:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801e53a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e53e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e542:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e544:	fb08 fc0c 	mul.w	ip, r8, ip
 801e548:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e54c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e550:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e552:	fb01 cc0e 	mla	ip, r1, lr, ip
 801e556:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e55a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e55c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e560:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801e564:	fb08 f80e 	mul.w	r8, r8, lr
 801e568:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e56c:	fb02 8303 	mla	r3, r2, r3, r8
 801e570:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e572:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e576:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801e57a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e57c:	fb01 330a 	mla	r3, r1, sl, r3
 801e580:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801e584:	fb09 3901 	mla	r9, r9, r1, r3
 801e588:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e58a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e58c:	4343      	muls	r3, r0
 801e58e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e592:	1c58      	adds	r0, r3, #1
 801e594:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801e598:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e59c:	ea4c 0c09 	orr.w	ip, ip, r9
 801e5a0:	783b      	ldrb	r3, [r7, #0]
 801e5a2:	fa5f f28c 	uxtb.w	r2, ip
 801e5a6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801e5aa:	fb12 f201 	smulbb	r2, r2, r1
 801e5ae:	b2c0      	uxtb	r0, r0
 801e5b0:	fb03 2300 	mla	r3, r3, r0, r2
 801e5b4:	b29b      	uxth	r3, r3
 801e5b6:	1c5a      	adds	r2, r3, #1
 801e5b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e5bc:	787a      	ldrb	r2, [r7, #1]
 801e5be:	fb12 f200 	smulbb	r2, r2, r0
 801e5c2:	121b      	asrs	r3, r3, #8
 801e5c4:	703b      	strb	r3, [r7, #0]
 801e5c6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e5ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e5ce:	fb03 2301 	mla	r3, r3, r1, r2
 801e5d2:	b29b      	uxth	r3, r3
 801e5d4:	1c5a      	adds	r2, r3, #1
 801e5d6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e5da:	121b      	asrs	r3, r3, #8
 801e5dc:	707b      	strb	r3, [r7, #1]
 801e5de:	78bb      	ldrb	r3, [r7, #2]
 801e5e0:	fb13 f000 	smulbb	r0, r3, r0
 801e5e4:	fb0c 0c01 	mla	ip, ip, r1, r0
 801e5e8:	fa1f fc8c 	uxth.w	ip, ip
 801e5ec:	f10c 0301 	add.w	r3, ip, #1
 801e5f0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e5f4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e5f8:	f887 c002 	strb.w	ip, [r7, #2]
 801e5fc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801e5fe:	3703      	adds	r7, #3
 801e600:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801e602:	441a      	add	r2, r3
 801e604:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e606:	441d      	add	r5, r3
 801e608:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801e60a:	9229      	str	r2, [sp, #164]	@ 0xa4
 801e60c:	3b01      	subs	r3, #1
 801e60e:	931a      	str	r3, [sp, #104]	@ 0x68
 801e610:	e69c      	b.n	801e34c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e612:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801e614:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801e616:	441c      	add	r4, r3
 801e618:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e61a:	441d      	add	r5, r3
 801e61c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e61e:	9429      	str	r4, [sp, #164]	@ 0xa4
 801e620:	3b01      	subs	r3, #1
 801e622:	9309      	str	r3, [sp, #36]	@ 0x24
 801e624:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e626:	3303      	adds	r3, #3
 801e628:	930c      	str	r3, [sp, #48]	@ 0x30
 801e62a:	e66f      	b.n	801e30c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e62c:	d026      	beq.n	801e67c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801e62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e630:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801e632:	3b01      	subs	r3, #1
 801e634:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801e636:	fb00 4003 	mla	r0, r0, r3, r4
 801e63a:	1400      	asrs	r0, r0, #16
 801e63c:	f53f ae83 	bmi.w	801e346 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e640:	3901      	subs	r1, #1
 801e642:	4288      	cmp	r0, r1
 801e644:	f6bf ae7f 	bge.w	801e346 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e648:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801e64a:	fb01 5303 	mla	r3, r1, r3, r5
 801e64e:	141b      	asrs	r3, r3, #16
 801e650:	f53f ae79 	bmi.w	801e346 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e654:	3a01      	subs	r2, #1
 801e656:	4293      	cmp	r3, r2
 801e658:	f6bf ae75 	bge.w	801e346 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e65c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e65e:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801e662:	f103 0e03 	add.w	lr, r3, #3
 801e666:	f1bb 0f00 	cmp.w	fp, #0
 801e66a:	dc71      	bgt.n	801e750 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801e66c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e66e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e672:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e674:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e678:	4423      	add	r3, r4
 801e67a:	930c      	str	r3, [sp, #48]	@ 0x30
 801e67c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e67e:	2b00      	cmp	r3, #0
 801e680:	f340 81b5 	ble.w	801e9ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801e684:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e688:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e68a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e68e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e692:	eef0 6a62 	vmov.f32	s13, s5
 801e696:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e69a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e69e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e6a2:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801e6a6:	eef0 6a43 	vmov.f32	s13, s6
 801e6aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e6ae:	ee16 5a90 	vmov	r5, s13
 801e6b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e6b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e6ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e6be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e6c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e6c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e6ca:	ee12 2a90 	vmov	r2, s5
 801e6ce:	eef0 2a47 	vmov.f32	s5, s14
 801e6d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6d6:	ee13 2a10 	vmov	r2, s6
 801e6da:	932b      	str	r3, [sp, #172]	@ 0xac
 801e6dc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e6de:	eeb0 3a67 	vmov.f32	s6, s15
 801e6e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6e6:	932c      	str	r3, [sp, #176]	@ 0xb0
 801e6e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e6ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e6ec:	3b01      	subs	r3, #1
 801e6ee:	9319      	str	r3, [sp, #100]	@ 0x64
 801e6f0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e6f2:	bf08      	it	eq
 801e6f4:	4613      	moveq	r3, r2
 801e6f6:	9309      	str	r3, [sp, #36]	@ 0x24
 801e6f8:	e5fa      	b.n	801e2f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e6fa:	2900      	cmp	r1, #0
 801e6fc:	f43f ae6c 	beq.w	801e3d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e700:	f818 0000 	ldrb.w	r0, [r8, r0]
 801e704:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801e708:	900a      	str	r0, [sp, #40]	@ 0x28
 801e70a:	0e00      	lsrs	r0, r0, #24
 801e70c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801e70e:	e663      	b.n	801e3d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e710:	f113 0801 	adds.w	r8, r3, #1
 801e714:	f53f af72 	bmi.w	801e5fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e718:	4540      	cmp	r0, r8
 801e71a:	f6ff af6f 	blt.w	801e5fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e71e:	f11c 0801 	adds.w	r8, ip, #1
 801e722:	f53f af6b 	bmi.w	801e5fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e726:	45c6      	cmp	lr, r8
 801e728:	f6ff af68 	blt.w	801e5fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e72c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801e72e:	b200      	sxth	r0, r0
 801e730:	9302      	str	r3, [sp, #8]
 801e732:	fa0f f38e 	sxth.w	r3, lr
 801e736:	9000      	str	r0, [sp, #0]
 801e738:	9301      	str	r3, [sp, #4]
 801e73a:	4633      	mov	r3, r6
 801e73c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801e73e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e742:	e9cd c203 	strd	ip, r2, [sp, #12]
 801e746:	4639      	mov	r1, r7
 801e748:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e74a:	f7ff fc74 	bl	801e036 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801e74e:	e755      	b.n	801e5fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e750:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801e752:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e756:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801e758:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e75c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801e75e:	1427      	asrs	r7, r4, #16
 801e760:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e762:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e766:	142b      	asrs	r3, r5, #16
 801e768:	fb01 7303 	mla	r3, r1, r3, r7
 801e76c:	18e7      	adds	r7, r4, r3
 801e76e:	5ce3      	ldrb	r3, [r4, r3]
 801e770:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e774:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e778:	2a00      	cmp	r2, #0
 801e77a:	f000 812e 	beq.w	801e9da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801e77e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e782:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801e786:	9410      	str	r4, [sp, #64]	@ 0x40
 801e788:	0e24      	lsrs	r4, r4, #24
 801e78a:	9417      	str	r4, [sp, #92]	@ 0x5c
 801e78c:	b170      	cbz	r0, 801e7ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801e78e:	eb07 0801 	add.w	r8, r7, r1
 801e792:	5c79      	ldrb	r1, [r7, r1]
 801e794:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e798:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e79a:	0e09      	lsrs	r1, r1, #24
 801e79c:	9114      	str	r1, [sp, #80]	@ 0x50
 801e79e:	f898 1001 	ldrb.w	r1, [r8, #1]
 801e7a2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e7a6:	9111      	str	r1, [sp, #68]	@ 0x44
 801e7a8:	0e09      	lsrs	r1, r1, #24
 801e7aa:	9118      	str	r1, [sp, #96]	@ 0x60
 801e7ac:	b292      	uxth	r2, r2
 801e7ae:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e7b0:	b280      	uxth	r0, r0
 801e7b2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e7b4:	fb02 f900 	mul.w	r9, r2, r0
 801e7b8:	0112      	lsls	r2, r2, #4
 801e7ba:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e7be:	eba2 0809 	sub.w	r8, r2, r9
 801e7c2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801e7c6:	b280      	uxth	r0, r0
 801e7c8:	fa1f f888 	uxth.w	r8, r8
 801e7cc:	1a12      	subs	r2, r2, r0
 801e7ce:	fb08 f101 	mul.w	r1, r8, r1
 801e7d2:	b292      	uxth	r2, r2
 801e7d4:	fb02 110c 	mla	r1, r2, ip, r1
 801e7d8:	fb00 1104 	mla	r1, r0, r4, r1
 801e7dc:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e7de:	fb09 1104 	mla	r1, r9, r4, r1
 801e7e2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e7e6:	2900      	cmp	r1, #0
 801e7e8:	f000 80ec 	beq.w	801e9c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801e7ec:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801e7f0:	d019      	beq.n	801e826 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801e7f2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e7f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e7fa:	fb0c fa0a 	mul.w	sl, ip, sl
 801e7fe:	fb0c fc03 	mul.w	ip, ip, r3
 801e802:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e806:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e80a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801e80e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e812:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e816:	4453      	add	r3, sl
 801e818:	0a3f      	lsrs	r7, r7, #8
 801e81a:	0a1b      	lsrs	r3, r3, #8
 801e81c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801e820:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e824:	433b      	orrs	r3, r7
 801e826:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e828:	2cff      	cmp	r4, #255	@ 0xff
 801e82a:	d020      	beq.n	801e86e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801e82c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e82e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e832:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e834:	4367      	muls	r7, r4
 801e836:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e838:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e83c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e840:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e842:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e846:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e84a:	fb04 fa0a 	mul.w	sl, r4, sl
 801e84e:	44bc      	add	ip, r7
 801e850:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e854:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e858:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e85c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e860:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e864:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e868:	ea4c 040a 	orr.w	r4, ip, sl
 801e86c:	9410      	str	r4, [sp, #64]	@ 0x40
 801e86e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e870:	2cff      	cmp	r4, #255	@ 0xff
 801e872:	d020      	beq.n	801e8b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801e874:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e876:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e87a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e87c:	4367      	muls	r7, r4
 801e87e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e880:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e884:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e888:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e88a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e88e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e892:	fb04 fa0a 	mul.w	sl, r4, sl
 801e896:	44bc      	add	ip, r7
 801e898:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e89c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e8a0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e8a4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e8a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e8ac:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e8b0:	ea4c 040a 	orr.w	r4, ip, sl
 801e8b4:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e8b6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e8b8:	2cff      	cmp	r4, #255	@ 0xff
 801e8ba:	d020      	beq.n	801e8fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801e8bc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e8be:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e8c2:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e8c4:	4367      	muls	r7, r4
 801e8c6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e8c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e8cc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e8d0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e8d2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e8d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e8da:	fb04 fa0a 	mul.w	sl, r4, sl
 801e8de:	44bc      	add	ip, r7
 801e8e0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e8e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e8e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e8ec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e8f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e8f4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e8f8:	ea4c 040a 	orr.w	r4, ip, sl
 801e8fc:	9411      	str	r4, [sp, #68]	@ 0x44
 801e8fe:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e900:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801e904:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e908:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e90c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e90e:	fb08 f707 	mul.w	r7, r8, r7
 801e912:	fb02 770c 	mla	r7, r2, ip, r7
 801e916:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e91a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e91c:	fb00 770c 	mla	r7, r0, ip, r7
 801e920:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e924:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e926:	fb09 770c 	mla	r7, r9, ip, r7
 801e92a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801e92e:	fb08 f80c 	mul.w	r8, r8, ip
 801e932:	0a3f      	lsrs	r7, r7, #8
 801e934:	fb02 8303 	mla	r3, r2, r3, r8
 801e938:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e93a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801e93e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801e942:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e944:	fb00 330a 	mla	r3, r0, sl, r3
 801e948:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801e94c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e94e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e952:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e954:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e958:	434b      	muls	r3, r1
 801e95a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e95e:	1c59      	adds	r1, r3, #1
 801e960:	ea47 070c 	orr.w	r7, r7, ip
 801e964:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e968:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801e96c:	b2fa      	uxtb	r2, r7
 801e96e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e972:	fb12 f200 	smulbb	r2, r2, r0
 801e976:	b2c9      	uxtb	r1, r1
 801e978:	fb03 2301 	mla	r3, r3, r1, r2
 801e97c:	b29b      	uxth	r3, r3
 801e97e:	1c5a      	adds	r2, r3, #1
 801e980:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e984:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801e988:	fb12 f201 	smulbb	r2, r2, r1
 801e98c:	121b      	asrs	r3, r3, #8
 801e98e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801e992:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801e996:	0c3f      	lsrs	r7, r7, #16
 801e998:	fb03 2300 	mla	r3, r3, r0, r2
 801e99c:	b29b      	uxth	r3, r3
 801e99e:	1c5a      	adds	r2, r3, #1
 801e9a0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e9a4:	121b      	asrs	r3, r3, #8
 801e9a6:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801e9aa:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801e9ae:	fb13 f101 	smulbb	r1, r3, r1
 801e9b2:	fb07 1700 	mla	r7, r7, r0, r1
 801e9b6:	b2bf      	uxth	r7, r7
 801e9b8:	1c7b      	adds	r3, r7, #1
 801e9ba:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801e9be:	123f      	asrs	r7, r7, #8
 801e9c0:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801e9c4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801e9c6:	f10e 0e03 	add.w	lr, lr, #3
 801e9ca:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801e9cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e9d0:	441a      	add	r2, r3
 801e9d2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e9d4:	9229      	str	r2, [sp, #164]	@ 0xa4
 801e9d6:	441d      	add	r5, r3
 801e9d8:	e645      	b.n	801e666 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801e9da:	2800      	cmp	r0, #0
 801e9dc:	f43f aee6 	beq.w	801e7ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801e9e0:	5c79      	ldrb	r1, [r7, r1]
 801e9e2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e9e6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e9e8:	0e09      	lsrs	r1, r1, #24
 801e9ea:	9114      	str	r1, [sp, #80]	@ 0x50
 801e9ec:	e6de      	b.n	801e7ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801e9ee:	b01f      	add	sp, #124	@ 0x7c
 801e9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e9f4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801e9f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9f8:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801e9fc:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801ea00:	2d00      	cmp	r5, #0
 801ea02:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801ea06:	fb05 700e 	mla	r0, r5, lr, r7
 801ea0a:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801ea0e:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801ea12:	eb02 0800 	add.w	r8, r2, r0
 801ea16:	f2c0 8105 	blt.w	801ec24 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801ea1a:	45a9      	cmp	r9, r5
 801ea1c:	f340 8102 	ble.w	801ec24 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801ea20:	2f00      	cmp	r7, #0
 801ea22:	f2c0 80fd 	blt.w	801ec20 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801ea26:	45be      	cmp	lr, r7
 801ea28:	f340 80fa 	ble.w	801ec20 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801ea2c:	5c12      	ldrb	r2, [r2, r0]
 801ea2e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801ea32:	1c7a      	adds	r2, r7, #1
 801ea34:	f100 80f9 	bmi.w	801ec2a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801ea38:	4596      	cmp	lr, r2
 801ea3a:	f340 80f6 	ble.w	801ec2a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801ea3e:	2c00      	cmp	r4, #0
 801ea40:	f000 80f5 	beq.w	801ec2e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801ea44:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ea48:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ea4c:	3501      	adds	r5, #1
 801ea4e:	f100 80f2 	bmi.w	801ec36 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801ea52:	45a9      	cmp	r9, r5
 801ea54:	f340 80ef 	ble.w	801ec36 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801ea58:	f1bc 0f00 	cmp.w	ip, #0
 801ea5c:	f000 80ee 	beq.w	801ec3c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801ea60:	2f00      	cmp	r7, #0
 801ea62:	f2c0 80e6 	blt.w	801ec32 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801ea66:	45be      	cmp	lr, r7
 801ea68:	f340 80e3 	ble.w	801ec32 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801ea6c:	f818 200e 	ldrb.w	r2, [r8, lr]
 801ea70:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801ea74:	3701      	adds	r7, #1
 801ea76:	f100 80e4 	bmi.w	801ec42 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801ea7a:	45be      	cmp	lr, r7
 801ea7c:	f340 80e1 	ble.w	801ec42 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801ea80:	2c00      	cmp	r4, #0
 801ea82:	f000 80e0 	beq.w	801ec46 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801ea86:	44c6      	add	lr, r8
 801ea88:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801ea8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801ea90:	b2a3      	uxth	r3, r4
 801ea92:	fa1f fc8c 	uxth.w	ip, ip
 801ea96:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801ea9a:	fb0c fe03 	mul.w	lr, ip, r3
 801ea9e:	011b      	lsls	r3, r3, #4
 801eaa0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801eaa4:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801eaa8:	eba3 070e 	sub.w	r7, r3, lr
 801eaac:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801eab0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801eab4:	fa1f f48c 	uxth.w	r4, ip
 801eab8:	b2bf      	uxth	r7, r7
 801eaba:	1b1b      	subs	r3, r3, r4
 801eabc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801eac0:	fb07 fc0a 	mul.w	ip, r7, sl
 801eac4:	b29b      	uxth	r3, r3
 801eac6:	fb03 cc0b 	mla	ip, r3, fp, ip
 801eaca:	9300      	str	r3, [sp, #0]
 801eacc:	fb04 cc09 	mla	ip, r4, r9, ip
 801ead0:	fb0e cc08 	mla	ip, lr, r8, ip
 801ead4:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ead8:	9301      	str	r3, [sp, #4]
 801eada:	2b00      	cmp	r3, #0
 801eadc:	f000 809d 	beq.w	801ec1a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801eae0:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801eae4:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801eae8:	fb0b fc0c 	mul.w	ip, fp, ip
 801eaec:	fb0b f606 	mul.w	r6, fp, r6
 801eaf0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801eaf4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801eaf8:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801eafc:	44dc      	add	ip, fp
 801eafe:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801eb02:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801eb06:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eb0a:	fb0a fb0b 	mul.w	fp, sl, fp
 801eb0e:	fb0a fa00 	mul.w	sl, sl, r0
 801eb12:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801eb16:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801eb1a:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801eb1e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801eb22:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801eb26:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801eb2a:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801eb2e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801eb32:	0a36      	lsrs	r6, r6, #8
 801eb34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eb38:	44dc      	add	ip, fp
 801eb3a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801eb3e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801eb42:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801eb46:	fb09 fb0b 	mul.w	fp, r9, fp
 801eb4a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eb4e:	fb09 f905 	mul.w	r9, r9, r5
 801eb52:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801eb56:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801eb5a:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801eb5e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801eb62:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801eb66:	fb0c fc07 	mul.w	ip, ip, r7
 801eb6a:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801eb6e:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801eb72:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801eb76:	4458      	add	r0, fp
 801eb78:	fb08 f505 	mul.w	r5, r8, r5
 801eb7c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801eb80:	fb08 f802 	mul.w	r8, r8, r2
 801eb84:	0a00      	lsrs	r0, r0, #8
 801eb86:	0a2a      	lsrs	r2, r5, #8
 801eb88:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801eb8c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801eb90:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801eb94:	4415      	add	r5, r2
 801eb96:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801eb9a:	0a2d      	lsrs	r5, r5, #8
 801eb9c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801eba0:	9a00      	ldr	r2, [sp, #0]
 801eba2:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801eba6:	fb03 cc02 	mla	ip, r3, r2, ip
 801ebaa:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ebae:	9b01      	ldr	r3, [sp, #4]
 801ebb0:	fb05 c50e 	mla	r5, r5, lr, ip
 801ebb4:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801ebb8:	43db      	mvns	r3, r3
 801ebba:	fb00 5004 	mla	r0, r0, r4, r5
 801ebbe:	b2db      	uxtb	r3, r3
 801ebc0:	0a00      	lsrs	r0, r0, #8
 801ebc2:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801ebc6:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801ebca:	4378      	muls	r0, r7
 801ebcc:	fb02 0006 	mla	r0, r2, r6, r0
 801ebd0:	780a      	ldrb	r2, [r1, #0]
 801ebd2:	fb0e 0e08 	mla	lr, lr, r8, r0
 801ebd6:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801ebda:	fb04 e000 	mla	r0, r4, r0, lr
 801ebde:	fb02 f403 	mul.w	r4, r2, r3
 801ebe2:	0a00      	lsrs	r0, r0, #8
 801ebe4:	1c62      	adds	r2, r4, #1
 801ebe6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801ebea:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801ebee:	4328      	orrs	r0, r5
 801ebf0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ebf4:	700a      	strb	r2, [r1, #0]
 801ebf6:	784a      	ldrb	r2, [r1, #1]
 801ebf8:	435a      	muls	r2, r3
 801ebfa:	1c54      	adds	r4, r2, #1
 801ebfc:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801ec00:	0a02      	lsrs	r2, r0, #8
 801ec02:	0c00      	lsrs	r0, r0, #16
 801ec04:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801ec08:	704a      	strb	r2, [r1, #1]
 801ec0a:	788a      	ldrb	r2, [r1, #2]
 801ec0c:	4353      	muls	r3, r2
 801ec0e:	1c5a      	adds	r2, r3, #1
 801ec10:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ec14:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ec18:	7088      	strb	r0, [r1, #2]
 801ec1a:	b003      	add	sp, #12
 801ec1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec20:	2600      	movs	r6, #0
 801ec22:	e706      	b.n	801ea32 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801ec24:	2000      	movs	r0, #0
 801ec26:	4606      	mov	r6, r0
 801ec28:	e710      	b.n	801ea4c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801ec2a:	2000      	movs	r0, #0
 801ec2c:	e70e      	b.n	801ea4c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801ec2e:	4620      	mov	r0, r4
 801ec30:	e70c      	b.n	801ea4c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801ec32:	2500      	movs	r5, #0
 801ec34:	e71e      	b.n	801ea74 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801ec36:	2200      	movs	r2, #0
 801ec38:	4615      	mov	r5, r2
 801ec3a:	e729      	b.n	801ea90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801ec3c:	4662      	mov	r2, ip
 801ec3e:	4665      	mov	r5, ip
 801ec40:	e726      	b.n	801ea90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801ec42:	2200      	movs	r2, #0
 801ec44:	e724      	b.n	801ea90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801ec46:	4622      	mov	r2, r4
 801ec48:	e722      	b.n	801ea90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801ec4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec4e:	b09b      	sub	sp, #108	@ 0x6c
 801ec50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ec54:	9218      	str	r2, [sp, #96]	@ 0x60
 801ec56:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801ec58:	9019      	str	r0, [sp, #100]	@ 0x64
 801ec5a:	9116      	str	r1, [sp, #88]	@ 0x58
 801ec5c:	6850      	ldr	r0, [r2, #4]
 801ec5e:	9307      	str	r3, [sp, #28]
 801ec60:	6812      	ldr	r2, [r2, #0]
 801ec62:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801ec64:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801ec68:	fb00 1303 	mla	r3, r0, r3, r1
 801ec6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec70:	18d3      	adds	r3, r2, r3
 801ec72:	930a      	str	r3, [sp, #40]	@ 0x28
 801ec74:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ec76:	681b      	ldr	r3, [r3, #0]
 801ec78:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ec7a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ec7c:	685e      	ldr	r6, [r3, #4]
 801ec7e:	3604      	adds	r6, #4
 801ec80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ec82:	2b00      	cmp	r3, #0
 801ec84:	dc03      	bgt.n	801ec8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ec86:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ec88:	2b00      	cmp	r3, #0
 801ec8a:	f340 834f 	ble.w	801f32c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801ec8e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ec90:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ec94:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ec98:	1e48      	subs	r0, r1, #1
 801ec9a:	1e57      	subs	r7, r2, #1
 801ec9c:	9b07      	ldr	r3, [sp, #28]
 801ec9e:	2b00      	cmp	r3, #0
 801eca0:	f340 8178 	ble.w	801ef94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801eca4:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801eca6:	142b      	asrs	r3, r5, #16
 801eca8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801ecac:	d406      	bmi.n	801ecbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ecae:	4584      	cmp	ip, r0
 801ecb0:	da04      	bge.n	801ecbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	db02      	blt.n	801ecbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ecb6:	42bb      	cmp	r3, r7
 801ecb8:	f2c0 816d 	blt.w	801ef96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801ecbc:	f11c 0c01 	adds.w	ip, ip, #1
 801ecc0:	f100 815b 	bmi.w	801ef7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801ecc4:	4561      	cmp	r1, ip
 801ecc6:	f2c0 8158 	blt.w	801ef7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801ecca:	3301      	adds	r3, #1
 801eccc:	f100 8155 	bmi.w	801ef7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801ecd0:	429a      	cmp	r2, r3
 801ecd2:	f2c0 8152 	blt.w	801ef7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801ecd6:	9b07      	ldr	r3, [sp, #28]
 801ecd8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801ecda:	9317      	str	r3, [sp, #92]	@ 0x5c
 801ecdc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	f340 8178 	ble.w	801efd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ece4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ece6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801ecea:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ecee:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ecf2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ecf4:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801ecf8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ecfa:	141b      	asrs	r3, r3, #16
 801ecfc:	f100 81ba 	bmi.w	801f074 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ed00:	f101 38ff 	add.w	r8, r1, #4294967295
 801ed04:	4543      	cmp	r3, r8
 801ed06:	f280 81b5 	bge.w	801f074 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ed0a:	f1bc 0f00 	cmp.w	ip, #0
 801ed0e:	f2c0 81b1 	blt.w	801f074 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ed12:	f10e 38ff 	add.w	r8, lr, #4294967295
 801ed16:	45c4      	cmp	ip, r8
 801ed18:	f280 81ac 	bge.w	801f074 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ed1c:	b209      	sxth	r1, r1
 801ed1e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ed20:	fb0c 3301 	mla	r3, ip, r1, r3
 801ed24:	eb04 0803 	add.w	r8, r4, r3
 801ed28:	5ce3      	ldrb	r3, [r4, r3]
 801ed2a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ed2e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ed32:	2a00      	cmp	r2, #0
 801ed34:	f000 8193 	beq.w	801f05e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801ed38:	f898 c001 	ldrb.w	ip, [r8, #1]
 801ed3c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801ed40:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ed42:	0e24      	lsrs	r4, r4, #24
 801ed44:	9412      	str	r4, [sp, #72]	@ 0x48
 801ed46:	b178      	cbz	r0, 801ed68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ed48:	eb08 0c01 	add.w	ip, r8, r1
 801ed4c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ed50:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ed54:	9108      	str	r1, [sp, #32]
 801ed56:	0e09      	lsrs	r1, r1, #24
 801ed58:	9110      	str	r1, [sp, #64]	@ 0x40
 801ed5a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801ed5e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ed62:	910c      	str	r1, [sp, #48]	@ 0x30
 801ed64:	0e09      	lsrs	r1, r1, #24
 801ed66:	9113      	str	r1, [sp, #76]	@ 0x4c
 801ed68:	b292      	uxth	r2, r2
 801ed6a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ed6c:	b280      	uxth	r0, r0
 801ed6e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ed70:	fb02 f900 	mul.w	r9, r2, r0
 801ed74:	0112      	lsls	r2, r2, #4
 801ed76:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ed7a:	eba2 0809 	sub.w	r8, r2, r9
 801ed7e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801ed82:	b280      	uxth	r0, r0
 801ed84:	fa1f f888 	uxth.w	r8, r8
 801ed88:	1a12      	subs	r2, r2, r0
 801ed8a:	fb08 f101 	mul.w	r1, r8, r1
 801ed8e:	b292      	uxth	r2, r2
 801ed90:	fb02 110e 	mla	r1, r2, lr, r1
 801ed94:	fb00 1104 	mla	r1, r0, r4, r1
 801ed98:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ed9a:	fb09 1104 	mla	r1, r9, r4, r1
 801ed9e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801eda2:	2900      	cmp	r1, #0
 801eda4:	f000 80de 	beq.w	801ef64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801eda8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801edac:	d01b      	beq.n	801ede6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801edae:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801edb2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801edb6:	fb0e fa0a 	mul.w	sl, lr, sl
 801edba:	fb0e fe03 	mul.w	lr, lr, r3
 801edbe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801edc2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801edc6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801edca:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801edce:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801edd2:	4453      	add	r3, sl
 801edd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801edd8:	0a1b      	lsrs	r3, r3, #8
 801edda:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801edde:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801ede2:	ea43 030c 	orr.w	r3, r3, ip
 801ede6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ede8:	2cff      	cmp	r4, #255	@ 0xff
 801edea:	d021      	beq.n	801ee30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801edec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801edee:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801edf2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801edf4:	fb04 fb0b 	mul.w	fp, r4, fp
 801edf8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801edfa:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801edfe:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ee00:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ee04:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ee08:	fb04 fa0a 	mul.w	sl, r4, sl
 801ee0c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ee10:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ee14:	44de      	add	lr, fp
 801ee16:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ee1a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ee1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ee22:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ee26:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ee2a:	ea4e 040a 	orr.w	r4, lr, sl
 801ee2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ee30:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ee32:	2cff      	cmp	r4, #255	@ 0xff
 801ee34:	d021      	beq.n	801ee7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ee36:	9c08      	ldr	r4, [sp, #32]
 801ee38:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801ee3c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ee3e:	fb04 fb0b 	mul.w	fp, r4, fp
 801ee42:	9c08      	ldr	r4, [sp, #32]
 801ee44:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ee48:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ee4a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ee4e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ee52:	fb04 fa0a 	mul.w	sl, r4, sl
 801ee56:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ee5a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ee5e:	44de      	add	lr, fp
 801ee60:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ee64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ee68:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ee6c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ee70:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ee74:	ea4e 040a 	orr.w	r4, lr, sl
 801ee78:	9408      	str	r4, [sp, #32]
 801ee7a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ee7c:	2cff      	cmp	r4, #255	@ 0xff
 801ee7e:	d021      	beq.n	801eec4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ee80:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ee82:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801ee86:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ee88:	fb04 fb0b 	mul.w	fp, r4, fp
 801ee8c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ee8e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ee92:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ee94:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ee98:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ee9c:	fb04 fa0a 	mul.w	sl, r4, sl
 801eea0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801eea4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801eea8:	44de      	add	lr, fp
 801eeaa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801eeae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eeb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eeb6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801eeba:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801eebe:	ea4e 040a 	orr.w	r4, lr, sl
 801eec2:	940c      	str	r4, [sp, #48]	@ 0x30
 801eec4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eec6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801eeca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801eece:	43c9      	mvns	r1, r1
 801eed0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801eed4:	9c08      	ldr	r4, [sp, #32]
 801eed6:	b2c9      	uxtb	r1, r1
 801eed8:	fb08 fc0c 	mul.w	ip, r8, ip
 801eedc:	fb02 cc0e 	mla	ip, r2, lr, ip
 801eee0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801eee4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801eee6:	fb00 cc0e 	mla	ip, r0, lr, ip
 801eeea:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801eeee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eef0:	fb09 cc0e 	mla	ip, r9, lr, ip
 801eef4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801eef8:	fb08 f80e 	mul.w	r8, r8, lr
 801eefc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ef00:	fb02 8303 	mla	r3, r2, r3, r8
 801ef04:	9a08      	ldr	r2, [sp, #32]
 801ef06:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ef0a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801ef0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ef10:	fb00 330a 	mla	r3, r0, sl, r3
 801ef14:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801ef18:	fb09 3900 	mla	r9, r9, r0, r3
 801ef1c:	783b      	ldrb	r3, [r7, #0]
 801ef1e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ef22:	fb03 f201 	mul.w	r2, r3, r1
 801ef26:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801ef2a:	1c53      	adds	r3, r2, #1
 801ef2c:	ea4c 0c09 	orr.w	ip, ip, r9
 801ef30:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ef34:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801ef38:	703b      	strb	r3, [r7, #0]
 801ef3a:	787b      	ldrb	r3, [r7, #1]
 801ef3c:	434b      	muls	r3, r1
 801ef3e:	1c5a      	adds	r2, r3, #1
 801ef40:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ef44:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801ef48:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ef4c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ef50:	707b      	strb	r3, [r7, #1]
 801ef52:	78bb      	ldrb	r3, [r7, #2]
 801ef54:	4359      	muls	r1, r3
 801ef56:	1c4b      	adds	r3, r1, #1
 801ef58:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801ef5c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801ef60:	f887 c002 	strb.w	ip, [r7, #2]
 801ef64:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ef66:	3703      	adds	r7, #3
 801ef68:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801ef6a:	441a      	add	r2, r3
 801ef6c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ef6e:	441d      	add	r5, r3
 801ef70:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ef72:	9225      	str	r2, [sp, #148]	@ 0x94
 801ef74:	3b01      	subs	r3, #1
 801ef76:	9317      	str	r3, [sp, #92]	@ 0x5c
 801ef78:	e6b0      	b.n	801ecdc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ef7a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ef7c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801ef7e:	441c      	add	r4, r3
 801ef80:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ef82:	441d      	add	r5, r3
 801ef84:	9b07      	ldr	r3, [sp, #28]
 801ef86:	9425      	str	r4, [sp, #148]	@ 0x94
 801ef88:	3b01      	subs	r3, #1
 801ef8a:	9307      	str	r3, [sp, #28]
 801ef8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ef8e:	3303      	adds	r3, #3
 801ef90:	930a      	str	r3, [sp, #40]	@ 0x28
 801ef92:	e683      	b.n	801ec9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ef94:	d026      	beq.n	801efe4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801ef96:	9b07      	ldr	r3, [sp, #28]
 801ef98:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801ef9a:	3b01      	subs	r3, #1
 801ef9c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801ef9e:	fb00 4003 	mla	r0, r0, r3, r4
 801efa2:	1400      	asrs	r0, r0, #16
 801efa4:	f53f ae97 	bmi.w	801ecd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801efa8:	3901      	subs	r1, #1
 801efaa:	4288      	cmp	r0, r1
 801efac:	f6bf ae93 	bge.w	801ecd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801efb0:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801efb2:	fb01 5303 	mla	r3, r1, r3, r5
 801efb6:	141b      	asrs	r3, r3, #16
 801efb8:	f53f ae8d 	bmi.w	801ecd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801efbc:	3a01      	subs	r2, #1
 801efbe:	4293      	cmp	r3, r2
 801efc0:	f6bf ae89 	bge.w	801ecd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801efc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801efc6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801efca:	f103 0e03 	add.w	lr, r3, #3
 801efce:	f1bb 0f00 	cmp.w	fp, #0
 801efd2:	dc6d      	bgt.n	801f0b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801efd4:	9b07      	ldr	r3, [sp, #28]
 801efd6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801efda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801efdc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801efe0:	4423      	add	r3, r4
 801efe2:	930a      	str	r3, [sp, #40]	@ 0x28
 801efe4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801efe6:	2b00      	cmp	r3, #0
 801efe8:	f340 81a0 	ble.w	801f32c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801efec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eff0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801eff2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eff6:	eeb0 6a62 	vmov.f32	s12, s5
 801effa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801effe:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f002:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f006:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 801f00a:	eeb0 6a43 	vmov.f32	s12, s6
 801f00e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f012:	ee16 5a10 	vmov	r5, s12
 801f016:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f01a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f01e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f022:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f026:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f02a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f02e:	ee12 2a90 	vmov	r2, s5
 801f032:	eef0 2a47 	vmov.f32	s5, s14
 801f036:	fb92 f3f3 	sdiv	r3, r2, r3
 801f03a:	ee13 2a10 	vmov	r2, s6
 801f03e:	9327      	str	r3, [sp, #156]	@ 0x9c
 801f040:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f042:	eeb0 3a67 	vmov.f32	s6, s15
 801f046:	fb92 f3f3 	sdiv	r3, r2, r3
 801f04a:	9328      	str	r3, [sp, #160]	@ 0xa0
 801f04c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f04e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f050:	3b01      	subs	r3, #1
 801f052:	9316      	str	r3, [sp, #88]	@ 0x58
 801f054:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f056:	bf08      	it	eq
 801f058:	4613      	moveq	r3, r2
 801f05a:	9307      	str	r3, [sp, #28]
 801f05c:	e610      	b.n	801ec80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f05e:	2800      	cmp	r0, #0
 801f060:	f43f ae82 	beq.w	801ed68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f064:	f818 1001 	ldrb.w	r1, [r8, r1]
 801f068:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f06c:	9108      	str	r1, [sp, #32]
 801f06e:	0e09      	lsrs	r1, r1, #24
 801f070:	9110      	str	r1, [sp, #64]	@ 0x40
 801f072:	e679      	b.n	801ed68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f074:	f113 0801 	adds.w	r8, r3, #1
 801f078:	f53f af74 	bmi.w	801ef64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f07c:	4541      	cmp	r1, r8
 801f07e:	f6ff af71 	blt.w	801ef64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f082:	f11c 0801 	adds.w	r8, ip, #1
 801f086:	f53f af6d 	bmi.w	801ef64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f08a:	45c6      	cmp	lr, r8
 801f08c:	f6ff af6a 	blt.w	801ef64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f090:	b209      	sxth	r1, r1
 801f092:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801f096:	fa0f f38e 	sxth.w	r3, lr
 801f09a:	9100      	str	r1, [sp, #0]
 801f09c:	4639      	mov	r1, r7
 801f09e:	9301      	str	r3, [sp, #4]
 801f0a0:	4633      	mov	r3, r6
 801f0a2:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801f0a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f0a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f0aa:	f7ff fca3 	bl	801e9f4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801f0ae:	e759      	b.n	801ef64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f0b0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801f0b2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f0b6:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801f0b8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f0bc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f0be:	1427      	asrs	r7, r4, #16
 801f0c0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f0c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f0c6:	142b      	asrs	r3, r5, #16
 801f0c8:	fb01 7303 	mla	r3, r1, r3, r7
 801f0cc:	18e7      	adds	r7, r4, r3
 801f0ce:	5ce3      	ldrb	r3, [r4, r3]
 801f0d0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f0d4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f0d8:	2a00      	cmp	r2, #0
 801f0da:	f000 811d 	beq.w	801f318 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801f0de:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f0e2:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801f0e6:	940d      	str	r4, [sp, #52]	@ 0x34
 801f0e8:	0e24      	lsrs	r4, r4, #24
 801f0ea:	9414      	str	r4, [sp, #80]	@ 0x50
 801f0ec:	b170      	cbz	r0, 801f10c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801f0ee:	eb07 0801 	add.w	r8, r7, r1
 801f0f2:	5c79      	ldrb	r1, [r7, r1]
 801f0f4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f0f8:	9109      	str	r1, [sp, #36]	@ 0x24
 801f0fa:	0e09      	lsrs	r1, r1, #24
 801f0fc:	9111      	str	r1, [sp, #68]	@ 0x44
 801f0fe:	f898 1001 	ldrb.w	r1, [r8, #1]
 801f102:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f106:	910e      	str	r1, [sp, #56]	@ 0x38
 801f108:	0e09      	lsrs	r1, r1, #24
 801f10a:	9115      	str	r1, [sp, #84]	@ 0x54
 801f10c:	b292      	uxth	r2, r2
 801f10e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f110:	b280      	uxth	r0, r0
 801f112:	fb02 f900 	mul.w	r9, r2, r0
 801f116:	0112      	lsls	r2, r2, #4
 801f118:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f11c:	eba2 0809 	sub.w	r8, r2, r9
 801f120:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801f124:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f126:	b280      	uxth	r0, r0
 801f128:	fa1f f888 	uxth.w	r8, r8
 801f12c:	1a09      	subs	r1, r1, r0
 801f12e:	fb08 f202 	mul.w	r2, r8, r2
 801f132:	b289      	uxth	r1, r1
 801f134:	fb01 220c 	mla	r2, r1, ip, r2
 801f138:	fb00 2204 	mla	r2, r0, r4, r2
 801f13c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f13e:	fb09 2204 	mla	r2, r9, r4, r2
 801f142:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f146:	2a00      	cmp	r2, #0
 801f148:	f000 80db 	beq.w	801f302 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801f14c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801f150:	d019      	beq.n	801f186 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801f152:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801f156:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f15a:	fb0c fa0a 	mul.w	sl, ip, sl
 801f15e:	fb0c fc03 	mul.w	ip, ip, r3
 801f162:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f166:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801f16a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801f16e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f172:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f176:	4453      	add	r3, sl
 801f178:	0a3f      	lsrs	r7, r7, #8
 801f17a:	0a1b      	lsrs	r3, r3, #8
 801f17c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801f180:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f184:	433b      	orrs	r3, r7
 801f186:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f188:	2cff      	cmp	r4, #255	@ 0xff
 801f18a:	d020      	beq.n	801f1ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801f18c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f18e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801f192:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f194:	4367      	muls	r7, r4
 801f196:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f198:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f19c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f1a0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f1a2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801f1a6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f1aa:	fb04 fa0a 	mul.w	sl, r4, sl
 801f1ae:	44bc      	add	ip, r7
 801f1b0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801f1b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f1b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f1bc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f1c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f1c4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f1c8:	ea4c 040a 	orr.w	r4, ip, sl
 801f1cc:	940d      	str	r4, [sp, #52]	@ 0x34
 801f1ce:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f1d0:	2cff      	cmp	r4, #255	@ 0xff
 801f1d2:	d020      	beq.n	801f216 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801f1d4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801f1d6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801f1da:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f1dc:	4367      	muls	r7, r4
 801f1de:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801f1e0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f1e4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f1e8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f1ea:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801f1ee:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f1f2:	fb04 fa0a 	mul.w	sl, r4, sl
 801f1f6:	44bc      	add	ip, r7
 801f1f8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801f1fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f200:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f204:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f208:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f20c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f210:	ea4c 040a 	orr.w	r4, ip, sl
 801f214:	9409      	str	r4, [sp, #36]	@ 0x24
 801f216:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f218:	2cff      	cmp	r4, #255	@ 0xff
 801f21a:	d020      	beq.n	801f25e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801f21c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f21e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801f222:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f224:	4367      	muls	r7, r4
 801f226:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f228:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f22c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f230:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f232:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801f236:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f23a:	fb04 fa0a 	mul.w	sl, r4, sl
 801f23e:	44bc      	add	ip, r7
 801f240:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801f244:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f248:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f24c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f250:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f254:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f258:	ea4c 040a 	orr.w	r4, ip, sl
 801f25c:	940e      	str	r4, [sp, #56]	@ 0x38
 801f25e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f260:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801f264:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f268:	43d2      	mvns	r2, r2
 801f26a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801f26e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801f270:	b2d2      	uxtb	r2, r2
 801f272:	fb08 f707 	mul.w	r7, r8, r7
 801f276:	fb01 770c 	mla	r7, r1, ip, r7
 801f27a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f27e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f280:	fb00 770c 	mla	r7, r0, ip, r7
 801f284:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f288:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f28a:	fb09 770c 	mla	r7, r9, ip, r7
 801f28e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801f292:	fb08 f80c 	mul.w	r8, r8, ip
 801f296:	0a3f      	lsrs	r7, r7, #8
 801f298:	fb01 8303 	mla	r3, r1, r3, r8
 801f29c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f29e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801f2a2:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801f2a6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f2a8:	fb00 330a 	mla	r3, r0, sl, r3
 801f2ac:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801f2b0:	fb09 3c0c 	mla	ip, r9, ip, r3
 801f2b4:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801f2b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f2bc:	fb03 f102 	mul.w	r1, r3, r2
 801f2c0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801f2c4:	1c4b      	adds	r3, r1, #1
 801f2c6:	ea47 070c 	orr.w	r7, r7, ip
 801f2ca:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f2ce:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801f2d2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801f2d6:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801f2da:	4353      	muls	r3, r2
 801f2dc:	1c59      	adds	r1, r3, #1
 801f2de:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f2e2:	0a3b      	lsrs	r3, r7, #8
 801f2e4:	0c3f      	lsrs	r7, r7, #16
 801f2e6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f2ea:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801f2ee:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801f2f2:	435a      	muls	r2, r3
 801f2f4:	1c53      	adds	r3, r2, #1
 801f2f6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801f2fa:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801f2fe:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801f302:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f304:	f10e 0e03 	add.w	lr, lr, #3
 801f308:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801f30a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f30e:	441a      	add	r2, r3
 801f310:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f312:	9225      	str	r2, [sp, #148]	@ 0x94
 801f314:	441d      	add	r5, r3
 801f316:	e65a      	b.n	801efce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801f318:	2800      	cmp	r0, #0
 801f31a:	f43f aef7 	beq.w	801f10c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801f31e:	5c79      	ldrb	r1, [r7, r1]
 801f320:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f324:	9109      	str	r1, [sp, #36]	@ 0x24
 801f326:	0e09      	lsrs	r1, r1, #24
 801f328:	9111      	str	r1, [sp, #68]	@ 0x44
 801f32a:	e6ef      	b.n	801f10c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801f32c:	b01b      	add	sp, #108	@ 0x6c
 801f32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f332 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801f332:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f336:	b08d      	sub	sp, #52	@ 0x34
 801f338:	468b      	mov	fp, r1
 801f33a:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 801f33e:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 801f342:	fb0c 5703 	mla	r7, ip, r3, r5
 801f346:	f1bc 0f00 	cmp.w	ip, #0
 801f34a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f34c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f350:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 801f354:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 801f358:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 801f35c:	eb02 0607 	add.w	r6, r2, r7
 801f360:	f89b 4000 	ldrb.w	r4, [fp]
 801f364:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801f368:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801f36c:	f2c0 80c1 	blt.w	801f4f2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801f370:	45e6      	cmp	lr, ip
 801f372:	f340 80be 	ble.w	801f4f2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801f376:	2d00      	cmp	r5, #0
 801f378:	f2c0 80b7 	blt.w	801f4ea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801f37c:	42ab      	cmp	r3, r5
 801f37e:	f340 80b4 	ble.w	801f4ea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801f382:	5dd2      	ldrb	r2, [r2, r7]
 801f384:	9205      	str	r2, [sp, #20]
 801f386:	7872      	ldrb	r2, [r6, #1]
 801f388:	9206      	str	r2, [sp, #24]
 801f38a:	78b2      	ldrb	r2, [r6, #2]
 801f38c:	9207      	str	r2, [sp, #28]
 801f38e:	1c6a      	adds	r2, r5, #1
 801f390:	f100 80b6 	bmi.w	801f500 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801f394:	4293      	cmp	r3, r2
 801f396:	f340 80b3 	ble.w	801f500 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801f39a:	f1b8 0f00 	cmp.w	r8, #0
 801f39e:	f000 80af 	beq.w	801f500 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801f3a2:	78f2      	ldrb	r2, [r6, #3]
 801f3a4:	9201      	str	r2, [sp, #4]
 801f3a6:	7932      	ldrb	r2, [r6, #4]
 801f3a8:	9202      	str	r2, [sp, #8]
 801f3aa:	7972      	ldrb	r2, [r6, #5]
 801f3ac:	9203      	str	r2, [sp, #12]
 801f3ae:	f11c 0c01 	adds.w	ip, ip, #1
 801f3b2:	f100 80ad 	bmi.w	801f510 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801f3b6:	45e6      	cmp	lr, ip
 801f3b8:	f340 80aa 	ble.w	801f510 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801f3bc:	f1ba 0f00 	cmp.w	sl, #0
 801f3c0:	f000 80a6 	beq.w	801f510 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801f3c4:	2d00      	cmp	r5, #0
 801f3c6:	f2c0 809f 	blt.w	801f508 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801f3ca:	42ab      	cmp	r3, r5
 801f3cc:	f340 809c 	ble.w	801f508 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801f3d0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801f3d4:	f816 9002 	ldrb.w	r9, [r6, r2]
 801f3d8:	2203      	movs	r2, #3
 801f3da:	fb03 6c02 	mla	ip, r3, r2, r6
 801f3de:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801f3e2:	f89c e002 	ldrb.w	lr, [ip, #2]
 801f3e6:	9704      	str	r7, [sp, #16]
 801f3e8:	3501      	adds	r5, #1
 801f3ea:	f100 8098 	bmi.w	801f51e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801f3ee:	42ab      	cmp	r3, r5
 801f3f0:	f340 8095 	ble.w	801f51e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801f3f4:	f1b8 0f00 	cmp.w	r8, #0
 801f3f8:	f000 8091 	beq.w	801f51e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801f3fc:	f04f 0c03 	mov.w	ip, #3
 801f400:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801f404:	5cb5      	ldrb	r5, [r6, r2]
 801f406:	fb03 620c 	mla	r2, r3, ip, r6
 801f40a:	fb03 630c 	mla	r3, r3, ip, r6
 801f40e:	7912      	ldrb	r2, [r2, #4]
 801f410:	795e      	ldrb	r6, [r3, #5]
 801f412:	fa1f f388 	uxth.w	r3, r8
 801f416:	fa1f fc8a 	uxth.w	ip, sl
 801f41a:	fb03 f70c 	mul.w	r7, r3, ip
 801f41e:	011b      	lsls	r3, r3, #4
 801f420:	9708      	str	r7, [sp, #32]
 801f422:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801f426:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 801f42a:	1bdb      	subs	r3, r3, r7
 801f42c:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 801f430:	fa1f fc8c 	uxth.w	ip, ip
 801f434:	b29b      	uxth	r3, r3
 801f436:	9709      	str	r7, [sp, #36]	@ 0x24
 801f438:	ebaa 0a0c 	sub.w	sl, sl, ip
 801f43c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f43e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f440:	fa1f fa8a 	uxth.w	sl, sl
 801f444:	ea6f 0807 	mvn.w	r8, r7
 801f448:	9f01      	ldr	r7, [sp, #4]
 801f44a:	435f      	muls	r7, r3
 801f44c:	9b05      	ldr	r3, [sp, #20]
 801f44e:	fa5f f888 	uxtb.w	r8, r8
 801f452:	fb0a 7703 	mla	r7, sl, r3, r7
 801f456:	9b08      	ldr	r3, [sp, #32]
 801f458:	fb14 f408 	smulbb	r4, r4, r8
 801f45c:	fb0c 7709 	mla	r7, ip, r9, r7
 801f460:	fb10 f008 	smulbb	r0, r0, r8
 801f464:	fb11 f108 	smulbb	r1, r1, r8
 801f468:	fb03 7705 	mla	r7, r3, r5, r7
 801f46c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f46e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f472:	fb07 4703 	mla	r7, r7, r3, r4
 801f476:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f478:	b2bf      	uxth	r7, r7
 801f47a:	1c7c      	adds	r4, r7, #1
 801f47c:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801f480:	1224      	asrs	r4, r4, #8
 801f482:	f88b 4000 	strb.w	r4, [fp]
 801f486:	9c02      	ldr	r4, [sp, #8]
 801f488:	435c      	muls	r4, r3
 801f48a:	9b06      	ldr	r3, [sp, #24]
 801f48c:	fb0a 4403 	mla	r4, sl, r3, r4
 801f490:	9b04      	ldr	r3, [sp, #16]
 801f492:	fb0c 4403 	mla	r4, ip, r3, r4
 801f496:	9b08      	ldr	r3, [sp, #32]
 801f498:	fb03 4402 	mla	r4, r3, r2, r4
 801f49c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f49e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f4a0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f4a4:	fb04 0403 	mla	r4, r4, r3, r0
 801f4a8:	9b03      	ldr	r3, [sp, #12]
 801f4aa:	435a      	muls	r2, r3
 801f4ac:	b2a4      	uxth	r4, r4
 801f4ae:	4613      	mov	r3, r2
 801f4b0:	9a07      	ldr	r2, [sp, #28]
 801f4b2:	1c60      	adds	r0, r4, #1
 801f4b4:	fb0a 3a02 	mla	sl, sl, r2, r3
 801f4b8:	9b08      	ldr	r3, [sp, #32]
 801f4ba:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801f4be:	fb0c ac0e 	mla	ip, ip, lr, sl
 801f4c2:	1224      	asrs	r4, r4, #8
 801f4c4:	fb03 c606 	mla	r6, r3, r6, ip
 801f4c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4ca:	f88b 4001 	strb.w	r4, [fp, #1]
 801f4ce:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f4d2:	fb06 1103 	mla	r1, r6, r3, r1
 801f4d6:	b289      	uxth	r1, r1
 801f4d8:	1c4e      	adds	r6, r1, #1
 801f4da:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801f4de:	1209      	asrs	r1, r1, #8
 801f4e0:	f88b 1002 	strb.w	r1, [fp, #2]
 801f4e4:	b00d      	add	sp, #52	@ 0x34
 801f4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f4ee:	9405      	str	r4, [sp, #20]
 801f4f0:	e74d      	b.n	801f38e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801f4f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f4f6:	9401      	str	r4, [sp, #4]
 801f4f8:	9405      	str	r4, [sp, #20]
 801f4fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f4fe:	e756      	b.n	801f3ae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801f500:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f504:	9401      	str	r4, [sp, #4]
 801f506:	e752      	b.n	801f3ae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801f508:	468e      	mov	lr, r1
 801f50a:	9004      	str	r0, [sp, #16]
 801f50c:	46a1      	mov	r9, r4
 801f50e:	e76b      	b.n	801f3e8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801f510:	460e      	mov	r6, r1
 801f512:	4602      	mov	r2, r0
 801f514:	4625      	mov	r5, r4
 801f516:	468e      	mov	lr, r1
 801f518:	9004      	str	r0, [sp, #16]
 801f51a:	46a1      	mov	r9, r4
 801f51c:	e779      	b.n	801f412 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801f51e:	460e      	mov	r6, r1
 801f520:	4602      	mov	r2, r0
 801f522:	4625      	mov	r5, r4
 801f524:	e775      	b.n	801f412 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801f526 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f526:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f52a:	b09f      	sub	sp, #124	@ 0x7c
 801f52c:	920e      	str	r2, [sp, #56]	@ 0x38
 801f52e:	9307      	str	r3, [sp, #28]
 801f530:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801f532:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801f536:	901d      	str	r0, [sp, #116]	@ 0x74
 801f538:	930c      	str	r3, [sp, #48]	@ 0x30
 801f53a:	6850      	ldr	r0, [r2, #4]
 801f53c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f53e:	6812      	ldr	r2, [r2, #0]
 801f540:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801f544:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 801f548:	fb00 1303 	mla	r3, r0, r3, r1
 801f54c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f550:	18d3      	adds	r3, r2, r3
 801f552:	9308      	str	r3, [sp, #32]
 801f554:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f556:	681b      	ldr	r3, [r3, #0]
 801f558:	930a      	str	r3, [sp, #40]	@ 0x28
 801f55a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f55c:	43db      	mvns	r3, r3
 801f55e:	b2db      	uxtb	r3, r3
 801f560:	9309      	str	r3, [sp, #36]	@ 0x24
 801f562:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f564:	2b00      	cmp	r3, #0
 801f566:	dc03      	bgt.n	801f570 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f568:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f56a:	2b00      	cmp	r3, #0
 801f56c:	f340 81f5 	ble.w	801f95a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801f570:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f572:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f576:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f57a:	1e48      	subs	r0, r1, #1
 801f57c:	1e54      	subs	r4, r2, #1
 801f57e:	9b07      	ldr	r3, [sp, #28]
 801f580:	2b00      	cmp	r3, #0
 801f582:	f340 80d5 	ble.w	801f730 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801f586:	ea5f 452a 	movs.w	r5, sl, asr #16
 801f58a:	ea4f 4328 	mov.w	r3, r8, asr #16
 801f58e:	d406      	bmi.n	801f59e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f590:	4285      	cmp	r5, r0
 801f592:	da04      	bge.n	801f59e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f594:	2b00      	cmp	r3, #0
 801f596:	db02      	blt.n	801f59e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f598:	42a3      	cmp	r3, r4
 801f59a:	f2c0 80ca 	blt.w	801f732 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801f59e:	3501      	adds	r5, #1
 801f5a0:	f100 80bb 	bmi.w	801f71a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801f5a4:	42a9      	cmp	r1, r5
 801f5a6:	f2c0 80b8 	blt.w	801f71a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801f5aa:	3301      	adds	r3, #1
 801f5ac:	f100 80b5 	bmi.w	801f71a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801f5b0:	429a      	cmp	r2, r3
 801f5b2:	f2c0 80b2 	blt.w	801f71a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801f5b6:	9b07      	ldr	r3, [sp, #28]
 801f5b8:	9d08      	ldr	r5, [sp, #32]
 801f5ba:	930d      	str	r3, [sp, #52]	@ 0x34
 801f5bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f5be:	2b00      	cmp	r3, #0
 801f5c0:	f340 80d6 	ble.w	801f770 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801f5c4:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801f5c6:	ea4f 4428 	mov.w	r4, r8, asr #16
 801f5ca:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f5cc:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801f5d0:	68c6      	ldr	r6, [r0, #12]
 801f5d2:	ea5f 402a 	movs.w	r0, sl, asr #16
 801f5d6:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801f5da:	689b      	ldr	r3, [r3, #8]
 801f5dc:	f100 810f 	bmi.w	801f7fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801f5e0:	1e5f      	subs	r7, r3, #1
 801f5e2:	42b8      	cmp	r0, r7
 801f5e4:	f280 810b 	bge.w	801f7fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801f5e8:	2c00      	cmp	r4, #0
 801f5ea:	f2c0 8108 	blt.w	801f7fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801f5ee:	1e77      	subs	r7, r6, #1
 801f5f0:	42bc      	cmp	r4, r7
 801f5f2:	f280 8104 	bge.w	801f7fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801f5f6:	b21b      	sxth	r3, r3
 801f5f8:	fb04 0003 	mla	r0, r4, r3, r0
 801f5fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f5fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f602:	1826      	adds	r6, r4, r0
 801f604:	5c24      	ldrb	r4, [r4, r0]
 801f606:	78b7      	ldrb	r7, [r6, #2]
 801f608:	7870      	ldrb	r0, [r6, #1]
 801f60a:	970f      	str	r7, [sp, #60]	@ 0x3c
 801f60c:	7977      	ldrb	r7, [r6, #5]
 801f60e:	f896 e003 	ldrb.w	lr, [r6, #3]
 801f612:	f896 c004 	ldrb.w	ip, [r6, #4]
 801f616:	9710      	str	r7, [sp, #64]	@ 0x40
 801f618:	b1c9      	cbz	r1, 801f64e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f61a:	f04f 0b03 	mov.w	fp, #3
 801f61e:	f06f 0904 	mvn.w	r9, #4
 801f622:	3605      	adds	r6, #5
 801f624:	fb13 930b 	smlabb	r3, r3, fp, r9
 801f628:	eb06 0b03 	add.w	fp, r6, r3
 801f62c:	5cf3      	ldrb	r3, [r6, r3]
 801f62e:	9311      	str	r3, [sp, #68]	@ 0x44
 801f630:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801f634:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f636:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801f63a:	9315      	str	r3, [sp, #84]	@ 0x54
 801f63c:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801f640:	9312      	str	r3, [sp, #72]	@ 0x48
 801f642:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801f646:	9314      	str	r3, [sp, #80]	@ 0x50
 801f648:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801f64c:	9316      	str	r3, [sp, #88]	@ 0x58
 801f64e:	b292      	uxth	r2, r2
 801f650:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801f652:	b289      	uxth	r1, r1
 801f654:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801f658:	fb02 f601 	mul.w	r6, r2, r1
 801f65c:	0112      	lsls	r2, r2, #4
 801f65e:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801f662:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 801f666:	1b92      	subs	r2, r2, r6
 801f668:	b289      	uxth	r1, r1
 801f66a:	b292      	uxth	r2, r2
 801f66c:	eba9 0901 	sub.w	r9, r9, r1
 801f670:	fb02 fe0e 	mul.w	lr, r2, lr
 801f674:	fa1f f989 	uxth.w	r9, r9
 801f678:	fb02 fc0c 	mul.w	ip, r2, ip
 801f67c:	fb09 e404 	mla	r4, r9, r4, lr
 801f680:	f895 e000 	ldrb.w	lr, [r5]
 801f684:	fb09 c000 	mla	r0, r9, r0, ip
 801f688:	fb01 4407 	mla	r4, r1, r7, r4
 801f68c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801f68e:	fb06 4407 	mla	r4, r6, r7, r4
 801f692:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801f694:	fb1e fe07 	smulbb	lr, lr, r7
 801f698:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f69c:	fb04 e403 	mla	r4, r4, r3, lr
 801f6a0:	b2a4      	uxth	r4, r4
 801f6a2:	f104 0e01 	add.w	lr, r4, #1
 801f6a6:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801f6aa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f6ac:	fb01 0004 	mla	r0, r1, r4, r0
 801f6b0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f6b2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f6b6:	fb06 0004 	mla	r0, r6, r4, r0
 801f6ba:	786c      	ldrb	r4, [r5, #1]
 801f6bc:	f885 e000 	strb.w	lr, [r5]
 801f6c0:	fb14 f407 	smulbb	r4, r4, r7
 801f6c4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f6c8:	fb00 4003 	mla	r0, r0, r3, r4
 801f6cc:	b280      	uxth	r0, r0
 801f6ce:	1c44      	adds	r4, r0, #1
 801f6d0:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801f6d4:	1200      	asrs	r0, r0, #8
 801f6d6:	7068      	strb	r0, [r5, #1]
 801f6d8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f6da:	4342      	muls	r2, r0
 801f6dc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801f6de:	fb09 2200 	mla	r2, r9, r0, r2
 801f6e2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f6e4:	fb01 2100 	mla	r1, r1, r0, r2
 801f6e8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f6ea:	fb06 1602 	mla	r6, r6, r2, r1
 801f6ee:	78a9      	ldrb	r1, [r5, #2]
 801f6f0:	fb11 f107 	smulbb	r1, r1, r7
 801f6f4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f6f8:	fb06 1303 	mla	r3, r6, r3, r1
 801f6fc:	b29b      	uxth	r3, r3
 801f6fe:	1c5e      	adds	r6, r3, #1
 801f700:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801f704:	121b      	asrs	r3, r3, #8
 801f706:	70ab      	strb	r3, [r5, #2]
 801f708:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801f70a:	3503      	adds	r5, #3
 801f70c:	449a      	add	sl, r3
 801f70e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f710:	4498      	add	r8, r3
 801f712:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f714:	3b01      	subs	r3, #1
 801f716:	930d      	str	r3, [sp, #52]	@ 0x34
 801f718:	e750      	b.n	801f5bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f71a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801f71c:	449a      	add	sl, r3
 801f71e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f720:	4498      	add	r8, r3
 801f722:	9b07      	ldr	r3, [sp, #28]
 801f724:	3b01      	subs	r3, #1
 801f726:	9307      	str	r3, [sp, #28]
 801f728:	9b08      	ldr	r3, [sp, #32]
 801f72a:	3303      	adds	r3, #3
 801f72c:	9308      	str	r3, [sp, #32]
 801f72e:	e726      	b.n	801f57e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f730:	d026      	beq.n	801f780 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801f732:	9b07      	ldr	r3, [sp, #28]
 801f734:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801f736:	3b01      	subs	r3, #1
 801f738:	fb00 a003 	mla	r0, r0, r3, sl
 801f73c:	1400      	asrs	r0, r0, #16
 801f73e:	f53f af3a 	bmi.w	801f5b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f742:	3901      	subs	r1, #1
 801f744:	4288      	cmp	r0, r1
 801f746:	f6bf af36 	bge.w	801f5b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f74a:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801f74c:	fb01 8303 	mla	r3, r1, r3, r8
 801f750:	141b      	asrs	r3, r3, #16
 801f752:	f53f af30 	bmi.w	801f5b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f756:	3a01      	subs	r2, #1
 801f758:	4293      	cmp	r3, r2
 801f75a:	f6bf af2c 	bge.w	801f5b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f75e:	9b08      	ldr	r3, [sp, #32]
 801f760:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801f764:	1cdd      	adds	r5, r3, #3
 801f766:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 801f76a:	f1bc 0f00 	cmp.w	ip, #0
 801f76e:	dc5f      	bgt.n	801f830 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801f770:	9b07      	ldr	r3, [sp, #28]
 801f772:	9a08      	ldr	r2, [sp, #32]
 801f774:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f778:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f77c:	441a      	add	r2, r3
 801f77e:	9208      	str	r2, [sp, #32]
 801f780:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f782:	2b00      	cmp	r3, #0
 801f784:	f340 80e9 	ble.w	801f95a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801f788:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f78c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f78e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f792:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f796:	eef0 6a62 	vmov.f32	s13, s5
 801f79a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f79e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f7a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f7a6:	ee16 aa90 	vmov	sl, s13
 801f7aa:	eef0 6a43 	vmov.f32	s13, s6
 801f7ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f7b2:	ee16 8a90 	vmov	r8, s13
 801f7b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f7ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f7be:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f7c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f7c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f7ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f7ce:	ee12 2a90 	vmov	r2, s5
 801f7d2:	eef0 2a47 	vmov.f32	s5, s14
 801f7d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f7da:	ee13 2a10 	vmov	r2, s6
 801f7de:	932b      	str	r3, [sp, #172]	@ 0xac
 801f7e0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f7e2:	eeb0 3a67 	vmov.f32	s6, s15
 801f7e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f7ea:	932c      	str	r3, [sp, #176]	@ 0xb0
 801f7ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f7ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f7f0:	3b01      	subs	r3, #1
 801f7f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f7f4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f7f6:	bf08      	it	eq
 801f7f8:	4613      	moveq	r3, r2
 801f7fa:	9307      	str	r3, [sp, #28]
 801f7fc:	e6b1      	b.n	801f562 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f7fe:	1c47      	adds	r7, r0, #1
 801f800:	d482      	bmi.n	801f708 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f802:	42bb      	cmp	r3, r7
 801f804:	db80      	blt.n	801f708 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f806:	1c67      	adds	r7, r4, #1
 801f808:	f53f af7e 	bmi.w	801f708 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f80c:	42be      	cmp	r6, r7
 801f80e:	f6ff af7b 	blt.w	801f708 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f812:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801f814:	b236      	sxth	r6, r6
 801f816:	9001      	str	r0, [sp, #4]
 801f818:	b21b      	sxth	r3, r3
 801f81a:	9600      	str	r6, [sp, #0]
 801f81c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801f81e:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801f822:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801f826:	4629      	mov	r1, r5
 801f828:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f82a:	f7ff fd82 	bl	801f332 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801f82e:	e76b      	b.n	801f708 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f830:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801f832:	ea4f 402a 	mov.w	r0, sl, asr #16
 801f836:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801f83a:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801f83e:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801f842:	ea4f 4128 	mov.w	r1, r8, asr #16
 801f846:	fb07 0101 	mla	r1, r7, r1, r0
 801f84a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f84c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f850:	1844      	adds	r4, r0, r1
 801f852:	5c40      	ldrb	r0, [r0, r1]
 801f854:	78a6      	ldrb	r6, [r4, #2]
 801f856:	7861      	ldrb	r1, [r4, #1]
 801f858:	960f      	str	r6, [sp, #60]	@ 0x3c
 801f85a:	78e6      	ldrb	r6, [r4, #3]
 801f85c:	910d      	str	r1, [sp, #52]	@ 0x34
 801f85e:	9610      	str	r6, [sp, #64]	@ 0x40
 801f860:	f894 9004 	ldrb.w	r9, [r4, #4]
 801f864:	f894 b005 	ldrb.w	fp, [r4, #5]
 801f868:	b192      	cbz	r2, 801f890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801f86a:	f06f 0604 	mvn.w	r6, #4
 801f86e:	2103      	movs	r1, #3
 801f870:	3405      	adds	r4, #5
 801f872:	fb17 6701 	smlabb	r7, r7, r1, r6
 801f876:	19e6      	adds	r6, r4, r7
 801f878:	5de4      	ldrb	r4, [r4, r7]
 801f87a:	9417      	str	r4, [sp, #92]	@ 0x5c
 801f87c:	7874      	ldrb	r4, [r6, #1]
 801f87e:	9419      	str	r4, [sp, #100]	@ 0x64
 801f880:	78b4      	ldrb	r4, [r6, #2]
 801f882:	941b      	str	r4, [sp, #108]	@ 0x6c
 801f884:	78f4      	ldrb	r4, [r6, #3]
 801f886:	9418      	str	r4, [sp, #96]	@ 0x60
 801f888:	7934      	ldrb	r4, [r6, #4]
 801f88a:	941a      	str	r4, [sp, #104]	@ 0x68
 801f88c:	7974      	ldrb	r4, [r6, #5]
 801f88e:	941c      	str	r4, [sp, #112]	@ 0x70
 801f890:	b29b      	uxth	r3, r3
 801f892:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801f894:	b292      	uxth	r2, r2
 801f896:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f898:	3503      	adds	r5, #3
 801f89a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f89e:	fb03 f402 	mul.w	r4, r3, r2
 801f8a2:	011b      	lsls	r3, r3, #4
 801f8a4:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801f8a8:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 801f8ac:	1b1b      	subs	r3, r3, r4
 801f8ae:	b292      	uxth	r2, r2
 801f8b0:	b29b      	uxth	r3, r3
 801f8b2:	1ab6      	subs	r6, r6, r2
 801f8b4:	435f      	muls	r7, r3
 801f8b6:	b2b6      	uxth	r6, r6
 801f8b8:	fb03 f909 	mul.w	r9, r3, r9
 801f8bc:	fb03 fb0b 	mul.w	fp, r3, fp
 801f8c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f8c2:	fb06 7000 	mla	r0, r6, r0, r7
 801f8c6:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801f8c8:	fb06 bb03 	mla	fp, r6, r3, fp
 801f8cc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f8ce:	fb02 0007 	mla	r0, r2, r7, r0
 801f8d2:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801f8d4:	fb02 bb03 	mla	fp, r2, r3, fp
 801f8d8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f8da:	fb04 0007 	mla	r0, r4, r7, r0
 801f8de:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801f8e2:	fb17 f701 	smulbb	r7, r7, r1
 801f8e6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f8ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f8ec:	fb00 700e 	mla	r0, r0, lr, r7
 801f8f0:	fb06 9101 	mla	r1, r6, r1, r9
 801f8f4:	b280      	uxth	r0, r0
 801f8f6:	1c47      	adds	r7, r0, #1
 801f8f8:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801f8fc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801f8fe:	1200      	asrs	r0, r0, #8
 801f900:	f805 0c06 	strb.w	r0, [r5, #-6]
 801f904:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f906:	fb02 1100 	mla	r1, r2, r0, r1
 801f90a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 801f90c:	fb04 1100 	mla	r1, r4, r0, r1
 801f910:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801f914:	fb04 b403 	mla	r4, r4, r3, fp
 801f918:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801f91c:	fb10 f007 	smulbb	r0, r0, r7
 801f920:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f924:	fb13 f307 	smulbb	r3, r3, r7
 801f928:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f92c:	fb01 010e 	mla	r1, r1, lr, r0
 801f930:	fb04 340e 	mla	r4, r4, lr, r3
 801f934:	b289      	uxth	r1, r1
 801f936:	b2a4      	uxth	r4, r4
 801f938:	1c48      	adds	r0, r1, #1
 801f93a:	1c63      	adds	r3, r4, #1
 801f93c:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801f940:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801f944:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801f946:	1209      	asrs	r1, r1, #8
 801f948:	1224      	asrs	r4, r4, #8
 801f94a:	449a      	add	sl, r3
 801f94c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f94e:	f805 1c05 	strb.w	r1, [r5, #-5]
 801f952:	f805 4c04 	strb.w	r4, [r5, #-4]
 801f956:	4498      	add	r8, r3
 801f958:	e707      	b.n	801f76a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f95a:	b01f      	add	sp, #124	@ 0x7c
 801f95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f960 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801f960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f964:	b087      	sub	sp, #28
 801f966:	780d      	ldrb	r5, [r1, #0]
 801f968:	784c      	ldrb	r4, [r1, #1]
 801f96a:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801f96e:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 801f972:	9004      	str	r0, [sp, #16]
 801f974:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801f978:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 801f97c:	9005      	str	r0, [sp, #20]
 801f97e:	fb06 bc03 	mla	ip, r6, r3, fp
 801f982:	2e00      	cmp	r6, #0
 801f984:	7888      	ldrb	r0, [r1, #2]
 801f986:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f98a:	eb02 090c 	add.w	r9, r2, ip
 801f98e:	f2c0 8084 	blt.w	801fa9a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801f992:	42b7      	cmp	r7, r6
 801f994:	f340 8081 	ble.w	801fa9a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801f998:	f1bb 0f00 	cmp.w	fp, #0
 801f99c:	db79      	blt.n	801fa92 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801f99e:	455b      	cmp	r3, fp
 801f9a0:	dd77      	ble.n	801fa92 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801f9a2:	f812 200c 	ldrb.w	r2, [r2, ip]
 801f9a6:	9201      	str	r2, [sp, #4]
 801f9a8:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f9ac:	9202      	str	r2, [sp, #8]
 801f9ae:	f899 2002 	ldrb.w	r2, [r9, #2]
 801f9b2:	9203      	str	r2, [sp, #12]
 801f9b4:	f11b 0201 	adds.w	r2, fp, #1
 801f9b8:	d476      	bmi.n	801faa8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f9ba:	4293      	cmp	r3, r2
 801f9bc:	dd74      	ble.n	801faa8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f9be:	9a04      	ldr	r2, [sp, #16]
 801f9c0:	2a00      	cmp	r2, #0
 801f9c2:	d071      	beq.n	801faa8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f9c4:	f899 8003 	ldrb.w	r8, [r9, #3]
 801f9c8:	f899 c004 	ldrb.w	ip, [r9, #4]
 801f9cc:	f899 a005 	ldrb.w	sl, [r9, #5]
 801f9d0:	3601      	adds	r6, #1
 801f9d2:	d471      	bmi.n	801fab8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f9d4:	42b7      	cmp	r7, r6
 801f9d6:	dd6f      	ble.n	801fab8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f9d8:	9a05      	ldr	r2, [sp, #20]
 801f9da:	2a00      	cmp	r2, #0
 801f9dc:	d06c      	beq.n	801fab8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f9de:	f1bb 0f00 	cmp.w	fp, #0
 801f9e2:	db65      	blt.n	801fab0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801f9e4:	455b      	cmp	r3, fp
 801f9e6:	dd63      	ble.n	801fab0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801f9e8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801f9ec:	f819 e002 	ldrb.w	lr, [r9, r2]
 801f9f0:	2203      	movs	r2, #3
 801f9f2:	fb03 9602 	mla	r6, r3, r2, r9
 801f9f6:	7877      	ldrb	r7, [r6, #1]
 801f9f8:	78b6      	ldrb	r6, [r6, #2]
 801f9fa:	f11b 0b01 	adds.w	fp, fp, #1
 801f9fe:	d40c      	bmi.n	801fa1a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801fa00:	455b      	cmp	r3, fp
 801fa02:	dd0a      	ble.n	801fa1a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801fa04:	9a04      	ldr	r2, [sp, #16]
 801fa06:	b142      	cbz	r2, 801fa1a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801fa08:	2203      	movs	r2, #3
 801fa0a:	fb13 2002 	smlabb	r0, r3, r2, r2
 801fa0e:	f819 5000 	ldrb.w	r5, [r9, r0]
 801fa12:	fb03 9002 	mla	r0, r3, r2, r9
 801fa16:	7904      	ldrb	r4, [r0, #4]
 801fa18:	7940      	ldrb	r0, [r0, #5]
 801fa1a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801fa1e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801fa22:	fb03 fb02 	mul.w	fp, r3, r2
 801fa26:	011b      	lsls	r3, r3, #4
 801fa28:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801fa2c:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 801fa30:	eba3 030b 	sub.w	r3, r3, fp
 801fa34:	b292      	uxth	r2, r2
 801fa36:	b29b      	uxth	r3, r3
 801fa38:	eba9 0902 	sub.w	r9, r9, r2
 801fa3c:	9304      	str	r3, [sp, #16]
 801fa3e:	fa1f f989 	uxth.w	r9, r9
 801fa42:	fb03 f808 	mul.w	r8, r3, r8
 801fa46:	9b01      	ldr	r3, [sp, #4]
 801fa48:	fb09 8803 	mla	r8, r9, r3, r8
 801fa4c:	9b04      	ldr	r3, [sp, #16]
 801fa4e:	fb03 fc0c 	mul.w	ip, r3, ip
 801fa52:	9b02      	ldr	r3, [sp, #8]
 801fa54:	fb02 880e 	mla	r8, r2, lr, r8
 801fa58:	fb09 cc03 	mla	ip, r9, r3, ip
 801fa5c:	9b04      	ldr	r3, [sp, #16]
 801fa5e:	fb0b 8805 	mla	r8, fp, r5, r8
 801fa62:	fb02 c707 	mla	r7, r2, r7, ip
 801fa66:	fb03 f30a 	mul.w	r3, r3, sl
 801fa6a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fa6e:	fb0b 7404 	mla	r4, fp, r4, r7
 801fa72:	f881 8000 	strb.w	r8, [r1]
 801fa76:	1224      	asrs	r4, r4, #8
 801fa78:	704c      	strb	r4, [r1, #1]
 801fa7a:	9c03      	ldr	r4, [sp, #12]
 801fa7c:	fb09 3904 	mla	r9, r9, r4, r3
 801fa80:	fb02 9206 	mla	r2, r2, r6, r9
 801fa84:	fb0b 2000 	mla	r0, fp, r0, r2
 801fa88:	1200      	asrs	r0, r0, #8
 801fa8a:	7088      	strb	r0, [r1, #2]
 801fa8c:	b007      	add	sp, #28
 801fa8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa92:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801fa96:	9501      	str	r5, [sp, #4]
 801fa98:	e78c      	b.n	801f9b4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801fa9a:	4682      	mov	sl, r0
 801fa9c:	46a4      	mov	ip, r4
 801fa9e:	46a8      	mov	r8, r5
 801faa0:	9501      	str	r5, [sp, #4]
 801faa2:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801faa6:	e793      	b.n	801f9d0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801faa8:	4682      	mov	sl, r0
 801faaa:	46a4      	mov	ip, r4
 801faac:	46a8      	mov	r8, r5
 801faae:	e78f      	b.n	801f9d0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801fab0:	4606      	mov	r6, r0
 801fab2:	4627      	mov	r7, r4
 801fab4:	46ae      	mov	lr, r5
 801fab6:	e7a0      	b.n	801f9fa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801fab8:	4606      	mov	r6, r0
 801faba:	4627      	mov	r7, r4
 801fabc:	46ae      	mov	lr, r5
 801fabe:	e7ac      	b.n	801fa1a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801fac0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fac4:	b09b      	sub	sp, #108	@ 0x6c
 801fac6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801fac8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801faca:	9019      	str	r0, [sp, #100]	@ 0x64
 801facc:	9109      	str	r1, [sp, #36]	@ 0x24
 801face:	6850      	ldr	r0, [r2, #4]
 801fad0:	9306      	str	r3, [sp, #24]
 801fad2:	6812      	ldr	r2, [r2, #0]
 801fad4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801fad8:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 801fadc:	fb00 1303 	mla	r3, r0, r3, r1
 801fae0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fae4:	18d3      	adds	r3, r2, r3
 801fae6:	9307      	str	r3, [sp, #28]
 801fae8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801faea:	681b      	ldr	r3, [r3, #0]
 801faec:	9308      	str	r3, [sp, #32]
 801faee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801faf0:	2b00      	cmp	r3, #0
 801faf2:	dc03      	bgt.n	801fafc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801faf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801faf6:	2b00      	cmp	r3, #0
 801faf8:	f340 81ab 	ble.w	801fe52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801fafc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801fafe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fb02:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fb06:	1e48      	subs	r0, r1, #1
 801fb08:	1e55      	subs	r5, r2, #1
 801fb0a:	9b06      	ldr	r3, [sp, #24]
 801fb0c:	2b00      	cmp	r3, #0
 801fb0e:	f340 80b1 	ble.w	801fc74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801fb12:	ea5f 462b 	movs.w	r6, fp, asr #16
 801fb16:	ea4f 4324 	mov.w	r3, r4, asr #16
 801fb1a:	d406      	bmi.n	801fb2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801fb1c:	4286      	cmp	r6, r0
 801fb1e:	da04      	bge.n	801fb2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801fb20:	2b00      	cmp	r3, #0
 801fb22:	db02      	blt.n	801fb2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801fb24:	42ab      	cmp	r3, r5
 801fb26:	f2c0 80a6 	blt.w	801fc76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801fb2a:	3601      	adds	r6, #1
 801fb2c:	f100 8097 	bmi.w	801fc5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801fb30:	42b1      	cmp	r1, r6
 801fb32:	f2c0 8094 	blt.w	801fc5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801fb36:	3301      	adds	r3, #1
 801fb38:	f100 8091 	bmi.w	801fc5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801fb3c:	429a      	cmp	r2, r3
 801fb3e:	f2c0 808e 	blt.w	801fc5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801fb42:	9b06      	ldr	r3, [sp, #24]
 801fb44:	9e07      	ldr	r6, [sp, #28]
 801fb46:	930a      	str	r3, [sp, #40]	@ 0x28
 801fb48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fb4a:	2b00      	cmp	r3, #0
 801fb4c:	f340 80b0 	ble.w	801fcb0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fb50:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801fb52:	1425      	asrs	r5, r4, #16
 801fb54:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801fb56:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801fb5a:	68c7      	ldr	r7, [r0, #12]
 801fb5c:	ea5f 402b 	movs.w	r0, fp, asr #16
 801fb60:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801fb64:	689b      	ldr	r3, [r3, #8]
 801fb66:	f100 80ea 	bmi.w	801fd3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801fb6a:	f103 3cff 	add.w	ip, r3, #4294967295
 801fb6e:	4560      	cmp	r0, ip
 801fb70:	f280 80e5 	bge.w	801fd3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801fb74:	2d00      	cmp	r5, #0
 801fb76:	f2c0 80e2 	blt.w	801fd3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801fb7a:	f107 3cff 	add.w	ip, r7, #4294967295
 801fb7e:	4565      	cmp	r5, ip
 801fb80:	f280 80dd 	bge.w	801fd3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801fb84:	b21b      	sxth	r3, r3
 801fb86:	fb05 0003 	mla	r0, r5, r3, r0
 801fb8a:	9d08      	ldr	r5, [sp, #32]
 801fb8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fb90:	182f      	adds	r7, r5, r0
 801fb92:	5c2d      	ldrb	r5, [r5, r0]
 801fb94:	7878      	ldrb	r0, [r7, #1]
 801fb96:	f897 e002 	ldrb.w	lr, [r7, #2]
 801fb9a:	900c      	str	r0, [sp, #48]	@ 0x30
 801fb9c:	f897 9003 	ldrb.w	r9, [r7, #3]
 801fba0:	f897 8004 	ldrb.w	r8, [r7, #4]
 801fba4:	f897 a005 	ldrb.w	sl, [r7, #5]
 801fba8:	b1c9      	cbz	r1, 801fbde <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801fbaa:	f04f 0c03 	mov.w	ip, #3
 801fbae:	f06f 0004 	mvn.w	r0, #4
 801fbb2:	3705      	adds	r7, #5
 801fbb4:	fb13 030c 	smlabb	r3, r3, ip, r0
 801fbb8:	eb07 0c03 	add.w	ip, r7, r3
 801fbbc:	5cfb      	ldrb	r3, [r7, r3]
 801fbbe:	930d      	str	r3, [sp, #52]	@ 0x34
 801fbc0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801fbc4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fbc6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801fbca:	9311      	str	r3, [sp, #68]	@ 0x44
 801fbcc:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801fbd0:	930e      	str	r3, [sp, #56]	@ 0x38
 801fbd2:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801fbd6:	9310      	str	r3, [sp, #64]	@ 0x40
 801fbd8:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801fbdc:	9312      	str	r3, [sp, #72]	@ 0x48
 801fbde:	b292      	uxth	r2, r2
 801fbe0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801fbe2:	b289      	uxth	r1, r1
 801fbe4:	fb02 f301 	mul.w	r3, r2, r1
 801fbe8:	0112      	lsls	r2, r2, #4
 801fbea:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801fbee:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801fbf2:	1ad2      	subs	r2, r2, r3
 801fbf4:	b289      	uxth	r1, r1
 801fbf6:	b292      	uxth	r2, r2
 801fbf8:	1a7f      	subs	r7, r7, r1
 801fbfa:	fb02 f909 	mul.w	r9, r2, r9
 801fbfe:	b2bf      	uxth	r7, r7
 801fc00:	fb02 f808 	mul.w	r8, r2, r8
 801fc04:	fb02 fa0a 	mul.w	sl, r2, sl
 801fc08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fc0a:	fb07 9905 	mla	r9, r7, r5, r9
 801fc0e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801fc10:	fb07 8800 	mla	r8, r7, r0, r8
 801fc14:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801fc16:	fb07 aa0e 	mla	sl, r7, lr, sl
 801fc1a:	fb01 9905 	mla	r9, r1, r5, r9
 801fc1e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801fc20:	fb01 8800 	mla	r8, r1, r0, r8
 801fc24:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801fc26:	fb01 a102 	mla	r1, r1, r2, sl
 801fc2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fc2c:	fb03 9905 	mla	r9, r3, r5, r9
 801fc30:	fb03 8800 	mla	r8, r3, r0, r8
 801fc34:	fb03 1302 	mla	r3, r3, r2, r1
 801fc38:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fc3c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fc40:	121b      	asrs	r3, r3, #8
 801fc42:	f886 9000 	strb.w	r9, [r6]
 801fc46:	f886 8001 	strb.w	r8, [r6, #1]
 801fc4a:	70b3      	strb	r3, [r6, #2]
 801fc4c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801fc4e:	3603      	adds	r6, #3
 801fc50:	449b      	add	fp, r3
 801fc52:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fc54:	441c      	add	r4, r3
 801fc56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fc58:	3b01      	subs	r3, #1
 801fc5a:	930a      	str	r3, [sp, #40]	@ 0x28
 801fc5c:	e774      	b.n	801fb48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801fc5e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801fc60:	449b      	add	fp, r3
 801fc62:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fc64:	441c      	add	r4, r3
 801fc66:	9b06      	ldr	r3, [sp, #24]
 801fc68:	3b01      	subs	r3, #1
 801fc6a:	9306      	str	r3, [sp, #24]
 801fc6c:	9b07      	ldr	r3, [sp, #28]
 801fc6e:	3303      	adds	r3, #3
 801fc70:	9307      	str	r3, [sp, #28]
 801fc72:	e74a      	b.n	801fb0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fc74:	d024      	beq.n	801fcc0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801fc76:	9b06      	ldr	r3, [sp, #24]
 801fc78:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801fc7a:	3b01      	subs	r3, #1
 801fc7c:	fb00 b003 	mla	r0, r0, r3, fp
 801fc80:	1400      	asrs	r0, r0, #16
 801fc82:	f53f af5e 	bmi.w	801fb42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801fc86:	3901      	subs	r1, #1
 801fc88:	4288      	cmp	r0, r1
 801fc8a:	f6bf af5a 	bge.w	801fb42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801fc8e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801fc90:	fb01 4303 	mla	r3, r1, r3, r4
 801fc94:	141b      	asrs	r3, r3, #16
 801fc96:	f53f af54 	bmi.w	801fb42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801fc9a:	3a01      	subs	r2, #1
 801fc9c:	4293      	cmp	r3, r2
 801fc9e:	f6bf af50 	bge.w	801fb42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801fca2:	9b07      	ldr	r3, [sp, #28]
 801fca4:	f8dd e018 	ldr.w	lr, [sp, #24]
 801fca8:	1cde      	adds	r6, r3, #3
 801fcaa:	f1be 0f00 	cmp.w	lr, #0
 801fcae:	dc5f      	bgt.n	801fd70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fcb0:	9b06      	ldr	r3, [sp, #24]
 801fcb2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fcb6:	9b07      	ldr	r3, [sp, #28]
 801fcb8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fcbc:	4423      	add	r3, r4
 801fcbe:	9307      	str	r3, [sp, #28]
 801fcc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fcc2:	2b00      	cmp	r3, #0
 801fcc4:	f340 80c5 	ble.w	801fe52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801fcc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fccc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fcce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fcd2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fcd6:	eef0 6a62 	vmov.f32	s13, s5
 801fcda:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fcde:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fce2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fce6:	ee16 ba90 	vmov	fp, s13
 801fcea:	eef0 6a43 	vmov.f32	s13, s6
 801fcee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fcf2:	ee16 4a90 	vmov	r4, s13
 801fcf6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fcfa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fcfe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd02:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd06:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd0a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd0e:	ee12 2a90 	vmov	r2, s5
 801fd12:	eef0 2a47 	vmov.f32	s5, s14
 801fd16:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd1a:	ee13 2a10 	vmov	r2, s6
 801fd1e:	9327      	str	r3, [sp, #156]	@ 0x9c
 801fd20:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fd22:	eeb0 3a67 	vmov.f32	s6, s15
 801fd26:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd2a:	9328      	str	r3, [sp, #160]	@ 0xa0
 801fd2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801fd30:	3b01      	subs	r3, #1
 801fd32:	9309      	str	r3, [sp, #36]	@ 0x24
 801fd34:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fd36:	bf08      	it	eq
 801fd38:	4613      	moveq	r3, r2
 801fd3a:	9306      	str	r3, [sp, #24]
 801fd3c:	e6d7      	b.n	801faee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801fd3e:	f110 0c01 	adds.w	ip, r0, #1
 801fd42:	d483      	bmi.n	801fc4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801fd44:	4563      	cmp	r3, ip
 801fd46:	db81      	blt.n	801fc4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801fd48:	f115 0c01 	adds.w	ip, r5, #1
 801fd4c:	f53f af7e 	bmi.w	801fc4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801fd50:	4567      	cmp	r7, ip
 801fd52:	f6ff af7b 	blt.w	801fc4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801fd56:	b23f      	sxth	r7, r7
 801fd58:	b21b      	sxth	r3, r3
 801fd5a:	9700      	str	r7, [sp, #0]
 801fd5c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801fd60:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801fd64:	9a08      	ldr	r2, [sp, #32]
 801fd66:	4631      	mov	r1, r6
 801fd68:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801fd6a:	f7ff fdf9 	bl	801f960 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801fd6e:	e76d      	b.n	801fc4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801fd70:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801fd72:	ea4f 402b 	mov.w	r0, fp, asr #16
 801fd76:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801fd7a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801fd7e:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801fd82:	1421      	asrs	r1, r4, #16
 801fd84:	930a      	str	r3, [sp, #40]	@ 0x28
 801fd86:	fb0c 0101 	mla	r1, ip, r1, r0
 801fd8a:	9808      	ldr	r0, [sp, #32]
 801fd8c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fd90:	1845      	adds	r5, r0, r1
 801fd92:	5c40      	ldrb	r0, [r0, r1]
 801fd94:	796f      	ldrb	r7, [r5, #5]
 801fd96:	7869      	ldrb	r1, [r5, #1]
 801fd98:	f895 8002 	ldrb.w	r8, [r5, #2]
 801fd9c:	f895 a003 	ldrb.w	sl, [r5, #3]
 801fda0:	f895 9004 	ldrb.w	r9, [r5, #4]
 801fda4:	970c      	str	r7, [sp, #48]	@ 0x30
 801fda6:	b1a2      	cbz	r2, 801fdd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801fda8:	2703      	movs	r7, #3
 801fdaa:	f06f 0304 	mvn.w	r3, #4
 801fdae:	3505      	adds	r5, #5
 801fdb0:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801fdb4:	eb05 070c 	add.w	r7, r5, ip
 801fdb8:	f815 500c 	ldrb.w	r5, [r5, ip]
 801fdbc:	9513      	str	r5, [sp, #76]	@ 0x4c
 801fdbe:	787d      	ldrb	r5, [r7, #1]
 801fdc0:	9515      	str	r5, [sp, #84]	@ 0x54
 801fdc2:	78bd      	ldrb	r5, [r7, #2]
 801fdc4:	9517      	str	r5, [sp, #92]	@ 0x5c
 801fdc6:	78fd      	ldrb	r5, [r7, #3]
 801fdc8:	9514      	str	r5, [sp, #80]	@ 0x50
 801fdca:	793d      	ldrb	r5, [r7, #4]
 801fdcc:	9516      	str	r5, [sp, #88]	@ 0x58
 801fdce:	797d      	ldrb	r5, [r7, #5]
 801fdd0:	9518      	str	r5, [sp, #96]	@ 0x60
 801fdd2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801fdd6:	b292      	uxth	r2, r2
 801fdd8:	3603      	adds	r6, #3
 801fdda:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fdde:	fb03 f502 	mul.w	r5, r3, r2
 801fde2:	011b      	lsls	r3, r3, #4
 801fde4:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801fde8:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 801fdec:	1b5b      	subs	r3, r3, r5
 801fdee:	b292      	uxth	r2, r2
 801fdf0:	b29b      	uxth	r3, r3
 801fdf2:	1abf      	subs	r7, r7, r2
 801fdf4:	fb03 f909 	mul.w	r9, r3, r9
 801fdf8:	b2bf      	uxth	r7, r7
 801fdfa:	fb03 fa0a 	mul.w	sl, r3, sl
 801fdfe:	fb07 9901 	mla	r9, r7, r1, r9
 801fe02:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801fe04:	fb07 aa00 	mla	sl, r7, r0, sl
 801fe08:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801fe0a:	fb02 9901 	mla	r9, r2, r1, r9
 801fe0e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801fe10:	fb02 aa00 	mla	sl, r2, r0, sl
 801fe14:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801fe16:	fb05 9901 	mla	r9, r5, r1, r9
 801fe1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801fe1c:	fb05 aa00 	mla	sl, r5, r0, sl
 801fe20:	434b      	muls	r3, r1
 801fe22:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801fe24:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fe28:	fb07 3308 	mla	r3, r7, r8, r3
 801fe2c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fe30:	f806 ac06 	strb.w	sl, [r6, #-6]
 801fe34:	fb02 3201 	mla	r2, r2, r1, r3
 801fe38:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fe3a:	f806 9c05 	strb.w	r9, [r6, #-5]
 801fe3e:	fb05 2503 	mla	r5, r5, r3, r2
 801fe42:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801fe44:	122d      	asrs	r5, r5, #8
 801fe46:	449b      	add	fp, r3
 801fe48:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fe4a:	f806 5c04 	strb.w	r5, [r6, #-4]
 801fe4e:	441c      	add	r4, r3
 801fe50:	e72b      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fe52:	b01b      	add	sp, #108	@ 0x6c
 801fe54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fe58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801fe58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe5c:	b087      	sub	sp, #28
 801fe5e:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801fe62:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801fe66:	fb05 7003 	mla	r0, r5, r3, r7
 801fe6a:	2d00      	cmp	r5, #0
 801fe6c:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801fe70:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801fe74:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801fe78:	f2c0 811f 	blt.w	80200ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801fe7c:	45a8      	cmp	r8, r5
 801fe7e:	f340 811c 	ble.w	80200ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801fe82:	2f00      	cmp	r7, #0
 801fe84:	f2c0 8117 	blt.w	80200b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801fe88:	42bb      	cmp	r3, r7
 801fe8a:	f340 8114 	ble.w	80200b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801fe8e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801fe92:	1c7a      	adds	r2, r7, #1
 801fe94:	f100 8114 	bmi.w	80200c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801fe98:	4293      	cmp	r3, r2
 801fe9a:	f340 8111 	ble.w	80200c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801fe9e:	2c00      	cmp	r4, #0
 801fea0:	f000 8110 	beq.w	80200c4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801fea4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801fea8:	3501      	adds	r5, #1
 801feaa:	f100 810f 	bmi.w	80200cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801feae:	45a8      	cmp	r8, r5
 801feb0:	f340 810c 	ble.w	80200cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801feb4:	f1be 0f00 	cmp.w	lr, #0
 801feb8:	f000 810b 	beq.w	80200d2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801febc:	2f00      	cmp	r7, #0
 801febe:	f2c0 8103 	blt.w	80200c8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801fec2:	42bb      	cmp	r3, r7
 801fec4:	f340 8100 	ble.w	80200c8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801fec8:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801fecc:	3701      	adds	r7, #1
 801fece:	f100 8103 	bmi.w	80200d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801fed2:	42bb      	cmp	r3, r7
 801fed4:	f340 8100 	ble.w	80200d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801fed8:	2c00      	cmp	r4, #0
 801feda:	f000 80ff 	beq.w	80200dc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801fede:	3301      	adds	r3, #1
 801fee0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801fee4:	fa1f fc84 	uxth.w	ip, r4
 801fee8:	fa1f fe8e 	uxth.w	lr, lr
 801feec:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fef0:	fb0c f90e 	mul.w	r9, ip, lr
 801fef4:	0e13      	lsrs	r3, r2, #24
 801fef6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801fefa:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801fefe:	9302      	str	r3, [sp, #8]
 801ff00:	ebac 0709 	sub.w	r7, ip, r9
 801ff04:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801ff08:	fa1f f48e 	uxth.w	r4, lr
 801ff0c:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801ff10:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801ff14:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801ff18:	fb0a fe0e 	mul.w	lr, sl, lr
 801ff1c:	1b1b      	subs	r3, r3, r4
 801ff1e:	fb0a f606 	mul.w	r6, sl, r6
 801ff22:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801ff26:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ff2a:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801ff2e:	b29b      	uxth	r3, r3
 801ff30:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff34:	b2bf      	uxth	r7, r7
 801ff36:	9301      	str	r3, [sp, #4]
 801ff38:	44e6      	add	lr, ip
 801ff3a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801ff3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ff42:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ff46:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801ff4a:	9303      	str	r3, [sp, #12]
 801ff4c:	0a33      	lsrs	r3, r6, #8
 801ff4e:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801ff52:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801ff56:	9304      	str	r3, [sp, #16]
 801ff58:	fb0b f606 	mul.w	r6, fp, r6
 801ff5c:	fb0b f000 	mul.w	r0, fp, r0
 801ff60:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801ff64:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801ff68:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ff6c:	44b6      	add	lr, r6
 801ff6e:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801ff72:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801ff76:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801ff7a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801ff7e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ff82:	fb08 f606 	mul.w	r6, r8, r6
 801ff86:	0a03      	lsrs	r3, r0, #8
 801ff88:	fb08 f505 	mul.w	r5, r8, r5
 801ff8c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ff90:	0a30      	lsrs	r0, r6, #8
 801ff92:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801ff96:	9305      	str	r3, [sp, #20]
 801ff98:	0e13      	lsrs	r3, r2, #24
 801ff9a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801ff9e:	fb0e fe07 	mul.w	lr, lr, r7
 801ffa2:	4430      	add	r0, r6
 801ffa4:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801ffa8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801ffac:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801ffb0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ffb4:	0a00      	lsrs	r0, r0, #8
 801ffb6:	435e      	muls	r6, r3
 801ffb8:	0a2d      	lsrs	r5, r5, #8
 801ffba:	435a      	muls	r2, r3
 801ffbc:	9b03      	ldr	r3, [sp, #12]
 801ffbe:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801ffc2:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801ffc6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801ffca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ffce:	44b4      	add	ip, r6
 801ffd0:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801ffd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffd8:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801ffdc:	9e01      	ldr	r6, [sp, #4]
 801ffde:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ffe2:	fb03 ee06 	mla	lr, r3, r6, lr
 801ffe6:	9b04      	ldr	r3, [sp, #16]
 801ffe8:	0a12      	lsrs	r2, r2, #8
 801ffea:	fb0c ee09 	mla	lr, ip, r9, lr
 801ffee:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801fff2:	9b05      	ldr	r3, [sp, #20]
 801fff4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801fff8:	fb00 ee04 	mla	lr, r0, r4, lr
 801fffc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020000:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8020004:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8020008:	9b01      	ldr	r3, [sp, #4]
 802000a:	fb07 fe0e 	mul.w	lr, r7, lr
 802000e:	fb07 f70b 	mul.w	r7, r7, fp
 8020012:	fb03 ee06 	mla	lr, r3, r6, lr
 8020016:	fb03 730a 	mla	r3, r3, sl, r7
 802001a:	fb09 e202 	mla	r2, r9, r2, lr
 802001e:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8020022:	fb04 2e0e 	mla	lr, r4, lr, r2
 8020026:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 802002a:	fb04 3408 	mla	r4, r4, r8, r3
 802002e:	9b02      	ldr	r3, [sp, #8]
 8020030:	b292      	uxth	r2, r2
 8020032:	fb09 4903 	mla	r9, r9, r3, r4
 8020036:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802003a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802003e:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8020042:	fb09 f902 	mul.w	r9, r9, r2
 8020046:	ea40 0e0e 	orr.w	lr, r0, lr
 802004a:	f109 0301 	add.w	r3, r9, #1
 802004e:	fa5f f08e 	uxtb.w	r0, lr
 8020052:	fb10 f002 	smulbb	r0, r0, r2
 8020056:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 802005a:	780b      	ldrb	r3, [r1, #0]
 802005c:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8020060:	fa5f f989 	uxtb.w	r9, r9
 8020064:	fb03 0309 	mla	r3, r3, r9, r0
 8020068:	b29b      	uxth	r3, r3
 802006a:	1c58      	adds	r0, r3, #1
 802006c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020070:	7848      	ldrb	r0, [r1, #1]
 8020072:	fb10 f009 	smulbb	r0, r0, r9
 8020076:	121b      	asrs	r3, r3, #8
 8020078:	700b      	strb	r3, [r1, #0]
 802007a:	f3ce 2307 	ubfx	r3, lr, #8, #8
 802007e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8020082:	fb03 0302 	mla	r3, r3, r2, r0
 8020086:	b29b      	uxth	r3, r3
 8020088:	1c58      	adds	r0, r3, #1
 802008a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802008e:	121b      	asrs	r3, r3, #8
 8020090:	704b      	strb	r3, [r1, #1]
 8020092:	788b      	ldrb	r3, [r1, #2]
 8020094:	fb13 f909 	smulbb	r9, r3, r9
 8020098:	fb0e 9e02 	mla	lr, lr, r2, r9
 802009c:	fa1f fe8e 	uxth.w	lr, lr
 80200a0:	f10e 0301 	add.w	r3, lr, #1
 80200a4:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 80200a8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80200ac:	f881 e002 	strb.w	lr, [r1, #2]
 80200b0:	b007      	add	sp, #28
 80200b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200b6:	2600      	movs	r6, #0
 80200b8:	e6eb      	b.n	801fe92 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 80200ba:	2000      	movs	r0, #0
 80200bc:	4606      	mov	r6, r0
 80200be:	e6f3      	b.n	801fea8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80200c0:	2000      	movs	r0, #0
 80200c2:	e6f1      	b.n	801fea8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80200c4:	4620      	mov	r0, r4
 80200c6:	e6ef      	b.n	801fea8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80200c8:	2500      	movs	r5, #0
 80200ca:	e6ff      	b.n	801fecc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 80200cc:	2200      	movs	r2, #0
 80200ce:	4615      	mov	r5, r2
 80200d0:	e708      	b.n	801fee4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80200d2:	4672      	mov	r2, lr
 80200d4:	4675      	mov	r5, lr
 80200d6:	e705      	b.n	801fee4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80200d8:	2200      	movs	r2, #0
 80200da:	e703      	b.n	801fee4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80200dc:	4622      	mov	r2, r4
 80200de:	e701      	b.n	801fee4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

080200e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80200e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200e4:	b09d      	sub	sp, #116	@ 0x74
 80200e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80200e8:	9307      	str	r3, [sp, #28]
 80200ea:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 80200ec:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 80200f0:	901b      	str	r0, [sp, #108]	@ 0x6c
 80200f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80200f4:	6850      	ldr	r0, [r2, #4]
 80200f6:	9117      	str	r1, [sp, #92]	@ 0x5c
 80200f8:	6812      	ldr	r2, [r2, #0]
 80200fa:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 80200fe:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 8020102:	fb00 1303 	mla	r3, r0, r3, r1
 8020106:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802010a:	18d3      	adds	r3, r2, r3
 802010c:	930a      	str	r3, [sp, #40]	@ 0x28
 802010e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8020110:	681b      	ldr	r3, [r3, #0]
 8020112:	9310      	str	r3, [sp, #64]	@ 0x40
 8020114:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8020118:	930b      	str	r3, [sp, #44]	@ 0x2c
 802011a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802011c:	2b00      	cmp	r3, #0
 802011e:	dc03      	bgt.n	8020128 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020120:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020122:	2b00      	cmp	r3, #0
 8020124:	f340 8368 	ble.w	80207f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8020128:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802012a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802012e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020132:	1e48      	subs	r0, r1, #1
 8020134:	1e57      	subs	r7, r2, #1
 8020136:	9b07      	ldr	r3, [sp, #28]
 8020138:	2b00      	cmp	r3, #0
 802013a:	f340 8187 	ble.w	802044c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802013e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8020142:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020146:	d406      	bmi.n	8020156 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020148:	4584      	cmp	ip, r0
 802014a:	da04      	bge.n	8020156 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802014c:	2b00      	cmp	r3, #0
 802014e:	db02      	blt.n	8020156 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020150:	42bb      	cmp	r3, r7
 8020152:	f2c0 817c 	blt.w	802044e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020156:	f11c 0c01 	adds.w	ip, ip, #1
 802015a:	f100 816c 	bmi.w	8020436 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802015e:	4561      	cmp	r1, ip
 8020160:	f2c0 8169 	blt.w	8020436 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8020164:	3301      	adds	r3, #1
 8020166:	f100 8166 	bmi.w	8020436 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802016a:	429a      	cmp	r2, r3
 802016c:	f2c0 8163 	blt.w	8020436 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8020170:	9b07      	ldr	r3, [sp, #28]
 8020172:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8020174:	9318      	str	r3, [sp, #96]	@ 0x60
 8020176:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020178:	2b00      	cmp	r3, #0
 802017a:	f340 8186 	ble.w	802048a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802017e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8020180:	142a      	asrs	r2, r5, #16
 8020182:	ea4f 4026 	mov.w	r0, r6, asr #16
 8020186:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802018a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802018e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8020192:	f100 81cb 	bmi.w	802052c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8020196:	f10e 38ff 	add.w	r8, lr, #4294967295
 802019a:	4542      	cmp	r2, r8
 802019c:	f280 81c6 	bge.w	802052c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80201a0:	2800      	cmp	r0, #0
 80201a2:	f2c0 81c3 	blt.w	802052c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80201a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80201aa:	4540      	cmp	r0, r8
 80201ac:	f280 81be 	bge.w	802052c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80201b0:	fa0f f38e 	sxth.w	r3, lr
 80201b4:	fb00 2203 	mla	r2, r0, r3, r2
 80201b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80201ba:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80201be:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80201c2:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80201c6:	2900      	cmp	r1, #0
 80201c8:	f000 81a6 	beq.w	8020518 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80201cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80201d0:	900c      	str	r0, [sp, #48]	@ 0x30
 80201d2:	0e00      	lsrs	r0, r0, #24
 80201d4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80201d6:	f1bc 0f00 	cmp.w	ip, #0
 80201da:	d00f      	beq.n	80201fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80201dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80201e0:	3b01      	subs	r3, #1
 80201e2:	009b      	lsls	r3, r3, #2
 80201e4:	3304      	adds	r3, #4
 80201e6:	eb08 0003 	add.w	r0, r8, r3
 80201ea:	f858 3003 	ldr.w	r3, [r8, r3]
 80201ee:	9308      	str	r3, [sp, #32]
 80201f0:	0e1b      	lsrs	r3, r3, #24
 80201f2:	9311      	str	r3, [sp, #68]	@ 0x44
 80201f4:	6843      	ldr	r3, [r0, #4]
 80201f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80201f8:	0e1b      	lsrs	r3, r3, #24
 80201fa:	9314      	str	r3, [sp, #80]	@ 0x50
 80201fc:	b289      	uxth	r1, r1
 80201fe:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020200:	fa1f fc8c 	uxth.w	ip, ip
 8020204:	0108      	lsls	r0, r1, #4
 8020206:	fb01 f90c 	mul.w	r9, r1, ip
 802020a:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 802020e:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8020212:	eba0 0809 	sub.w	r8, r0, r9
 8020216:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8020218:	fa1f f18c 	uxth.w	r1, ip
 802021c:	fa1f f888 	uxth.w	r8, r8
 8020220:	1a5b      	subs	r3, r3, r1
 8020222:	fb08 f000 	mul.w	r0, r8, r0
 8020226:	b29b      	uxth	r3, r3
 8020228:	fb03 000e 	mla	r0, r3, lr, r0
 802022c:	fb01 0004 	mla	r0, r1, r4, r0
 8020230:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020232:	fb09 0004 	mla	r0, r9, r4, r0
 8020236:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802023a:	2800      	cmp	r0, #0
 802023c:	f000 80f2 	beq.w	8020424 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020240:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8020244:	d01b      	beq.n	802027e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020246:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802024a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802024e:	fb0e fa0a 	mul.w	sl, lr, sl
 8020252:	fb0e fe02 	mul.w	lr, lr, r2
 8020256:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802025a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802025e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8020262:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8020266:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802026a:	4452      	add	r2, sl
 802026c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020270:	0a12      	lsrs	r2, r2, #8
 8020272:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020276:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802027a:	ea42 020c 	orr.w	r2, r2, ip
 802027e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020280:	2cff      	cmp	r4, #255	@ 0xff
 8020282:	d021      	beq.n	80202c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020284:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020286:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802028a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802028c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020290:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020292:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020296:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020298:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802029c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80202a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80202a4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80202a8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80202ac:	44de      	add	lr, fp
 80202ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80202b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80202b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80202ba:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80202be:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80202c2:	ea4e 040a 	orr.w	r4, lr, sl
 80202c6:	940c      	str	r4, [sp, #48]	@ 0x30
 80202c8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80202ca:	2cff      	cmp	r4, #255	@ 0xff
 80202cc:	d021      	beq.n	8020312 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80202ce:	9c08      	ldr	r4, [sp, #32]
 80202d0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80202d4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80202d6:	fb04 fb0b 	mul.w	fp, r4, fp
 80202da:	9c08      	ldr	r4, [sp, #32]
 80202dc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80202e0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80202e2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80202e6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80202ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80202ee:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80202f2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80202f6:	44de      	add	lr, fp
 80202f8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80202fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020300:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020304:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020308:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802030c:	ea4e 040a 	orr.w	r4, lr, sl
 8020310:	9408      	str	r4, [sp, #32]
 8020312:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020314:	2cff      	cmp	r4, #255	@ 0xff
 8020316:	d021      	beq.n	802035c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020318:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802031a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802031e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020320:	fb04 fb0b 	mul.w	fp, r4, fp
 8020324:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020326:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802032a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802032c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020330:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020334:	fb04 fa0a 	mul.w	sl, r4, sl
 8020338:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802033c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020340:	44de      	add	lr, fp
 8020342:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020346:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802034a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802034e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020352:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020356:	ea4e 040a 	orr.w	r4, lr, sl
 802035a:	940d      	str	r4, [sp, #52]	@ 0x34
 802035c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802035e:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8020362:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020366:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802036a:	9c08      	ldr	r4, [sp, #32]
 802036c:	fb08 fc0c 	mul.w	ip, r8, ip
 8020370:	fb03 cc0e 	mla	ip, r3, lr, ip
 8020374:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020378:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802037a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802037e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020382:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020384:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020388:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802038c:	fb08 f80e 	mul.w	r8, r8, lr
 8020390:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020394:	fb03 8202 	mla	r2, r3, r2, r8
 8020398:	9b08      	ldr	r3, [sp, #32]
 802039a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802039e:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 80203a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80203a4:	fb01 220a 	mla	r2, r1, sl, r2
 80203a8:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 80203ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80203ae:	fb09 2901 	mla	r9, r9, r1, r2
 80203b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80203b4:	4343      	muls	r3, r0
 80203b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80203ba:	1c58      	adds	r0, r3, #1
 80203bc:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80203c0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80203c4:	783b      	ldrb	r3, [r7, #0]
 80203c6:	ea4c 0c09 	orr.w	ip, ip, r9
 80203ca:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80203ce:	fa5f f28c 	uxtb.w	r2, ip
 80203d2:	b2c0      	uxtb	r0, r0
 80203d4:	fb12 f201 	smulbb	r2, r2, r1
 80203d8:	fb03 2300 	mla	r3, r3, r0, r2
 80203dc:	b29b      	uxth	r3, r3
 80203de:	1c5a      	adds	r2, r3, #1
 80203e0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80203e4:	787a      	ldrb	r2, [r7, #1]
 80203e6:	fb12 f200 	smulbb	r2, r2, r0
 80203ea:	121b      	asrs	r3, r3, #8
 80203ec:	703b      	strb	r3, [r7, #0]
 80203ee:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80203f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80203f6:	fb03 2301 	mla	r3, r3, r1, r2
 80203fa:	b29b      	uxth	r3, r3
 80203fc:	1c5a      	adds	r2, r3, #1
 80203fe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020402:	121b      	asrs	r3, r3, #8
 8020404:	707b      	strb	r3, [r7, #1]
 8020406:	78bb      	ldrb	r3, [r7, #2]
 8020408:	fb13 f000 	smulbb	r0, r3, r0
 802040c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8020410:	fa1f fc8c 	uxth.w	ip, ip
 8020414:	f10c 0301 	add.w	r3, ip, #1
 8020418:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802041c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020420:	f887 c002 	strb.w	ip, [r7, #2]
 8020424:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8020426:	3703      	adds	r7, #3
 8020428:	441d      	add	r5, r3
 802042a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802042c:	441e      	add	r6, r3
 802042e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020430:	3b01      	subs	r3, #1
 8020432:	9318      	str	r3, [sp, #96]	@ 0x60
 8020434:	e69f      	b.n	8020176 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020436:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8020438:	441d      	add	r5, r3
 802043a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802043c:	441e      	add	r6, r3
 802043e:	9b07      	ldr	r3, [sp, #28]
 8020440:	3b01      	subs	r3, #1
 8020442:	9307      	str	r3, [sp, #28]
 8020444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020446:	3303      	adds	r3, #3
 8020448:	930a      	str	r3, [sp, #40]	@ 0x28
 802044a:	e674      	b.n	8020136 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802044c:	d025      	beq.n	802049a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 802044e:	9b07      	ldr	r3, [sp, #28]
 8020450:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8020452:	3b01      	subs	r3, #1
 8020454:	fb00 5003 	mla	r0, r0, r3, r5
 8020458:	1400      	asrs	r0, r0, #16
 802045a:	f53f ae89 	bmi.w	8020170 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802045e:	3901      	subs	r1, #1
 8020460:	4288      	cmp	r0, r1
 8020462:	f6bf ae85 	bge.w	8020170 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020466:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8020468:	fb01 6303 	mla	r3, r1, r3, r6
 802046c:	141b      	asrs	r3, r3, #16
 802046e:	f53f ae7f 	bmi.w	8020170 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020472:	3a01      	subs	r2, #1
 8020474:	4293      	cmp	r3, r2
 8020476:	f6bf ae7b 	bge.w	8020170 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802047a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802047c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020480:	f103 0e03 	add.w	lr, r3, #3
 8020484:	f1bb 0f00 	cmp.w	fp, #0
 8020488:	dc6e      	bgt.n	8020568 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802048a:	9b07      	ldr	r3, [sp, #28]
 802048c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020492:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020496:	4423      	add	r3, r4
 8020498:	930a      	str	r3, [sp, #40]	@ 0x28
 802049a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802049c:	2b00      	cmp	r3, #0
 802049e:	f340 81ab 	ble.w	80207f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80204a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80204a6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80204a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80204ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80204b0:	eef0 6a62 	vmov.f32	s13, s5
 80204b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80204b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80204bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204c0:	ee16 5a90 	vmov	r5, s13
 80204c4:	eef0 6a43 	vmov.f32	s13, s6
 80204c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204cc:	ee16 6a90 	vmov	r6, s13
 80204d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80204d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80204d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80204dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80204e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80204e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80204e8:	ee12 2a90 	vmov	r2, s5
 80204ec:	eef0 2a47 	vmov.f32	s5, s14
 80204f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80204f4:	ee13 2a10 	vmov	r2, s6
 80204f8:	9329      	str	r3, [sp, #164]	@ 0xa4
 80204fa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80204fc:	eeb0 3a67 	vmov.f32	s6, s15
 8020500:	fb92 f3f3 	sdiv	r3, r2, r3
 8020504:	932a      	str	r3, [sp, #168]	@ 0xa8
 8020506:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020508:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802050a:	3b01      	subs	r3, #1
 802050c:	9317      	str	r3, [sp, #92]	@ 0x5c
 802050e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020510:	bf08      	it	eq
 8020512:	4613      	moveq	r3, r2
 8020514:	9307      	str	r3, [sp, #28]
 8020516:	e600      	b.n	802011a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020518:	f1bc 0f00 	cmp.w	ip, #0
 802051c:	f43f ae6e 	beq.w	80201fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020520:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8020524:	9308      	str	r3, [sp, #32]
 8020526:	0e1b      	lsrs	r3, r3, #24
 8020528:	9311      	str	r3, [sp, #68]	@ 0x44
 802052a:	e667      	b.n	80201fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802052c:	f112 0801 	adds.w	r8, r2, #1
 8020530:	f53f af78 	bmi.w	8020424 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020534:	45c6      	cmp	lr, r8
 8020536:	f6ff af75 	blt.w	8020424 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802053a:	f110 0801 	adds.w	r8, r0, #1
 802053e:	f53f af71 	bmi.w	8020424 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020542:	4543      	cmp	r3, r8
 8020544:	f6ff af6e 	blt.w	8020424 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020548:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 802054a:	b21b      	sxth	r3, r3
 802054c:	9201      	str	r2, [sp, #4]
 802054e:	9300      	str	r3, [sp, #0]
 8020550:	fa0f f38e 	sxth.w	r3, lr
 8020554:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802055a:	e9cd c404 	strd	ip, r4, [sp, #16]
 802055e:	4639      	mov	r1, r7
 8020560:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8020562:	f7ff fc79 	bl	801fe58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8020566:	e75d      	b.n	8020424 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020568:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802056a:	142f      	asrs	r7, r5, #16
 802056c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802056e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020572:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8020576:	1433      	asrs	r3, r6, #16
 8020578:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802057c:	fb02 7303 	mla	r3, r2, r3, r7
 8020580:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8020584:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8020588:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802058c:	2900      	cmp	r1, #0
 802058e:	f000 812a 	beq.w	80207e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8020592:	687c      	ldr	r4, [r7, #4]
 8020594:	940e      	str	r4, [sp, #56]	@ 0x38
 8020596:	0e24      	lsrs	r4, r4, #24
 8020598:	9415      	str	r4, [sp, #84]	@ 0x54
 802059a:	b178      	cbz	r0, 80205bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802059c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80205a0:	3a01      	subs	r2, #1
 80205a2:	0092      	lsls	r2, r2, #2
 80205a4:	3204      	adds	r2, #4
 80205a6:	eb07 0802 	add.w	r8, r7, r2
 80205aa:	58ba      	ldr	r2, [r7, r2]
 80205ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80205ae:	0e12      	lsrs	r2, r2, #24
 80205b0:	9212      	str	r2, [sp, #72]	@ 0x48
 80205b2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80205b6:	920f      	str	r2, [sp, #60]	@ 0x3c
 80205b8:	0e12      	lsrs	r2, r2, #24
 80205ba:	9216      	str	r2, [sp, #88]	@ 0x58
 80205bc:	b289      	uxth	r1, r1
 80205be:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80205c0:	b280      	uxth	r0, r0
 80205c2:	fb01 f900 	mul.w	r9, r1, r0
 80205c6:	0109      	lsls	r1, r1, #4
 80205c8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80205cc:	eba1 0809 	sub.w	r8, r1, r9
 80205d0:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 80205d4:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80205d6:	b280      	uxth	r0, r0
 80205d8:	fa1f f888 	uxth.w	r8, r8
 80205dc:	1a12      	subs	r2, r2, r0
 80205de:	fb08 f101 	mul.w	r1, r8, r1
 80205e2:	b292      	uxth	r2, r2
 80205e4:	fb02 110c 	mla	r1, r2, ip, r1
 80205e8:	fb00 1104 	mla	r1, r0, r4, r1
 80205ec:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80205ee:	fb09 1104 	mla	r1, r9, r4, r1
 80205f2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80205f6:	2900      	cmp	r1, #0
 80205f8:	f000 80ec 	beq.w	80207d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 80205fc:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8020600:	d019      	beq.n	8020636 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8020602:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020606:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802060a:	fb0c fa0a 	mul.w	sl, ip, sl
 802060e:	fb0c fc03 	mul.w	ip, ip, r3
 8020612:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020616:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802061a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802061e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020622:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020626:	4453      	add	r3, sl
 8020628:	0a3f      	lsrs	r7, r7, #8
 802062a:	0a1b      	lsrs	r3, r3, #8
 802062c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8020630:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020634:	433b      	orrs	r3, r7
 8020636:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020638:	2cff      	cmp	r4, #255	@ 0xff
 802063a:	d020      	beq.n	802067e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 802063c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802063e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020642:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020644:	4367      	muls	r7, r4
 8020646:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020648:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802064c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020650:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020652:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020656:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802065a:	fb04 fa0a 	mul.w	sl, r4, sl
 802065e:	44bc      	add	ip, r7
 8020660:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020664:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020668:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802066c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020670:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020674:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020678:	ea4c 040a 	orr.w	r4, ip, sl
 802067c:	940e      	str	r4, [sp, #56]	@ 0x38
 802067e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020680:	2cff      	cmp	r4, #255	@ 0xff
 8020682:	d020      	beq.n	80206c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8020684:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020686:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802068a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802068c:	4367      	muls	r7, r4
 802068e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020690:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020694:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020698:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802069a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802069e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80206a2:	fb04 fa0a 	mul.w	sl, r4, sl
 80206a6:	44bc      	add	ip, r7
 80206a8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80206ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80206b0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80206b4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80206b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80206bc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80206c0:	ea4c 040a 	orr.w	r4, ip, sl
 80206c4:	9409      	str	r4, [sp, #36]	@ 0x24
 80206c6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80206c8:	2cff      	cmp	r4, #255	@ 0xff
 80206ca:	d020      	beq.n	802070e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 80206cc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80206ce:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80206d2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80206d4:	4367      	muls	r7, r4
 80206d6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80206d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80206dc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80206e0:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80206e2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80206e6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80206ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80206ee:	44bc      	add	ip, r7
 80206f0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80206f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80206f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80206fc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020700:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020704:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020708:	ea4c 040a 	orr.w	r4, ip, sl
 802070c:	940f      	str	r4, [sp, #60]	@ 0x3c
 802070e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020710:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8020714:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020718:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802071c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802071e:	fb08 f707 	mul.w	r7, r8, r7
 8020722:	fb02 770c 	mla	r7, r2, ip, r7
 8020726:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802072a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802072c:	fb00 770c 	mla	r7, r0, ip, r7
 8020730:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020734:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020736:	fb09 770c 	mla	r7, r9, ip, r7
 802073a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802073e:	fb08 f80c 	mul.w	r8, r8, ip
 8020742:	0a3f      	lsrs	r7, r7, #8
 8020744:	fb02 8303 	mla	r3, r2, r3, r8
 8020748:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802074a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802074e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8020752:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020754:	fb00 330a 	mla	r3, r0, sl, r3
 8020758:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 802075c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802075e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020762:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020764:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020768:	434b      	muls	r3, r1
 802076a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802076e:	1c59      	adds	r1, r3, #1
 8020770:	ea47 070c 	orr.w	r7, r7, ip
 8020774:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020778:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802077c:	b2fa      	uxtb	r2, r7
 802077e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020782:	fb12 f200 	smulbb	r2, r2, r0
 8020786:	b2c9      	uxtb	r1, r1
 8020788:	fb03 2301 	mla	r3, r3, r1, r2
 802078c:	b29b      	uxth	r3, r3
 802078e:	1c5a      	adds	r2, r3, #1
 8020790:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020794:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020798:	fb12 f201 	smulbb	r2, r2, r1
 802079c:	121b      	asrs	r3, r3, #8
 802079e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80207a2:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80207a6:	0c3f      	lsrs	r7, r7, #16
 80207a8:	fb03 2300 	mla	r3, r3, r0, r2
 80207ac:	b29b      	uxth	r3, r3
 80207ae:	1c5a      	adds	r2, r3, #1
 80207b0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80207b4:	121b      	asrs	r3, r3, #8
 80207b6:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80207ba:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80207be:	fb13 f101 	smulbb	r1, r3, r1
 80207c2:	fb07 1700 	mla	r7, r7, r0, r1
 80207c6:	b2bf      	uxth	r7, r7
 80207c8:	1c79      	adds	r1, r7, #1
 80207ca:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80207ce:	123f      	asrs	r7, r7, #8
 80207d0:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80207d4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80207d6:	f10e 0e03 	add.w	lr, lr, #3
 80207da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80207de:	441d      	add	r5, r3
 80207e0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80207e2:	441e      	add	r6, r3
 80207e4:	e64e      	b.n	8020484 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80207e6:	2800      	cmp	r0, #0
 80207e8:	f43f aee8 	beq.w	80205bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80207ec:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80207f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80207f2:	0e12      	lsrs	r2, r2, #24
 80207f4:	9212      	str	r2, [sp, #72]	@ 0x48
 80207f6:	e6e1      	b.n	80205bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80207f8:	b01d      	add	sp, #116	@ 0x74
 80207fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080207fe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80207fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020802:	b087      	sub	sp, #28
 8020804:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8020808:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 802080c:	fb05 7003 	mla	r0, r5, r3, r7
 8020810:	2d00      	cmp	r5, #0
 8020812:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8020816:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 802081a:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 802081e:	f2c0 810a 	blt.w	8020a36 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8020822:	45a8      	cmp	r8, r5
 8020824:	f340 8107 	ble.w	8020a36 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8020828:	2f00      	cmp	r7, #0
 802082a:	f2c0 8102 	blt.w	8020a32 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 802082e:	42bb      	cmp	r3, r7
 8020830:	f340 80ff 	ble.w	8020a32 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8020834:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8020838:	1c7a      	adds	r2, r7, #1
 802083a:	f100 80ff 	bmi.w	8020a3c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802083e:	4293      	cmp	r3, r2
 8020840:	f340 80fc 	ble.w	8020a3c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8020844:	2c00      	cmp	r4, #0
 8020846:	f000 80fb 	beq.w	8020a40 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 802084a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802084e:	3501      	adds	r5, #1
 8020850:	f100 80fa 	bmi.w	8020a48 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8020854:	45a8      	cmp	r8, r5
 8020856:	f340 80f7 	ble.w	8020a48 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 802085a:	f1be 0f00 	cmp.w	lr, #0
 802085e:	f000 80f6 	beq.w	8020a4e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8020862:	2f00      	cmp	r7, #0
 8020864:	f2c0 80ee 	blt.w	8020a44 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8020868:	42bb      	cmp	r3, r7
 802086a:	f340 80eb 	ble.w	8020a44 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 802086e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8020872:	3701      	adds	r7, #1
 8020874:	f100 80ee 	bmi.w	8020a54 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8020878:	42bb      	cmp	r3, r7
 802087a:	f340 80eb 	ble.w	8020a54 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 802087e:	2c00      	cmp	r4, #0
 8020880:	f000 80ea 	beq.w	8020a58 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8020884:	3301      	adds	r3, #1
 8020886:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802088a:	fa1f fc84 	uxth.w	ip, r4
 802088e:	fa1f fe8e 	uxth.w	lr, lr
 8020892:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020896:	fb0c f90e 	mul.w	r9, ip, lr
 802089a:	0e13      	lsrs	r3, r2, #24
 802089c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80208a0:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80208a4:	9302      	str	r3, [sp, #8]
 80208a6:	ebac 0709 	sub.w	r7, ip, r9
 80208aa:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 80208ae:	fa1f f48e 	uxth.w	r4, lr
 80208b2:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 80208b6:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80208ba:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80208be:	fb0a fe0e 	mul.w	lr, sl, lr
 80208c2:	1b1b      	subs	r3, r3, r4
 80208c4:	fb0a f606 	mul.w	r6, sl, r6
 80208c8:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80208cc:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80208d0:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 80208d4:	b29b      	uxth	r3, r3
 80208d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80208da:	b2bf      	uxth	r7, r7
 80208dc:	9301      	str	r3, [sp, #4]
 80208de:	44e6      	add	lr, ip
 80208e0:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80208e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80208e8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80208ec:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 80208f0:	9303      	str	r3, [sp, #12]
 80208f2:	0a33      	lsrs	r3, r6, #8
 80208f4:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 80208f8:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80208fc:	9304      	str	r3, [sp, #16]
 80208fe:	fb0b f606 	mul.w	r6, fp, r6
 8020902:	fb0b f000 	mul.w	r0, fp, r0
 8020906:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 802090a:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802090e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020912:	44b6      	add	lr, r6
 8020914:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8020918:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 802091c:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8020920:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8020924:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020928:	fb08 f606 	mul.w	r6, r8, r6
 802092c:	0a03      	lsrs	r3, r0, #8
 802092e:	fb08 f505 	mul.w	r5, r8, r5
 8020932:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020936:	0a30      	lsrs	r0, r6, #8
 8020938:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802093c:	9305      	str	r3, [sp, #20]
 802093e:	0e13      	lsrs	r3, r2, #24
 8020940:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8020944:	fb0e fe07 	mul.w	lr, lr, r7
 8020948:	4430      	add	r0, r6
 802094a:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 802094e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8020952:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8020956:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802095a:	0a00      	lsrs	r0, r0, #8
 802095c:	435e      	muls	r6, r3
 802095e:	0a2d      	lsrs	r5, r5, #8
 8020960:	435a      	muls	r2, r3
 8020962:	9b03      	ldr	r3, [sp, #12]
 8020964:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8020968:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802096c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8020970:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020974:	44b4      	add	ip, r6
 8020976:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 802097a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802097e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8020982:	9e01      	ldr	r6, [sp, #4]
 8020984:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020988:	fb03 ee06 	mla	lr, r3, r6, lr
 802098c:	9b04      	ldr	r3, [sp, #16]
 802098e:	0a12      	lsrs	r2, r2, #8
 8020990:	fb0c ee09 	mla	lr, ip, r9, lr
 8020994:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8020998:	9b05      	ldr	r3, [sp, #20]
 802099a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802099e:	fb00 ee04 	mla	lr, r0, r4, lr
 80209a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80209a6:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 80209aa:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 80209ae:	9b01      	ldr	r3, [sp, #4]
 80209b0:	fb07 fe0e 	mul.w	lr, r7, lr
 80209b4:	fb07 f70b 	mul.w	r7, r7, fp
 80209b8:	fb03 ee06 	mla	lr, r3, r6, lr
 80209bc:	fb03 730a 	mla	r3, r3, sl, r7
 80209c0:	fb09 e202 	mla	r2, r9, r2, lr
 80209c4:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80209c8:	fb04 2e0e 	mla	lr, r4, lr, r2
 80209cc:	fb04 3408 	mla	r4, r4, r8, r3
 80209d0:	9b02      	ldr	r3, [sp, #8]
 80209d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80209d6:	fb09 4903 	mla	r9, r9, r3, r4
 80209da:	780b      	ldrb	r3, [r1, #0]
 80209dc:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80209e0:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80209e4:	ea40 0e0e 	orr.w	lr, r0, lr
 80209e8:	fa5f f989 	uxtb.w	r9, r9
 80209ec:	fb03 f209 	mul.w	r2, r3, r9
 80209f0:	1c53      	adds	r3, r2, #1
 80209f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80209f6:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80209fa:	700b      	strb	r3, [r1, #0]
 80209fc:	784b      	ldrb	r3, [r1, #1]
 80209fe:	fb03 f309 	mul.w	r3, r3, r9
 8020a02:	1c5a      	adds	r2, r3, #1
 8020a04:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020a08:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020a0c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8020a10:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020a14:	704b      	strb	r3, [r1, #1]
 8020a16:	788b      	ldrb	r3, [r1, #2]
 8020a18:	fb03 f909 	mul.w	r9, r3, r9
 8020a1c:	f109 0301 	add.w	r3, r9, #1
 8020a20:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8020a24:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8020a28:	f881 e002 	strb.w	lr, [r1, #2]
 8020a2c:	b007      	add	sp, #28
 8020a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a32:	2600      	movs	r6, #0
 8020a34:	e700      	b.n	8020838 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8020a36:	2000      	movs	r0, #0
 8020a38:	4606      	mov	r6, r0
 8020a3a:	e708      	b.n	802084e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8020a3c:	2000      	movs	r0, #0
 8020a3e:	e706      	b.n	802084e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8020a40:	4620      	mov	r0, r4
 8020a42:	e704      	b.n	802084e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8020a44:	2500      	movs	r5, #0
 8020a46:	e714      	b.n	8020872 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8020a48:	2200      	movs	r2, #0
 8020a4a:	4615      	mov	r5, r2
 8020a4c:	e71d      	b.n	802088a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020a4e:	4672      	mov	r2, lr
 8020a50:	4675      	mov	r5, lr
 8020a52:	e71a      	b.n	802088a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020a54:	2200      	movs	r2, #0
 8020a56:	e718      	b.n	802088a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020a58:	4622      	mov	r2, r4
 8020a5a:	e716      	b.n	802088a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08020a5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a60:	b099      	sub	sp, #100	@ 0x64
 8020a62:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 8020a66:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8020a68:	9017      	str	r0, [sp, #92]	@ 0x5c
 8020a6a:	9306      	str	r3, [sp, #24]
 8020a6c:	6850      	ldr	r0, [r2, #4]
 8020a6e:	6812      	ldr	r2, [r2, #0]
 8020a70:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8020a74:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 8020a78:	fb00 1303 	mla	r3, r0, r3, r1
 8020a7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a80:	18d3      	adds	r3, r2, r3
 8020a82:	9309      	str	r3, [sp, #36]	@ 0x24
 8020a84:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8020a86:	681b      	ldr	r3, [r3, #0]
 8020a88:	930e      	str	r3, [sp, #56]	@ 0x38
 8020a8a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020a8c:	2b00      	cmp	r3, #0
 8020a8e:	dc03      	bgt.n	8020a98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020a90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020a92:	2b00      	cmp	r3, #0
 8020a94:	f340 8360 	ble.w	8021158 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8020a98:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8020a9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020a9e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020aa2:	1e48      	subs	r0, r1, #1
 8020aa4:	1e57      	subs	r7, r2, #1
 8020aa6:	9b06      	ldr	r3, [sp, #24]
 8020aa8:	2b00      	cmp	r3, #0
 8020aaa:	f340 817b 	ble.w	8020da4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8020aae:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8020ab2:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020ab6:	d406      	bmi.n	8020ac6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020ab8:	4584      	cmp	ip, r0
 8020aba:	da04      	bge.n	8020ac6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020abc:	2b00      	cmp	r3, #0
 8020abe:	db02      	blt.n	8020ac6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020ac0:	42bb      	cmp	r3, r7
 8020ac2:	f2c0 8170 	blt.w	8020da6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020ac6:	f11c 0c01 	adds.w	ip, ip, #1
 8020aca:	f100 8160 	bmi.w	8020d8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8020ace:	4561      	cmp	r1, ip
 8020ad0:	f2c0 815d 	blt.w	8020d8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8020ad4:	3301      	adds	r3, #1
 8020ad6:	f100 815a 	bmi.w	8020d8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8020ada:	429a      	cmp	r2, r3
 8020adc:	f2c0 8157 	blt.w	8020d8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8020ae0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8020ae4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8020ae6:	f1b8 0f00 	cmp.w	r8, #0
 8020aea:	f340 8179 	ble.w	8020de0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020aee:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8020af0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8020af4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8020af6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020afa:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020afe:	142a      	asrs	r2, r5, #16
 8020b00:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020b04:	689b      	ldr	r3, [r3, #8]
 8020b06:	f100 81be 	bmi.w	8020e86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020b0a:	f103 39ff 	add.w	r9, r3, #4294967295
 8020b0e:	454a      	cmp	r2, r9
 8020b10:	f280 81b9 	bge.w	8020e86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020b14:	f1bc 0f00 	cmp.w	ip, #0
 8020b18:	f2c0 81b5 	blt.w	8020e86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020b1c:	f10e 39ff 	add.w	r9, lr, #4294967295
 8020b20:	45cc      	cmp	ip, r9
 8020b22:	f280 81b0 	bge.w	8020e86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020b26:	b21b      	sxth	r3, r3
 8020b28:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020b2a:	fb0c 2203 	mla	r2, ip, r3, r2
 8020b2e:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8020b32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020b36:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020b3a:	2900      	cmp	r1, #0
 8020b3c:	f000 8197 	beq.w	8020e6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8020b40:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8020b44:	940a      	str	r4, [sp, #40]	@ 0x28
 8020b46:	0e24      	lsrs	r4, r4, #24
 8020b48:	9411      	str	r4, [sp, #68]	@ 0x44
 8020b4a:	b180      	cbz	r0, 8020b6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8020b4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8020b50:	3b01      	subs	r3, #1
 8020b52:	009b      	lsls	r3, r3, #2
 8020b54:	3304      	adds	r3, #4
 8020b56:	eb09 0c03 	add.w	ip, r9, r3
 8020b5a:	f859 3003 	ldr.w	r3, [r9, r3]
 8020b5e:	9307      	str	r3, [sp, #28]
 8020b60:	0e1b      	lsrs	r3, r3, #24
 8020b62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020b64:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8020b68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020b6a:	0e1b      	lsrs	r3, r3, #24
 8020b6c:	9312      	str	r3, [sp, #72]	@ 0x48
 8020b6e:	b289      	uxth	r1, r1
 8020b70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020b72:	b280      	uxth	r0, r0
 8020b74:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020b76:	fb01 fa00 	mul.w	sl, r1, r0
 8020b7a:	0109      	lsls	r1, r1, #4
 8020b7c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8020b80:	eba1 090a 	sub.w	r9, r1, sl
 8020b84:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8020b88:	b280      	uxth	r0, r0
 8020b8a:	fa1f f989 	uxth.w	r9, r9
 8020b8e:	1a09      	subs	r1, r1, r0
 8020b90:	fb09 f303 	mul.w	r3, r9, r3
 8020b94:	b289      	uxth	r1, r1
 8020b96:	fb01 330e 	mla	r3, r1, lr, r3
 8020b9a:	fb00 3304 	mla	r3, r0, r4, r3
 8020b9e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020ba0:	fb0a 3304 	mla	r3, sl, r4, r3
 8020ba4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020ba8:	2b00      	cmp	r3, #0
 8020baa:	f000 80e8 	beq.w	8020d7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020bae:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8020bb2:	d01b      	beq.n	8020bec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8020bb4:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 8020bb8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020bbc:	fb0e fb0b 	mul.w	fp, lr, fp
 8020bc0:	fb0e fe02 	mul.w	lr, lr, r2
 8020bc4:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8020bc8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020bcc:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8020bd0:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8020bd4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020bd8:	445a      	add	r2, fp
 8020bda:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020bde:	0a12      	lsrs	r2, r2, #8
 8020be0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020be4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8020be8:	ea42 020c 	orr.w	r2, r2, ip
 8020bec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020bee:	2cff      	cmp	r4, #255	@ 0xff
 8020bf0:	d021      	beq.n	8020c36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8020bf2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020bf4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020bf8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020bfa:	fb04 fc0c 	mul.w	ip, r4, ip
 8020bfe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020c00:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020c04:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8020c08:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020c0a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020c0e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020c12:	fb04 fb0b 	mul.w	fp, r4, fp
 8020c16:	44e6      	add	lr, ip
 8020c18:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8020c1c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c20:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8020c24:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020c28:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020c2c:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8020c30:	ea4e 040b 	orr.w	r4, lr, fp
 8020c34:	940a      	str	r4, [sp, #40]	@ 0x28
 8020c36:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020c38:	2cff      	cmp	r4, #255	@ 0xff
 8020c3a:	d021      	beq.n	8020c80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8020c3c:	9c07      	ldr	r4, [sp, #28]
 8020c3e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020c42:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020c44:	fb04 fc0c 	mul.w	ip, r4, ip
 8020c48:	9c07      	ldr	r4, [sp, #28]
 8020c4a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020c4e:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8020c52:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020c54:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020c58:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020c5c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020c60:	44e6      	add	lr, ip
 8020c62:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8020c66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c6a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8020c6e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020c72:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020c76:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8020c7a:	ea4e 040b 	orr.w	r4, lr, fp
 8020c7e:	9407      	str	r4, [sp, #28]
 8020c80:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020c82:	2cff      	cmp	r4, #255	@ 0xff
 8020c84:	d021      	beq.n	8020cca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8020c86:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020c88:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020c8c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020c8e:	fb04 fc0c 	mul.w	ip, r4, ip
 8020c92:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020c94:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020c98:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8020c9c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020c9e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020ca2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020ca6:	fb04 fb0b 	mul.w	fp, r4, fp
 8020caa:	44e6      	add	lr, ip
 8020cac:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8020cb0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020cb4:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8020cb8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020cbc:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020cc0:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8020cc4:	ea4e 040b 	orr.w	r4, lr, fp
 8020cc8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020cca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020ccc:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8020cd0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020cd4:	2bff      	cmp	r3, #255	@ 0xff
 8020cd6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020cda:	9c07      	ldr	r4, [sp, #28]
 8020cdc:	fb09 fc0c 	mul.w	ip, r9, ip
 8020ce0:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020ce4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020ce8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020cea:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020cee:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020cf2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020cf4:	fb0a cc0e 	mla	ip, sl, lr, ip
 8020cf8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020cfc:	fb09 f90e 	mul.w	r9, r9, lr
 8020d00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d04:	fb01 9202 	mla	r2, r1, r2, r9
 8020d08:	9907      	ldr	r1, [sp, #28]
 8020d0a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020d0e:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8020d12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020d14:	fb00 220b 	mla	r2, r0, fp, r2
 8020d18:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8020d1c:	fb0a 2a00 	mla	sl, sl, r0, r2
 8020d20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020d24:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020d28:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020d2c:	fa5f f08c 	uxtb.w	r0, ip
 8020d30:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8020d34:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020d38:	f000 80a2 	beq.w	8020e80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8020d3c:	43db      	mvns	r3, r3
 8020d3e:	783a      	ldrb	r2, [r7, #0]
 8020d40:	f897 a002 	ldrb.w	sl, [r7, #2]
 8020d44:	b2db      	uxtb	r3, r3
 8020d46:	fb02 fe03 	mul.w	lr, r2, r3
 8020d4a:	fb0a fa03 	mul.w	sl, sl, r3
 8020d4e:	f10e 0201 	add.w	r2, lr, #1
 8020d52:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8020d56:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020d5a:	703a      	strb	r2, [r7, #0]
 8020d5c:	787a      	ldrb	r2, [r7, #1]
 8020d5e:	fb02 f003 	mul.w	r0, r2, r3
 8020d62:	f10a 0301 	add.w	r3, sl, #1
 8020d66:	1c42      	adds	r2, r0, #1
 8020d68:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020d6c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020d70:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020d74:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020d78:	707a      	strb	r2, [r7, #1]
 8020d7a:	f887 c002 	strb.w	ip, [r7, #2]
 8020d7e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020d80:	3703      	adds	r7, #3
 8020d82:	f108 38ff 	add.w	r8, r8, #4294967295
 8020d86:	441d      	add	r5, r3
 8020d88:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020d8a:	441e      	add	r6, r3
 8020d8c:	e6ab      	b.n	8020ae6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020d8e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020d90:	441d      	add	r5, r3
 8020d92:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020d94:	441e      	add	r6, r3
 8020d96:	9b06      	ldr	r3, [sp, #24]
 8020d98:	3b01      	subs	r3, #1
 8020d9a:	9306      	str	r3, [sp, #24]
 8020d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d9e:	3303      	adds	r3, #3
 8020da0:	9309      	str	r3, [sp, #36]	@ 0x24
 8020da2:	e680      	b.n	8020aa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020da4:	d024      	beq.n	8020df0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8020da6:	9b06      	ldr	r3, [sp, #24]
 8020da8:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8020daa:	3b01      	subs	r3, #1
 8020dac:	fb00 5003 	mla	r0, r0, r3, r5
 8020db0:	1400      	asrs	r0, r0, #16
 8020db2:	f53f ae95 	bmi.w	8020ae0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020db6:	3901      	subs	r1, #1
 8020db8:	4288      	cmp	r0, r1
 8020dba:	f6bf ae91 	bge.w	8020ae0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020dbe:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8020dc0:	fb01 6303 	mla	r3, r1, r3, r6
 8020dc4:	141b      	asrs	r3, r3, #16
 8020dc6:	f53f ae8b 	bmi.w	8020ae0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020dca:	3a01      	subs	r2, #1
 8020dcc:	4293      	cmp	r3, r2
 8020dce:	f6bf ae87 	bge.w	8020ae0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020dd4:	f8dd b018 	ldr.w	fp, [sp, #24]
 8020dd8:	1cdf      	adds	r7, r3, #3
 8020dda:	f1bb 0f00 	cmp.w	fp, #0
 8020dde:	dc6e      	bgt.n	8020ebe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8020de0:	9b06      	ldr	r3, [sp, #24]
 8020de2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020de8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020dec:	4423      	add	r3, r4
 8020dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8020df0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020df2:	2b00      	cmp	r3, #0
 8020df4:	f340 81b0 	ble.w	8021158 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8020df8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020dfc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020dfe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020e02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020e06:	eef0 6a62 	vmov.f32	s13, s5
 8020e0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020e0e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020e12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e16:	ee16 5a90 	vmov	r5, s13
 8020e1a:	eef0 6a43 	vmov.f32	s13, s6
 8020e1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e22:	ee16 6a90 	vmov	r6, s13
 8020e26:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020e2a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020e2e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020e32:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020e36:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020e3a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020e3e:	ee12 2a90 	vmov	r2, s5
 8020e42:	eef0 2a47 	vmov.f32	s5, s14
 8020e46:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e4a:	ee13 2a10 	vmov	r2, s6
 8020e4e:	9325      	str	r3, [sp, #148]	@ 0x94
 8020e50:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020e52:	eeb0 3a67 	vmov.f32	s6, s15
 8020e56:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e5a:	9326      	str	r3, [sp, #152]	@ 0x98
 8020e5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020e5e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020e60:	3b01      	subs	r3, #1
 8020e62:	9315      	str	r3, [sp, #84]	@ 0x54
 8020e64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020e66:	bf08      	it	eq
 8020e68:	4613      	moveq	r3, r2
 8020e6a:	9306      	str	r3, [sp, #24]
 8020e6c:	e60d      	b.n	8020a8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8020e6e:	2800      	cmp	r0, #0
 8020e70:	f43f ae7d 	beq.w	8020b6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8020e74:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8020e78:	9307      	str	r3, [sp, #28]
 8020e7a:	0e1b      	lsrs	r3, r3, #24
 8020e7c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020e7e:	e676      	b.n	8020b6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8020e80:	7038      	strb	r0, [r7, #0]
 8020e82:	7079      	strb	r1, [r7, #1]
 8020e84:	e779      	b.n	8020d7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020e86:	f112 0901 	adds.w	r9, r2, #1
 8020e8a:	f53f af78 	bmi.w	8020d7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020e8e:	454b      	cmp	r3, r9
 8020e90:	f6ff af75 	blt.w	8020d7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020e94:	f11c 0901 	adds.w	r9, ip, #1
 8020e98:	f53f af71 	bmi.w	8020d7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020e9c:	45ce      	cmp	lr, r9
 8020e9e:	f6ff af6e 	blt.w	8020d7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020ea2:	b21b      	sxth	r3, r3
 8020ea4:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8020ea8:	fa0f f28e 	sxth.w	r2, lr
 8020eac:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8020eb0:	9200      	str	r2, [sp, #0]
 8020eb2:	4639      	mov	r1, r7
 8020eb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020eb6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8020eb8:	f7ff fca1 	bl	80207fe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8020ebc:	e75f      	b.n	8020d7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020ebe:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8020ec0:	1429      	asrs	r1, r5, #16
 8020ec2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020ec4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020ec8:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8020ecc:	1433      	asrs	r3, r6, #16
 8020ece:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020ed2:	fb0c 1303 	mla	r3, ip, r3, r1
 8020ed6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020ed8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8020edc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8020ee0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020ee4:	2a00      	cmp	r2, #0
 8020ee6:	f000 8129 	beq.w	802113c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8020eea:	684c      	ldr	r4, [r1, #4]
 8020eec:	940c      	str	r4, [sp, #48]	@ 0x30
 8020eee:	0e24      	lsrs	r4, r4, #24
 8020ef0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8020ef2:	b198      	cbz	r0, 8020f1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8020ef4:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8020ef8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020efc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8020f00:	f10c 0c04 	add.w	ip, ip, #4
 8020f04:	eb01 080c 	add.w	r8, r1, ip
 8020f08:	f851 100c 	ldr.w	r1, [r1, ip]
 8020f0c:	9108      	str	r1, [sp, #32]
 8020f0e:	0e09      	lsrs	r1, r1, #24
 8020f10:	9110      	str	r1, [sp, #64]	@ 0x40
 8020f12:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020f16:	910d      	str	r1, [sp, #52]	@ 0x34
 8020f18:	0e09      	lsrs	r1, r1, #24
 8020f1a:	9114      	str	r1, [sp, #80]	@ 0x50
 8020f1c:	b292      	uxth	r2, r2
 8020f1e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020f20:	b280      	uxth	r0, r0
 8020f22:	fb02 f900 	mul.w	r9, r2, r0
 8020f26:	0112      	lsls	r2, r2, #4
 8020f28:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020f2c:	eba2 0809 	sub.w	r8, r2, r9
 8020f30:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8020f34:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020f36:	b280      	uxth	r0, r0
 8020f38:	fa1f f888 	uxth.w	r8, r8
 8020f3c:	1a09      	subs	r1, r1, r0
 8020f3e:	fb08 f202 	mul.w	r2, r8, r2
 8020f42:	b289      	uxth	r1, r1
 8020f44:	fb01 220e 	mla	r2, r1, lr, r2
 8020f48:	fb00 2204 	mla	r2, r0, r4, r2
 8020f4c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020f4e:	fb09 2204 	mla	r2, r9, r4, r2
 8020f52:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020f56:	2a00      	cmp	r2, #0
 8020f58:	f000 80e8 	beq.w	802112c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8020f5c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8020f60:	d01b      	beq.n	8020f9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8020f62:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020f66:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020f6a:	fb0e fa0a 	mul.w	sl, lr, sl
 8020f6e:	fb0e fe03 	mul.w	lr, lr, r3
 8020f72:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020f76:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8020f7a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8020f7e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020f82:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020f86:	4453      	add	r3, sl
 8020f88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f8c:	0a1b      	lsrs	r3, r3, #8
 8020f8e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020f92:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020f96:	ea43 030c 	orr.w	r3, r3, ip
 8020f9a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020f9c:	2cff      	cmp	r4, #255	@ 0xff
 8020f9e:	d021      	beq.n	8020fe4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8020fa0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020fa2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020fa6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020fa8:	fb04 fc0c 	mul.w	ip, r4, ip
 8020fac:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020fae:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020fb2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020fb6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020fb8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020fbc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020fc0:	fb04 fa0a 	mul.w	sl, r4, sl
 8020fc4:	44e6      	add	lr, ip
 8020fc6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020fca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020fce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020fd2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020fd6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020fda:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020fde:	ea4e 040a 	orr.w	r4, lr, sl
 8020fe2:	940c      	str	r4, [sp, #48]	@ 0x30
 8020fe4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020fe6:	2cff      	cmp	r4, #255	@ 0xff
 8020fe8:	d021      	beq.n	802102e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8020fea:	9c08      	ldr	r4, [sp, #32]
 8020fec:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020ff0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020ff2:	fb04 fc0c 	mul.w	ip, r4, ip
 8020ff6:	9c08      	ldr	r4, [sp, #32]
 8020ff8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020ffc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020ffe:	fb04 fa0e 	mul.w	sl, r4, lr
 8021002:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021006:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802100a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802100e:	44e6      	add	lr, ip
 8021010:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021014:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021018:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802101c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021020:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021024:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021028:	ea4e 040a 	orr.w	r4, lr, sl
 802102c:	9408      	str	r4, [sp, #32]
 802102e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021030:	2cff      	cmp	r4, #255	@ 0xff
 8021032:	d021      	beq.n	8021078 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8021034:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021036:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802103a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802103c:	fb04 fc0c 	mul.w	ip, r4, ip
 8021040:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021042:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021046:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802104a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802104c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8021050:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021054:	fb04 fa0a 	mul.w	sl, r4, sl
 8021058:	44e6      	add	lr, ip
 802105a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802105e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021062:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021066:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802106a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802106e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021072:	ea4e 040a 	orr.w	r4, lr, sl
 8021076:	940d      	str	r4, [sp, #52]	@ 0x34
 8021078:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802107a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802107e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021082:	2aff      	cmp	r2, #255	@ 0xff
 8021084:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021088:	9c08      	ldr	r4, [sp, #32]
 802108a:	fb08 fc0c 	mul.w	ip, r8, ip
 802108e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021092:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8021096:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021098:	fb00 cc0e 	mla	ip, r0, lr, ip
 802109c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80210a0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80210a2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80210a6:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80210aa:	fb08 f80e 	mul.w	r8, r8, lr
 80210ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80210b2:	fb01 8303 	mla	r3, r1, r3, r8
 80210b6:	9908      	ldr	r1, [sp, #32]
 80210b8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80210bc:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80210c0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80210c2:	fb00 330a 	mla	r3, r0, sl, r3
 80210c6:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 80210ca:	fb09 3e0e 	mla	lr, r9, lr, r3
 80210ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80210d2:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80210d6:	ea4c 0c0e 	orr.w	ip, ip, lr
 80210da:	fa5f f08c 	uxtb.w	r0, ip
 80210de:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80210e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80210e6:	d032      	beq.n	802114e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80210e8:	43d2      	mvns	r2, r2
 80210ea:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 80210ee:	b2d2      	uxtb	r2, r2
 80210f0:	fb0e fe02 	mul.w	lr, lr, r2
 80210f4:	f10e 0301 	add.w	r3, lr, #1
 80210f8:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80210fc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021100:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8021104:	4350      	muls	r0, r2
 8021106:	f807 3c03 	strb.w	r3, [r7, #-3]
 802110a:	1c43      	adds	r3, r0, #1
 802110c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021110:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021114:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8021118:	4353      	muls	r3, r2
 802111a:	f807 1c02 	strb.w	r1, [r7, #-2]
 802111e:	1c5a      	adds	r2, r3, #1
 8021120:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021124:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8021128:	f807 cc01 	strb.w	ip, [r7, #-1]
 802112c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802112e:	3703      	adds	r7, #3
 8021130:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021134:	441d      	add	r5, r3
 8021136:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021138:	441e      	add	r6, r3
 802113a:	e64e      	b.n	8020dda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802113c:	2800      	cmp	r0, #0
 802113e:	f43f aeed 	beq.w	8020f1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8021142:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8021146:	9108      	str	r1, [sp, #32]
 8021148:	0e09      	lsrs	r1, r1, #24
 802114a:	9110      	str	r1, [sp, #64]	@ 0x40
 802114c:	e6e6      	b.n	8020f1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802114e:	f807 0c03 	strb.w	r0, [r7, #-3]
 8021152:	f807 1c02 	strb.w	r1, [r7, #-2]
 8021156:	e7e7      	b.n	8021128 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8021158:	b019      	add	sp, #100	@ 0x64
 802115a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021160 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8021160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021164:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8021168:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802116c:	2c00      	cmp	r4, #0
 802116e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8021172:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 8021176:	fb00 4e03 	mla	lr, r0, r3, r4
 802117a:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 802117e:	f2c0 80b8 	blt.w	80212f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8021182:	45a1      	cmp	r9, r4
 8021184:	f340 80b5 	ble.w	80212f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8021188:	2800      	cmp	r0, #0
 802118a:	f2c0 80b2 	blt.w	80212f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802118e:	4580      	cmp	r8, r0
 8021190:	f340 80af 	ble.w	80212f2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8021194:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8021198:	f01e 0f01 	tst.w	lr, #1
 802119c:	5d56      	ldrb	r6, [r2, r5]
 802119e:	bf0c      	ite	eq
 80211a0:	f006 060f 	andeq.w	r6, r6, #15
 80211a4:	1136      	asrne	r6, r6, #4
 80211a6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80211aa:	b2f6      	uxtb	r6, r6
 80211ac:	f114 0a01 	adds.w	sl, r4, #1
 80211b0:	f100 80a1 	bmi.w	80212f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80211b4:	45d1      	cmp	r9, sl
 80211b6:	f340 809e 	ble.w	80212f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80211ba:	2800      	cmp	r0, #0
 80211bc:	f2c0 809b 	blt.w	80212f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80211c0:	4580      	cmp	r8, r0
 80211c2:	f340 8098 	ble.w	80212f6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80211c6:	2f00      	cmp	r7, #0
 80211c8:	f000 8097 	beq.w	80212fa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 80211cc:	f10e 0b01 	add.w	fp, lr, #1
 80211d0:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80211d4:	f01b 0f01 	tst.w	fp, #1
 80211d8:	5d55      	ldrb	r5, [r2, r5]
 80211da:	bf0c      	ite	eq
 80211dc:	f005 050f 	andeq.w	r5, r5, #15
 80211e0:	112d      	asrne	r5, r5, #4
 80211e2:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80211e6:	b2ed      	uxtb	r5, r5
 80211e8:	f1bc 0f00 	cmp.w	ip, #0
 80211ec:	f000 8089 	beq.w	8021302 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 80211f0:	2c00      	cmp	r4, #0
 80211f2:	f100 0001 	add.w	r0, r0, #1
 80211f6:	f2c0 8082 	blt.w	80212fe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80211fa:	45a1      	cmp	r9, r4
 80211fc:	dd7f      	ble.n	80212fe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80211fe:	2800      	cmp	r0, #0
 8021200:	db7d      	blt.n	80212fe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8021202:	4580      	cmp	r8, r0
 8021204:	dd7b      	ble.n	80212fe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8021206:	eb03 0b0e 	add.w	fp, r3, lr
 802120a:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802120e:	f01b 0f01 	tst.w	fp, #1
 8021212:	5d14      	ldrb	r4, [r2, r4]
 8021214:	bf0c      	ite	eq
 8021216:	f004 040f 	andeq.w	r4, r4, #15
 802121a:	1124      	asrne	r4, r4, #4
 802121c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021220:	b2e4      	uxtb	r4, r4
 8021222:	f1ba 0f00 	cmp.w	sl, #0
 8021226:	db6f      	blt.n	8021308 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8021228:	45d1      	cmp	r9, sl
 802122a:	dd6d      	ble.n	8021308 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 802122c:	2800      	cmp	r0, #0
 802122e:	db6b      	blt.n	8021308 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8021230:	4580      	cmp	r8, r0
 8021232:	dd69      	ble.n	8021308 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8021234:	2f00      	cmp	r7, #0
 8021236:	d069      	beq.n	802130c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8021238:	3301      	adds	r3, #1
 802123a:	449e      	add	lr, r3
 802123c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8021240:	f01e 0f01 	tst.w	lr, #1
 8021244:	5cd0      	ldrb	r0, [r2, r3]
 8021246:	bf0c      	ite	eq
 8021248:	f000 000f 	andeq.w	r0, r0, #15
 802124c:	1100      	asrne	r0, r0, #4
 802124e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021252:	b2c3      	uxtb	r3, r0
 8021254:	b2ba      	uxth	r2, r7
 8021256:	fa1f fc8c 	uxth.w	ip, ip
 802125a:	fb02 f00c 	mul.w	r0, r2, ip
 802125e:	0112      	lsls	r2, r2, #4
 8021260:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8021264:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8021268:	1a12      	subs	r2, r2, r0
 802126a:	fa1f fc8c 	uxth.w	ip, ip
 802126e:	b292      	uxth	r2, r2
 8021270:	eba7 070c 	sub.w	r7, r7, ip
 8021274:	436a      	muls	r2, r5
 8021276:	b2bf      	uxth	r7, r7
 8021278:	fb06 2207 	mla	r2, r6, r7, r2
 802127c:	fb0c 2404 	mla	r4, ip, r4, r2
 8021280:	fb00 4303 	mla	r3, r0, r3, r4
 8021284:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021288:	b38b      	cbz	r3, 80212ee <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 802128a:	4a21      	ldr	r2, [pc, #132]	@ (8021310 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 802128c:	6814      	ldr	r4, [r2, #0]
 802128e:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8021292:	b2e5      	uxtb	r5, r4
 8021294:	4353      	muls	r3, r2
 8021296:	1c5a      	adds	r2, r3, #1
 8021298:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802129c:	1212      	asrs	r2, r2, #8
 802129e:	b290      	uxth	r0, r2
 80212a0:	43d2      	mvns	r2, r2
 80212a2:	fb15 f500 	smulbb	r5, r5, r0
 80212a6:	b2d3      	uxtb	r3, r2
 80212a8:	780a      	ldrb	r2, [r1, #0]
 80212aa:	fb02 5203 	mla	r2, r2, r3, r5
 80212ae:	b292      	uxth	r2, r2
 80212b0:	1c55      	adds	r5, r2, #1
 80212b2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80212b6:	784d      	ldrb	r5, [r1, #1]
 80212b8:	fb15 f503 	smulbb	r5, r5, r3
 80212bc:	1212      	asrs	r2, r2, #8
 80212be:	700a      	strb	r2, [r1, #0]
 80212c0:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80212c4:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80212c8:	fb02 5200 	mla	r2, r2, r0, r5
 80212cc:	b292      	uxth	r2, r2
 80212ce:	1c55      	adds	r5, r2, #1
 80212d0:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80212d4:	1212      	asrs	r2, r2, #8
 80212d6:	704a      	strb	r2, [r1, #1]
 80212d8:	788a      	ldrb	r2, [r1, #2]
 80212da:	fb12 f303 	smulbb	r3, r2, r3
 80212de:	fb04 3300 	mla	r3, r4, r0, r3
 80212e2:	b29b      	uxth	r3, r3
 80212e4:	1c5a      	adds	r2, r3, #1
 80212e6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80212ea:	121b      	asrs	r3, r3, #8
 80212ec:	708b      	strb	r3, [r1, #2]
 80212ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212f2:	2600      	movs	r6, #0
 80212f4:	e75a      	b.n	80211ac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 80212f6:	2500      	movs	r5, #0
 80212f8:	e776      	b.n	80211e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80212fa:	463d      	mov	r5, r7
 80212fc:	e774      	b.n	80211e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80212fe:	2400      	movs	r4, #0
 8021300:	e78f      	b.n	8021222 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8021302:	4663      	mov	r3, ip
 8021304:	4664      	mov	r4, ip
 8021306:	e7a5      	b.n	8021254 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8021308:	2300      	movs	r3, #0
 802130a:	e7a3      	b.n	8021254 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 802130c:	463b      	mov	r3, r7
 802130e:	e7a1      	b.n	8021254 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8021310:	240255dc 	.word	0x240255dc

08021314 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021318:	b097      	sub	sp, #92	@ 0x5c
 802131a:	9214      	str	r2, [sp, #80]	@ 0x50
 802131c:	9309      	str	r3, [sp, #36]	@ 0x24
 802131e:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8021320:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8021324:	9015      	str	r0, [sp, #84]	@ 0x54
 8021326:	910c      	str	r1, [sp, #48]	@ 0x30
 8021328:	6850      	ldr	r0, [r2, #4]
 802132a:	930e      	str	r3, [sp, #56]	@ 0x38
 802132c:	6812      	ldr	r2, [r2, #0]
 802132e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8021332:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8021336:	fb00 1303 	mla	r3, r0, r3, r1
 802133a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802133e:	eb02 0a03 	add.w	sl, r2, r3
 8021342:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021344:	689b      	ldr	r3, [r3, #8]
 8021346:	3301      	adds	r3, #1
 8021348:	f023 0301 	bic.w	r3, r3, #1
 802134c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802134e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021350:	681f      	ldr	r7, [r3, #0]
 8021352:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021354:	2b00      	cmp	r3, #0
 8021356:	dc03      	bgt.n	8021360 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021358:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802135a:	2b00      	cmp	r3, #0
 802135c:	f340 8247 	ble.w	80217ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8021360:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021362:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021366:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802136a:	1e48      	subs	r0, r1, #1
 802136c:	f102 3cff 	add.w	ip, r2, #4294967295
 8021370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021372:	2b00      	cmp	r3, #0
 8021374:	f340 80e5 	ble.w	8021542 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8021378:	ea5f 4e25 	movs.w	lr, r5, asr #16
 802137c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021380:	d406      	bmi.n	8021390 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021382:	4586      	cmp	lr, r0
 8021384:	da04      	bge.n	8021390 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021386:	2b00      	cmp	r3, #0
 8021388:	db02      	blt.n	8021390 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802138a:	4563      	cmp	r3, ip
 802138c:	f2c0 80da 	blt.w	8021544 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8021390:	f11e 0e01 	adds.w	lr, lr, #1
 8021394:	f100 80cb 	bmi.w	802152e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8021398:	4571      	cmp	r1, lr
 802139a:	f2c0 80c8 	blt.w	802152e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802139e:	3301      	adds	r3, #1
 80213a0:	f100 80c5 	bmi.w	802152e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80213a4:	429a      	cmp	r2, r3
 80213a6:	f2c0 80c2 	blt.w	802152e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80213aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213ac:	46d0      	mov	r8, sl
 80213ae:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 80213b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80213b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80213b6:	2b00      	cmp	r3, #0
 80213b8:	f340 80e3 	ble.w	8021582 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80213bc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80213be:	1430      	asrs	r0, r6, #16
 80213c0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80213c4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80213c8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80213cc:	142b      	asrs	r3, r5, #16
 80213ce:	f100 812e 	bmi.w	802162e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80213d2:	f10c 3bff 	add.w	fp, ip, #4294967295
 80213d6:	455b      	cmp	r3, fp
 80213d8:	f280 8129 	bge.w	802162e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80213dc:	2800      	cmp	r0, #0
 80213de:	f2c0 8126 	blt.w	802162e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80213e2:	f10e 3bff 	add.w	fp, lr, #4294967295
 80213e6:	4558      	cmp	r0, fp
 80213e8:	f280 8121 	bge.w	802162e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80213ec:	fb00 3309 	mla	r3, r0, r9, r3
 80213f0:	0858      	lsrs	r0, r3, #1
 80213f2:	07dc      	lsls	r4, r3, #31
 80213f4:	f817 c000 	ldrb.w	ip, [r7, r0]
 80213f8:	bf54      	ite	pl
 80213fa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80213fe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021402:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021406:	fa5f fc8c 	uxtb.w	ip, ip
 802140a:	2a00      	cmp	r2, #0
 802140c:	f000 80fe 	beq.w	802160c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8021410:	1c58      	adds	r0, r3, #1
 8021412:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8021416:	07c0      	lsls	r0, r0, #31
 8021418:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802141c:	bf54      	ite	pl
 802141e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8021422:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8021426:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802142a:	fa5f f08e 	uxtb.w	r0, lr
 802142e:	9010      	str	r0, [sp, #64]	@ 0x40
 8021430:	b1d9      	cbz	r1, 802146a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8021432:	444b      	add	r3, r9
 8021434:	0858      	lsrs	r0, r3, #1
 8021436:	07dc      	lsls	r4, r3, #31
 8021438:	f103 0301 	add.w	r3, r3, #1
 802143c:	5c38      	ldrb	r0, [r7, r0]
 802143e:	bf54      	ite	pl
 8021440:	f000 000f 	andpl.w	r0, r0, #15
 8021444:	1100      	asrmi	r0, r0, #4
 8021446:	07dc      	lsls	r4, r3, #31
 8021448:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802144c:	b2c0      	uxtb	r0, r0
 802144e:	900a      	str	r0, [sp, #40]	@ 0x28
 8021450:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8021454:	f817 e000 	ldrb.w	lr, [r7, r0]
 8021458:	bf54      	ite	pl
 802145a:	f00e 030f 	andpl.w	r3, lr, #15
 802145e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8021462:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021466:	b2db      	uxtb	r3, r3
 8021468:	9311      	str	r3, [sp, #68]	@ 0x44
 802146a:	b292      	uxth	r2, r2
 802146c:	b289      	uxth	r1, r1
 802146e:	0113      	lsls	r3, r2, #4
 8021470:	fb02 f001 	mul.w	r0, r2, r1
 8021474:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021476:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 802147a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 802147e:	1a1b      	subs	r3, r3, r0
 8021480:	b289      	uxth	r1, r1
 8021482:	b29b      	uxth	r3, r3
 8021484:	ebae 0e01 	sub.w	lr, lr, r1
 8021488:	4353      	muls	r3, r2
 802148a:	fa1f fe8e 	uxth.w	lr, lr
 802148e:	fb0c 320e 	mla	r2, ip, lr, r3
 8021492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021494:	fb01 2203 	mla	r2, r1, r3, r2
 8021498:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802149a:	fb00 2203 	mla	r2, r0, r3, r2
 802149e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80214a2:	2a00      	cmp	r2, #0
 80214a4:	d039      	beq.n	802151a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80214a6:	4bc7      	ldr	r3, [pc, #796]	@ (80217c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80214a8:	6819      	ldr	r1, [r3, #0]
 80214aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80214ac:	fa5f fc81 	uxtb.w	ip, r1
 80214b0:	435a      	muls	r2, r3
 80214b2:	1c53      	adds	r3, r2, #1
 80214b4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80214b8:	1212      	asrs	r2, r2, #8
 80214ba:	b290      	uxth	r0, r2
 80214bc:	43d2      	mvns	r2, r2
 80214be:	fb1c fc00 	smulbb	ip, ip, r0
 80214c2:	b2d3      	uxtb	r3, r2
 80214c4:	f898 2000 	ldrb.w	r2, [r8]
 80214c8:	fb02 c203 	mla	r2, r2, r3, ip
 80214cc:	b292      	uxth	r2, r2
 80214ce:	f102 0c01 	add.w	ip, r2, #1
 80214d2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80214d6:	f898 c001 	ldrb.w	ip, [r8, #1]
 80214da:	fb1c fc03 	smulbb	ip, ip, r3
 80214de:	1212      	asrs	r2, r2, #8
 80214e0:	f888 2000 	strb.w	r2, [r8]
 80214e4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80214e8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80214ec:	fb02 c200 	mla	r2, r2, r0, ip
 80214f0:	b292      	uxth	r2, r2
 80214f2:	f102 0c01 	add.w	ip, r2, #1
 80214f6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80214fa:	1212      	asrs	r2, r2, #8
 80214fc:	f888 2001 	strb.w	r2, [r8, #1]
 8021500:	f898 2002 	ldrb.w	r2, [r8, #2]
 8021504:	fb12 f303 	smulbb	r3, r2, r3
 8021508:	fb01 3300 	mla	r3, r1, r0, r3
 802150c:	b29b      	uxth	r3, r3
 802150e:	1c5a      	adds	r2, r3, #1
 8021510:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021514:	121b      	asrs	r3, r3, #8
 8021516:	f888 3002 	strb.w	r3, [r8, #2]
 802151a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802151c:	f108 0803 	add.w	r8, r8, #3
 8021520:	441d      	add	r5, r3
 8021522:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021524:	441e      	add	r6, r3
 8021526:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021528:	3b01      	subs	r3, #1
 802152a:	930d      	str	r3, [sp, #52]	@ 0x34
 802152c:	e742      	b.n	80213b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802152e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8021530:	f10a 0a03 	add.w	sl, sl, #3
 8021534:	441d      	add	r5, r3
 8021536:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021538:	441e      	add	r6, r3
 802153a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802153c:	3b01      	subs	r3, #1
 802153e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021540:	e716      	b.n	8021370 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021542:	d024      	beq.n	802158e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021546:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8021548:	3b01      	subs	r3, #1
 802154a:	fb00 5003 	mla	r0, r0, r3, r5
 802154e:	1400      	asrs	r0, r0, #16
 8021550:	f53f af2b 	bmi.w	80213aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021554:	3901      	subs	r1, #1
 8021556:	4288      	cmp	r0, r1
 8021558:	f6bf af27 	bge.w	80213aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802155c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802155e:	fb01 6303 	mla	r3, r1, r3, r6
 8021562:	141b      	asrs	r3, r3, #16
 8021564:	f53f af21 	bmi.w	80213aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021568:	3a01      	subs	r2, #1
 802156a:	4293      	cmp	r3, r2
 802156c:	f6bf af1d 	bge.w	80213aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021570:	f10a 0e03 	add.w	lr, sl, #3
 8021574:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8021578:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 802157c:	f1b8 0f00 	cmp.w	r8, #0
 8021580:	dc76      	bgt.n	8021670 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8021582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021584:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021588:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802158c:	44a2      	add	sl, r4
 802158e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021590:	2b00      	cmp	r3, #0
 8021592:	f340 812c 	ble.w	80217ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8021596:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802159a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802159c:	ee30 0a04 	vadd.f32	s0, s0, s8
 80215a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80215a4:	eef0 6a62 	vmov.f32	s13, s5
 80215a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80215ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 80215b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215b4:	ee16 5a90 	vmov	r5, s13
 80215b8:	eef0 6a43 	vmov.f32	s13, s6
 80215bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215c0:	ee16 6a90 	vmov	r6, s13
 80215c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80215c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80215cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80215d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80215d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80215d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80215dc:	ee12 2a90 	vmov	r2, s5
 80215e0:	eef0 2a47 	vmov.f32	s5, s14
 80215e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80215e8:	ee13 2a10 	vmov	r2, s6
 80215ec:	9323      	str	r3, [sp, #140]	@ 0x8c
 80215ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80215f0:	eeb0 3a67 	vmov.f32	s6, s15
 80215f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80215f8:	9324      	str	r3, [sp, #144]	@ 0x90
 80215fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80215fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80215fe:	3b01      	subs	r3, #1
 8021600:	930c      	str	r3, [sp, #48]	@ 0x30
 8021602:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021604:	bf08      	it	eq
 8021606:	4613      	moveq	r3, r2
 8021608:	9309      	str	r3, [sp, #36]	@ 0x24
 802160a:	e6a2      	b.n	8021352 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802160c:	2900      	cmp	r1, #0
 802160e:	f43f af2c 	beq.w	802146a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8021612:	eb09 0003 	add.w	r0, r9, r3
 8021616:	0843      	lsrs	r3, r0, #1
 8021618:	07c0      	lsls	r0, r0, #31
 802161a:	5cfb      	ldrb	r3, [r7, r3]
 802161c:	bf54      	ite	pl
 802161e:	f003 030f 	andpl.w	r3, r3, #15
 8021622:	111b      	asrmi	r3, r3, #4
 8021624:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021628:	b2db      	uxtb	r3, r3
 802162a:	930a      	str	r3, [sp, #40]	@ 0x28
 802162c:	e71d      	b.n	802146a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802162e:	f113 0b01 	adds.w	fp, r3, #1
 8021632:	f53f af72 	bmi.w	802151a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021636:	45dc      	cmp	ip, fp
 8021638:	f6ff af6f 	blt.w	802151a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802163c:	f110 0b01 	adds.w	fp, r0, #1
 8021640:	f53f af6b 	bmi.w	802151a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021644:	45de      	cmp	lr, fp
 8021646:	f6ff af68 	blt.w	802151a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802164a:	9302      	str	r3, [sp, #8]
 802164c:	fa0f f38e 	sxth.w	r3, lr
 8021650:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021652:	9301      	str	r3, [sp, #4]
 8021654:	fa0f f38c 	sxth.w	r3, ip
 8021658:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802165c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021660:	9300      	str	r3, [sp, #0]
 8021662:	463a      	mov	r2, r7
 8021664:	464b      	mov	r3, r9
 8021666:	4641      	mov	r1, r8
 8021668:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802166a:	f7ff fd79 	bl	8021160 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802166e:	e754      	b.n	802151a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021670:	142a      	asrs	r2, r5, #16
 8021672:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021676:	1433      	asrs	r3, r6, #16
 8021678:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802167c:	fb09 2303 	mla	r3, r9, r3, r2
 8021680:	085a      	lsrs	r2, r3, #1
 8021682:	07dc      	lsls	r4, r3, #31
 8021684:	5cba      	ldrb	r2, [r7, r2]
 8021686:	bf54      	ite	pl
 8021688:	f002 020f 	andpl.w	r2, r2, #15
 802168c:	1112      	asrmi	r2, r2, #4
 802168e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021692:	b2d2      	uxtb	r2, r2
 8021694:	2900      	cmp	r1, #0
 8021696:	f000 8097 	beq.w	80217c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802169a:	f103 0b01 	add.w	fp, r3, #1
 802169e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 80216a2:	f01b 0f01 	tst.w	fp, #1
 80216a6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80216aa:	bf0c      	ite	eq
 80216ac:	f00c 0c0f 	andeq.w	ip, ip, #15
 80216b0:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80216b4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80216b8:	fa5f f48c 	uxtb.w	r4, ip
 80216bc:	9412      	str	r4, [sp, #72]	@ 0x48
 80216be:	b300      	cbz	r0, 8021702 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80216c0:	444b      	add	r3, r9
 80216c2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80216c6:	07dc      	lsls	r4, r3, #31
 80216c8:	f103 0301 	add.w	r3, r3, #1
 80216cc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80216d0:	bf54      	ite	pl
 80216d2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80216d6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80216da:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80216de:	fa5f f48c 	uxtb.w	r4, ip
 80216e2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80216e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80216e8:	07dc      	lsls	r4, r3, #31
 80216ea:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80216ee:	bf54      	ite	pl
 80216f0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80216f4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80216f8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80216fc:	fa5f f38c 	uxtb.w	r3, ip
 8021700:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021702:	b289      	uxth	r1, r1
 8021704:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021706:	b280      	uxth	r0, r0
 8021708:	fb01 f300 	mul.w	r3, r1, r0
 802170c:	0109      	lsls	r1, r1, #4
 802170e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8021712:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8021716:	1ac9      	subs	r1, r1, r3
 8021718:	b280      	uxth	r0, r0
 802171a:	b289      	uxth	r1, r1
 802171c:	ebac 0c00 	sub.w	ip, ip, r0
 8021720:	4361      	muls	r1, r4
 8021722:	fa1f fc8c 	uxth.w	ip, ip
 8021726:	fb02 120c 	mla	r2, r2, ip, r1
 802172a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802172c:	fb00 2001 	mla	r0, r0, r1, r2
 8021730:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021732:	fb03 0302 	mla	r3, r3, r2, r0
 8021736:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802173a:	2b00      	cmp	r3, #0
 802173c:	d039      	beq.n	80217b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802173e:	4a21      	ldr	r2, [pc, #132]	@ (80217c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8021740:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8021744:	6810      	ldr	r0, [r2, #0]
 8021746:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021748:	fa5f fc80 	uxtb.w	ip, r0
 802174c:	4353      	muls	r3, r2
 802174e:	1c5a      	adds	r2, r3, #1
 8021750:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021754:	121b      	asrs	r3, r3, #8
 8021756:	b29a      	uxth	r2, r3
 8021758:	43db      	mvns	r3, r3
 802175a:	fb1c fc02 	smulbb	ip, ip, r2
 802175e:	b2db      	uxtb	r3, r3
 8021760:	fb01 c103 	mla	r1, r1, r3, ip
 8021764:	b289      	uxth	r1, r1
 8021766:	f101 0c01 	add.w	ip, r1, #1
 802176a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802176e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8021772:	fb1c fc03 	smulbb	ip, ip, r3
 8021776:	1209      	asrs	r1, r1, #8
 8021778:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802177c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8021780:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8021784:	fb01 c102 	mla	r1, r1, r2, ip
 8021788:	b289      	uxth	r1, r1
 802178a:	f101 0c01 	add.w	ip, r1, #1
 802178e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8021792:	1209      	asrs	r1, r1, #8
 8021794:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8021798:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802179c:	fb11 f303 	smulbb	r3, r1, r3
 80217a0:	fb00 3002 	mla	r0, r0, r2, r3
 80217a4:	b280      	uxth	r0, r0
 80217a6:	1c42      	adds	r2, r0, #1
 80217a8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80217ac:	1200      	asrs	r0, r0, #8
 80217ae:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80217b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80217b4:	f10e 0e03 	add.w	lr, lr, #3
 80217b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80217bc:	441d      	add	r5, r3
 80217be:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80217c0:	441e      	add	r6, r3
 80217c2:	e6db      	b.n	802157c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80217c4:	240255dc 	.word	0x240255dc
 80217c8:	2800      	cmp	r0, #0
 80217ca:	d09a      	beq.n	8021702 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80217cc:	444b      	add	r3, r9
 80217ce:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80217d2:	07db      	lsls	r3, r3, #31
 80217d4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80217d8:	bf54      	ite	pl
 80217da:	f00c 0c0f 	andpl.w	ip, ip, #15
 80217de:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80217e2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80217e6:	fa5f f38c 	uxtb.w	r3, ip
 80217ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80217ec:	e789      	b.n	8021702 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80217ee:	b017      	add	sp, #92	@ 0x5c
 80217f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080217f4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80217f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217f8:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 80217fc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8021800:	2d00      	cmp	r5, #0
 8021802:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8021806:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 802180a:	fb04 5e03 	mla	lr, r4, r3, r5
 802180e:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8021812:	f2c0 80b1 	blt.w	8021978 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021816:	45a9      	cmp	r9, r5
 8021818:	f340 80ae 	ble.w	8021978 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802181c:	2c00      	cmp	r4, #0
 802181e:	f2c0 80ab 	blt.w	8021978 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021822:	45a0      	cmp	r8, r4
 8021824:	f340 80a8 	ble.w	8021978 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021828:	ea4f 065e 	mov.w	r6, lr, lsr #1
 802182c:	f01e 0f01 	tst.w	lr, #1
 8021830:	5d97      	ldrb	r7, [r2, r6]
 8021832:	bf0c      	ite	eq
 8021834:	f007 070f 	andeq.w	r7, r7, #15
 8021838:	113f      	asrne	r7, r7, #4
 802183a:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 802183e:	b2ff      	uxtb	r7, r7
 8021840:	f115 0a01 	adds.w	sl, r5, #1
 8021844:	f100 809a 	bmi.w	802197c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021848:	45d1      	cmp	r9, sl
 802184a:	f340 8097 	ble.w	802197c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802184e:	2c00      	cmp	r4, #0
 8021850:	f2c0 8094 	blt.w	802197c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021854:	45a0      	cmp	r8, r4
 8021856:	f340 8091 	ble.w	802197c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802185a:	2800      	cmp	r0, #0
 802185c:	f000 8090 	beq.w	8021980 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8021860:	f10e 0b01 	add.w	fp, lr, #1
 8021864:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8021868:	f01b 0f01 	tst.w	fp, #1
 802186c:	5d96      	ldrb	r6, [r2, r6]
 802186e:	bf0c      	ite	eq
 8021870:	f006 060f 	andeq.w	r6, r6, #15
 8021874:	1136      	asrne	r6, r6, #4
 8021876:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802187a:	b2f6      	uxtb	r6, r6
 802187c:	f1bc 0f00 	cmp.w	ip, #0
 8021880:	f000 8082 	beq.w	8021988 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8021884:	2d00      	cmp	r5, #0
 8021886:	f104 0401 	add.w	r4, r4, #1
 802188a:	db7b      	blt.n	8021984 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802188c:	45a9      	cmp	r9, r5
 802188e:	dd79      	ble.n	8021984 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8021890:	2c00      	cmp	r4, #0
 8021892:	db77      	blt.n	8021984 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8021894:	45a0      	cmp	r8, r4
 8021896:	dd75      	ble.n	8021984 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8021898:	eb03 0b0e 	add.w	fp, r3, lr
 802189c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80218a0:	f01b 0f01 	tst.w	fp, #1
 80218a4:	5d55      	ldrb	r5, [r2, r5]
 80218a6:	bf0c      	ite	eq
 80218a8:	f005 050f 	andeq.w	r5, r5, #15
 80218ac:	112d      	asrne	r5, r5, #4
 80218ae:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80218b2:	b2ed      	uxtb	r5, r5
 80218b4:	f1ba 0f00 	cmp.w	sl, #0
 80218b8:	db69      	blt.n	802198e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80218ba:	45d1      	cmp	r9, sl
 80218bc:	dd67      	ble.n	802198e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80218be:	2c00      	cmp	r4, #0
 80218c0:	db65      	blt.n	802198e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80218c2:	45a0      	cmp	r8, r4
 80218c4:	dd63      	ble.n	802198e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80218c6:	2800      	cmp	r0, #0
 80218c8:	d063      	beq.n	8021992 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 80218ca:	3301      	adds	r3, #1
 80218cc:	449e      	add	lr, r3
 80218ce:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80218d2:	f01e 0f01 	tst.w	lr, #1
 80218d6:	5cd4      	ldrb	r4, [r2, r3]
 80218d8:	bf0c      	ite	eq
 80218da:	f004 040f 	andeq.w	r4, r4, #15
 80218de:	1124      	asrne	r4, r4, #4
 80218e0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80218e4:	b2e3      	uxtb	r3, r4
 80218e6:	b282      	uxth	r2, r0
 80218e8:	fa1f fc8c 	uxth.w	ip, ip
 80218ec:	fb02 f40c 	mul.w	r4, r2, ip
 80218f0:	0112      	lsls	r2, r2, #4
 80218f2:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 80218f6:	fa1f f08c 	uxth.w	r0, ip
 80218fa:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 80218fe:	1b12      	subs	r2, r2, r4
 8021900:	ebac 0c00 	sub.w	ip, ip, r0
 8021904:	b292      	uxth	r2, r2
 8021906:	fa1f fc8c 	uxth.w	ip, ip
 802190a:	4372      	muls	r2, r6
 802190c:	fb07 220c 	mla	r2, r7, ip, r2
 8021910:	fb00 2005 	mla	r0, r0, r5, r2
 8021914:	fb04 0303 	mla	r3, r4, r3, r0
 8021918:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802191c:	b353      	cbz	r3, 8021974 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 802191e:	4a1e      	ldr	r2, [pc, #120]	@ (8021998 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8021920:	7808      	ldrb	r0, [r1, #0]
 8021922:	6814      	ldr	r4, [r2, #0]
 8021924:	b29a      	uxth	r2, r3
 8021926:	43db      	mvns	r3, r3
 8021928:	b2e5      	uxtb	r5, r4
 802192a:	b2db      	uxtb	r3, r3
 802192c:	fb15 f502 	smulbb	r5, r5, r2
 8021930:	fb00 5003 	mla	r0, r0, r3, r5
 8021934:	b280      	uxth	r0, r0
 8021936:	1c45      	adds	r5, r0, #1
 8021938:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802193c:	784d      	ldrb	r5, [r1, #1]
 802193e:	fb15 f503 	smulbb	r5, r5, r3
 8021942:	1200      	asrs	r0, r0, #8
 8021944:	7008      	strb	r0, [r1, #0]
 8021946:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802194a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802194e:	fb00 5002 	mla	r0, r0, r2, r5
 8021952:	b280      	uxth	r0, r0
 8021954:	1c45      	adds	r5, r0, #1
 8021956:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802195a:	1200      	asrs	r0, r0, #8
 802195c:	7048      	strb	r0, [r1, #1]
 802195e:	7888      	ldrb	r0, [r1, #2]
 8021960:	fb10 f303 	smulbb	r3, r0, r3
 8021964:	fb04 3202 	mla	r2, r4, r2, r3
 8021968:	b292      	uxth	r2, r2
 802196a:	1c53      	adds	r3, r2, #1
 802196c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021970:	1212      	asrs	r2, r2, #8
 8021972:	708a      	strb	r2, [r1, #2]
 8021974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021978:	2700      	movs	r7, #0
 802197a:	e761      	b.n	8021840 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 802197c:	2600      	movs	r6, #0
 802197e:	e77d      	b.n	802187c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8021980:	4606      	mov	r6, r0
 8021982:	e77b      	b.n	802187c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8021984:	2500      	movs	r5, #0
 8021986:	e795      	b.n	80218b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8021988:	4663      	mov	r3, ip
 802198a:	4665      	mov	r5, ip
 802198c:	e7ab      	b.n	80218e6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802198e:	2300      	movs	r3, #0
 8021990:	e7a9      	b.n	80218e6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8021992:	4603      	mov	r3, r0
 8021994:	e7a7      	b.n	80218e6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8021996:	bf00      	nop
 8021998:	240255dc 	.word	0x240255dc

0802199c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802199c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219a0:	b093      	sub	sp, #76	@ 0x4c
 80219a2:	461c      	mov	r4, r3
 80219a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80219a6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80219a8:	9011      	str	r0, [sp, #68]	@ 0x44
 80219aa:	9107      	str	r1, [sp, #28]
 80219ac:	6850      	ldr	r0, [r2, #4]
 80219ae:	6812      	ldr	r2, [r2, #0]
 80219b0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80219b4:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 80219b8:	fb00 1303 	mla	r3, r0, r3, r1
 80219bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80219c0:	eb02 0b03 	add.w	fp, r2, r3
 80219c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80219c6:	689b      	ldr	r3, [r3, #8]
 80219c8:	3301      	adds	r3, #1
 80219ca:	f023 0301 	bic.w	r3, r3, #1
 80219ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80219d0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80219d2:	f8d3 8000 	ldr.w	r8, [r3]
 80219d6:	9b07      	ldr	r3, [sp, #28]
 80219d8:	2b00      	cmp	r3, #0
 80219da:	dc03      	bgt.n	80219e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80219dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80219de:	2b00      	cmp	r3, #0
 80219e0:	f340 822b 	ble.w	8021e3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80219e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80219e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80219ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80219ee:	1e48      	subs	r0, r1, #1
 80219f0:	1e57      	subs	r7, r2, #1
 80219f2:	2c00      	cmp	r4, #0
 80219f4:	f340 80d7 	ble.w	8021ba6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80219f8:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80219fc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021a00:	d406      	bmi.n	8021a10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021a02:	4584      	cmp	ip, r0
 8021a04:	da04      	bge.n	8021a10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021a06:	2b00      	cmp	r3, #0
 8021a08:	db02      	blt.n	8021a10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021a0a:	42bb      	cmp	r3, r7
 8021a0c:	f2c0 80cc 	blt.w	8021ba8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8021a10:	f11c 0c01 	adds.w	ip, ip, #1
 8021a14:	f100 80bf 	bmi.w	8021b96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021a18:	4561      	cmp	r1, ip
 8021a1a:	f2c0 80bc 	blt.w	8021b96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021a1e:	3301      	adds	r3, #1
 8021a20:	f100 80b9 	bmi.w	8021b96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021a24:	429a      	cmp	r2, r3
 8021a26:	f2c0 80b6 	blt.w	8021b96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021a2a:	46a2      	mov	sl, r4
 8021a2c:	465f      	mov	r7, fp
 8021a2e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8021a32:	f1ba 0f00 	cmp.w	sl, #0
 8021a36:	f340 80d4 	ble.w	8021be2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8021a3a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8021a3e:	1430      	asrs	r0, r6, #16
 8021a40:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021a44:	9308      	str	r3, [sp, #32]
 8021a46:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021a48:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8021a4c:	142b      	asrs	r3, r5, #16
 8021a4e:	f100 8124 	bmi.w	8021c9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021a52:	f10c 32ff 	add.w	r2, ip, #4294967295
 8021a56:	4293      	cmp	r3, r2
 8021a58:	f280 811f 	bge.w	8021c9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021a5c:	2800      	cmp	r0, #0
 8021a5e:	f2c0 811c 	blt.w	8021c9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021a62:	f10e 32ff 	add.w	r2, lr, #4294967295
 8021a66:	4290      	cmp	r0, r2
 8021a68:	f280 8117 	bge.w	8021c9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021a6c:	fb00 3309 	mla	r3, r0, r9, r3
 8021a70:	0858      	lsrs	r0, r3, #1
 8021a72:	07da      	lsls	r2, r3, #31
 8021a74:	9a08      	ldr	r2, [sp, #32]
 8021a76:	f818 c000 	ldrb.w	ip, [r8, r0]
 8021a7a:	bf54      	ite	pl
 8021a7c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021a80:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021a84:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021a88:	fa5f fc8c 	uxtb.w	ip, ip
 8021a8c:	2a00      	cmp	r2, #0
 8021a8e:	f000 80ed 	beq.w	8021c6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8021a92:	1c58      	adds	r0, r3, #1
 8021a94:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8021a98:	07c0      	lsls	r0, r0, #31
 8021a9a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8021a9e:	bf54      	ite	pl
 8021aa0:	f00e 0e0f 	andpl.w	lr, lr, #15
 8021aa4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8021aa8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8021aac:	fa5f fe8e 	uxtb.w	lr, lr
 8021ab0:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8021ab4:	b1c9      	cbz	r1, 8021aea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8021ab6:	444b      	add	r3, r9
 8021ab8:	0858      	lsrs	r0, r3, #1
 8021aba:	07da      	lsls	r2, r3, #31
 8021abc:	f818 0000 	ldrb.w	r0, [r8, r0]
 8021ac0:	bf54      	ite	pl
 8021ac2:	f000 000f 	andpl.w	r0, r0, #15
 8021ac6:	1100      	asrmi	r0, r0, #4
 8021ac8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021acc:	b2c0      	uxtb	r0, r0
 8021ace:	900a      	str	r0, [sp, #40]	@ 0x28
 8021ad0:	1c58      	adds	r0, r3, #1
 8021ad2:	0843      	lsrs	r3, r0, #1
 8021ad4:	07c2      	lsls	r2, r0, #31
 8021ad6:	f818 3003 	ldrb.w	r3, [r8, r3]
 8021ada:	bf54      	ite	pl
 8021adc:	f003 030f 	andpl.w	r3, r3, #15
 8021ae0:	111b      	asrmi	r3, r3, #4
 8021ae2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021ae6:	b2db      	uxtb	r3, r3
 8021ae8:	930e      	str	r3, [sp, #56]	@ 0x38
 8021aea:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021aee:	b289      	uxth	r1, r1
 8021af0:	fb02 f301 	mul.w	r3, r2, r1
 8021af4:	0112      	lsls	r2, r2, #4
 8021af6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8021afa:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8021afe:	1ad2      	subs	r2, r2, r3
 8021b00:	b289      	uxth	r1, r1
 8021b02:	b292      	uxth	r2, r2
 8021b04:	1a40      	subs	r0, r0, r1
 8021b06:	fa1f fe80 	uxth.w	lr, r0
 8021b0a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021b0c:	4342      	muls	r2, r0
 8021b0e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8021b12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021b14:	fb01 c102 	mla	r1, r1, r2, ip
 8021b18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021b1a:	fb03 1302 	mla	r3, r3, r2, r1
 8021b1e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021b22:	b383      	cbz	r3, 8021b86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021b24:	4ac6      	ldr	r2, [pc, #792]	@ (8021e40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8021b26:	2bff      	cmp	r3, #255	@ 0xff
 8021b28:	6812      	ldr	r2, [r2, #0]
 8021b2a:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8021b2e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8021b32:	b2d2      	uxtb	r2, r2
 8021b34:	f000 80ac 	beq.w	8021c90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021b38:	b299      	uxth	r1, r3
 8021b3a:	43db      	mvns	r3, r3
 8021b3c:	f897 c000 	ldrb.w	ip, [r7]
 8021b40:	fb12 f201 	smulbb	r2, r2, r1
 8021b44:	b2db      	uxtb	r3, r3
 8021b46:	fb10 f001 	smulbb	r0, r0, r1
 8021b4a:	fb0c 2203 	mla	r2, ip, r3, r2
 8021b4e:	fb1e f101 	smulbb	r1, lr, r1
 8021b52:	b292      	uxth	r2, r2
 8021b54:	f102 0c01 	add.w	ip, r2, #1
 8021b58:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8021b5c:	1212      	asrs	r2, r2, #8
 8021b5e:	703a      	strb	r2, [r7, #0]
 8021b60:	787a      	ldrb	r2, [r7, #1]
 8021b62:	fb02 0003 	mla	r0, r2, r3, r0
 8021b66:	b280      	uxth	r0, r0
 8021b68:	1c42      	adds	r2, r0, #1
 8021b6a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021b6e:	78ba      	ldrb	r2, [r7, #2]
 8021b70:	fb02 1303 	mla	r3, r2, r3, r1
 8021b74:	1200      	asrs	r0, r0, #8
 8021b76:	b29b      	uxth	r3, r3
 8021b78:	7078      	strb	r0, [r7, #1]
 8021b7a:	f103 0e01 	add.w	lr, r3, #1
 8021b7e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8021b82:	121b      	asrs	r3, r3, #8
 8021b84:	70bb      	strb	r3, [r7, #2]
 8021b86:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021b88:	3703      	adds	r7, #3
 8021b8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021b8e:	441d      	add	r5, r3
 8021b90:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021b92:	441e      	add	r6, r3
 8021b94:	e74d      	b.n	8021a32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021b96:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021b98:	3c01      	subs	r4, #1
 8021b9a:	f10b 0b03 	add.w	fp, fp, #3
 8021b9e:	441d      	add	r5, r3
 8021ba0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021ba2:	441e      	add	r6, r3
 8021ba4:	e725      	b.n	80219f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8021ba6:	d021      	beq.n	8021bec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8021ba8:	1e63      	subs	r3, r4, #1
 8021baa:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8021bac:	fb00 5003 	mla	r0, r0, r3, r5
 8021bb0:	1400      	asrs	r0, r0, #16
 8021bb2:	f53f af3a 	bmi.w	8021a2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021bb6:	3901      	subs	r1, #1
 8021bb8:	4288      	cmp	r0, r1
 8021bba:	f6bf af36 	bge.w	8021a2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021bbe:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8021bc0:	fb01 6303 	mla	r3, r1, r3, r6
 8021bc4:	141b      	asrs	r3, r3, #16
 8021bc6:	f53f af30 	bmi.w	8021a2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021bca:	3a01      	subs	r2, #1
 8021bcc:	4293      	cmp	r3, r2
 8021bce:	f6bf af2c 	bge.w	8021a2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021bd2:	f10b 0c03 	add.w	ip, fp, #3
 8021bd6:	46a6      	mov	lr, r4
 8021bd8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8021bdc:	f1be 0f00 	cmp.w	lr, #0
 8021be0:	dc79      	bgt.n	8021cd6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8021be2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8021be6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021bea:	44a3      	add	fp, r4
 8021bec:	9b07      	ldr	r3, [sp, #28]
 8021bee:	2b00      	cmp	r3, #0
 8021bf0:	f340 8123 	ble.w	8021e3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021bf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021bf8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021bfa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021bfe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021c02:	eef0 6a62 	vmov.f32	s13, s5
 8021c06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021c0a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021c0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021c12:	ee16 5a90 	vmov	r5, s13
 8021c16:	eef0 6a43 	vmov.f32	s13, s6
 8021c1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021c1e:	ee16 6a90 	vmov	r6, s13
 8021c22:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021c26:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021c2a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021c2e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021c32:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021c36:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021c3a:	ee12 2a90 	vmov	r2, s5
 8021c3e:	eef0 2a47 	vmov.f32	s5, s14
 8021c42:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c46:	ee13 2a10 	vmov	r2, s6
 8021c4a:	931f      	str	r3, [sp, #124]	@ 0x7c
 8021c4c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021c4e:	eeb0 3a67 	vmov.f32	s6, s15
 8021c52:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c56:	9320      	str	r3, [sp, #128]	@ 0x80
 8021c58:	9b07      	ldr	r3, [sp, #28]
 8021c5a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021c5c:	3b01      	subs	r3, #1
 8021c5e:	9307      	str	r3, [sp, #28]
 8021c60:	bf08      	it	eq
 8021c62:	4614      	moveq	r4, r2
 8021c64:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021c66:	bf18      	it	ne
 8021c68:	461c      	movne	r4, r3
 8021c6a:	e6b4      	b.n	80219d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021c6c:	2900      	cmp	r1, #0
 8021c6e:	f43f af3c 	beq.w	8021aea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8021c72:	eb09 0003 	add.w	r0, r9, r3
 8021c76:	0843      	lsrs	r3, r0, #1
 8021c78:	07c0      	lsls	r0, r0, #31
 8021c7a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8021c7e:	bf54      	ite	pl
 8021c80:	f003 030f 	andpl.w	r3, r3, #15
 8021c84:	111b      	asrmi	r3, r3, #4
 8021c86:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021c8a:	b2db      	uxtb	r3, r3
 8021c8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8021c8e:	e72c      	b.n	8021aea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8021c90:	703a      	strb	r2, [r7, #0]
 8021c92:	7078      	strb	r0, [r7, #1]
 8021c94:	f887 e002 	strb.w	lr, [r7, #2]
 8021c98:	e775      	b.n	8021b86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021c9a:	1c5a      	adds	r2, r3, #1
 8021c9c:	f53f af73 	bmi.w	8021b86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021ca0:	4594      	cmp	ip, r2
 8021ca2:	f6ff af70 	blt.w	8021b86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021ca6:	1c42      	adds	r2, r0, #1
 8021ca8:	f53f af6d 	bmi.w	8021b86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021cac:	4596      	cmp	lr, r2
 8021cae:	f6ff af6a 	blt.w	8021b86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021cb2:	9302      	str	r3, [sp, #8]
 8021cb4:	fa0f f38e 	sxth.w	r3, lr
 8021cb8:	9a08      	ldr	r2, [sp, #32]
 8021cba:	9301      	str	r3, [sp, #4]
 8021cbc:	fa0f f38c 	sxth.w	r3, ip
 8021cc0:	9105      	str	r1, [sp, #20]
 8021cc2:	4639      	mov	r1, r7
 8021cc4:	9300      	str	r3, [sp, #0]
 8021cc6:	464b      	mov	r3, r9
 8021cc8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8021ccc:	4642      	mov	r2, r8
 8021cce:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8021cd0:	f7ff fd90 	bl	80217f4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8021cd4:	e757      	b.n	8021b86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021cd6:	142a      	asrs	r2, r5, #16
 8021cd8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021cdc:	1433      	asrs	r3, r6, #16
 8021cde:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8021ce2:	fb09 2303 	mla	r3, r9, r3, r2
 8021ce6:	085a      	lsrs	r2, r3, #1
 8021ce8:	07d9      	lsls	r1, r3, #31
 8021cea:	f818 2002 	ldrb.w	r2, [r8, r2]
 8021cee:	bf54      	ite	pl
 8021cf0:	f002 020f 	andpl.w	r2, r2, #15
 8021cf4:	1112      	asrmi	r2, r2, #4
 8021cf6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021cfa:	b2d2      	uxtb	r2, r2
 8021cfc:	2800      	cmp	r0, #0
 8021cfe:	f000 8085 	beq.w	8021e0c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8021d02:	f103 0a01 	add.w	sl, r3, #1
 8021d06:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8021d0a:	f01a 0f01 	tst.w	sl, #1
 8021d0e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021d12:	bf0c      	ite	eq
 8021d14:	f001 010f 	andeq.w	r1, r1, #15
 8021d18:	1109      	asrne	r1, r1, #4
 8021d1a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021d1e:	b2c9      	uxtb	r1, r1
 8021d20:	910f      	str	r1, [sp, #60]	@ 0x3c
 8021d22:	b1df      	cbz	r7, 8021d5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021d24:	444b      	add	r3, r9
 8021d26:	0859      	lsrs	r1, r3, #1
 8021d28:	f013 0f01 	tst.w	r3, #1
 8021d2c:	f103 0301 	add.w	r3, r3, #1
 8021d30:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021d34:	bf0c      	ite	eq
 8021d36:	f001 010f 	andeq.w	r1, r1, #15
 8021d3a:	1109      	asrne	r1, r1, #4
 8021d3c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021d40:	b2c9      	uxtb	r1, r1
 8021d42:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021d44:	0859      	lsrs	r1, r3, #1
 8021d46:	07db      	lsls	r3, r3, #31
 8021d48:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021d4c:	bf54      	ite	pl
 8021d4e:	f001 010f 	andpl.w	r1, r1, #15
 8021d52:	1109      	asrmi	r1, r1, #4
 8021d54:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021d58:	b2c9      	uxtb	r1, r1
 8021d5a:	9110      	str	r1, [sp, #64]	@ 0x40
 8021d5c:	b280      	uxth	r0, r0
 8021d5e:	b2bf      	uxth	r7, r7
 8021d60:	fb00 f307 	mul.w	r3, r0, r7
 8021d64:	0100      	lsls	r0, r0, #4
 8021d66:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8021d6a:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8021d6e:	1ac0      	subs	r0, r0, r3
 8021d70:	b2bf      	uxth	r7, r7
 8021d72:	b280      	uxth	r0, r0
 8021d74:	1bc9      	subs	r1, r1, r7
 8021d76:	fa1f fa81 	uxth.w	sl, r1
 8021d7a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8021d7c:	4348      	muls	r0, r1
 8021d7e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021d80:	fb02 020a 	mla	r2, r2, sl, r0
 8021d84:	fb07 2701 	mla	r7, r7, r1, r2
 8021d88:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021d8a:	fb03 7302 	mla	r3, r3, r2, r7
 8021d8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021d92:	b393      	cbz	r3, 8021dfa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8021d94:	4a2a      	ldr	r2, [pc, #168]	@ (8021e40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8021d96:	2bff      	cmp	r3, #255	@ 0xff
 8021d98:	6811      	ldr	r1, [r2, #0]
 8021d9a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8021d9e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8021da2:	b2c9      	uxtb	r1, r1
 8021da4:	d042      	beq.n	8021e2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8021da6:	b298      	uxth	r0, r3
 8021da8:	43db      	mvns	r3, r3
 8021daa:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8021dae:	fb11 f100 	smulbb	r1, r1, r0
 8021db2:	b2db      	uxtb	r3, r3
 8021db4:	fb17 f700 	smulbb	r7, r7, r0
 8021db8:	fb02 1103 	mla	r1, r2, r3, r1
 8021dbc:	fb1a f000 	smulbb	r0, sl, r0
 8021dc0:	b289      	uxth	r1, r1
 8021dc2:	1c4a      	adds	r2, r1, #1
 8021dc4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021dc8:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8021dcc:	fb02 7703 	mla	r7, r2, r3, r7
 8021dd0:	1209      	asrs	r1, r1, #8
 8021dd2:	b2bf      	uxth	r7, r7
 8021dd4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8021dd8:	1c7a      	adds	r2, r7, #1
 8021dda:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8021dde:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8021de2:	fb02 0303 	mla	r3, r2, r3, r0
 8021de6:	123f      	asrs	r7, r7, #8
 8021de8:	b29b      	uxth	r3, r3
 8021dea:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8021dee:	1c5a      	adds	r2, r3, #1
 8021df0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021df4:	121b      	asrs	r3, r3, #8
 8021df6:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8021dfa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021dfc:	f10c 0c03 	add.w	ip, ip, #3
 8021e00:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021e04:	441d      	add	r5, r3
 8021e06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021e08:	441e      	add	r6, r3
 8021e0a:	e6e7      	b.n	8021bdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8021e0c:	2f00      	cmp	r7, #0
 8021e0e:	d0a5      	beq.n	8021d5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021e10:	444b      	add	r3, r9
 8021e12:	0859      	lsrs	r1, r3, #1
 8021e14:	07db      	lsls	r3, r3, #31
 8021e16:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021e1a:	bf54      	ite	pl
 8021e1c:	f001 010f 	andpl.w	r1, r1, #15
 8021e20:	1109      	asrmi	r1, r1, #4
 8021e22:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021e26:	b2c9      	uxtb	r1, r1
 8021e28:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021e2a:	e797      	b.n	8021d5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021e2c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8021e30:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8021e34:	f80c ac01 	strb.w	sl, [ip, #-1]
 8021e38:	e7df      	b.n	8021dfa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8021e3a:	b013      	add	sp, #76	@ 0x4c
 8021e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e40:	240255dc 	.word	0x240255dc

08021e44 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8021e44:	b530      	push	{r4, r5, lr}
 8021e46:	b29d      	uxth	r5, r3
 8021e48:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8021e4c:	780c      	ldrb	r4, [r1, #0]
 8021e4e:	b298      	uxth	r0, r3
 8021e50:	7813      	ldrb	r3, [r2, #0]
 8021e52:	fb14 f405 	smulbb	r4, r4, r5
 8021e56:	fb13 f300 	smulbb	r3, r3, r0
 8021e5a:	441c      	add	r4, r3
 8021e5c:	b2a4      	uxth	r4, r4
 8021e5e:	1c63      	adds	r3, r4, #1
 8021e60:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021e64:	7853      	ldrb	r3, [r2, #1]
 8021e66:	fb13 f300 	smulbb	r3, r3, r0
 8021e6a:	1224      	asrs	r4, r4, #8
 8021e6c:	7014      	strb	r4, [r2, #0]
 8021e6e:	784c      	ldrb	r4, [r1, #1]
 8021e70:	fb14 f405 	smulbb	r4, r4, r5
 8021e74:	441c      	add	r4, r3
 8021e76:	b2a4      	uxth	r4, r4
 8021e78:	1c63      	adds	r3, r4, #1
 8021e7a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021e7e:	1224      	asrs	r4, r4, #8
 8021e80:	7054      	strb	r4, [r2, #1]
 8021e82:	788b      	ldrb	r3, [r1, #2]
 8021e84:	7891      	ldrb	r1, [r2, #2]
 8021e86:	fb13 f305 	smulbb	r3, r3, r5
 8021e8a:	fb11 f000 	smulbb	r0, r1, r0
 8021e8e:	4403      	add	r3, r0
 8021e90:	b29b      	uxth	r3, r3
 8021e92:	1c59      	adds	r1, r3, #1
 8021e94:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021e98:	121b      	asrs	r3, r3, #8
 8021e9a:	7093      	strb	r3, [r2, #2]
 8021e9c:	bd30      	pop	{r4, r5, pc}
	...

08021ea0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ea4:	461c      	mov	r4, r3
 8021ea6:	b08b      	sub	sp, #44	@ 0x2c
 8021ea8:	460e      	mov	r6, r1
 8021eaa:	4615      	mov	r5, r2
 8021eac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021eae:	4682      	mov	sl, r0
 8021eb0:	6861      	ldr	r1, [r4, #4]
 8021eb2:	aa06      	add	r2, sp, #24
 8021eb4:	6820      	ldr	r0, [r4, #0]
 8021eb6:	2702      	movs	r7, #2
 8021eb8:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 8021ebc:	3504      	adds	r5, #4
 8021ebe:	c203      	stmia	r2!, {r0, r1}
 8021ec0:	6818      	ldr	r0, [r3, #0]
 8021ec2:	aa08      	add	r2, sp, #32
 8021ec4:	6859      	ldr	r1, [r3, #4]
 8021ec6:	c203      	stmia	r2!, {r0, r1}
 8021ec8:	a806      	add	r0, sp, #24
 8021eca:	f7f2 fb01 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021ece:	4621      	mov	r1, r4
 8021ed0:	a808      	add	r0, sp, #32
 8021ed2:	f7f2 fb25 	bl	8014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021ed6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021eda:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8021ede:	f002 0301 	and.w	r3, r2, #1
 8021ee2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8021ee6:	9302      	str	r3, [sp, #8]
 8021ee8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021eec:	f003 0101 	and.w	r1, r3, #1
 8021ef0:	9101      	str	r1, [sp, #4]
 8021ef2:	9801      	ldr	r0, [sp, #4]
 8021ef4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8021ef8:	4403      	add	r3, r0
 8021efa:	fb01 2303 	mla	r3, r1, r3, r2
 8021efe:	fb93 f3f7 	sdiv	r3, r3, r7
 8021f02:	441e      	add	r6, r3
 8021f04:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8021f08:	441a      	add	r2, r3
 8021f0a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8021f0e:	4419      	add	r1, r3
 8021f10:	4b70      	ldr	r3, [pc, #448]	@ (80220d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8021f12:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021f16:	6818      	ldr	r0, [r3, #0]
 8021f18:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8021f1c:	6803      	ldr	r3, [r0, #0]
 8021f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021f20:	4798      	blx	r3
 8021f22:	4a6d      	ldr	r2, [pc, #436]	@ (80220d8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8021f24:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8021f28:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021f2c:	8813      	ldrh	r3, [r2, #0]
 8021f2e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8021f32:	fb03 1404 	mla	r4, r3, r4, r1
 8021f36:	4611      	mov	r1, r2
 8021f38:	fb0b f303 	mul.w	r3, fp, r3
 8021f3c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021f40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021f44:	4404      	add	r4, r0
 8021f46:	4423      	add	r3, r4
 8021f48:	d073      	beq.n	8022032 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8021f4a:	9705      	str	r7, [sp, #20]
 8021f4c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8021f50:	9b03      	ldr	r3, [sp, #12]
 8021f52:	429c      	cmp	r4, r3
 8021f54:	f080 80b5 	bcs.w	80220c2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8021f58:	9b02      	ldr	r3, [sp, #8]
 8021f5a:	b35b      	cbz	r3, 8021fb4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8021f5c:	7831      	ldrb	r1, [r6, #0]
 8021f5e:	4622      	mov	r2, r4
 8021f60:	1c77      	adds	r7, r6, #1
 8021f62:	3403      	adds	r4, #3
 8021f64:	f001 010f 	and.w	r1, r1, #15
 8021f68:	f108 3bff 	add.w	fp, r8, #4294967295
 8021f6c:	464b      	mov	r3, r9
 8021f6e:	4650      	mov	r0, sl
 8021f70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021f74:	4429      	add	r1, r5
 8021f76:	f7ff ff65 	bl	8021e44 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8021f7a:	f1bb 0f01 	cmp.w	fp, #1
 8021f7e:	dd1c      	ble.n	8021fba <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8021f80:	7839      	ldrb	r1, [r7, #0]
 8021f82:	4622      	mov	r2, r4
 8021f84:	464b      	mov	r3, r9
 8021f86:	4650      	mov	r0, sl
 8021f88:	0909      	lsrs	r1, r1, #4
 8021f8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8021f8e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021f92:	4429      	add	r1, r5
 8021f94:	f7ff ff56 	bl	8021e44 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8021f98:	f817 1b01 	ldrb.w	r1, [r7], #1
 8021f9c:	1ce2      	adds	r2, r4, #3
 8021f9e:	464b      	mov	r3, r9
 8021fa0:	f001 010f 	and.w	r1, r1, #15
 8021fa4:	4650      	mov	r0, sl
 8021fa6:	3406      	adds	r4, #6
 8021fa8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021fac:	4429      	add	r1, r5
 8021fae:	f7ff ff49 	bl	8021e44 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8021fb2:	e7e2      	b.n	8021f7a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8021fb4:	4637      	mov	r7, r6
 8021fb6:	46c3      	mov	fp, r8
 8021fb8:	e7df      	b.n	8021f7a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8021fba:	d10a      	bne.n	8021fd2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8021fbc:	7839      	ldrb	r1, [r7, #0]
 8021fbe:	4622      	mov	r2, r4
 8021fc0:	3403      	adds	r4, #3
 8021fc2:	464b      	mov	r3, r9
 8021fc4:	0909      	lsrs	r1, r1, #4
 8021fc6:	4650      	mov	r0, sl
 8021fc8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021fcc:	4429      	add	r1, r5
 8021fce:	f7ff ff39 	bl	8021e44 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8021fd2:	9b04      	ldr	r3, [sp, #16]
 8021fd4:	9a01      	ldr	r2, [sp, #4]
 8021fd6:	881b      	ldrh	r3, [r3, #0]
 8021fd8:	eba3 0308 	sub.w	r3, r3, r8
 8021fdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021fe0:	441c      	add	r4, r3
 8021fe2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021fe6:	4413      	add	r3, r2
 8021fe8:	9a05      	ldr	r2, [sp, #20]
 8021fea:	fb93 f3f2 	sdiv	r3, r3, r2
 8021fee:	441e      	add	r6, r3
 8021ff0:	e7ae      	b.n	8021f50 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8021ff2:	4632      	mov	r2, r6
 8021ff4:	46c4      	mov	ip, r8
 8021ff6:	e037      	b.n	8022068 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8021ff8:	d10e      	bne.n	8022018 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 8021ffa:	7812      	ldrb	r2, [r2, #0]
 8021ffc:	3003      	adds	r0, #3
 8021ffe:	0912      	lsrs	r2, r2, #4
 8022000:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022004:	18ac      	adds	r4, r5, r2
 8022006:	5caa      	ldrb	r2, [r5, r2]
 8022008:	f800 2c03 	strb.w	r2, [r0, #-3]
 802200c:	7862      	ldrb	r2, [r4, #1]
 802200e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8022012:	78a2      	ldrb	r2, [r4, #2]
 8022014:	f800 2c01 	strb.w	r2, [r0, #-1]
 8022018:	880c      	ldrh	r4, [r1, #0]
 802201a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802201e:	eba4 0408 	sub.w	r4, r4, r8
 8022022:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022026:	4404      	add	r4, r0
 8022028:	9801      	ldr	r0, [sp, #4]
 802202a:	4402      	add	r2, r0
 802202c:	fb92 f2f7 	sdiv	r2, r2, r7
 8022030:	4416      	add	r6, r2
 8022032:	429c      	cmp	r4, r3
 8022034:	d245      	bcs.n	80220c2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8022036:	9a02      	ldr	r2, [sp, #8]
 8022038:	2a00      	cmp	r2, #0
 802203a:	d0da      	beq.n	8021ff2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 802203c:	7830      	ldrb	r0, [r6, #0]
 802203e:	1c72      	adds	r2, r6, #1
 8022040:	3403      	adds	r4, #3
 8022042:	f000 000f 	and.w	r0, r0, #15
 8022046:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802204a:	eb05 0c00 	add.w	ip, r5, r0
 802204e:	5c28      	ldrb	r0, [r5, r0]
 8022050:	f804 0c03 	strb.w	r0, [r4, #-3]
 8022054:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8022058:	f804 0c02 	strb.w	r0, [r4, #-2]
 802205c:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8022060:	f108 3cff 	add.w	ip, r8, #4294967295
 8022064:	f804 0c01 	strb.w	r0, [r4, #-1]
 8022068:	f1bc 0f01 	cmp.w	ip, #1
 802206c:	4620      	mov	r0, r4
 802206e:	f104 0406 	add.w	r4, r4, #6
 8022072:	ddc1      	ble.n	8021ff8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8022074:	7810      	ldrb	r0, [r2, #0]
 8022076:	f1ac 0c02 	sub.w	ip, ip, #2
 802207a:	0900      	lsrs	r0, r0, #4
 802207c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022080:	eb05 0e00 	add.w	lr, r5, r0
 8022084:	5c28      	ldrb	r0, [r5, r0]
 8022086:	f804 0c06 	strb.w	r0, [r4, #-6]
 802208a:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802208e:	f804 0c05 	strb.w	r0, [r4, #-5]
 8022092:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8022096:	f804 0c04 	strb.w	r0, [r4, #-4]
 802209a:	f812 0b01 	ldrb.w	r0, [r2], #1
 802209e:	f000 000f 	and.w	r0, r0, #15
 80220a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80220a6:	eb05 0e00 	add.w	lr, r5, r0
 80220aa:	5c28      	ldrb	r0, [r5, r0]
 80220ac:	f804 0c03 	strb.w	r0, [r4, #-3]
 80220b0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80220b4:	f804 0c02 	strb.w	r0, [r4, #-2]
 80220b8:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80220bc:	f804 0c01 	strb.w	r0, [r4, #-1]
 80220c0:	e7d2      	b.n	8022068 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80220c2:	4b04      	ldr	r3, [pc, #16]	@ (80220d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 80220c4:	6818      	ldr	r0, [r3, #0]
 80220c6:	6803      	ldr	r3, [r0, #0]
 80220c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80220ca:	4798      	blx	r3
 80220cc:	b00b      	add	sp, #44	@ 0x2c
 80220ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220d2:	bf00      	nop
 80220d4:	240255cc 	.word	0x240255cc
 80220d8:	240255c6 	.word	0x240255c6

080220dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 80220dc:	b530      	push	{r4, r5, lr}
 80220de:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80220e2:	780d      	ldrb	r5, [r1, #0]
 80220e4:	28ff      	cmp	r0, #255	@ 0xff
 80220e6:	d107      	bne.n	80220f8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 80220e8:	2bff      	cmp	r3, #255	@ 0xff
 80220ea:	d105      	bne.n	80220f8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 80220ec:	7015      	strb	r5, [r2, #0]
 80220ee:	784b      	ldrb	r3, [r1, #1]
 80220f0:	7053      	strb	r3, [r2, #1]
 80220f2:	788b      	ldrb	r3, [r1, #2]
 80220f4:	7093      	strb	r3, [r2, #2]
 80220f6:	bd30      	pop	{r4, r5, pc}
 80220f8:	fb10 f003 	smulbb	r0, r0, r3
 80220fc:	b283      	uxth	r3, r0
 80220fe:	1c58      	adds	r0, r3, #1
 8022100:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022104:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022108:	b284      	uxth	r4, r0
 802210a:	43c0      	mvns	r0, r0
 802210c:	fb15 f504 	smulbb	r5, r5, r4
 8022110:	b2c3      	uxtb	r3, r0
 8022112:	7810      	ldrb	r0, [r2, #0]
 8022114:	fb00 5003 	mla	r0, r0, r3, r5
 8022118:	b280      	uxth	r0, r0
 802211a:	1c45      	adds	r5, r0, #1
 802211c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022120:	7855      	ldrb	r5, [r2, #1]
 8022122:	fb15 f503 	smulbb	r5, r5, r3
 8022126:	1200      	asrs	r0, r0, #8
 8022128:	7010      	strb	r0, [r2, #0]
 802212a:	7848      	ldrb	r0, [r1, #1]
 802212c:	fb00 5004 	mla	r0, r0, r4, r5
 8022130:	b280      	uxth	r0, r0
 8022132:	1c45      	adds	r5, r0, #1
 8022134:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022138:	1200      	asrs	r0, r0, #8
 802213a:	7050      	strb	r0, [r2, #1]
 802213c:	7888      	ldrb	r0, [r1, #2]
 802213e:	7891      	ldrb	r1, [r2, #2]
 8022140:	fb11 f303 	smulbb	r3, r1, r3
 8022144:	fb00 3304 	mla	r3, r0, r4, r3
 8022148:	b29b      	uxth	r3, r3
 802214a:	1c59      	adds	r1, r3, #1
 802214c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022150:	121b      	asrs	r3, r3, #8
 8022152:	e7cf      	b.n	80220f4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08022154 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8022154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022158:	461d      	mov	r5, r3
 802215a:	b08f      	sub	sp, #60	@ 0x3c
 802215c:	460c      	mov	r4, r1
 802215e:	4616      	mov	r6, r2
 8022160:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022162:	4680      	mov	r8, r0
 8022164:	6869      	ldr	r1, [r5, #4]
 8022166:	aa0a      	add	r2, sp, #40	@ 0x28
 8022168:	6828      	ldr	r0, [r5, #0]
 802216a:	3604      	adds	r6, #4
 802216c:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8022170:	4f57      	ldr	r7, [pc, #348]	@ (80222d0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8022172:	c203      	stmia	r2!, {r0, r1}
 8022174:	6818      	ldr	r0, [r3, #0]
 8022176:	aa0c      	add	r2, sp, #48	@ 0x30
 8022178:	6859      	ldr	r1, [r3, #4]
 802217a:	c203      	stmia	r2!, {r0, r1}
 802217c:	a80a      	add	r0, sp, #40	@ 0x28
 802217e:	f7f2 f9a7 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022182:	4629      	mov	r1, r5
 8022184:	a80c      	add	r0, sp, #48	@ 0x30
 8022186:	2502      	movs	r5, #2
 8022188:	f7f2 f9ca 	bl	8014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802218c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8022190:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8022194:	f002 0301 	and.w	r3, r2, #1
 8022198:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 802219c:	9304      	str	r3, [sp, #16]
 802219e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80221a2:	f003 0101 	and.w	r1, r3, #1
 80221a6:	9103      	str	r1, [sp, #12]
 80221a8:	9803      	ldr	r0, [sp, #12]
 80221aa:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80221ae:	4403      	add	r3, r0
 80221b0:	6838      	ldr	r0, [r7, #0]
 80221b2:	fb01 2303 	mla	r3, r1, r3, r2
 80221b6:	fb93 f3f5 	sdiv	r3, r3, r5
 80221ba:	18e5      	adds	r5, r4, r3
 80221bc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80221c0:	441a      	add	r2, r3
 80221c2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80221c6:	4419      	add	r1, r3
 80221c8:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80221cc:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80221d0:	6803      	ldr	r3, [r0, #0]
 80221d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80221d4:	4798      	blx	r3
 80221d6:	4a3f      	ldr	r2, [pc, #252]	@ (80222d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 80221d8:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 80221dc:	8813      	ldrh	r3, [r2, #0]
 80221de:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80221e2:	9207      	str	r2, [sp, #28]
 80221e4:	fb03 1404 	mla	r4, r3, r4, r1
 80221e8:	fb0a f303 	mul.w	r3, sl, r3
 80221ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80221f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80221f4:	4404      	add	r4, r0
 80221f6:	18e3      	adds	r3, r4, r3
 80221f8:	e9cd 3705 	strd	r3, r7, [sp, #20]
 80221fc:	9b05      	ldr	r3, [sp, #20]
 80221fe:	429c      	cmp	r4, r3
 8022200:	d25d      	bcs.n	80222be <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8022202:	9b04      	ldr	r3, [sp, #16]
 8022204:	2b00      	cmp	r3, #0
 8022206:	d037      	beq.n	8022278 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8022208:	782b      	ldrb	r3, [r5, #0]
 802220a:	1c6f      	adds	r7, r5, #1
 802220c:	f003 030f 	and.w	r3, r3, #15
 8022210:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022214:	9309      	str	r3, [sp, #36]	@ 0x24
 8022216:	0e1b      	lsrs	r3, r3, #24
 8022218:	d006      	beq.n	8022228 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 802221a:	9300      	str	r3, [sp, #0]
 802221c:	4622      	mov	r2, r4
 802221e:	464b      	mov	r3, r9
 8022220:	a909      	add	r1, sp, #36	@ 0x24
 8022222:	4640      	mov	r0, r8
 8022224:	f7ff ff5a 	bl	80220dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8022228:	3403      	adds	r4, #3
 802222a:	f10b 3aff 	add.w	sl, fp, #4294967295
 802222e:	f1ba 0f01 	cmp.w	sl, #1
 8022232:	dd24      	ble.n	802227e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8022234:	783b      	ldrb	r3, [r7, #0]
 8022236:	091b      	lsrs	r3, r3, #4
 8022238:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802223c:	9308      	str	r3, [sp, #32]
 802223e:	0e1b      	lsrs	r3, r3, #24
 8022240:	d006      	beq.n	8022250 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8022242:	9300      	str	r3, [sp, #0]
 8022244:	4622      	mov	r2, r4
 8022246:	464b      	mov	r3, r9
 8022248:	a908      	add	r1, sp, #32
 802224a:	4640      	mov	r0, r8
 802224c:	f7ff ff46 	bl	80220dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8022250:	f817 3b01 	ldrb.w	r3, [r7], #1
 8022254:	f003 030f 	and.w	r3, r3, #15
 8022258:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802225c:	9309      	str	r3, [sp, #36]	@ 0x24
 802225e:	0e1b      	lsrs	r3, r3, #24
 8022260:	d006      	beq.n	8022270 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8022262:	9300      	str	r3, [sp, #0]
 8022264:	1ce2      	adds	r2, r4, #3
 8022266:	464b      	mov	r3, r9
 8022268:	a909      	add	r1, sp, #36	@ 0x24
 802226a:	4640      	mov	r0, r8
 802226c:	f7ff ff36 	bl	80220dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8022270:	3406      	adds	r4, #6
 8022272:	f1aa 0a02 	sub.w	sl, sl, #2
 8022276:	e7da      	b.n	802222e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8022278:	462f      	mov	r7, r5
 802227a:	46da      	mov	sl, fp
 802227c:	e7d7      	b.n	802222e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 802227e:	d10e      	bne.n	802229e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8022280:	783b      	ldrb	r3, [r7, #0]
 8022282:	091b      	lsrs	r3, r3, #4
 8022284:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022288:	9309      	str	r3, [sp, #36]	@ 0x24
 802228a:	0e1b      	lsrs	r3, r3, #24
 802228c:	d006      	beq.n	802229c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 802228e:	9300      	str	r3, [sp, #0]
 8022290:	4622      	mov	r2, r4
 8022292:	464b      	mov	r3, r9
 8022294:	a909      	add	r1, sp, #36	@ 0x24
 8022296:	4640      	mov	r0, r8
 8022298:	f7ff ff20 	bl	80220dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 802229c:	3403      	adds	r4, #3
 802229e:	9b07      	ldr	r3, [sp, #28]
 80222a0:	9a03      	ldr	r2, [sp, #12]
 80222a2:	881b      	ldrh	r3, [r3, #0]
 80222a4:	eba3 030b 	sub.w	r3, r3, fp
 80222a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80222ac:	441c      	add	r4, r3
 80222ae:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80222b2:	4413      	add	r3, r2
 80222b4:	2202      	movs	r2, #2
 80222b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80222ba:	441d      	add	r5, r3
 80222bc:	e79e      	b.n	80221fc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 80222be:	9b06      	ldr	r3, [sp, #24]
 80222c0:	6818      	ldr	r0, [r3, #0]
 80222c2:	6803      	ldr	r3, [r0, #0]
 80222c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80222c6:	4798      	blx	r3
 80222c8:	b00f      	add	sp, #60	@ 0x3c
 80222ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222ce:	bf00      	nop
 80222d0:	240255cc 	.word	0x240255cc
 80222d4:	240255c6 	.word	0x240255c6

080222d8 <CRC_Lock>:
 80222d8:	4a2d      	ldr	r2, [pc, #180]	@ (8022390 <CRC_Lock+0xb8>)
 80222da:	b530      	push	{r4, r5, lr}
 80222dc:	6813      	ldr	r3, [r2, #0]
 80222de:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80222e2:	f023 0301 	bic.w	r3, r3, #1
 80222e6:	6013      	str	r3, [r2, #0]
 80222e8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80222ec:	4b29      	ldr	r3, [pc, #164]	@ (8022394 <CRC_Lock+0xbc>)
 80222ee:	681c      	ldr	r4, [r3, #0]
 80222f0:	4014      	ands	r4, r2
 80222f2:	42ac      	cmp	r4, r5
 80222f4:	d005      	beq.n	8022302 <CRC_Lock+0x2a>
 80222f6:	681c      	ldr	r4, [r3, #0]
 80222f8:	f24c 2570 	movw	r5, #49776	@ 0xc270
 80222fc:	4014      	ands	r4, r2
 80222fe:	42ac      	cmp	r4, r5
 8022300:	d125      	bne.n	802234e <CRC_Lock+0x76>
 8022302:	4b25      	ldr	r3, [pc, #148]	@ (8022398 <CRC_Lock+0xc0>)
 8022304:	681b      	ldr	r3, [r3, #0]
 8022306:	2b00      	cmp	r3, #0
 8022308:	d139      	bne.n	802237e <CRC_Lock+0xa6>
 802230a:	4b24      	ldr	r3, [pc, #144]	@ (802239c <CRC_Lock+0xc4>)
 802230c:	681a      	ldr	r2, [r3, #0]
 802230e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022312:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8022316:	d00d      	beq.n	8022334 <CRC_Lock+0x5c>
 8022318:	681a      	ldr	r2, [r3, #0]
 802231a:	f240 4483 	movw	r4, #1155	@ 0x483
 802231e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022322:	42a2      	cmp	r2, r4
 8022324:	d006      	beq.n	8022334 <CRC_Lock+0x5c>
 8022326:	681b      	ldr	r3, [r3, #0]
 8022328:	f240 4285 	movw	r2, #1157	@ 0x485
 802232c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022330:	4293      	cmp	r3, r2
 8022332:	d124      	bne.n	802237e <CRC_Lock+0xa6>
 8022334:	4b1a      	ldr	r3, [pc, #104]	@ (80223a0 <CRC_Lock+0xc8>)
 8022336:	2201      	movs	r2, #1
 8022338:	601a      	str	r2, [r3, #0]
 802233a:	681a      	ldr	r2, [r3, #0]
 802233c:	2a00      	cmp	r2, #0
 802233e:	d1fc      	bne.n	802233a <CRC_Lock+0x62>
 8022340:	4b18      	ldr	r3, [pc, #96]	@ (80223a4 <CRC_Lock+0xcc>)
 8022342:	6018      	str	r0, [r3, #0]
 8022344:	6818      	ldr	r0, [r3, #0]
 8022346:	1a43      	subs	r3, r0, r1
 8022348:	4258      	negs	r0, r3
 802234a:	4158      	adcs	r0, r3
 802234c:	e00e      	b.n	802236c <CRC_Lock+0x94>
 802234e:	681b      	ldr	r3, [r3, #0]
 8022350:	4013      	ands	r3, r2
 8022352:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8022356:	4293      	cmp	r3, r2
 8022358:	d111      	bne.n	802237e <CRC_Lock+0xa6>
 802235a:	4b13      	ldr	r3, [pc, #76]	@ (80223a8 <CRC_Lock+0xd0>)
 802235c:	f240 4286 	movw	r2, #1158	@ 0x486
 8022360:	681b      	ldr	r3, [r3, #0]
 8022362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022366:	4293      	cmp	r3, r2
 8022368:	d001      	beq.n	802236e <CRC_Lock+0x96>
 802236a:	2000      	movs	r0, #0
 802236c:	bd30      	pop	{r4, r5, pc}
 802236e:	4b0f      	ldr	r3, [pc, #60]	@ (80223ac <CRC_Lock+0xd4>)
 8022370:	2201      	movs	r2, #1
 8022372:	601a      	str	r2, [r3, #0]
 8022374:	681a      	ldr	r2, [r3, #0]
 8022376:	2a00      	cmp	r2, #0
 8022378:	d1fc      	bne.n	8022374 <CRC_Lock+0x9c>
 802237a:	4b0d      	ldr	r3, [pc, #52]	@ (80223b0 <CRC_Lock+0xd8>)
 802237c:	e7e1      	b.n	8022342 <CRC_Lock+0x6a>
 802237e:	4b0d      	ldr	r3, [pc, #52]	@ (80223b4 <CRC_Lock+0xdc>)
 8022380:	2201      	movs	r2, #1
 8022382:	601a      	str	r2, [r3, #0]
 8022384:	681a      	ldr	r2, [r3, #0]
 8022386:	2a00      	cmp	r2, #0
 8022388:	d1fc      	bne.n	8022384 <CRC_Lock+0xac>
 802238a:	4b0b      	ldr	r3, [pc, #44]	@ (80223b8 <CRC_Lock+0xe0>)
 802238c:	e7d9      	b.n	8022342 <CRC_Lock+0x6a>
 802238e:	bf00      	nop
 8022390:	e0002000 	.word	0xe0002000
 8022394:	e000ed00 	.word	0xe000ed00
 8022398:	e0042000 	.word	0xe0042000
 802239c:	5c001000 	.word	0x5c001000
 80223a0:	58024c08 	.word	0x58024c08
 80223a4:	58024c00 	.word	0x58024c00
 80223a8:	46008ff0 	.word	0x46008ff0
 80223ac:	46024c08 	.word	0x46024c08
 80223b0:	46024c00 	.word	0x46024c00
 80223b4:	40023008 	.word	0x40023008
 80223b8:	40023000 	.word	0x40023000

080223bc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80223bc:	6101      	str	r1, [r0, #16]
 80223be:	4770      	bx	lr

080223c0 <_ZN8touchgfx8Gestures4tickEv>:
 80223c0:	7b83      	ldrb	r3, [r0, #14]
 80223c2:	b14b      	cbz	r3, 80223d8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80223c4:	8903      	ldrh	r3, [r0, #8]
 80223c6:	3301      	adds	r3, #1
 80223c8:	b29b      	uxth	r3, r3
 80223ca:	2b07      	cmp	r3, #7
 80223cc:	8103      	strh	r3, [r0, #8]
 80223ce:	bf81      	itttt	hi
 80223d0:	2300      	movhi	r3, #0
 80223d2:	8143      	strhhi	r3, [r0, #10]
 80223d4:	8183      	strhhi	r3, [r0, #12]
 80223d6:	7383      	strbhi	r3, [r0, #14]
 80223d8:	4770      	bx	lr
	...

080223dc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80223dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80223e0:	4698      	mov	r8, r3
 80223e2:	8883      	ldrh	r3, [r0, #4]
 80223e4:	4604      	mov	r4, r0
 80223e6:	4617      	mov	r7, r2
 80223e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80223ec:	eba8 0303 	sub.w	r3, r8, r3
 80223f0:	4a19      	ldr	r2, [pc, #100]	@ (8022458 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80223f2:	460e      	mov	r6, r1
 80223f4:	b21b      	sxth	r3, r3
 80223f6:	88c1      	ldrh	r1, [r0, #6]
 80223f8:	9200      	str	r2, [sp, #0]
 80223fa:	2000      	movs	r0, #0
 80223fc:	2b00      	cmp	r3, #0
 80223fe:	8aa2      	ldrh	r2, [r4, #20]
 8022400:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8022404:	bfb8      	it	lt
 8022406:	425b      	neglt	r3, r3
 8022408:	f88d 0004 	strb.w	r0, [sp, #4]
 802240c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8022410:	b21b      	sxth	r3, r3
 8022412:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022416:	f8ad 500c 	strh.w	r5, [sp, #12]
 802241a:	4293      	cmp	r3, r2
 802241c:	dc07      	bgt.n	802242e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802241e:	1a69      	subs	r1, r5, r1
 8022420:	b209      	sxth	r1, r1
 8022422:	2900      	cmp	r1, #0
 8022424:	bfb8      	it	lt
 8022426:	4249      	neglt	r1, r1
 8022428:	b209      	sxth	r1, r1
 802242a:	428a      	cmp	r2, r1
 802242c:	da10      	bge.n	8022450 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802242e:	6920      	ldr	r0, [r4, #16]
 8022430:	4669      	mov	r1, sp
 8022432:	eba8 0606 	sub.w	r6, r8, r6
 8022436:	1bef      	subs	r7, r5, r7
 8022438:	6803      	ldr	r3, [r0, #0]
 802243a:	685b      	ldr	r3, [r3, #4]
 802243c:	4798      	blx	r3
 802243e:	2300      	movs	r3, #0
 8022440:	2001      	movs	r0, #1
 8022442:	8166      	strh	r6, [r4, #10]
 8022444:	8123      	strh	r3, [r4, #8]
 8022446:	81a7      	strh	r7, [r4, #12]
 8022448:	f8a4 8004 	strh.w	r8, [r4, #4]
 802244c:	80e5      	strh	r5, [r4, #6]
 802244e:	73a0      	strb	r0, [r4, #14]
 8022450:	b004      	add	sp, #16
 8022452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022456:	bf00      	nop
 8022458:	0802753c 	.word	0x0802753c

0802245c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802245c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802245e:	461e      	mov	r6, r3
 8022460:	1e4b      	subs	r3, r1, #1
 8022462:	b085      	sub	sp, #20
 8022464:	4604      	mov	r4, r0
 8022466:	2b01      	cmp	r3, #1
 8022468:	460d      	mov	r5, r1
 802246a:	4617      	mov	r7, r2
 802246c:	d84b      	bhi.n	8022506 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802246e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8022472:	1cd3      	adds	r3, r2, #3
 8022474:	b29b      	uxth	r3, r3
 8022476:	2b06      	cmp	r3, #6
 8022478:	d916      	bls.n	80224a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802247a:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802251c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802247e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022482:	f8cd c004 	str.w	ip, [sp, #4]
 8022486:	f04f 0c00 	mov.w	ip, #0
 802248a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802248e:	6900      	ldr	r0, [r0, #16]
 8022490:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022494:	a901      	add	r1, sp, #4
 8022496:	f88d c008 	strb.w	ip, [sp, #8]
 802249a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802249e:	f8ad 300e 	strh.w	r3, [sp, #14]
 80224a2:	6803      	ldr	r3, [r0, #0]
 80224a4:	689b      	ldr	r3, [r3, #8]
 80224a6:	4798      	blx	r3
 80224a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80224ac:	1cd3      	adds	r3, r2, #3
 80224ae:	b29b      	uxth	r3, r3
 80224b0:	2b06      	cmp	r3, #6
 80224b2:	d916      	bls.n	80224e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80224b4:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802251c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80224b8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80224bc:	f8cd c004 	str.w	ip, [sp, #4]
 80224c0:	f04f 0c01 	mov.w	ip, #1
 80224c4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80224c8:	6920      	ldr	r0, [r4, #16]
 80224ca:	f8ad 100c 	strh.w	r1, [sp, #12]
 80224ce:	a901      	add	r1, sp, #4
 80224d0:	f88d c008 	strb.w	ip, [sp, #8]
 80224d4:	f8ad 200a 	strh.w	r2, [sp, #10]
 80224d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80224dc:	6803      	ldr	r3, [r0, #0]
 80224de:	689b      	ldr	r3, [r3, #8]
 80224e0:	4798      	blx	r3
 80224e2:	4b0d      	ldr	r3, [pc, #52]	@ (8022518 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80224e4:	a901      	add	r1, sp, #4
 80224e6:	6920      	ldr	r0, [r4, #16]
 80224e8:	9301      	str	r3, [sp, #4]
 80224ea:	2300      	movs	r3, #0
 80224ec:	f88d 5008 	strb.w	r5, [sp, #8]
 80224f0:	f8ad 700a 	strh.w	r7, [sp, #10]
 80224f4:	f8ad 600c 	strh.w	r6, [sp, #12]
 80224f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80224fc:	6803      	ldr	r3, [r0, #0]
 80224fe:	681b      	ldr	r3, [r3, #0]
 8022500:	4798      	blx	r3
 8022502:	b005      	add	sp, #20
 8022504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022506:	2900      	cmp	r1, #0
 8022508:	d1eb      	bne.n	80224e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802250a:	80a2      	strh	r2, [r4, #4]
 802250c:	80c6      	strh	r6, [r0, #6]
 802250e:	60a1      	str	r1, [r4, #8]
 8022510:	81a1      	strh	r1, [r4, #12]
 8022512:	73a1      	strb	r1, [r4, #14]
 8022514:	e7e5      	b.n	80224e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022516:	bf00      	nop
 8022518:	08027528 	.word	0x08027528
 802251c:	08027550 	.word	0x08027550

08022520 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8022520:	10c9      	asrs	r1, r1, #3
 8022522:	2900      	cmp	r1, #0
 8022524:	bfb8      	it	lt
 8022526:	4249      	neglt	r1, r1
 8022528:	2801      	cmp	r0, #1
 802252a:	d108      	bne.n	802253e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802252c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8022530:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8022534:	4601      	mov	r1, r0
 8022536:	dd02      	ble.n	802253e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8022538:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 802253c:	4770      	bx	lr
 802253e:	29ff      	cmp	r1, #255	@ 0xff
 8022540:	bfa8      	it	ge
 8022542:	21ff      	movge	r1, #255	@ 0xff
 8022544:	4608      	mov	r0, r1
 8022546:	4770      	bx	lr

08022548 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8022548:	b410      	push	{r4}
 802254a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802254e:	429c      	cmp	r4, r3
 8022550:	d803      	bhi.n	802255a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8022552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022556:	f7f0 bac5 	b.w	8012ae4 <_ZN8touchgfx7Outline6lineToEii>
 802255a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802255e:	4770      	bx	lr

08022560 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8022560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022564:	b08b      	sub	sp, #44	@ 0x2c
 8022566:	4606      	mov	r6, r0
 8022568:	468a      	mov	sl, r1
 802256a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802256e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8022572:	9308      	str	r3, [sp, #32]
 8022574:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8022578:	9309      	str	r3, [sp, #36]	@ 0x24
 802257a:	f7f0 fc1e 	bl	8012dba <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802257e:	68b5      	ldr	r5, [r6, #8]
 8022580:	4604      	mov	r4, r0
 8022582:	2d00      	cmp	r5, #0
 8022584:	d044      	beq.n	8022610 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8022586:	6873      	ldr	r3, [r6, #4]
 8022588:	42ab      	cmp	r3, r5
 802258a:	d33d      	bcc.n	8022608 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802258c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8022590:	f04f 0800 	mov.w	r8, #0
 8022594:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8022598:	eb02 0b03 	add.w	fp, r2, r3
 802259c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80225a0:	fb02 1203 	mla	r2, r2, r3, r1
 80225a4:	9205      	str	r2, [sp, #20]
 80225a6:	1e6a      	subs	r2, r5, #1
 80225a8:	9204      	str	r2, [sp, #16]
 80225aa:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 80225ae:	f9b4 7000 	ldrsh.w	r7, [r4]
 80225b2:	454b      	cmp	r3, r9
 80225b4:	463a      	mov	r2, r7
 80225b6:	d008      	beq.n	80225ca <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 80225b8:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 80225bc:	eb03 0b09 	add.w	fp, r3, r9
 80225c0:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80225c4:	fb03 1309 	mla	r3, r3, r9, r1
 80225c8:	9305      	str	r3, [sp, #20]
 80225ca:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80225ce:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80225d2:	4498      	add	r8, r3
 80225d4:	9b04      	ldr	r3, [sp, #16]
 80225d6:	3b01      	subs	r3, #1
 80225d8:	9304      	str	r3, [sp, #16]
 80225da:	9b04      	ldr	r3, [sp, #16]
 80225dc:	3301      	adds	r3, #1
 80225de:	d015      	beq.n	802260c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 80225e0:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 80225e4:	42bb      	cmp	r3, r7
 80225e6:	d117      	bne.n	8022618 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 80225e8:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80225ec:	9b04      	ldr	r3, [sp, #16]
 80225ee:	4548      	cmp	r0, r9
 80225f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80225f4:	d17d      	bne.n	80226f2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 80225f6:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80225fa:	4401      	add	r1, r0
 80225fc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022600:	4480      	add	r8, r0
 8022602:	e7e9      	b.n	80225d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8022604:	461f      	mov	r7, r3
 8022606:	e042      	b.n	802268e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8022608:	2000      	movs	r0, #0
 802260a:	e002      	b.n	8022612 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802260c:	2900      	cmp	r1, #0
 802260e:	d16d      	bne.n	80226ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8022610:	2001      	movs	r0, #1
 8022612:	b00b      	add	sp, #44	@ 0x2c
 8022614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022618:	b379      	cbz	r1, 802267a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802261a:	2f00      	cmp	r7, #0
 802261c:	db29      	blt.n	8022672 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802261e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8022622:	42bb      	cmp	r3, r7
 8022624:	dd25      	ble.n	8022672 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8022626:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802262a:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802262e:	f7ff ff77 	bl	8022520 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8022632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022634:	fb10 f003 	smulbb	r0, r0, r3
 8022638:	b280      	uxth	r0, r0
 802263a:	1c41      	adds	r1, r0, #1
 802263c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8022640:	1209      	asrs	r1, r1, #8
 8022642:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8022646:	d014      	beq.n	8022672 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8022648:	b2c9      	uxtb	r1, r1
 802264a:	9808      	ldr	r0, [sp, #32]
 802264c:	b2ba      	uxth	r2, r7
 802264e:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8022650:	9102      	str	r1, [sp, #8]
 8022652:	2101      	movs	r1, #1
 8022654:	4413      	add	r3, r2
 8022656:	4402      	add	r2, r0
 8022658:	9101      	str	r1, [sp, #4]
 802265a:	fa0f f18b 	sxth.w	r1, fp
 802265e:	f8da 0000 	ldr.w	r0, [sl]
 8022662:	b21b      	sxth	r3, r3
 8022664:	9100      	str	r1, [sp, #0]
 8022666:	b212      	sxth	r2, r2
 8022668:	6941      	ldr	r1, [r0, #20]
 802266a:	4650      	mov	r0, sl
 802266c:	460d      	mov	r5, r1
 802266e:	9905      	ldr	r1, [sp, #20]
 8022670:	47a8      	blx	r5
 8022672:	9b04      	ldr	r3, [sp, #16]
 8022674:	1c7a      	adds	r2, r7, #1
 8022676:	3301      	adds	r3, #1
 8022678:	d0ca      	beq.n	8022610 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802267a:	f9b4 7000 	ldrsh.w	r7, [r4]
 802267e:	1abb      	subs	r3, r7, r2
 8022680:	2b00      	cmp	r3, #0
 8022682:	dd31      	ble.n	80226e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8022684:	2a00      	cmp	r2, #0
 8022686:	dabd      	bge.n	8022604 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8022688:	2f00      	cmp	r7, #0
 802268a:	dd2d      	ble.n	80226e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802268c:	2200      	movs	r2, #0
 802268e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8022692:	19d1      	adds	r1, r2, r7
 8022694:	4299      	cmp	r1, r3
 8022696:	db02      	blt.n	802269e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8022698:	1a9f      	subs	r7, r3, r2
 802269a:	2f00      	cmp	r7, #0
 802269c:	dd24      	ble.n	80226e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802269e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80226a2:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 80226a6:	f7ff ff3b 	bl	8022520 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 80226aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80226ac:	fb10 f003 	smulbb	r0, r0, r3
 80226b0:	b280      	uxth	r0, r0
 80226b2:	1c41      	adds	r1, r0, #1
 80226b4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80226b8:	1209      	asrs	r1, r1, #8
 80226ba:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80226be:	d013      	beq.n	80226e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80226c0:	b292      	uxth	r2, r2
 80226c2:	9808      	ldr	r0, [sp, #32]
 80226c4:	b2c9      	uxtb	r1, r1
 80226c6:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80226c8:	b23f      	sxth	r7, r7
 80226ca:	4413      	add	r3, r2
 80226cc:	9102      	str	r1, [sp, #8]
 80226ce:	4402      	add	r2, r0
 80226d0:	fa0f f18b 	sxth.w	r1, fp
 80226d4:	f8da 0000 	ldr.w	r0, [sl]
 80226d8:	b21b      	sxth	r3, r3
 80226da:	9100      	str	r1, [sp, #0]
 80226dc:	b212      	sxth	r2, r2
 80226de:	9701      	str	r7, [sp, #4]
 80226e0:	9905      	ldr	r1, [sp, #20]
 80226e2:	6947      	ldr	r7, [r0, #20]
 80226e4:	4650      	mov	r0, sl
 80226e6:	47b8      	blx	r7
 80226e8:	464b      	mov	r3, r9
 80226ea:	e75e      	b.n	80225aa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 80226ec:	2f00      	cmp	r7, #0
 80226ee:	da96      	bge.n	802261e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 80226f0:	e78e      	b.n	8022610 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80226f2:	2900      	cmp	r1, #0
 80226f4:	d0f8      	beq.n	80226e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80226f6:	e790      	b.n	802261a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

080226f8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 80226f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80226fc:	461e      	mov	r6, r3
 80226fe:	4b36      	ldr	r3, [pc, #216]	@ (80227d8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8022700:	2500      	movs	r5, #0
 8022702:	f100 0814 	add.w	r8, r0, #20
 8022706:	4604      	mov	r4, r0
 8022708:	4617      	mov	r7, r2
 802270a:	e9c0 3100 	strd	r3, r1, [r0]
 802270e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8022712:	8185      	strh	r5, [r0, #12]
 8022714:	8103      	strh	r3, [r0, #8]
 8022716:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802271a:	81c5      	strh	r5, [r0, #14]
 802271c:	7283      	strb	r3, [r0, #10]
 802271e:	8205      	strh	r5, [r0, #16]
 8022720:	8245      	strh	r5, [r0, #18]
 8022722:	4640      	mov	r0, r8
 8022724:	f7ef fd24 	bl	8012170 <_ZN8touchgfx7OutlineC1Ev>
 8022728:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 802272c:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8022730:	466b      	mov	r3, sp
 8022732:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8022736:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802273a:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802273e:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8022742:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8022746:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802274a:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802274e:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8022752:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8022756:	6830      	ldr	r0, [r6, #0]
 8022758:	6871      	ldr	r1, [r6, #4]
 802275a:	8872      	ldrh	r2, [r6, #2]
 802275c:	8835      	ldrh	r5, [r6, #0]
 802275e:	c303      	stmia	r3!, {r0, r1}
 8022760:	887b      	ldrh	r3, [r7, #2]
 8022762:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8022766:	4413      	add	r3, r2
 8022768:	883a      	ldrh	r2, [r7, #0]
 802276a:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802276e:	442a      	add	r2, r5
 8022770:	81e3      	strh	r3, [r4, #14]
 8022772:	8220      	strh	r0, [r4, #16]
 8022774:	4668      	mov	r0, sp
 8022776:	81a2      	strh	r2, [r4, #12]
 8022778:	8261      	strh	r1, [r4, #18]
 802277a:	4639      	mov	r1, r7
 802277c:	f7f1 fed0 	bl	8014520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022780:	f104 000c 	add.w	r0, r4, #12
 8022784:	f7f1 fea4 	bl	80144d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022788:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802278c:	f8bd 2000 	ldrh.w	r2, [sp]
 8022790:	4640      	mov	r0, r8
 8022792:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8022796:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802279a:	f7ef fccd 	bl	8012138 <_ZN8touchgfx7Outline5resetEv>
 802279e:	f9bd 3000 	ldrsh.w	r3, [sp]
 80227a2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80227a6:	4620      	mov	r0, r4
 80227a8:	015b      	lsls	r3, r3, #5
 80227aa:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80227ac:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80227b0:	015b      	lsls	r3, r3, #5
 80227b2:	6523      	str	r3, [r4, #80]	@ 0x50
 80227b4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80227b8:	015b      	lsls	r3, r3, #5
 80227ba:	6563      	str	r3, [r4, #84]	@ 0x54
 80227bc:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80227c0:	015b      	lsls	r3, r3, #5
 80227c2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80227c4:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80227c8:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 80227cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80227d0:	b002      	add	sp, #8
 80227d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80227d6:	bf00      	nop
 80227d8:	080277e0 	.word	0x080277e0

080227dc <_ZN8touchgfx6Canvas5closeEv>:
 80227dc:	b538      	push	{r3, r4, r5, lr}
 80227de:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80227e2:	4604      	mov	r4, r0
 80227e4:	b193      	cbz	r3, 802280c <_ZN8touchgfx6Canvas5closeEv+0x30>
 80227e6:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 80227ea:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 80227ee:	4213      	tst	r3, r2
 80227f0:	d10c      	bne.n	802280c <_ZN8touchgfx6Canvas5closeEv+0x30>
 80227f2:	f100 0514 	add.w	r5, r0, #20
 80227f6:	b123      	cbz	r3, 8022802 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80227f8:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 80227fc:	4628      	mov	r0, r5
 80227fe:	f7ff fea3 	bl	8022548 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022802:	4628      	mov	r0, r5
 8022804:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8022808:	f7ff fe9e 	bl	8022548 <_ZN8touchgfx10Rasterizer6lineToEii>
 802280c:	2300      	movs	r3, #0
 802280e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8022812:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8022816:	4298      	cmp	r0, r3
 8022818:	bf34      	ite	cc
 802281a:	2000      	movcc	r0, #0
 802281c:	2001      	movcs	r0, #1
 802281e:	bd38      	pop	{r3, r4, r5, pc}

08022820 <_ZN8touchgfx6Canvas6renderEh>:
 8022820:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8022824:	7a85      	ldrb	r5, [r0, #10]
 8022826:	4604      	mov	r4, r0
 8022828:	4369      	muls	r1, r5
 802282a:	1c4d      	adds	r5, r1, #1
 802282c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8022830:	122d      	asrs	r5, r5, #8
 8022832:	f000 8098 	beq.w	8022966 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8022836:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802283a:	2b00      	cmp	r3, #0
 802283c:	f000 8093 	beq.w	8022966 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8022840:	f7ff ffcc 	bl	80227dc <_ZN8touchgfx6Canvas5closeEv>
 8022844:	4607      	mov	r7, r0
 8022846:	2800      	cmp	r0, #0
 8022848:	d045      	beq.n	80228d6 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802284a:	6860      	ldr	r0, [r4, #4]
 802284c:	4e47      	ldr	r6, [pc, #284]	@ (802296c <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802284e:	6803      	ldr	r3, [r0, #0]
 8022850:	6837      	ldr	r7, [r6, #0]
 8022852:	689b      	ldr	r3, [r3, #8]
 8022854:	4798      	blx	r3
 8022856:	4601      	mov	r1, r0
 8022858:	4638      	mov	r0, r7
 802285a:	f7ed fcbd 	bl	80101d8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802285e:	4607      	mov	r7, r0
 8022860:	f7e1 fc32 	bl	80040c8 <_ZN8touchgfx3HAL3lcdEv>
 8022864:	6803      	ldr	r3, [r0, #0]
 8022866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022868:	4798      	blx	r3
 802286a:	4680      	mov	r8, r0
 802286c:	f7e1 fc2c 	bl	80040c8 <_ZN8touchgfx3HAL3lcdEv>
 8022870:	6803      	ldr	r3, [r0, #0]
 8022872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022874:	4798      	blx	r3
 8022876:	280b      	cmp	r0, #11
 8022878:	d85a      	bhi.n	8022930 <_ZN8touchgfx6Canvas6renderEh+0x110>
 802287a:	e8df f000 	tbb	[pc, r0]
 802287e:	5b50      	.short	0x5b50
 8022880:	3059066b 	.word	0x3059066b
 8022884:	64646440 	.word	0x64646440
 8022888:	6464      	.short	0x6464
 802288a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802288e:	2208      	movs	r2, #8
 8022890:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022894:	fb91 f2f2 	sdiv	r2, r1, r2
 8022898:	fb08 2303 	mla	r3, r8, r3, r2
 802289c:	441f      	add	r7, r3
 802289e:	424b      	negs	r3, r1
 80228a0:	f001 0107 	and.w	r1, r1, #7
 80228a4:	f003 0307 	and.w	r3, r3, #7
 80228a8:	bf58      	it	pl
 80228aa:	4259      	negpl	r1, r3
 80228ac:	b2c9      	uxtb	r1, r1
 80228ae:	b2ed      	uxtb	r5, r5
 80228b0:	463a      	mov	r2, r7
 80228b2:	fa0f f388 	sxth.w	r3, r8
 80228b6:	f104 0014 	add.w	r0, r4, #20
 80228ba:	e9cd 1500 	strd	r1, r5, [sp]
 80228be:	6861      	ldr	r1, [r4, #4]
 80228c0:	f7ff fe4e 	bl	8022560 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80228c4:	4607      	mov	r7, r0
 80228c6:	6860      	ldr	r0, [r4, #4]
 80228c8:	6803      	ldr	r3, [r0, #0]
 80228ca:	691b      	ldr	r3, [r3, #16]
 80228cc:	4798      	blx	r3
 80228ce:	6830      	ldr	r0, [r6, #0]
 80228d0:	6803      	ldr	r3, [r0, #0]
 80228d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80228d4:	4798      	blx	r3
 80228d6:	4638      	mov	r0, r7
 80228d8:	b002      	add	sp, #8
 80228da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80228de:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80228e2:	2204      	movs	r2, #4
 80228e4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80228e8:	fb91 f2f2 	sdiv	r2, r1, r2
 80228ec:	fb08 2303 	mla	r3, r8, r3, r2
 80228f0:	441f      	add	r7, r3
 80228f2:	424b      	negs	r3, r1
 80228f4:	f001 0103 	and.w	r1, r1, #3
 80228f8:	f003 0303 	and.w	r3, r3, #3
 80228fc:	e7d4      	b.n	80228a8 <_ZN8touchgfx6Canvas6renderEh+0x88>
 80228fe:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8022902:	2202      	movs	r2, #2
 8022904:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022908:	2900      	cmp	r1, #0
 802290a:	fb91 f2f2 	sdiv	r2, r1, r2
 802290e:	f001 0101 	and.w	r1, r1, #1
 8022912:	fb08 2303 	mla	r3, r8, r3, r2
 8022916:	bfb8      	it	lt
 8022918:	4249      	neglt	r1, r1
 802291a:	441f      	add	r7, r3
 802291c:	e7c6      	b.n	80228ac <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802291e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022922:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022926:	fb08 f303 	mul.w	r3, r8, r3
 802292a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802292e:	441f      	add	r7, r3
 8022930:	2100      	movs	r1, #0
 8022932:	e7bc      	b.n	80228ae <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8022934:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022938:	2103      	movs	r1, #3
 802293a:	fb08 f203 	mul.w	r2, r8, r3
 802293e:	89a3      	ldrh	r3, [r4, #12]
 8022940:	fb13 2301 	smlabb	r3, r3, r1, r2
 8022944:	e7f3      	b.n	802292e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8022946:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802294a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802294e:	fb08 2303 	mla	r3, r8, r3, r2
 8022952:	e7ec      	b.n	802292e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8022954:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802295c:	fb08 f303 	mul.w	r3, r8, r3
 8022960:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8022964:	e7e3      	b.n	802292e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8022966:	2701      	movs	r7, #1
 8022968:	e7b5      	b.n	80228d6 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802296a:	bf00      	nop
 802296c:	240255cc 	.word	0x240255cc

08022970 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8022970:	4b06      	ldr	r3, [pc, #24]	@ (802298c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 8022972:	b510      	push	{r4, lr}
 8022974:	781b      	ldrb	r3, [r3, #0]
 8022976:	2b01      	cmp	r3, #1
 8022978:	d107      	bne.n	802298a <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802297a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802297e:	680b      	ldr	r3, [r1, #0]
 8022980:	6814      	ldr	r4, [r2, #0]
 8022982:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8022986:	6013      	str	r3, [r2, #0]
 8022988:	600c      	str	r4, [r1, #0]
 802298a:	bd10      	pop	{r4, pc}
 802298c:	240255c4 	.word	0x240255c4

08022990 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8022990:	b513      	push	{r0, r1, r4, lr}
 8022992:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8022996:	4604      	mov	r4, r0
 8022998:	e9cd 2100 	strd	r2, r1, [sp]
 802299c:	b9a3      	cbnz	r3, 80229c8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802299e:	466a      	mov	r2, sp
 80229a0:	a901      	add	r1, sp, #4
 80229a2:	4620      	mov	r0, r4
 80229a4:	f7ff ffe4 	bl	8022970 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80229a8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80229aa:	9901      	ldr	r1, [sp, #4]
 80229ac:	9a00      	ldr	r2, [sp, #0]
 80229ae:	1ac9      	subs	r1, r1, r3
 80229b0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80229b2:	1ad2      	subs	r2, r2, r3
 80229b4:	9101      	str	r1, [sp, #4]
 80229b6:	2a00      	cmp	r2, #0
 80229b8:	9200      	str	r2, [sp, #0]
 80229ba:	da0b      	bge.n	80229d4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80229bc:	2301      	movs	r3, #1
 80229be:	2900      	cmp	r1, #0
 80229c0:	da0e      	bge.n	80229e0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80229c2:	f043 0304 	orr.w	r3, r3, #4
 80229c6:	e013      	b.n	80229f0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80229c8:	f7ff ff08 	bl	80227dc <_ZN8touchgfx6Canvas5closeEv>
 80229cc:	2800      	cmp	r0, #0
 80229ce:	d1e6      	bne.n	802299e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80229d0:	b002      	add	sp, #8
 80229d2:	bd10      	pop	{r4, pc}
 80229d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80229d6:	429a      	cmp	r2, r3
 80229d8:	bfac      	ite	ge
 80229da:	2302      	movge	r3, #2
 80229dc:	2300      	movlt	r3, #0
 80229de:	e7ee      	b.n	80229be <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80229e0:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80229e2:	4281      	cmp	r1, r0
 80229e4:	bfac      	ite	ge
 80229e6:	2008      	movge	r0, #8
 80229e8:	2000      	movlt	r0, #0
 80229ea:	4318      	orrs	r0, r3
 80229ec:	b2c3      	uxtb	r3, r0
 80229ee:	b158      	cbz	r0, 8022a08 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 80229f0:	2200      	movs	r2, #0
 80229f2:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 80229f6:	9901      	ldr	r1, [sp, #4]
 80229f8:	9a00      	ldr	r2, [sp, #0]
 80229fa:	66e1      	str	r1, [r4, #108]	@ 0x6c
 80229fc:	6722      	str	r2, [r4, #112]	@ 0x70
 80229fe:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8022a02:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8022a06:	e7e3      	b.n	80229d0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8022a08:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8022a0c:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8022a10:	4298      	cmp	r0, r3
 8022a12:	d803      	bhi.n	8022a1c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8022a14:	f104 0014 	add.w	r0, r4, #20
 8022a18:	f7f0 f87e 	bl	8012b18 <_ZN8touchgfx7Outline6moveToEii>
 8022a1c:	2301      	movs	r3, #1
 8022a1e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8022a22:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8022a26:	2300      	movs	r3, #0
 8022a28:	e7e5      	b.n	80229f6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08022a2a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8022a2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022a2c:	ab02      	add	r3, sp, #8
 8022a2e:	4604      	mov	r4, r0
 8022a30:	9101      	str	r1, [sp, #4]
 8022a32:	a901      	add	r1, sp, #4
 8022a34:	f843 2d08 	str.w	r2, [r3, #-8]!
 8022a38:	461a      	mov	r2, r3
 8022a3a:	f7ff ff99 	bl	8022970 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8022a3e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8022a40:	9901      	ldr	r1, [sp, #4]
 8022a42:	9a00      	ldr	r2, [sp, #0]
 8022a44:	1ac9      	subs	r1, r1, r3
 8022a46:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8022a48:	1ad2      	subs	r2, r2, r3
 8022a4a:	9101      	str	r1, [sp, #4]
 8022a4c:	2a00      	cmp	r2, #0
 8022a4e:	9200      	str	r2, [sp, #0]
 8022a50:	db1c      	blt.n	8022a8c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8022a52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8022a54:	429a      	cmp	r2, r3
 8022a56:	bfac      	ite	ge
 8022a58:	2002      	movge	r0, #2
 8022a5a:	2000      	movlt	r0, #0
 8022a5c:	2900      	cmp	r1, #0
 8022a5e:	db17      	blt.n	8022a90 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8022a60:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8022a62:	4299      	cmp	r1, r3
 8022a64:	bfac      	ite	ge
 8022a66:	2308      	movge	r3, #8
 8022a68:	2300      	movlt	r3, #0
 8022a6a:	4303      	orrs	r3, r0
 8022a6c:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8022a70:	b2dd      	uxtb	r5, r3
 8022a72:	b978      	cbnz	r0, 8022a94 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8022a74:	f104 0014 	add.w	r0, r4, #20
 8022a78:	f7ff fd66 	bl	8022548 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022a7c:	9b01      	ldr	r3, [sp, #4]
 8022a7e:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8022a82:	6623      	str	r3, [r4, #96]	@ 0x60
 8022a84:	9b00      	ldr	r3, [sp, #0]
 8022a86:	6663      	str	r3, [r4, #100]	@ 0x64
 8022a88:	b002      	add	sp, #8
 8022a8a:	bd70      	pop	{r4, r5, r6, pc}
 8022a8c:	2001      	movs	r0, #1
 8022a8e:	e7e5      	b.n	8022a5c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8022a90:	2304      	movs	r3, #4
 8022a92:	e7ea      	b.n	8022a6a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8022a94:	b113      	cbz	r3, 8022a9c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8022a96:	ea10 0305 	ands.w	r3, r0, r5
 8022a9a:	d11c      	bne.n	8022ad6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8022a9c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8022aa0:	f104 0614 	add.w	r6, r4, #20
 8022aa4:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8022aa8:	b98b      	cbnz	r3, 8022ace <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8022aaa:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8022aae:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8022ab2:	4298      	cmp	r0, r3
 8022ab4:	d802      	bhi.n	8022abc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8022ab6:	4630      	mov	r0, r6
 8022ab8:	f7f0 f82e 	bl	8012b18 <_ZN8touchgfx7Outline6moveToEii>
 8022abc:	2301      	movs	r3, #1
 8022abe:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8022ac2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8022ac6:	4630      	mov	r0, r6
 8022ac8:	e9dd 2100 	ldrd	r2, r1, [sp]
 8022acc:	e7d4      	b.n	8022a78 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8022ace:	4630      	mov	r0, r6
 8022ad0:	f7ff fd3a 	bl	8022548 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022ad4:	e7f7      	b.n	8022ac6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8022ad6:	461d      	mov	r5, r3
 8022ad8:	e7d0      	b.n	8022a7c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08022adc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 8022adc:	b538      	push	{r3, r4, r5, lr}
 8022ade:	ed2d 8b10 	vpush	{d8-d15}
 8022ae2:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8022ae6:	4605      	mov	r5, r0
 8022ae8:	eeb0 ca40 	vmov.f32	s24, s0
 8022aec:	460c      	mov	r4, r1
 8022aee:	eef0 ca60 	vmov.f32	s25, s1
 8022af2:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8022c50 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8022af6:	eeb0 da41 	vmov.f32	s26, s2
 8022afa:	eef0 da61 	vmov.f32	s27, s3
 8022afe:	eeb0 ea42 	vmov.f32	s28, s4
 8022b02:	eef0 ea62 	vmov.f32	s29, s5
 8022b06:	eef0 aa6b 	vmov.f32	s21, s23
 8022b0a:	2c08      	cmp	r4, #8
 8022b0c:	d86e      	bhi.n	8022bec <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 8022b0e:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8022b12:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8022b16:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 8022b1a:	ee3e 7aec 	vsub.f32	s14, s29, s25
 8022b1e:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8022b22:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8022b26:	ee7c faad 	vadd.f32	s31, s25, s27
 8022b2a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8022b2e:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8022b32:	ee3d aaae 	vadd.f32	s20, s27, s29
 8022b36:	ee2f fa2b 	vmul.f32	s30, s30, s23
 8022b3a:	ee6f faab 	vmul.f32	s31, s31, s23
 8022b3e:	ee69 9aab 	vmul.f32	s19, s19, s23
 8022b42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022b46:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8022b4a:	ee7f 8a29 	vadd.f32	s17, s30, s19
 8022b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b52:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8022b56:	ee68 8aab 	vmul.f32	s17, s17, s23
 8022b5a:	bf48      	it	mi
 8022b5c:	eef1 7a67 	vnegmi.f32	s15, s15
 8022b60:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8022b64:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8022b68:	eef4 7acb 	vcmpe.f32	s15, s22
 8022b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b70:	dd3f      	ble.n	8022bf2 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 8022b72:	ee27 7a07 	vmul.f32	s14, s14, s14
 8022b76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8022b7a:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8022b7e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8022b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b8a:	d847      	bhi.n	8022c1c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8022b8c:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8022b90:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8022b94:	f000 fa39 	bl	802300a <atan2f>
 8022b98:	eeb0 8a40 	vmov.f32	s16, s0
 8022b9c:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8022ba0:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8022ba4:	f000 fa31 	bl	802300a <atan2f>
 8022ba8:	ee38 0a40 	vsub.f32	s0, s16, s0
 8022bac:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8022c54 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8022bb0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8022bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022bb8:	bf48      	it	mi
 8022bba:	eeb1 0a40 	vnegmi.f32	s0, s0
 8022bbe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022bc6:	bfa4      	itt	ge
 8022bc8:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8022c58 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 8022bcc:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8022bd0:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8022c5c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8022bd4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022bdc:	d51e      	bpl.n	8022c1c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8022bde:	eef0 0a49 	vmov.f32	s1, s18
 8022be2:	4628      	mov	r0, r5
 8022be4:	eeb0 0a68 	vmov.f32	s0, s17
 8022be8:	f7ee f9fc 	bl	8010fe4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8022bec:	ecbd 8b10 	vpop	{d8-d15}
 8022bf0:	bd38      	pop	{r3, r4, r5, pc}
 8022bf2:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8022bf6:	eeb0 7a68 	vmov.f32	s14, s17
 8022bfa:	eef0 6a49 	vmov.f32	s13, s18
 8022bfe:	eea7 7aea 	vfms.f32	s14, s15, s21
 8022c02:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8022c06:	eee7 6aea 	vfms.f32	s13, s15, s21
 8022c0a:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8022c0e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8022c12:	eef4 7ac6 	vcmpe.f32	s15, s12
 8022c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c1a:	d9e0      	bls.n	8022bde <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8022c1c:	3401      	adds	r4, #1
 8022c1e:	eef0 0a6c 	vmov.f32	s1, s25
 8022c22:	eeb0 0a4c 	vmov.f32	s0, s24
 8022c26:	4628      	mov	r0, r5
 8022c28:	4621      	mov	r1, r4
 8022c2a:	eef0 2a49 	vmov.f32	s5, s18
 8022c2e:	eeb0 2a68 	vmov.f32	s4, s17
 8022c32:	eef0 1a6f 	vmov.f32	s3, s31
 8022c36:	eeb0 1a4f 	vmov.f32	s2, s30
 8022c3a:	f7ff ff4f 	bl	8022adc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8022c3e:	eef0 da4a 	vmov.f32	s27, s20
 8022c42:	eeb0 da69 	vmov.f32	s26, s19
 8022c46:	eef0 ca49 	vmov.f32	s25, s18
 8022c4a:	eeb0 ca68 	vmov.f32	s24, s17
 8022c4e:	e75c      	b.n	8022b0a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8022c50:	2edbe6ff 	.word	0x2edbe6ff
 8022c54:	40490fdb 	.word	0x40490fdb
 8022c58:	40c90fdb 	.word	0x40c90fdb
 8022c5c:	3dcccccd 	.word	0x3dcccccd

08022c60 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 8022c60:	b530      	push	{r4, r5, lr}
 8022c62:	ed2d 8b10 	vpush	{d8-d15}
 8022c66:	eef0 8a40 	vmov.f32	s17, s0
 8022c6a:	b085      	sub	sp, #20
 8022c6c:	eef0 9a60 	vmov.f32	s19, s1
 8022c70:	4604      	mov	r4, r0
 8022c72:	eef0 fa41 	vmov.f32	s31, s2
 8022c76:	460d      	mov	r5, r1
 8022c78:	eeb0 fa61 	vmov.f32	s30, s3
 8022c7c:	eef0 ba42 	vmov.f32	s23, s4
 8022c80:	eeb0 ca62 	vmov.f32	s24, s5
 8022c84:	eef0 aa43 	vmov.f32	s21, s6
 8022c88:	eeb0 ba63 	vmov.f32	s22, s7
 8022c8c:	2d08      	cmp	r5, #8
 8022c8e:	f200 8113 	bhi.w	8022eb8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8022c92:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8022c96:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 8022c9a:	ee7f 6aab 	vadd.f32	s13, s31, s23
 8022c9e:	ee38 daaf 	vadd.f32	s26, s17, s31
 8022ca2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8022ca6:	ee7c ca0b 	vadd.f32	s25, s24, s22
 8022caa:	ee2d da27 	vmul.f32	s26, s26, s15
 8022cae:	ed8d 6a01 	vstr	s12, [sp, #4]
 8022cb2:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8022cb6:	ee6c caa7 	vmul.f32	s25, s25, s15
 8022cba:	eeb0 ea4d 	vmov.f32	s28, s26
 8022cbe:	ee79 da8f 	vadd.f32	s27, s19, s30
 8022cc2:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 8022cc6:	eea6 eaa7 	vfma.f32	s28, s13, s15
 8022cca:	ee66 6a27 	vmul.f32	s13, s12, s15
 8022cce:	ee6d daa7 	vmul.f32	s27, s27, s15
 8022cd2:	edcd 6a03 	vstr	s13, [sp, #12]
 8022cd6:	eef0 6a6c 	vmov.f32	s13, s25
 8022cda:	eef0 ea6d 	vmov.f32	s29, s27
 8022cde:	ee2e ea27 	vmul.f32	s28, s28, s15
 8022ce2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022ce6:	eee7 ea27 	vfma.f32	s29, s14, s15
 8022cea:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8022cee:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8022cf2:	eef0 6a67 	vmov.f32	s13, s15
 8022cf6:	ed8d 7a02 	vstr	s14, [sp, #8]
 8022cfa:	ed9d 7a03 	vldr	s14, [sp, #12]
 8022cfe:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8022d02:	ed9d 7a02 	vldr	s14, [sp, #8]
 8022d06:	ee3e aa87 	vadd.f32	s20, s29, s14
 8022d0a:	ee29 9a27 	vmul.f32	s18, s18, s15
 8022d0e:	ee2a aa27 	vmul.f32	s20, s20, s15
 8022d12:	2d00      	cmp	r5, #0
 8022d14:	f000 810b 	beq.w	8022f2e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022d18:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8022d1c:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8022f74 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8022d20:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8022d24:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8022d28:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8022d2c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8022d30:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8022d34:	eea6 7a27 	vfma.f32	s14, s12, s15
 8022d38:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8022d3c:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8022d40:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8022d44:	eea5 6a27 	vfma.f32	s12, s10, s15
 8022d48:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8022d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022d50:	bf48      	it	mi
 8022d52:	eeb1 7a47 	vnegmi.f32	s14, s14
 8022d56:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8022d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022d5e:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8022d62:	bf48      	it	mi
 8022d64:	eeb1 6a46 	vnegmi.f32	s12, s12
 8022d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022d6c:	f340 80a8 	ble.w	8022ec0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 8022d70:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8022d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022d78:	dd5a      	ble.n	8022e30 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 8022d7a:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8022d7e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8022d82:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8022d86:	ee27 7a07 	vmul.f32	s14, s14, s14
 8022d8a:	ee65 7a85 	vmul.f32	s15, s11, s10
 8022d8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022d96:	f200 80ca 	bhi.w	8022f2e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022d9a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8022d9e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8022da2:	f000 f932 	bl	802300a <atan2f>
 8022da6:	eeb0 8a40 	vmov.f32	s16, s0
 8022daa:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8022dae:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8022db2:	f000 f92a 	bl	802300a <atan2f>
 8022db6:	ee38 fa40 	vsub.f32	s30, s16, s0
 8022dba:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8022dbe:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8022dc2:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8022dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022dca:	bf48      	it	mi
 8022dcc:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8022dd0:	f000 f91b 	bl	802300a <atan2f>
 8022dd4:	ee30 0a48 	vsub.f32	s0, s0, s16
 8022dd8:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8022f78 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8022ddc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8022de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022de4:	eeb4 fae7 	vcmpe.f32	s30, s15
 8022de8:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8022f78 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8022dec:	bf48      	it	mi
 8022dee:	eeb1 0a40 	vnegmi.f32	s0, s0
 8022df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022df6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022dfa:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8022f7c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8022dfe:	bfa4      	itt	ge
 8022e00:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8022f80 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8022e04:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8022e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e0c:	bfa4      	itt	ge
 8022e0e:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8022f80 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8022e12:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8022e16:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8022e1a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e22:	f140 8084 	bpl.w	8022f2e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022e26:	eef0 0a4a 	vmov.f32	s1, s20
 8022e2a:	eeb0 0a49 	vmov.f32	s0, s18
 8022e2e:	e040      	b.n	8022eb2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8022e30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8022e34:	ee27 7a07 	vmul.f32	s14, s14, s14
 8022e38:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8022e3c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8022e40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e48:	d871      	bhi.n	8022f2e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022e4a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8022e4e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8022e52:	f000 f8da 	bl	802300a <atan2f>
 8022e56:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8022e5a:	eeb0 8a40 	vmov.f32	s16, s0
 8022e5e:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8022e62:	f000 f8d2 	bl	802300a <atan2f>
 8022e66:	ee38 0a40 	vsub.f32	s0, s16, s0
 8022e6a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8022f78 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8022e6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8022e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e76:	bf48      	it	mi
 8022e78:	eeb1 0a40 	vnegmi.f32	s0, s0
 8022e7c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e84:	bfa4      	itt	ge
 8022e86:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8022f80 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8022e8a:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8022e8e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8022f7c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8022e92:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e9a:	d548      	bpl.n	8022f2e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022e9c:	eef0 0a4f 	vmov.f32	s1, s30
 8022ea0:	4620      	mov	r0, r4
 8022ea2:	eeb0 0a6f 	vmov.f32	s0, s31
 8022ea6:	f7ee f89d 	bl	8010fe4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8022eaa:	eef0 0a4c 	vmov.f32	s1, s24
 8022eae:	eeb0 0a6b 	vmov.f32	s0, s23
 8022eb2:	4620      	mov	r0, r4
 8022eb4:	f7ee f896 	bl	8010fe4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8022eb8:	b005      	add	sp, #20
 8022eba:	ecbd 8b10 	vpop	{d8-d15}
 8022ebe:	bd30      	pop	{r4, r5, pc}
 8022ec0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8022f74 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8022ec4:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8022ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022ecc:	dd19      	ble.n	8022f02 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8022ece:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8022ed2:	ee26 7a06 	vmul.f32	s14, s12, s12
 8022ed6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8022eda:	ee67 7a85 	vmul.f32	s15, s15, s10
 8022ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022ee6:	d822      	bhi.n	8022f2e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022ee8:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8022eec:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8022ef0:	f000 f88b 	bl	802300a <atan2f>
 8022ef4:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8022ef8:	eeb0 8a40 	vmov.f32	s16, s0
 8022efc:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8022f00:	e7af      	b.n	8022e62 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8022f02:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8022f06:	eeb0 7a49 	vmov.f32	s14, s18
 8022f0a:	eeb0 6a4a 	vmov.f32	s12, s20
 8022f0e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8022f12:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8022f16:	eea7 6ae6 	vfms.f32	s12, s15, s13
 8022f1a:	ee66 7a06 	vmul.f32	s15, s12, s12
 8022f1e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8022f22:	eef4 7ac5 	vcmpe.f32	s15, s10
 8022f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022f2a:	f67f af7c 	bls.w	8022e26 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8022f2e:	3501      	adds	r5, #1
 8022f30:	eef0 0a69 	vmov.f32	s1, s19
 8022f34:	eeb0 0a68 	vmov.f32	s0, s17
 8022f38:	4620      	mov	r0, r4
 8022f3a:	4629      	mov	r1, r5
 8022f3c:	eef0 3a4a 	vmov.f32	s7, s20
 8022f40:	eeb0 3a49 	vmov.f32	s6, s18
 8022f44:	eef0 2a6e 	vmov.f32	s5, s29
 8022f48:	eeb0 2a4e 	vmov.f32	s4, s28
 8022f4c:	eef0 1a6d 	vmov.f32	s3, s27
 8022f50:	eeb0 1a4d 	vmov.f32	s2, s26
 8022f54:	f7ff fe84 	bl	8022c60 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8022f58:	eeb0 ca6c 	vmov.f32	s24, s25
 8022f5c:	eddd ba01 	vldr	s23, [sp, #4]
 8022f60:	eef0 9a4a 	vmov.f32	s19, s20
 8022f64:	ed9d fa02 	vldr	s30, [sp, #8]
 8022f68:	eef0 8a49 	vmov.f32	s17, s18
 8022f6c:	eddd fa03 	vldr	s31, [sp, #12]
 8022f70:	e68c      	b.n	8022c8c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8022f72:	bf00      	nop
 8022f74:	2edbe6ff 	.word	0x2edbe6ff
 8022f78:	40490fdb 	.word	0x40490fdb
 8022f7c:	3dcccccd 	.word	0x3dcccccd
 8022f80:	40c90fdb 	.word	0x40c90fdb

08022f84 <_ZN8touchgfx6CanvasD1Ev>:
 8022f84:	4b04      	ldr	r3, [pc, #16]	@ (8022f98 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8022f86:	b510      	push	{r4, lr}
 8022f88:	4604      	mov	r4, r0
 8022f8a:	f840 3b14 	str.w	r3, [r0], #20
 8022f8e:	f7ef f8cb 	bl	8012128 <_ZN8touchgfx7OutlineD1Ev>
 8022f92:	4620      	mov	r0, r4
 8022f94:	bd10      	pop	{r4, pc}
 8022f96:	bf00      	nop
 8022f98:	080277e0 	.word	0x080277e0

08022f9c <_ZN8touchgfx6CanvasD0Ev>:
 8022f9c:	b510      	push	{r4, lr}
 8022f9e:	4604      	mov	r4, r0
 8022fa0:	f7ff fff0 	bl	8022f84 <_ZN8touchgfx6CanvasD1Ev>
 8022fa4:	2174      	movs	r1, #116	@ 0x74
 8022fa6:	4620      	mov	r0, r4
 8022fa8:	f000 f807 	bl	8022fba <_ZdlPvj>
 8022fac:	4620      	mov	r0, r4
 8022fae:	bd10      	pop	{r4, pc}

08022fb0 <__aeabi_atexit>:
 8022fb0:	460b      	mov	r3, r1
 8022fb2:	4601      	mov	r1, r0
 8022fb4:	4618      	mov	r0, r3
 8022fb6:	f000 bc59 	b.w	802386c <__cxa_atexit>

08022fba <_ZdlPvj>:
 8022fba:	f000 b812 	b.w	8022fe2 <_ZdlPv>

08022fbe <__cxa_guard_acquire>:
 8022fbe:	6802      	ldr	r2, [r0, #0]
 8022fc0:	07d2      	lsls	r2, r2, #31
 8022fc2:	4603      	mov	r3, r0
 8022fc4:	d405      	bmi.n	8022fd2 <__cxa_guard_acquire+0x14>
 8022fc6:	7842      	ldrb	r2, [r0, #1]
 8022fc8:	b102      	cbz	r2, 8022fcc <__cxa_guard_acquire+0xe>
 8022fca:	deff      	udf	#255	@ 0xff
 8022fcc:	2001      	movs	r0, #1
 8022fce:	7058      	strb	r0, [r3, #1]
 8022fd0:	4770      	bx	lr
 8022fd2:	2000      	movs	r0, #0
 8022fd4:	4770      	bx	lr

08022fd6 <__cxa_guard_release>:
 8022fd6:	2301      	movs	r3, #1
 8022fd8:	6003      	str	r3, [r0, #0]
 8022fda:	4770      	bx	lr

08022fdc <__cxa_pure_virtual>:
 8022fdc:	b508      	push	{r3, lr}
 8022fde:	f000 f80f 	bl	8023000 <_ZSt9terminatev>

08022fe2 <_ZdlPv>:
 8022fe2:	f000 bb8d 	b.w	8023700 <free>

08022fe6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8022fe6:	b508      	push	{r3, lr}
 8022fe8:	4780      	blx	r0
 8022fea:	f000 fb56 	bl	802369a <abort>
	...

08022ff0 <_ZSt13get_terminatev>:
 8022ff0:	4b02      	ldr	r3, [pc, #8]	@ (8022ffc <_ZSt13get_terminatev+0xc>)
 8022ff2:	6818      	ldr	r0, [r3, #0]
 8022ff4:	f3bf 8f5b 	dmb	ish
 8022ff8:	4770      	bx	lr
 8022ffa:	bf00      	nop
 8022ffc:	240000d8 	.word	0x240000d8

08023000 <_ZSt9terminatev>:
 8023000:	b508      	push	{r3, lr}
 8023002:	f7ff fff5 	bl	8022ff0 <_ZSt13get_terminatev>
 8023006:	f7ff ffee 	bl	8022fe6 <_ZN10__cxxabiv111__terminateEPFvvE>

0802300a <atan2f>:
 802300a:	f000 b9cd 	b.w	80233a8 <__ieee754_atan2f>
	...

08023010 <sqrtf>:
 8023010:	b508      	push	{r3, lr}
 8023012:	ed2d 8b02 	vpush	{d8}
 8023016:	eeb0 8a40 	vmov.f32	s16, s0
 802301a:	f000 f9c2 	bl	80233a2 <__ieee754_sqrtf>
 802301e:	eeb4 8a48 	vcmp.f32	s16, s16
 8023022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023026:	d60c      	bvs.n	8023042 <sqrtf+0x32>
 8023028:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8023048 <sqrtf+0x38>
 802302c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8023030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023034:	d505      	bpl.n	8023042 <sqrtf+0x32>
 8023036:	f000 fe9b 	bl	8023d70 <__errno>
 802303a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802303e:	2321      	movs	r3, #33	@ 0x21
 8023040:	6003      	str	r3, [r0, #0]
 8023042:	ecbd 8b02 	vpop	{d8}
 8023046:	bd08      	pop	{r3, pc}
 8023048:	00000000 	.word	0x00000000

0802304c <sinf_poly>:
 802304c:	07cb      	lsls	r3, r1, #31
 802304e:	d412      	bmi.n	8023076 <sinf_poly+0x2a>
 8023050:	ee21 5b00 	vmul.f64	d5, d1, d0
 8023054:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8023058:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 802305c:	eea6 7b01 	vfma.f64	d7, d6, d1
 8023060:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8023064:	ee21 1b05 	vmul.f64	d1, d1, d5
 8023068:	eea6 0b05 	vfma.f64	d0, d6, d5
 802306c:	eea7 0b01 	vfma.f64	d0, d7, d1
 8023070:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8023074:	4770      	bx	lr
 8023076:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 802307a:	ee21 5b01 	vmul.f64	d5, d1, d1
 802307e:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8023082:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8023086:	eea1 7b06 	vfma.f64	d7, d1, d6
 802308a:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802308e:	eea1 0b06 	vfma.f64	d0, d1, d6
 8023092:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8023096:	ee21 1b05 	vmul.f64	d1, d1, d5
 802309a:	eea5 0b06 	vfma.f64	d0, d5, d6
 802309e:	e7e5      	b.n	802306c <sinf_poly+0x20>

080230a0 <sinf>:
 80230a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80230a2:	ee10 4a10 	vmov	r4, s0
 80230a6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80230aa:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80230ae:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80230b2:	eef0 7a40 	vmov.f32	s15, s0
 80230b6:	d218      	bcs.n	80230ea <sinf+0x4a>
 80230b8:	ee26 1b06 	vmul.f64	d1, d6, d6
 80230bc:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80230c0:	d20a      	bcs.n	80230d8 <sinf+0x38>
 80230c2:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80230c6:	d103      	bne.n	80230d0 <sinf+0x30>
 80230c8:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 80230cc:	ed8d 1a01 	vstr	s2, [sp, #4]
 80230d0:	eeb0 0a67 	vmov.f32	s0, s15
 80230d4:	b003      	add	sp, #12
 80230d6:	bd30      	pop	{r4, r5, pc}
 80230d8:	483b      	ldr	r0, [pc, #236]	@ (80231c8 <sinf+0x128>)
 80230da:	eeb0 0b46 	vmov.f64	d0, d6
 80230de:	2100      	movs	r1, #0
 80230e0:	b003      	add	sp, #12
 80230e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80230e6:	f7ff bfb1 	b.w	802304c <sinf_poly>
 80230ea:	f240 422e 	movw	r2, #1070	@ 0x42e
 80230ee:	4293      	cmp	r3, r2
 80230f0:	d824      	bhi.n	802313c <sinf+0x9c>
 80230f2:	4b35      	ldr	r3, [pc, #212]	@ (80231c8 <sinf+0x128>)
 80230f4:	ed93 7b08 	vldr	d7, [r3, #32]
 80230f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80230fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8023100:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8023104:	ee17 1a90 	vmov	r1, s15
 8023108:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 802310c:	1609      	asrs	r1, r1, #24
 802310e:	ee07 1a90 	vmov	s15, r1
 8023112:	f001 0203 	and.w	r2, r1, #3
 8023116:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802311a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802311e:	ed92 0b00 	vldr	d0, [r2]
 8023122:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8023126:	f011 0f02 	tst.w	r1, #2
 802312a:	eea5 6b47 	vfms.f64	d6, d5, d7
 802312e:	bf08      	it	eq
 8023130:	4618      	moveq	r0, r3
 8023132:	ee26 1b06 	vmul.f64	d1, d6, d6
 8023136:	ee20 0b06 	vmul.f64	d0, d0, d6
 802313a:	e7d1      	b.n	80230e0 <sinf+0x40>
 802313c:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8023140:	d237      	bcs.n	80231b2 <sinf+0x112>
 8023142:	4922      	ldr	r1, [pc, #136]	@ (80231cc <sinf+0x12c>)
 8023144:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8023148:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 802314c:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8023150:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8023154:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8023158:	6a10      	ldr	r0, [r2, #32]
 802315a:	6912      	ldr	r2, [r2, #16]
 802315c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8023160:	40ab      	lsls	r3, r5
 8023162:	fba0 5003 	umull	r5, r0, r0, r3
 8023166:	4359      	muls	r1, r3
 8023168:	fbe3 0102 	umlal	r0, r1, r3, r2
 802316c:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8023170:	0f9d      	lsrs	r5, r3, #30
 8023172:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8023176:	1ac9      	subs	r1, r1, r3
 8023178:	f7dd fa90 	bl	800069c <__aeabi_l2d>
 802317c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8023180:	4b11      	ldr	r3, [pc, #68]	@ (80231c8 <sinf+0x128>)
 8023182:	f004 0203 	and.w	r2, r4, #3
 8023186:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802318a:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80231c0 <sinf+0x120>
 802318e:	ed92 0b00 	vldr	d0, [r2]
 8023192:	ec41 0b17 	vmov	d7, r0, r1
 8023196:	f014 0f02 	tst.w	r4, #2
 802319a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802319e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80231a2:	4629      	mov	r1, r5
 80231a4:	bf08      	it	eq
 80231a6:	4618      	moveq	r0, r3
 80231a8:	ee27 1b07 	vmul.f64	d1, d7, d7
 80231ac:	ee20 0b07 	vmul.f64	d0, d0, d7
 80231b0:	e796      	b.n	80230e0 <sinf+0x40>
 80231b2:	b003      	add	sp, #12
 80231b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80231b8:	f000 b8e4 	b.w	8023384 <__math_invalidf>
 80231bc:	f3af 8000 	nop.w
 80231c0:	54442d18 	.word	0x54442d18
 80231c4:	3c1921fb 	.word	0x3c1921fb
 80231c8:	08027850 	.word	0x08027850
 80231cc:	080277ec 	.word	0x080277ec

080231d0 <sinf_poly>:
 80231d0:	07cb      	lsls	r3, r1, #31
 80231d2:	d412      	bmi.n	80231fa <sinf_poly+0x2a>
 80231d4:	ee21 5b00 	vmul.f64	d5, d1, d0
 80231d8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80231dc:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80231e0:	eea6 7b01 	vfma.f64	d7, d6, d1
 80231e4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80231e8:	ee21 1b05 	vmul.f64	d1, d1, d5
 80231ec:	eea6 0b05 	vfma.f64	d0, d6, d5
 80231f0:	eea7 0b01 	vfma.f64	d0, d7, d1
 80231f4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80231f8:	4770      	bx	lr
 80231fa:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80231fe:	ee21 5b01 	vmul.f64	d5, d1, d1
 8023202:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8023206:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 802320a:	eea1 7b06 	vfma.f64	d7, d1, d6
 802320e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8023212:	eea1 0b06 	vfma.f64	d0, d1, d6
 8023216:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 802321a:	ee21 1b05 	vmul.f64	d1, d1, d5
 802321e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8023222:	e7e5      	b.n	80231f0 <sinf_poly+0x20>
 8023224:	0000      	movs	r0, r0
	...

08023228 <cosf>:
 8023228:	b538      	push	{r3, r4, r5, lr}
 802322a:	ee10 4a10 	vmov	r4, s0
 802322e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8023232:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8023236:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 802323a:	d21f      	bcs.n	802327c <cosf+0x54>
 802323c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8023240:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8023244:	f0c0 8082 	bcc.w	802334c <cosf+0x124>
 8023248:	ee27 4b07 	vmul.f64	d4, d7, d7
 802324c:	4b44      	ldr	r3, [pc, #272]	@ (8023360 <cosf+0x138>)
 802324e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8023252:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8023256:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 802325a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802325e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8023262:	eea7 0b05 	vfma.f64	d0, d7, d5
 8023266:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 802326a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802326e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8023272:	eea6 0b07 	vfma.f64	d0, d6, d7
 8023276:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802327a:	bd38      	pop	{r3, r4, r5, pc}
 802327c:	f240 422e 	movw	r2, #1070	@ 0x42e
 8023280:	4293      	cmp	r3, r2
 8023282:	d829      	bhi.n	80232d8 <cosf+0xb0>
 8023284:	4b36      	ldr	r3, [pc, #216]	@ (8023360 <cosf+0x138>)
 8023286:	ed93 6b08 	vldr	d6, [r3, #32]
 802328a:	ee27 6b06 	vmul.f64	d6, d7, d6
 802328e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8023292:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8023296:	ee16 1a90 	vmov	r1, s13
 802329a:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 802329e:	1609      	asrs	r1, r1, #24
 80232a0:	ee06 1a90 	vmov	s13, r1
 80232a4:	f001 0203 	and.w	r2, r1, #3
 80232a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80232ac:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80232b0:	ed92 0b00 	vldr	d0, [r2]
 80232b4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80232b8:	f011 0f02 	tst.w	r1, #2
 80232bc:	f081 0101 	eor.w	r1, r1, #1
 80232c0:	eea5 7b46 	vfms.f64	d7, d5, d6
 80232c4:	bf08      	it	eq
 80232c6:	4618      	moveq	r0, r3
 80232c8:	ee27 1b07 	vmul.f64	d1, d7, d7
 80232cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80232d0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80232d4:	f7ff bf7c 	b.w	80231d0 <sinf_poly>
 80232d8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80232dc:	d232      	bcs.n	8023344 <cosf+0x11c>
 80232de:	4921      	ldr	r1, [pc, #132]	@ (8023364 <cosf+0x13c>)
 80232e0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80232e4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80232e8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80232ec:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80232f0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80232f4:	6a10      	ldr	r0, [r2, #32]
 80232f6:	6912      	ldr	r2, [r2, #16]
 80232f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80232fc:	40ab      	lsls	r3, r5
 80232fe:	fba0 5003 	umull	r5, r0, r0, r3
 8023302:	4359      	muls	r1, r3
 8023304:	fbe3 0102 	umlal	r0, r1, r3, r2
 8023308:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802330c:	0f9d      	lsrs	r5, r3, #30
 802330e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8023312:	1ac9      	subs	r1, r1, r3
 8023314:	f7dd f9c2 	bl	800069c <__aeabi_l2d>
 8023318:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802331c:	4b10      	ldr	r3, [pc, #64]	@ (8023360 <cosf+0x138>)
 802331e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8023358 <cosf+0x130>
 8023322:	ec41 0b17 	vmov	d7, r0, r1
 8023326:	f004 0203 	and.w	r2, r4, #3
 802332a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802332e:	ed92 0b00 	vldr	d0, [r2]
 8023332:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023336:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802333a:	f014 0f02 	tst.w	r4, #2
 802333e:	f085 0101 	eor.w	r1, r5, #1
 8023342:	e7bf      	b.n	80232c4 <cosf+0x9c>
 8023344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023348:	f000 b81c 	b.w	8023384 <__math_invalidf>
 802334c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8023350:	e793      	b.n	802327a <cosf+0x52>
 8023352:	bf00      	nop
 8023354:	f3af 8000 	nop.w
 8023358:	54442d18 	.word	0x54442d18
 802335c:	3c1921fb 	.word	0x3c1921fb
 8023360:	08027850 	.word	0x08027850
 8023364:	080277ec 	.word	0x080277ec

08023368 <with_errnof>:
 8023368:	b510      	push	{r4, lr}
 802336a:	ed2d 8b02 	vpush	{d8}
 802336e:	eeb0 8a40 	vmov.f32	s16, s0
 8023372:	4604      	mov	r4, r0
 8023374:	f000 fcfc 	bl	8023d70 <__errno>
 8023378:	eeb0 0a48 	vmov.f32	s0, s16
 802337c:	ecbd 8b02 	vpop	{d8}
 8023380:	6004      	str	r4, [r0, #0]
 8023382:	bd10      	pop	{r4, pc}

08023384 <__math_invalidf>:
 8023384:	eef0 7a40 	vmov.f32	s15, s0
 8023388:	ee30 7a40 	vsub.f32	s14, s0, s0
 802338c:	eef4 7a67 	vcmp.f32	s15, s15
 8023390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023394:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8023398:	d602      	bvs.n	80233a0 <__math_invalidf+0x1c>
 802339a:	2021      	movs	r0, #33	@ 0x21
 802339c:	f7ff bfe4 	b.w	8023368 <with_errnof>
 80233a0:	4770      	bx	lr

080233a2 <__ieee754_sqrtf>:
 80233a2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80233a6:	4770      	bx	lr

080233a8 <__ieee754_atan2f>:
 80233a8:	ee10 2a90 	vmov	r2, s1
 80233ac:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80233b0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80233b4:	b510      	push	{r4, lr}
 80233b6:	eef0 7a40 	vmov.f32	s15, s0
 80233ba:	d806      	bhi.n	80233ca <__ieee754_atan2f+0x22>
 80233bc:	ee10 0a10 	vmov	r0, s0
 80233c0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80233c4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80233c8:	d904      	bls.n	80233d4 <__ieee754_atan2f+0x2c>
 80233ca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80233ce:	eeb0 0a67 	vmov.f32	s0, s15
 80233d2:	bd10      	pop	{r4, pc}
 80233d4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80233d8:	d103      	bne.n	80233e2 <__ieee754_atan2f+0x3a>
 80233da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80233de:	f000 b881 	b.w	80234e4 <atanf>
 80233e2:	1794      	asrs	r4, r2, #30
 80233e4:	f004 0402 	and.w	r4, r4, #2
 80233e8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80233ec:	b93b      	cbnz	r3, 80233fe <__ieee754_atan2f+0x56>
 80233ee:	2c02      	cmp	r4, #2
 80233f0:	d05c      	beq.n	80234ac <__ieee754_atan2f+0x104>
 80233f2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80234c0 <__ieee754_atan2f+0x118>
 80233f6:	2c03      	cmp	r4, #3
 80233f8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80233fc:	e7e7      	b.n	80233ce <__ieee754_atan2f+0x26>
 80233fe:	b939      	cbnz	r1, 8023410 <__ieee754_atan2f+0x68>
 8023400:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80234c4 <__ieee754_atan2f+0x11c>
 8023404:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80234c8 <__ieee754_atan2f+0x120>
 8023408:	2800      	cmp	r0, #0
 802340a:	fe67 7a27 	vselge.f32	s15, s14, s15
 802340e:	e7de      	b.n	80233ce <__ieee754_atan2f+0x26>
 8023410:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8023414:	d110      	bne.n	8023438 <__ieee754_atan2f+0x90>
 8023416:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802341a:	f104 34ff 	add.w	r4, r4, #4294967295
 802341e:	d107      	bne.n	8023430 <__ieee754_atan2f+0x88>
 8023420:	2c02      	cmp	r4, #2
 8023422:	d846      	bhi.n	80234b2 <__ieee754_atan2f+0x10a>
 8023424:	4b29      	ldr	r3, [pc, #164]	@ (80234cc <__ieee754_atan2f+0x124>)
 8023426:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802342a:	edd3 7a00 	vldr	s15, [r3]
 802342e:	e7ce      	b.n	80233ce <__ieee754_atan2f+0x26>
 8023430:	2c02      	cmp	r4, #2
 8023432:	d841      	bhi.n	80234b8 <__ieee754_atan2f+0x110>
 8023434:	4b26      	ldr	r3, [pc, #152]	@ (80234d0 <__ieee754_atan2f+0x128>)
 8023436:	e7f6      	b.n	8023426 <__ieee754_atan2f+0x7e>
 8023438:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802343c:	d0e0      	beq.n	8023400 <__ieee754_atan2f+0x58>
 802343e:	1a5b      	subs	r3, r3, r1
 8023440:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8023444:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8023448:	da1a      	bge.n	8023480 <__ieee754_atan2f+0xd8>
 802344a:	2a00      	cmp	r2, #0
 802344c:	da01      	bge.n	8023452 <__ieee754_atan2f+0xaa>
 802344e:	313c      	adds	r1, #60	@ 0x3c
 8023450:	db19      	blt.n	8023486 <__ieee754_atan2f+0xde>
 8023452:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8023456:	f000 f919 	bl	802368c <fabsf>
 802345a:	f000 f843 	bl	80234e4 <atanf>
 802345e:	eef0 7a40 	vmov.f32	s15, s0
 8023462:	2c01      	cmp	r4, #1
 8023464:	d012      	beq.n	802348c <__ieee754_atan2f+0xe4>
 8023466:	2c02      	cmp	r4, #2
 8023468:	d017      	beq.n	802349a <__ieee754_atan2f+0xf2>
 802346a:	2c00      	cmp	r4, #0
 802346c:	d0af      	beq.n	80233ce <__ieee754_atan2f+0x26>
 802346e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80234d4 <__ieee754_atan2f+0x12c>
 8023472:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023476:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80234d8 <__ieee754_atan2f+0x130>
 802347a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802347e:	e7a6      	b.n	80233ce <__ieee754_atan2f+0x26>
 8023480:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80234c8 <__ieee754_atan2f+0x120>
 8023484:	e7ed      	b.n	8023462 <__ieee754_atan2f+0xba>
 8023486:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80234dc <__ieee754_atan2f+0x134>
 802348a:	e7ea      	b.n	8023462 <__ieee754_atan2f+0xba>
 802348c:	ee17 3a90 	vmov	r3, s15
 8023490:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8023494:	ee07 3a90 	vmov	s15, r3
 8023498:	e799      	b.n	80233ce <__ieee754_atan2f+0x26>
 802349a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80234d4 <__ieee754_atan2f+0x12c>
 802349e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80234a2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80234d8 <__ieee754_atan2f+0x130>
 80234a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80234aa:	e790      	b.n	80233ce <__ieee754_atan2f+0x26>
 80234ac:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80234d8 <__ieee754_atan2f+0x130>
 80234b0:	e78d      	b.n	80233ce <__ieee754_atan2f+0x26>
 80234b2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80234e0 <__ieee754_atan2f+0x138>
 80234b6:	e78a      	b.n	80233ce <__ieee754_atan2f+0x26>
 80234b8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80234dc <__ieee754_atan2f+0x134>
 80234bc:	e787      	b.n	80233ce <__ieee754_atan2f+0x26>
 80234be:	bf00      	nop
 80234c0:	c0490fdb 	.word	0xc0490fdb
 80234c4:	bfc90fdb 	.word	0xbfc90fdb
 80234c8:	3fc90fdb 	.word	0x3fc90fdb
 80234cc:	0802793c 	.word	0x0802793c
 80234d0:	08027930 	.word	0x08027930
 80234d4:	33bbbd2e 	.word	0x33bbbd2e
 80234d8:	40490fdb 	.word	0x40490fdb
 80234dc:	00000000 	.word	0x00000000
 80234e0:	3f490fdb 	.word	0x3f490fdb

080234e4 <atanf>:
 80234e4:	b538      	push	{r3, r4, r5, lr}
 80234e6:	ee10 5a10 	vmov	r5, s0
 80234ea:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80234ee:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80234f2:	eef0 7a40 	vmov.f32	s15, s0
 80234f6:	d30f      	bcc.n	8023518 <atanf+0x34>
 80234f8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80234fc:	d904      	bls.n	8023508 <atanf+0x24>
 80234fe:	ee70 7a00 	vadd.f32	s15, s0, s0
 8023502:	eeb0 0a67 	vmov.f32	s0, s15
 8023506:	bd38      	pop	{r3, r4, r5, pc}
 8023508:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8023640 <atanf+0x15c>
 802350c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8023644 <atanf+0x160>
 8023510:	2d00      	cmp	r5, #0
 8023512:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8023516:	e7f4      	b.n	8023502 <atanf+0x1e>
 8023518:	4b4b      	ldr	r3, [pc, #300]	@ (8023648 <atanf+0x164>)
 802351a:	429c      	cmp	r4, r3
 802351c:	d810      	bhi.n	8023540 <atanf+0x5c>
 802351e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8023522:	d20a      	bcs.n	802353a <atanf+0x56>
 8023524:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802364c <atanf+0x168>
 8023528:	ee30 7a07 	vadd.f32	s14, s0, s14
 802352c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8023530:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8023534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023538:	dce3      	bgt.n	8023502 <atanf+0x1e>
 802353a:	f04f 33ff 	mov.w	r3, #4294967295
 802353e:	e013      	b.n	8023568 <atanf+0x84>
 8023540:	f000 f8a4 	bl	802368c <fabsf>
 8023544:	4b42      	ldr	r3, [pc, #264]	@ (8023650 <atanf+0x16c>)
 8023546:	429c      	cmp	r4, r3
 8023548:	d84f      	bhi.n	80235ea <atanf+0x106>
 802354a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802354e:	429c      	cmp	r4, r3
 8023550:	d841      	bhi.n	80235d6 <atanf+0xf2>
 8023552:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8023556:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802355a:	eea0 7a27 	vfma.f32	s14, s0, s15
 802355e:	2300      	movs	r3, #0
 8023560:	ee30 0a27 	vadd.f32	s0, s0, s15
 8023564:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023568:	1c5a      	adds	r2, r3, #1
 802356a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802356e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8023654 <atanf+0x170>
 8023572:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8023658 <atanf+0x174>
 8023576:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 802365c <atanf+0x178>
 802357a:	ee66 6a06 	vmul.f32	s13, s12, s12
 802357e:	eee6 5a87 	vfma.f32	s11, s13, s14
 8023582:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8023660 <atanf+0x17c>
 8023586:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802358a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8023664 <atanf+0x180>
 802358e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8023592:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8023668 <atanf+0x184>
 8023596:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802359a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802366c <atanf+0x188>
 802359e:	eee7 5a26 	vfma.f32	s11, s14, s13
 80235a2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8023670 <atanf+0x18c>
 80235a6:	eea6 5a87 	vfma.f32	s10, s13, s14
 80235aa:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8023674 <atanf+0x190>
 80235ae:	eea5 7a26 	vfma.f32	s14, s10, s13
 80235b2:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8023678 <atanf+0x194>
 80235b6:	eea7 5a26 	vfma.f32	s10, s14, s13
 80235ba:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802367c <atanf+0x198>
 80235be:	eea5 7a26 	vfma.f32	s14, s10, s13
 80235c2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80235c6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80235ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80235ce:	d121      	bne.n	8023614 <atanf+0x130>
 80235d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80235d4:	e795      	b.n	8023502 <atanf+0x1e>
 80235d6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80235da:	ee30 7a67 	vsub.f32	s14, s0, s15
 80235de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80235e2:	2301      	movs	r3, #1
 80235e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80235e8:	e7be      	b.n	8023568 <atanf+0x84>
 80235ea:	4b25      	ldr	r3, [pc, #148]	@ (8023680 <atanf+0x19c>)
 80235ec:	429c      	cmp	r4, r3
 80235ee:	d80b      	bhi.n	8023608 <atanf+0x124>
 80235f0:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80235f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80235f8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80235fc:	2302      	movs	r3, #2
 80235fe:	ee70 6a67 	vsub.f32	s13, s0, s15
 8023602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8023606:	e7af      	b.n	8023568 <atanf+0x84>
 8023608:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802360c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023610:	2303      	movs	r3, #3
 8023612:	e7a9      	b.n	8023568 <atanf+0x84>
 8023614:	4a1b      	ldr	r2, [pc, #108]	@ (8023684 <atanf+0x1a0>)
 8023616:	491c      	ldr	r1, [pc, #112]	@ (8023688 <atanf+0x1a4>)
 8023618:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802361c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8023620:	edd3 6a00 	vldr	s13, [r3]
 8023624:	ee37 7a66 	vsub.f32	s14, s14, s13
 8023628:	2d00      	cmp	r5, #0
 802362a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802362e:	edd2 7a00 	vldr	s15, [r2]
 8023632:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023636:	bfb8      	it	lt
 8023638:	eef1 7a67 	vneglt.f32	s15, s15
 802363c:	e761      	b.n	8023502 <atanf+0x1e>
 802363e:	bf00      	nop
 8023640:	bfc90fdb 	.word	0xbfc90fdb
 8023644:	3fc90fdb 	.word	0x3fc90fdb
 8023648:	3edfffff 	.word	0x3edfffff
 802364c:	7149f2ca 	.word	0x7149f2ca
 8023650:	3f97ffff 	.word	0x3f97ffff
 8023654:	3c8569d7 	.word	0x3c8569d7
 8023658:	3d4bda59 	.word	0x3d4bda59
 802365c:	bd6ef16b 	.word	0xbd6ef16b
 8023660:	3d886b35 	.word	0x3d886b35
 8023664:	3dba2e6e 	.word	0x3dba2e6e
 8023668:	3e124925 	.word	0x3e124925
 802366c:	3eaaaaab 	.word	0x3eaaaaab
 8023670:	bd15a221 	.word	0xbd15a221
 8023674:	bd9d8795 	.word	0xbd9d8795
 8023678:	bde38e38 	.word	0xbde38e38
 802367c:	be4ccccd 	.word	0xbe4ccccd
 8023680:	401bffff 	.word	0x401bffff
 8023684:	08027958 	.word	0x08027958
 8023688:	08027948 	.word	0x08027948

0802368c <fabsf>:
 802368c:	ee10 3a10 	vmov	r3, s0
 8023690:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8023694:	ee00 3a10 	vmov	s0, r3
 8023698:	4770      	bx	lr

0802369a <abort>:
 802369a:	b508      	push	{r3, lr}
 802369c:	2006      	movs	r0, #6
 802369e:	f000 faf5 	bl	8023c8c <raise>
 80236a2:	2001      	movs	r0, #1
 80236a4:	f7de fa48 	bl	8001b38 <_exit>

080236a8 <__assert_func>:
 80236a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80236aa:	4614      	mov	r4, r2
 80236ac:	461a      	mov	r2, r3
 80236ae:	4b09      	ldr	r3, [pc, #36]	@ (80236d4 <__assert_func+0x2c>)
 80236b0:	681b      	ldr	r3, [r3, #0]
 80236b2:	4605      	mov	r5, r0
 80236b4:	68d8      	ldr	r0, [r3, #12]
 80236b6:	b14c      	cbz	r4, 80236cc <__assert_func+0x24>
 80236b8:	4b07      	ldr	r3, [pc, #28]	@ (80236d8 <__assert_func+0x30>)
 80236ba:	9100      	str	r1, [sp, #0]
 80236bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80236c0:	4906      	ldr	r1, [pc, #24]	@ (80236dc <__assert_func+0x34>)
 80236c2:	462b      	mov	r3, r5
 80236c4:	f000 f984 	bl	80239d0 <fiprintf>
 80236c8:	f7ff ffe7 	bl	802369a <abort>
 80236cc:	4b04      	ldr	r3, [pc, #16]	@ (80236e0 <__assert_func+0x38>)
 80236ce:	461c      	mov	r4, r3
 80236d0:	e7f3      	b.n	80236ba <__assert_func+0x12>
 80236d2:	bf00      	nop
 80236d4:	240000e8 	.word	0x240000e8
 80236d8:	080265db 	.word	0x080265db
 80236dc:	080265e8 	.word	0x080265e8
 80236e0:	08026616 	.word	0x08026616

080236e4 <atexit>:
 80236e4:	2300      	movs	r3, #0
 80236e6:	4601      	mov	r1, r0
 80236e8:	461a      	mov	r2, r3
 80236ea:	4618      	mov	r0, r3
 80236ec:	f000 bb7c 	b.w	8023de8 <__register_exitproc>

080236f0 <malloc>:
 80236f0:	4b02      	ldr	r3, [pc, #8]	@ (80236fc <malloc+0xc>)
 80236f2:	4601      	mov	r1, r0
 80236f4:	6818      	ldr	r0, [r3, #0]
 80236f6:	f000 b82d 	b.w	8023754 <_malloc_r>
 80236fa:	bf00      	nop
 80236fc:	240000e8 	.word	0x240000e8

08023700 <free>:
 8023700:	4b02      	ldr	r3, [pc, #8]	@ (802370c <free+0xc>)
 8023702:	4601      	mov	r1, r0
 8023704:	6818      	ldr	r0, [r3, #0]
 8023706:	f000 bbcb 	b.w	8023ea0 <_free_r>
 802370a:	bf00      	nop
 802370c:	240000e8 	.word	0x240000e8

08023710 <sbrk_aligned>:
 8023710:	b570      	push	{r4, r5, r6, lr}
 8023712:	4e0f      	ldr	r6, [pc, #60]	@ (8023750 <sbrk_aligned+0x40>)
 8023714:	460c      	mov	r4, r1
 8023716:	6831      	ldr	r1, [r6, #0]
 8023718:	4605      	mov	r5, r0
 802371a:	b911      	cbnz	r1, 8023722 <sbrk_aligned+0x12>
 802371c:	f000 fb06 	bl	8023d2c <_sbrk_r>
 8023720:	6030      	str	r0, [r6, #0]
 8023722:	4621      	mov	r1, r4
 8023724:	4628      	mov	r0, r5
 8023726:	f000 fb01 	bl	8023d2c <_sbrk_r>
 802372a:	1c43      	adds	r3, r0, #1
 802372c:	d103      	bne.n	8023736 <sbrk_aligned+0x26>
 802372e:	f04f 34ff 	mov.w	r4, #4294967295
 8023732:	4620      	mov	r0, r4
 8023734:	bd70      	pop	{r4, r5, r6, pc}
 8023736:	1cc4      	adds	r4, r0, #3
 8023738:	f024 0403 	bic.w	r4, r4, #3
 802373c:	42a0      	cmp	r0, r4
 802373e:	d0f8      	beq.n	8023732 <sbrk_aligned+0x22>
 8023740:	1a21      	subs	r1, r4, r0
 8023742:	4628      	mov	r0, r5
 8023744:	f000 faf2 	bl	8023d2c <_sbrk_r>
 8023748:	3001      	adds	r0, #1
 802374a:	d1f2      	bne.n	8023732 <sbrk_aligned+0x22>
 802374c:	e7ef      	b.n	802372e <sbrk_aligned+0x1e>
 802374e:	bf00      	nop
 8023750:	24026008 	.word	0x24026008

08023754 <_malloc_r>:
 8023754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023758:	1ccd      	adds	r5, r1, #3
 802375a:	f025 0503 	bic.w	r5, r5, #3
 802375e:	3508      	adds	r5, #8
 8023760:	2d0c      	cmp	r5, #12
 8023762:	bf38      	it	cc
 8023764:	250c      	movcc	r5, #12
 8023766:	2d00      	cmp	r5, #0
 8023768:	4606      	mov	r6, r0
 802376a:	db01      	blt.n	8023770 <_malloc_r+0x1c>
 802376c:	42a9      	cmp	r1, r5
 802376e:	d904      	bls.n	802377a <_malloc_r+0x26>
 8023770:	230c      	movs	r3, #12
 8023772:	6033      	str	r3, [r6, #0]
 8023774:	2000      	movs	r0, #0
 8023776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802377a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023850 <_malloc_r+0xfc>
 802377e:	f000 f869 	bl	8023854 <__malloc_lock>
 8023782:	f8d8 3000 	ldr.w	r3, [r8]
 8023786:	461c      	mov	r4, r3
 8023788:	bb44      	cbnz	r4, 80237dc <_malloc_r+0x88>
 802378a:	4629      	mov	r1, r5
 802378c:	4630      	mov	r0, r6
 802378e:	f7ff ffbf 	bl	8023710 <sbrk_aligned>
 8023792:	1c43      	adds	r3, r0, #1
 8023794:	4604      	mov	r4, r0
 8023796:	d158      	bne.n	802384a <_malloc_r+0xf6>
 8023798:	f8d8 4000 	ldr.w	r4, [r8]
 802379c:	4627      	mov	r7, r4
 802379e:	2f00      	cmp	r7, #0
 80237a0:	d143      	bne.n	802382a <_malloc_r+0xd6>
 80237a2:	2c00      	cmp	r4, #0
 80237a4:	d04b      	beq.n	802383e <_malloc_r+0xea>
 80237a6:	6823      	ldr	r3, [r4, #0]
 80237a8:	4639      	mov	r1, r7
 80237aa:	4630      	mov	r0, r6
 80237ac:	eb04 0903 	add.w	r9, r4, r3
 80237b0:	f000 fabc 	bl	8023d2c <_sbrk_r>
 80237b4:	4581      	cmp	r9, r0
 80237b6:	d142      	bne.n	802383e <_malloc_r+0xea>
 80237b8:	6821      	ldr	r1, [r4, #0]
 80237ba:	1a6d      	subs	r5, r5, r1
 80237bc:	4629      	mov	r1, r5
 80237be:	4630      	mov	r0, r6
 80237c0:	f7ff ffa6 	bl	8023710 <sbrk_aligned>
 80237c4:	3001      	adds	r0, #1
 80237c6:	d03a      	beq.n	802383e <_malloc_r+0xea>
 80237c8:	6823      	ldr	r3, [r4, #0]
 80237ca:	442b      	add	r3, r5
 80237cc:	6023      	str	r3, [r4, #0]
 80237ce:	f8d8 3000 	ldr.w	r3, [r8]
 80237d2:	685a      	ldr	r2, [r3, #4]
 80237d4:	bb62      	cbnz	r2, 8023830 <_malloc_r+0xdc>
 80237d6:	f8c8 7000 	str.w	r7, [r8]
 80237da:	e00f      	b.n	80237fc <_malloc_r+0xa8>
 80237dc:	6822      	ldr	r2, [r4, #0]
 80237de:	1b52      	subs	r2, r2, r5
 80237e0:	d420      	bmi.n	8023824 <_malloc_r+0xd0>
 80237e2:	2a0b      	cmp	r2, #11
 80237e4:	d917      	bls.n	8023816 <_malloc_r+0xc2>
 80237e6:	1961      	adds	r1, r4, r5
 80237e8:	42a3      	cmp	r3, r4
 80237ea:	6025      	str	r5, [r4, #0]
 80237ec:	bf18      	it	ne
 80237ee:	6059      	strne	r1, [r3, #4]
 80237f0:	6863      	ldr	r3, [r4, #4]
 80237f2:	bf08      	it	eq
 80237f4:	f8c8 1000 	streq.w	r1, [r8]
 80237f8:	5162      	str	r2, [r4, r5]
 80237fa:	604b      	str	r3, [r1, #4]
 80237fc:	4630      	mov	r0, r6
 80237fe:	f000 f82f 	bl	8023860 <__malloc_unlock>
 8023802:	f104 000b 	add.w	r0, r4, #11
 8023806:	1d23      	adds	r3, r4, #4
 8023808:	f020 0007 	bic.w	r0, r0, #7
 802380c:	1ac2      	subs	r2, r0, r3
 802380e:	bf1c      	itt	ne
 8023810:	1a1b      	subne	r3, r3, r0
 8023812:	50a3      	strne	r3, [r4, r2]
 8023814:	e7af      	b.n	8023776 <_malloc_r+0x22>
 8023816:	6862      	ldr	r2, [r4, #4]
 8023818:	42a3      	cmp	r3, r4
 802381a:	bf0c      	ite	eq
 802381c:	f8c8 2000 	streq.w	r2, [r8]
 8023820:	605a      	strne	r2, [r3, #4]
 8023822:	e7eb      	b.n	80237fc <_malloc_r+0xa8>
 8023824:	4623      	mov	r3, r4
 8023826:	6864      	ldr	r4, [r4, #4]
 8023828:	e7ae      	b.n	8023788 <_malloc_r+0x34>
 802382a:	463c      	mov	r4, r7
 802382c:	687f      	ldr	r7, [r7, #4]
 802382e:	e7b6      	b.n	802379e <_malloc_r+0x4a>
 8023830:	461a      	mov	r2, r3
 8023832:	685b      	ldr	r3, [r3, #4]
 8023834:	42a3      	cmp	r3, r4
 8023836:	d1fb      	bne.n	8023830 <_malloc_r+0xdc>
 8023838:	2300      	movs	r3, #0
 802383a:	6053      	str	r3, [r2, #4]
 802383c:	e7de      	b.n	80237fc <_malloc_r+0xa8>
 802383e:	230c      	movs	r3, #12
 8023840:	6033      	str	r3, [r6, #0]
 8023842:	4630      	mov	r0, r6
 8023844:	f000 f80c 	bl	8023860 <__malloc_unlock>
 8023848:	e794      	b.n	8023774 <_malloc_r+0x20>
 802384a:	6005      	str	r5, [r0, #0]
 802384c:	e7d6      	b.n	80237fc <_malloc_r+0xa8>
 802384e:	bf00      	nop
 8023850:	2402600c 	.word	0x2402600c

08023854 <__malloc_lock>:
 8023854:	4801      	ldr	r0, [pc, #4]	@ (802385c <__malloc_lock+0x8>)
 8023856:	f000 bab6 	b.w	8023dc6 <__retarget_lock_acquire_recursive>
 802385a:	bf00      	nop
 802385c:	24026150 	.word	0x24026150

08023860 <__malloc_unlock>:
 8023860:	4801      	ldr	r0, [pc, #4]	@ (8023868 <__malloc_unlock+0x8>)
 8023862:	f000 bab1 	b.w	8023dc8 <__retarget_lock_release_recursive>
 8023866:	bf00      	nop
 8023868:	24026150 	.word	0x24026150

0802386c <__cxa_atexit>:
 802386c:	b510      	push	{r4, lr}
 802386e:	4604      	mov	r4, r0
 8023870:	4804      	ldr	r0, [pc, #16]	@ (8023884 <__cxa_atexit+0x18>)
 8023872:	4613      	mov	r3, r2
 8023874:	b120      	cbz	r0, 8023880 <__cxa_atexit+0x14>
 8023876:	460a      	mov	r2, r1
 8023878:	2002      	movs	r0, #2
 802387a:	4621      	mov	r1, r4
 802387c:	f000 fab4 	bl	8023de8 <__register_exitproc>
 8023880:	bd10      	pop	{r4, pc}
 8023882:	bf00      	nop
 8023884:	08023de9 	.word	0x08023de9

08023888 <std>:
 8023888:	2300      	movs	r3, #0
 802388a:	b510      	push	{r4, lr}
 802388c:	4604      	mov	r4, r0
 802388e:	e9c0 3300 	strd	r3, r3, [r0]
 8023892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023896:	6083      	str	r3, [r0, #8]
 8023898:	8181      	strh	r1, [r0, #12]
 802389a:	6643      	str	r3, [r0, #100]	@ 0x64
 802389c:	81c2      	strh	r2, [r0, #14]
 802389e:	6183      	str	r3, [r0, #24]
 80238a0:	4619      	mov	r1, r3
 80238a2:	2208      	movs	r2, #8
 80238a4:	305c      	adds	r0, #92	@ 0x5c
 80238a6:	f000 f99b 	bl	8023be0 <memset>
 80238aa:	4b0d      	ldr	r3, [pc, #52]	@ (80238e0 <std+0x58>)
 80238ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80238ae:	4b0d      	ldr	r3, [pc, #52]	@ (80238e4 <std+0x5c>)
 80238b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80238b2:	4b0d      	ldr	r3, [pc, #52]	@ (80238e8 <std+0x60>)
 80238b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80238b6:	4b0d      	ldr	r3, [pc, #52]	@ (80238ec <std+0x64>)
 80238b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80238ba:	4b0d      	ldr	r3, [pc, #52]	@ (80238f0 <std+0x68>)
 80238bc:	6224      	str	r4, [r4, #32]
 80238be:	429c      	cmp	r4, r3
 80238c0:	d006      	beq.n	80238d0 <std+0x48>
 80238c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80238c6:	4294      	cmp	r4, r2
 80238c8:	d002      	beq.n	80238d0 <std+0x48>
 80238ca:	33d0      	adds	r3, #208	@ 0xd0
 80238cc:	429c      	cmp	r4, r3
 80238ce:	d105      	bne.n	80238dc <std+0x54>
 80238d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80238d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80238d8:	f000 ba74 	b.w	8023dc4 <__retarget_lock_init_recursive>
 80238dc:	bd10      	pop	{r4, pc}
 80238de:	bf00      	nop
 80238e0:	08023a31 	.word	0x08023a31
 80238e4:	08023a53 	.word	0x08023a53
 80238e8:	08023a8b 	.word	0x08023a8b
 80238ec:	08023aaf 	.word	0x08023aaf
 80238f0:	24026010 	.word	0x24026010

080238f4 <stdio_exit_handler>:
 80238f4:	4a02      	ldr	r2, [pc, #8]	@ (8023900 <stdio_exit_handler+0xc>)
 80238f6:	4903      	ldr	r1, [pc, #12]	@ (8023904 <stdio_exit_handler+0x10>)
 80238f8:	4803      	ldr	r0, [pc, #12]	@ (8023908 <stdio_exit_handler+0x14>)
 80238fa:	f000 b87b 	b.w	80239f4 <_fwalk_sglue>
 80238fe:	bf00      	nop
 8023900:	240000dc 	.word	0x240000dc
 8023904:	080245d9 	.word	0x080245d9
 8023908:	240000ec 	.word	0x240000ec

0802390c <cleanup_stdio>:
 802390c:	6841      	ldr	r1, [r0, #4]
 802390e:	4b0c      	ldr	r3, [pc, #48]	@ (8023940 <cleanup_stdio+0x34>)
 8023910:	4299      	cmp	r1, r3
 8023912:	b510      	push	{r4, lr}
 8023914:	4604      	mov	r4, r0
 8023916:	d001      	beq.n	802391c <cleanup_stdio+0x10>
 8023918:	f000 fe5e 	bl	80245d8 <_fflush_r>
 802391c:	68a1      	ldr	r1, [r4, #8]
 802391e:	4b09      	ldr	r3, [pc, #36]	@ (8023944 <cleanup_stdio+0x38>)
 8023920:	4299      	cmp	r1, r3
 8023922:	d002      	beq.n	802392a <cleanup_stdio+0x1e>
 8023924:	4620      	mov	r0, r4
 8023926:	f000 fe57 	bl	80245d8 <_fflush_r>
 802392a:	68e1      	ldr	r1, [r4, #12]
 802392c:	4b06      	ldr	r3, [pc, #24]	@ (8023948 <cleanup_stdio+0x3c>)
 802392e:	4299      	cmp	r1, r3
 8023930:	d004      	beq.n	802393c <cleanup_stdio+0x30>
 8023932:	4620      	mov	r0, r4
 8023934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023938:	f000 be4e 	b.w	80245d8 <_fflush_r>
 802393c:	bd10      	pop	{r4, pc}
 802393e:	bf00      	nop
 8023940:	24026010 	.word	0x24026010
 8023944:	24026078 	.word	0x24026078
 8023948:	240260e0 	.word	0x240260e0

0802394c <global_stdio_init.part.0>:
 802394c:	b510      	push	{r4, lr}
 802394e:	4b0b      	ldr	r3, [pc, #44]	@ (802397c <global_stdio_init.part.0+0x30>)
 8023950:	4c0b      	ldr	r4, [pc, #44]	@ (8023980 <global_stdio_init.part.0+0x34>)
 8023952:	4a0c      	ldr	r2, [pc, #48]	@ (8023984 <global_stdio_init.part.0+0x38>)
 8023954:	601a      	str	r2, [r3, #0]
 8023956:	4620      	mov	r0, r4
 8023958:	2200      	movs	r2, #0
 802395a:	2104      	movs	r1, #4
 802395c:	f7ff ff94 	bl	8023888 <std>
 8023960:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8023964:	2201      	movs	r2, #1
 8023966:	2109      	movs	r1, #9
 8023968:	f7ff ff8e 	bl	8023888 <std>
 802396c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8023970:	2202      	movs	r2, #2
 8023972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023976:	2112      	movs	r1, #18
 8023978:	f7ff bf86 	b.w	8023888 <std>
 802397c:	24026148 	.word	0x24026148
 8023980:	24026010 	.word	0x24026010
 8023984:	080238f5 	.word	0x080238f5

08023988 <__sfp_lock_acquire>:
 8023988:	4801      	ldr	r0, [pc, #4]	@ (8023990 <__sfp_lock_acquire+0x8>)
 802398a:	f000 ba1c 	b.w	8023dc6 <__retarget_lock_acquire_recursive>
 802398e:	bf00      	nop
 8023990:	24026152 	.word	0x24026152

08023994 <__sfp_lock_release>:
 8023994:	4801      	ldr	r0, [pc, #4]	@ (802399c <__sfp_lock_release+0x8>)
 8023996:	f000 ba17 	b.w	8023dc8 <__retarget_lock_release_recursive>
 802399a:	bf00      	nop
 802399c:	24026152 	.word	0x24026152

080239a0 <__sinit>:
 80239a0:	b510      	push	{r4, lr}
 80239a2:	4604      	mov	r4, r0
 80239a4:	f7ff fff0 	bl	8023988 <__sfp_lock_acquire>
 80239a8:	6a23      	ldr	r3, [r4, #32]
 80239aa:	b11b      	cbz	r3, 80239b4 <__sinit+0x14>
 80239ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239b0:	f7ff bff0 	b.w	8023994 <__sfp_lock_release>
 80239b4:	4b04      	ldr	r3, [pc, #16]	@ (80239c8 <__sinit+0x28>)
 80239b6:	6223      	str	r3, [r4, #32]
 80239b8:	4b04      	ldr	r3, [pc, #16]	@ (80239cc <__sinit+0x2c>)
 80239ba:	681b      	ldr	r3, [r3, #0]
 80239bc:	2b00      	cmp	r3, #0
 80239be:	d1f5      	bne.n	80239ac <__sinit+0xc>
 80239c0:	f7ff ffc4 	bl	802394c <global_stdio_init.part.0>
 80239c4:	e7f2      	b.n	80239ac <__sinit+0xc>
 80239c6:	bf00      	nop
 80239c8:	0802390d 	.word	0x0802390d
 80239cc:	24026148 	.word	0x24026148

080239d0 <fiprintf>:
 80239d0:	b40e      	push	{r1, r2, r3}
 80239d2:	b503      	push	{r0, r1, lr}
 80239d4:	4601      	mov	r1, r0
 80239d6:	ab03      	add	r3, sp, #12
 80239d8:	4805      	ldr	r0, [pc, #20]	@ (80239f0 <fiprintf+0x20>)
 80239da:	f853 2b04 	ldr.w	r2, [r3], #4
 80239de:	6800      	ldr	r0, [r0, #0]
 80239e0:	9301      	str	r3, [sp, #4]
 80239e2:	f000 fad1 	bl	8023f88 <_vfiprintf_r>
 80239e6:	b002      	add	sp, #8
 80239e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80239ec:	b003      	add	sp, #12
 80239ee:	4770      	bx	lr
 80239f0:	240000e8 	.word	0x240000e8

080239f4 <_fwalk_sglue>:
 80239f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80239f8:	4607      	mov	r7, r0
 80239fa:	4688      	mov	r8, r1
 80239fc:	4614      	mov	r4, r2
 80239fe:	2600      	movs	r6, #0
 8023a00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023a04:	f1b9 0901 	subs.w	r9, r9, #1
 8023a08:	d505      	bpl.n	8023a16 <_fwalk_sglue+0x22>
 8023a0a:	6824      	ldr	r4, [r4, #0]
 8023a0c:	2c00      	cmp	r4, #0
 8023a0e:	d1f7      	bne.n	8023a00 <_fwalk_sglue+0xc>
 8023a10:	4630      	mov	r0, r6
 8023a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023a16:	89ab      	ldrh	r3, [r5, #12]
 8023a18:	2b01      	cmp	r3, #1
 8023a1a:	d907      	bls.n	8023a2c <_fwalk_sglue+0x38>
 8023a1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023a20:	3301      	adds	r3, #1
 8023a22:	d003      	beq.n	8023a2c <_fwalk_sglue+0x38>
 8023a24:	4629      	mov	r1, r5
 8023a26:	4638      	mov	r0, r7
 8023a28:	47c0      	blx	r8
 8023a2a:	4306      	orrs	r6, r0
 8023a2c:	3568      	adds	r5, #104	@ 0x68
 8023a2e:	e7e9      	b.n	8023a04 <_fwalk_sglue+0x10>

08023a30 <__sread>:
 8023a30:	b510      	push	{r4, lr}
 8023a32:	460c      	mov	r4, r1
 8023a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a38:	f000 f952 	bl	8023ce0 <_read_r>
 8023a3c:	2800      	cmp	r0, #0
 8023a3e:	bfab      	itete	ge
 8023a40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8023a42:	89a3      	ldrhlt	r3, [r4, #12]
 8023a44:	181b      	addge	r3, r3, r0
 8023a46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8023a4a:	bfac      	ite	ge
 8023a4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8023a4e:	81a3      	strhlt	r3, [r4, #12]
 8023a50:	bd10      	pop	{r4, pc}

08023a52 <__swrite>:
 8023a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a56:	461f      	mov	r7, r3
 8023a58:	898b      	ldrh	r3, [r1, #12]
 8023a5a:	05db      	lsls	r3, r3, #23
 8023a5c:	4605      	mov	r5, r0
 8023a5e:	460c      	mov	r4, r1
 8023a60:	4616      	mov	r6, r2
 8023a62:	d505      	bpl.n	8023a70 <__swrite+0x1e>
 8023a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a68:	2302      	movs	r3, #2
 8023a6a:	2200      	movs	r2, #0
 8023a6c:	f000 f926 	bl	8023cbc <_lseek_r>
 8023a70:	89a3      	ldrh	r3, [r4, #12]
 8023a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023a76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8023a7a:	81a3      	strh	r3, [r4, #12]
 8023a7c:	4632      	mov	r2, r6
 8023a7e:	463b      	mov	r3, r7
 8023a80:	4628      	mov	r0, r5
 8023a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023a86:	f000 b961 	b.w	8023d4c <_write_r>

08023a8a <__sseek>:
 8023a8a:	b510      	push	{r4, lr}
 8023a8c:	460c      	mov	r4, r1
 8023a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a92:	f000 f913 	bl	8023cbc <_lseek_r>
 8023a96:	1c43      	adds	r3, r0, #1
 8023a98:	89a3      	ldrh	r3, [r4, #12]
 8023a9a:	bf15      	itete	ne
 8023a9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8023a9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8023aa2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8023aa6:	81a3      	strheq	r3, [r4, #12]
 8023aa8:	bf18      	it	ne
 8023aaa:	81a3      	strhne	r3, [r4, #12]
 8023aac:	bd10      	pop	{r4, pc}

08023aae <__sclose>:
 8023aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023ab2:	f000 b8f3 	b.w	8023c9c <_close_r>

08023ab6 <__swbuf_r>:
 8023ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ab8:	460e      	mov	r6, r1
 8023aba:	4614      	mov	r4, r2
 8023abc:	4605      	mov	r5, r0
 8023abe:	b118      	cbz	r0, 8023ac8 <__swbuf_r+0x12>
 8023ac0:	6a03      	ldr	r3, [r0, #32]
 8023ac2:	b90b      	cbnz	r3, 8023ac8 <__swbuf_r+0x12>
 8023ac4:	f7ff ff6c 	bl	80239a0 <__sinit>
 8023ac8:	69a3      	ldr	r3, [r4, #24]
 8023aca:	60a3      	str	r3, [r4, #8]
 8023acc:	89a3      	ldrh	r3, [r4, #12]
 8023ace:	071a      	lsls	r2, r3, #28
 8023ad0:	d501      	bpl.n	8023ad6 <__swbuf_r+0x20>
 8023ad2:	6923      	ldr	r3, [r4, #16]
 8023ad4:	b943      	cbnz	r3, 8023ae8 <__swbuf_r+0x32>
 8023ad6:	4621      	mov	r1, r4
 8023ad8:	4628      	mov	r0, r5
 8023ada:	f000 f82b 	bl	8023b34 <__swsetup_r>
 8023ade:	b118      	cbz	r0, 8023ae8 <__swbuf_r+0x32>
 8023ae0:	f04f 37ff 	mov.w	r7, #4294967295
 8023ae4:	4638      	mov	r0, r7
 8023ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023ae8:	6823      	ldr	r3, [r4, #0]
 8023aea:	6922      	ldr	r2, [r4, #16]
 8023aec:	1a98      	subs	r0, r3, r2
 8023aee:	6963      	ldr	r3, [r4, #20]
 8023af0:	b2f6      	uxtb	r6, r6
 8023af2:	4283      	cmp	r3, r0
 8023af4:	4637      	mov	r7, r6
 8023af6:	dc05      	bgt.n	8023b04 <__swbuf_r+0x4e>
 8023af8:	4621      	mov	r1, r4
 8023afa:	4628      	mov	r0, r5
 8023afc:	f000 fd6c 	bl	80245d8 <_fflush_r>
 8023b00:	2800      	cmp	r0, #0
 8023b02:	d1ed      	bne.n	8023ae0 <__swbuf_r+0x2a>
 8023b04:	68a3      	ldr	r3, [r4, #8]
 8023b06:	3b01      	subs	r3, #1
 8023b08:	60a3      	str	r3, [r4, #8]
 8023b0a:	6823      	ldr	r3, [r4, #0]
 8023b0c:	1c5a      	adds	r2, r3, #1
 8023b0e:	6022      	str	r2, [r4, #0]
 8023b10:	701e      	strb	r6, [r3, #0]
 8023b12:	6962      	ldr	r2, [r4, #20]
 8023b14:	1c43      	adds	r3, r0, #1
 8023b16:	429a      	cmp	r2, r3
 8023b18:	d004      	beq.n	8023b24 <__swbuf_r+0x6e>
 8023b1a:	89a3      	ldrh	r3, [r4, #12]
 8023b1c:	07db      	lsls	r3, r3, #31
 8023b1e:	d5e1      	bpl.n	8023ae4 <__swbuf_r+0x2e>
 8023b20:	2e0a      	cmp	r6, #10
 8023b22:	d1df      	bne.n	8023ae4 <__swbuf_r+0x2e>
 8023b24:	4621      	mov	r1, r4
 8023b26:	4628      	mov	r0, r5
 8023b28:	f000 fd56 	bl	80245d8 <_fflush_r>
 8023b2c:	2800      	cmp	r0, #0
 8023b2e:	d0d9      	beq.n	8023ae4 <__swbuf_r+0x2e>
 8023b30:	e7d6      	b.n	8023ae0 <__swbuf_r+0x2a>
	...

08023b34 <__swsetup_r>:
 8023b34:	b538      	push	{r3, r4, r5, lr}
 8023b36:	4b29      	ldr	r3, [pc, #164]	@ (8023bdc <__swsetup_r+0xa8>)
 8023b38:	4605      	mov	r5, r0
 8023b3a:	6818      	ldr	r0, [r3, #0]
 8023b3c:	460c      	mov	r4, r1
 8023b3e:	b118      	cbz	r0, 8023b48 <__swsetup_r+0x14>
 8023b40:	6a03      	ldr	r3, [r0, #32]
 8023b42:	b90b      	cbnz	r3, 8023b48 <__swsetup_r+0x14>
 8023b44:	f7ff ff2c 	bl	80239a0 <__sinit>
 8023b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023b4c:	0719      	lsls	r1, r3, #28
 8023b4e:	d422      	bmi.n	8023b96 <__swsetup_r+0x62>
 8023b50:	06da      	lsls	r2, r3, #27
 8023b52:	d407      	bmi.n	8023b64 <__swsetup_r+0x30>
 8023b54:	2209      	movs	r2, #9
 8023b56:	602a      	str	r2, [r5, #0]
 8023b58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023b5c:	81a3      	strh	r3, [r4, #12]
 8023b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8023b62:	e033      	b.n	8023bcc <__swsetup_r+0x98>
 8023b64:	0758      	lsls	r0, r3, #29
 8023b66:	d512      	bpl.n	8023b8e <__swsetup_r+0x5a>
 8023b68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023b6a:	b141      	cbz	r1, 8023b7e <__swsetup_r+0x4a>
 8023b6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023b70:	4299      	cmp	r1, r3
 8023b72:	d002      	beq.n	8023b7a <__swsetup_r+0x46>
 8023b74:	4628      	mov	r0, r5
 8023b76:	f000 f993 	bl	8023ea0 <_free_r>
 8023b7a:	2300      	movs	r3, #0
 8023b7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8023b7e:	89a3      	ldrh	r3, [r4, #12]
 8023b80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8023b84:	81a3      	strh	r3, [r4, #12]
 8023b86:	2300      	movs	r3, #0
 8023b88:	6063      	str	r3, [r4, #4]
 8023b8a:	6923      	ldr	r3, [r4, #16]
 8023b8c:	6023      	str	r3, [r4, #0]
 8023b8e:	89a3      	ldrh	r3, [r4, #12]
 8023b90:	f043 0308 	orr.w	r3, r3, #8
 8023b94:	81a3      	strh	r3, [r4, #12]
 8023b96:	6923      	ldr	r3, [r4, #16]
 8023b98:	b94b      	cbnz	r3, 8023bae <__swsetup_r+0x7a>
 8023b9a:	89a3      	ldrh	r3, [r4, #12]
 8023b9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8023ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023ba4:	d003      	beq.n	8023bae <__swsetup_r+0x7a>
 8023ba6:	4621      	mov	r1, r4
 8023ba8:	4628      	mov	r0, r5
 8023baa:	f000 fd63 	bl	8024674 <__smakebuf_r>
 8023bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023bb2:	f013 0201 	ands.w	r2, r3, #1
 8023bb6:	d00a      	beq.n	8023bce <__swsetup_r+0x9a>
 8023bb8:	2200      	movs	r2, #0
 8023bba:	60a2      	str	r2, [r4, #8]
 8023bbc:	6962      	ldr	r2, [r4, #20]
 8023bbe:	4252      	negs	r2, r2
 8023bc0:	61a2      	str	r2, [r4, #24]
 8023bc2:	6922      	ldr	r2, [r4, #16]
 8023bc4:	b942      	cbnz	r2, 8023bd8 <__swsetup_r+0xa4>
 8023bc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8023bca:	d1c5      	bne.n	8023b58 <__swsetup_r+0x24>
 8023bcc:	bd38      	pop	{r3, r4, r5, pc}
 8023bce:	0799      	lsls	r1, r3, #30
 8023bd0:	bf58      	it	pl
 8023bd2:	6962      	ldrpl	r2, [r4, #20]
 8023bd4:	60a2      	str	r2, [r4, #8]
 8023bd6:	e7f4      	b.n	8023bc2 <__swsetup_r+0x8e>
 8023bd8:	2000      	movs	r0, #0
 8023bda:	e7f7      	b.n	8023bcc <__swsetup_r+0x98>
 8023bdc:	240000e8 	.word	0x240000e8

08023be0 <memset>:
 8023be0:	4402      	add	r2, r0
 8023be2:	4603      	mov	r3, r0
 8023be4:	4293      	cmp	r3, r2
 8023be6:	d100      	bne.n	8023bea <memset+0xa>
 8023be8:	4770      	bx	lr
 8023bea:	f803 1b01 	strb.w	r1, [r3], #1
 8023bee:	e7f9      	b.n	8023be4 <memset+0x4>

08023bf0 <strncmp>:
 8023bf0:	b510      	push	{r4, lr}
 8023bf2:	b16a      	cbz	r2, 8023c10 <strncmp+0x20>
 8023bf4:	3901      	subs	r1, #1
 8023bf6:	1884      	adds	r4, r0, r2
 8023bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023bfc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8023c00:	429a      	cmp	r2, r3
 8023c02:	d103      	bne.n	8023c0c <strncmp+0x1c>
 8023c04:	42a0      	cmp	r0, r4
 8023c06:	d001      	beq.n	8023c0c <strncmp+0x1c>
 8023c08:	2a00      	cmp	r2, #0
 8023c0a:	d1f5      	bne.n	8023bf8 <strncmp+0x8>
 8023c0c:	1ad0      	subs	r0, r2, r3
 8023c0e:	bd10      	pop	{r4, pc}
 8023c10:	4610      	mov	r0, r2
 8023c12:	e7fc      	b.n	8023c0e <strncmp+0x1e>

08023c14 <strncpy>:
 8023c14:	b510      	push	{r4, lr}
 8023c16:	3901      	subs	r1, #1
 8023c18:	4603      	mov	r3, r0
 8023c1a:	b132      	cbz	r2, 8023c2a <strncpy+0x16>
 8023c1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023c20:	f803 4b01 	strb.w	r4, [r3], #1
 8023c24:	3a01      	subs	r2, #1
 8023c26:	2c00      	cmp	r4, #0
 8023c28:	d1f7      	bne.n	8023c1a <strncpy+0x6>
 8023c2a:	441a      	add	r2, r3
 8023c2c:	2100      	movs	r1, #0
 8023c2e:	4293      	cmp	r3, r2
 8023c30:	d100      	bne.n	8023c34 <strncpy+0x20>
 8023c32:	bd10      	pop	{r4, pc}
 8023c34:	f803 1b01 	strb.w	r1, [r3], #1
 8023c38:	e7f9      	b.n	8023c2e <strncpy+0x1a>

08023c3a <_raise_r>:
 8023c3a:	291f      	cmp	r1, #31
 8023c3c:	b538      	push	{r3, r4, r5, lr}
 8023c3e:	4605      	mov	r5, r0
 8023c40:	460c      	mov	r4, r1
 8023c42:	d904      	bls.n	8023c4e <_raise_r+0x14>
 8023c44:	2316      	movs	r3, #22
 8023c46:	6003      	str	r3, [r0, #0]
 8023c48:	f04f 30ff 	mov.w	r0, #4294967295
 8023c4c:	bd38      	pop	{r3, r4, r5, pc}
 8023c4e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023c50:	b112      	cbz	r2, 8023c58 <_raise_r+0x1e>
 8023c52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023c56:	b94b      	cbnz	r3, 8023c6c <_raise_r+0x32>
 8023c58:	4628      	mov	r0, r5
 8023c5a:	f000 f865 	bl	8023d28 <_getpid_r>
 8023c5e:	4622      	mov	r2, r4
 8023c60:	4601      	mov	r1, r0
 8023c62:	4628      	mov	r0, r5
 8023c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023c68:	f000 b84c 	b.w	8023d04 <_kill_r>
 8023c6c:	2b01      	cmp	r3, #1
 8023c6e:	d00a      	beq.n	8023c86 <_raise_r+0x4c>
 8023c70:	1c59      	adds	r1, r3, #1
 8023c72:	d103      	bne.n	8023c7c <_raise_r+0x42>
 8023c74:	2316      	movs	r3, #22
 8023c76:	6003      	str	r3, [r0, #0]
 8023c78:	2001      	movs	r0, #1
 8023c7a:	e7e7      	b.n	8023c4c <_raise_r+0x12>
 8023c7c:	2100      	movs	r1, #0
 8023c7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8023c82:	4620      	mov	r0, r4
 8023c84:	4798      	blx	r3
 8023c86:	2000      	movs	r0, #0
 8023c88:	e7e0      	b.n	8023c4c <_raise_r+0x12>
	...

08023c8c <raise>:
 8023c8c:	4b02      	ldr	r3, [pc, #8]	@ (8023c98 <raise+0xc>)
 8023c8e:	4601      	mov	r1, r0
 8023c90:	6818      	ldr	r0, [r3, #0]
 8023c92:	f7ff bfd2 	b.w	8023c3a <_raise_r>
 8023c96:	bf00      	nop
 8023c98:	240000e8 	.word	0x240000e8

08023c9c <_close_r>:
 8023c9c:	b538      	push	{r3, r4, r5, lr}
 8023c9e:	4d06      	ldr	r5, [pc, #24]	@ (8023cb8 <_close_r+0x1c>)
 8023ca0:	2300      	movs	r3, #0
 8023ca2:	4604      	mov	r4, r0
 8023ca4:	4608      	mov	r0, r1
 8023ca6:	602b      	str	r3, [r5, #0]
 8023ca8:	f7dd ff68 	bl	8001b7c <_close>
 8023cac:	1c43      	adds	r3, r0, #1
 8023cae:	d102      	bne.n	8023cb6 <_close_r+0x1a>
 8023cb0:	682b      	ldr	r3, [r5, #0]
 8023cb2:	b103      	cbz	r3, 8023cb6 <_close_r+0x1a>
 8023cb4:	6023      	str	r3, [r4, #0]
 8023cb6:	bd38      	pop	{r3, r4, r5, pc}
 8023cb8:	2402614c 	.word	0x2402614c

08023cbc <_lseek_r>:
 8023cbc:	b538      	push	{r3, r4, r5, lr}
 8023cbe:	4d07      	ldr	r5, [pc, #28]	@ (8023cdc <_lseek_r+0x20>)
 8023cc0:	4604      	mov	r4, r0
 8023cc2:	4608      	mov	r0, r1
 8023cc4:	4611      	mov	r1, r2
 8023cc6:	2200      	movs	r2, #0
 8023cc8:	602a      	str	r2, [r5, #0]
 8023cca:	461a      	mov	r2, r3
 8023ccc:	f7dd ff60 	bl	8001b90 <_lseek>
 8023cd0:	1c43      	adds	r3, r0, #1
 8023cd2:	d102      	bne.n	8023cda <_lseek_r+0x1e>
 8023cd4:	682b      	ldr	r3, [r5, #0]
 8023cd6:	b103      	cbz	r3, 8023cda <_lseek_r+0x1e>
 8023cd8:	6023      	str	r3, [r4, #0]
 8023cda:	bd38      	pop	{r3, r4, r5, pc}
 8023cdc:	2402614c 	.word	0x2402614c

08023ce0 <_read_r>:
 8023ce0:	b538      	push	{r3, r4, r5, lr}
 8023ce2:	4d07      	ldr	r5, [pc, #28]	@ (8023d00 <_read_r+0x20>)
 8023ce4:	4604      	mov	r4, r0
 8023ce6:	4608      	mov	r0, r1
 8023ce8:	4611      	mov	r1, r2
 8023cea:	2200      	movs	r2, #0
 8023cec:	602a      	str	r2, [r5, #0]
 8023cee:	461a      	mov	r2, r3
 8023cf0:	f7dd ff28 	bl	8001b44 <_read>
 8023cf4:	1c43      	adds	r3, r0, #1
 8023cf6:	d102      	bne.n	8023cfe <_read_r+0x1e>
 8023cf8:	682b      	ldr	r3, [r5, #0]
 8023cfa:	b103      	cbz	r3, 8023cfe <_read_r+0x1e>
 8023cfc:	6023      	str	r3, [r4, #0]
 8023cfe:	bd38      	pop	{r3, r4, r5, pc}
 8023d00:	2402614c 	.word	0x2402614c

08023d04 <_kill_r>:
 8023d04:	b538      	push	{r3, r4, r5, lr}
 8023d06:	4d07      	ldr	r5, [pc, #28]	@ (8023d24 <_kill_r+0x20>)
 8023d08:	2300      	movs	r3, #0
 8023d0a:	4604      	mov	r4, r0
 8023d0c:	4608      	mov	r0, r1
 8023d0e:	4611      	mov	r1, r2
 8023d10:	602b      	str	r3, [r5, #0]
 8023d12:	f7dd ff09 	bl	8001b28 <_kill>
 8023d16:	1c43      	adds	r3, r0, #1
 8023d18:	d102      	bne.n	8023d20 <_kill_r+0x1c>
 8023d1a:	682b      	ldr	r3, [r5, #0]
 8023d1c:	b103      	cbz	r3, 8023d20 <_kill_r+0x1c>
 8023d1e:	6023      	str	r3, [r4, #0]
 8023d20:	bd38      	pop	{r3, r4, r5, pc}
 8023d22:	bf00      	nop
 8023d24:	2402614c 	.word	0x2402614c

08023d28 <_getpid_r>:
 8023d28:	f7dd befc 	b.w	8001b24 <_getpid>

08023d2c <_sbrk_r>:
 8023d2c:	b538      	push	{r3, r4, r5, lr}
 8023d2e:	4d06      	ldr	r5, [pc, #24]	@ (8023d48 <_sbrk_r+0x1c>)
 8023d30:	2300      	movs	r3, #0
 8023d32:	4604      	mov	r4, r0
 8023d34:	4608      	mov	r0, r1
 8023d36:	602b      	str	r3, [r5, #0]
 8023d38:	f7dd ff2c 	bl	8001b94 <_sbrk>
 8023d3c:	1c43      	adds	r3, r0, #1
 8023d3e:	d102      	bne.n	8023d46 <_sbrk_r+0x1a>
 8023d40:	682b      	ldr	r3, [r5, #0]
 8023d42:	b103      	cbz	r3, 8023d46 <_sbrk_r+0x1a>
 8023d44:	6023      	str	r3, [r4, #0]
 8023d46:	bd38      	pop	{r3, r4, r5, pc}
 8023d48:	2402614c 	.word	0x2402614c

08023d4c <_write_r>:
 8023d4c:	b538      	push	{r3, r4, r5, lr}
 8023d4e:	4d07      	ldr	r5, [pc, #28]	@ (8023d6c <_write_r+0x20>)
 8023d50:	4604      	mov	r4, r0
 8023d52:	4608      	mov	r0, r1
 8023d54:	4611      	mov	r1, r2
 8023d56:	2200      	movs	r2, #0
 8023d58:	602a      	str	r2, [r5, #0]
 8023d5a:	461a      	mov	r2, r3
 8023d5c:	f7dd ff00 	bl	8001b60 <_write>
 8023d60:	1c43      	adds	r3, r0, #1
 8023d62:	d102      	bne.n	8023d6a <_write_r+0x1e>
 8023d64:	682b      	ldr	r3, [r5, #0]
 8023d66:	b103      	cbz	r3, 8023d6a <_write_r+0x1e>
 8023d68:	6023      	str	r3, [r4, #0]
 8023d6a:	bd38      	pop	{r3, r4, r5, pc}
 8023d6c:	2402614c 	.word	0x2402614c

08023d70 <__errno>:
 8023d70:	4b01      	ldr	r3, [pc, #4]	@ (8023d78 <__errno+0x8>)
 8023d72:	6818      	ldr	r0, [r3, #0]
 8023d74:	4770      	bx	lr
 8023d76:	bf00      	nop
 8023d78:	240000e8 	.word	0x240000e8

08023d7c <__libc_init_array>:
 8023d7c:	b570      	push	{r4, r5, r6, lr}
 8023d7e:	4d0d      	ldr	r5, [pc, #52]	@ (8023db4 <__libc_init_array+0x38>)
 8023d80:	4c0d      	ldr	r4, [pc, #52]	@ (8023db8 <__libc_init_array+0x3c>)
 8023d82:	1b64      	subs	r4, r4, r5
 8023d84:	10a4      	asrs	r4, r4, #2
 8023d86:	2600      	movs	r6, #0
 8023d88:	42a6      	cmp	r6, r4
 8023d8a:	d109      	bne.n	8023da0 <__libc_init_array+0x24>
 8023d8c:	4d0b      	ldr	r5, [pc, #44]	@ (8023dbc <__libc_init_array+0x40>)
 8023d8e:	4c0c      	ldr	r4, [pc, #48]	@ (8023dc0 <__libc_init_array+0x44>)
 8023d90:	f000 fcce 	bl	8024730 <_init>
 8023d94:	1b64      	subs	r4, r4, r5
 8023d96:	10a4      	asrs	r4, r4, #2
 8023d98:	2600      	movs	r6, #0
 8023d9a:	42a6      	cmp	r6, r4
 8023d9c:	d105      	bne.n	8023daa <__libc_init_array+0x2e>
 8023d9e:	bd70      	pop	{r4, r5, r6, pc}
 8023da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8023da4:	4798      	blx	r3
 8023da6:	3601      	adds	r6, #1
 8023da8:	e7ee      	b.n	8023d88 <__libc_init_array+0xc>
 8023daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8023dae:	4798      	blx	r3
 8023db0:	3601      	adds	r6, #1
 8023db2:	e7f2      	b.n	8023d9a <__libc_init_array+0x1e>
 8023db4:	08029f84 	.word	0x08029f84
 8023db8:	08029f84 	.word	0x08029f84
 8023dbc:	08029f84 	.word	0x08029f84
 8023dc0:	08029fa0 	.word	0x08029fa0

08023dc4 <__retarget_lock_init_recursive>:
 8023dc4:	4770      	bx	lr

08023dc6 <__retarget_lock_acquire_recursive>:
 8023dc6:	4770      	bx	lr

08023dc8 <__retarget_lock_release_recursive>:
 8023dc8:	4770      	bx	lr

08023dca <memcpy>:
 8023dca:	440a      	add	r2, r1
 8023dcc:	4291      	cmp	r1, r2
 8023dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8023dd2:	d100      	bne.n	8023dd6 <memcpy+0xc>
 8023dd4:	4770      	bx	lr
 8023dd6:	b510      	push	{r4, lr}
 8023dd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023ddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023de0:	4291      	cmp	r1, r2
 8023de2:	d1f9      	bne.n	8023dd8 <memcpy+0xe>
 8023de4:	bd10      	pop	{r4, pc}
	...

08023de8 <__register_exitproc>:
 8023de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023dec:	4d27      	ldr	r5, [pc, #156]	@ (8023e8c <__register_exitproc+0xa4>)
 8023dee:	4607      	mov	r7, r0
 8023df0:	6828      	ldr	r0, [r5, #0]
 8023df2:	4691      	mov	r9, r2
 8023df4:	460e      	mov	r6, r1
 8023df6:	4698      	mov	r8, r3
 8023df8:	f7ff ffe5 	bl	8023dc6 <__retarget_lock_acquire_recursive>
 8023dfc:	4a24      	ldr	r2, [pc, #144]	@ (8023e90 <__register_exitproc+0xa8>)
 8023dfe:	6814      	ldr	r4, [r2, #0]
 8023e00:	b93c      	cbnz	r4, 8023e12 <__register_exitproc+0x2a>
 8023e02:	4b24      	ldr	r3, [pc, #144]	@ (8023e94 <__register_exitproc+0xac>)
 8023e04:	6013      	str	r3, [r2, #0]
 8023e06:	4a24      	ldr	r2, [pc, #144]	@ (8023e98 <__register_exitproc+0xb0>)
 8023e08:	b112      	cbz	r2, 8023e10 <__register_exitproc+0x28>
 8023e0a:	6812      	ldr	r2, [r2, #0]
 8023e0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8023e10:	4c20      	ldr	r4, [pc, #128]	@ (8023e94 <__register_exitproc+0xac>)
 8023e12:	6863      	ldr	r3, [r4, #4]
 8023e14:	2b1f      	cmp	r3, #31
 8023e16:	dd06      	ble.n	8023e26 <__register_exitproc+0x3e>
 8023e18:	6828      	ldr	r0, [r5, #0]
 8023e1a:	f7ff ffd5 	bl	8023dc8 <__retarget_lock_release_recursive>
 8023e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8023e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023e26:	b32f      	cbz	r7, 8023e74 <__register_exitproc+0x8c>
 8023e28:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8023e2c:	b968      	cbnz	r0, 8023e4a <__register_exitproc+0x62>
 8023e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8023e9c <__register_exitproc+0xb4>)
 8023e30:	2b00      	cmp	r3, #0
 8023e32:	d0f1      	beq.n	8023e18 <__register_exitproc+0x30>
 8023e34:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8023e38:	f7ff fc5a 	bl	80236f0 <malloc>
 8023e3c:	2800      	cmp	r0, #0
 8023e3e:	d0eb      	beq.n	8023e18 <__register_exitproc+0x30>
 8023e40:	2300      	movs	r3, #0
 8023e42:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8023e46:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8023e4a:	6863      	ldr	r3, [r4, #4]
 8023e4c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8023e50:	2201      	movs	r2, #1
 8023e52:	409a      	lsls	r2, r3
 8023e54:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8023e58:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8023e5c:	4313      	orrs	r3, r2
 8023e5e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8023e62:	2f02      	cmp	r7, #2
 8023e64:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8023e68:	bf02      	ittt	eq
 8023e6a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8023e6e:	4313      	orreq	r3, r2
 8023e70:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8023e74:	6863      	ldr	r3, [r4, #4]
 8023e76:	6828      	ldr	r0, [r5, #0]
 8023e78:	1c5a      	adds	r2, r3, #1
 8023e7a:	3302      	adds	r3, #2
 8023e7c:	6062      	str	r2, [r4, #4]
 8023e7e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8023e82:	f7ff ffa1 	bl	8023dc8 <__retarget_lock_release_recursive>
 8023e86:	2000      	movs	r0, #0
 8023e88:	e7cb      	b.n	8023e22 <__register_exitproc+0x3a>
 8023e8a:	bf00      	nop
 8023e8c:	24000138 	.word	0x24000138
 8023e90:	240261e0 	.word	0x240261e0
 8023e94:	24026154 	.word	0x24026154
 8023e98:	08027968 	.word	0x08027968
 8023e9c:	080236f1 	.word	0x080236f1

08023ea0 <_free_r>:
 8023ea0:	b538      	push	{r3, r4, r5, lr}
 8023ea2:	4605      	mov	r5, r0
 8023ea4:	2900      	cmp	r1, #0
 8023ea6:	d041      	beq.n	8023f2c <_free_r+0x8c>
 8023ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023eac:	1f0c      	subs	r4, r1, #4
 8023eae:	2b00      	cmp	r3, #0
 8023eb0:	bfb8      	it	lt
 8023eb2:	18e4      	addlt	r4, r4, r3
 8023eb4:	f7ff fcce 	bl	8023854 <__malloc_lock>
 8023eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8023f30 <_free_r+0x90>)
 8023eba:	6813      	ldr	r3, [r2, #0]
 8023ebc:	b933      	cbnz	r3, 8023ecc <_free_r+0x2c>
 8023ebe:	6063      	str	r3, [r4, #4]
 8023ec0:	6014      	str	r4, [r2, #0]
 8023ec2:	4628      	mov	r0, r5
 8023ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023ec8:	f7ff bcca 	b.w	8023860 <__malloc_unlock>
 8023ecc:	42a3      	cmp	r3, r4
 8023ece:	d908      	bls.n	8023ee2 <_free_r+0x42>
 8023ed0:	6820      	ldr	r0, [r4, #0]
 8023ed2:	1821      	adds	r1, r4, r0
 8023ed4:	428b      	cmp	r3, r1
 8023ed6:	bf01      	itttt	eq
 8023ed8:	6819      	ldreq	r1, [r3, #0]
 8023eda:	685b      	ldreq	r3, [r3, #4]
 8023edc:	1809      	addeq	r1, r1, r0
 8023ede:	6021      	streq	r1, [r4, #0]
 8023ee0:	e7ed      	b.n	8023ebe <_free_r+0x1e>
 8023ee2:	461a      	mov	r2, r3
 8023ee4:	685b      	ldr	r3, [r3, #4]
 8023ee6:	b10b      	cbz	r3, 8023eec <_free_r+0x4c>
 8023ee8:	42a3      	cmp	r3, r4
 8023eea:	d9fa      	bls.n	8023ee2 <_free_r+0x42>
 8023eec:	6811      	ldr	r1, [r2, #0]
 8023eee:	1850      	adds	r0, r2, r1
 8023ef0:	42a0      	cmp	r0, r4
 8023ef2:	d10b      	bne.n	8023f0c <_free_r+0x6c>
 8023ef4:	6820      	ldr	r0, [r4, #0]
 8023ef6:	4401      	add	r1, r0
 8023ef8:	1850      	adds	r0, r2, r1
 8023efa:	4283      	cmp	r3, r0
 8023efc:	6011      	str	r1, [r2, #0]
 8023efe:	d1e0      	bne.n	8023ec2 <_free_r+0x22>
 8023f00:	6818      	ldr	r0, [r3, #0]
 8023f02:	685b      	ldr	r3, [r3, #4]
 8023f04:	6053      	str	r3, [r2, #4]
 8023f06:	4408      	add	r0, r1
 8023f08:	6010      	str	r0, [r2, #0]
 8023f0a:	e7da      	b.n	8023ec2 <_free_r+0x22>
 8023f0c:	d902      	bls.n	8023f14 <_free_r+0x74>
 8023f0e:	230c      	movs	r3, #12
 8023f10:	602b      	str	r3, [r5, #0]
 8023f12:	e7d6      	b.n	8023ec2 <_free_r+0x22>
 8023f14:	6820      	ldr	r0, [r4, #0]
 8023f16:	1821      	adds	r1, r4, r0
 8023f18:	428b      	cmp	r3, r1
 8023f1a:	bf04      	itt	eq
 8023f1c:	6819      	ldreq	r1, [r3, #0]
 8023f1e:	685b      	ldreq	r3, [r3, #4]
 8023f20:	6063      	str	r3, [r4, #4]
 8023f22:	bf04      	itt	eq
 8023f24:	1809      	addeq	r1, r1, r0
 8023f26:	6021      	streq	r1, [r4, #0]
 8023f28:	6054      	str	r4, [r2, #4]
 8023f2a:	e7ca      	b.n	8023ec2 <_free_r+0x22>
 8023f2c:	bd38      	pop	{r3, r4, r5, pc}
 8023f2e:	bf00      	nop
 8023f30:	2402600c 	.word	0x2402600c

08023f34 <__sfputc_r>:
 8023f34:	6893      	ldr	r3, [r2, #8]
 8023f36:	3b01      	subs	r3, #1
 8023f38:	2b00      	cmp	r3, #0
 8023f3a:	b410      	push	{r4}
 8023f3c:	6093      	str	r3, [r2, #8]
 8023f3e:	da08      	bge.n	8023f52 <__sfputc_r+0x1e>
 8023f40:	6994      	ldr	r4, [r2, #24]
 8023f42:	42a3      	cmp	r3, r4
 8023f44:	db01      	blt.n	8023f4a <__sfputc_r+0x16>
 8023f46:	290a      	cmp	r1, #10
 8023f48:	d103      	bne.n	8023f52 <__sfputc_r+0x1e>
 8023f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023f4e:	f7ff bdb2 	b.w	8023ab6 <__swbuf_r>
 8023f52:	6813      	ldr	r3, [r2, #0]
 8023f54:	1c58      	adds	r0, r3, #1
 8023f56:	6010      	str	r0, [r2, #0]
 8023f58:	7019      	strb	r1, [r3, #0]
 8023f5a:	4608      	mov	r0, r1
 8023f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023f60:	4770      	bx	lr

08023f62 <__sfputs_r>:
 8023f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f64:	4606      	mov	r6, r0
 8023f66:	460f      	mov	r7, r1
 8023f68:	4614      	mov	r4, r2
 8023f6a:	18d5      	adds	r5, r2, r3
 8023f6c:	42ac      	cmp	r4, r5
 8023f6e:	d101      	bne.n	8023f74 <__sfputs_r+0x12>
 8023f70:	2000      	movs	r0, #0
 8023f72:	e007      	b.n	8023f84 <__sfputs_r+0x22>
 8023f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023f78:	463a      	mov	r2, r7
 8023f7a:	4630      	mov	r0, r6
 8023f7c:	f7ff ffda 	bl	8023f34 <__sfputc_r>
 8023f80:	1c43      	adds	r3, r0, #1
 8023f82:	d1f3      	bne.n	8023f6c <__sfputs_r+0xa>
 8023f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023f88 <_vfiprintf_r>:
 8023f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f8c:	460d      	mov	r5, r1
 8023f8e:	b09d      	sub	sp, #116	@ 0x74
 8023f90:	4614      	mov	r4, r2
 8023f92:	4698      	mov	r8, r3
 8023f94:	4606      	mov	r6, r0
 8023f96:	b118      	cbz	r0, 8023fa0 <_vfiprintf_r+0x18>
 8023f98:	6a03      	ldr	r3, [r0, #32]
 8023f9a:	b90b      	cbnz	r3, 8023fa0 <_vfiprintf_r+0x18>
 8023f9c:	f7ff fd00 	bl	80239a0 <__sinit>
 8023fa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023fa2:	07d9      	lsls	r1, r3, #31
 8023fa4:	d405      	bmi.n	8023fb2 <_vfiprintf_r+0x2a>
 8023fa6:	89ab      	ldrh	r3, [r5, #12]
 8023fa8:	059a      	lsls	r2, r3, #22
 8023faa:	d402      	bmi.n	8023fb2 <_vfiprintf_r+0x2a>
 8023fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023fae:	f7ff ff0a 	bl	8023dc6 <__retarget_lock_acquire_recursive>
 8023fb2:	89ab      	ldrh	r3, [r5, #12]
 8023fb4:	071b      	lsls	r3, r3, #28
 8023fb6:	d501      	bpl.n	8023fbc <_vfiprintf_r+0x34>
 8023fb8:	692b      	ldr	r3, [r5, #16]
 8023fba:	b99b      	cbnz	r3, 8023fe4 <_vfiprintf_r+0x5c>
 8023fbc:	4629      	mov	r1, r5
 8023fbe:	4630      	mov	r0, r6
 8023fc0:	f7ff fdb8 	bl	8023b34 <__swsetup_r>
 8023fc4:	b170      	cbz	r0, 8023fe4 <_vfiprintf_r+0x5c>
 8023fc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023fc8:	07dc      	lsls	r4, r3, #31
 8023fca:	d504      	bpl.n	8023fd6 <_vfiprintf_r+0x4e>
 8023fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8023fd0:	b01d      	add	sp, #116	@ 0x74
 8023fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fd6:	89ab      	ldrh	r3, [r5, #12]
 8023fd8:	0598      	lsls	r0, r3, #22
 8023fda:	d4f7      	bmi.n	8023fcc <_vfiprintf_r+0x44>
 8023fdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023fde:	f7ff fef3 	bl	8023dc8 <__retarget_lock_release_recursive>
 8023fe2:	e7f3      	b.n	8023fcc <_vfiprintf_r+0x44>
 8023fe4:	2300      	movs	r3, #0
 8023fe6:	9309      	str	r3, [sp, #36]	@ 0x24
 8023fe8:	2320      	movs	r3, #32
 8023fea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8023ff2:	2330      	movs	r3, #48	@ 0x30
 8023ff4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80241a4 <_vfiprintf_r+0x21c>
 8023ff8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023ffc:	f04f 0901 	mov.w	r9, #1
 8024000:	4623      	mov	r3, r4
 8024002:	469a      	mov	sl, r3
 8024004:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024008:	b10a      	cbz	r2, 802400e <_vfiprintf_r+0x86>
 802400a:	2a25      	cmp	r2, #37	@ 0x25
 802400c:	d1f9      	bne.n	8024002 <_vfiprintf_r+0x7a>
 802400e:	ebba 0b04 	subs.w	fp, sl, r4
 8024012:	d00b      	beq.n	802402c <_vfiprintf_r+0xa4>
 8024014:	465b      	mov	r3, fp
 8024016:	4622      	mov	r2, r4
 8024018:	4629      	mov	r1, r5
 802401a:	4630      	mov	r0, r6
 802401c:	f7ff ffa1 	bl	8023f62 <__sfputs_r>
 8024020:	3001      	adds	r0, #1
 8024022:	f000 80a7 	beq.w	8024174 <_vfiprintf_r+0x1ec>
 8024026:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024028:	445a      	add	r2, fp
 802402a:	9209      	str	r2, [sp, #36]	@ 0x24
 802402c:	f89a 3000 	ldrb.w	r3, [sl]
 8024030:	2b00      	cmp	r3, #0
 8024032:	f000 809f 	beq.w	8024174 <_vfiprintf_r+0x1ec>
 8024036:	2300      	movs	r3, #0
 8024038:	f04f 32ff 	mov.w	r2, #4294967295
 802403c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024040:	f10a 0a01 	add.w	sl, sl, #1
 8024044:	9304      	str	r3, [sp, #16]
 8024046:	9307      	str	r3, [sp, #28]
 8024048:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802404c:	931a      	str	r3, [sp, #104]	@ 0x68
 802404e:	4654      	mov	r4, sl
 8024050:	2205      	movs	r2, #5
 8024052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024056:	4853      	ldr	r0, [pc, #332]	@ (80241a4 <_vfiprintf_r+0x21c>)
 8024058:	f7dc f942 	bl	80002e0 <memchr>
 802405c:	9a04      	ldr	r2, [sp, #16]
 802405e:	b9d8      	cbnz	r0, 8024098 <_vfiprintf_r+0x110>
 8024060:	06d1      	lsls	r1, r2, #27
 8024062:	bf44      	itt	mi
 8024064:	2320      	movmi	r3, #32
 8024066:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802406a:	0713      	lsls	r3, r2, #28
 802406c:	bf44      	itt	mi
 802406e:	232b      	movmi	r3, #43	@ 0x2b
 8024070:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024074:	f89a 3000 	ldrb.w	r3, [sl]
 8024078:	2b2a      	cmp	r3, #42	@ 0x2a
 802407a:	d015      	beq.n	80240a8 <_vfiprintf_r+0x120>
 802407c:	9a07      	ldr	r2, [sp, #28]
 802407e:	4654      	mov	r4, sl
 8024080:	2000      	movs	r0, #0
 8024082:	f04f 0c0a 	mov.w	ip, #10
 8024086:	4621      	mov	r1, r4
 8024088:	f811 3b01 	ldrb.w	r3, [r1], #1
 802408c:	3b30      	subs	r3, #48	@ 0x30
 802408e:	2b09      	cmp	r3, #9
 8024090:	d94b      	bls.n	802412a <_vfiprintf_r+0x1a2>
 8024092:	b1b0      	cbz	r0, 80240c2 <_vfiprintf_r+0x13a>
 8024094:	9207      	str	r2, [sp, #28]
 8024096:	e014      	b.n	80240c2 <_vfiprintf_r+0x13a>
 8024098:	eba0 0308 	sub.w	r3, r0, r8
 802409c:	fa09 f303 	lsl.w	r3, r9, r3
 80240a0:	4313      	orrs	r3, r2
 80240a2:	9304      	str	r3, [sp, #16]
 80240a4:	46a2      	mov	sl, r4
 80240a6:	e7d2      	b.n	802404e <_vfiprintf_r+0xc6>
 80240a8:	9b03      	ldr	r3, [sp, #12]
 80240aa:	1d19      	adds	r1, r3, #4
 80240ac:	681b      	ldr	r3, [r3, #0]
 80240ae:	9103      	str	r1, [sp, #12]
 80240b0:	2b00      	cmp	r3, #0
 80240b2:	bfbb      	ittet	lt
 80240b4:	425b      	neglt	r3, r3
 80240b6:	f042 0202 	orrlt.w	r2, r2, #2
 80240ba:	9307      	strge	r3, [sp, #28]
 80240bc:	9307      	strlt	r3, [sp, #28]
 80240be:	bfb8      	it	lt
 80240c0:	9204      	strlt	r2, [sp, #16]
 80240c2:	7823      	ldrb	r3, [r4, #0]
 80240c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80240c6:	d10a      	bne.n	80240de <_vfiprintf_r+0x156>
 80240c8:	7863      	ldrb	r3, [r4, #1]
 80240ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80240cc:	d132      	bne.n	8024134 <_vfiprintf_r+0x1ac>
 80240ce:	9b03      	ldr	r3, [sp, #12]
 80240d0:	1d1a      	adds	r2, r3, #4
 80240d2:	681b      	ldr	r3, [r3, #0]
 80240d4:	9203      	str	r2, [sp, #12]
 80240d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80240da:	3402      	adds	r4, #2
 80240dc:	9305      	str	r3, [sp, #20]
 80240de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80241b4 <_vfiprintf_r+0x22c>
 80240e2:	7821      	ldrb	r1, [r4, #0]
 80240e4:	2203      	movs	r2, #3
 80240e6:	4650      	mov	r0, sl
 80240e8:	f7dc f8fa 	bl	80002e0 <memchr>
 80240ec:	b138      	cbz	r0, 80240fe <_vfiprintf_r+0x176>
 80240ee:	9b04      	ldr	r3, [sp, #16]
 80240f0:	eba0 000a 	sub.w	r0, r0, sl
 80240f4:	2240      	movs	r2, #64	@ 0x40
 80240f6:	4082      	lsls	r2, r0
 80240f8:	4313      	orrs	r3, r2
 80240fa:	3401      	adds	r4, #1
 80240fc:	9304      	str	r3, [sp, #16]
 80240fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024102:	4829      	ldr	r0, [pc, #164]	@ (80241a8 <_vfiprintf_r+0x220>)
 8024104:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8024108:	2206      	movs	r2, #6
 802410a:	f7dc f8e9 	bl	80002e0 <memchr>
 802410e:	2800      	cmp	r0, #0
 8024110:	d03f      	beq.n	8024192 <_vfiprintf_r+0x20a>
 8024112:	4b26      	ldr	r3, [pc, #152]	@ (80241ac <_vfiprintf_r+0x224>)
 8024114:	bb1b      	cbnz	r3, 802415e <_vfiprintf_r+0x1d6>
 8024116:	9b03      	ldr	r3, [sp, #12]
 8024118:	3307      	adds	r3, #7
 802411a:	f023 0307 	bic.w	r3, r3, #7
 802411e:	3308      	adds	r3, #8
 8024120:	9303      	str	r3, [sp, #12]
 8024122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024124:	443b      	add	r3, r7
 8024126:	9309      	str	r3, [sp, #36]	@ 0x24
 8024128:	e76a      	b.n	8024000 <_vfiprintf_r+0x78>
 802412a:	fb0c 3202 	mla	r2, ip, r2, r3
 802412e:	460c      	mov	r4, r1
 8024130:	2001      	movs	r0, #1
 8024132:	e7a8      	b.n	8024086 <_vfiprintf_r+0xfe>
 8024134:	2300      	movs	r3, #0
 8024136:	3401      	adds	r4, #1
 8024138:	9305      	str	r3, [sp, #20]
 802413a:	4619      	mov	r1, r3
 802413c:	f04f 0c0a 	mov.w	ip, #10
 8024140:	4620      	mov	r0, r4
 8024142:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024146:	3a30      	subs	r2, #48	@ 0x30
 8024148:	2a09      	cmp	r2, #9
 802414a:	d903      	bls.n	8024154 <_vfiprintf_r+0x1cc>
 802414c:	2b00      	cmp	r3, #0
 802414e:	d0c6      	beq.n	80240de <_vfiprintf_r+0x156>
 8024150:	9105      	str	r1, [sp, #20]
 8024152:	e7c4      	b.n	80240de <_vfiprintf_r+0x156>
 8024154:	fb0c 2101 	mla	r1, ip, r1, r2
 8024158:	4604      	mov	r4, r0
 802415a:	2301      	movs	r3, #1
 802415c:	e7f0      	b.n	8024140 <_vfiprintf_r+0x1b8>
 802415e:	ab03      	add	r3, sp, #12
 8024160:	9300      	str	r3, [sp, #0]
 8024162:	462a      	mov	r2, r5
 8024164:	4b12      	ldr	r3, [pc, #72]	@ (80241b0 <_vfiprintf_r+0x228>)
 8024166:	a904      	add	r1, sp, #16
 8024168:	4630      	mov	r0, r6
 802416a:	f3af 8000 	nop.w
 802416e:	4607      	mov	r7, r0
 8024170:	1c78      	adds	r0, r7, #1
 8024172:	d1d6      	bne.n	8024122 <_vfiprintf_r+0x19a>
 8024174:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024176:	07d9      	lsls	r1, r3, #31
 8024178:	d405      	bmi.n	8024186 <_vfiprintf_r+0x1fe>
 802417a:	89ab      	ldrh	r3, [r5, #12]
 802417c:	059a      	lsls	r2, r3, #22
 802417e:	d402      	bmi.n	8024186 <_vfiprintf_r+0x1fe>
 8024180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024182:	f7ff fe21 	bl	8023dc8 <__retarget_lock_release_recursive>
 8024186:	89ab      	ldrh	r3, [r5, #12]
 8024188:	065b      	lsls	r3, r3, #25
 802418a:	f53f af1f 	bmi.w	8023fcc <_vfiprintf_r+0x44>
 802418e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024190:	e71e      	b.n	8023fd0 <_vfiprintf_r+0x48>
 8024192:	ab03      	add	r3, sp, #12
 8024194:	9300      	str	r3, [sp, #0]
 8024196:	462a      	mov	r2, r5
 8024198:	4b05      	ldr	r3, [pc, #20]	@ (80241b0 <_vfiprintf_r+0x228>)
 802419a:	a904      	add	r1, sp, #16
 802419c:	4630      	mov	r0, r6
 802419e:	f000 f879 	bl	8024294 <_printf_i>
 80241a2:	e7e4      	b.n	802416e <_vfiprintf_r+0x1e6>
 80241a4:	08026617 	.word	0x08026617
 80241a8:	08026621 	.word	0x08026621
 80241ac:	00000000 	.word	0x00000000
 80241b0:	08023f63 	.word	0x08023f63
 80241b4:	0802661d 	.word	0x0802661d

080241b8 <_printf_common>:
 80241b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80241bc:	4616      	mov	r6, r2
 80241be:	4698      	mov	r8, r3
 80241c0:	688a      	ldr	r2, [r1, #8]
 80241c2:	690b      	ldr	r3, [r1, #16]
 80241c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80241c8:	4293      	cmp	r3, r2
 80241ca:	bfb8      	it	lt
 80241cc:	4613      	movlt	r3, r2
 80241ce:	6033      	str	r3, [r6, #0]
 80241d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80241d4:	4607      	mov	r7, r0
 80241d6:	460c      	mov	r4, r1
 80241d8:	b10a      	cbz	r2, 80241de <_printf_common+0x26>
 80241da:	3301      	adds	r3, #1
 80241dc:	6033      	str	r3, [r6, #0]
 80241de:	6823      	ldr	r3, [r4, #0]
 80241e0:	0699      	lsls	r1, r3, #26
 80241e2:	bf42      	ittt	mi
 80241e4:	6833      	ldrmi	r3, [r6, #0]
 80241e6:	3302      	addmi	r3, #2
 80241e8:	6033      	strmi	r3, [r6, #0]
 80241ea:	6825      	ldr	r5, [r4, #0]
 80241ec:	f015 0506 	ands.w	r5, r5, #6
 80241f0:	d106      	bne.n	8024200 <_printf_common+0x48>
 80241f2:	f104 0a19 	add.w	sl, r4, #25
 80241f6:	68e3      	ldr	r3, [r4, #12]
 80241f8:	6832      	ldr	r2, [r6, #0]
 80241fa:	1a9b      	subs	r3, r3, r2
 80241fc:	42ab      	cmp	r3, r5
 80241fe:	dc26      	bgt.n	802424e <_printf_common+0x96>
 8024200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8024204:	6822      	ldr	r2, [r4, #0]
 8024206:	3b00      	subs	r3, #0
 8024208:	bf18      	it	ne
 802420a:	2301      	movne	r3, #1
 802420c:	0692      	lsls	r2, r2, #26
 802420e:	d42b      	bmi.n	8024268 <_printf_common+0xb0>
 8024210:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8024214:	4641      	mov	r1, r8
 8024216:	4638      	mov	r0, r7
 8024218:	47c8      	blx	r9
 802421a:	3001      	adds	r0, #1
 802421c:	d01e      	beq.n	802425c <_printf_common+0xa4>
 802421e:	6823      	ldr	r3, [r4, #0]
 8024220:	6922      	ldr	r2, [r4, #16]
 8024222:	f003 0306 	and.w	r3, r3, #6
 8024226:	2b04      	cmp	r3, #4
 8024228:	bf02      	ittt	eq
 802422a:	68e5      	ldreq	r5, [r4, #12]
 802422c:	6833      	ldreq	r3, [r6, #0]
 802422e:	1aed      	subeq	r5, r5, r3
 8024230:	68a3      	ldr	r3, [r4, #8]
 8024232:	bf0c      	ite	eq
 8024234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024238:	2500      	movne	r5, #0
 802423a:	4293      	cmp	r3, r2
 802423c:	bfc4      	itt	gt
 802423e:	1a9b      	subgt	r3, r3, r2
 8024240:	18ed      	addgt	r5, r5, r3
 8024242:	2600      	movs	r6, #0
 8024244:	341a      	adds	r4, #26
 8024246:	42b5      	cmp	r5, r6
 8024248:	d11a      	bne.n	8024280 <_printf_common+0xc8>
 802424a:	2000      	movs	r0, #0
 802424c:	e008      	b.n	8024260 <_printf_common+0xa8>
 802424e:	2301      	movs	r3, #1
 8024250:	4652      	mov	r2, sl
 8024252:	4641      	mov	r1, r8
 8024254:	4638      	mov	r0, r7
 8024256:	47c8      	blx	r9
 8024258:	3001      	adds	r0, #1
 802425a:	d103      	bne.n	8024264 <_printf_common+0xac>
 802425c:	f04f 30ff 	mov.w	r0, #4294967295
 8024260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024264:	3501      	adds	r5, #1
 8024266:	e7c6      	b.n	80241f6 <_printf_common+0x3e>
 8024268:	18e1      	adds	r1, r4, r3
 802426a:	1c5a      	adds	r2, r3, #1
 802426c:	2030      	movs	r0, #48	@ 0x30
 802426e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8024272:	4422      	add	r2, r4
 8024274:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8024278:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802427c:	3302      	adds	r3, #2
 802427e:	e7c7      	b.n	8024210 <_printf_common+0x58>
 8024280:	2301      	movs	r3, #1
 8024282:	4622      	mov	r2, r4
 8024284:	4641      	mov	r1, r8
 8024286:	4638      	mov	r0, r7
 8024288:	47c8      	blx	r9
 802428a:	3001      	adds	r0, #1
 802428c:	d0e6      	beq.n	802425c <_printf_common+0xa4>
 802428e:	3601      	adds	r6, #1
 8024290:	e7d9      	b.n	8024246 <_printf_common+0x8e>
	...

08024294 <_printf_i>:
 8024294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024298:	7e0f      	ldrb	r7, [r1, #24]
 802429a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802429c:	2f78      	cmp	r7, #120	@ 0x78
 802429e:	4691      	mov	r9, r2
 80242a0:	4680      	mov	r8, r0
 80242a2:	460c      	mov	r4, r1
 80242a4:	469a      	mov	sl, r3
 80242a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80242aa:	d807      	bhi.n	80242bc <_printf_i+0x28>
 80242ac:	2f62      	cmp	r7, #98	@ 0x62
 80242ae:	d80a      	bhi.n	80242c6 <_printf_i+0x32>
 80242b0:	2f00      	cmp	r7, #0
 80242b2:	f000 80d1 	beq.w	8024458 <_printf_i+0x1c4>
 80242b6:	2f58      	cmp	r7, #88	@ 0x58
 80242b8:	f000 80b8 	beq.w	802442c <_printf_i+0x198>
 80242bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80242c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80242c4:	e03a      	b.n	802433c <_printf_i+0xa8>
 80242c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80242ca:	2b15      	cmp	r3, #21
 80242cc:	d8f6      	bhi.n	80242bc <_printf_i+0x28>
 80242ce:	a101      	add	r1, pc, #4	@ (adr r1, 80242d4 <_printf_i+0x40>)
 80242d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80242d4:	0802432d 	.word	0x0802432d
 80242d8:	08024341 	.word	0x08024341
 80242dc:	080242bd 	.word	0x080242bd
 80242e0:	080242bd 	.word	0x080242bd
 80242e4:	080242bd 	.word	0x080242bd
 80242e8:	080242bd 	.word	0x080242bd
 80242ec:	08024341 	.word	0x08024341
 80242f0:	080242bd 	.word	0x080242bd
 80242f4:	080242bd 	.word	0x080242bd
 80242f8:	080242bd 	.word	0x080242bd
 80242fc:	080242bd 	.word	0x080242bd
 8024300:	0802443f 	.word	0x0802443f
 8024304:	0802436b 	.word	0x0802436b
 8024308:	080243f9 	.word	0x080243f9
 802430c:	080242bd 	.word	0x080242bd
 8024310:	080242bd 	.word	0x080242bd
 8024314:	08024461 	.word	0x08024461
 8024318:	080242bd 	.word	0x080242bd
 802431c:	0802436b 	.word	0x0802436b
 8024320:	080242bd 	.word	0x080242bd
 8024324:	080242bd 	.word	0x080242bd
 8024328:	08024401 	.word	0x08024401
 802432c:	6833      	ldr	r3, [r6, #0]
 802432e:	1d1a      	adds	r2, r3, #4
 8024330:	681b      	ldr	r3, [r3, #0]
 8024332:	6032      	str	r2, [r6, #0]
 8024334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024338:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802433c:	2301      	movs	r3, #1
 802433e:	e09c      	b.n	802447a <_printf_i+0x1e6>
 8024340:	6833      	ldr	r3, [r6, #0]
 8024342:	6820      	ldr	r0, [r4, #0]
 8024344:	1d19      	adds	r1, r3, #4
 8024346:	6031      	str	r1, [r6, #0]
 8024348:	0606      	lsls	r6, r0, #24
 802434a:	d501      	bpl.n	8024350 <_printf_i+0xbc>
 802434c:	681d      	ldr	r5, [r3, #0]
 802434e:	e003      	b.n	8024358 <_printf_i+0xc4>
 8024350:	0645      	lsls	r5, r0, #25
 8024352:	d5fb      	bpl.n	802434c <_printf_i+0xb8>
 8024354:	f9b3 5000 	ldrsh.w	r5, [r3]
 8024358:	2d00      	cmp	r5, #0
 802435a:	da03      	bge.n	8024364 <_printf_i+0xd0>
 802435c:	232d      	movs	r3, #45	@ 0x2d
 802435e:	426d      	negs	r5, r5
 8024360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024364:	4858      	ldr	r0, [pc, #352]	@ (80244c8 <_printf_i+0x234>)
 8024366:	230a      	movs	r3, #10
 8024368:	e011      	b.n	802438e <_printf_i+0xfa>
 802436a:	6821      	ldr	r1, [r4, #0]
 802436c:	6833      	ldr	r3, [r6, #0]
 802436e:	0608      	lsls	r0, r1, #24
 8024370:	f853 5b04 	ldr.w	r5, [r3], #4
 8024374:	d402      	bmi.n	802437c <_printf_i+0xe8>
 8024376:	0649      	lsls	r1, r1, #25
 8024378:	bf48      	it	mi
 802437a:	b2ad      	uxthmi	r5, r5
 802437c:	2f6f      	cmp	r7, #111	@ 0x6f
 802437e:	4852      	ldr	r0, [pc, #328]	@ (80244c8 <_printf_i+0x234>)
 8024380:	6033      	str	r3, [r6, #0]
 8024382:	bf14      	ite	ne
 8024384:	230a      	movne	r3, #10
 8024386:	2308      	moveq	r3, #8
 8024388:	2100      	movs	r1, #0
 802438a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802438e:	6866      	ldr	r6, [r4, #4]
 8024390:	60a6      	str	r6, [r4, #8]
 8024392:	2e00      	cmp	r6, #0
 8024394:	db05      	blt.n	80243a2 <_printf_i+0x10e>
 8024396:	6821      	ldr	r1, [r4, #0]
 8024398:	432e      	orrs	r6, r5
 802439a:	f021 0104 	bic.w	r1, r1, #4
 802439e:	6021      	str	r1, [r4, #0]
 80243a0:	d04b      	beq.n	802443a <_printf_i+0x1a6>
 80243a2:	4616      	mov	r6, r2
 80243a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80243a8:	fb03 5711 	mls	r7, r3, r1, r5
 80243ac:	5dc7      	ldrb	r7, [r0, r7]
 80243ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80243b2:	462f      	mov	r7, r5
 80243b4:	42bb      	cmp	r3, r7
 80243b6:	460d      	mov	r5, r1
 80243b8:	d9f4      	bls.n	80243a4 <_printf_i+0x110>
 80243ba:	2b08      	cmp	r3, #8
 80243bc:	d10b      	bne.n	80243d6 <_printf_i+0x142>
 80243be:	6823      	ldr	r3, [r4, #0]
 80243c0:	07df      	lsls	r7, r3, #31
 80243c2:	d508      	bpl.n	80243d6 <_printf_i+0x142>
 80243c4:	6923      	ldr	r3, [r4, #16]
 80243c6:	6861      	ldr	r1, [r4, #4]
 80243c8:	4299      	cmp	r1, r3
 80243ca:	bfde      	ittt	le
 80243cc:	2330      	movle	r3, #48	@ 0x30
 80243ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80243d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80243d6:	1b92      	subs	r2, r2, r6
 80243d8:	6122      	str	r2, [r4, #16]
 80243da:	f8cd a000 	str.w	sl, [sp]
 80243de:	464b      	mov	r3, r9
 80243e0:	aa03      	add	r2, sp, #12
 80243e2:	4621      	mov	r1, r4
 80243e4:	4640      	mov	r0, r8
 80243e6:	f7ff fee7 	bl	80241b8 <_printf_common>
 80243ea:	3001      	adds	r0, #1
 80243ec:	d14a      	bne.n	8024484 <_printf_i+0x1f0>
 80243ee:	f04f 30ff 	mov.w	r0, #4294967295
 80243f2:	b004      	add	sp, #16
 80243f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80243f8:	6823      	ldr	r3, [r4, #0]
 80243fa:	f043 0320 	orr.w	r3, r3, #32
 80243fe:	6023      	str	r3, [r4, #0]
 8024400:	4832      	ldr	r0, [pc, #200]	@ (80244cc <_printf_i+0x238>)
 8024402:	2778      	movs	r7, #120	@ 0x78
 8024404:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8024408:	6823      	ldr	r3, [r4, #0]
 802440a:	6831      	ldr	r1, [r6, #0]
 802440c:	061f      	lsls	r7, r3, #24
 802440e:	f851 5b04 	ldr.w	r5, [r1], #4
 8024412:	d402      	bmi.n	802441a <_printf_i+0x186>
 8024414:	065f      	lsls	r7, r3, #25
 8024416:	bf48      	it	mi
 8024418:	b2ad      	uxthmi	r5, r5
 802441a:	6031      	str	r1, [r6, #0]
 802441c:	07d9      	lsls	r1, r3, #31
 802441e:	bf44      	itt	mi
 8024420:	f043 0320 	orrmi.w	r3, r3, #32
 8024424:	6023      	strmi	r3, [r4, #0]
 8024426:	b11d      	cbz	r5, 8024430 <_printf_i+0x19c>
 8024428:	2310      	movs	r3, #16
 802442a:	e7ad      	b.n	8024388 <_printf_i+0xf4>
 802442c:	4826      	ldr	r0, [pc, #152]	@ (80244c8 <_printf_i+0x234>)
 802442e:	e7e9      	b.n	8024404 <_printf_i+0x170>
 8024430:	6823      	ldr	r3, [r4, #0]
 8024432:	f023 0320 	bic.w	r3, r3, #32
 8024436:	6023      	str	r3, [r4, #0]
 8024438:	e7f6      	b.n	8024428 <_printf_i+0x194>
 802443a:	4616      	mov	r6, r2
 802443c:	e7bd      	b.n	80243ba <_printf_i+0x126>
 802443e:	6833      	ldr	r3, [r6, #0]
 8024440:	6825      	ldr	r5, [r4, #0]
 8024442:	6961      	ldr	r1, [r4, #20]
 8024444:	1d18      	adds	r0, r3, #4
 8024446:	6030      	str	r0, [r6, #0]
 8024448:	062e      	lsls	r6, r5, #24
 802444a:	681b      	ldr	r3, [r3, #0]
 802444c:	d501      	bpl.n	8024452 <_printf_i+0x1be>
 802444e:	6019      	str	r1, [r3, #0]
 8024450:	e002      	b.n	8024458 <_printf_i+0x1c4>
 8024452:	0668      	lsls	r0, r5, #25
 8024454:	d5fb      	bpl.n	802444e <_printf_i+0x1ba>
 8024456:	8019      	strh	r1, [r3, #0]
 8024458:	2300      	movs	r3, #0
 802445a:	6123      	str	r3, [r4, #16]
 802445c:	4616      	mov	r6, r2
 802445e:	e7bc      	b.n	80243da <_printf_i+0x146>
 8024460:	6833      	ldr	r3, [r6, #0]
 8024462:	1d1a      	adds	r2, r3, #4
 8024464:	6032      	str	r2, [r6, #0]
 8024466:	681e      	ldr	r6, [r3, #0]
 8024468:	6862      	ldr	r2, [r4, #4]
 802446a:	2100      	movs	r1, #0
 802446c:	4630      	mov	r0, r6
 802446e:	f7db ff37 	bl	80002e0 <memchr>
 8024472:	b108      	cbz	r0, 8024478 <_printf_i+0x1e4>
 8024474:	1b80      	subs	r0, r0, r6
 8024476:	6060      	str	r0, [r4, #4]
 8024478:	6863      	ldr	r3, [r4, #4]
 802447a:	6123      	str	r3, [r4, #16]
 802447c:	2300      	movs	r3, #0
 802447e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024482:	e7aa      	b.n	80243da <_printf_i+0x146>
 8024484:	6923      	ldr	r3, [r4, #16]
 8024486:	4632      	mov	r2, r6
 8024488:	4649      	mov	r1, r9
 802448a:	4640      	mov	r0, r8
 802448c:	47d0      	blx	sl
 802448e:	3001      	adds	r0, #1
 8024490:	d0ad      	beq.n	80243ee <_printf_i+0x15a>
 8024492:	6823      	ldr	r3, [r4, #0]
 8024494:	079b      	lsls	r3, r3, #30
 8024496:	d413      	bmi.n	80244c0 <_printf_i+0x22c>
 8024498:	68e0      	ldr	r0, [r4, #12]
 802449a:	9b03      	ldr	r3, [sp, #12]
 802449c:	4298      	cmp	r0, r3
 802449e:	bfb8      	it	lt
 80244a0:	4618      	movlt	r0, r3
 80244a2:	e7a6      	b.n	80243f2 <_printf_i+0x15e>
 80244a4:	2301      	movs	r3, #1
 80244a6:	4632      	mov	r2, r6
 80244a8:	4649      	mov	r1, r9
 80244aa:	4640      	mov	r0, r8
 80244ac:	47d0      	blx	sl
 80244ae:	3001      	adds	r0, #1
 80244b0:	d09d      	beq.n	80243ee <_printf_i+0x15a>
 80244b2:	3501      	adds	r5, #1
 80244b4:	68e3      	ldr	r3, [r4, #12]
 80244b6:	9903      	ldr	r1, [sp, #12]
 80244b8:	1a5b      	subs	r3, r3, r1
 80244ba:	42ab      	cmp	r3, r5
 80244bc:	dcf2      	bgt.n	80244a4 <_printf_i+0x210>
 80244be:	e7eb      	b.n	8024498 <_printf_i+0x204>
 80244c0:	2500      	movs	r5, #0
 80244c2:	f104 0619 	add.w	r6, r4, #25
 80244c6:	e7f5      	b.n	80244b4 <_printf_i+0x220>
 80244c8:	08026628 	.word	0x08026628
 80244cc:	08026639 	.word	0x08026639

080244d0 <__sflush_r>:
 80244d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80244d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80244d8:	0716      	lsls	r6, r2, #28
 80244da:	4605      	mov	r5, r0
 80244dc:	460c      	mov	r4, r1
 80244de:	d454      	bmi.n	802458a <__sflush_r+0xba>
 80244e0:	684b      	ldr	r3, [r1, #4]
 80244e2:	2b00      	cmp	r3, #0
 80244e4:	dc02      	bgt.n	80244ec <__sflush_r+0x1c>
 80244e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80244e8:	2b00      	cmp	r3, #0
 80244ea:	dd48      	ble.n	802457e <__sflush_r+0xae>
 80244ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80244ee:	2e00      	cmp	r6, #0
 80244f0:	d045      	beq.n	802457e <__sflush_r+0xae>
 80244f2:	2300      	movs	r3, #0
 80244f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80244f8:	682f      	ldr	r7, [r5, #0]
 80244fa:	6a21      	ldr	r1, [r4, #32]
 80244fc:	602b      	str	r3, [r5, #0]
 80244fe:	d030      	beq.n	8024562 <__sflush_r+0x92>
 8024500:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8024502:	89a3      	ldrh	r3, [r4, #12]
 8024504:	0759      	lsls	r1, r3, #29
 8024506:	d505      	bpl.n	8024514 <__sflush_r+0x44>
 8024508:	6863      	ldr	r3, [r4, #4]
 802450a:	1ad2      	subs	r2, r2, r3
 802450c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802450e:	b10b      	cbz	r3, 8024514 <__sflush_r+0x44>
 8024510:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8024512:	1ad2      	subs	r2, r2, r3
 8024514:	2300      	movs	r3, #0
 8024516:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8024518:	6a21      	ldr	r1, [r4, #32]
 802451a:	4628      	mov	r0, r5
 802451c:	47b0      	blx	r6
 802451e:	1c43      	adds	r3, r0, #1
 8024520:	89a3      	ldrh	r3, [r4, #12]
 8024522:	d106      	bne.n	8024532 <__sflush_r+0x62>
 8024524:	6829      	ldr	r1, [r5, #0]
 8024526:	291d      	cmp	r1, #29
 8024528:	d82b      	bhi.n	8024582 <__sflush_r+0xb2>
 802452a:	4a2a      	ldr	r2, [pc, #168]	@ (80245d4 <__sflush_r+0x104>)
 802452c:	40ca      	lsrs	r2, r1
 802452e:	07d6      	lsls	r6, r2, #31
 8024530:	d527      	bpl.n	8024582 <__sflush_r+0xb2>
 8024532:	2200      	movs	r2, #0
 8024534:	6062      	str	r2, [r4, #4]
 8024536:	04d9      	lsls	r1, r3, #19
 8024538:	6922      	ldr	r2, [r4, #16]
 802453a:	6022      	str	r2, [r4, #0]
 802453c:	d504      	bpl.n	8024548 <__sflush_r+0x78>
 802453e:	1c42      	adds	r2, r0, #1
 8024540:	d101      	bne.n	8024546 <__sflush_r+0x76>
 8024542:	682b      	ldr	r3, [r5, #0]
 8024544:	b903      	cbnz	r3, 8024548 <__sflush_r+0x78>
 8024546:	6560      	str	r0, [r4, #84]	@ 0x54
 8024548:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802454a:	602f      	str	r7, [r5, #0]
 802454c:	b1b9      	cbz	r1, 802457e <__sflush_r+0xae>
 802454e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024552:	4299      	cmp	r1, r3
 8024554:	d002      	beq.n	802455c <__sflush_r+0x8c>
 8024556:	4628      	mov	r0, r5
 8024558:	f7ff fca2 	bl	8023ea0 <_free_r>
 802455c:	2300      	movs	r3, #0
 802455e:	6363      	str	r3, [r4, #52]	@ 0x34
 8024560:	e00d      	b.n	802457e <__sflush_r+0xae>
 8024562:	2301      	movs	r3, #1
 8024564:	4628      	mov	r0, r5
 8024566:	47b0      	blx	r6
 8024568:	4602      	mov	r2, r0
 802456a:	1c50      	adds	r0, r2, #1
 802456c:	d1c9      	bne.n	8024502 <__sflush_r+0x32>
 802456e:	682b      	ldr	r3, [r5, #0]
 8024570:	2b00      	cmp	r3, #0
 8024572:	d0c6      	beq.n	8024502 <__sflush_r+0x32>
 8024574:	2b1d      	cmp	r3, #29
 8024576:	d001      	beq.n	802457c <__sflush_r+0xac>
 8024578:	2b16      	cmp	r3, #22
 802457a:	d11e      	bne.n	80245ba <__sflush_r+0xea>
 802457c:	602f      	str	r7, [r5, #0]
 802457e:	2000      	movs	r0, #0
 8024580:	e022      	b.n	80245c8 <__sflush_r+0xf8>
 8024582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024586:	b21b      	sxth	r3, r3
 8024588:	e01b      	b.n	80245c2 <__sflush_r+0xf2>
 802458a:	690f      	ldr	r7, [r1, #16]
 802458c:	2f00      	cmp	r7, #0
 802458e:	d0f6      	beq.n	802457e <__sflush_r+0xae>
 8024590:	0793      	lsls	r3, r2, #30
 8024592:	680e      	ldr	r6, [r1, #0]
 8024594:	bf08      	it	eq
 8024596:	694b      	ldreq	r3, [r1, #20]
 8024598:	600f      	str	r7, [r1, #0]
 802459a:	bf18      	it	ne
 802459c:	2300      	movne	r3, #0
 802459e:	eba6 0807 	sub.w	r8, r6, r7
 80245a2:	608b      	str	r3, [r1, #8]
 80245a4:	f1b8 0f00 	cmp.w	r8, #0
 80245a8:	dde9      	ble.n	802457e <__sflush_r+0xae>
 80245aa:	6a21      	ldr	r1, [r4, #32]
 80245ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80245ae:	4643      	mov	r3, r8
 80245b0:	463a      	mov	r2, r7
 80245b2:	4628      	mov	r0, r5
 80245b4:	47b0      	blx	r6
 80245b6:	2800      	cmp	r0, #0
 80245b8:	dc08      	bgt.n	80245cc <__sflush_r+0xfc>
 80245ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80245be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80245c2:	81a3      	strh	r3, [r4, #12]
 80245c4:	f04f 30ff 	mov.w	r0, #4294967295
 80245c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80245cc:	4407      	add	r7, r0
 80245ce:	eba8 0800 	sub.w	r8, r8, r0
 80245d2:	e7e7      	b.n	80245a4 <__sflush_r+0xd4>
 80245d4:	20400001 	.word	0x20400001

080245d8 <_fflush_r>:
 80245d8:	b538      	push	{r3, r4, r5, lr}
 80245da:	690b      	ldr	r3, [r1, #16]
 80245dc:	4605      	mov	r5, r0
 80245de:	460c      	mov	r4, r1
 80245e0:	b913      	cbnz	r3, 80245e8 <_fflush_r+0x10>
 80245e2:	2500      	movs	r5, #0
 80245e4:	4628      	mov	r0, r5
 80245e6:	bd38      	pop	{r3, r4, r5, pc}
 80245e8:	b118      	cbz	r0, 80245f2 <_fflush_r+0x1a>
 80245ea:	6a03      	ldr	r3, [r0, #32]
 80245ec:	b90b      	cbnz	r3, 80245f2 <_fflush_r+0x1a>
 80245ee:	f7ff f9d7 	bl	80239a0 <__sinit>
 80245f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80245f6:	2b00      	cmp	r3, #0
 80245f8:	d0f3      	beq.n	80245e2 <_fflush_r+0xa>
 80245fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80245fc:	07d0      	lsls	r0, r2, #31
 80245fe:	d404      	bmi.n	802460a <_fflush_r+0x32>
 8024600:	0599      	lsls	r1, r3, #22
 8024602:	d402      	bmi.n	802460a <_fflush_r+0x32>
 8024604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024606:	f7ff fbde 	bl	8023dc6 <__retarget_lock_acquire_recursive>
 802460a:	4628      	mov	r0, r5
 802460c:	4621      	mov	r1, r4
 802460e:	f7ff ff5f 	bl	80244d0 <__sflush_r>
 8024612:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024614:	07da      	lsls	r2, r3, #31
 8024616:	4605      	mov	r5, r0
 8024618:	d4e4      	bmi.n	80245e4 <_fflush_r+0xc>
 802461a:	89a3      	ldrh	r3, [r4, #12]
 802461c:	059b      	lsls	r3, r3, #22
 802461e:	d4e1      	bmi.n	80245e4 <_fflush_r+0xc>
 8024620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024622:	f7ff fbd1 	bl	8023dc8 <__retarget_lock_release_recursive>
 8024626:	e7dd      	b.n	80245e4 <_fflush_r+0xc>

08024628 <__swhatbuf_r>:
 8024628:	b570      	push	{r4, r5, r6, lr}
 802462a:	460c      	mov	r4, r1
 802462c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024630:	2900      	cmp	r1, #0
 8024632:	b096      	sub	sp, #88	@ 0x58
 8024634:	4615      	mov	r5, r2
 8024636:	461e      	mov	r6, r3
 8024638:	da0d      	bge.n	8024656 <__swhatbuf_r+0x2e>
 802463a:	89a3      	ldrh	r3, [r4, #12]
 802463c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8024640:	f04f 0100 	mov.w	r1, #0
 8024644:	bf14      	ite	ne
 8024646:	2340      	movne	r3, #64	@ 0x40
 8024648:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802464c:	2000      	movs	r0, #0
 802464e:	6031      	str	r1, [r6, #0]
 8024650:	602b      	str	r3, [r5, #0]
 8024652:	b016      	add	sp, #88	@ 0x58
 8024654:	bd70      	pop	{r4, r5, r6, pc}
 8024656:	466a      	mov	r2, sp
 8024658:	f000 f848 	bl	80246ec <_fstat_r>
 802465c:	2800      	cmp	r0, #0
 802465e:	dbec      	blt.n	802463a <__swhatbuf_r+0x12>
 8024660:	9901      	ldr	r1, [sp, #4]
 8024662:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8024666:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802466a:	4259      	negs	r1, r3
 802466c:	4159      	adcs	r1, r3
 802466e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024672:	e7eb      	b.n	802464c <__swhatbuf_r+0x24>

08024674 <__smakebuf_r>:
 8024674:	898b      	ldrh	r3, [r1, #12]
 8024676:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024678:	079d      	lsls	r5, r3, #30
 802467a:	4606      	mov	r6, r0
 802467c:	460c      	mov	r4, r1
 802467e:	d507      	bpl.n	8024690 <__smakebuf_r+0x1c>
 8024680:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8024684:	6023      	str	r3, [r4, #0]
 8024686:	6123      	str	r3, [r4, #16]
 8024688:	2301      	movs	r3, #1
 802468a:	6163      	str	r3, [r4, #20]
 802468c:	b003      	add	sp, #12
 802468e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024690:	ab01      	add	r3, sp, #4
 8024692:	466a      	mov	r2, sp
 8024694:	f7ff ffc8 	bl	8024628 <__swhatbuf_r>
 8024698:	9f00      	ldr	r7, [sp, #0]
 802469a:	4605      	mov	r5, r0
 802469c:	4639      	mov	r1, r7
 802469e:	4630      	mov	r0, r6
 80246a0:	f7ff f858 	bl	8023754 <_malloc_r>
 80246a4:	b948      	cbnz	r0, 80246ba <__smakebuf_r+0x46>
 80246a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80246aa:	059a      	lsls	r2, r3, #22
 80246ac:	d4ee      	bmi.n	802468c <__smakebuf_r+0x18>
 80246ae:	f023 0303 	bic.w	r3, r3, #3
 80246b2:	f043 0302 	orr.w	r3, r3, #2
 80246b6:	81a3      	strh	r3, [r4, #12]
 80246b8:	e7e2      	b.n	8024680 <__smakebuf_r+0xc>
 80246ba:	89a3      	ldrh	r3, [r4, #12]
 80246bc:	6020      	str	r0, [r4, #0]
 80246be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80246c2:	81a3      	strh	r3, [r4, #12]
 80246c4:	9b01      	ldr	r3, [sp, #4]
 80246c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80246ca:	b15b      	cbz	r3, 80246e4 <__smakebuf_r+0x70>
 80246cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80246d0:	4630      	mov	r0, r6
 80246d2:	f000 f81d 	bl	8024710 <_isatty_r>
 80246d6:	b128      	cbz	r0, 80246e4 <__smakebuf_r+0x70>
 80246d8:	89a3      	ldrh	r3, [r4, #12]
 80246da:	f023 0303 	bic.w	r3, r3, #3
 80246de:	f043 0301 	orr.w	r3, r3, #1
 80246e2:	81a3      	strh	r3, [r4, #12]
 80246e4:	89a3      	ldrh	r3, [r4, #12]
 80246e6:	431d      	orrs	r5, r3
 80246e8:	81a5      	strh	r5, [r4, #12]
 80246ea:	e7cf      	b.n	802468c <__smakebuf_r+0x18>

080246ec <_fstat_r>:
 80246ec:	b538      	push	{r3, r4, r5, lr}
 80246ee:	4d07      	ldr	r5, [pc, #28]	@ (802470c <_fstat_r+0x20>)
 80246f0:	2300      	movs	r3, #0
 80246f2:	4604      	mov	r4, r0
 80246f4:	4608      	mov	r0, r1
 80246f6:	4611      	mov	r1, r2
 80246f8:	602b      	str	r3, [r5, #0]
 80246fa:	f7dd fa42 	bl	8001b82 <_fstat>
 80246fe:	1c43      	adds	r3, r0, #1
 8024700:	d102      	bne.n	8024708 <_fstat_r+0x1c>
 8024702:	682b      	ldr	r3, [r5, #0]
 8024704:	b103      	cbz	r3, 8024708 <_fstat_r+0x1c>
 8024706:	6023      	str	r3, [r4, #0]
 8024708:	bd38      	pop	{r3, r4, r5, pc}
 802470a:	bf00      	nop
 802470c:	2402614c 	.word	0x2402614c

08024710 <_isatty_r>:
 8024710:	b538      	push	{r3, r4, r5, lr}
 8024712:	4d06      	ldr	r5, [pc, #24]	@ (802472c <_isatty_r+0x1c>)
 8024714:	2300      	movs	r3, #0
 8024716:	4604      	mov	r4, r0
 8024718:	4608      	mov	r0, r1
 802471a:	602b      	str	r3, [r5, #0]
 802471c:	f7dd fa36 	bl	8001b8c <_isatty>
 8024720:	1c43      	adds	r3, r0, #1
 8024722:	d102      	bne.n	802472a <_isatty_r+0x1a>
 8024724:	682b      	ldr	r3, [r5, #0]
 8024726:	b103      	cbz	r3, 802472a <_isatty_r+0x1a>
 8024728:	6023      	str	r3, [r4, #0]
 802472a:	bd38      	pop	{r3, r4, r5, pc}
 802472c:	2402614c 	.word	0x2402614c

08024730 <_init>:
 8024730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024732:	bf00      	nop
 8024734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024736:	bc08      	pop	{r3}
 8024738:	469e      	mov	lr, r3
 802473a:	4770      	bx	lr

0802473c <_fini>:
 802473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802473e:	bf00      	nop
 8024740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024742:	bc08      	pop	{r3}
 8024744:	469e      	mov	lr, r3
 8024746:	4770      	bx	lr
