
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021580  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003134  08021820  08021820  00022820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08024954  08024954  00025954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08024afc  08024afc  00025afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 001d5ec0  90000000  90000000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000000e  901d5ec0  901d5ec0  00205ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08024b14  08024b14  00205ece  2**0
                  CONTENTS
  8 .ARM          00000008  08024b14  08024b14  00025b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08024b1c  08024b1c  00205ece  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  08024b1c  08024b1c  00025b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08024b38  08024b38  00025b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  08024b40  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_MCU_Data_OutBuffer1 00004b00  24000140  08024c7c  00026140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_MCU_Data_OutBuffer0 00004b00  24004c40  0802977c  0002ac40  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 TouchGFX_ScratchbufferA 00000100  24009740  0802e27c  0002f740  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 16 TouchGFX_ScratchbufferB 00000100  24009840  0802e37c  0002f840  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 17 .bss          0001c500  24009940  0802e47c  0002f940  2**2
                  ALLOC
 18 ._user_heap_stack 00002000  24025e40  0802e47c  0002fe40  2**0
                  ALLOC
 19 .ARM.attributes 0000002e  00000000  00000000  00205ece  2**0
                  CONTENTS, READONLY
 20 BufferSection 00232800  d0000000  d0000000  00206000  2**2
                  ALLOC
 21 .debug_info   000beea1  00000000  00000000  00205efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 000157f3  00000000  00000000  002c4d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 000038c8  00000000  00000000  002da590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 00003a70  00000000  00000000  002dde58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00052479  00000000  00000000  002e18c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   0006201c  00000000  00000000  00333d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    001df656  00000000  00000000  00395d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .comment      000000c2  00000000  00000000  005753b3  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000a104  00000000  00000000  00575478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 00022e70  00000000  00000000  0057f57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_line_str 00000066  00000000  00000000  005a23ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24009940 	.word	0x24009940
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08021808 	.word	0x08021808

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24009944 	.word	0x24009944
 80002dc:	08021808 	.word	0x08021808

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00c b9a6 	b.w	800ca4c <vTaskSetApplicationTaskTag>
 8000700:	080020c9 	.word	0x080020c9

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	224c      	movs	r2, #76	@ 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	a809      	add	r0, sp, #36	@ 0x24
 800070e:	f020 fae7 	bl	8020ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f020 fae2 	bl	8020ce0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800071c:	2004      	movs	r0, #4
 800071e:	f008 fb69 	bl	8008df4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <SystemClock_Config+0xbc>)
 8000728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <SystemClock_Config+0xc0>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	0491      	lsls	r1, r2, #18
 8000750:	d5fc      	bpl.n	800074c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000756:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 800075a:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000762:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2301      	movs	r3, #1
 800076a:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800076e:	23a0      	movs	r3, #160	@ 0xa0
 8000770:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000774:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077a:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000782:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f008 fe30 	bl	80093e8 <HAL_RCC_OscConfig>
 8000788:	b108      	cbz	r0, 800078e <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000790:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800079a:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007a0:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a4:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f009 f9b6 	bl	8009b18 <HAL_RCC_ClockConfig>
 80007ac:	4601      	mov	r1, r0
 80007ae:	b108      	cbz	r0, 80007b4 <SystemClock_Config+0xb0>
 80007b0:	b672      	cpsid	i
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007b8:	f009 f8be 	bl	8009938 <HAL_RCC_MCOConfig>
}
 80007bc:	b01d      	add	sp, #116	@ 0x74
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	58000400 	.word	0x58000400
 80007c4:	58024800 	.word	0x58024800

080007c8 <main>:
{
 80007c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007cc:	b0bb      	sub	sp, #236	@ 0xec
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ce:	2210      	movs	r2, #16
 80007d0:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007d2:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007d6:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d8:	f020 fa82 	bl	8020ce0 <memset>
  HAL_MPU_Disable();
 80007dc:	f005 fd12 	bl	8006204 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007e0:	f04f 4c10 	mov.w	ip, #2415919104	@ 0x90000000
 80007e4:	4bbd      	ldr	r3, [pc, #756]	@ (8000adc <main+0x314>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007e6:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e8:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ec:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007ee:	e9cd c32e 	strd	ip, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f2:	f005 fd25 	bl	8006240 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007f6:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007fa:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007fe:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000802:	f005 fd1d 	bl	8006240 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000806:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000808:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800080a:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800080e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000812:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000816:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000818:	2318      	movs	r3, #24
 800081a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081e:	f005 fd0f 	bl	8006240 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000822:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000824:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000826:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800082a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800082e:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000830:	2312      	movs	r3, #18
 8000832:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800083c:	f005 fd00 	bl	8006240 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000840:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000844:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000846:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 800084a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800084c:	2311      	movs	r3, #17
 800084e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	f005 fcf5 	bl	8006240 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000856:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800085a:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800085e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000862:	4b9f      	ldr	r3, [pc, #636]	@ (8000ae0 <main+0x318>)
 8000864:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000866:	230e      	movs	r3, #14
 8000868:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086c:	f005 fce8 	bl	8006240 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000870:	4628      	mov	r0, r5
 8000872:	f005 fcd5 	bl	8006220 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000876:	4b9b      	ldr	r3, [pc, #620]	@ (8000ae4 <main+0x31c>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800087e:	d111      	bne.n	80008a4 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000884:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000888:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800088c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800089a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800089c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008a4:	4a8f      	ldr	r2, [pc, #572]	@ (8000ae4 <main+0x31c>)
 80008a6:	6953      	ldr	r3, [r2, #20]
 80008a8:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80008ac:	d123      	bne.n	80008f6 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ba:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008be:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008c2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008c6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008cc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008d2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80008d8:	d2f9      	bcs.n	80008ce <main+0x106>
    } while(sets-- != 0U);
 80008da:	3b20      	subs	r3, #32
 80008dc:	f113 0f20 	cmn.w	r3, #32
 80008e0:	d1f2      	bne.n	80008c8 <main+0x100>
 80008e2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008e6:	6953      	ldr	r3, [r2, #20]
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008f2:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 80008f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008fa:	4d7b      	ldr	r5, [pc, #492]	@ (8000ae8 <main+0x320>)
 80008fc:	682c      	ldr	r4, [r5, #0]
 80008fe:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000902:	f000 831f 	beq.w	8000f44 <main+0x77c>
 8000906:	3b01      	subs	r3, #1
 8000908:	d2f8      	bcs.n	80008fc <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800090a:	b672      	cpsid	i
  while (1)
 800090c:	e7fe      	b.n	800090c <main+0x144>
 800090e:	b672      	cpsid	i
 8000910:	e7fe      	b.n	8000910 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000912:	4876      	ldr	r0, [pc, #472]	@ (8000aec <main+0x324>)
 8000914:	4a76      	ldr	r2, [pc, #472]	@ (8000af0 <main+0x328>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000916:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000918:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 800091a:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800091e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000922:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000926:	f008 fb81 	bl	800902c <HAL_QSPI_Init>
 800092a:	b108      	cbz	r0, 8000930 <main+0x168>
 800092c:	b672      	cpsid	i
  while (1)
 800092e:	e7fe      	b.n	800092e <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000930:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000934:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000936:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 800093a:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 800093e:	f004 ff37 	bl	80057b0 <BSP_QSPI_Init>
 8000942:	b108      	cbz	r0, 8000948 <main+0x180>
 8000944:	b672      	cpsid	i
  while (1)
 8000946:	e7fe      	b.n	8000946 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000948:	f004 fede 	bl	8005708 <BSP_QSPI_EnableMemoryMappedMode>
 800094c:	4603      	mov	r3, r0
 800094e:	b108      	cbz	r0, 8000954 <main+0x18c>
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000954:	4867      	ldr	r0, [pc, #412]	@ (8000af4 <main+0x32c>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000956:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800095a:	4e67      	ldr	r6, [pc, #412]	@ (8000af8 <main+0x330>)
  hdma2d.Init.OutputOffset = 0;
 800095c:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000960:	e9c0 6200 	strd	r6, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000964:	f005 fcf9 	bl	800635a <HAL_DMA2D_Init>
 8000968:	4604      	mov	r4, r0
 800096a:	b108      	cbz	r0, 8000970 <main+0x1a8>
 800096c:	b672      	cpsid	i
  while (1)
 800096e:	e7fe      	b.n	800096e <main+0x1a6>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000970:	4602      	mov	r2, r0
 8000972:	4651      	mov	r1, sl
 8000974:	4861      	ldr	r0, [pc, #388]	@ (8000afc <main+0x334>)
 8000976:	f006 fbd3 	bl	8007120 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800097a:	2014      	movs	r0, #20
 800097c:	f005 fbbc 	bl	80060f8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000980:	462a      	mov	r2, r5
 8000982:	4651      	mov	r1, sl
 8000984:	485d      	ldr	r0, [pc, #372]	@ (8000afc <main+0x334>)
 8000986:	f006 fbcb 	bl	8007120 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800098a:	200a      	movs	r0, #10
 800098c:	f005 fbb4 	bl	80060f8 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000990:	2224      	movs	r2, #36	@ 0x24
 8000992:	4621      	mov	r1, r4
 8000994:	a817      	add	r0, sp, #92	@ 0x5c
 8000996:	f020 f9a3 	bl	8020ce0 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800099a:	2218      	movs	r2, #24
 800099c:	4621      	mov	r1, r4
 800099e:	a811      	add	r0, sp, #68	@ 0x44
 80009a0:	f020 f99e 	bl	8020ce0 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009a4:	2234      	movs	r2, #52	@ 0x34
 80009a6:	4621      	mov	r1, r4
 80009a8:	a82d      	add	r0, sp, #180	@ 0xb4
 80009aa:	f020 f999 	bl	8020ce0 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009ae:	4621      	mov	r1, r4
 80009b0:	222c      	movs	r2, #44	@ 0x2c
 80009b2:	a820      	add	r0, sp, #128	@ 0x80
 80009b4:	f020 f994 	bl	8020ce0 <memset>
  hdsi.Instance = DSI;
 80009b8:	4e51      	ldr	r6, [pc, #324]	@ (8000b00 <main+0x338>)
 80009ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009be:	a90e      	add	r1, sp, #56	@ 0x38
 80009c0:	4630      	mov	r0, r6
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009c2:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009c4:	e9c6 3400 	strd	r3, r4, [r6]
  PLLInit.PLLNDIV = 119;
 80009c8:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009ca:	e9c6 9502 	strd	r9, r5, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 80009ce:	e9cd 370e 	strd	r3, r7, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009d2:	f005 fe0f 	bl	80065f4 <HAL_DSI_Init>
 80009d6:	b108      	cbz	r0, 80009dc <main+0x214>
 80009d8:	b672      	cpsid	i
  while (1)
 80009da:	e7fe      	b.n	80009da <main+0x212>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80009dc:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 80009e0:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009e4:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009e8:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 80009ec:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009ee:	a917      	add	r1, sp, #92	@ 0x5c
 80009f0:	4630      	mov	r0, r6
 80009f2:	f006 f86b 	bl	8006acc <HAL_DSI_ConfigHostTimeouts>
 80009f6:	b108      	cbz	r0, 80009fc <main+0x234>
 80009f8:	b672      	cpsid	i
  while (1)
 80009fa:	e7fe      	b.n	80009fa <main+0x232>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009fc:	2321      	movs	r3, #33	@ 0x21
 80009fe:	241c      	movs	r4, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a00:	250f      	movs	r5, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a02:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a04:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a08:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000a0a:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a0e:	4630      	mov	r0, r6
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a10:	e9cd 5313 	strd	r5, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a14:	f006 f81d 	bl	8006a52 <HAL_DSI_ConfigPhyTimer>
 8000a18:	b108      	cbz	r0, 8000a1e <main+0x256>
 8000a1a:	b672      	cpsid	i
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <main+0x254>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a1e:	2104      	movs	r1, #4
 8000a20:	4837      	ldr	r0, [pc, #220]	@ (8000b00 <main+0x338>)
 8000a22:	f006 f805 	bl	8006a30 <HAL_DSI_ConfigFlowControl>
 8000a26:	b108      	cbz	r0, 8000a2c <main+0x264>
 8000a28:	b672      	cpsid	i
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <main+0x262>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a2c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000a30:	4833      	ldr	r0, [pc, #204]	@ (8000b00 <main+0x338>)
 8000a32:	f006 f9d4 	bl	8006dde <HAL_DSI_SetLowPowerRXFilter>
 8000a36:	4601      	mov	r1, r0
 8000a38:	b108      	cbz	r0, 8000a3e <main+0x276>
 8000a3a:	b672      	cpsid	i
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <main+0x274>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a3e:	4830      	ldr	r0, [pc, #192]	@ (8000b00 <main+0x338>)
 8000a40:	f005 fd75 	bl	800652e <HAL_DSI_ConfigErrorMonitor>
 8000a44:	b108      	cbz	r0, 8000a4a <main+0x282>
 8000a46:	b672      	cpsid	i
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <main+0x280>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a4e:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a52:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a56:	f44f 5b80 	mov.w	fp, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a5e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a62:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a66:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a6a:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a72:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a76:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a7e:	e9cd b331 	strd	fp, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a86:	e9cd 2333 	strd	r2, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a8a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000a8e:	e9cd 1335 	strd	r1, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a96:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a98:	e9cd 0337 	strd	r0, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a9c:	4818      	ldr	r0, [pc, #96]	@ (8000b00 <main+0x338>)
 8000a9e:	f005 ff93 	bl	80069c8 <HAL_DSI_ConfigCommand>
 8000aa2:	b108      	cbz	r0, 8000aa8 <main+0x2e0>
 8000aa4:	b672      	cpsid	i
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <main+0x2de>
  CmdCfg.CommandSize = 400;
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000aae:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000ab0:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ab2:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab4:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000ab6:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000aba:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000abc:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000ac0:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000ac2:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ac6:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000aca:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ace:	480c      	ldr	r0, [pc, #48]	@ (8000b00 <main+0x338>)
 8000ad0:	f005 ff08 	bl	80068e4 <HAL_DSI_ConfigAdaptedCommandMode>
 8000ad4:	4601      	mov	r1, r0
 8000ad6:	b1a8      	cbz	r0, 8000b04 <main+0x33c>
 8000ad8:	b672      	cpsid	i
  while (1)
 8000ada:	e7fe      	b.n	8000ada <main+0x312>
 8000adc:	0300001b 	.word	0x0300001b
 8000ae0:	10040000 	.word	0x10040000
 8000ae4:	e000ed00 	.word	0xe000ed00
 8000ae8:	58024400 	.word	0x58024400
 8000aec:	240099c8 	.word	0x240099c8
 8000af0:	52005000 	.word	0x52005000
 8000af4:	24009c08 	.word	0x24009c08
 8000af8:	52001000 	.word	0x52001000
 8000afc:	58021800 	.word	0x58021800
 8000b00:	24009bec 	.word	0x24009bec
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b04:	485b      	ldr	r0, [pc, #364]	@ (8000c74 <main+0x4ac>)
 8000b06:	f005 fedc 	bl	80068c2 <HAL_DSI_SetGenericVCID>
 8000b0a:	4604      	mov	r4, r0
 8000b0c:	b108      	cbz	r0, 8000b12 <main+0x34a>
 8000b0e:	b672      	cpsid	i
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <main+0x348>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b12:	2234      	movs	r2, #52	@ 0x34
 8000b14:	4601      	mov	r1, r0
 8000b16:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000b18:	4d57      	ldr	r5, [pc, #348]	@ (8000c78 <main+0x4b0>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b1a:	f020 f8e1 	bl	8020ce0 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b1e:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8000cb8 <main+0x4f0>
 8000b22:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b26:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000b2a:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b2e:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000b30:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000b32:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b36:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b3e:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b42:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000b46:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b4a:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b4e:	f240 1893 	movw	r8, #403	@ 0x193
 8000b52:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b56:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000b5a:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b5e:	f007 fe3f 	bl	80087e0 <HAL_LTDC_Init>
 8000b62:	4602      	mov	r2, r0
 8000b64:	b108      	cbz	r0, 8000b6a <main+0x3a2>
 8000b66:	b672      	cpsid	i
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <main+0x3a0>
  pLayerCfg.Alpha = 255;
 8000b6a:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000b6c:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8000b6e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000b72:	f8ad 20b0 	strh.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000b76:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000b7a:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000b7c:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.WindowX1 = 400;
 8000b80:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b84:	2107      	movs	r1, #7
 8000b86:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000b8a:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b8e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b92:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000b94:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b98:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b9a:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9e:	f007 fed4 	bl	800894a <HAL_LTDC_ConfigLayer>
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	b108      	cbz	r0, 8000baa <main+0x3e2>
 8000ba6:	b672      	cpsid	i
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <main+0x3e0>
  __HAL_LTDC_DISABLE(&hltdc);
 8000baa:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bac:	4831      	ldr	r0, [pc, #196]	@ (8000c74 <main+0x4ac>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bae:	6993      	ldr	r3, [r2, #24]
 8000bb0:	f023 0301 	bic.w	r3, r3, #1
 8000bb4:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000bb6:	f005 ffef 	bl	8006b98 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000bba:	4930      	ldr	r1, [pc, #192]	@ (8000c7c <main+0x4b4>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bbc:	4b30      	ldr	r3, [pc, #192]	@ (8000c80 <main+0x4b8>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bbe:	4831      	ldr	r0, [pc, #196]	@ (8000c84 <main+0x4bc>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc0:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bc2:	4b31      	ldr	r3, [pc, #196]	@ (8000c88 <main+0x4c0>)
  IOCtx.Address     = 0;
 8000bc4:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bc6:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bc8:	4b30      	ldr	r3, [pc, #192]	@ (8000c8c <main+0x4c4>)
 8000bca:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bcc:	f004 fb92 	bl	80052f4 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000bd0:	4632      	mov	r2, r6
 8000bd2:	4621      	mov	r1, r4
 8000bd4:	482b      	ldr	r0, [pc, #172]	@ (8000c84 <main+0x4bc>)
 8000bd6:	f003 fffd 	bl	8004bd4 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000bda:	2328      	movs	r3, #40	@ 0x28
 8000bdc:	2215      	movs	r2, #21
 8000bde:	4621      	mov	r1, r4
 8000be0:	4824      	ldr	r0, [pc, #144]	@ (8000c74 <main+0x4ac>)
 8000be2:	9400      	str	r4, [sp, #0]
 8000be4:	f006 f80b 	bl	8006bfe <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000be8:	a92d      	add	r1, sp, #180	@ 0xb4
 8000bea:	4822      	ldr	r0, [pc, #136]	@ (8000c74 <main+0x4ac>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000bec:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000bee:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000bf2:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000bf6:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000bfa:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000bfe:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c02:	f005 fee1 	bl	80069c8 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c06:	4622      	mov	r2, r4
 8000c08:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c0c:	4628      	mov	r0, r5
 8000c0e:	f007 fec9 	bl	80089a4 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c12:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000c14:	481e      	ldr	r0, [pc, #120]	@ (8000c90 <main+0x4c8>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000c16:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c18:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <main+0x4cc>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c22:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000c24:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c26:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c2a:	f005 fb35 	bl	8006298 <HAL_CRC_Init>
 8000c2e:	b108      	cbz	r0, 8000c34 <main+0x46c>
 8000c30:	b672      	cpsid	i
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <main+0x46a>
  hjpeg.Instance = JPEG;
 8000c34:	4818      	ldr	r0, [pc, #96]	@ (8000c98 <main+0x4d0>)
 8000c36:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <main+0x4d4>)
 8000c38:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000c3a:	f006 ffcb 	bl	8007bd4 <HAL_JPEG_Init>
 8000c3e:	b108      	cbz	r0, 8000c44 <main+0x47c>
 8000c40:	b672      	cpsid	i
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <main+0x47a>
  MX_TouchGFX_Init();
 8000c44:	f000 fdd2 	bl	80017ec <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c48:	f000 fdcf 	bl	80017ea <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c4c:	f00a f9a4 	bl	800af98 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c50:	4a13      	ldr	r2, [pc, #76]	@ (8000ca0 <main+0x4d8>)
 8000c52:	2100      	movs	r1, #0
 8000c54:	4813      	ldr	r0, [pc, #76]	@ (8000ca4 <main+0x4dc>)
 8000c56:	f00a f9cb 	bl	800aff0 <osThreadNew>
 8000c5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <main+0x4e0>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c5c:	4a13      	ldr	r2, [pc, #76]	@ (8000cac <main+0x4e4>)
 8000c5e:	2100      	movs	r1, #0
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c60:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c62:	4813      	ldr	r0, [pc, #76]	@ (8000cb0 <main+0x4e8>)
 8000c64:	f00a f9c4 	bl	800aff0 <osThreadNew>
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <main+0x4ec>)
 8000c6a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c6c:	f00a f9a6 	bl	800afbc <osKernelStart>
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <main+0x4a8>
 8000c72:	bf00      	nop
 8000c74:	24009bec 	.word	0x24009bec
 8000c78:	24009a14 	.word	0x24009a14
 8000c7c:	2400995c 	.word	0x2400995c
 8000c80:	080056d9 	.word	0x080056d9
 8000c84:	2400996c 	.word	0x2400996c
 8000c88:	08001dc1 	.word	0x08001dc1
 8000c8c:	08001df9 	.word	0x08001df9
 8000c90:	24009c70 	.word	0x24009c70
 8000c94:	58024c00 	.word	0x58024c00
 8000c98:	24009b94 	.word	0x24009b94
 8000c9c:	52003000 	.word	0x52003000
 8000ca0:	08023688 	.word	0x08023688
 8000ca4:	080017fb 	.word	0x080017fb
 8000ca8:	24009990 	.word	0x24009990
 8000cac:	08023664 	.word	0x08023664
 8000cb0:	0800394d 	.word	0x0800394d
 8000cb4:	2400998c 	.word	0x2400998c
 8000cb8:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	2214      	movs	r2, #20
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2600      	movs	r6, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f020 f80c 	bl	8020ce0 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|GPIO_PIN_5
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f241 3128 	movw	r1, #4904	@ 0x1328
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|GPIO_PIN_5
 8000cd6:	48ac      	ldr	r0, [pc, #688]	@ (8000f88 <main+0x7c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2703      	movs	r7, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cdc:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	f44f 7980 	mov.w	r9, #256	@ 0x100
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cec:	f44f 5b80 	mov.w	fp, #4096	@ 0x1000
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000cf0:	f04f 0a08 	mov.w	sl, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf8:	9304      	str	r3, [sp, #16]
 8000cfa:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	9305      	str	r3, [sp, #20]
 8000d12:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d28:	9306      	str	r3, [sp, #24]
 8000d2a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	9307      	str	r3, [sp, #28]
 8000d42:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d58:	9308      	str	r3, [sp, #32]
 8000d5a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000da2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000db0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	930c      	str	r3, [sp, #48]	@ 0x30
 8000dba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dbc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	930d      	str	r3, [sp, #52]	@ 0x34
 8000dd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|GPIO_PIN_5
 8000dd4:	f006 f9a4 	bl	8007120 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dde:	486b      	ldr	r0, [pc, #428]	@ (8000f8c <main+0x7c4>)
 8000de0:	f006 f99e 	bl	8007120 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2108      	movs	r1, #8
 8000de8:	4869      	ldr	r0, [pc, #420]	@ (8000f90 <main+0x7c8>)
 8000dea:	f006 f999 	bl	8007120 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000df4:	4867      	ldr	r0, [pc, #412]	@ (8000f94 <main+0x7cc>)
 8000df6:	f006 f993 	bl	8007120 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	4866      	ldr	r0, [pc, #408]	@ (8000f98 <main+0x7d0>)
 8000e00:	f006 f98e 	bl	8007120 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000e0a:	4864      	ldr	r0, [pc, #400]	@ (8000f9c <main+0x7d4>)
 8000e0c:	f006 f988 	bl	8007120 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e14:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e16:	485c      	ldr	r0, [pc, #368]	@ (8000f88 <main+0x7c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	e9cd 672f 	strd	r6, r7, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e20:	f005 fff4 	bl	8006e0c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e26:	485e      	ldr	r0, [pc, #376]	@ (8000fa0 <main+0x7d8>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e28:	9631      	str	r6, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	e9cd 982d 	strd	r9, r8, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	e9cd 662f 	strd	r6, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f005 ffeb 	bl	8006e0c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e36:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e38:	4854      	ldr	r0, [pc, #336]	@ (8000f8c <main+0x7c4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	e9cd 662f 	strd	r6, r6, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	e9cd b52d 	strd	fp, r5, [sp, #180]	@ 0xb4
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e42:	f005 ffe3 	bl	8006e0c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e46:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e48:	4851      	ldr	r0, [pc, #324]	@ (8000f90 <main+0x7c8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	e9cd a52d 	strd	sl, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	e9cd 572f 	strd	r5, r7, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f005 ffdb 	bl	8006e0c <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e56:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e58:	484e      	ldr	r0, [pc, #312]	@ (8000f94 <main+0x7cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	e9cd 952d 	strd	r9, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e5e:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	e9cd 672f 	strd	r6, r7, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f005 ffd1 	bl	8006e0c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e6c:	484a      	ldr	r0, [pc, #296]	@ (8000f98 <main+0x7d0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6e:	e9cd 682f 	strd	r6, r8, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	e9cd 952d 	strd	r9, r5, [sp, #180]	@ 0xb4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e76:	f005 ffc9 	bl	8006e0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e7a:	2320      	movs	r3, #32
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e7c:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e7e:	4842      	ldr	r0, [pc, #264]	@ (8000f88 <main+0x7c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	e9cd 662f 	strd	r6, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e88:	f005 ffc0 	bl	8006e0c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8c:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e8e:	4843      	ldr	r0, [pc, #268]	@ (8000f9c <main+0x7d4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	e9cd 672f 	strd	r6, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	e9cd b52d 	strd	fp, r5, [sp, #180]	@ 0xb4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e98:	f005 ffb8 	bl	8006e0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea0:	a92d      	add	r1, sp, #180	@ 0xb4
 8000ea2:	483e      	ldr	r0, [pc, #248]	@ (8000f9c <main+0x7d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	e9cd 252d 	strd	r2, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	e9cd 662f 	strd	r6, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eac:	f005 ffae 	bl	8006e0c <HAL_GPIO_Init>
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_CLOSE);
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000eb6:	f005 f937 	bl	8006128 <HAL_SYSCFG_AnalogSwitchConfig>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000eba:	f8d4 20d4 	ldr.w	r2, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000ebe:	2105      	movs	r1, #5
 8000ec0:	207a      	movs	r0, #122	@ 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000ec2:	432a      	orrs	r2, r5
 8000ec4:	f8c4 20d4 	str.w	r2, [r4, #212]	@ 0xd4
 8000ec8:	f8d4 20d4 	ldr.w	r2, [r4, #212]	@ 0xd4
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ecc:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000ece:	402a      	ands	r2, r5
 8000ed0:	9203      	str	r2, [sp, #12]
 8000ed2:	9a03      	ldr	r2, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000ed4:	4632      	mov	r2, r6
 8000ed6:	f005 f943 	bl	8006160 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000eda:	207a      	movs	r0, #122	@ 0x7a
 8000edc:	f005 f972 	bl	80061c4 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000ee0:	4930      	ldr	r1, [pc, #192]	@ (8000fa4 <main+0x7dc>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ee2:	4831      	ldr	r0, [pc, #196]	@ (8000fa8 <main+0x7e0>)
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ee4:	2320      	movs	r3, #32
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000ee6:	680a      	ldr	r2, [r1, #0]
 8000ee8:	f022 0201 	bic.w	r2, r2, #1
 8000eec:	600a      	str	r2, [r1, #0]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000eee:	a92d      	add	r1, sp, #180	@ 0xb4
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8000fac <main+0x7e4>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000ef2:	6286      	str	r6, [r0, #40]	@ 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8000ef4:	f8cd 80b4 	str.w	r8, [sp, #180]	@ 0xb4
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ef8:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000efc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f00:	e9c0 3606 	strd	r3, r6, [r0, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f08:	e9c0 3b08 	strd	r3, fp, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000f0c:	2307      	movs	r3, #7
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000f0e:	e9c0 2500 	strd	r2, r5, [r0]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f12:	e9c0 5902 	strd	r5, r9, [r0, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000f16:	e9cd 392e 	strd	r3, r9, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 8000f1a:	e9cd 3730 	strd	r3, r7, [sp, #192]	@ 0xc0
  SdramTiming.RCDDelay = 2;
 8000f1e:	e9cd 8832 	strd	r8, r8, [sp, #200]	@ 0xc8
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f22:	f009 fd85 	bl	800aa30 <HAL_SDRAM_Init>
 8000f26:	4606      	mov	r6, r0
 8000f28:	2800      	cmp	r0, #0
 8000f2a:	f47f acf0 	bne.w	800090e <main+0x146>
  BSP_SDRAM_DeInit(0);
 8000f2e:	f004 fdf9 	bl	8005b24 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000f32:	4630      	mov	r0, r6
 8000f34:	f004 fe44 	bl	8005bc0 <BSP_SDRAM_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	f43f ace9 	beq.w	8000912 <main+0x14a>
 8000f40:	b672      	cpsid	i
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <main+0x77a>
  HAL_Init();
 8000f44:	f005 f898 	bl	8006078 <HAL_Init>
  SystemClock_Config();
 8000f48:	f7ff fbdc 	bl	8000704 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f4c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f50:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f56:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000f5a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f62:	9302      	str	r3, [sp, #8]
 8000f64:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f66:	f006 f8e9 	bl	800713c <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f6a:	4621      	mov	r1, r4
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f006 f8f3 	bl	8007158 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f72:	4c0f      	ldr	r4, [pc, #60]	@ (8000fb0 <main+0x7e8>)
timeout = 0xFFFF;
 8000f74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f78:	6822      	ldr	r2, [r4, #0]
 8000f7a:	0417      	lsls	r7, r2, #16
 8000f7c:	f53f ae9e 	bmi.w	8000cbc <main+0x4f4>
 8000f80:	3b01      	subs	r3, #1
 8000f82:	d2f9      	bcs.n	8000f78 <main+0x7b0>
 8000f84:	b672      	cpsid	i
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <main+0x7be>
 8000f88:	58022400 	.word	0x58022400
 8000f8c:	58022000 	.word	0x58022000
 8000f90:	58021800 	.word	0x58021800
 8000f94:	58021400 	.word	0x58021400
 8000f98:	58020800 	.word	0x58020800
 8000f9c:	58020c00 	.word	0x58020c00
 8000fa0:	58020000 	.word	0x58020000
 8000fa4:	52004000 	.word	0x52004000
 8000fa8:	24009994 	.word	0x24009994
 8000fac:	52004140 	.word	0x52004140
 8000fb0:	58024400 	.word	0x58024400

08000fb4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6)
 8000fb4:	6802      	ldr	r2, [r0, #0]
 8000fb6:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d101      	bne.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000fbc:	f005 b88a 	b.w	80060d4 <HAL_IncTick>
}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40001000 	.word	0x40001000

08000fc8 <Error_Handler>:
 8000fc8:	b672      	cpsid	i
  while (1)
 8000fca:	e7fe      	b.n	8000fca <Error_Handler+0x2>

08000fcc <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <HAL_MspInit+0x2c>)
{
 8000fce:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fd0:	210f      	movs	r1, #15
 8000fd2:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000fda:	f042 0202 	orr.w	r2, r2, #2
 8000fde:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fe2:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff0:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ff2:	f005 b8b5 	b.w	8006160 <HAL_NVIC_SetPriority>
 8000ff6:	bf00      	nop
 8000ff8:	58024400 	.word	0x58024400

08000ffc <HAL_CRC_MspInit>:
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000ffc:	6802      	ldr	r2, [r0, #0]
{
 8000ffe:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <HAL_CRC_MspInit+0x2c>)
 8001002:	429a      	cmp	r2, r3
 8001004:	d10d      	bne.n	8001022 <HAL_CRC_MspInit+0x26>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001006:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800100a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800100e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001012:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001022:	b002      	add	sp, #8
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	58024c00 	.word	0x58024c00

0800102c <HAL_DMA2D_MspInit>:
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 800102c:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <HAL_DMA2D_MspInit+0x40>)
{
 800102e:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001030:	6802      	ldr	r2, [r0, #0]
 8001032:	429a      	cmp	r2, r3
 8001034:	d117      	bne.n	8001066 <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001038:	2107      	movs	r1, #7
 800103a:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800103c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001040:	f042 0210 	orr.w	r2, r2, #16
 8001044:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001048:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800104a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800104e:	f003 0310 	and.w	r3, r3, #16
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001056:	f005 f883 	bl	8006160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800105a:	205a      	movs	r0, #90	@ 0x5a

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800105c:	b003      	add	sp, #12
 800105e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001062:	f005 b8af 	b.w	80061c4 <HAL_NVIC_EnableIRQ>
}
 8001066:	b003      	add	sp, #12
 8001068:	f85d fb04 	ldr.w	pc, [sp], #4
 800106c:	52001000 	.word	0x52001000
 8001070:	58024400 	.word	0x58024400

08001074 <HAL_DSI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdsi: DSI handle pointer
  * @retval None
  */
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001074:	b510      	push	{r4, lr}
 8001076:	b0ba      	sub	sp, #232	@ 0xe8
 8001078:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	2214      	movs	r2, #20
 800107c:	2100      	movs	r1, #0
 800107e:	a803      	add	r0, sp, #12
 8001080:	f01f fe2e 	bl	8020ce0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001084:	22c8      	movs	r2, #200	@ 0xc8
 8001086:	2100      	movs	r1, #0
 8001088:	a808      	add	r0, sp, #32
 800108a:	f01f fe29 	bl	8020ce0 <memset>
  if(hdsi->Instance==DSI)
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001094:	d138      	bne.n	8001108 <HAL_DSI_MspInit+0x94>

    /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001096:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800109a:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800109c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800109e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a2:	f008 ffbb 	bl	800a01c <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	b108      	cbz	r0, 80010ac <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 80010a8:	f7ff ff8e 	bl	8000fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80010ac:	4b17      	ldr	r3, [pc, #92]	@ (800110c <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010b0:	a903      	add	r1, sp, #12
 80010b2:	4817      	ldr	r0, [pc, #92]	@ (8001110 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 80010b4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80010b8:	f042 0210 	orr.w	r2, r2, #16
 80010bc:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 80010c0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80010c4:	f002 0210 	and.w	r2, r2, #16
 80010c8:	9201      	str	r2, [sp, #4]
 80010ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010d4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80010ec:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80010f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010f4:	f005 fe8a 	bl	8006e0c <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 80010f8:	207b      	movs	r0, #123	@ 0x7b
 80010fa:	4622      	mov	r2, r4
 80010fc:	2107      	movs	r1, #7
 80010fe:	f005 f82f 	bl	8006160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001102:	207b      	movs	r0, #123	@ 0x7b
 8001104:	f005 f85e 	bl	80061c4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DSI_MspInit 1 */

  }

}
 8001108:	b03a      	add	sp, #232	@ 0xe8
 800110a:	bd10      	pop	{r4, pc}
 800110c:	58024400 	.word	0x58024400
 8001110:	58022400 	.word	0x58022400

08001114 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001114:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8001116:	4b3c      	ldr	r3, [pc, #240]	@ (8001208 <HAL_JPEG_MspInit+0xf4>)
{
 8001118:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 800111a:	6802      	ldr	r2, [r0, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d170      	bne.n	8001202 <HAL_JPEG_MspInit+0xee>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001120:	4b3a      	ldr	r3, [pc, #232]	@ (800120c <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001122:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 8001124:	4c3a      	ldr	r4, [pc, #232]	@ (8001210 <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001126:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 800112a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800112e:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 800121c <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001132:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001134:	f042 0220 	orr.w	r2, r2, #32
 8001138:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 800113c:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 800113e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001142:	f003 0320 	and.w	r3, r3, #32
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800114a:	2311      	movs	r3, #17
 800114c:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001150:	2300      	movs	r3, #0
 8001152:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001156:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800115a:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800115c:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 800115e:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001162:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8001166:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 800116a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 800116e:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8001172:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001176:	f007 fc72 	bl	8008a5e <HAL_MDMA_Init>
 800117a:	b108      	cbz	r0, 8001180 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 800117c:	f7ff ff24 	bl	8000fc8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001180:	2200      	movs	r2, #0
 8001182:	4823      	ldr	r0, [pc, #140]	@ (8001210 <HAL_JPEG_MspInit+0xfc>)
 8001184:	4611      	mov	r1, r2
 8001186:	f007 fcf8 	bl	8008b7a <HAL_MDMA_ConfigPostRequestMask>
 800118a:	b108      	cbz	r0, 8001190 <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 800118c:	f7ff ff1c 	bl	8000fc8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001190:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8001192:	2313      	movs	r3, #19
 8001194:	4a1f      	ldr	r2, [pc, #124]	@ (8001214 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001196:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001198:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 800119a:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800119e:	4c1e      	ldr	r4, [pc, #120]	@ (8001218 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80011a0:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 80011a4:	2300      	movs	r3, #0
 80011a6:	22c0      	movs	r2, #192	@ 0xc0
 80011a8:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80011ac:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80011ae:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80011b0:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80011b4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 80011b8:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80011bc:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 80011c0:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80011c4:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80011c6:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 80011ca:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80011ce:	f007 fc46 	bl	8008a5e <HAL_MDMA_Init>
 80011d2:	b108      	cbz	r0, 80011d8 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 80011d4:	f7ff fef8 	bl	8000fc8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 80011d8:	2200      	movs	r2, #0
 80011da:	480f      	ldr	r0, [pc, #60]	@ (8001218 <HAL_JPEG_MspInit+0x104>)
 80011dc:	4611      	mov	r1, r2
 80011de:	f007 fccc 	bl	8008b7a <HAL_MDMA_ConfigPostRequestMask>
 80011e2:	b108      	cbz	r0, 80011e8 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 80011e4:	f7ff fef0 	bl	8000fc8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 80011e8:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2105      	movs	r1, #5
 80011ee:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 80011f0:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 80011f2:	f004 ffb5 	bl	8006160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80011f6:	2079      	movs	r0, #121	@ 0x79

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 80011f8:	b003      	add	sp, #12
 80011fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80011fe:	f004 bfe1 	b.w	80061c4 <HAL_NVIC_EnableIRQ>
}
 8001202:	b003      	add	sp, #12
 8001204:	bd30      	pop	{r4, r5, pc}
 8001206:	bf00      	nop
 8001208:	52003000 	.word	0x52003000
 800120c:	58024400 	.word	0x58024400
 8001210:	24009b28 	.word	0x24009b28
 8001214:	520001c0 	.word	0x520001c0
 8001218:	24009abc 	.word	0x24009abc
 800121c:	52000200 	.word	0x52000200

08001220 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001220:	b510      	push	{r4, lr}
 8001222:	b0b4      	sub	sp, #208	@ 0xd0
 8001224:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001226:	22c8      	movs	r2, #200	@ 0xc8
 8001228:	2100      	movs	r1, #0
 800122a:	a802      	add	r0, sp, #8
 800122c:	f01f fd58 	bl	8020ce0 <memset>
  if(hltdc->Instance==LTDC)
 8001230:	6822      	ldr	r2, [r4, #0]
 8001232:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <HAL_LTDC_MspInit+0x74>)
 8001234:	429a      	cmp	r2, r3
 8001236:	d12b      	bne.n	8001290 <HAL_LTDC_MspInit+0x70>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001238:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800123c:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800123e:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001240:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001242:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 8001246:	23a1      	movs	r3, #161	@ 0xa1
 8001248:	2205      	movs	r2, #5
 800124a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800124e:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001250:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001254:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001258:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125c:	f008 fede 	bl	800a01c <HAL_RCCEx_PeriphCLKConfig>
 8001260:	b108      	cbz	r0, 8001266 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 8001262:	f7ff feb1 	bl	8000fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001268:	2058      	movs	r0, #88	@ 0x58
 800126a:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 800126c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001270:	f042 0208 	orr.w	r2, r2, #8
 8001274:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001278:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 800127a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001286:	f004 ff6b 	bl	8006160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800128a:	2058      	movs	r0, #88	@ 0x58
 800128c:	f004 ff9a 	bl	80061c4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001290:	b034      	add	sp, #208	@ 0xd0
 8001292:	bd10      	pop	{r4, pc}
 8001294:	50001000 	.word	0x50001000
 8001298:	58024400 	.word	0x58024400

0800129c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129e:	b0bf      	sub	sp, #252	@ 0xfc
 80012a0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	2214      	movs	r2, #20
 80012a4:	2100      	movs	r1, #0
 80012a6:	a807      	add	r0, sp, #28
 80012a8:	f01f fd1a 	bl	8020ce0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ac:	22c8      	movs	r2, #200	@ 0xc8
 80012ae:	2100      	movs	r1, #0
 80012b0:	a80c      	add	r0, sp, #48	@ 0x30
 80012b2:	f01f fd15 	bl	8020ce0 <memset>
  if(hqspi->Instance==QUADSPI)
 80012b6:	6822      	ldr	r2, [r4, #0]
 80012b8:	4b53      	ldr	r3, [pc, #332]	@ (8001408 <HAL_QSPI_MspInit+0x16c>)
 80012ba:	429a      	cmp	r2, r3
 80012bc:	f040 80a1 	bne.w	8001402 <HAL_QSPI_MspInit+0x166>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80012c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012c4:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c6:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80012c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012cc:	f008 fea6 	bl	800a01c <HAL_RCCEx_PeriphCLKConfig>
 80012d0:	b108      	cbz	r0, 80012d6 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 80012d2:	f7ff fe79 	bl	8000fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80012d6:	4b4d      	ldr	r3, [pc, #308]	@ (800140c <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012dc:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 80012de:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e2:	a907      	add	r1, sp, #28
 80012e4:	484a      	ldr	r0, [pc, #296]	@ (8001410 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012e6:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 80012e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80012ec:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80012f0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80012f4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80012f8:	9201      	str	r2, [sp, #4]
 80012fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001300:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001304:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001308:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800130c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001310:	9202      	str	r2, [sp, #8]
 8001312:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001314:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001318:	f042 0220 	orr.w	r2, r2, #32
 800131c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001320:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001324:	f002 0220 	and.w	r2, r2, #32
 8001328:	9203      	str	r2, [sp, #12]
 800132a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800132c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001330:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001334:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001338:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800133c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001340:	9204      	str	r2, [sp, #16]
 8001342:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001348:	f042 0202 	orr.w	r2, r2, #2
 800134c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001350:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001354:	f002 0202 	and.w	r2, r2, #2
 8001358:	9205      	str	r2, [sp, #20]
 800135a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800135c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001360:	f042 0208 	orr.w	r2, r2, #8
 8001364:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	9306      	str	r3, [sp, #24]
 8001372:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001378:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001380:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001382:	f005 fd43 	bl	8006e0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001386:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001388:	a907      	add	r1, sp, #28
 800138a:	4821      	ldr	r0, [pc, #132]	@ (8001410 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800138c:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001396:	f005 fd39 	bl	8006e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800139a:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800139c:	a907      	add	r1, sp, #28
 800139e:	481d      	ldr	r0, [pc, #116]	@ (8001414 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013a0:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013aa:	f005 fd2f 	bl	8006e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013b2:	a907      	add	r1, sp, #28
 80013b4:	4817      	ldr	r0, [pc, #92]	@ (8001414 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80013b6:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013c0:	f005 fd24 	bl	8006e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013c4:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013c6:	a907      	add	r1, sp, #28
 80013c8:	4813      	ldr	r0, [pc, #76]	@ (8001418 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013ca:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013d4:	f005 fd1a 	bl	8006e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013d8:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	a907      	add	r1, sp, #28
 80013dc:	480f      	ldr	r0, [pc, #60]	@ (800141c <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013de:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	f005 fd10 	bl	8006e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f0:	a907      	add	r1, sp, #28
 80013f2:	480b      	ldr	r0, [pc, #44]	@ (8001420 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013f4:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fe:	f005 fd05 	bl	8006e0c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001402:	b03f      	add	sp, #252	@ 0xfc
 8001404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001406:	bf00      	nop
 8001408:	52005000 	.word	0x52005000
 800140c:	58024400 	.word	0x58024400
 8001410:	58021800 	.word	0x58021800
 8001414:	58021400 	.word	0x58021400
 8001418:	58021c00 	.word	0x58021c00
 800141c:	58020400 	.word	0x58020400
 8001420:	58020c00 	.word	0x58020c00

08001424 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001426:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001428:	2100      	movs	r1, #0
 800142a:	2214      	movs	r2, #20
 800142c:	a801      	add	r0, sp, #4
 800142e:	f01f fc57 	bl	8020ce0 <memset>
  if (FMC_Initialized) {
 8001432:	4b3f      	ldr	r3, [pc, #252]	@ (8001530 <HAL_SDRAM_MspInit+0x10c>)
 8001434:	6819      	ldr	r1, [r3, #0]
 8001436:	2900      	cmp	r1, #0
 8001438:	d177      	bne.n	800152a <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 800143a:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800143c:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 800143e:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001440:	22c0      	movs	r2, #192	@ 0xc0
 8001442:	f01f fc4d 	bl	8020ce0 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001446:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800144a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144c:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800144e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001452:	f008 fde3 	bl	800a01c <HAL_RCCEx_PeriphCLKConfig>
 8001456:	b108      	cbz	r0, 800145c <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001458:	f7ff fdb6 	bl	8000fc8 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 800145c:	4b35      	ldr	r3, [pc, #212]	@ (8001534 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2600      	movs	r6, #0
 8001462:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001464:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001468:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800146a:	a901      	add	r1, sp, #4
 800146c:	4832      	ldr	r0, [pc, #200]	@ (8001538 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800146e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001472:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001476:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800147a:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 800147c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001490:	f005 fcbc 	bl	8006e0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001494:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	a901      	add	r1, sp, #4
 8001498:	4828      	ldr	r0, [pc, #160]	@ (800153c <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800149a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f005 fcb2 	bl	8006e0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80014a8:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ac:	a901      	add	r1, sp, #4
 80014ae:	4824      	ldr	r0, [pc, #144]	@ (8001540 <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014b0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ba:	f005 fca7 	bl	8006e0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 80014be:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014c2:	a901      	add	r1, sp, #4
 80014c4:	481f      	ldr	r0, [pc, #124]	@ (8001544 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014c6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014d0:	f005 fc9c 	bl	8006e0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80014d4:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014d8:	a901      	add	r1, sp, #4
 80014da:	481b      	ldr	r0, [pc, #108]	@ (8001548 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014dc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e6:	f005 fc91 	bl	8006e0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80014ea:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ee:	a901      	add	r1, sp, #4
 80014f0:	4816      	ldr	r0, [pc, #88]	@ (800154c <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014f2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014fc:	f005 fc86 	bl	8006e0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001500:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001504:	a901      	add	r1, sp, #4
 8001506:	4812      	ldr	r0, [pc, #72]	@ (8001550 <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001508:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001512:	f005 fc7b 	bl	8006e0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001516:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001518:	a901      	add	r1, sp, #4
 800151a:	480e      	ldr	r0, [pc, #56]	@ (8001554 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800151c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001526:	f005 fc71 	bl	8006e0c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800152a:	b039      	add	sp, #228	@ 0xe4
 800152c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152e:	bf00      	nop
 8001530:	24009c98 	.word	0x24009c98
 8001534:	58024400 	.word	0x58024400
 8001538:	58022000 	.word	0x58022000
 800153c:	58020400 	.word	0x58020400
 8001540:	58021000 	.word	0x58021000
 8001544:	58021c00 	.word	0x58021c00
 8001548:	58021800 	.word	0x58021800
 800154c:	58020c00 	.word	0x58020c00
 8001550:	58021400 	.word	0x58021400
 8001554:	58020800 	.word	0x58020800

08001558 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001558:	4b1a      	ldr	r3, [pc, #104]	@ (80015c4 <HAL_SDRAM_MspDeInit+0x6c>)
 800155a:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 800155c:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 800155e:	bb82      	cbnz	r2, 80015c2 <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 8001560:	4a19      	ldr	r2, [pc, #100]	@ (80015c8 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 8001562:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001564:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 8001568:	4818      	ldr	r0, [pc, #96]	@ (80015cc <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 800156a:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 800156c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 8001570:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001574:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001578:	f005 fd30 	bl	8006fdc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 800157c:	2160      	movs	r1, #96	@ 0x60
 800157e:	4814      	ldr	r0, [pc, #80]	@ (80015d0 <HAL_SDRAM_MspDeInit+0x78>)
 8001580:	f005 fd2c 	bl	8006fdc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001584:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001588:	4812      	ldr	r0, [pc, #72]	@ (80015d4 <HAL_SDRAM_MspDeInit+0x7c>)
 800158a:	f005 fd27 	bl	8006fdc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800158e:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001592:	4811      	ldr	r0, [pc, #68]	@ (80015d8 <HAL_SDRAM_MspDeInit+0x80>)
 8001594:	f005 fd22 	bl	8006fdc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001598:	f248 1133 	movw	r1, #33075	@ 0x8133
 800159c:	480f      	ldr	r0, [pc, #60]	@ (80015dc <HAL_SDRAM_MspDeInit+0x84>)
 800159e:	f005 fd1d 	bl	8006fdc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80015a2:	f24c 7103 	movw	r1, #50947	@ 0xc703
 80015a6:	480e      	ldr	r0, [pc, #56]	@ (80015e0 <HAL_SDRAM_MspDeInit+0x88>)
 80015a8:	f005 fd18 	bl	8006fdc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80015ac:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 80015b0:	480c      	ldr	r0, [pc, #48]	@ (80015e4 <HAL_SDRAM_MspDeInit+0x8c>)
 80015b2:	f005 fd13 	bl	8006fdc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 80015b6:	4621      	mov	r1, r4
 80015b8:	480b      	ldr	r0, [pc, #44]	@ (80015e8 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80015ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 80015be:	f005 bd0d 	b.w	8006fdc <HAL_GPIO_DeInit>
}
 80015c2:	bd10      	pop	{r4, pc}
 80015c4:	24009c94 	.word	0x24009c94
 80015c8:	58024400 	.word	0x58024400
 80015cc:	58022000 	.word	0x58022000
 80015d0:	58020400 	.word	0x58020400
 80015d4:	58021000 	.word	0x58021000
 80015d8:	58021c00 	.word	0x58021c00
 80015dc:	58021800 	.word	0x58021800
 80015e0:	58020c00 	.word	0x58020c00
 80015e4:	58021400 	.word	0x58021400
 80015e8:	58020800 	.word	0x58020800

080015ec <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ec:	280f      	cmp	r0, #15
{
 80015ee:	b510      	push	{r4, lr}
 80015f0:	4604      	mov	r4, r0
 80015f2:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f4:	d902      	bls.n	80015fc <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80015f6:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80015f8:	b00a      	add	sp, #40	@ 0x28
 80015fa:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80015fc:	4601      	mov	r1, r0
 80015fe:	2200      	movs	r2, #0
 8001600:	2036      	movs	r0, #54	@ 0x36
 8001602:	f004 fdad 	bl	8006160 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001606:	2036      	movs	r0, #54	@ 0x36
 8001608:	f004 fddc 	bl	80061c4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800160c:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800160e:	4669      	mov	r1, sp
 8001610:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 8001612:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001614:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <HAL_InitTick+0x88>)
 8001616:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800161a:	f042 0210 	orr.w	r2, r2, #16
 800161e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800162e:	f008 fbdf 	bl	8009df0 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001632:	9b07      	ldr	r3, [sp, #28]
 8001634:	b9c3      	cbnz	r3, 8001668 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001636:	f008 fbb7 	bl	8009da8 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800163a:	4c0f      	ldr	r4, [pc, #60]	@ (8001678 <HAL_InitTick+0x8c>)
 800163c:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <HAL_InitTick+0x90>)
 800163e:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001640:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001644:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <HAL_InitTick+0x94>)
 8001648:	fbb0 f0f3 	udiv	r0, r0, r3
 800164c:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 800164e:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001650:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001652:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001654:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001656:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001658:	f009 fbc8 	bl	800adec <HAL_TIM_Base_Init>
 800165c:	2800      	cmp	r0, #0
 800165e:	d1ca      	bne.n	80015f6 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001660:	4620      	mov	r0, r4
 8001662:	f009 fa8d 	bl	800ab80 <HAL_TIM_Base_Start_IT>
 8001666:	e7c7      	b.n	80015f8 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001668:	f008 fb9e 	bl	8009da8 <HAL_RCC_GetPCLK1Freq>
 800166c:	0040      	lsls	r0, r0, #1
 800166e:	e7e4      	b.n	800163a <HAL_InitTick+0x4e>
 8001670:	24000074 	.word	0x24000074
 8001674:	58024400 	.word	0x58024400
 8001678:	24009c9c 	.word	0x24009c9c
 800167c:	40001000 	.word	0x40001000
 8001680:	000f4240 	.word	0x000f4240

08001684 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <NMI_Handler>

08001686 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <HardFault_Handler>

08001688 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <MemManage_Handler>

0800168a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler>

0800168c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <UsageFault_Handler>

0800168e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168e:	4770      	bx	lr

08001690 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001690:	4801      	ldr	r0, [pc, #4]	@ (8001698 <TIM6_DAC_IRQHandler+0x8>)
 8001692:	f009 bab7 	b.w	800ac04 <HAL_TIM_IRQHandler>
 8001696:	bf00      	nop
 8001698:	24009c9c 	.word	0x24009c9c

0800169c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800169c:	4801      	ldr	r0, [pc, #4]	@ (80016a4 <LTDC_IRQHandler+0x8>)
 800169e:	f007 b8f7 	b.w	8008890 <HAL_LTDC_IRQHandler>
 80016a2:	bf00      	nop
 80016a4:	24009a14 	.word	0x24009a14

080016a8 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016a8:	4801      	ldr	r0, [pc, #4]	@ (80016b0 <DMA2D_IRQHandler+0x8>)
 80016aa:	f004 be95 	b.w	80063d8 <HAL_DMA2D_IRQHandler>
 80016ae:	bf00      	nop
 80016b0:	24009c08 	.word	0x24009c08

080016b4 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 80016b4:	4801      	ldr	r0, [pc, #4]	@ (80016bc <JPEG_IRQHandler+0x8>)
 80016b6:	f006 bfc3 	b.w	8008640 <HAL_JPEG_IRQHandler>
 80016ba:	bf00      	nop
 80016bc:	24009b94 	.word	0x24009b94

080016c0 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 80016c0:	4804      	ldr	r0, [pc, #16]	@ (80016d4 <MDMA_IRQHandler+0x14>)
{
 80016c2:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 80016c4:	f007 fade 	bl	8008c84 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80016c8:	4803      	ldr	r0, [pc, #12]	@ (80016d8 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80016ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80016ce:	f007 bad9 	b.w	8008c84 <HAL_MDMA_IRQHandler>
 80016d2:	bf00      	nop
 80016d4:	24009abc 	.word	0x24009abc
 80016d8:	24009b28 	.word	0x24009b28

080016dc <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80016dc:	4801      	ldr	r0, [pc, #4]	@ (80016e4 <DSI_IRQHandler+0x8>)
 80016de:	f005 b87e 	b.w	80067de <HAL_DSI_IRQHandler>
 80016e2:	bf00      	nop
 80016e4:	24009bec 	.word	0x24009bec

080016e8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80016e8:	2001      	movs	r0, #1
 80016ea:	4770      	bx	lr

080016ec <_kill>:

int _kill(int pid, int sig)
{
 80016ec:	b508      	push	{r3, lr}
	errno = EINVAL;
 80016ee:	f01f fbab 	bl	8020e48 <__errno>
 80016f2:	2316      	movs	r3, #22
 80016f4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80016f6:	f04f 30ff 	mov.w	r0, #4294967295
 80016fa:	bd08      	pop	{r3, pc}

080016fc <_exit>:

void _exit (int status)
{
 80016fc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80016fe:	f01f fba3 	bl	8020e48 <__errno>
 8001702:	2316      	movs	r3, #22
 8001704:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001706:	e7fe      	b.n	8001706 <_exit+0xa>

08001708 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001708:	b570      	push	{r4, r5, r6, lr}
 800170a:	460d      	mov	r5, r1
 800170c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170e:	460e      	mov	r6, r1
 8001710:	1b73      	subs	r3, r6, r5
 8001712:	429c      	cmp	r4, r3
 8001714:	dc01      	bgt.n	800171a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001716:	4620      	mov	r0, r4
 8001718:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800171a:	f3af 8000 	nop.w
 800171e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	e7f5      	b.n	8001710 <_read+0x8>

08001724 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001724:	b570      	push	{r4, r5, r6, lr}
 8001726:	460d      	mov	r5, r1
 8001728:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172a:	460e      	mov	r6, r1
 800172c:	1b73      	subs	r3, r6, r5
 800172e:	429c      	cmp	r4, r3
 8001730:	dc01      	bgt.n	8001736 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001732:	4620      	mov	r0, r4
 8001734:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001736:	f816 0b01 	ldrb.w	r0, [r6], #1
 800173a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	e7f5      	b.n	800172c <_write+0x8>

08001740 <_close>:

int _close(int file)
{
	return -1;
}
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	4770      	bx	lr

08001746 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001746:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 800174a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800174c:	604b      	str	r3, [r1, #4]
}
 800174e:	4770      	bx	lr

08001750 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001750:	2001      	movs	r0, #1
 8001752:	4770      	bx	lr

08001754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001754:	2000      	movs	r0, #0
 8001756:	4770      	bx	lr

08001758 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001758:	4a0b      	ldr	r2, [pc, #44]	@ (8001788 <_sbrk+0x30>)
{
 800175a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800175c:	6811      	ldr	r1, [r2, #0]
{
 800175e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001760:	b909      	cbnz	r1, 8001766 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001762:	490a      	ldr	r1, [pc, #40]	@ (800178c <_sbrk+0x34>)
 8001764:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001766:	6810      	ldr	r0, [r2, #0]
 8001768:	4909      	ldr	r1, [pc, #36]	@ (8001790 <_sbrk+0x38>)
 800176a:	4c0a      	ldr	r4, [pc, #40]	@ (8001794 <_sbrk+0x3c>)
 800176c:	4403      	add	r3, r0
 800176e:	1b09      	subs	r1, r1, r4
 8001770:	428b      	cmp	r3, r1
 8001772:	d906      	bls.n	8001782 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001774:	f01f fb68 	bl	8020e48 <__errno>
 8001778:	230c      	movs	r3, #12
 800177a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800177c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001780:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001782:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001784:	e7fc      	b.n	8001780 <_sbrk+0x28>
 8001786:	bf00      	nop
 8001788:	24009ce8 	.word	0x24009ce8
 800178c:	24025e40 	.word	0x24025e40
 8001790:	24080000 	.word	0x24080000
 8001794:	00001000 	.word	0x00001000

08001798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001798:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800179c:	f004 fbfc 	bl	8005f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a0:	480c      	ldr	r0, [pc, #48]	@ (80017d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a2:	490d      	ldr	r1, [pc, #52]	@ (80017d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b8:	4c0a      	ldr	r4, [pc, #40]	@ (80017e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017c6:	f01f fb45 	bl	8020e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7fe fffd 	bl	80007c8 <main>
  bx  lr
 80017ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017d8:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 80017dc:	08024b40 	.word	0x08024b40
  ldr r2, =_sbss
 80017e0:	24009940 	.word	0x24009940
  ldr r4, =_ebss
 80017e4:	24025e40 	.word	0x24025e40

080017e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC3_IRQHandler>

080017ea <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80017ea:	4770      	bx	lr

080017ec <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80017ec:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 80017ee:	f001 fd21 	bl	8003234 <touchgfx_components_init>
    touchgfx_init();
}
 80017f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 80017f6:	f001 bca5 	b.w	8003144 <touchgfx_init>

080017fa <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 80017fa:	f001 bd1d 	b.w	8003238 <touchgfx_taskEntry>

080017fe <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80017fe:	6840      	ldr	r0, [r0, #4]
    }
 8001800:	4770      	bx	lr

08001802 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001802:	6041      	str	r1, [r0, #4]
    }
 8001804:	4770      	bx	lr

08001806 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001806:	1a52      	subs	r2, r2, r1
 8001808:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 800180c:	fbb2 f0f3 	udiv	r0, r2, r3
 8001810:	4770      	bx	lr
	...

08001814 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001814:	4b02      	ldr	r3, [pc, #8]	@ (8001820 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001816:	68c0      	ldr	r0, [r0, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800181c:	4358      	muls	r0, r3
 800181e:	4770      	bx	lr
 8001820:	24009cec 	.word	0x24009cec

08001824 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001824:	4770      	bx	lr
	...

08001828 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001828:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800182a:	4a1e      	ldr	r2, [pc, #120]	@ (80018a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 800182c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 8001830:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 8001832:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001836:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001842:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 800184e:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001850:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001852:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001854:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001856:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001858:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 800185a:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 800185c:	2101      	movs	r1, #1
 800185e:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001860:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	2210      	movs	r2, #16
 8001864:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001868:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 800186c:	fab2 f282 	clz	r2, r2
 8001870:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001872:	4a0e      	ldr	r2, [pc, #56]	@ (80018ac <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001874:	5cd3      	ldrb	r3, [r2, r3]
 8001876:	b983      	cbnz	r3, 800189a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001878:	f008 fa74 	bl	8009d64 <HAL_RCC_GetHCLKFreq>
 800187c:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 800187e:	f008 f8a9 	bl	80099d4 <HAL_RCC_GetSysClockFreq>
 8001882:	fbb0 f0f4 	udiv	r0, r0, r4
 8001886:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001888:	4807      	ldr	r0, [pc, #28]	@ (80018a8 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 800188a:	f009 faaf 	bl	800adec <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800188e:	4806      	ldr	r0, [pc, #24]	@ (80018a8 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001890:	b003      	add	sp, #12
 8001892:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001896:	f009 b939 	b.w	800ab0c <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 800189a:	f008 fa85 	bl	8009da8 <HAL_RCC_GetPCLK1Freq>
 800189e:	0044      	lsls	r4, r0, #1
 80018a0:	e7ed      	b.n	800187e <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 80018a2:	bf00      	nop
 80018a4:	58024400 	.word	0x58024400
 80018a8:	24009cec 	.word	0x24009cec
 80018ac:	08023e48 	.word	0x08023e48

080018b0 <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 80018b0:	b510      	push	{r4, lr}
 80018b2:	4604      	mov	r4, r0
 80018b4:	2110      	movs	r1, #16
 80018b6:	f01e fbff 	bl	80200b8 <_ZdlPvj>
 80018ba:	4620      	mov	r0, r4
 80018bc:	bd10      	pop	{r4, pc}

080018be <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 80018be:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 80018c0:	6803      	ldr	r3, [r0, #0]
{
 80018c2:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 80018c4:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 80018c6:	b131      	cbz	r1, 80018d6 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 80018c8:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 80018ca:	4798      	blx	r3
 80018cc:	6863      	ldr	r3, [r4, #4]
 80018ce:	1b5b      	subs	r3, r3, r5
 80018d0:	4403      	add	r3, r0
 80018d2:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80018d4:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 80018d6:	4798      	blx	r3
 80018d8:	60a0      	str	r0, [r4, #8]
}
 80018da:	e7fb      	b.n	80018d4 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

080018dc <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80018dc:	4770      	bx	lr
	...

080018e0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80018e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 80018e2:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 80018e4:	460f      	mov	r7, r1
 80018e6:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 80018e8:	781d      	ldrb	r5, [r3, #0]
 80018ea:	b915      	cbnz	r5, 80018f2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 80018ec:	2500      	movs	r5, #0
}
 80018ee:	4628      	mov	r0, r5
 80018f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 80018f2:	4c07      	ldr	r4, [pc, #28]	@ (8001910 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 80018f4:	2000      	movs	r0, #0
 80018f6:	4621      	mov	r1, r4
 80018f8:	f004 faf2 	bl	8005ee0 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f4      	beq.n	80018ec <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 8001902:	6863      	ldr	r3, [r4, #4]
 8001904:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001906:	68a3      	ldr	r3, [r4, #8]
 8001908:	6033      	str	r3, [r6, #0]
            return true;
 800190a:	e7f0      	b.n	80018ee <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 800190c:	24009d48 	.word	0x24009d48
 8001910:	24009d38 	.word	0x24009d38

08001914 <_ZN20STM32TouchControllerD0Ev>:
 8001914:	b510      	push	{r4, lr}
 8001916:	4604      	mov	r4, r0
 8001918:	2104      	movs	r1, #4
 800191a:	f01e fbcd 	bl	80200b8 <_ZdlPvj>
 800191e:	4620      	mov	r0, r4
 8001920:	bd10      	pop	{r4, pc}
	...

08001924 <_ZN20STM32TouchController4initEv>:
{
 8001924:	b508      	push	{r3, lr}
    hTS->Width = 800;
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 8001928:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 800192c:	2000      	movs	r0, #0
    hTS->Width = 800;
 800192e:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 8001930:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001934:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 8001938:	230c      	movs	r3, #12
 800193a:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 800193e:	f004 fa3f 	bl	8005dc0 <BSP_TS_Init>
 8001942:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <_ZN20STM32TouchController4initEv+0x40>)
 8001944:	b910      	cbnz	r0, 800194c <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
}
 800194a:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1fb      	bne.n	800194a <_ZN20STM32TouchController4initEv+0x26>
 8001952:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <_ZN20STM32TouchController4initEv+0x44>)
 8001954:	212e      	movs	r1, #46	@ 0x2e
 8001956:	4a05      	ldr	r2, [pc, #20]	@ (800196c <_ZN20STM32TouchController4initEv+0x48>)
 8001958:	4805      	ldr	r0, [pc, #20]	@ (8001970 <_ZN20STM32TouchController4initEv+0x4c>)
 800195a:	f01e ff25 	bl	80207a8 <__assert_func>
 800195e:	bf00      	nop
 8001960:	24009d44 	.word	0x24009d44
 8001964:	24009d48 	.word	0x24009d48
 8001968:	08021877 	.word	0x08021877
 800196c:	0802188a 	.word	0x0802188a
 8001970:	080218b4 	.word	0x080218b4

08001974 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001974:	2803      	cmp	r0, #3
 8001976:	d825      	bhi.n	80019c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001978:	e8df f000 	tbb	[pc, r0]
 800197c:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001982:	2108      	movs	r1, #8
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	fab2 f282 	clz	r2, r2
 800198a:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800198c:	480f      	ldr	r0, [pc, #60]	@ (80019cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800198e:	f005 bbc7 	b.w	8007120 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001992:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001994:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	fab2 f282 	clz	r2, r2
 800199e:	0952      	lsrs	r2, r2, #5
 80019a0:	e7f4      	b.n	800198c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80019a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	fab2 f282 	clz	r2, r2
 80019ae:	0952      	lsrs	r2, r2, #5
 80019b0:	e7ec      	b.n	800198c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80019b2:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80019b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019b8:	4805      	ldr	r0, [pc, #20]	@ (80019d0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	fab2 f282 	clz	r2, r2
 80019c0:	0952      	lsrs	r2, r2, #5
 80019c2:	e7e4      	b.n	800198e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	24009d4c 	.word	0x24009d4c
 80019cc:	58022400 	.word	0x58022400
 80019d0:	58021400 	.word	0x58021400

080019d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 80019d4:	2803      	cmp	r0, #3
 80019d6:	d825      	bhi.n	8001a24 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 80019d8:	e8df f000 	tbb	[pc, r0]
 80019dc:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80019e2:	2108      	movs	r1, #8
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	3a00      	subs	r2, #0
 80019e8:	bf18      	it	ne
 80019ea:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80019ec:	480f      	ldr	r0, [pc, #60]	@ (8001a2c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80019ee:	f005 bb97 	b.w	8007120 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80019f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80019f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	3a00      	subs	r2, #0
 80019fc:	bf18      	it	ne
 80019fe:	2201      	movne	r2, #1
 8001a00:	e7f4      	b.n	80019ec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001a02:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001a04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	3a00      	subs	r2, #0
 8001a0c:	bf18      	it	ne
 8001a0e:	2201      	movne	r2, #1
 8001a10:	e7ec      	b.n	80019ec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001a12:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001a14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a18:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	3a00      	subs	r2, #0
 8001a1e:	bf18      	it	ne
 8001a20:	2201      	movne	r2, #1
 8001a22:	e7e4      	b.n	80019ee <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	24009d4c 	.word	0x24009d4c
 8001a2c:	58022400 	.word	0x58022400
 8001a30:	58021400 	.word	0x58021400

08001a34 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001a34:	2803      	cmp	r0, #3
 8001a36:	d811      	bhi.n	8001a5c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001a38:	e8df f000 	tbb	[pc, r0]
 8001a3c:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001a40:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001a42:	4807      	ldr	r0, [pc, #28]	@ (8001a60 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001a44:	f005 bb71 	b.w	800712a <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001a48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a4c:	e7f9      	b.n	8001a42 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001a4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a52:	e7f6      	b.n	8001a42 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001a54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a58:	4802      	ldr	r0, [pc, #8]	@ (8001a64 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001a5a:	e7f3      	b.n	8001a44 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	58022400 	.word	0x58022400
 8001a64:	58021400 	.word	0x58021400

08001a68 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001a68:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001a6a:	2803      	cmp	r0, #3
 8001a6c:	d815      	bhi.n	8001a9a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001a6e:	e8df f000 	tbb	[pc, r0]
 8001a72:	0a02      	.short	0x0a02
 8001a74:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001a76:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001a78:	4809      	ldr	r0, [pc, #36]	@ (8001aa0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001a7a:	f005 fb4b 	bl	8007114 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001a7e:	1e43      	subs	r3, r0, #1
 8001a80:	4258      	negs	r0, r3
 8001a82:	4158      	adcs	r0, r3
 8001a84:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001a86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a8a:	e7f5      	b.n	8001a78 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001a8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a90:	e7f2      	b.n	8001a78 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001a92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a96:	4803      	ldr	r0, [pc, #12]	@ (8001aa4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001a98:	e7ef      	b.n	8001a7a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	e7ef      	b.n	8001a7e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001a9e:	bf00      	nop
 8001aa0:	58022400 	.word	0x58022400
 8001aa4:	58021400 	.word	0x58021400

08001aa8 <_ZN8touchgfx4GPIO4initEv>:
{
 8001aa8:	b570      	push	{r4, r5, r6, lr}
 8001aaa:	4d08      	ldr	r5, [pc, #32]	@ (8001acc <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001aac:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001aae:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001ab0:	b2e0      	uxtb	r0, r4
 8001ab2:	f7ff ffd9 	bl	8001a68 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001ab6:	b118      	cbz	r0, 8001ac0 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001ab8:	682b      	ldr	r3, [r5, #0]
 8001aba:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001abc:	bf18      	it	ne
 8001abe:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001ac0:	3401      	adds	r4, #1
 8001ac2:	3504      	adds	r5, #4
 8001ac4:	2c05      	cmp	r4, #5
 8001ac6:	d1f3      	bne.n	8001ab0 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001ac8:	bd70      	pop	{r4, r5, r6, pc}
 8001aca:	bf00      	nop
 8001acc:	24009d4c 	.word	0x24009d4c

08001ad0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001ad0:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001ad2:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001ad6:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001ada:	4770      	bx	lr

08001adc <_ZN8touchgfx3HAL11submitGPU2DEv>:
     *
     * Only implemented on systems with the GPU2D IP.
     */
    virtual void submitGPU2D()
    {
    }
 8001adc:	4770      	bx	lr

08001ade <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001ade:	2000      	movs	r0, #0
 8001ae0:	4770      	bx	lr
	...

08001ae4 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001ae4:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001ae6:	3900      	subs	r1, #0
 8001ae8:	4b02      	ldr	r3, [pc, #8]	@ (8001af4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001aea:	bf18      	it	ne
 8001aec:	2101      	movne	r1, #1
 8001aee:	7019      	strb	r1, [r3, #0]
    }
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	2402511f 	.word	0x2402511f

08001af8 <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
    {
    }
 8001af8:	4770      	bx	lr

08001afa <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001afa:	2000      	movs	r0, #0
 8001afc:	4770      	bx	lr

08001afe <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001afe:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001b00:	b10b      	cbz	r3, 8001b06 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001b02:	4608      	mov	r0, r1
 8001b04:	4718      	bx	r3
        }
    }
 8001b06:	4770      	bx	lr

08001b08 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001b08:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001b0c:	4770      	bx	lr

08001b0e <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001b0e:	6840      	ldr	r0, [r0, #4]
 8001b10:	6803      	ldr	r3, [r0, #0]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4718      	bx	r3

08001b16 <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
    {
    }
 8001b16:	4770      	bx	lr

08001b18 <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
    {
    }
 8001b18:	4770      	bx	lr
	...

08001b1c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001b1c:	4b01      	ldr	r3, [pc, #4]	@ (8001b24 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	24009d70 	.word	0x24009d70

08001b28 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001b28:	4770      	bx	lr

08001b2a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001b2a:	f001 bc82 	b.w	8003432 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001b2e <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001b2e:	f001 bc13 	b.w	8003358 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001b32 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001b32:	f001 bde3 	b.w	80036fc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001b36 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001b36:	f001 bdd5 	b.w	80036e4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001b3c <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001b3c:	b510      	push	{r4, lr}
 8001b3e:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001b40:	f001 fd98 	bl	8003674 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001b44:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001b48:	b113      	cbz	r3, 8001b50 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001b4a:	4b02      	ldr	r3, [pc, #8]	@ (8001b54 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
    }
}
 8001b50:	bd10      	pop	{r4, pc}
 8001b52:	bf00      	nop
 8001b54:	2400000c 	.word	0x2400000c

08001b58 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001b58:	f001 bc06 	b.w	8003368 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001b5c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001b5c:	b510      	push	{r4, lr}
 8001b5e:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001b60:	f00c fc5e 	bl	800e420 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	4620      	mov	r0, r4
 8001b68:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
    }
 8001b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001b70:	4718      	bx	r3

08001b72 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001b72:	b510      	push	{r4, lr}
 8001b74:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001b76:	f00b ffb9 	bl	800daec <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001b7a:	6860      	ldr	r0, [r4, #4]
 8001b7c:	6803      	ldr	r3, [r0, #0]
    }
 8001b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	4718      	bx	r3

08001b86 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001b86:	f00b be79 	b.w	800d87c <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001b8a <_ZN11TouchGFXHALD0Ev>:
 8001b8a:	b510      	push	{r4, lr}
 8001b8c:	4604      	mov	r4, r0
 8001b8e:	2184      	movs	r1, #132	@ 0x84
 8001b90:	f01e fa92 	bl	80200b8 <_ZdlPvj>
 8001b94:	4620      	mov	r0, r4
 8001b96:	bd10      	pop	{r4, pc}

08001b98 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001b98:	4b02      	ldr	r3, [pc, #8]	@ (8001ba4 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001b9e:	f00b bea9 	b.w	800d8f4 <_ZN8touchgfx3HAL10beginFrameEv>
 8001ba2:	bf00      	nop
 8001ba4:	2400000c 	.word	0x2400000c

08001ba8 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001ba8:	b538      	push	{r3, r4, r5, lr}
 8001baa:	4604      	mov	r4, r0
    mcuInstr.init();
 8001bac:	4d06      	ldr	r5, [pc, #24]	@ (8001bc8 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001bae:	f001 fc01 	bl	80033b4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001bb2:	2300      	movs	r3, #0
    mcuInstr.init();
 8001bb4:	4628      	mov	r0, r5
 8001bb6:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001bba:	f7ff fe35 	bl	8001828 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001bbe:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001bc0:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001bc2:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001bc6:	bd38      	pop	{r3, r4, r5, pc}
 8001bc8:	24009d60 	.word	0x24009d60

08001bcc <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001bcc:	6803      	ldr	r3, [r0, #0]
{
 8001bce:	4604      	mov	r4, r0
 8001bd0:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bd6:	4798      	blx	r3
    enableInterrupts();
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	4620      	mov	r0, r4
 8001bdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001bde:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001be0:	f000 ff66 	bl	8002ab0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	4620      	mov	r0, r4
 8001be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bea:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001bec:	2100      	movs	r1, #0
 8001bee:	2329      	movs	r3, #41	@ 0x29
 8001bf0:	2215      	movs	r2, #21
 8001bf2:	4805      	ldr	r0, [pc, #20]	@ (8001c08 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001bf4:	9100      	str	r1, [sp, #0]
 8001bf6:	f005 f802 	bl	8006bfe <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001bfa:	f000 ff59 	bl	8002ab0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	4620      	mov	r0, r4
 8001c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c04:	4798      	blx	r3
    for (;;)
 8001c06:	e7f8      	b.n	8001bfa <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001c08:	24009bec 	.word	0x24009bec

08001c0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
        if (requestedOrientation != nativeDisplayOrientation)
 8001c0c:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
            if (DISPLAY_ROTATION == rotate0)
 8001c10:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001c12:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001c14:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001c18:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001c1a:	428c      	cmp	r4, r1
 8001c1c:	d009      	beq.n	8001c32 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001c1e:	b93a      	cbnz	r2, 8001c30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001c20:	490a      	ldr	r1, [pc, #40]	@ (8001c4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c22:	4a0b      	ldr	r2, [pc, #44]	@ (8001c50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001c24:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c26:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001c28:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001c2a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c2c:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8001c2e:	701a      	strb	r2, [r3, #0]
    }
 8001c30:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001c32:	2a00      	cmp	r2, #0
 8001c34:	d0fc      	beq.n	8001c30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c36:	4a06      	ldr	r2, [pc, #24]	@ (8001c50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001c38:	4904      	ldr	r1, [pc, #16]	@ (8001c4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c3a:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001c3c:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c3e:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001c40:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001c42:	2200      	movs	r2, #0
 8001c44:	e7f3      	b.n	8001c2e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001c46:	bf00      	nop
 8001c48:	24025118 	.word	0x24025118
 8001c4c:	24025116 	.word	0x24025116
 8001c50:	24025114 	.word	0x24025114

08001c54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001c54:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001c56:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	428b      	cmp	r3, r1
 8001c5c:	d803      	bhi.n	8001c66 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001c5e:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d905      	bls.n	8001c72 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001c66:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001c68:	21a3      	movs	r1, #163	@ 0xa3
 8001c6a:	4a07      	ldr	r2, [pc, #28]	@ (8001c88 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001c6c:	4807      	ldr	r0, [pc, #28]	@ (8001c8c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001c6e:	f01e fd9b 	bl	80207a8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001c72:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001c74:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001c76:	4b07      	ldr	r3, [pc, #28]	@ (8001c94 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001c78:	801a      	strh	r2, [r3, #0]
    }
 8001c7a:	bd08      	pop	{r3, pc}
 8001c7c:	24025114 	.word	0x24025114
 8001c80:	24025116 	.word	0x24025116
 8001c84:	080218fc 	.word	0x080218fc
 8001c88:	0802195f 	.word	0x0802195f
 8001c8c:	080219a2 	.word	0x080219a2
 8001c90:	2402511a 	.word	0x2402511a
 8001c94:	2402511c 	.word	0x2402511c

08001c98 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001c98:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001c9a:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001c9e:	b118      	cbz	r0, 8001ca8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001ca0:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001ca2:	6803      	ldr	r3, [r0, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4718      	bx	r3
    }
 8001ca8:	4770      	bx	lr
	...

08001cac <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001cac:	b570      	push	{r4, r5, r6, lr}
 8001cae:	460d      	mov	r5, r1
 8001cb0:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001cb4:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001cb6:	b935      	cbnz	r5, 8001cc6 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001cba:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001cc0:	480a      	ldr	r0, [pc, #40]	@ (8001cec <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001cc2:	f01e fd71 	bl	80207a8 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001cc6:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001cca:	3a00      	subs	r2, #0
 8001ccc:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001cce:	bf18      	it	ne
 8001cd0:	2201      	movne	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001cd4:	6803      	ldr	r3, [r0, #0]
}
 8001cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cde:	4718      	bx	r3
 8001ce0:	24009d70 	.word	0x24009d70
 8001ce4:	080219f5 	.word	0x080219f5
 8001ce8:	08021a2d 	.word	0x08021a2d
 8001cec:	080219a2 	.word	0x080219a2
 8001cf0:	2402511e 	.word	0x2402511e

08001cf4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001cf4:	b570      	push	{r4, r5, r6, lr}
          lcdRef(display),
 8001cf6:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001cfa:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8001d06:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8001d0a:	2103      	movs	r1, #3
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001d0c:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001d0e:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8001d12:	3520      	adds	r5, #32
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001d14:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001d16:	8603      	strh	r3, [r0, #48]	@ 0x30
 8001d18:	b2ad      	uxth	r5, r5
          useAuxiliaryLCD(false),
 8001d1a:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001d1e:	6643      	str	r3, [r0, #100]	@ 0x64
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001d20:	42b5      	cmp	r5, r6
          updateMCULoad(0),
 8001d22:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          auxiliaryLCD(0),
 8001d26:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001d9c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
          vSyncCompensationEnabled(false),
 8001d2c:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001d30:	4a1b      	ldr	r2, [pc, #108]	@ (8001da0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xac>)
          buttonController(0),
 8001d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8001d36:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8001d3a:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8001d3e:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8001d42:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001d46:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8001d4a:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          cc_begin(0),
 8001d4e:	6743      	str	r3, [r0, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001d50:	6782      	str	r2, [r0, #120]	@ 0x78
          isFrontPorchEntered(false),
 8001d52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d56:	f8a0 207c 	strh.w	r2, [r0, #124]	@ 0x7c
          maxDrawingHeight(height / numberOfBlocks), // Best guess based on testing (but not ideal in all cases)
 8001d5a:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8001d5e:	f8a0 207e 	strh.w	r2, [r0, #126]	@ 0x7e
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8001d62:	fbb2 f2f1 	udiv	r2, r2, r1
 8001d66:	f8a0 2080 	strh.w	r2, [r0, #128]	@ 0x80
          maxBlockLines(20)
 8001d6a:	f04f 0214 	mov.w	r2, #20
 8001d6e:	f8a0 2082 	strh.w	r2, [r0, #130]	@ 0x82
        instance = this;
 8001d72:	4a0c      	ldr	r2, [pc, #48]	@ (8001da4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb0>)
 8001d74:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001d76:	4a0c      	ldr	r2, [pc, #48]	@ (8001da8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb4>)
 8001d78:	8015      	strh	r5, [r2, #0]
 8001d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001dac <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb8>)
 8001d7c:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001d7e:	bf28      	it	cs
 8001d80:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001d82:	4a0b      	ldr	r2, [pc, #44]	@ (8001db0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xbc>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001d84:	bf38      	it	cc
 8001d86:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001d88:	8016      	strh	r6, [r2, #0]
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001d8c:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001d90:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001d92:	4a09      	ldr	r2, [pc, #36]	@ (8001db8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc4>)
 8001d94:	7013      	strb	r3, [r2, #0]
 8001d96:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc8>)
 8001d98:	6003      	str	r3, [r0, #0]
}
 8001d9a:	bd70      	pop	{r4, r5, r6, pc}
 8001d9c:	01000001 	.word	0x01000001
 8001da0:	01010000 	.word	0x01010000
 8001da4:	24025120 	.word	0x24025120
 8001da8:	24025114 	.word	0x24025114
 8001dac:	2402511a 	.word	0x2402511a
 8001db0:	24025116 	.word	0x24025116
 8001db4:	2402511c 	.word	0x2402511c
 8001db8:	24025118 	.word	0x24025118
 8001dbc:	080236f4 	.word	0x080236f4

08001dc0 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001dc0:	2b01      	cmp	r3, #1
    {
 8001dc2:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001dc4:	d80e      	bhi.n	8001de4 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]
 8001dc8:	2215      	movs	r2, #21
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4601      	mov	r1, r0
 8001dd0:	4808      	ldr	r0, [pc, #32]	@ (8001df4 <DSI_IO_Write+0x34>)
 8001dd2:	f004 ff14 	bl	8006bfe <HAL_DSI_ShortWrite>
 8001dd6:	b118      	cbz	r0, 8001de0 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001dd8:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001de0:	2000      	movs	r0, #0
 8001de2:	e7fb      	b.n	8001ddc <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001de4:	e9cd 1200 	strd	r1, r2, [sp]
 8001de8:	4601      	mov	r1, r0
 8001dea:	2239      	movs	r2, #57	@ 0x39
 8001dec:	4801      	ldr	r0, [pc, #4]	@ (8001df4 <DSI_IO_Write+0x34>)
 8001dee:	f004 ff17 	bl	8006c20 <HAL_DSI_LongWrite>
 8001df2:	e7f0      	b.n	8001dd6 <DSI_IO_Write+0x16>
 8001df4:	24009bec 	.word	0x24009bec

08001df8 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001df8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001dfa:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001dfe:	2106      	movs	r1, #6
 8001e00:	9100      	str	r1, [sp, #0]
 8001e02:	4601      	mov	r1, r0
 8001e04:	4805      	ldr	r0, [pc, #20]	@ (8001e1c <DSI_IO_Read+0x24>)
 8001e06:	f004 ff6b 	bl	8006ce0 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8001e0a:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8001e0c:	bf14      	ite	ne
 8001e0e:	f06f 0007 	mvnne.w	r0, #7
 8001e12:	2000      	moveq	r0, #0
 8001e14:	b005      	add	sp, #20
 8001e16:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e1a:	bf00      	nop
 8001e1c:	24009bec 	.word	0x24009bec

08001e20 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 8001e22:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001e26:	4c0b      	ldr	r4, [pc, #44]	@ (8001e54 <LCD_ReqTear+0x34>)
 8001e28:	2239      	movs	r2, #57	@ 0x39
 8001e2a:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8001e2c:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001e30:	ab03      	add	r3, sp, #12
 8001e32:	4620      	mov	r0, r4
 8001e34:	9301      	str	r3, [sp, #4]
 8001e36:	2344      	movs	r3, #68	@ 0x44
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f004 fef0 	bl	8006c20 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001e40:	2100      	movs	r1, #0
 8001e42:	2335      	movs	r3, #53	@ 0x35
 8001e44:	2215      	movs	r2, #21
 8001e46:	4620      	mov	r0, r4
 8001e48:	9100      	str	r1, [sp, #0]
 8001e4a:	f004 fed8 	bl	8006bfe <HAL_DSI_ShortWrite>
    }
 8001e4e:	b004      	add	sp, #16
 8001e50:	bd10      	pop	{r4, pc}
 8001e52:	bf00      	nop
 8001e54:	24009bec 	.word	0x24009bec

08001e58 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001e58:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001e5a:	f7ff ffe1 	bl	8001e20 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001e60:	2202      	movs	r2, #2
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001e6e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001e7a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001e7e:	f042 0202 	orr.w	r2, r2, #2
 8001e82:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001e86:	2203      	movs	r2, #3
 8001e88:	4b02      	ldr	r3, [pc, #8]	@ (8001e94 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001e8a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e8c:	bd08      	pop	{r3, pc}
 8001e8e:	bf00      	nop
 8001e90:	24009bec 	.word	0x24009bec
 8001e94:	50001000 	.word	0x50001000

08001e98 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001e98:	4b07      	ldr	r3, [pc, #28]	@ (8001eb8 <LCD_ReqEnable+0x20>)
    {
 8001e9a:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001e9c:	7819      	ldrb	r1, [r3, #0]
 8001e9e:	b939      	cbnz	r1, 8001eb0 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001ea0:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001ea2:	4806      	ldr	r0, [pc, #24]	@ (8001ebc <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001ea4:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001ea6:	2329      	movs	r3, #41	@ 0x29
 8001ea8:	2215      	movs	r2, #21
 8001eaa:	9100      	str	r1, [sp, #0]
 8001eac:	f004 fea7 	bl	8006bfe <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001eb0:	b003      	add	sp, #12
 8001eb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001eb6:	bf00      	nop
 8001eb8:	24009d5c 	.word	0x24009d5c
 8001ebc:	24009bec 	.word	0x24009bec

08001ec0 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001ec2:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	232a      	movs	r3, #42	@ 0x2a
 8001ec8:	2239      	movs	r2, #57	@ 0x39
 8001eca:	2100      	movs	r1, #0
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2304      	movs	r3, #4
 8001ed0:	4803      	ldr	r0, [pc, #12]	@ (8001ee0 <LCD_SetUpdateRegionLeft+0x20>)
 8001ed2:	f004 fea5 	bl	8006c20 <HAL_DSI_LongWrite>
    }
 8001ed6:	b003      	add	sp, #12
 8001ed8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001edc:	24000008 	.word	0x24000008
 8001ee0:	24009bec 	.word	0x24009bec

08001ee4 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001ee6:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001ee8:	9301      	str	r3, [sp, #4]
 8001eea:	232a      	movs	r3, #42	@ 0x2a
 8001eec:	2239      	movs	r2, #57	@ 0x39
 8001eee:	2100      	movs	r1, #0
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	4803      	ldr	r0, [pc, #12]	@ (8001f04 <LCD_SetUpdateRegionRight+0x20>)
 8001ef6:	f004 fe93 	bl	8006c20 <HAL_DSI_LongWrite>
    }
 8001efa:	b003      	add	sp, #12
 8001efc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f00:	24000004 	.word	0x24000004
 8001f04:	24009bec 	.word	0x24009bec

08001f08 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001f08:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001f0a:	4d15      	ldr	r5, [pc, #84]	@ (8001f60 <HAL_DSI_TearingEffectCallback+0x58>)
 8001f0c:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f7ff fd30 	bl	8001974 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001f14:	682b      	ldr	r3, [r5, #0]
        vSyncCnt++;
 8001f16:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 8001f1a:	3201      	adds	r2, #1
 8001f1c:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        isFrontPorchEntered = false;
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001f26:	f000 fdb7 	bl	8002a98 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <HAL_DSI_TearingEffectCallback+0x5c>)
        lockDMAToPorch = enableLock;
 8001f2c:	682a      	ldr	r2, [r5, #0]
 8001f2e:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 8001f36:	b173      	cbz	r3, 8001f56 <HAL_DSI_TearingEffectCallback+0x4e>
 8001f38:	4d0b      	ldr	r5, [pc, #44]	@ (8001f68 <HAL_DSI_TearingEffectCallback+0x60>)
 8001f3a:	782b      	ldrb	r3, [r5, #0]
 8001f3c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001f40:	b94b      	cbnz	r3, 8001f56 <HAL_DSI_TearingEffectCallback+0x4e>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001f42:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <HAL_DSI_TearingEffectCallback+0x64>)
 8001f44:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001f46:	f7ff ffbb 	bl	8001ec0 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f004 fe47 	bl	8006bde <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001f50:	2301      	movs	r3, #1
 8001f52:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001f54:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001f56:	2000      	movs	r0, #0
    }
 8001f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001f5c:	f7ff bd3a 	b.w	80019d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001f60:	24025120 	.word	0x24025120
 8001f64:	2400000c 	.word	0x2400000c
 8001f68:	24009d78 	.word	0x24009d78
 8001f6c:	24009d74 	.word	0x24009d74

08001f70 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001f74:	4e49      	ldr	r6, [pc, #292]	@ (800209c <HAL_DSI_EndOfRefreshCallback+0x12c>)
    {
 8001f76:	b085      	sub	sp, #20
 8001f78:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001f7a:	7833      	ldrb	r3, [r6, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8089 	beq.w	8002094 <HAL_DSI_EndOfRefreshCallback+0x124>
        {
            if (updateRegion == 0)
 8001f82:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 80020c0 <HAL_DSI_EndOfRefreshCallback+0x150>
 8001f86:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 80020c4 <HAL_DSI_EndOfRefreshCallback+0x154>
 8001f8a:	f8d9 5000 	ldr.w	r5, [r9]
 8001f8e:	4f44      	ldr	r7, [pc, #272]	@ (80020a0 <HAL_DSI_EndOfRefreshCallback+0x130>)
 8001f90:	2d00      	cmp	r5, #0
 8001f92:	d13e      	bne.n	8002012 <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8001f94:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001f96:	4e43      	ldr	r6, [pc, #268]	@ (80020a4 <HAL_DSI_EndOfRefreshCallback+0x134>)
                HAL_Delay(1);
 8001f98:	f004 f8ae 	bl	80060f8 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	9500      	str	r5, [sp, #0]
 8001fa0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001fa4:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001fa6:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001faa:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001fae:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001fb2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fb6:	f002 0208 	and.w	r2, r2, #8
 8001fba:	9200      	str	r2, [sp, #0]
 8001fbc:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001fbe:	f8d8 2000 	ldr.w	r2, [r8]
 8001fc2:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001fc6:	4838      	ldr	r0, [pc, #224]	@ (80020a8 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8001fc8:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001fca:	4e38      	ldr	r6, [pc, #224]	@ (80020ac <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001fcc:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8001fce:	4838      	ldr	r0, [pc, #224]	@ (80020b0 <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001fd0:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8001fd4:	4837      	ldr	r0, [pc, #220]	@ (80020b4 <HAL_DSI_EndOfRefreshCallback+0x144>)
 8001fd6:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001fda:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001fdc:	f041 0101 	orr.w	r1, r1, #1
 8001fe0:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001fe2:	9501      	str	r5, [sp, #4]
 8001fe4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fe8:	f042 0208 	orr.w	r2, r2, #8
 8001fec:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001ff0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8001ffc:	f7ff ff72 	bl	8001ee4 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8002000:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 8002002:	4620      	mov	r0, r4
                updateRegion = 1;
 8002004:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8002008:	b005      	add	sp, #20
 800200a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 800200e:	f004 bde6 	b.w	8006bde <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002012:	6803      	ldr	r3, [r0, #0]
 8002014:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8002016:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002018:	9502      	str	r5, [sp, #8]
 800201a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 800201e:	4c26      	ldr	r4, [pc, #152]	@ (80020b8 <HAL_DSI_EndOfRefreshCallback+0x148>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002020:	f022 0208 	bic.w	r2, r2, #8
 8002024:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002028:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800202c:	f002 0208 	and.w	r2, r2, #8
 8002030:	9202      	str	r2, [sp, #8]
 8002032:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8002034:	f8d8 2000 	ldr.w	r2, [r8]
 8002038:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 800203c:	481a      	ldr	r0, [pc, #104]	@ (80020a8 <HAL_DSI_EndOfRefreshCallback+0x138>)
 800203e:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8002040:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8002044:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 8002046:	481a      	ldr	r0, [pc, #104]	@ (80020b0 <HAL_DSI_EndOfRefreshCallback+0x140>)
 8002048:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 800204c:	4819      	ldr	r0, [pc, #100]	@ (80020b4 <HAL_DSI_EndOfRefreshCallback+0x144>)
 800204e:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 8002052:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8002054:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002056:	f041 0101 	orr.w	r1, r1, #1
 800205a:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800205c:	9503      	str	r5, [sp, #12]
 800205e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002062:	f042 0208 	orr.w	r2, r2, #8
 8002066:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800206a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	9303      	str	r3, [sp, #12]
 8002074:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8002076:	f7ff fcad 	bl	80019d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 800207a:	f7ff ff0d 	bl	8001e98 <LCD_ReqEnable>
        return instance;
 800207e:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <HAL_DSI_EndOfRefreshCallback+0x14c>)
                displayRefreshing = false;
 8002080:	7035      	strb	r5, [r6, #0]
 8002082:	681c      	ldr	r4, [r3, #0]
                if (HAL::getInstance())
 8002084:	b134      	cbz	r4, 8002094 <HAL_DSI_EndOfRefreshCallback+0x124>
        allowDMATransfers();
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	4620      	mov	r0, r4
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	4798      	blx	r3
        isFrontPorchEntered = true;
 800208e:	2301      	movs	r3, #1
 8002090:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    }
 8002094:	b005      	add	sp, #20
 8002096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800209a:	bf00      	nop
 800209c:	24009d78 	.word	0x24009d78
 80020a0:	24009d70 	.word	0x24009d70
 80020a4:	01b201e2 	.word	0x01b201e2
 80020a8:	50001000 	.word	0x50001000
 80020ac:	019201e3 	.word	0x019201e3
 80020b0:	01920003 	.word	0x01920003
 80020b4:	09c004b3 	.word	0x09c004b3
 80020b8:	019201e2 	.word	0x019201e2
 80020bc:	24025120 	.word	0x24025120
 80020c0:	24009d74 	.word	0x24009d74
 80020c4:	24009a14 	.word	0x24009a14

080020c8 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 80020c8:	4601      	mov	r1, r0
 80020ca:	b508      	push	{r3, lr}
        return instance;
 80020cc:	4b03      	ldr	r3, [pc, #12]	@ (80020dc <IdleTaskHook+0x14>)
 80020ce:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 80020d0:	b101      	cbz	r1, 80020d4 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 80020d2:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 80020d4:	f00c f9be 	bl	800e454 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 80020d8:	2001      	movs	r0, #1
 80020da:	bd08      	pop	{r3, pc}
 80020dc:	24025120 	.word	0x24025120

080020e0 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 80020e0:	4b03      	ldr	r3, [pc, #12]	@ (80020f0 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	605a      	str	r2, [r3, #4]
          cc_in(0)
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	4a02      	ldr	r2, [pc, #8]	@ (80020f4 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 80020ea:	601a      	str	r2, [r3, #0]

}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	24009d60 	.word	0x24009d60
 80020f4:	080236b4 	.word	0x080236b4

080020f8 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 80020f8:	6940      	ldr	r0, [r0, #20]
 80020fa:	4770      	bx	lr

080020fc <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 80020fc:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002100:	4770      	bx	lr

08002102 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 8002102:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002104:	b923      	cbnz	r3, 8002110 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 8002106:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002108:	3800      	subs	r0, #0
 800210a:	bf18      	it	ne
 800210c:	2001      	movne	r0, #1
 800210e:	4770      	bx	lr
 8002110:	2001      	movs	r0, #1
}
 8002112:	4770      	bx	lr

08002114 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8002114:	6880      	ldr	r0, [r0, #8]
 8002116:	4770      	bx	lr

08002118 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002118:	4770      	bx	lr

0800211a <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 800211a:	3004      	adds	r0, #4
{
 800211c:	b510      	push	{r4, lr}
 800211e:	460c      	mov	r4, r1
    *data = videoInfo;
 8002120:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8002122:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002126:	bd10      	pop	{r4, pc}

08002128 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002128:	4770      	bx	lr
	...

0800212c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 800212c:	b508      	push	{r3, lr}
    assert(0);
 800212e:	4a03      	ldr	r2, [pc, #12]	@ (800213c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002130:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 8002134:	4b02      	ldr	r3, [pc, #8]	@ (8002140 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 8002136:	4803      	ldr	r0, [pc, #12]	@ (8002144 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002138:	f01e fb36 	bl	80207a8 <__assert_func>
 800213c:	08021a7b 	.word	0x08021a7b
 8002140:	0802333c 	.word	0x0802333c
 8002144:	08021ad6 	.word	0x08021ad6

08002148 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8002148:	b510      	push	{r4, lr}
 800214a:	4604      	mov	r4, r0
 800214c:	2148      	movs	r1, #72	@ 0x48
 800214e:	f01d ffb3 	bl	80200b8 <_ZdlPvj>
 8002152:	4620      	mov	r0, r4
 8002154:	bd10      	pop	{r4, pc}
	...

08002158 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002158:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800215a:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 800215c:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 800215e:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002160:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002162:	6003      	str	r3, [r0, #0]
 8002164:	63c2      	str	r2, [r0, #60]	@ 0x3c
 8002166:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 800216a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800216e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8002172:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002176:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 800217a:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 800217e:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 8002182:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 8002186:	2001      	movs	r0, #1
 8002188:	f008 fff0 	bl	800b16c <osSemaphoreNew>
 800218c:	4b02      	ldr	r3, [pc, #8]	@ (8002198 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 800218e:	6018      	str	r0, [r3, #0]
}
 8002190:	4620      	mov	r0, r4
 8002192:	bd10      	pop	{r4, pc}
 8002194:	080237e0 	.word	0x080237e0
 8002198:	24009d98 	.word	0x24009d98

0800219c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 800219c:	b410      	push	{r4}
 800219e:	460c      	mov	r4, r1
 80021a0:	4611      	mov	r1, r2
 80021a2:	461a      	mov	r2, r3
    if (reader != 0)
 80021a4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80021a6:	b13b      	cbz	r3, 80021b8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80021a8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80021aa:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80021ac:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 80021ae:	4420      	add	r0, r4
}
 80021b0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 80021b4:	f01e bd9c 	b.w	8020cf0 <strncmp>
        src = (const char*)movieData + offset;
 80021b8:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80021ba:	e7f8      	b.n	80021ae <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

080021bc <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 80021bc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 80021be:	b510      	push	{r4, lr}
    if (reader != 0)
 80021c0:	b173      	cbz	r3, 80021e0 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 80021c2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80021c4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 80021c6:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80021c8:	1853      	adds	r3, r2, r1
 80021ca:	5c52      	ldrb	r2, [r2, r1]
 80021cc:	7898      	ldrb	r0, [r3, #2]
 80021ce:	785c      	ldrb	r4, [r3, #1]
 80021d0:	0400      	lsls	r0, r0, #16
 80021d2:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 80021d6:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 80021d8:	78db      	ldrb	r3, [r3, #3]
 80021da:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 80021de:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 80021e0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80021e2:	1853      	adds	r3, r2, r1
        val |= d[0];
 80021e4:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 80021e6:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 80021e8:	7898      	ldrb	r0, [r3, #2]
 80021ea:	0400      	lsls	r0, r0, #16
 80021ec:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80021f0:	e7f1      	b.n	80021d6 <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

080021f2 <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 80021f2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80021f4:	b143      	cbz	r3, 8002208 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80021f6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80021f8:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80021fa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80021fc:	185a      	adds	r2, r3, r1
 80021fe:	5c58      	ldrb	r0, [r3, r1]
 8002200:	7852      	ldrb	r2, [r2, #1]
 8002202:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002206:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8002208:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800220a:	185a      	adds	r2, r3, r1
        val |= d[0];
 800220c:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 800220e:	7853      	ldrb	r3, [r2, #1]
 8002210:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8002214:	4770      	bx	lr
	...

08002218 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8002218:	b570      	push	{r4, r5, r6, lr}
 800221a:	4604      	mov	r4, r0
    if (reader != 0)
 800221c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 800221e:	460d      	mov	r5, r1
 8002220:	4616      	mov	r6, r2
    if (reader != 0)
 8002222:	b1d8      	cbz	r0, 800225c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002224:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002226:	4293      	cmp	r3, r2
 8002228:	d208      	bcs.n	800223c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800222a:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 800222c:	4a0d      	ldr	r2, [pc, #52]	@ (8002264 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 800222e:	21a0      	movs	r1, #160	@ 0xa0
 8002230:	480d      	ldr	r0, [pc, #52]	@ (8002268 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002232:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 8002236:	4b0d      	ldr	r3, [pc, #52]	@ (800226c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8002238:	f01e fab6 	bl	80207a8 <__assert_func>
        reader->seek(offset);
 800223c:	6803      	ldr	r3, [r0, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8002242:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002244:	4632      	mov	r2, r6
 8002246:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002248:	6803      	ldr	r3, [r0, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	4798      	blx	r3
 800224e:	b910      	cbnz	r0, 8002256 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002250:	230d      	movs	r3, #13
 8002252:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 8002256:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 8002258:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 800225a:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 800225c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800225e:	4408      	add	r0, r1
 8002260:	e7fb      	b.n	800225a <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 8002262:	bf00      	nop
 8002264:	08021b3b 	.word	0x08021b3b
 8002268:	08021ad6 	.word	0x08021ad6
 800226c:	08021b28 	.word	0x08021b28

08002270 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002274:	6943      	ldr	r3, [r0, #20]
{
 8002276:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002278:	b92b      	cbnz	r3, 8002286 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 800227a:	4b22      	ldr	r3, [pc, #136]	@ (8002304 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 800227c:	21e6      	movs	r1, #230	@ 0xe6
 800227e:	4a22      	ldr	r2, [pc, #136]	@ (8002308 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8002280:	4822      	ldr	r0, [pc, #136]	@ (800230c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 8002282:	f01e fa91 	bl	80207a8 <__assert_func>
    readData(currentMovieOffset, 8);
 8002286:	2208      	movs	r2, #8
 8002288:	6981      	ldr	r1, [r0, #24]
 800228a:	f7ff ffc5 	bl	8002218 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800228e:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002290:	f243 0630 	movw	r6, #12336	@ 0x3030
 8002294:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002298:	3104      	adds	r1, #4
 800229a:	4620      	mov	r0, r4
 800229c:	f7ff ff8e 	bl	80021bc <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80022a0:	69a3      	ldr	r3, [r4, #24]
 80022a2:	4418      	add	r0, r3
 80022a4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80022a6:	f100 0208 	add.w	r2, r0, #8
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d306      	bcc.n	80022bc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 80022ae:	2301      	movs	r3, #1
    return false;
 80022b0:	2000      	movs	r0, #0
    frameNumber = 1;
 80022b2:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 80022b4:	6a23      	ldr	r3, [r4, #32]
 80022b6:	61a3      	str	r3, [r4, #24]
}
 80022b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 80022bc:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80022be:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 80022c2:	2208      	movs	r2, #8
 80022c4:	4620      	mov	r0, r4
        frameNumber++;
 80022c6:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80022c8:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 80022cc:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80022ce:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 80022d0:	f7ff ffa2 	bl	8002218 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 80022d4:	f8d4 9018 	ldr.w	r9, [r4, #24]
 80022d8:	4620      	mov	r0, r4
 80022da:	4649      	mov	r1, r9
 80022dc:	f7ff ff89 	bl	80021f2 <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80022e0:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 80022e4:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80022e6:	4620      	mov	r0, r4
 80022e8:	f7ff ff83 	bl	80021f2 <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 80022ec:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80022f0:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 80022f2:	4620      	mov	r0, r4
 80022f4:	f7ff ff62 	bl	80021bc <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80022f8:	45b0      	cmp	r8, r6
 80022fa:	d1d1      	bne.n	80022a0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 80022fc:	42bd      	cmp	r5, r7
 80022fe:	d1cf      	bne.n	80022a0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 8002300:	2001      	movs	r0, #1
 8002302:	e7d9      	b.n	80022b8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 8002304:	08021b7d 	.word	0x08021b7d
 8002308:	08021bc6 	.word	0x08021bc6
 800230c:	08021ad6 	.word	0x08021ad6

08002310 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002310:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 8002312:	6803      	ldr	r3, [r0, #0]
 8002314:	bf38      	it	cc
 8002316:	2101      	movcc	r1, #1
 8002318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 800231a:	b570      	push	{r4, r5, r6, lr}
 800231c:	460d      	mov	r5, r1
 800231e:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002320:	4798      	blx	r3
 8002322:	42a8      	cmp	r0, r5
 8002324:	d204      	bcs.n	8002330 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	4620      	mov	r0, r4
 800232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232c:	4798      	blx	r3
 800232e:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002330:	1e6b      	subs	r3, r5, #1
 8002332:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8002334:	2210      	movs	r2, #16
 8002336:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002338:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 800233c:	f106 0108 	add.w	r1, r6, #8
 8002340:	f7ff ff6a 	bl	8002218 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8002344:	f106 0110 	add.w	r1, r6, #16
 8002348:	4620      	mov	r0, r4
 800234a:	f7ff ff37 	bl	80021bc <_ZN20HardwareMJPEGDecoder6getU32Em>
 800234e:	6a23      	ldr	r3, [r4, #32]
 8002350:	3b04      	subs	r3, #4
 8002352:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002354:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002358:	bd70      	pop	{r4, r5, r6, pc}
	...

0800235c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 800235c:	2100      	movs	r1, #0
    readData(0, 72);
 800235e:	2248      	movs	r2, #72	@ 0x48
{
 8002360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002364:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 8002366:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002368:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 800236c:	f7ff ff54 	bl	8002218 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002370:	69a6      	ldr	r6, [r4, #24]
 8002372:	2304      	movs	r3, #4
 8002374:	4a63      	ldr	r2, [pc, #396]	@ (8002504 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002376:	4631      	mov	r1, r6
 8002378:	4620      	mov	r0, r4
 800237a:	f7ff ff0f 	bl	800219c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800237e:	b148      	cbz	r0, 8002394 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 8002380:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 8002382:	4a61      	ldr	r2, [pc, #388]	@ (8002508 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002384:	f44f 7197 	mov.w	r1, #302	@ 0x12e
        lastError = AVI_ERROR_NOT_RIFF;
 8002388:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 800238c:	4b5f      	ldr	r3, [pc, #380]	@ (800250c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 800238e:	4860      	ldr	r0, [pc, #384]	@ (8002510 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 8002390:	f01e fa0a 	bl	80207a8 <__assert_func>
    currentMovieOffset += 8;
 8002394:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002398:	2304      	movs	r3, #4
 800239a:	4a5e      	ldr	r2, [pc, #376]	@ (8002514 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 800239c:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 800239e:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80023a0:	f7ff fefc 	bl	800219c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80023a4:	b138      	cbz	r0, 80023b6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80023a6:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80023a8:	4a57      	ldr	r2, [pc, #348]	@ (8002508 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80023aa:	f44f 719b 	mov.w	r1, #310	@ 0x136
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80023ae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 80023b2:	4b59      	ldr	r3, [pc, #356]	@ (8002518 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80023b4:	e7eb      	b.n	800238e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 80023b6:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 80023ba:	2304      	movs	r3, #4
 80023bc:	4a57      	ldr	r2, [pc, #348]	@ (800251c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 80023be:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 80023c0:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 80023c2:	f7ff feeb 	bl	800219c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80023c6:	4607      	mov	r7, r0
 80023c8:	b138      	cbz	r0, 80023da <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80023ca:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 80023cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002508 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80023ce:	f240 113d 	movw	r1, #317	@ 0x13d
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80023d2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 80023d6:	4b52      	ldr	r3, [pc, #328]	@ (8002520 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 80023d8:	e7d9      	b.n	800238e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80023da:	f106 0110 	add.w	r1, r6, #16
 80023de:	4620      	mov	r0, r4
 80023e0:	f7ff feec 	bl	80021bc <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 80023e4:	4605      	mov	r5, r0
 80023e6:	b920      	cbnz	r0, 80023f2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 80023e8:	4b4e      	ldr	r3, [pc, #312]	@ (8002524 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 80023ea:	f240 1143 	movw	r1, #323	@ 0x143
 80023ee:	4a46      	ldr	r2, [pc, #280]	@ (8002508 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80023f0:	e7cd      	b.n	800238e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 80023f2:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 80023f6:	2304      	movs	r3, #4
 80023f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002528 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80023fa:	4620      	mov	r0, r4
 80023fc:	4641      	mov	r1, r8
 80023fe:	f7ff fecd 	bl	800219c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002402:	2800      	cmp	r0, #0
 8002404:	d049      	beq.n	800249a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8002406:	2306      	movs	r3, #6
 8002408:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 800240c:	2304      	movs	r3, #4
 800240e:	4a47      	ldr	r2, [pc, #284]	@ (800252c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8002410:	f106 0118 	add.w	r1, r6, #24
 8002414:	4620      	mov	r0, r4
 8002416:	f7ff fec1 	bl	800219c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800241a:	2800      	cmp	r0, #0
 800241c:	d03f      	beq.n	800249e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800241e:	2307      	movs	r3, #7
 8002420:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002424:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002426:	4f42      	ldr	r7, [pc, #264]	@ (8002530 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002428:	220c      	movs	r2, #12
 800242a:	4620      	mov	r0, r4
 800242c:	4629      	mov	r1, r5
 800242e:	f7ff fef3 	bl	8002218 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002432:	f105 0608 	add.w	r6, r5, #8
 8002436:	2304      	movs	r3, #4
 8002438:	463a      	mov	r2, r7
 800243a:	4620      	mov	r0, r4
 800243c:	4631      	mov	r1, r6
 800243e:	f7ff fead 	bl	800219c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002442:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002446:	2800      	cmp	r0, #0
 8002448:	d048      	beq.n	80024dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 800244a:	2b00      	cmp	r3, #0
 800244c:	d148      	bne.n	80024e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 800244e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002450:	42ab      	cmp	r3, r5
 8002452:	d849      	bhi.n	80024e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002454:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002458:	3504      	adds	r5, #4
 800245a:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 800245c:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800245e:	4629      	mov	r1, r5
 8002460:	f7ff feac 	bl	80021bc <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002464:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002466:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002468:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 800246a:	4620      	mov	r0, r4
 800246c:	f7ff fea6 	bl	80021bc <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 8002470:	4406      	add	r6, r0
    readData(listOffset, 4);
 8002472:	2204      	movs	r2, #4
 8002474:	4620      	mov	r0, r4
 8002476:	4631      	mov	r1, r6
 8002478:	f7ff fece 	bl	8002218 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 800247c:	2304      	movs	r3, #4
 800247e:	4a2d      	ldr	r2, [pc, #180]	@ (8002534 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 8002480:	4631      	mov	r1, r6
 8002482:	4620      	mov	r0, r4
 8002484:	f7ff fe8a 	bl	800219c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002488:	2800      	cmp	r0, #0
 800248a:	d138      	bne.n	80024fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 800248c:	2301      	movs	r3, #1
        indexOffset = listOffset;
 800248e:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 8002490:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8002492:	69a3      	ldr	r3, [r4, #24]
 8002494:	6223      	str	r3, [r4, #32]
}
 8002496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 800249a:	2701      	movs	r7, #1
 800249c:	e7b6      	b.n	800240c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 800249e:	2f00      	cmp	r7, #0
 80024a0:	d0c0      	beq.n	8002424 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80024a2:	f106 0120 	add.w	r1, r6, #32
 80024a6:	4620      	mov	r0, r4
 80024a8:	f7ff fe88 	bl	80021bc <_ZN20HardwareMJPEGDecoder6getU32Em>
 80024ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 80024b0:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80024b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80024b8:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 80024ba:	4620      	mov	r0, r4
 80024bc:	f7ff fe7e 	bl	80021bc <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 80024c0:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 80024c4:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 80024c6:	4620      	mov	r0, r4
 80024c8:	f7ff fe78 	bl	80021bc <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 80024cc:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 80024d0:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80024d2:	4620      	mov	r0, r4
 80024d4:	f7ff fe72 	bl	80021bc <_ZN20HardwareMJPEGDecoder6getU32Em>
 80024d8:	6120      	str	r0, [r4, #16]
 80024da:	e7a3      	b.n	8002424 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0b9      	beq.n	8002454 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80024e0:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80024e2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 80024e6:	e7d6      	b.n	8002496 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80024e8:	1d29      	adds	r1, r5, #4
 80024ea:	4620      	mov	r0, r4
 80024ec:	f7ff fe66 	bl	80021bc <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 80024f0:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 80024f2:	220c      	movs	r2, #12
 80024f4:	4620      	mov	r0, r4
 80024f6:	4629      	mov	r1, r5
 80024f8:	f7ff fe8e 	bl	8002218 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80024fc:	e799      	b.n	8002432 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80024fe:	230b      	movs	r3, #11
 8002500:	e7ef      	b.n	80024e2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 8002502:	bf00      	nop
 8002504:	08021bf9 	.word	0x08021bf9
 8002508:	08021c17 	.word	0x08021c17
 800250c:	08021bfe 	.word	0x08021bfe
 8002510:	08021ad6 	.word	0x08021ad6
 8002514:	08021c44 	.word	0x08021c44
 8002518:	08021c49 	.word	0x08021c49
 800251c:	08021c61 	.word	0x08021c61
 8002520:	08021c66 	.word	0x08021c66
 8002524:	08021c7c 	.word	0x08021c7c
 8002528:	08021c88 	.word	0x08021c88
 800252c:	08021c8d 	.word	0x08021c8d
 8002530:	08021c92 	.word	0x08021c92
 8002534:	08021c97 	.word	0x08021c97

08002538 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002538:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 800253c:	2200      	movs	r2, #0
 800253e:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 8002540:	f7ff bf0c 	b.w	800235c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

08002544 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8002544:	b510      	push	{r4, lr}
    movieData = 0;
 8002546:	2300      	movs	r3, #0
{
 8002548:	4604      	mov	r4, r0
 800254a:	4608      	mov	r0, r1
    movieData = 0;
 800254c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 800254e:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002550:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4798      	blx	r3
 8002556:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 8002558:	4620      	mov	r0, r4
}
 800255a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 800255e:	f7ff befd 	b.w	800235c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

08002564 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 8002564:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JPEG_output_is_paused = 0;
 8002566:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <JPEG_Decode_DMA+0x50>)
 8002568:	2400      	movs	r4, #0
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 800256a:	4d13      	ldr	r5, [pc, #76]	@ (80025b8 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
 800256c:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 800256e:	4b13      	ldr	r3, [pc, #76]	@ (80025bc <JPEG_Decode_DMA+0x58>)
 8002570:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 8002572:	4b13      	ldr	r3, [pc, #76]	@ (80025c0 <JPEG_Decode_DMA+0x5c>)
        JPEG_OUT_Write_BufferIndex = 0;
 8002574:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 8002576:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8002578:	4b12      	ldr	r3, [pc, #72]	@ (80025c4 <JPEG_Decode_DMA+0x60>)
 800257a:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 800257c:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <JPEG_Decode_DMA+0x64>)
 800257e:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 8002580:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <JPEG_Decode_DMA+0x68>)
 8002582:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002584:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <JPEG_Decode_DMA+0x6c>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002586:	682a      	ldr	r2, [r5, #0]
 8002588:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 800258c:	701c      	strb	r4, [r3, #0]
 800258e:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 8002590:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8002594:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002598:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800259c:	4a0d      	ldr	r2, [pc, #52]	@ (80025d4 <JPEG_Decode_DMA+0x70>)
 800259e:	68d2      	ldr	r2, [r2, #12]
 80025a0:	436a      	muls	r2, r5
 80025a2:	9200      	str	r2, [sp, #0]
 80025a4:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f005 fcc1 	bl	8007f30 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 80025ae:	4620      	mov	r0, r4
 80025b0:	b003      	add	sp, #12
 80025b2:	bd30      	pop	{r4, r5, pc}
 80025b4:	24009db0 	.word	0x24009db0
 80025b8:	24009da0 	.word	0x24009da0
 80025bc:	24009d94 	.word	0x24009d94
 80025c0:	24009dc0 	.word	0x24009dc0
 80025c4:	24009db8 	.word	0x24009db8
 80025c8:	24009dbc 	.word	0x24009dbc
 80025cc:	24009d9c 	.word	0x24009d9c
 80025d0:	24000010 	.word	0x24000010
 80025d4:	24009d7c 	.word	0x24009d7c

080025d8 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80025d8:	684b      	ldr	r3, [r1, #4]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d115      	bne.n	800260a <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 80025de:	68cb      	ldr	r3, [r1, #12]
 80025e0:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80025e2:	bf1e      	ittt	ne
 80025e4:	f023 030f 	bicne.w	r3, r3, #15
 80025e8:	3310      	addne	r3, #16
 80025ea:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 80025ec:	688b      	ldr	r3, [r1, #8]
 80025ee:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 80025f0:	bf1e      	ittt	ne
 80025f2:	f023 030f 	bicne.w	r3, r3, #15
 80025f6:	3310      	addne	r3, #16
 80025f8:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 80025fa:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 80025fc:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 80025fe:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002600:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 8002602:	4353      	muls	r3, r2
 8002604:	4a0e      	ldr	r2, [pc, #56]	@ (8002640 <HAL_JPEG_InfoReadyCallback+0x68>)
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800260a:	2b02      	cmp	r3, #2
 800260c:	d10e      	bne.n	800262c <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 800260e:	68cb      	ldr	r3, [r1, #12]
 8002610:	071a      	lsls	r2, r3, #28
 8002612:	d003      	beq.n	800261c <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002614:	f023 030f 	bic.w	r3, r3, #15
 8002618:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800261a:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 800261c:	688b      	ldr	r3, [r1, #8]
 800261e:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002620:	bf1e      	ittt	ne
 8002622:	f023 0307 	bicne.w	r3, r3, #7
 8002626:	3308      	addne	r3, #8
 8002628:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 800262a:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1fc      	bne.n	800262a <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 8002630:	68cb      	ldr	r3, [r1, #12]
 8002632:	0758      	lsls	r0, r3, #29
 8002634:	d0f2      	beq.n	800261c <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002636:	f023 0307 	bic.w	r3, r3, #7
 800263a:	3308      	adds	r3, #8
 800263c:	e7ed      	b.n	800261a <HAL_JPEG_InfoReadyCallback+0x42>
 800263e:	bf00      	nop
 8002640:	24009da8 	.word	0x24009da8

08002644 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8002644:	4a0b      	ldr	r2, [pc, #44]	@ (8002674 <HAL_JPEG_GetDataCallback+0x30>)
 8002646:	6813      	ldr	r3, [r2, #0]
 8002648:	440b      	add	r3, r1
    {
 800264a:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 800264c:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 800264e:	4a0a      	ldr	r2, [pc, #40]	@ (8002678 <HAL_JPEG_GetDataCallback+0x34>)
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	4293      	cmp	r3, r2
 8002654:	d20c      	bcs.n	8002670 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002656:	4c09      	ldr	r4, [pc, #36]	@ (800267c <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8002658:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 800265a:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 800265c:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002660:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002662:	bf28      	it	cs
 8002664:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002668:	6021      	str	r1, [r4, #0]
        }
    }
 800266a:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 800266c:	f005 bcc2 	b.w	8007ff4 <HAL_JPEG_ConfigInputBuffer>
    }
 8002670:	bc30      	pop	{r4, r5}
 8002672:	4770      	bx	lr
 8002674:	24009dc0 	.word	0x24009dc0
 8002678:	24009dbc 	.word	0x24009dbc
 800267c:	24009db8 	.word	0x24009db8

08002680 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002682:	4c20      	ldr	r4, [pc, #128]	@ (8002704 <HAL_JPEG_DataReadyCallback+0x84>)
 8002684:	2101      	movs	r1, #1
 8002686:	4d20      	ldr	r5, [pc, #128]	@ (8002708 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8002688:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800268a:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 800268c:	4f1f      	ldr	r7, [pc, #124]	@ (800270c <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002698:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 800269a:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <HAL_JPEG_DataReadyCallback+0x90>)
 800269c:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 800269e:	6822      	ldr	r2, [r4, #0]
 80026a0:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 80026a4:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68f9      	ldr	r1, [r7, #12]
 80026aa:	440a      	add	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d901      	bls.n	80026be <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	5ceb      	ldrb	r3, [r5, r3]
 80026c4:	b133      	cbz	r3, 80026d4 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026c6:	2102      	movs	r1, #2
 80026c8:	4630      	mov	r0, r6
 80026ca:	f005 fc65 	bl	8007f98 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 80026ce:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <HAL_JPEG_DataReadyCallback+0x94>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80026d4:	6822      	ldr	r2, [r4, #0]
 80026d6:	4630      	mov	r0, r6
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 80026de:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80026e2:	6869      	ldr	r1, [r5, #4]
 80026e4:	435a      	muls	r2, r3
 80026e6:	f005 fc88 	bl	8007ffa <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 80026ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <HAL_JPEG_DataReadyCallback+0x98>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	7a1a      	ldrb	r2, [r3, #8]
 80026f0:	b93a      	cbnz	r2, 8002702 <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 80026f2:	7a9b      	ldrb	r3, [r3, #10]
 80026f4:	b92b      	cbnz	r3, 8002702 <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 80026f6:	4b09      	ldr	r3, [pc, #36]	@ (800271c <HAL_JPEG_DataReadyCallback+0x9c>)
 80026f8:	6818      	ldr	r0, [r3, #0]
        }
    }
 80026fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 80026fe:	f008 bdab 	b.w	800b258 <osSemaphoreRelease>
    }
 8002702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002704:	24009da0 	.word	0x24009da0
 8002708:	24000010 	.word	0x24000010
 800270c:	24009d7c 	.word	0x24009d7c
 8002710:	24009d9c 	.word	0x24009d9c
 8002714:	24009db0 	.word	0x24009db0
 8002718:	24009da4 	.word	0x24009da4
 800271c:	24009d98 	.word	0x24009d98

08002720 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002720:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002722:	e7fe      	b.n	8002722 <HAL_JPEG_ErrorCallback+0x2>

08002724 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002724:	4b01      	ldr	r3, [pc, #4]	@ (800272c <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002726:	2201      	movs	r2, #1
 8002728:	601a      	str	r2, [r3, #0]
    }
 800272a:	4770      	bx	lr
 800272c:	24009db4 	.word	0x24009db4

08002730 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002730:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002732:	4d16      	ldr	r5, [pc, #88]	@ (800278c <JPEG_OutputHandler+0x5c>)
{
 8002734:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002736:	682b      	ldr	r3, [r5, #0]
 8002738:	b113      	cbz	r3, 8002740 <JPEG_OutputHandler+0x10>
 800273a:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <JPEG_OutputHandler+0x60>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	bb1b      	cbnz	r3, 8002788 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002740:	4b14      	ldr	r3, [pc, #80]	@ (8002794 <JPEG_OutputHandler+0x64>)
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	7a03      	ldrb	r3, [r0, #8]
 8002746:	b963      	cbnz	r3, 8002762 <JPEG_OutputHandler+0x32>
 8002748:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <JPEG_OutputHandler+0x68>)
 800274a:	4a14      	ldr	r2, [pc, #80]	@ (800279c <JPEG_OutputHandler+0x6c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d105      	bne.n	8002762 <JPEG_OutputHandler+0x32>
 8002756:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <JPEG_OutputHandler+0x60>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b913      	cbnz	r3, 8002762 <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 800275c:	6803      	ldr	r3, [r0, #0]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 8002762:	4a0f      	ldr	r2, [pc, #60]	@ (80027a0 <JPEG_OutputHandler+0x70>)
 8002764:	6813      	ldr	r3, [r2, #0]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d10c      	bne.n	8002784 <JPEG_OutputHandler+0x54>
 800276a:	4b0e      	ldr	r3, [pc, #56]	@ (80027a4 <JPEG_OutputHandler+0x74>)
 800276c:	490b      	ldr	r1, [pc, #44]	@ (800279c <JPEG_OutputHandler+0x6c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	5ccb      	ldrb	r3, [r1, r3]
 8002774:	b933      	cbnz	r3, 8002784 <JPEG_OutputHandler+0x54>
 8002776:	682b      	ldr	r3, [r5, #0]
 8002778:	b923      	cbnz	r3, 8002784 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 800277a:	2102      	movs	r1, #2
 800277c:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 800277e:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002780:	f005 fe67 	bl	8008452 <HAL_JPEG_Resume>
        return 1;
 8002784:	2002      	movs	r0, #2
    }

    return 2;
}
 8002786:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002788:	2001      	movs	r0, #1
 800278a:	e7fc      	b.n	8002786 <JPEG_OutputHandler+0x56>
 800278c:	24009db4 	.word	0x24009db4
 8002790:	24009d90 	.word	0x24009d90
 8002794:	24009da4 	.word	0x24009da4
 8002798:	24009d94 	.word	0x24009d94
 800279c:	24000010 	.word	0x24000010
 80027a0:	24009db0 	.word	0x24009db0
 80027a4:	24009da0 	.word	0x24009da0

080027a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 80027a8:	b570      	push	{r4, r5, r6, lr}
 80027aa:	4605      	mov	r5, r0
    if (length == 0)
 80027ac:	2a00      	cmp	r2, #0
 80027ae:	d037      	beq.n	8002820 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
    if (outputBuffer) /* only decode if buffers are assigned. */
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d035      	beq.n	8002820 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 80027b4:	481b      	ldr	r0, [pc, #108]	@ (8002824 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 80027b6:	2403      	movs	r4, #3
 80027b8:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 80027ba:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 80027bc:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 80027be:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 80027c2:	bf18      	it	ne
 80027c4:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 80027c8:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 80027ca:	bf18      	it	ne
 80027cc:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 80027ce:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 80027d0:	0924      	lsrs	r4, r4, #4
 80027d2:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 80027d4:	692c      	ldr	r4, [r5, #16]
 80027d6:	f014 040f 	ands.w	r4, r4, #15
 80027da:	bf18      	it	ne
 80027dc:	f1c4 0410 	rsbne	r4, r4, #16
 80027e0:	6084      	str	r4, [r0, #8]
        FrameBufferAddress = outputBuffer;
 80027e2:	4811      	ldr	r0, [pc, #68]	@ (8002828 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80027e4:	4c11      	ldr	r4, [pc, #68]	@ (800282c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
        FrameBufferAddress = outputBuffer;
 80027e6:	6003      	str	r3, [r0, #0]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 80027e8:	4811      	ldr	r0, [pc, #68]	@ (8002830 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 80027ea:	f7ff febb 	bl	8002564 <JPEG_Decode_DMA>
        DMA2D_reference = dma;
 80027ee:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 80027f0:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80027f2:	4d0f      	ldr	r5, [pc, #60]	@ (8002830 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
        DMA2D_reference = dma;
 80027f4:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80027f6:	4628      	mov	r0, r5
 80027f8:	f7ff ff9a 	bl	8002730 <JPEG_OutputHandler>
 80027fc:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 80027fe:	6823      	ldr	r3, [r4, #0]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d105      	bne.n	8002810 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>
                SEM_WAIT(semDecodingDone);
 8002804:	4b0c      	ldr	r3, [pc, #48]	@ (8002838 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 8002806:	f04f 31ff 	mov.w	r1, #4294967295
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	f008 fcf8 	bl	800b200 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d1ef      	bne.n	80027f6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4e>
        Jpeg_HWDecodingEnd = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	4a08      	ldr	r2, [pc, #32]	@ (800283c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x94>)
 800281a:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 800281c:	4a08      	ldr	r2, [pc, #32]	@ (8002840 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x98>)
 800281e:	6013      	str	r3, [r2, #0]
}
 8002820:	bd70      	pop	{r4, r5, r6, pc}
 8002822:	bf00      	nop
 8002824:	24009d7c 	.word	0x24009d7c
 8002828:	24009dc4 	.word	0x24009dc4
 800282c:	24009dac 	.word	0x24009dac
 8002830:	24009b94 	.word	0x24009b94
 8002834:	24009da4 	.word	0x24009da4
 8002838:	24009d98 	.word	0x24009d98
 800283c:	24009db4 	.word	0x24009db4
 8002840:	24009d90 	.word	0x24009d90

08002844 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002848:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800284a:	6943      	ldr	r3, [r0, #20]
{
 800284c:	b085      	sub	sp, #20
 800284e:	4604      	mov	r4, r0
 8002850:	460f      	mov	r7, r1
 8002852:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002854:	b92b      	cbnz	r3, 8002862 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8002856:	4b29      	ldr	r3, [pc, #164]	@ (80028fc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 8002858:	21b2      	movs	r1, #178	@ 0xb2
 800285a:	4a29      	ldr	r2, [pc, #164]	@ (8002900 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 800285c:	4829      	ldr	r0, [pc, #164]	@ (8002904 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 800285e:	f01d ffa3 	bl	80207a8 <__assert_func>
    readData(currentMovieOffset, 8);
 8002862:	2208      	movs	r2, #8
 8002864:	6981      	ldr	r1, [r0, #24]
 8002866:	f7ff fcd7 	bl	8002218 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 800286a:	69a6      	ldr	r6, [r4, #24]
 800286c:	4620      	mov	r0, r4
 800286e:	4631      	mov	r1, r6
 8002870:	f7ff fcbf 	bl	80021f2 <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002874:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002876:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002878:	4620      	mov	r0, r4
 800287a:	f7ff fcba 	bl	80021f2 <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800287e:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002880:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002882:	4620      	mov	r0, r4
 8002884:	f7ff fc9a 	bl	80021bc <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002888:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800288c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800288e:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002890:	180a      	adds	r2, r1, r0
 8002892:	429a      	cmp	r2, r3
 8002894:	d226      	bcs.n	80028e4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002896:	f243 0330 	movw	r3, #12336	@ 0x3030
 800289a:	459b      	cmp	fp, r3
 800289c:	d117      	bne.n	80028ce <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 800289e:	f246 3364 	movw	r3, #25444	@ 0x6364
 80028a2:	459a      	cmp	sl, r3
 80028a4:	d113      	bne.n	80028ce <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80028a6:	b190      	cbz	r0, 80028ce <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80028a8:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 80028aa:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80028ac:	4620      	mov	r0, r4
 80028ae:	f7ff fcb3 	bl	8002218 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80028b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80028b4:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80028b6:	462a      	mov	r2, r5
 80028b8:	4620      	mov	r0, r4
 80028ba:	f8cd 8000 	str.w	r8, [sp]
 80028be:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80028c2:	463b      	mov	r3, r7
 80028c4:	f7ff ff70 	bl	80027a8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 80028c8:	6963      	ldr	r3, [r4, #20]
 80028ca:	3301      	adds	r3, #1
 80028cc:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 80028ce:	69a3      	ldr	r3, [r4, #24]
 80028d0:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 80028d2:	b905      	cbnz	r5, 80028d6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 80028d4:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80028d6:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 80028d8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80028da:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 80028de:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80028e0:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80028e2:	d109      	bne.n	80028f8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 80028e4:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 80028e6:	2001      	movs	r0, #1
        frameNumber = 1;
 80028e8:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 80028ea:	6a23      	ldr	r3, [r4, #32]
 80028ec:	61a3      	str	r3, [r4, #24]
}
 80028ee:	f080 0001 	eor.w	r0, r0, #1
 80028f2:	b005      	add	sp, #20
 80028f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 80028f8:	2000      	movs	r0, #0
 80028fa:	e7f8      	b.n	80028ee <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 80028fc:	08021b7d 	.word	0x08021b7d
 8002900:	08021c9c 	.word	0x08021c9c
 8002904:	08021ad6 	.word	0x08021ad6

08002908 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290a:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 800290c:	6981      	ldr	r1, [r0, #24]
{
 800290e:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002910:	2208      	movs	r2, #8
 8002912:	f7ff fc81 	bl	8002218 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002916:	69a7      	ldr	r7, [r4, #24]
 8002918:	4620      	mov	r0, r4
 800291a:	1d39      	adds	r1, r7, #4
 800291c:	f7ff fc4e 	bl	80021bc <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002920:	f107 0108 	add.w	r1, r7, #8
 8002924:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002926:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002928:	4620      	mov	r0, r4
 800292a:	f7ff fc75 	bl	8002218 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 800292e:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002930:	b16e      	cbz	r6, 800294e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002932:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002934:	4c07      	ldr	r4, [pc, #28]	@ (8002954 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8002936:	4d08      	ldr	r5, [pc, #32]	@ (8002958 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002938:	4633      	mov	r3, r6
 800293a:	4807      	ldr	r0, [pc, #28]	@ (8002958 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 800293c:	f7ff fe12 	bl	8002564 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002940:	4628      	mov	r0, r5
 8002942:	f7ff fef5 	bl	8002730 <JPEG_OutputHandler>
 8002946:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f8      	beq.n	8002940 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 800294e:	2001      	movs	r0, #1
 8002950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002952:	bf00      	nop
 8002954:	24009dac 	.word	0x24009dac
 8002958:	24009b94 	.word	0x24009b94

0800295c <DMA2D_CopyBuffer>:
 * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
 * @param job: External job reference
 * @retval None
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t yRef, refline;
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 800295e:	68c7      	ldr	r7, [r0, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002960:	2201      	movs	r2, #1
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002962:	4c15      	ldr	r4, [pc, #84]	@ (80029b8 <DMA2D_CopyBuffer+0x5c>)
 8002964:	0139      	lsls	r1, r7, #4

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002966:	4e15      	ldr	r6, [pc, #84]	@ (80029bc <DMA2D_CopyBuffer+0x60>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	fbb1 f1f3 	udiv	r1, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;
 800296e:	6863      	ldr	r3, [r4, #4]
 8002970:	4359      	muls	r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002972:	4b13      	ldr	r3, [pc, #76]	@ (80029c0 <DMA2D_CopyBuffer+0x64>)
 8002974:	635a      	str	r2, [r3, #52]	@ 0x34
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;
 8002976:	0109      	lsls	r1, r1, #4
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002978:	68e2      	ldr	r2, [r4, #12]
 800297a:	6836      	ldr	r6, [r6, #0]
    {
        WRITE_REG(DMA2D->NLR, ((MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight) | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 800297c:	0515      	lsls	r5, r2, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 800297e:	1ab6      	subs	r6, r6, r2
 8002980:	42b7      	cmp	r7, r6
 8002982:	d315      	bcc.n	80029b0 <DMA2D_CopyBuffer+0x54>
        WRITE_REG(DMA2D->NLR, ((MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight) | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002984:	68a4      	ldr	r4, [r4, #8]
 8002986:	f1c4 0410 	rsb	r4, r4, #16
 800298a:	432c      	orrs	r4, r5
 800298c:	645c      	str	r4, [r3, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 800298e:	4c0d      	ldr	r4, [pc, #52]	@ (80029c4 <DMA2D_CopyBuffer+0x68>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002990:	f1c2 0232 	rsb	r2, r2, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002994:	6824      	ldr	r4, [r4, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002996:	0112      	lsls	r2, r2, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002998:	4421      	add	r1, r4
 800299a:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 800299c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 80029a2:	4a09      	ldr	r2, [pc, #36]	@ (80029c8 <DMA2D_CopyBuffer+0x6c>)
 80029a4:	61da      	str	r2, [r3, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 80029a6:	6842      	ldr	r2, [r0, #4]
 80029a8:	60da      	str	r2, [r3, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80029aa:	4a08      	ldr	r2, [pc, #32]	@ (80029cc <DMA2D_CopyBuffer+0x70>)
 80029ac:	601a      	str	r2, [r3, #0]
}
 80029ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80029b0:	f045 0510 	orr.w	r5, r5, #16
 80029b4:	645d      	str	r5, [r3, #68]	@ 0x44
 80029b6:	e7ea      	b.n	800298e <DMA2D_CopyBuffer+0x32>
 80029b8:	24009d7c 	.word	0x24009d7c
 80029bc:	24009da8 	.word	0x24009da8
 80029c0:	52001000 	.word	0x52001000
 80029c4:	24009dc4 	.word	0x24009dc4
 80029c8:	ff09000b 	.word	0xff09000b
 80029cc:	00012301 	.word	0x00012301

080029d0 <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 80029d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a04 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 80029d2:	2200      	movs	r2, #0
 80029d4:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 80029d6:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 80029d8:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 80029da:	3101      	adds	r1, #1
 80029dc:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 80029de:	6819      	ldr	r1, [r3, #0]
 80029e0:	2901      	cmp	r1, #1
 80029e2:	d900      	bls.n	80029e6 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 80029e4:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 80029e6:	4b08      	ldr	r3, [pc, #32]	@ (8002a08 <DMA2D_ExternalJobCompleted+0x38>)
 80029e8:	4a08      	ldr	r2, [pc, #32]	@ (8002a0c <DMA2D_ExternalJobCompleted+0x3c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68d2      	ldr	r2, [r2, #12]
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	68c2      	ldr	r2, [r0, #12]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d302      	bcc.n	80029fc <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <DMA2D_ExternalJobCompleted+0x40>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 80029fc:	4b05      	ldr	r3, [pc, #20]	@ (8002a14 <DMA2D_ExternalJobCompleted+0x44>)
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	f008 bc2a 	b.w	800b258 <osSemaphoreRelease>
 8002a04:	24009d94 	.word	0x24009d94
 8002a08:	24009da8 	.word	0x24009da8
 8002a0c:	24009d7c 	.word	0x24009d7c
 8002a10:	24009d90 	.word	0x24009d90
 8002a14:	24009d98 	.word	0x24009d98

08002a18 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002a18:	2101      	movs	r1, #1
 8002a1a:	2200      	movs	r2, #0
{
 8002a1c:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002a1e:	4608      	mov	r0, r1
 8002a20:	f008 fba4 	bl	800b16c <osSemaphoreNew>
 8002a24:	4b0a      	ldr	r3, [pc, #40]	@ (8002a50 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002a26:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002a28:	b928      	cbnz	r0, 8002a36 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002a2c:	2128      	movs	r1, #40	@ 0x28
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a58 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002a30:	480a      	ldr	r0, [pc, #40]	@ (8002a5c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002a32:	f01d feb9 	bl	80207a8 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002a36:	2200      	movs	r2, #0
 8002a38:	2104      	movs	r1, #4
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f008 fc35 	bl	800b2aa <osMessageQueueNew>
 8002a40:	4b07      	ldr	r3, [pc, #28]	@ (8002a60 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002a42:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002a44:	b918      	cbnz	r0, 8002a4e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002a46:	4b07      	ldr	r3, [pc, #28]	@ (8002a64 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002a48:	212c      	movs	r1, #44	@ 0x2c
 8002a4a:	4a03      	ldr	r2, [pc, #12]	@ (8002a58 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002a4c:	e7f0      	b.n	8002a30 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002a4e:	bd08      	pop	{r3, pc}
 8002a50:	24009dcc 	.word	0x24009dcc
 8002a54:	08021cf7 	.word	0x08021cf7
 8002a58:	08021d40 	.word	0x08021d40
 8002a5c:	08021d6f 	.word	0x08021d6f
 8002a60:	24009dc8 	.word	0x24009dc8
 8002a64:	08021db7 	.word	0x08021db7

08002a68 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002a68:	4b02      	ldr	r3, [pc, #8]	@ (8002a74 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002a6a:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	f008 bbc6 	b.w	800b200 <osSemaphoreAcquire>
 8002a74:	24009dcc 	.word	0x24009dcc

08002a78 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002a78:	4b01      	ldr	r3, [pc, #4]	@ (8002a80 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	f008 bbec 	b.w	800b258 <osSemaphoreRelease>
 8002a80:	24009dcc 	.word	0x24009dcc

08002a84 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002a84:	4b02      	ldr	r3, [pc, #8]	@ (8002a90 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002a86:	2100      	movs	r1, #0
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	f008 bbb9 	b.w	800b200 <osSemaphoreAcquire>
 8002a8e:	bf00      	nop
 8002a90:	24009dcc 	.word	0x24009dcc

08002a94 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002a94:	f7ff bff0 	b.w	8002a78 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002a98 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	4803      	ldr	r0, [pc, #12]	@ (8002aa8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002a9c:	4903      	ldr	r1, [pc, #12]	@ (8002aac <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	6800      	ldr	r0, [r0, #0]
 8002aa2:	f008 bc3d 	b.w	800b320 <osMessageQueuePut>
 8002aa6:	bf00      	nop
 8002aa8:	24009dc8 	.word	0x24009dc8
 8002aac:	24000030 	.word	0x24000030

08002ab0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002ab0:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	4c07      	ldr	r4, [pc, #28]	@ (8002ad4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002ab6:	a901      	add	r1, sp, #4
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6820      	ldr	r0, [r4, #0]
 8002abc:	f008 fc61 	bl	800b382 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	a901      	add	r1, sp, #4
 8002ac8:	6820      	ldr	r0, [r4, #0]
 8002aca:	f008 fc5a 	bl	800b382 <osMessageQueueGet>
}
 8002ace:	b002      	add	sp, #8
 8002ad0:	bd10      	pop	{r4, pc}
 8002ad2:	bf00      	nop
 8002ad4:	24009dc8 	.word	0x24009dc8

08002ad8 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002ad8:	6803      	ldr	r3, [r0, #0]
 8002ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002adc:	4718      	bx	r3

08002ade <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002ade:	2001      	movs	r0, #1
 8002ae0:	4770      	bx	lr

08002ae2 <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002ae2:	e7fe      	b.n	8002ae2 <DMA2D_XferErrorCallback>

08002ae4 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002ae4:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002ae8:	4770      	bx	lr
	...

08002aec <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002aec:	b510      	push	{r4, lr}
 8002aee:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002af0:	f04f 31ff 	mov.w	r1, #4294967295
 8002af4:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002af8:	f008 faf6 	bl	800b0e8 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002afc:	6860      	ldr	r0, [r4, #4]
 8002afe:	6803      	ldr	r3, [r0, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4798      	blx	r3
 8002b04:	b978      	cbnz	r0, 8002b26 <_ZN8STM32DMA5startEv+0x3a>
 8002b06:	7a63      	ldrb	r3, [r4, #9]
 8002b08:	b16b      	cbz	r3, 8002b26 <_ZN8STM32DMA5startEv+0x3a>
 8002b0a:	7a23      	ldrb	r3, [r4, #8]
 8002b0c:	b95b      	cbnz	r3, 8002b26 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002b0e:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002b12:	4620      	mov	r0, r4
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002b1a:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002b22:	f008 bb04 	b.w	800b12e <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002b26:	490b      	ldr	r1, [pc, #44]	@ (8002b54 <_ZN8STM32DMA5startEv+0x68>)
 8002b28:	4a0b      	ldr	r2, [pc, #44]	@ (8002b58 <_ZN8STM32DMA5startEv+0x6c>)
 8002b2a:	680b      	ldr	r3, [r1, #0]
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d1f2      	bne.n	8002b1a <_ZN8STM32DMA5startEv+0x2e>
 8002b34:	7a20      	ldrb	r0, [r4, #8]
 8002b36:	2800      	cmp	r0, #0
 8002b38:	d1ef      	bne.n	8002b1a <_ZN8STM32DMA5startEv+0x2e>
 8002b3a:	7aa0      	ldrb	r0, [r4, #10]
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	d1ec      	bne.n	8002b1a <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002b40:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002b42:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002b46:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002b4a:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002b4c:	f7ff ff06 	bl	800295c <DMA2D_CopyBuffer>
    }
 8002b50:	e7e3      	b.n	8002b1a <_ZN8STM32DMA5startEv+0x2e>
 8002b52:	bf00      	nop
 8002b54:	24009d94 	.word	0x24009d94
 8002b58:	24000010 	.word	0x24000010

08002b5c <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002b5c:	4b05      	ldr	r3, [pc, #20]	@ (8002b74 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b62:	6003      	str	r3, [r0, #0]
 8002b64:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <_ZN8STM32DMAD1Ev+0x1c>)
 8002b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002b6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b6e:	f3bf 8f6f 	isb	sy
}
 8002b72:	4770      	bx	lr
 8002b74:	08023824 	.word	0x08023824
 8002b78:	e000e100 	.word	0xe000e100

08002b7c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002b7c:	b510      	push	{r4, lr}
 8002b7e:	4604      	mov	r4, r0
}
 8002b80:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002b84:	f7ff ffea 	bl	8002b5c <_ZN8STM32DMAD1Ev>
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f01d fa95 	bl	80200b8 <_ZdlPvj>
 8002b8e:	4620      	mov	r0, r4
 8002b90:	bd10      	pop	{r4, pc}
	...

08002b94 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b94:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002b96:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b98:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002b9c:	f042 0210 	orr.w	r2, r2, #16
 8002ba0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002ba4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002ba8:	f002 0210 	and.w	r2, r2, #16
 8002bac:	9201      	str	r2, [sp, #4]
 8002bae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002bb0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002bb2:	f042 0210 	orr.w	r2, r2, #16
 8002bb6:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002bb8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002bba:	f022 0210 	bic.w	r2, r2, #16
 8002bbe:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002bc0:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <_ZN8STM32DMA10initializeEv+0x48>)
 8002bc2:	4a07      	ldr	r2, [pc, #28]	@ (8002be0 <_ZN8STM32DMA10initializeEv+0x4c>)
 8002bc4:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002bc6:	4a07      	ldr	r2, [pc, #28]	@ (8002be4 <_ZN8STM32DMA10initializeEv+0x50>)
 8002bc8:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bca:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <_ZN8STM32DMA10initializeEv+0x54>)
 8002bcc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002bd0:	609a      	str	r2, [r3, #8]
}
 8002bd2:	b002      	add	sp, #8
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	58024400 	.word	0x58024400
 8002bdc:	24009c08 	.word	0x24009c08
 8002be0:	08002e31 	.word	0x08002e31
 8002be4:	08002ae3 	.word	0x08002ae3
 8002be8:	e000e100 	.word	0xe000e100

08002bec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002bec:	b508      	push	{r3, lr}
    switch (format)
 8002bee:	280a      	cmp	r0, #10
 8002bf0:	d809      	bhi.n	8002c06 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002bf2:	e8df f000 	tbb	[pc, r0]
 8002bf6:	1006      	.short	0x1006
 8002bf8:	0808080e 	.word	0x0808080e
 8002bfc:	10101008 	.word	0x10101008
 8002c00:	10          	.byte	0x10
 8002c01:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002c02:	2002      	movs	r0, #2
}
 8002c04:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002c08:	2191      	movs	r1, #145	@ 0x91
 8002c0a:	4a05      	ldr	r2, [pc, #20]	@ (8002c20 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002c0c:	4805      	ldr	r0, [pc, #20]	@ (8002c24 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002c0e:	f01d fdcb 	bl	80207a8 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002c12:	2000      	movs	r0, #0
 8002c14:	e7f6      	b.n	8002c04 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002c16:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002c18:	e7f4      	b.n	8002c04 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002c1a:	bf00      	nop
 8002c1c:	08021df9 	.word	0x08021df9
 8002c20:	08021e14 	.word	0x08021e14
 8002c24:	08021e5f 	.word	0x08021e5f

08002c28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002c28:	b538      	push	{r3, r4, r5, lr}
 8002c2a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c2c:	7f88      	ldrb	r0, [r1, #30]
 8002c2e:	f7ff ffdd 	bl	8002bec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c32:	4b12      	ldr	r3, [pc, #72]	@ (8002c7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c34:	8aa5      	ldrh	r5, [r4, #20]
 8002c36:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c38:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c3a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c3e:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c42:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c44:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c46:	1b52      	subs	r2, r2, r5
 8002c48:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002c4a:	6825      	ldr	r5, [r4, #0]
 8002c4c:	2d08      	cmp	r5, #8
 8002c4e:	d10e      	bne.n	8002c6e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c50:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c52:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002c54:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002c56:	4a0a      	ldr	r2, [pc, #40]	@ (8002c80 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002c58:	7f20      	ldrb	r0, [r4, #28]
 8002c5a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002c5e:	61da      	str	r2, [r3, #28]
        return color;
 8002c60:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002c62:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8002c64:	4a07      	ldr	r2, [pc, #28]	@ (8002c84 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c66:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c68:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002c6a:	601a      	str	r2, [r3, #0]
    }
}
 8002c6c:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002c6e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002c70:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002c72:	611a      	str	r2, [r3, #16]
 8002c74:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002c76:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002c78:	4a03      	ldr	r2, [pc, #12]	@ (8002c88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002c7a:	e7f6      	b.n	8002c6a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002c7c:	52001000 	.word	0x52001000
 8002c80:	00010009 	.word	0x00010009
 8002c84:	00022301 	.word	0x00022301
 8002c88:	00032301 	.word	0x00032301

08002c8c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002c8c:	b508      	push	{r3, lr}
    switch (format)
 8002c8e:	280b      	cmp	r0, #11
 8002c90:	d80b      	bhi.n	8002caa <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002c92:	e8df f000 	tbb	[pc, r0]
 8002c96:	1206      	.short	0x1206
 8002c98:	0a0a0a10 	.word	0x0a0a0a10
 8002c9c:	0808080a 	.word	0x0808080a
 8002ca0:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002ca2:	2002      	movs	r0, #2
}
 8002ca4:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002ca6:	2005      	movs	r0, #5
        break;
 8002ca8:	e7fc      	b.n	8002ca4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002caa:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002cac:	2170      	movs	r1, #112	@ 0x70
 8002cae:	4a05      	ldr	r2, [pc, #20]	@ (8002cc4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002cb0:	4805      	ldr	r0, [pc, #20]	@ (8002cc8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002cb2:	f01d fd79 	bl	80207a8 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	e7f4      	b.n	8002ca4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002cba:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002cbc:	e7f2      	b.n	8002ca4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002cbe:	bf00      	nop
 8002cc0:	08021df9 	.word	0x08021df9
 8002cc4:	08021ea5 	.word	0x08021ea5
 8002cc8:	08021e5f 	.word	0x08021e5f

08002ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002cd0:	7f4f      	ldrb	r7, [r1, #29]
{
 8002cd2:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002cd4:	4638      	mov	r0, r7
 8002cd6:	f7ff ffd9 	bl	8002c8c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002cda:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002cde:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	f7ff ffd3 	bl	8002c8c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002ce6:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002ce8:	4628      	mov	r0, r5
 8002cea:	f7ff ff7f 	bl	8002bec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cee:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002cf2:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002cf6:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cfa:	4b45      	ldr	r3, [pc, #276]	@ (8002e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002cfc:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002cfe:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002d00:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002d02:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002d04:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002d06:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002d0a:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002d0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d10:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002d14:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002d16:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d1a:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002d1c:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002d1e:	f8d9 4000 	ldr.w	r4, [r9]
 8002d22:	f899 201c 	ldrb.w	r2, [r9, #28]
 8002d26:	2c80      	cmp	r4, #128	@ 0x80
 8002d28:	d022      	beq.n	8002d70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8002d2a:	d80f      	bhi.n	8002d4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002d2c:	2c20      	cmp	r4, #32
 8002d2e:	d066      	beq.n	8002dfe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002d30:	2c40      	cmp	r4, #64	@ 0x40
 8002d32:	d064      	beq.n	8002dfe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002d34:	2c04      	cmp	r4, #4
 8002d36:	d05c      	beq.n	8002df2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d38:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8002d3c:	4b34      	ldr	r3, [pc, #208]	@ (8002e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002d3e:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d40:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002d44:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002d46:	d060      	beq.n	8002e0a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d48:	4a32      	ldr	r2, [pc, #200]	@ (8002e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002d4a:	e03f      	b.n	8002dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002d4c:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002d50:	d004      	beq.n	8002d5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8002d52:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8002d56:	d1ef      	bne.n	8002d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d58:	482f      	ldr	r0, [pc, #188]	@ (8002e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002d5a:	e000      	b.n	8002d5e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d5c:	482f      	ldr	r0, [pc, #188]	@ (8002e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d5e:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002d62:	61da      	str	r2, [r3, #28]
 8002d64:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002d68:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002d6a:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d6c:	6159      	str	r1, [r3, #20]
 8002d6e:	e02c      	b.n	8002dca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d70:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002d74:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d78:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002d7c:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002d7e:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d80:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002d82:	1d21      	adds	r1, r4, #4
 8002d84:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002d86:	7821      	ldrb	r1, [r4, #0]
 8002d88:	b141      	cbz	r1, 8002d9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002d8a:	2901      	cmp	r1, #1
 8002d8c:	d021      	beq.n	8002dd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002d8e:	4b24      	ldr	r3, [pc, #144]	@ (8002e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8002d90:	f240 110b 	movw	r1, #267	@ 0x10b
 8002d94:	4a23      	ldr	r2, [pc, #140]	@ (8002e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002d96:	4824      	ldr	r0, [pc, #144]	@ (8002e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8002d98:	f01d fd06 	bl	80207a8 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	8861      	ldrh	r1, [r4, #2]
 8002da0:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002da4:	3901      	subs	r1, #1
 8002da6:	f022 0210 	bic.w	r2, r2, #16
 8002daa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002dae:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8002db0:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002db2:	4b17      	ldr	r3, [pc, #92]	@ (8002e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002db4:	69d9      	ldr	r1, [r3, #28]
 8002db6:	f041 0120 	orr.w	r1, r1, #32
 8002dba:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002dbc:	69d9      	ldr	r1, [r3, #28]
 8002dbe:	0689      	lsls	r1, r1, #26
 8002dc0:	d4fc      	bmi.n	8002dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002dc2:	2110      	movs	r1, #16
 8002dc4:	6099      	str	r1, [r3, #8]
            if (blend)
 8002dc6:	2a00      	cmp	r2, #0
 8002dc8:	d0be      	beq.n	8002d48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002dca:	4a18      	ldr	r2, [pc, #96]	@ (8002e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002dcc:	601a      	str	r2, [r3, #0]
}
 8002dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002dd2:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8002dd4:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002dd6:	8860      	ldrh	r0, [r4, #2]
 8002dd8:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8002ddc:	bf18      	it	ne
 8002dde:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002de0:	3801      	subs	r0, #1
 8002de2:	f021 0110 	bic.w	r1, r1, #16
 8002de6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002dea:	f041 0110 	orr.w	r1, r1, #16
 8002dee:	61d9      	str	r1, [r3, #28]
                break;
 8002df0:	e7df      	b.n	8002db2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002df2:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002df6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002dfa:	61da      	str	r2, [r3, #28]
 8002dfc:	e7b5      	b.n	8002d6a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8002dfe:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002e02:	4b03      	ldr	r3, [pc, #12]	@ (8002e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002e04:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002e08:	e7f7      	b.n	8002dfa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002e0a:	f242 3201 	movw	r2, #8961	@ 0x2301
 8002e0e:	e7dd      	b.n	8002dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002e10:	52001000 	.word	0x52001000
 8002e14:	00012301 	.word	0x00012301
 8002e18:	00020009 	.word	0x00020009
 8002e1c:	0002000a 	.word	0x0002000a
 8002e20:	08021eef 	.word	0x08021eef
 8002e24:	08021f09 	.word	0x08021f09
 8002e28:	08021e5f 	.word	0x08021e5f
 8002e2c:	00022301 	.word	0x00022301

08002e30 <DMA2D_XferCpltCallback>:
 8002e30:	4b02      	ldr	r3, [pc, #8]	@ (8002e3c <DMA2D_XferCpltCallback+0xc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002e36:	6803      	ldr	r3, [r0, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	4718      	bx	r3
 8002e3c:	24025120 	.word	0x24025120

08002e40 <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8002e40:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8002e44:	b510      	push	{r4, lr}
 8002e46:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8002e48:	b9d3      	cbnz	r3, 8002e80 <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8002e4a:	6803      	ldr	r3, [r0, #0]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4e:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8002e50:	4919      	ldr	r1, [pc, #100]	@ (8002eb8 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002e52:	4a1a      	ldr	r2, [pc, #104]	@ (8002ebc <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002e54:	680b      	ldr	r3, [r1, #0]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	5cd3      	ldrb	r3, [r2, r3]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d12a      	bne.n	8002eb4 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002e5e:	4818      	ldr	r0, [pc, #96]	@ (8002ec0 <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8002e60:	6800      	ldr	r0, [r0, #0]
 8002e62:	bb38      	cbnz	r0, 8002eb4 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002e64:	7a20      	ldrb	r0, [r4, #8]
 8002e66:	bb28      	cbnz	r0, 8002eb4 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002e68:	7aa0      	ldrb	r0, [r4, #10]
 8002e6a:	bb18      	cbnz	r0, 8002eb4 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002e6c:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 8002e6e:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8002e72:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002e74:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8002e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002e7c:	f7ff bd6e 	b.w	800295c <DMA2D_CopyBuffer>
        if (isRunning)
 8002e80:	7a03      	ldrb	r3, [r0, #8]
 8002e82:	b143      	cbz	r3, 8002e96 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8002e84:	2300      	movs	r3, #0
 8002e86:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002e88:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb8 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002e8e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002e92:	f7ff fd9d 	bl	80029d0 <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8002e96:	6860      	ldr	r0, [r4, #4]
 8002e98:	6803      	ldr	r3, [r0, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4798      	blx	r3
 8002e9e:	b948      	cbnz	r0, 8002eb4 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002ea0:	7a63      	ldrb	r3, [r4, #9]
 8002ea2:	b13b      	cbz	r3, 8002eb4 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8002ea4:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8002ea6:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8002eaa:	4620      	mov	r0, r4
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8002eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8002eb2:	4718      	bx	r3
    }
 8002eb4:	bd10      	pop	{r4, pc}
 8002eb6:	bf00      	nop
 8002eb8:	24009d94 	.word	0x24009d94
 8002ebc:	24000010 	.word	0x24000010
 8002ec0:	24009d90 	.word	0x24009d90

08002ec4 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f04 <_ZN8STM32DMAC1Ev+0x40>)
 8002eca:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002ecc:	2600      	movs	r6, #0
 8002ece:	4625      	mov	r5, r4
 8002ed0:	2260      	movs	r2, #96	@ 0x60
 8002ed2:	6060      	str	r0, [r4, #4]
 8002ed4:	7226      	strb	r6, [r4, #8]
 8002ed6:	7266      	strb	r6, [r4, #9]
 8002ed8:	f845 3b20 	str.w	r3, [r5], #32
 8002edc:	4629      	mov	r1, r5
 8002ede:	f00b fbfb 	bl	800e6d8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002ee2:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8002ee6:	60ee      	str	r6, [r5, #12]
 8002ee8:	3524      	adds	r5, #36	@ 0x24
 8002eea:	429d      	cmp	r5, r3
 8002eec:	d1fb      	bne.n	8002ee6 <_ZN8STM32DMAC1Ev+0x22>
 8002eee:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 8002ef2:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002ef4:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8002ef8:	f008 f8be 	bl	800b078 <osMutexNew>
 8002efc:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 8002f00:	4620      	mov	r0, r4
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	08023824 	.word	0x08023824

08002f08 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f08:	4b03      	ldr	r3, [pc, #12]	@ (8002f18 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	07d2      	lsls	r2, r2, #31
 8002f0e:	d4fc      	bmi.n	8002f0a <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f10:	2223      	movs	r2, #35	@ 0x23
 8002f12:	609a      	str	r2, [r3, #8]
}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	52001000 	.word	0x52001000

08002f1c <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This function is used when decompressing data to flush
    // the currently decoded data in the cache to allow the DMA2D
    // to blend the pixels correctly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f4c <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 8002f1e:	6953      	ldr	r3, [r2, #20]
 8002f20:	03db      	lsls	r3, r3, #15
 8002f22:	d511      	bpl.n	8002f48 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8002f24:	2900      	cmp	r1, #0
 8002f26:	dd0f      	ble.n	8002f48 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002f28:	f000 031f 	and.w	r3, r0, #31
 8002f2c:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002f2e:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8002f32:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002f34:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002f38:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 8002f3a:	1a0b      	subs	r3, r1, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	dcf9      	bgt.n	8002f34 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8002f40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f44:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002f50:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f52:	4c10      	ldr	r4, [pc, #64]	@ (8002f94 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002f54:	6825      	ldr	r5, [r4, #0]
 8002f56:	07ed      	lsls	r5, r5, #31
 8002f58:	d4fc      	bmi.n	8002f54 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f5a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f5c:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8002f5e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f60:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f62:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f66:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f6a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f6c:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f6e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8002f70:	d00c      	beq.n	8002f8c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f72:	4909      	ldr	r1, [pc, #36]	@ (8002f98 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002f74:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f78:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f7a:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002f7e:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002f80:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002f82:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002f84:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002f86:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002f88:	6023      	str	r3, [r4, #0]
    }
}
 8002f8a:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002f8c:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002f8e:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002f90:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002f92:	e7f9      	b.n	8002f88 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002f94:	52001000 	.word	0x52001000
 8002f98:	00010009 	.word	0x00010009
 8002f9c:	00020001 	.word	0x00020001
 8002fa0:	00030001 	.word	0x00030001

08002fa4 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8002fa4:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002fa6:	4c0e      	ldr	r4, [pc, #56]	@ (8002fe0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8002fa8:	6825      	ldr	r5, [r4, #0]
 8002faa:	07ed      	lsls	r5, r5, #31
 8002fac:	d4fc      	bmi.n	8002fa8 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002fae:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002fb0:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8002fb2:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002fb4:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002fb6:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002fba:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002fbe:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002fc0:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002fc2:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002fc4:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8002fc6:	d007      	beq.n	8002fd8 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002fc8:	4a06      	ldr	r2, [pc, #24]	@ (8002fe4 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8002fca:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8002fce:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002fd0:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002fd2:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002fd4:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8002fd6:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002fd8:	4b03      	ldr	r3, [pc, #12]	@ (8002fe8 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8002fda:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8002fdc:	6025      	str	r5, [r4, #0]
}
 8002fde:	e7fa      	b.n	8002fd6 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8002fe0:	52001000 	.word	0x52001000
 8002fe4:	00020001 	.word	0x00020001
 8002fe8:	ff020001 	.word	0xff020001

08002fec <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8002fec:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002fee:	4c0b      	ldr	r4, [pc, #44]	@ (800301c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 8002ff0:	6825      	ldr	r5, [r4, #0]
 8002ff2:	07ed      	lsls	r5, r5, #31
 8002ff4:	d4fc      	bmi.n	8002ff0 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ff6:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ff8:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ffa:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ffc:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ffe:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003004:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003006:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003008:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800300a:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 800300c:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800300e:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003010:	4b03      	ldr	r3, [pc, #12]	@ (8003020 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003012:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8003014:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003016:	6023      	str	r3, [r4, #0]
}
 8003018:	bd30      	pop	{r4, r5, pc}
 800301a:	bf00      	nop
 800301c:	52001000 	.word	0x52001000
 8003020:	00020001 	.word	0x00020001

08003024 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8003024:	2001      	movs	r0, #1
 8003026:	4770      	bx	lr

08003028 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8003028:	200c      	movs	r0, #12
 800302a:	4770      	bx	lr

0800302c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 800302c:	230c      	movs	r3, #12
 800302e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003032:	3008      	adds	r0, #8
 8003034:	4770      	bx	lr

08003036 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8003036:	230c      	movs	r3, #12
 8003038:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800303c:	3008      	adds	r0, #8
 800303e:	4770      	bx	lr

08003040 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8003040:	2001      	movs	r0, #1
 8003042:	4770      	bx	lr

08003044 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003044:	20e0      	movs	r0, #224	@ 0xe0
 8003046:	4770      	bx	lr

08003048 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003048:	23e0      	movs	r3, #224	@ 0xe0
 800304a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800304e:	3008      	adds	r0, #8
 8003050:	4770      	bx	lr

08003052 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003052:	23e0      	movs	r3, #224	@ 0xe0
 8003054:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003058:	3008      	adds	r0, #8
 800305a:	4770      	bx	lr

0800305c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800305c:	2001      	movs	r0, #1
 800305e:	4770      	bx	lr

08003060 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003060:	2010      	movs	r0, #16
 8003062:	4770      	bx	lr

08003064 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003064:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8003068:	3008      	adds	r0, #8
 800306a:	4770      	bx	lr

0800306c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800306c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8003070:	3008      	adds	r0, #8
 8003072:	4770      	bx	lr

08003074 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8003074:	4608      	mov	r0, r1
 8003076:	f000 be37 	b.w	8003ce8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
	...

0800307c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 800307c:	4b03      	ldr	r3, [pc, #12]	@ (800308c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800307e:	b510      	push	{r4, lr}
 8003080:	4604      	mov	r4, r0
 8003082:	6003      	str	r3, [r0, #0]
 8003084:	f00a f951 	bl	800d32a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003088:	4620      	mov	r0, r4
 800308a:	bd10      	pop	{r4, pc}
 800308c:	080238dc 	.word	0x080238dc

08003090 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003090:	b510      	push	{r4, lr}
 8003092:	4604      	mov	r4, r0
 8003094:	f7ff fff2 	bl	800307c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003098:	2114      	movs	r1, #20
 800309a:	4620      	mov	r0, r4
 800309c:	f01d f80c 	bl	80200b8 <_ZdlPvj>
 80030a0:	4620      	mov	r0, r4
 80030a2:	bd10      	pop	{r4, pc}

080030a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80030a4:	4b03      	ldr	r3, [pc, #12]	@ (80030b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80030a6:	b510      	push	{r4, lr}
 80030a8:	4604      	mov	r4, r0
 80030aa:	6003      	str	r3, [r0, #0]
 80030ac:	f00a f93d 	bl	800d32a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80030b0:	4620      	mov	r0, r4
 80030b2:	bd10      	pop	{r4, pc}
 80030b4:	080238a8 	.word	0x080238a8

080030b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80030b8:	b510      	push	{r4, lr}
 80030ba:	4604      	mov	r4, r0
 80030bc:	f7ff fff2 	bl	80030a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80030c0:	21e8      	movs	r1, #232	@ 0xe8
 80030c2:	4620      	mov	r0, r4
 80030c4:	f01c fff8 	bl	80200b8 <_ZdlPvj>
 80030c8:	4620      	mov	r0, r4
 80030ca:	bd10      	pop	{r4, pc}

080030cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80030cc:	4b03      	ldr	r3, [pc, #12]	@ (80030dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80030ce:	b510      	push	{r4, lr}
 80030d0:	4604      	mov	r4, r0
 80030d2:	6003      	str	r3, [r0, #0]
 80030d4:	f00a f929 	bl	800d32a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80030d8:	4620      	mov	r0, r4
 80030da:	bd10      	pop	{r4, pc}
 80030dc:	08023874 	.word	0x08023874

080030e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80030e0:	b510      	push	{r4, lr}
 80030e2:	4604      	mov	r4, r0
 80030e4:	f7ff fff2 	bl	80030cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80030e8:	2118      	movs	r1, #24
 80030ea:	4620      	mov	r0, r4
 80030ec:	f01c ffe4 	bl	80200b8 <_ZdlPvj>
 80030f0:	4620      	mov	r0, r4
 80030f2:	bd10      	pop	{r4, pc}

080030f4 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80030f4:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <_ZN12FrontendHeapD1Ev+0x24>)
 80030f6:	b510      	push	{r4, lr}
 80030f8:	4604      	mov	r4, r0
 80030fa:	6003      	str	r3, [r0, #0]
 80030fc:	f500 708a 	add.w	r0, r0, #276	@ 0x114
 8003100:	f7ff ffbc 	bl	800307c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003104:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8003108:	f7ff ffcc 	bl	80030a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800310c:	f104 0014 	add.w	r0, r4, #20
 8003110:	f7ff ffdc 	bl	80030cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003114:	4620      	mov	r0, r4
 8003116:	bd10      	pop	{r4, pc}
 8003118:	08023910 	.word	0x08023910

0800311c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800311c:	b508      	push	{r3, lr}
 800311e:	4802      	ldr	r0, [pc, #8]	@ (8003128 <__tcf_0+0xc>)
 8003120:	f7ff ffe8 	bl	80030f4 <_ZN12FrontendHeapD1Ev>
 8003124:	bd08      	pop	{r3, pc}
 8003126:	bf00      	nop
 8003128:	2400ac90 	.word	0x2400ac90

0800312c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 800312c:	b510      	push	{r4, lr}
 800312e:	4604      	mov	r4, r0
 8003130:	f7ff ffe0 	bl	80030f4 <_ZN12FrontendHeapD1Ev>
 8003134:	f44f 7122 	mov.w	r1, #648	@ 0x288
 8003138:	4620      	mov	r0, r4
 800313a:	f01c ffbd 	bl	80200b8 <_ZdlPvj>
 800313e:	4620      	mov	r0, r4
 8003140:	bd10      	pop	{r4, pc}
	...

08003144 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8003144:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003148:	f000 fc52 	bl	80039f0 <_ZN14BitmapDatabase11getInstanceEv>
 800314c:	2400      	movs	r4, #0
 800314e:	4605      	mov	r5, r0
 8003150:	f000 fc52 	bl	80039f8 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003154:	4623      	mov	r3, r4
 8003156:	4601      	mov	r1, r0
 8003158:	4622      	mov	r2, r4
 800315a:	4628      	mov	r0, r5
 800315c:	9400      	str	r4, [sp, #0]
 800315e:	f012 f9b5 	bl	80154cc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8003162:	4b27      	ldr	r3, [pc, #156]	@ (8003200 <touchgfx_init+0xbc>)
 8003164:	4a27      	ldr	r2, [pc, #156]	@ (8003204 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8003166:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8003168:	4d27      	ldr	r5, [pc, #156]	@ (8003208 <touchgfx_init+0xc4>)
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	f001 f84c 	bl	8004208 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 8003170:	4b26      	ldr	r3, [pc, #152]	@ (800320c <touchgfx_init+0xc8>)
 8003172:	4a27      	ldr	r2, [pc, #156]	@ (8003210 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8003174:	4827      	ldr	r0, [pc, #156]	@ (8003214 <touchgfx_init+0xd0>)
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	f012 f854 	bl	8015224 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 800317c:	682b      	ldr	r3, [r5, #0]
 800317e:	f3bf 8f5b 	dmb	ish
 8003182:	07db      	lsls	r3, r3, #31
 8003184:	d435      	bmi.n	80031f2 <touchgfx_init+0xae>
 8003186:	4628      	mov	r0, r5
 8003188:	f01c ff98 	bl	80200bc <__cxa_guard_acquire>
 800318c:	b388      	cbz	r0, 80031f2 <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 800318e:	4c22      	ldr	r4, [pc, #136]	@ (8003218 <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8003190:	4b22      	ldr	r3, [pc, #136]	@ (800321c <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8003192:	f504 7696 	add.w	r6, r4, #300	@ 0x12c
        : presenterStorage(pres),
 8003196:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 800319a:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 800319e:	f504 778a 	add.w	r7, r4, #276	@ 0x114
 80031a2:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 80031a4:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 80031a6:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 80031aa:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 80031ac:	6126      	str	r6, [r4, #16]
 80031ae:	f00a f8bd 	bl	800d32c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80031b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003220 <touchgfx_init+0xdc>)
 80031b4:	4640      	mov	r0, r8
 80031b6:	6163      	str	r3, [r4, #20]
 80031b8:	f00a f8b8 	bl	800d32c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80031bc:	4b19      	ldr	r3, [pc, #100]	@ (8003224 <touchgfx_init+0xe0>)
 80031be:	4638      	mov	r0, r7
 80031c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80031c2:	f00a f8b3 	bl	800d32c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80031c6:	4b18      	ldr	r3, [pc, #96]	@ (8003228 <touchgfx_init+0xe4>)
 80031c8:	f504 7094 	add.w	r0, r4, #296	@ 0x128
 80031cc:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
 80031d0:	f001 f890 	bl	80042f4 <_ZN5ModelC1Ev>
 80031d4:	4622      	mov	r2, r4
 80031d6:	f504 7194 	add.w	r1, r4, #296	@ 0x128
 80031da:	4630      	mov	r0, r6
 80031dc:	f001 f880 	bl	80042e0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80031e0:	4630      	mov	r0, r6
 80031e2:	f000 fd81 	bl	8003ce8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 80031e6:	4811      	ldr	r0, [pc, #68]	@ (800322c <touchgfx_init+0xe8>)
 80031e8:	f01d fafc 	bl	80207e4 <atexit>
 80031ec:	4628      	mov	r0, r5
 80031ee:	f01c ff71 	bl	80200d4 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80031f2:	480f      	ldr	r0, [pc, #60]	@ (8003230 <touchgfx_init+0xec>)
}
 80031f4:	b002      	add	sp, #8
 80031f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80031fa:	f7fe bcd5 	b.w	8001ba8 <_ZN11TouchGFXHAL10initializeEv>
 80031fe:	bf00      	nop
 8003200:	24025184 	.word	0x24025184
 8003204:	24009e54 	.word	0x24009e54
 8003208:	2400ac8c 	.word	0x2400ac8c
 800320c:	24009e74 	.word	0x24009e74
 8003210:	24009e58 	.word	0x24009e58
 8003214:	24000034 	.word	0x24000034
 8003218:	2400ac90 	.word	0x2400ac90
 800321c:	08023910 	.word	0x08023910
 8003220:	08023874 	.word	0x08023874
 8003224:	080238a8 	.word	0x080238a8
 8003228:	080238dc 	.word	0x080238dc
 800322c:	0800311d 	.word	0x0800311d
 8003230:	24009dd0 	.word	0x24009dd0

08003234 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8003234:	4770      	bx	lr
	...

08003238 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003238:	4801      	ldr	r0, [pc, #4]	@ (8003240 <touchgfx_taskEntry+0x8>)
 800323a:	f7fe bcc7 	b.w	8001bcc <_ZN11TouchGFXHAL9taskEntryEv>
 800323e:	bf00      	nop
 8003240:	24009dd0 	.word	0x24009dd0

08003244 <_GLOBAL__sub_I_touchgfx_init>:
}
 8003244:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 8003246:	4c0e      	ldr	r4, [pc, #56]	@ (8003280 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 8003248:	4b0e      	ldr	r3, [pc, #56]	@ (8003284 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 800324a:	4e0f      	ldr	r6, [pc, #60]	@ (8003288 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 800324c:	4620      	mov	r0, r4
static LCD24bpp display;
 800324e:	4d0f      	ldr	r5, [pc, #60]	@ (800328c <_GLOBAL__sub_I_touchgfx_init+0x48>)
 8003250:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 8003252:	f7ff fe37 	bl	8002ec4 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8003256:	4628      	mov	r0, r5
 8003258:	f015 ffa2 	bl	80191a0 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 800325c:	480c      	ldr	r0, [pc, #48]	@ (8003290 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 800325e:	f010 f963 	bl	8013528 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8003262:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003266:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800326a:	4621      	mov	r1, r4
 800326c:	4809      	ldr	r0, [pc, #36]	@ (8003294 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 800326e:	e9cd 3200 	strd	r3, r2, [sp]
 8003272:	4633      	mov	r3, r6
 8003274:	462a      	mov	r2, r5
 8003276:	f7fe fd3d 	bl	8001cf4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800327a:	b002      	add	sp, #8
 800327c:	bd70      	pop	{r4, r5, r6, pc}
 800327e:	bf00      	nop
 8003280:	24009ee0 	.word	0x24009ee0
 8003284:	080236dc 	.word	0x080236dc
 8003288:	2400ac88 	.word	0x2400ac88
 800328c:	24009e74 	.word	0x24009e74
 8003290:	24009e58 	.word	0x24009e58
 8003294:	24009dd0 	.word	0x24009dd0

08003298 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003298:	4801      	ldr	r0, [pc, #4]	@ (80032a0 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800329a:	f7ff bc5f 	b.w	8002b5c <_ZN8STM32DMAD1Ev>
 800329e:	bf00      	nop
 80032a0:	24009ee0 	.word	0x24009ee0

080032a4 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80032a4:	2000      	movs	r0, #0
 80032a6:	4770      	bx	lr

080032a8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80032a8:	8081      	strh	r1, [r0, #4]
    }
 80032aa:	4770      	bx	lr

080032ac <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80032ac:	80c1      	strh	r1, [r0, #6]
    }
 80032ae:	4770      	bx	lr

080032b0 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80032b0:	8101      	strh	r1, [r0, #8]
    }
 80032b2:	4770      	bx	lr

080032b4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80032b4:	8141      	strh	r1, [r0, #10]
    }
 80032b6:	4770      	bx	lr

080032b8 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80032b8:	4770      	bx	lr

080032ba <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 80032ba:	4770      	bx	lr

080032bc <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 80032bc:	4770      	bx	lr

080032be <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 80032be:	4770      	bx	lr

080032c0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 80032c0:	4770      	bx	lr

080032c2 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80032c2:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 80032c4:	88c4      	ldrh	r4, [r0, #6]
 80032c6:	6803      	ldr	r3, [r0, #0]
 80032c8:	1b12      	subs	r2, r2, r4
 80032ca:	8884      	ldrh	r4, [r0, #4]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ce:	1b09      	subs	r1, r1, r4
 80032d0:	b212      	sxth	r2, r2
    }
 80032d2:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80032d6:	b209      	sxth	r1, r1
 80032d8:	4718      	bx	r3

080032da <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80032da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032de:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80032e0:	f04f 33ff 	mov.w	r3, #4294967295
 80032e4:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80032e6:	6813      	ldr	r3, [r2, #0]
 80032e8:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80032ea:	6010      	str	r0, [r2, #0]
    }
 80032ec:	4770      	bx	lr

080032ee <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 80032ee:	2000      	movs	r0, #0
 80032f0:	4770      	bx	lr

080032f2 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 80032f2:	888b      	ldrh	r3, [r1, #4]
 80032f4:	8083      	strh	r3, [r0, #4]
        return true;
    }
 80032f6:	2001      	movs	r0, #1
 80032f8:	4770      	bx	lr

080032fa <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 80032fa:	4770      	bx	lr

080032fc <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80032fc:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8003300:	4770      	bx	lr

08003302 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8003302:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8003306:	4770      	bx	lr

08003308 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8003308:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800330a:	2200      	movs	r2, #0
        return rect.width;
 800330c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8003310:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8003314:	8002      	strh	r2, [r0, #0]
 8003316:	8042      	strh	r2, [r0, #2]
 8003318:	8084      	strh	r4, [r0, #4]
 800331a:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 800331c:	bd10      	pop	{r4, pc}

0800331e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800331e:	2200      	movs	r2, #0
 8003320:	8002      	strh	r2, [r0, #0]
 8003322:	8042      	strh	r2, [r0, #2]
 8003324:	8082      	strh	r2, [r0, #4]
 8003326:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003328:	4770      	bx	lr

0800332a <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 800332a:	7701      	strb	r1, [r0, #28]
    }
 800332c:	4770      	bx	lr

0800332e <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 800332e:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 8003332:	4770      	bx	lr

08003334 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 8003334:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 8003338:	4770      	bx	lr

0800333a <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 800333a:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 800333e:	4770      	bx	lr

08003340 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 8003340:	2001      	movs	r0, #1
 8003342:	4770      	bx	lr

08003344 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 8003344:	3098      	adds	r0, #152	@ 0x98
 8003346:	4770      	bx	lr

08003348 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 8003348:	308c      	adds	r0, #140	@ 0x8c
 800334a:	4770      	bx	lr

0800334c <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 800334c:	3084      	adds	r0, #132	@ 0x84
 800334e:	4770      	bx	lr

08003350 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003350:	4770      	bx	lr

08003352 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003352:	4770      	bx	lr

08003354 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 8003354:	4770      	bx	lr
	...

08003358 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003358:	4b02      	ldr	r3, [pc, #8]	@ (8003364 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 800335a:	2290      	movs	r2, #144	@ 0x90
 800335c:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	e000e100 	.word	0xe000e100

08003368 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8003368:	4770      	bx	lr

0800336a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 800336a:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 800336c:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 8003370:	4770      	bx	lr

08003372 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003372:	4770      	bx	lr

08003374 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8003374:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003378:	4611      	mov	r1, r2
 800337a:	6840      	ldr	r0, [r0, #4]
 800337c:	6803      	ldr	r3, [r0, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4718      	bx	r3

08003382 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003382:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 8003386:	4770      	bx	lr

08003388 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003388:	b510      	push	{r4, lr}
 800338a:	4604      	mov	r4, r0
 800338c:	2148      	movs	r1, #72	@ 0x48
 800338e:	f01c fe93 	bl	80200b8 <_ZdlPvj>
 8003392:	4620      	mov	r0, r4
 8003394:	bd10      	pop	{r4, pc}

08003396 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003396:	b510      	push	{r4, lr}
 8003398:	4604      	mov	r4, r0
 800339a:	212c      	movs	r1, #44	@ 0x2c
 800339c:	f01c fe8c 	bl	80200b8 <_ZdlPvj>
 80033a0:	4620      	mov	r0, r4
 80033a2:	bd10      	pop	{r4, pc}

080033a4 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80033a4:	b510      	push	{r4, lr}
 80033a6:	4604      	mov	r4, r0
 80033a8:	21bc      	movs	r1, #188	@ 0xbc
 80033aa:	f01c fe85 	bl	80200b8 <_ZdlPvj>
 80033ae:	4620      	mov	r0, r4
 80033b0:	bd10      	pop	{r4, pc}
	...

080033b4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80033b4:	b538      	push	{r3, r4, r5, lr}
 80033b6:	4604      	mov	r4, r0
    HAL::initialize();
 80033b8:	f00a fab5 	bl	800d926 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 80033c0:	f00e fe44 	bl	801204c <_ZN8touchgfx11Application11getInstanceEv>
 80033c4:	4601      	mov	r1, r0
 80033c6:	4620      	mov	r0, r4
 80033c8:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	4908      	ldr	r1, [pc, #32]	@ (80033f0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 80033ce:	4620      	mov	r0, r4
 80033d0:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 80033d4:	2300      	movs	r3, #0
 80033d6:	461a      	mov	r2, r3
 80033d8:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 80033da:	6863      	ldr	r3, [r4, #4]
 80033dc:	4a05      	ldr	r2, [pc, #20]	@ (80033f4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80033de:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 80033e0:	4b05      	ldr	r3, [pc, #20]	@ (80033f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80033e2:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 80033e4:	4a05      	ldr	r2, [pc, #20]	@ (80033fc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 80033e6:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 80033e8:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 80033ea:	4a05      	ldr	r2, [pc, #20]	@ (8003400 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 80033ec:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80033ee:	bd38      	pop	{r3, r4, r5, pc}
 80033f0:	d0119400 	.word	0xd0119400
 80033f4:	2400b020 	.word	0x2400b020
 80033f8:	2400afd8 	.word	0x2400afd8
 80033fc:	d0000000 	.word	0xd0000000
 8003400:	00119400 	.word	0x00119400

08003404 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	4604      	mov	r4, r0
 8003408:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 800340a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800340c:	f04f 31ff 	mov.w	r1, #4294967295
 8003410:	f007 fe6a 	bl	800b0e8 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8003414:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003416:	f007 fe8a 	bl	800b12e <osMutexRelease>
        streams[handle].isActive = false;
 800341a:	2324      	movs	r3, #36	@ 0x24
 800341c:	fb03 4505 	mla	r5, r3, r5, r4
 8003420:	2300      	movs	r3, #0
 8003422:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 8003426:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800342a:	b90b      	cbnz	r3, 8003430 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 800342c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800342e:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 8003430:	bd38      	pop	{r3, r4, r5, pc}

08003432 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8003432:	f00a ba29 	b.w	800d888 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08003436 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8003436:	f00a bb98 	b.w	800db6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800343a <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 800343a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800343e:	b112      	cbz	r2, 8003446 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8003440:	6803      	ldr	r3, [r0, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	4718      	bx	r3
    }
 8003446:	4770      	bx	lr

08003448 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003448:	4a12      	ldr	r2, [pc, #72]	@ (8003494 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 800344a:	6953      	ldr	r3, [r2, #20]
 800344c:	03db      	lsls	r3, r3, #15
{
 800344e:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003450:	d51e      	bpl.n	8003490 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003452:	2300      	movs	r3, #0
 8003454:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003458:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800345c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003460:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003464:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003468:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800346c:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800346e:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003472:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003474:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003478:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800347a:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 800347e:	d2f9      	bcs.n	8003474 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003480:	3b20      	subs	r3, #32
 8003482:	f113 0f20 	cmn.w	r3, #32
 8003486:	d1f2      	bne.n	800346e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8003488:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800348c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	bf00      	nop
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8003498:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800349a:	b131      	cbz	r1, 80034aa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 800349c:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 800349e:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 80034a2:	4a04      	ldr	r2, [pc, #16]	@ (80034b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 80034a4:	4804      	ldr	r0, [pc, #16]	@ (80034b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 80034a6:	f01d f97f 	bl	80207a8 <__assert_func>
    }
 80034aa:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 80034ae:	bd08      	pop	{r3, pc}
 80034b0:	08021f47 	.word	0x08021f47
 80034b4:	08021f5b 	.word	0x08021f5b
 80034b8:	080220e5 	.word	0x080220e5

080034bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 80034bc:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 80034be:	b131      	cbz	r1, 80034ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 80034c0:	4b06      	ldr	r3, [pc, #24]	@ (80034dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 80034c2:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 80034c6:	4a06      	ldr	r2, [pc, #24]	@ (80034e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 80034c8:	4806      	ldr	r0, [pc, #24]	@ (80034e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 80034ca:	f01d f96d 	bl	80207a8 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 80034ce:	6840      	ldr	r0, [r0, #4]
 80034d0:	4611      	mov	r1, r2
 80034d2:	6803      	ldr	r3, [r0, #0]
    }
 80034d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	4718      	bx	r3
 80034dc:	08021f47 	.word	0x08021f47
 80034e0:	0802212f 	.word	0x0802212f
 80034e4:	080220e5 	.word	0x080220e5

080034e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 80034e8:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80034ea:	b129      	cbz	r1, 80034f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 80034ec:	4b03      	ldr	r3, [pc, #12]	@ (80034fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 80034ee:	2179      	movs	r1, #121	@ 0x79
 80034f0:	4a03      	ldr	r2, [pc, #12]	@ (8003500 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 80034f2:	4804      	ldr	r0, [pc, #16]	@ (8003504 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 80034f4:	f01d f958 	bl	80207a8 <__assert_func>
    }
 80034f8:	68c0      	ldr	r0, [r0, #12]
 80034fa:	bd08      	pop	{r3, pc}
 80034fc:	08021f47 	.word	0x08021f47
 8003500:	080222dd 	.word	0x080222dd
 8003504:	080220e5 	.word	0x080220e5

08003508 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8003508:	b510      	push	{r4, lr}
 800350a:	4604      	mov	r4, r0
        assert(handle < no_streams);
 800350c:	b129      	cbz	r1, 800351a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 800350e:	4b19      	ldr	r3, [pc, #100]	@ (8003574 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8003510:	21a2      	movs	r1, #162	@ 0xa2
 8003512:	4a19      	ldr	r2, [pc, #100]	@ (8003578 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8003514:	4819      	ldr	r0, [pc, #100]	@ (800357c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 8003516:	f01d f947 	bl	80207a8 <__assert_func>
        switch (cmd)
 800351a:	2a05      	cmp	r2, #5
 800351c:	d815      	bhi.n	800354a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 800351e:	e8df f002 	tbb	[pc, r2]
 8003522:	1103      	.short	0x1103
 8003524:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 8003528:	6840      	ldr	r0, [r0, #4]
 800352a:	6803      	ldr	r3, [r0, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	4798      	blx	r3
 8003530:	b158      	cbz	r0, 800354a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8003532:	2301      	movs	r3, #1
 8003534:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8003538:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 800353c:	2300      	movs	r3, #0
            stream.tickCount = 0;
 800353e:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 8003542:	e002      	b.n	800354a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8003544:	2300      	movs	r3, #0
 8003546:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 800354a:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 800354c:	6203      	str	r3, [r0, #32]
 800354e:	e7f5      	b.n	800353c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 8003550:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 8003552:	2301      	movs	r3, #1
 8003554:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8003558:	e7f0      	b.n	800353c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 800355a:	2300      	movs	r3, #0
 800355c:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 8003560:	2301      	movs	r3, #1
 8003562:	6203      	str	r3, [r0, #32]
            break;
 8003564:	e7f1      	b.n	800354a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 8003566:	3b00      	subs	r3, #0
 8003568:	bf18      	it	ne
 800356a:	2301      	movne	r3, #1
 800356c:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8003570:	e7eb      	b.n	800354a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003572:	bf00      	nop
 8003574:	08021f47 	.word	0x08021f47
 8003578:	08022492 	.word	0x08022492
 800357c:	080220e5 	.word	0x080220e5

08003580 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003580:	b510      	push	{r4, lr}
 8003582:	460c      	mov	r4, r1
 8003584:	4611      	mov	r1, r2
 8003586:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8003588:	b12c      	cbz	r4, 8003596 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 800358a:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 800358c:	2190      	movs	r1, #144	@ 0x90
 800358e:	4a06      	ldr	r2, [pc, #24]	@ (80035a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003590:	4806      	ldr	r0, [pc, #24]	@ (80035ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003592:	f01d f909 	bl	80207a8 <__assert_func>
        stream.frameNumber = 0;
 8003596:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003598:	6840      	ldr	r0, [r0, #4]
 800359a:	6803      	ldr	r3, [r0, #0]
    }
 800359c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	4718      	bx	r3
 80035a4:	08021f47 	.word	0x08021f47
 80035a8:	08022666 	.word	0x08022666
 80035ac:	080220e5 	.word	0x080220e5

080035b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80035b0:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80035b2:	b129      	cbz	r1, 80035c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 80035b4:	4b05      	ldr	r3, [pc, #20]	@ (80035cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 80035b6:	2182      	movs	r1, #130	@ 0x82
 80035b8:	4a05      	ldr	r2, [pc, #20]	@ (80035d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 80035ba:	4806      	ldr	r0, [pc, #24]	@ (80035d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 80035bc:	f01d f8f4 	bl	80207a8 <__assert_func>
        stream.tickCount = 0;
 80035c0:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 80035c4:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 80035c8:	bd08      	pop	{r3, pc}
 80035ca:	bf00      	nop
 80035cc:	08021f47 	.word	0x08021f47
 80035d0:	08022841 	.word	0x08022841
 80035d4:	080220e5 	.word	0x080220e5

080035d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 80035d8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 80035dc:	b510      	push	{r4, lr}
 80035de:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 80035e0:	b153      	cbz	r3, 80035f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 80035e2:	f04f 31ff 	mov.w	r1, #4294967295
 80035e6:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80035e8:	f007 fd7e 	bl	800b0e8 <osMutexAcquire>
            firstDrawThisFrame = false;
 80035ec:	2300      	movs	r3, #0
 80035ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 80035f8:	bd10      	pop	{r4, pc}

080035fa <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80035fa:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80035fe:	b11a      	cbz	r2, 8003608 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003600:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003604:	b102      	cbz	r2, 8003608 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003606:	6018      	str	r0, [r3, #0]
        }
    }
 8003608:	4770      	bx	lr
	...

0800360c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 800360c:	b510      	push	{r4, lr}
 800360e:	4604      	mov	r4, r0
 8003610:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8003612:	b129      	cbz	r1, 8003620 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003614:	4b13      	ldr	r3, [pc, #76]	@ (8003664 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8003616:	21d0      	movs	r1, #208	@ 0xd0
 8003618:	4a13      	ldr	r2, [pc, #76]	@ (8003668 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 800361a:	4814      	ldr	r0, [pc, #80]	@ (800366c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 800361c:	f01d f8c4 	bl	80207a8 <__assert_func>
        if (stream.isPlaying)
 8003620:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003624:	b133      	cbz	r3, 8003634 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8003626:	4b12      	ldr	r3, [pc, #72]	@ (8003670 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 800362e:	6963      	ldr	r3, [r4, #20]
 8003630:	4413      	add	r3, r2
 8003632:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8003634:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8003638:	b90b      	cbnz	r3, 800363e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 800363a:	2001      	movs	r0, #1
    }
 800363c:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 800363e:	68a3      	ldr	r3, [r4, #8]
 8003640:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 8003642:	6803      	ldr	r3, [r0, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8003648:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 800364a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 800364e:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8003652:	2800      	cmp	r0, #0
 8003654:	d1f1      	bne.n	800363a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8003656:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1ee      	bne.n	800363c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 800365e:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8003662:	e7eb      	b.n	800363c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8003664:	08021f47 	.word	0x08021f47
 8003668:	080229fd 	.word	0x080229fd
 800366c:	080220e5 	.word	0x080220e5
 8003670:	24025120 	.word	0x24025120

08003674 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003674:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8003676:	4c1a      	ldr	r4, [pc, #104]	@ (80036e0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8003678:	4605      	mov	r5, r0
    HAL::endFrame();
 800367a:	f00a f947 	bl	800d90c <_ZN8touchgfx3HAL8endFrameEv>
 800367e:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003682:	b913      	cbnz	r3, 800368a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003684:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003688:	b1ab      	cbz	r3, 80036b6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 800368a:	69e1      	ldr	r1, [r4, #28]
 800368c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003690:	4353      	muls	r3, r2
 8003692:	6922      	ldr	r2, [r4, #16]
 8003694:	434a      	muls	r2, r1
 8003696:	4293      	cmp	r3, r2
 8003698:	d30d      	bcc.n	80036b6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 800369a:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 800369e:	b138      	cbz	r0, 80036b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 80036a6:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 80036a8:	bf98      	it	ls
 80036aa:	f102 32ff 	addls.w	r2, r2, #4294967295
 80036ae:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 80036b6:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 80036b8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 80036ba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 80036be:	f007 fdcb 	bl	800b258 <osSemaphoreRelease>
        if (uiHasMutex)
 80036c2:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80036c6:	b12b      	cbz	r3, 80036d4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 80036c8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80036ca:	f007 fd30 	bl	800b12e <osMutexRelease>
            uiHasMutex = false;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 80036d4:	6868      	ldr	r0, [r5, #4]
 80036d6:	6803      	ldr	r3, [r0, #0]
}
 80036d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	4718      	bx	r3
 80036e0:	2400afd8 	.word	0x2400afd8

080036e4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036e4:	4b04      	ldr	r3, [pc, #16]	@ (80036f8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 80036e6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80036ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80036ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80036f2:	f3bf 8f6f 	isb	sy
}
 80036f6:	4770      	bx	lr
 80036f8:	e000e100 	.word	0xe000e100

080036fc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036fc:	4b02      	ldr	r3, [pc, #8]	@ (8003708 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80036fe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003702:	609a      	str	r2, [r3, #8]
}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	e000e100 	.word	0xe000e100

0800370c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003710:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003714:	b9d8      	cbnz	r0, 800374e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003716:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800371a:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 800371c:	2501      	movs	r5, #1
                streams[i] = Stream();
 800371e:	60d8      	str	r0, [r3, #12]
 8003720:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003722:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 8003726:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003728:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 800372c:	6158      	str	r0, [r3, #20]
 800372e:	6198      	str	r0, [r3, #24]
 8003730:	61d8      	str	r0, [r3, #28]
 8003732:	6218      	str	r0, [r3, #32]
 8003734:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 8003736:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 8003738:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800373c:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 8003740:	443c      	add	r4, r7
 8003742:	42a2      	cmp	r2, r4
 8003744:	d90a      	bls.n	800375c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003746:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8003748:	2152      	movs	r1, #82	@ 0x52
 800374a:	4a0b      	ldr	r2, [pc, #44]	@ (8003778 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 800374c:	e003      	b.n	8003756 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 800374e:	4b0b      	ldr	r3, [pc, #44]	@ (800377c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8003750:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8003754:	4a0a      	ldr	r2, [pc, #40]	@ (8003780 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003756:	480b      	ldr	r0, [pc, #44]	@ (8003784 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003758:	f01d f826 	bl	80207a8 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 800375c:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 800375e:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003760:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8003764:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 8003768:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 800376a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 800376e:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003770:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003774:	08022d55 	.word	0x08022d55
 8003778:	08022d90 	.word	0x08022d90
 800377c:	08022b9e 	.word	0x08022b9e
 8003780:	08022bce 	.word	0x08022bce
 8003784:	080220e5 	.word	0x080220e5

08003788 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8003788:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 800378a:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800378c:	4e12      	ldr	r6, [pc, #72]	@ (80037d8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 800378e:	4604      	mov	r4, r0
 8003790:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003792:	4b12      	ldr	r3, [pc, #72]	@ (80037dc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003794:	6003      	str	r3, [r0, #0]
 8003796:	6833      	ldr	r3, [r6, #0]
 8003798:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800379c:	b10a      	cbz	r2, 80037a2 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 800379e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80037a0:	b900      	cbnz	r0, 80037a4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 80037a2:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80037a4:	6803      	ldr	r3, [r0, #0]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	4798      	blx	r3
 80037aa:	1e43      	subs	r3, r0, #1
 80037ac:	425d      	negs	r5, r3
 80037ae:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 80037b0:	6833      	ldr	r3, [r6, #0]
 80037b2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 80037b4:	b130      	cbz	r0, 80037c4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80037b6:	6803      	ldr	r3, [r0, #0]
 80037b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ba:	4798      	blx	r3
 80037bc:	2801      	cmp	r0, #1
 80037be:	bf08      	it	eq
 80037c0:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80037c4:	b92d      	cbnz	r5, 80037d2 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 80037c6:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 80037c8:	2127      	movs	r1, #39	@ 0x27
 80037ca:	4a06      	ldr	r2, [pc, #24]	@ (80037e4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 80037cc:	4806      	ldr	r0, [pc, #24]	@ (80037e8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 80037ce:	f01c ffeb 	bl	80207a8 <__assert_func>
    }
 80037d2:	4620      	mov	r0, r4
 80037d4:	bd70      	pop	{r4, r5, r6, pc}
 80037d6:	bf00      	nop
 80037d8:	24025120 	.word	0x24025120
 80037dc:	08023924 	.word	0x08023924
 80037e0:	08022f33 	.word	0x08022f33
 80037e4:	08022f91 	.word	0x08022f91
 80037e8:	08022fca 	.word	0x08022fca

080037ec <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 80037ec:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 80037ee:	4e25      	ldr	r6, [pc, #148]	@ (8003884 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 80037f0:	6835      	ldr	r5, [r6, #0]
 80037f2:	f3bf 8f5b 	dmb	ish
 80037f6:	f015 0501 	ands.w	r5, r5, #1
 80037fa:	d140      	bne.n	800387e <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x92>
 80037fc:	4630      	mov	r0, r6
 80037fe:	f01c fc5d 	bl	80200bc <__cxa_guard_acquire>
 8003802:	2800      	cmp	r0, #0
 8003804:	d03b      	beq.n	800387e <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x92>
class CWRVectorRenderer : public VectorRenderer
 8003806:	4c20      	ldr	r4, [pc, #128]	@ (8003888 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003808:	4b20      	ldr	r3, [pc, #128]	@ (800388c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
 800380a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800380e:	6125      	str	r5, [r4, #16]
 8003810:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003812:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003814:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003816:	e9c4 3500 	strd	r3, r5, [r4]
 800381a:	e9c4 5502 	strd	r5, r5, [r4, #8]
 800381e:	f010 f968 	bl	8013af2 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8003822:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003826:	f00c fb97 	bl	800ff58 <_ZN8touchgfx12CanvasWidgetC1Ev>
 800382a:	4b19      	ldr	r3, [pc, #100]	@ (8003890 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 800382c:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 800382e:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003830:	4b18      	ldr	r3, [pc, #96]	@ (8003894 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8003832:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003836:	f7ff ffa7 	bl	8003788 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 800383a:	4b17      	ldr	r3, [pc, #92]	@ (8003898 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 800383c:	4817      	ldr	r0, [pc, #92]	@ (800389c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 800383e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8003842:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003844:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8003848:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 800384c:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 8003850:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8003854:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8003858:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 800385c:	2300      	movs	r3, #0
 800385e:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8003862:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003866:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 800386a:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 800386e:	4b0c      	ldr	r3, [pc, #48]	@ (80038a0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb4>)
 8003870:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003874:	f01c ffb6 	bl	80207e4 <atexit>
 8003878:	4630      	mov	r0, r6
 800387a:	f01c fc2b 	bl	80200d4 <__cxa_guard_release>
}
 800387e:	4802      	ldr	r0, [pc, #8]	@ (8003888 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003880:	bd70      	pop	{r4, r5, r6, pc}
 8003882:	bf00      	nop
 8003884:	2400af18 	.word	0x2400af18
 8003888:	2400af1c 	.word	0x2400af1c
 800388c:	080241cc 	.word	0x080241cc
 8003890:	08023944 	.word	0x08023944
 8003894:	080239bc 	.word	0x080239bc
 8003898:	08024218 	.word	0x08024218
 800389c:	08003355 	.word	0x08003355
 80038a0:	08024250 	.word	0x08024250

080038a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 80038a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80038a8:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 80038aa:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80038ac:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 80038b0:	f04f 31ff 	mov.w	r1, #4294967295
 80038b4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80038b6:	f007 fca3 	bl	800b200 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 80038ba:	f04f 31ff 	mov.w	r1, #4294967295
 80038be:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80038c0:	f007 fc12 	bl	800b0e8 <osMutexAcquire>
                if (stream.doDecode)
 80038c4:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80038c8:	b343      	cbz	r3, 800391c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 80038ca:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 80038cc:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 80038d0:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 80038d2:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 80038d6:	f1b8 0f00 	cmp.w	r8, #0
 80038da:	d023      	beq.n	8003924 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	4641      	mov	r1, r8
 80038e0:	4628      	mov	r0, r5
 80038e2:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80038ee:	9700      	str	r7, [sp, #0]
 80038f0:	4628      	mov	r0, r5
 80038f2:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80038f6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80038fa:	68a1      	ldr	r1, [r4, #8]
 80038fc:	47c0      	blx	r8
                    stream.frameCount++;
 80038fe:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003900:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003904:	3301      	adds	r3, #1
 8003906:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003908:	b1f0      	cbz	r0, 8003948 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800390a:	682b      	ldr	r3, [r5, #0]
 800390c:	4628      	mov	r0, r5
 800390e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003910:	4798      	blx	r3
 8003912:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8003914:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003916:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003918:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 800391c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800391e:	f007 fc06 	bl	800b12e <osMutexRelease>
        while (1)
 8003922:	e7c5      	b.n	80038b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8003924:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003926:	2a00      	cmp	r2, #0
 8003928:	d0de      	beq.n	80038e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 800392a:	4628      	mov	r0, r5
 800392c:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003930:	4798      	blx	r3
 8003932:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003934:	4401      	add	r1, r0
 8003936:	4628      	mov	r0, r5
 8003938:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 800393a:	6923      	ldr	r3, [r4, #16]
 800393c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 800393e:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 8003942:	4413      	add	r3, r2
 8003944:	6123      	str	r3, [r4, #16]
 8003946:	e7cf      	b.n	80038e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 8003948:	2001      	movs	r0, #1
 800394a:	e7e3      	b.n	8003914 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

0800394c <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 800394c:	4801      	ldr	r0, [pc, #4]	@ (8003954 <videoTaskFunc+0x8>)
{
 800394e:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8003950:	f7ff ffa8 	bl	80038a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8003954:	2400afd8 	.word	0x2400afd8

08003958 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8003958:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 800395a:	4814      	ldr	r0, [pc, #80]	@ (80039ac <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 800395c:	2500      	movs	r5, #0
 800395e:	f7fe fbfb 	bl	8002158 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003962:	4c13      	ldr	r4, [pc, #76]	@ (80039b0 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8003964:	4b13      	ldr	r3, [pc, #76]	@ (80039b4 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003966:	462a      	mov	r2, r5
 8003968:	4629      	mov	r1, r5
 800396a:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 800396c:	6023      	str	r3, [r4, #0]
 800396e:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003972:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003974:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003976:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003978:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 800397c:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003980:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003984:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003988:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 800398c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003990:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003994:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003998:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 800399c:	f007 fbe6 	bl	800b16c <osSemaphoreNew>
 80039a0:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 80039a2:	4628      	mov	r0, r5
 80039a4:	f007 fb68 	bl	800b078 <osMutexNew>
 80039a8:	6460      	str	r0, [r4, #68]	@ 0x44
}
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	2400b020 	.word	0x2400b020
 80039b0:	2400afd8 	.word	0x2400afd8
 80039b4:	08023a08 	.word	0x08023a08

080039b8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80039b8:	4770      	bx	lr

080039ba <_ZN23ApplicationFontProviderD0Ev>:
 80039ba:	b510      	push	{r4, lr}
 80039bc:	4604      	mov	r4, r0
 80039be:	2104      	movs	r1, #4
 80039c0:	f01c fb7a 	bl	80200b8 <_ZdlPvj>
 80039c4:	4620      	mov	r0, r4
 80039c6:	bd10      	pop	{r4, pc}

080039c8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 80039c8:	2901      	cmp	r1, #1
{
 80039ca:	b508      	push	{r3, lr}
    switch (typography)
 80039cc:	d006      	beq.n	80039dc <_ZN23ApplicationFontProvider7getFontEt+0x14>
 80039ce:	2902      	cmp	r1, #2
 80039d0:	d008      	beq.n	80039e4 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 80039d2:	b959      	cbnz	r1, 80039ec <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80039d4:	f000 fc56 	bl	8004284 <_ZN17TypedTextDatabase8getFontsEv>
 80039d8:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 80039da:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80039dc:	f000 fc52 	bl	8004284 <_ZN17TypedTextDatabase8getFontsEv>
 80039e0:	6840      	ldr	r0, [r0, #4]
 80039e2:	e7fa      	b.n	80039da <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80039e4:	f000 fc4e 	bl	8004284 <_ZN17TypedTextDatabase8getFontsEv>
 80039e8:	6880      	ldr	r0, [r0, #8]
 80039ea:	e7f6      	b.n	80039da <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 80039ec:	2000      	movs	r0, #0
 80039ee:	e7f4      	b.n	80039da <_ZN23ApplicationFontProvider7getFontEt+0x12>

080039f0 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80039f0:	4800      	ldr	r0, [pc, #0]	@ (80039f4 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80039f2:	4770      	bx	lr
 80039f4:	08023a58 	.word	0x08023a58

080039f8 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80039f8:	2003      	movs	r0, #3
 80039fa:	4770      	bx	lr

080039fc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80039fc:	b513      	push	{r0, r1, r4, lr}
 80039fe:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003a00:	b151      	cbz	r1, 8003a18 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003a02:	6803      	ldr	r3, [r0, #0]
 8003a04:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003a06:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003a08:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003a0c:	689c      	ldr	r4, [r3, #8]
 8003a0e:	f10d 0303 	add.w	r3, sp, #3
 8003a12:	47a0      	blx	r4
        return glyph;
    }
 8003a14:	b002      	add	sp, #8
 8003a16:	bd10      	pop	{r4, pc}
            return 0;
 8003a18:	4608      	mov	r0, r1
 8003a1a:	e7fb      	b.n	8003a14 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003a1c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003a1c:	89c0      	ldrh	r0, [r0, #14]
 8003a1e:	4770      	bx	lr

08003a20 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003a20:	8a00      	ldrh	r0, [r0, #16]
 8003a22:	4770      	bx	lr

08003a24 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003a24:	88c0      	ldrh	r0, [r0, #6]
 8003a26:	4770      	bx	lr

08003a28 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003a28:	8880      	ldrh	r0, [r0, #4]
 8003a2a:	4770      	bx	lr

08003a2c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003a2c:	7a80      	ldrb	r0, [r0, #10]
    }
 8003a2e:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003a32:	4770      	bx	lr

08003a34 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003a34:	7a80      	ldrb	r0, [r0, #10]
    }
 8003a36:	09c0      	lsrs	r0, r0, #7
 8003a38:	4770      	bx	lr

08003a3a <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	4770      	bx	lr
	...

08003a40 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003a40:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003a48 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	00000000 	.word	0x00000000

08003a4c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003a4c:	4770      	bx	lr

08003a4e <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003a4e:	4770      	bx	lr

08003a50 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003a50:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003a54:	6808      	ldr	r0, [r1, #0]
 8003a56:	6849      	ldr	r1, [r1, #4]
 8003a58:	c303      	stmia	r3!, {r0, r1}
    }
 8003a5a:	4770      	bx	lr

08003a5c <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003a5c:	4770      	bx	lr

08003a5e <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003a5e:	4770      	bx	lr

08003a60 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003a60:	6041      	str	r1, [r0, #4]
    }
 8003a62:	4770      	bx	lr

08003a64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003a64:	4770      	bx	lr

08003a66 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003a66:	4770      	bx	lr

08003a68 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 8003a68:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003a6a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003a6e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003a72:	2300      	movs	r3, #0
 8003a74:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003a78:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003a7c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	08003b29 	.word	0x08003b29

08003a88 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	7203      	strb	r3, [r0, #8]
    }
 8003a8c:	4770      	bx	lr

08003a8e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003a8e:	4770      	bx	lr

08003a90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003a90:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003a92:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003a94:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003a96:	68c2      	ldr	r2, [r0, #12]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	1054      	asrs	r4, r2, #1
 8003a9c:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003aa0:	07d2      	lsls	r2, r2, #31
 8003aa2:	bf48      	it	mi
 8003aa4:	590a      	ldrmi	r2, [r1, r4]
    }
 8003aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003aaa:	bf48      	it	mi
 8003aac:	58d3      	ldrmi	r3, [r2, r3]
 8003aae:	4718      	bx	r3

08003ab0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003ab0:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003ab2:	6840      	ldr	r0, [r0, #4]
 8003ab4:	b130      	cbz	r0, 8003ac4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	b91a      	cbnz	r2, 8003ac2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003aba:	68d8      	ldr	r0, [r3, #12]
 8003abc:	f000 0001 	and.w	r0, r0, #1
 8003ac0:	4770      	bx	lr
 8003ac2:	2001      	movs	r0, #1
    }
 8003ac4:	4770      	bx	lr

08003ac6 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003ac6:	b510      	push	{r4, lr}
 8003ac8:	4604      	mov	r4, r0
 8003aca:	210c      	movs	r1, #12
 8003acc:	f01c faf4 	bl	80200b8 <_ZdlPvj>
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	bd10      	pop	{r4, pc}

08003ad4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003ad4:	b510      	push	{r4, lr}
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	2110      	movs	r1, #16
 8003ada:	f01c faed 	bl	80200b8 <_ZdlPvj>
 8003ade:	4620      	mov	r0, r4
 8003ae0:	bd10      	pop	{r4, pc}

08003ae2 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003ae2:	b510      	push	{r4, lr}
 8003ae4:	4604      	mov	r4, r0
 8003ae6:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003aea:	f01c fae5 	bl	80200b8 <_ZdlPvj>
 8003aee:	4620      	mov	r0, r4
 8003af0:	bd10      	pop	{r4, pc}

08003af2 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003af2:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003af4:	f00e faaa 	bl	801204c <_ZN8touchgfx11Application11getInstanceEv>
 8003af8:	6803      	ldr	r3, [r0, #0]
    }
 8003afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b00:	4718      	bx	r3

08003b02 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003b02:	b510      	push	{r4, lr}
 8003b04:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003b06:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003b0a:	b158      	cbz	r0, 8003b24 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003b0c:	6803      	ldr	r3, [r0, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4798      	blx	r3
 8003b12:	b138      	cbz	r0, 8003b24 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003b14:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003b18:	6803      	ldr	r3, [r0, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003b24:	bd10      	pop	{r4, pc}
	...

08003b28 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003b28:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003b2c:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003b30:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003b32:	68b0      	ldr	r0, [r6, #8]
 8003b34:	6803      	ldr	r3, [r0, #0]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	4798      	blx	r3
 8003b3a:	28df      	cmp	r0, #223	@ 0xdf
 8003b3c:	d805      	bhi.n	8003b4a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x22>
 8003b3e:	4b44      	ldr	r3, [pc, #272]	@ (8003c50 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x128>)
 8003b40:	21a3      	movs	r1, #163	@ 0xa3
 8003b42:	4a44      	ldr	r2, [pc, #272]	@ (8003c54 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003b44:	4844      	ldr	r0, [pc, #272]	@ (8003c58 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003b46:	f01c fe2f 	bl	80207a8 <__assert_func>
 8003b4a:	6870      	ldr	r0, [r6, #4]
 8003b4c:	6803      	ldr	r3, [r0, #0]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	4798      	blx	r3
 8003b52:	280f      	cmp	r0, #15
 8003b54:	d803      	bhi.n	8003b5e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x36>
 8003b56:	4b41      	ldr	r3, [pc, #260]	@ (8003c5c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003b58:	21a4      	movs	r1, #164	@ 0xa4
 8003b5a:	4a3e      	ldr	r2, [pc, #248]	@ (8003c54 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003b5c:	e7f2      	b.n	8003b44 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003b5e:	68f0      	ldr	r0, [r6, #12]
 8003b60:	6803      	ldr	r3, [r0, #0]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	4798      	blx	r3
 8003b66:	280b      	cmp	r0, #11
 8003b68:	d803      	bhi.n	8003b72 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4a>
 8003b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c60 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003b6c:	21a5      	movs	r1, #165	@ 0xa5
 8003b6e:	4a39      	ldr	r2, [pc, #228]	@ (8003c54 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003b70:	e7e8      	b.n	8003b44 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    if (*currentTrans)
 8003b72:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8003c68 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>
    Application::getInstance()->clearAllTimerWidgets();
 8003b76:	f00e fa69 	bl	801204c <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003b7a:	3004      	adds	r0, #4
 8003b7c:	f00e fa8b 	bl	8012096 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003b80:	f8d9 0000 	ldr.w	r0, [r9]
 8003b84:	b110      	cbz	r0, 8003b8c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 8003b86:	6803      	ldr	r3, [r0, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	4798      	blx	r3
    if (*currentTrans)
 8003b8c:	f8d9 0000 	ldr.w	r0, [r9]
 8003b90:	b110      	cbz	r0, 8003b98 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 8003b92:	6803      	ldr	r3, [r0, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4798      	blx	r3
    if (*currentScreen)
 8003b98:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8003c6c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
 8003b9c:	f8d8 0000 	ldr.w	r0, [r8]
 8003ba0:	b110      	cbz	r0, 8003ba8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 8003ba2:	6803      	ldr	r3, [r0, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	4798      	blx	r3
    if (*currentPresenter)
 8003ba8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003bac:	b110      	cbz	r0, 8003bb4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 8003bae:	6803      	ldr	r3, [r0, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4798      	blx	r3
    if (*currentScreen)
 8003bb4:	f8d8 0000 	ldr.w	r0, [r8]
 8003bb8:	b110      	cbz	r0, 8003bc0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 8003bba:	6803      	ldr	r3, [r0, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4798      	blx	r3
    if (*currentPresenter)
 8003bc0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003bc4:	b110      	cbz	r0, 8003bcc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 8003bc6:	6803      	ldr	r3, [r0, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003bcc:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003bce:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003bd0:	f04f 0b00 	mov.w	fp, #0
 8003bd4:	6803      	ldr	r3, [r0, #0]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	4798      	blx	r3
 8003bda:	4b22      	ldr	r3, [pc, #136]	@ (8003c64 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003bdc:	4604      	mov	r4, r0
 8003bde:	f8c0 b004 	str.w	fp, [r0, #4]
 8003be2:	f880 b008 	strb.w	fp, [r0, #8]
 8003be6:	4659      	mov	r1, fp
 8003be8:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003bea:	68b0      	ldr	r0, [r6, #8]
 8003bec:	6803      	ldr	r3, [r0, #0]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	4798      	blx	r3
 8003bf2:	4605      	mov	r5, r0
 8003bf4:	f000 fbe8 	bl	80043c8 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003bf8:	6870      	ldr	r0, [r6, #4]
 8003bfa:	4659      	mov	r1, fp
 8003bfc:	6803      	ldr	r3, [r0, #0]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	4798      	blx	r3
 8003c02:	4606      	mov	r6, r0
 8003c04:	4629      	mov	r1, r5
 8003c06:	f000 fb87 	bl	8004318 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003c0a:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003c0c:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003c10:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003c12:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003c16:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003c1a:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003c1e:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003c20:	f8c6 a008 	str.w	sl, [r6, #8]
 8003c24:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003c26:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003c28:	4798      	blx	r3
    newPresenter->activate();
 8003c2a:	6833      	ldr	r3, [r6, #0]
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003c32:	4621      	mov	r1, r4
 8003c34:	4628      	mov	r0, r5
 8003c36:	f010 fbbf 	bl	80143b8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	4798      	blx	r3
    newTransition->invalidate();
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	4620      	mov	r0, r4
 8003c46:	695b      	ldr	r3, [r3, #20]
}
 8003c48:	b001      	add	sp, #4
 8003c4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4e:	4718      	bx	r3
 8003c50:	0802303a 	.word	0x0802303a
 8003c54:	080230c8 	.word	0x080230c8
 8003c58:	0802319a 	.word	0x0802319a
 8003c5c:	080231ef 	.word	0x080231ef
 8003c60:	08023292 	.word	0x08023292
 8003c64:	08023b08 	.word	0x08023b08
 8003c68:	24025168 	.word	0x24025168
 8003c6c:	24025164 	.word	0x24025164

08003c70 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003c70:	4b04      	ldr	r3, [pc, #16]	@ (8003c84 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003c78:	b10a      	cbz	r2, 8003c7e <_ZN8touchgfx3HAL3lcdEv+0xe>
 8003c7a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003c7c:	b900      	cbnz	r0, 8003c80 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8003c7e:	6898      	ldr	r0, [r3, #8]
    }
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	24025120 	.word	0x24025120

08003c88 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	4616      	mov	r6, r2
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
 8003c90:	f00e faa2 	bl	80121d8 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003c94:	4b10      	ldr	r3, [pc, #64]	@ (8003cd8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 8003c96:	2100      	movs	r1, #0
        instance = this;
 8003c98:	601c      	str	r4, [r3, #0]
      model(m)
 8003c9a:	4b10      	ldr	r3, [pc, #64]	@ (8003cdc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8003c9c:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8003c9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ce0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8003ca0:	e9c4 3151 	strd	r3, r1, [r4, #324]	@ 0x144
        return instance;
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	e9c4 1153 	strd	r1, r1, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003cac:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8003cae:	e9c4 114f 	strd	r1, r1, [r4, #316]	@ 0x13c
 8003cb2:	689b      	ldr	r3, [r3, #8]
      model(m)
 8003cb4:	e9c4 6555 	strd	r6, r5, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003cb8:	4798      	blx	r3
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003cba:	f7ff ffd9 	bl	8003c70 <_ZN8touchgfx3HAL3lcdEv>
 8003cbe:	f016 fb70 	bl	801a3a2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8003cc2:	f7ff ffd5 	bl	8003c70 <_ZN8touchgfx3HAL3lcdEv>
 8003cc6:	f016 fbe3 	bl	801a490 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 8003cca:	f7ff ffd1 	bl	8003c70 <_ZN8touchgfx3HAL3lcdEv>
 8003cce:	f016 fbeb 	bl	801a4a8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	bd70      	pop	{r4, r5, r6, pc}
 8003cd6:	bf00      	nop
 8003cd8:	24025174 	.word	0x24025174
 8003cdc:	08023ab4 	.word	0x08023ab4
 8003ce0:	08023a9c 	.word	0x08023a9c
 8003ce4:	24025120 	.word	0x24025120

08003ce8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003ce8:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8003cea:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003cee:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003cf8:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003cfc:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	08003b29 	.word	0x08003b29

08003d08 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003d08:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003d0a:	4770      	bx	lr

08003d0c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003d0c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003d0e:	4770      	bx	lr

08003d10 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003d10:	4770      	bx	lr

08003d12 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
    uint32_t offset = dataOffset[0];
 8003d12:	880b      	ldrh	r3, [r1, #0]
    offset |= dataOffset[1] << 16;

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8003d14:	888a      	ldrh	r2, [r1, #4]
    uint32_t offset = dataOffset[0];
 8003d16:	b29b      	uxth	r3, r3
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8003d18:	0ad2      	lsrs	r2, r2, #11
{
 8003d1a:	b510      	push	{r4, lr}
    offset |= dataOffset[1] << 16;
 8003d1c:	884c      	ldrh	r4, [r1, #2]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8003d1e:	69c1      	ldr	r1, [r0, #28]
    offset |= dataOffset[1] << 16;
 8003d20:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    return pixels + offset;
 8003d24:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
}
 8003d28:	4418      	add	r0, r3
 8003d2a:	bd10      	pop	{r4, pc}

08003d2c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8003d2c:	b510      	push	{r4, lr}
 8003d2e:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8003d30:	b1ba      	cbz	r2, 8003d62 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003d32:	7b10      	ldrb	r0, [r2, #12]
 8003d34:	b168      	cbz	r0, 8003d52 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003d36:	7b53      	ldrb	r3, [r2, #13]
 8003d38:	7ad2      	ldrb	r2, [r2, #11]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003d40:	431a      	orrs	r2, r3
 8003d42:	6a23      	ldr	r3, [r4, #32]
 8003d44:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003d48:	881a      	ldrh	r2, [r3, #0]
 8003d4a:	428a      	cmp	r2, r1
 8003d4c:	d102      	bne.n	8003d54 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003d4e:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8003d52:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003d54:	d805      	bhi.n	8003d62 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003d56:	3801      	subs	r0, #1
 8003d58:	3304      	adds	r3, #4
 8003d5a:	b280      	uxth	r0, r0
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	d1f3      	bne.n	8003d48 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003d60:	e7f7      	b.n	8003d52 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003d62:	2000      	movs	r0, #0
 8003d64:	e7f5      	b.n	8003d52 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003d66 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003d66:	b510      	push	{r4, lr}
 8003d68:	4604      	mov	r4, r0
 8003d6a:	212c      	movs	r1, #44	@ 0x2c
 8003d6c:	f01c f9a4 	bl	80200b8 <_ZdlPvj>
 8003d70:	4620      	mov	r0, r4
 8003d72:	bd10      	pop	{r4, pc}

08003d74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003d74:	b530      	push	{r4, r5, lr}
 8003d76:	b08b      	sub	sp, #44	@ 0x2c
 8003d78:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003d7a:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8003d7e:	9508      	str	r5, [sp, #32]
 8003d80:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8003d84:	9507      	str	r5, [sp, #28]
 8003d86:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8003d8a:	9506      	str	r5, [sp, #24]
 8003d8c:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8003d90:	9505      	str	r5, [sp, #20]
 8003d92:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8003d96:	9504      	str	r5, [sp, #16]
 8003d98:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8003d9c:	9503      	str	r5, [sp, #12]
 8003d9e:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8003da2:	9502      	str	r5, [sp, #8]
 8003da4:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8003da8:	9501      	str	r5, [sp, #4]
 8003daa:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8003dae:	9500      	str	r5, [sp, #0]
 8003db0:	f00f ff5c 	bl	8013c6c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003db4:	4b06      	ldr	r3, [pc, #24]	@ (8003dd0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8003db6:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003db8:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8003dba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003dbc:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8003dbe:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003dc0:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8003dc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003dc4:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8003dc6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003dc8:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8003dca:	b00b      	add	sp, #44	@ 0x2c
 8003dcc:	bd30      	pop	{r4, r5, pc}
 8003dce:	bf00      	nop
 8003dd0:	08023b2c 	.word	0x08023b2c

08003dd4 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003dd4:	4770      	bx	lr

08003dd6 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003dd6:	4770      	bx	lr

08003dd8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003dd8:	4770      	bx	lr

08003dda <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003dda:	4770      	bx	lr

08003ddc <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003ddc:	4770      	bx	lr

08003dde <_ZN15Screen1ViewBase6ToggleEv>:
     * Virtual Action Handlers
     */
    virtual void Toggle()
    {
        // Override and implement this function in Screen1
    }
 8003dde:	4770      	bx	lr

08003de0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003de0:	4770      	bx	lr

08003de2 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8003de2:	4770      	bx	lr

08003de4 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8003de4:	4770      	bx	lr

08003de6 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003de6:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003de8:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003dea:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8003dec:	68c2      	ldr	r2, [r0, #12]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	1055      	asrs	r5, r2, #1
 8003df2:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003df6:	07d2      	lsls	r2, r2, #31
 8003df8:	bf48      	it	mi
 8003dfa:	5962      	ldrmi	r2, [r4, r5]
    }
 8003dfc:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003dfe:	bf48      	it	mi
 8003e00:	58d3      	ldrmi	r3, [r2, r3]
 8003e02:	4718      	bx	r3

08003e04 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8003e04:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8003e06:	6840      	ldr	r0, [r0, #4]
 8003e08:	b130      	cbz	r0, 8003e18 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	b91a      	cbnz	r2, 8003e16 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8003e0e:	68d8      	ldr	r0, [r3, #12]
 8003e10:	f000 0001 	and.w	r0, r0, #1
 8003e14:	4770      	bx	lr
 8003e16:	2001      	movs	r0, #1
    }
 8003e18:	4770      	bx	lr

08003e1a <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003e1a:	b510      	push	{r4, lr}
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	2110      	movs	r1, #16
 8003e20:	f01c f94a 	bl	80200b8 <_ZdlPvj>
 8003e24:	4620      	mov	r0, r4
 8003e26:	bd10      	pop	{r4, pc}

08003e28 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8003e28:	b510      	push	{r4, lr}
 8003e2a:	4604      	mov	r4, r0
}
 8003e2c:	21e0      	movs	r1, #224	@ 0xe0
 8003e2e:	f01c f943 	bl	80200b8 <_ZdlPvj>
 8003e32:	4620      	mov	r0, r4
 8003e34:	bd10      	pop	{r4, pc}

08003e36 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &toggleButton1)
 8003e36:	f100 0298 	add.w	r2, r0, #152	@ 0x98
 8003e3a:	428a      	cmp	r2, r1
 8003e3c:	d102      	bne.n	8003e44 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    {
        //Interaction1
        //When toggleButton1 clicked call virtual function
        //Call Toggle
        Toggle();
 8003e3e:	6803      	ldr	r3, [r0, #0]
 8003e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e42:	4718      	bx	r3
    }
}
 8003e44:	4770      	bx	lr

08003e46 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003e46:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	4604      	mov	r4, r0
        setX(x);
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8003e4e:	4615      	mov	r5, r2
        setX(x);
 8003e50:	4798      	blx	r3
        setY(y);
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	4620      	mov	r0, r4
 8003e56:	4629      	mov	r1, r5
 8003e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8003e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003e5e:	4718      	bx	r3

08003e60 <_ZN8touchgfx6WidgetC1Ev>:
 8003e60:	2200      	movs	r2, #0
 8003e62:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003e66:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8003e6a:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8003e6e:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8003e72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e76:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8003e78:	4a01      	ldr	r2, [pc, #4]	@ (8003e80 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8003e7a:	6002      	str	r2, [r0, #0]
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	08023b94 	.word	0x08023b94

08003e84 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8003e84:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e88:	4604      	mov	r4, r0
        : presenter(0)
 8003e8a:	2500      	movs	r5, #0
 8003e8c:	f010 f8e8 	bl	8014060 <_ZN8touchgfx6ScreenC1Ev>
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003e90:	f04f 0a26 	mov.w	sl, #38	@ 0x26
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8003e94:	4626      	mov	r6, r4
 8003e96:	4b4a      	ldr	r3, [pc, #296]	@ (8003fc0 <_ZN15Screen1ViewBaseC1Ev+0x13c>)
 8003e98:	4652      	mov	r2, sl
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8003e9e:	f104 076c 	add.w	r7, r4, #108	@ 0x6c
 8003ea2:	f846 3b40 	str.w	r3, [r6], #64
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	f01c ff1a 	bl	8020ce0 <memset>
 8003eac:	4630      	mov	r0, r6
 8003eae:	f7ff ffd7 	bl	8003e60 <_ZN8touchgfx6WidgetC1Ev>
 8003eb2:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 8003eb6:	4b43      	ldr	r3, [pc, #268]	@ (8003fc4 <_ZN15Screen1ViewBaseC1Ev+0x140>)
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003eb8:	f64f 79ff 	movw	r9, #65535	@ 0xffff
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 8003ebc:	4652      	mov	r2, sl
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	6423      	str	r3, [r4, #64]	@ 0x40
 8003ec2:	4638      	mov	r0, r7
 8003ec4:	f884 8066 	strb.w	r8, [r4, #102]	@ 0x66
        : color(col)
 8003ec8:	66a5      	str	r5, [r4, #104]	@ 0x68
 8003eca:	f8ad 9004 	strh.w	r9, [sp, #4]
 8003ece:	f01c ff07 	bl	8020ce0 <memset>
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	f7ff ffc4 	bl	8003e60 <_ZN8touchgfx6WidgetC1Ev>
 8003ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8003fc8 <_ZN15Screen1ViewBaseC1Ev+0x144>)
 8003eda:	f884 8094 	strb.w	r8, [r4, #148]	@ 0x94
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8003ede:	f104 0898 	add.w	r8, r4, #152	@ 0x98
 8003ee2:	66e3      	str	r3, [r4, #108]	@ 0x6c
    {
        Image::setBitmap(bmp);
 8003ee4:	a901      	add	r1, sp, #4
        : Widget(), bitmap(bmp), alpha(255)
 8003ee6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        Image::setBitmap(bmp);
 8003eea:	4638      	mov	r0, r7
        : Widget(), bitmap(bmp), alpha(255)
 8003eec:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
        Image::setBitmap(bmp);
 8003ef0:	f00c f96d 	bl	80101ce <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003ef4:	4652      	mov	r2, sl
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	4640      	mov	r0, r8
 8003efa:	f01c fef1 	bl	8020ce0 <memset>
 8003efe:	4640      	mov	r0, r8
 8003f00:	f7ff ffae 	bl	8003e60 <_ZN8touchgfx6WidgetC1Ev>
 * A ToggleButton is a Button specialization that swaps the two bitmaps when clicked, such that
 * the previous "pressed" bitmap, now becomes the one displayed when button is not
 * pressed. This can by used to give the effect of a button that can be pressed in and
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
 8003f04:	4b31      	ldr	r3, [pc, #196]	@ (8003fcc <_ZN15Screen1ViewBaseC1Ev+0x148>)
        touchable = touch;
 8003f06:	f04f 0a01 	mov.w	sl, #1
        setXY(x, y);
 8003f0a:	462a      	mov	r2, r5
 8003f0c:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003f10:	4629      	mov	r1, r5
        : pobject(pObject), pmemfun(pmemfun_1)
 8003f12:	4b2f      	ldr	r3, [pc, #188]	@ (8003fd0 <_ZN15Screen1ViewBaseC1Ev+0x14c>)
 8003f14:	4630      	mov	r0, r6
 8003f16:	f8a4 90c6 	strh.w	r9, [r4, #198]	@ 0xc6
 8003f1a:	f8a4 90c8 	strh.w	r9, [r4, #200]	@ 0xc8
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8003f1e:	f884 90ca 	strb.w	r9, [r4, #202]	@ 0xca
 8003f22:	f8a4 90cc 	strh.w	r9, [r4, #204]	@ 0xcc
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003f26:	f104 0904 	add.w	r9, r4, #4
 8003f2a:	f8c4 50c0 	str.w	r5, [r4, #192]	@ 0xc0
 8003f2e:	f884 50c4 	strb.w	r5, [r4, #196]	@ 0xc4
        touchable = touch;
 8003f32:	f884 a0bc 	strb.w	sl, [r4, #188]	@ 0xbc
 8003f36:	e9c4 3434 	strd	r3, r4, [r4, #208]	@ 0xd0
 8003f3a:	4b26      	ldr	r3, [pc, #152]	@ (8003fd4 <_ZN15Screen1ViewBaseC1Ev+0x150>)
 8003f3c:	e9c4 3536 	strd	r3, r5, [r4, #216]	@ 0xd8
        setXY(x, y);
 8003f40:	f7ff ff81 	bl	8003e46 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003f44:	4630      	mov	r0, r6
 8003f46:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8003f4a:	f7ff f9b1 	bl	80032b0 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8003f4e:	4630      	mov	r0, r6
 8003f50:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8003f54:	f7ff f9ae 	bl	80032b4 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003f58:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003f5c:	4631      	mov	r1, r6
 8003f5e:	4648      	mov	r0, r9
 8003f60:	66a3      	str	r3, [r4, #104]	@ 0x68
 8003f62:	f009 f9f7 	bl	800d354 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8003f66:	462a      	mov	r2, r5
 8003f68:	4629      	mov	r1, r5
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	f7ff ff6b 	bl	8003e46 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_1024X600_POLY_ID));
 8003f70:	a901      	add	r1, sp, #4
 8003f72:	4638      	mov	r0, r7
 8003f74:	f8ad 5004 	strh.w	r5, [sp, #4]
 8003f78:	f00c f929 	bl	80101ce <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003f7c:	4639      	mov	r1, r7
 8003f7e:	4648      	mov	r0, r9
 8003f80:	f009 f9e8 	bl	800d354 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    toggleButton1.setXY(345, 206);
 8003f84:	4640      	mov	r0, r8
 8003f86:	22ce      	movs	r2, #206	@ 0xce
 8003f88:	f240 1159 	movw	r1, #345	@ 0x159
 8003f8c:	f7ff ff5b 	bl	8003e46 <_ZN8touchgfx8Drawable5setXYEss>
 8003f90:	2302      	movs	r3, #2
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
    {
        originalPressed = bitmapPressed;
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8003f92:	aa01      	add	r2, sp, #4
 8003f94:	4669      	mov	r1, sp
 8003f96:	4640      	mov	r0, r8
        originalPressed = bitmapPressed;
 8003f98:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
 8003f9c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003fa0:	f8ad a000 	strh.w	sl, [sp]
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8003fa4:	f00c f868 	bl	8010078 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    toggleButton1.setAction(buttonCallback);
 8003fa8:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
 8003fac:	4648      	mov	r0, r9
 8003fae:	4641      	mov	r1, r8
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8003fb0:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 8003fb4:	f009 f9ce 	bl	800d354 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003fb8:	4620      	mov	r0, r4
 8003fba:	b002      	add	sp, #8
 8003fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc0:	08023c14 	.word	0x08023c14
 8003fc4:	0802435c 	.word	0x0802435c
 8003fc8:	080243c4 	.word	0x080243c4
 8003fcc:	080242e8 	.word	0x080242e8
 8003fd0:	08023bfc 	.word	0x08023bfc
 8003fd4:	08003e37 	.word	0x08003e37

08003fd8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003fd8:	4770      	bx	lr
	...

08003fdc <_Z23getFont_verdana_10_4bppv>:
{
 8003fdc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003fde:	4d16      	ldr	r5, [pc, #88]	@ (8004038 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8003fe0:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003fe2:	682c      	ldr	r4, [r5, #0]
 8003fe4:	f3bf 8f5b 	dmb	ish
 8003fe8:	f014 0401 	ands.w	r4, r4, #1
 8003fec:	d120      	bne.n	8004030 <_Z23getFont_verdana_10_4bppv+0x54>
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f01c f864 	bl	80200bc <__cxa_guard_acquire>
 8003ff4:	b1e0      	cbz	r0, 8004030 <_Z23getFont_verdana_10_4bppv+0x54>
 8003ff6:	233f      	movs	r3, #63	@ 0x3f
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	4910      	ldr	r1, [pc, #64]	@ (800403c <_Z23getFont_verdana_10_4bppv+0x60>)
 8003ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ffe:	4b10      	ldr	r3, [pc, #64]	@ (8004040 <_Z23getFont_verdana_10_4bppv+0x64>)
 8004000:	4810      	ldr	r0, [pc, #64]	@ (8004044 <_Z23getFont_verdana_10_4bppv+0x68>)
 8004002:	9308      	str	r3, [sp, #32]
 8004004:	4b10      	ldr	r3, [pc, #64]	@ (8004048 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8004006:	940a      	str	r4, [sp, #40]	@ 0x28
 8004008:	9405      	str	r4, [sp, #20]
 800400a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800400e:	2304      	movs	r3, #4
 8004010:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004014:	230a      	movs	r3, #10
 8004016:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004020:	f7ff fea8 	bl	8003d74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004024:	4809      	ldr	r0, [pc, #36]	@ (800404c <_Z23getFont_verdana_10_4bppv+0x70>)
 8004026:	f01c fbdd 	bl	80207e4 <atexit>
 800402a:	4628      	mov	r0, r5
 800402c:	f01c f852 	bl	80200d4 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8004030:	4804      	ldr	r0, [pc, #16]	@ (8004044 <_Z23getFont_verdana_10_4bppv+0x68>)
 8004032:	b00f      	add	sp, #60	@ 0x3c
 8004034:	bd30      	pop	{r4, r5, pc}
 8004036:	bf00      	nop
 8004038:	2400b068 	.word	0x2400b068
 800403c:	08024acc 	.word	0x08024acc
 8004040:	08024afc 	.word	0x08024afc
 8004044:	2400b06c 	.word	0x2400b06c
 8004048:	08024b08 	.word	0x08024b08
 800404c:	08003fd9 	.word	0x08003fd9

08004050 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004050:	4770      	bx	lr
	...

08004054 <_Z23getFont_verdana_20_4bppv>:
{
 8004054:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004056:	4d16      	ldr	r5, [pc, #88]	@ (80040b0 <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 8004058:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800405a:	682c      	ldr	r4, [r5, #0]
 800405c:	f3bf 8f5b 	dmb	ish
 8004060:	f014 0401 	ands.w	r4, r4, #1
 8004064:	d120      	bne.n	80040a8 <_Z23getFont_verdana_20_4bppv+0x54>
 8004066:	4628      	mov	r0, r5
 8004068:	f01c f828 	bl	80200bc <__cxa_guard_acquire>
 800406c:	b1e0      	cbz	r0, 80040a8 <_Z23getFont_verdana_20_4bppv+0x54>
 800406e:	233f      	movs	r3, #63	@ 0x3f
 8004070:	2201      	movs	r2, #1
 8004072:	4910      	ldr	r1, [pc, #64]	@ (80040b4 <_Z23getFont_verdana_20_4bppv+0x60>)
 8004074:	9309      	str	r3, [sp, #36]	@ 0x24
 8004076:	4b10      	ldr	r3, [pc, #64]	@ (80040b8 <_Z23getFont_verdana_20_4bppv+0x64>)
 8004078:	4810      	ldr	r0, [pc, #64]	@ (80040bc <_Z23getFont_verdana_20_4bppv+0x68>)
 800407a:	9308      	str	r3, [sp, #32]
 800407c:	4b10      	ldr	r3, [pc, #64]	@ (80040c0 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800407e:	940a      	str	r4, [sp, #40]	@ 0x28
 8004080:	9405      	str	r4, [sp, #20]
 8004082:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004086:	2304      	movs	r3, #4
 8004088:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800408c:	2314      	movs	r3, #20
 800408e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004098:	f7ff fe6c 	bl	8003d74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800409c:	4809      	ldr	r0, [pc, #36]	@ (80040c4 <_Z23getFont_verdana_20_4bppv+0x70>)
 800409e:	f01c fba1 	bl	80207e4 <atexit>
 80040a2:	4628      	mov	r0, r5
 80040a4:	f01c f816 	bl	80200d4 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 80040a8:	4804      	ldr	r0, [pc, #16]	@ (80040bc <_Z23getFont_verdana_20_4bppv+0x68>)
 80040aa:	b00f      	add	sp, #60	@ 0x3c
 80040ac:	bd30      	pop	{r4, r5, pc}
 80040ae:	bf00      	nop
 80040b0:	2400b098 	.word	0x2400b098
 80040b4:	08024adc 	.word	0x08024adc
 80040b8:	08024b00 	.word	0x08024b00
 80040bc:	2400b09c 	.word	0x2400b09c
 80040c0:	08024b0c 	.word	0x08024b0c
 80040c4:	08004051 	.word	0x08004051

080040c8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80040c8:	4770      	bx	lr
	...

080040cc <_Z23getFont_verdana_40_4bppv>:
{
 80040cc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80040ce:	4d16      	ldr	r5, [pc, #88]	@ (8004128 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 80040d0:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80040d2:	682c      	ldr	r4, [r5, #0]
 80040d4:	f3bf 8f5b 	dmb	ish
 80040d8:	f014 0401 	ands.w	r4, r4, #1
 80040dc:	d120      	bne.n	8004120 <_Z23getFont_verdana_40_4bppv+0x54>
 80040de:	4628      	mov	r0, r5
 80040e0:	f01b ffec 	bl	80200bc <__cxa_guard_acquire>
 80040e4:	b1e0      	cbz	r0, 8004120 <_Z23getFont_verdana_40_4bppv+0x54>
 80040e6:	233f      	movs	r3, #63	@ 0x3f
 80040e8:	2201      	movs	r2, #1
 80040ea:	4910      	ldr	r1, [pc, #64]	@ (800412c <_Z23getFont_verdana_40_4bppv+0x60>)
 80040ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80040ee:	4b10      	ldr	r3, [pc, #64]	@ (8004130 <_Z23getFont_verdana_40_4bppv+0x64>)
 80040f0:	4810      	ldr	r0, [pc, #64]	@ (8004134 <_Z23getFont_verdana_40_4bppv+0x68>)
 80040f2:	9308      	str	r3, [sp, #32]
 80040f4:	4b10      	ldr	r3, [pc, #64]	@ (8004138 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80040f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80040f8:	9405      	str	r4, [sp, #20]
 80040fa:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80040fe:	2304      	movs	r3, #4
 8004100:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004104:	2328      	movs	r3, #40	@ 0x28
 8004106:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004110:	f7ff fe30 	bl	8003d74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004114:	4809      	ldr	r0, [pc, #36]	@ (800413c <_Z23getFont_verdana_40_4bppv+0x70>)
 8004116:	f01c fb65 	bl	80207e4 <atexit>
 800411a:	4628      	mov	r0, r5
 800411c:	f01b ffda 	bl	80200d4 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8004120:	4804      	ldr	r0, [pc, #16]	@ (8004134 <_Z23getFont_verdana_40_4bppv+0x68>)
 8004122:	b00f      	add	sp, #60	@ 0x3c
 8004124:	bd30      	pop	{r4, r5, pc}
 8004126:	bf00      	nop
 8004128:	2400b0c8 	.word	0x2400b0c8
 800412c:	08024aec 	.word	0x08024aec
 8004130:	08024b04 	.word	0x08024b04
 8004134:	2400b0cc 	.word	0x2400b0cc
 8004138:	08024b10 	.word	0x08024b10
 800413c:	080040c9 	.word	0x080040c9

08004140 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8004140:	2000      	movs	r0, #0
 8004142:	4770      	bx	lr

08004144 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8004144:	2000      	movs	r0, #0
 8004146:	4770      	bx	lr

08004148 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004148:	b40e      	push	{r1, r2, r3}
 800414a:	b503      	push	{r0, r1, lr}
 800414c:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800414e:	2100      	movs	r1, #0
{
 8004150:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8004154:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004156:	f00f f807 	bl	8013168 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800415a:	b002      	add	sp, #8
 800415c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004160:	b003      	add	sp, #12
 8004162:	4770      	bx	lr

08004164 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004164:	b40c      	push	{r2, r3}
 8004166:	b507      	push	{r0, r1, r2, lr}
 8004168:	ab04      	add	r3, sp, #16
 800416a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800416e:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004170:	f00e fffa 	bl	8013168 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004174:	b003      	add	sp, #12
 8004176:	f85d eb04 	ldr.w	lr, [sp], #4
 800417a:	b002      	add	sp, #8
 800417c:	4770      	bx	lr
	...

08004180 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8004180:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8004182:	b510      	push	{r4, lr}
 8004184:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8004186:	b373      	cbz	r3, 80041e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004188:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800418a:	b92b      	cbnz	r3, 8004198 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 800418c:	4b18      	ldr	r3, [pc, #96]	@ (80041f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800418e:	21c5      	movs	r1, #197	@ 0xc5
 8004190:	4a18      	ldr	r2, [pc, #96]	@ (80041f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8004192:	4819      	ldr	r0, [pc, #100]	@ (80041f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004194:	f01c fb08 	bl	80207a8 <__assert_func>
            return buffer[pos];
 8004198:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800419a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800419e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80041a0:	b30b      	cbz	r3, 80041e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80041a2:	f010 fe03 	bl	8014dac <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 80041a6:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d803      	bhi.n	80041b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 80041ac:	4b13      	ldr	r3, [pc, #76]	@ (80041fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80041ae:	21cb      	movs	r1, #203	@ 0xcb
 80041b0:	4a13      	ldr	r2, [pc, #76]	@ (8004200 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80041b2:	e7ee      	b.n	8004192 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80041b4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80041b6:	f640 103f 	movw	r0, #2367	@ 0x93f
 80041ba:	1c53      	adds	r3, r2, #1
 80041bc:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80041be:	2b09      	cmp	r3, #9
 80041c0:	4619      	mov	r1, r3
 80041c2:	bf88      	it	hi
 80041c4:	f1a3 010a 	subhi.w	r1, r3, #10
 80041c8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80041cc:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 80041ce:	4281      	cmp	r1, r0
 80041d0:	d109      	bne.n	80041e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80041d2:	2b0a      	cmp	r3, #10
 80041d4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80041d8:	bf28      	it	cs
 80041da:	2300      	movcs	r3, #0
            return buffer[pos];
 80041dc:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 80041de:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80041e2:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 80041e4:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80041e6:	4620      	mov	r0, r4
}
 80041e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80041ec:	f010 bce0 	b.w	8014bb0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80041f0:	08023335 	.word	0x08023335
 80041f4:	0802333e 	.word	0x0802333e
 80041f8:	080233e9 	.word	0x080233e9
 80041fc:	08023441 	.word	0x08023441
 8004200:	0802344f 	.word	0x0802344f

08004204 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8004204:	f010 bc9d 	b.w	8014b42 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08004208 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8004208:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800420a:	bb18      	cbnz	r0, 8004254 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 800420c:	4b12      	ldr	r3, [pc, #72]	@ (8004258 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800420e:	4813      	ldr	r0, [pc, #76]	@ (800425c <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8004210:	681c      	ldr	r4, [r3, #0]
 8004212:	4913      	ldr	r1, [pc, #76]	@ (8004260 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004214:	b1b4      	cbz	r4, 8004244 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004216:	6822      	ldr	r2, [r4, #0]
 8004218:	4422      	add	r2, r4
 800421a:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800421c:	6862      	ldr	r2, [r4, #4]
 800421e:	4422      	add	r2, r4
 8004220:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004222:	68a2      	ldr	r2, [r4, #8]
 8004224:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8004226:	4b0f      	ldr	r3, [pc, #60]	@ (8004264 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004228:	2200      	movs	r2, #0
 800422a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800422c:	f000 f82a 	bl	8004284 <_ZN17TypedTextDatabase8getFontsEv>
 8004230:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8004232:	f000 f825 	bl	8004280 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8004236:	4b0c      	ldr	r3, [pc, #48]	@ (8004268 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004238:	601c      	str	r4, [r3, #0]
        fonts = f;
 800423a:	4b0c      	ldr	r3, [pc, #48]	@ (800426c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 800423c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800423e:	4b0c      	ldr	r3, [pc, #48]	@ (8004270 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8004240:	8018      	strh	r0, [r3, #0]
    }
}
 8004242:	e007      	b.n	8004254 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8004244:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8004246:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004248:	4b0b      	ldr	r3, [pc, #44]	@ (8004278 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 800424a:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800424c:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800424e:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8004250:	2c00      	cmp	r4, #0
 8004252:	d1e8      	bne.n	8004226 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004254:	bd38      	pop	{r3, r4, r5, pc}
 8004256:	bf00      	nop
 8004258:	2400b104 	.word	0x2400b104
 800425c:	2400b0fc 	.word	0x2400b0fc
 8004260:	2400b0f8 	.word	0x2400b0f8
 8004264:	2400b100 	.word	0x2400b100
 8004268:	24025178 	.word	0x24025178
 800426c:	24025180 	.word	0x24025180
 8004270:	2402517c 	.word	0x2402517c
 8004274:	901d5ec4 	.word	0x901d5ec4
 8004278:	901d5ec0 	.word	0x901d5ec0
 800427c:	901d5ec8 	.word	0x901d5ec8

08004280 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 8004280:	2000      	movs	r0, #0
 8004282:	4770      	bx	lr

08004284 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8004284:	4800      	ldr	r0, [pc, #0]	@ (8004288 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8004286:	4770      	bx	lr
 8004288:	2400b108 	.word	0x2400b108

0800428c <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800428c:	b510      	push	{r4, lr}
};
 800428e:	4c05      	ldr	r4, [pc, #20]	@ (80042a4 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8004290:	f7ff fee0 	bl	8004054 <_Z23getFont_verdana_20_4bppv>
};
 8004294:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8004296:	f7ff ff19 	bl	80040cc <_Z23getFont_verdana_40_4bppv>
};
 800429a:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 800429c:	f7ff fe9e 	bl	8003fdc <_Z23getFont_verdana_10_4bppv>
};
 80042a0:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 80042a2:	bd10      	pop	{r4, pc}
 80042a4:	2400b108 	.word	0x2400b108

080042a8 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 80042a8:	b510      	push	{r4, lr}
    pointArray = 0;
 80042aa:	2400      	movs	r4, #0
 80042ac:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 80042ae:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 80042b0:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 80042b2:	601c      	str	r4, [r3, #0]
}
 80042b4:	bd10      	pop	{r4, pc}

080042b6 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80042b6:	4770      	bx	lr

080042b8 <_ZN19FrontendApplicationD0Ev>:
 80042b8:	b510      	push	{r4, lr}
 80042ba:	4604      	mov	r4, r0
 80042bc:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80042c0:	f01b fefa 	bl	80200b8 <_ZdlPvj>
 80042c4:	4620      	mov	r0, r4
 80042c6:	bd10      	pop	{r4, pc}

080042c8 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80042c8:	b510      	push	{r4, lr}
 80042ca:	4604      	mov	r4, r0
    {
        model.tick();
 80042cc:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 80042d0:	f000 f813 	bl	80042fa <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80042d4:	4620      	mov	r0, r4
    }
 80042d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80042da:	f00d bf39 	b.w	8012150 <_ZN8touchgfx11Application15handleTickEventEv>
	...

080042e0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80042e0:	b510      	push	{r4, lr}
 80042e2:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80042e4:	f7ff fcd0 	bl	8003c88 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80042e8:	4b01      	ldr	r3, [pc, #4]	@ (80042f0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80042ea:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80042ec:	6023      	str	r3, [r4, #0]
}
 80042ee:	bd10      	pop	{r4, pc}
 80042f0:	08023c4c 	.word	0x08023c4c

080042f4 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80042f4:	2200      	movs	r2, #0
 80042f6:	6002      	str	r2, [r0, #0]
{

}
 80042f8:	4770      	bx	lr

080042fa <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80042fa:	4770      	bx	lr

080042fc <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 80042fc:	4770      	bx	lr

080042fe <_ZThn4_N16Screen1PresenterD1Ev>:
 80042fe:	3804      	subs	r0, #4
 8004300:	4770      	bx	lr

08004302 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8004302:	4770      	bx	lr

08004304 <_ZN16Screen1PresenterD0Ev>:
 8004304:	b510      	push	{r4, lr}
 8004306:	4604      	mov	r4, r0
 8004308:	2110      	movs	r1, #16
 800430a:	f01b fed5 	bl	80200b8 <_ZdlPvj>
 800430e:	4620      	mov	r0, r4
 8004310:	bd10      	pop	{r4, pc}

08004312 <_ZThn4_N16Screen1PresenterD0Ev>:
 8004312:	f1a0 0004 	sub.w	r0, r0, #4
 8004316:	e7f5      	b.n	8004304 <_ZN16Screen1PresenterD0Ev>

08004318 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8004318:	2200      	movs	r2, #0
    : view(v)
 800431a:	60c1      	str	r1, [r0, #12]
 800431c:	6082      	str	r2, [r0, #8]
 800431e:	4a02      	ldr	r2, [pc, #8]	@ (8004328 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8004320:	6002      	str	r2, [r0, #0]
 8004322:	3218      	adds	r2, #24
 8004324:	6042      	str	r2, [r0, #4]
}
 8004326:	4770      	bx	lr
 8004328:	08023ca0 	.word	0x08023ca0

0800432c <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 800432c:	4770      	bx	lr
	...

08004330 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8004330:	4b03      	ldr	r3, [pc, #12]	@ (8004340 <_ZN11Screen1ViewD1Ev+0x10>)
 8004332:	b510      	push	{r4, lr}
 8004334:	4604      	mov	r4, r0
 8004336:	6003      	str	r3, [r0, #0]
 8004338:	f7ff fd53 	bl	8003de2 <_ZN15Screen1ViewBaseD1Ev>
 800433c:	4620      	mov	r0, r4
 800433e:	bd10      	pop	{r4, pc}
 8004340:	08023cc8 	.word	0x08023cc8

08004344 <_ZN11Screen1ViewD0Ev>:
 8004344:	b510      	push	{r4, lr}
 8004346:	4604      	mov	r4, r0
 8004348:	f7ff fff2 	bl	8004330 <_ZN11Screen1ViewD1Ev>
 800434c:	21e0      	movs	r1, #224	@ 0xe0
 800434e:	4620      	mov	r0, r4
 8004350:	f01b feb2 	bl	80200b8 <_ZdlPvj>
 8004354:	4620      	mov	r0, r4
 8004356:	bd10      	pop	{r4, pc}

08004358 <_ZNK8touchgfx6Bitmap5getIdEv.part.0>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 8004358:	b508      	push	{r3, lr}
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800435a:	4a03      	ldr	r2, [pc, #12]	@ (8004368 <_ZNK8touchgfx6Bitmap5getIdEv.part.0+0x10>)
 800435c:	2194      	movs	r1, #148	@ 0x94
 800435e:	4b03      	ldr	r3, [pc, #12]	@ (800436c <_ZNK8touchgfx6Bitmap5getIdEv.part.0+0x14>)
 8004360:	4803      	ldr	r0, [pc, #12]	@ (8004370 <_ZNK8touchgfx6Bitmap5getIdEv.part.0+0x18>)
 8004362:	f01c fa21 	bl	80207a8 <__assert_func>
 8004366:	bf00      	nop
 8004368:	0802355d 	.word	0x0802355d
 800436c:	08023521 	.word	0x08023521
 8004370:	08023590 	.word	0x08023590

08004374 <_ZN11Screen1View6ToggleEv>:
 8004374:	4a11      	ldr	r2, [pc, #68]	@ (80043bc <_ZN11Screen1View6ToggleEv+0x48>)
 8004376:	6812      	ldr	r2, [r2, #0]
void Screen1View::Toggle(){
 8004378:	b508      	push	{r3, lr}
 800437a:	f8b0 30c6 	ldrh.w	r3, [r0, #198]	@ 0xc6
 800437e:	b90a      	cbnz	r2, 8004384 <_ZN11Screen1View6ToggleEv+0x10>
 8004380:	f7ff ffea 	bl	8004358 <_ZNK8touchgfx6Bitmap5getIdEv.part.0>

	if(toggleButton1.getState()){
 8004384:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	@ 0xcc
 8004388:	429a      	cmp	r2, r3
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 800438a:	f04f 0200 	mov.w	r2, #0
	if(toggleButton1.getState()){
 800438e:	d10b      	bne.n	80043a8 <_ZN11Screen1View6ToggleEv+0x34>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 8004390:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004394:	480a      	ldr	r0, [pc, #40]	@ (80043c0 <_ZN11Screen1View6ToggleEv+0x4c>)
 8004396:	f002 fec3 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET);
 800439a:	2201      	movs	r2, #1
 800439c:	2120      	movs	r1, #32
 800439e:	4809      	ldr	r0, [pc, #36]	@ (80043c4 <_ZN11Screen1View6ToggleEv+0x50>)
		HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);

	}

}
 80043a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 80043a4:	f002 bebc 	b.w	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 80043a8:	2120      	movs	r1, #32
 80043aa:	4806      	ldr	r0, [pc, #24]	@ (80043c4 <_ZN11Screen1View6ToggleEv+0x50>)
 80043ac:	f002 feb8 	bl	8007120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 80043b0:	2201      	movs	r2, #1
 80043b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80043b6:	4802      	ldr	r0, [pc, #8]	@ (80043c0 <_ZN11Screen1View6ToggleEv+0x4c>)
 80043b8:	e7f2      	b.n	80043a0 <_ZN11Screen1View6ToggleEv+0x2c>
 80043ba:	bf00      	nop
 80043bc:	240251b0 	.word	0x240251b0
 80043c0:	58022000 	.word	0x58022000
 80043c4:	58022400 	.word	0x58022400

080043c8 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80043c8:	b510      	push	{r4, lr}
 80043ca:	4604      	mov	r4, r0
 80043cc:	f7ff fd5a 	bl	8003e84 <_ZN15Screen1ViewBaseC1Ev>
 80043d0:	4b01      	ldr	r3, [pc, #4]	@ (80043d8 <_ZN11Screen1ViewC1Ev+0x10>)
}
 80043d2:	4620      	mov	r0, r4
Screen1View::Screen1View()
 80043d4:	6023      	str	r3, [r4, #0]
}
 80043d6:	bd10      	pop	{r4, pc}
 80043d8:	08023cc8 	.word	0x08023cc8

080043dc <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80043dc:	f7ff bd02 	b.w	8003de4 <_ZN15Screen1ViewBase11setupScreenEv>

080043e0 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80043e0:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80043e2:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 80043e6:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 80043e8:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 80043ea:	2302      	movs	r3, #2
 80043ec:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80043ee:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80043f2:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 80043f6:	4770      	bx	lr

080043f8 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 80043f8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80043fc:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 80043fe:	bf04      	itt	eq
 8004400:	2300      	moveq	r3, #0
 8004402:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8004406:	2000      	movs	r0, #0
 8004408:	4770      	bx	lr

0800440a <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 800440a:	2000      	movs	r0, #0
 800440c:	4770      	bx	lr

0800440e <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800440e:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004410:	6904      	ldr	r4, [r0, #16]
 8004412:	8900      	ldrh	r0, [r0, #8]
 8004414:	46a4      	mov	ip, r4
}
 8004416:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800441a:	4760      	bx	ip

0800441c <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800441c:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800441e:	68c4      	ldr	r4, [r0, #12]
 8004420:	8900      	ldrh	r0, [r0, #8]
 8004422:	46a4      	mov	ip, r4
}
 8004424:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004428:	4760      	bx	ip

0800442a <FT6X06_GestureConfig>:
{
 800442a:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800442c:	f100 0518 	add.w	r5, r0, #24
{
 8004430:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004432:	7809      	ldrb	r1, [r1, #0]
 8004434:	4628      	mov	r0, r5
 8004436:	f000 f911 	bl	800465c <ft6x06_radian_value>
 800443a:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800443c:	7931      	ldrb	r1, [r6, #4]
 800443e:	4628      	mov	r0, r5
 8004440:	f000 f918 	bl	8004674 <ft6x06_offset_left_right>
 8004444:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8004446:	7a31      	ldrb	r1, [r6, #8]
 8004448:	4628      	mov	r0, r5
 800444a:	f000 f91f 	bl	800468c <ft6x06_offset_up_down>
 800444e:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8004450:	7b31      	ldrb	r1, [r6, #12]
 8004452:	4628      	mov	r0, r5
 8004454:	f000 f926 	bl	80046a4 <ft6x06_disatnce_left_right>
 8004458:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800445a:	7c31      	ldrb	r1, [r6, #16]
 800445c:	4628      	mov	r0, r5
 800445e:	f000 f92d 	bl	80046bc <ft6x06_distance_up_down>
 8004462:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8004464:	7d31      	ldrb	r1, [r6, #20]
 8004466:	4628      	mov	r0, r5
 8004468:	f000 f934 	bl	80046d4 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 800446c:	42c4      	cmn	r4, r0
}
 800446e:	bf14      	ite	ne
 8004470:	f04f 30ff 	movne.w	r0, #4294967295
 8004474:	2000      	moveq	r0, #0
 8004476:	bd70      	pop	{r4, r5, r6, pc}

08004478 <FT6X06_ReadID>:
{
 8004478:	b513      	push	{r0, r1, r4, lr}
 800447a:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 800447c:	3018      	adds	r0, #24
 800447e:	f10d 0107 	add.w	r1, sp, #7
 8004482:	f000 f93f 	bl	8004704 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8004486:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800448a:	6023      	str	r3, [r4, #0]
}
 800448c:	b002      	add	sp, #8
 800448e:	bd10      	pop	{r4, pc}

08004490 <FT6X06_GetState>:
{
 8004490:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004492:	f100 0518 	add.w	r5, r0, #24
{
 8004496:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004498:	a901      	add	r1, sp, #4
 800449a:	4628      	mov	r0, r5
 800449c:	f000 f8d1 	bl	8004642 <ft6x06_td_status>
 80044a0:	bb08      	cbnz	r0, 80044e6 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80044a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	bf98      	it	ls
 80044aa:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80044ac:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80044ae:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80044b0:	2103      	movs	r1, #3
 80044b2:	4628      	mov	r0, r5
 80044b4:	eb0d 0203 	add.w	r2, sp, r3
 80044b8:	f000 f8b0 	bl	800461c <ft6x06_read_reg>
 80044bc:	b9b0      	cbnz	r0, 80044ec <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80044be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80044c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80044c6:	021b      	lsls	r3, r3, #8
 80044c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80044cc:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80044ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80044d2:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80044d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80044de:	4313      	orrs	r3, r2
 80044e0:	60a3      	str	r3, [r4, #8]
}
 80044e2:	b003      	add	sp, #12
 80044e4:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80044e6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ea:	e7df      	b.n	80044ac <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80044f0:	e7f7      	b.n	80044e2 <FT6X06_GetState+0x52>

080044f2 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 80044f2:	3018      	adds	r0, #24
 80044f4:	f000 b8a0 	b.w	8004638 <ft6x06_gest_id>

080044f8 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 80044f8:	2101      	movs	r1, #1
 80044fa:	3018      	adds	r0, #24
 80044fc:	f000 b8f6 	b.w	80046ec <ft6x06_g_mode>

08004500 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8004500:	2100      	movs	r1, #0
 8004502:	3018      	adds	r0, #24
 8004504:	f000 b8f2 	b.w	80046ec <ft6x06_g_mode>

08004508 <FT6X06_Init>:
{
 8004508:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 800450a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 800450e:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8004510:	b96b      	cbnz	r3, 800452e <FT6X06_Init+0x26>
    pObj->IO.Init();
 8004512:	6803      	ldr	r3, [r0, #0]
 8004514:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8004516:	4620      	mov	r0, r4
 8004518:	f7ff fff2 	bl	8004500 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 800451c:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 800451e:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8004522:	bf18      	it	ne
 8004524:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8004526:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 800452a:	4240      	negs	r0, r0
}
 800452c:	bd10      	pop	{r4, pc}
 800452e:	2000      	movs	r0, #0
  return ret;
 8004530:	e7fc      	b.n	800452c <FT6X06_Init+0x24>

08004532 <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 8004532:	2000      	movs	r0, #0
 8004534:	4770      	bx	lr

08004536 <FT6X06_GetMultiTouchState>:
{
 8004536:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004538:	f100 0518 	add.w	r5, r0, #24
{
 800453c:	b085      	sub	sp, #20
 800453e:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004540:	4628      	mov	r0, r5
 8004542:	a901      	add	r1, sp, #4
 8004544:	f000 f87d 	bl	8004642 <ft6x06_td_status>
 8004548:	2800      	cmp	r0, #0
 800454a:	d145      	bne.n	80045d8 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800454c:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8004550:	2b02      	cmp	r3, #2
 8004552:	bf98      	it	ls
 8004554:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8004556:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004558:	230c      	movs	r3, #12
 800455a:	aa01      	add	r2, sp, #4
 800455c:	2103      	movs	r1, #3
 800455e:	4628      	mov	r0, r5
 8004560:	f000 f85c 	bl	800461c <ft6x06_read_reg>
 8004564:	2800      	cmp	r0, #0
 8004566:	d13a      	bne.n	80045de <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004568:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800456c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004570:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8004572:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004574:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8004578:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800457a:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800457c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004580:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004584:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004586:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004590:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004592:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004596:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8004598:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800459c:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 800459e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80045a2:	091b      	lsrs	r3, r3, #4
 80045a4:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80045a6:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80045a8:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80045aa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80045ae:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80045b0:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80045b2:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80045b6:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80045b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80045c2:	430b      	orrs	r3, r1
 80045c4:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 80045c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80045ca:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 80045cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80045d0:	091b      	lsrs	r3, r3, #4
 80045d2:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80045d4:	b005      	add	sp, #20
 80045d6:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295
 80045dc:	e7bb      	b.n	8004556 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 80045de:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80045e2:	e7f7      	b.n	80045d4 <FT6X06_GetMultiTouchState+0x9e>

080045e4 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 80045e4:	b190      	cbz	r0, 800460c <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 80045e6:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80045e8:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80045ea:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 80045ec:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80045ee:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 80045f0:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80045f2:	68ca      	ldr	r2, [r1, #12]
 80045f4:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80045f6:	690a      	ldr	r2, [r1, #16]
 80045f8:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80045fa:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 80045fc:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 80045fe:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004600:	4a04      	ldr	r2, [pc, #16]	@ (8004614 <FT6X06_RegisterBusIO+0x30>)
 8004602:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004604:	4a04      	ldr	r2, [pc, #16]	@ (8004618 <FT6X06_RegisterBusIO+0x34>)
 8004606:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8004608:	b103      	cbz	r3, 800460c <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 800460a:	4718      	bx	r3
}
 800460c:	f04f 30ff 	mov.w	r0, #4294967295
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	0800440f 	.word	0x0800440f
 8004618:	0800441d 	.word	0x0800441d

0800461c <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800461c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800461e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004622:	46a4      	mov	ip, r4
}
 8004624:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004628:	4760      	bx	ip

0800462a <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800462a:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800462c:	6804      	ldr	r4, [r0, #0]
 800462e:	6880      	ldr	r0, [r0, #8]
 8004630:	46a4      	mov	ip, r4
}
 8004632:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004636:	4760      	bx	ip

08004638 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004638:	2301      	movs	r3, #1
{
 800463a:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 800463c:	4619      	mov	r1, r3
 800463e:	f7ff bfed 	b.w	800461c <ft6x06_read_reg>

08004642 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004642:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004644:	460a      	mov	r2, r1
{
 8004646:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004648:	2301      	movs	r3, #1
 800464a:	2102      	movs	r1, #2
 800464c:	f7ff ffe6 	bl	800461c <ft6x06_read_reg>
  
  if(ret == 0)
 8004650:	b918      	cbnz	r0, 800465a <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8004652:	7823      	ldrb	r3, [r4, #0]
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800465a:	bd10      	pop	{r4, pc}

0800465c <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 800465c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 800465e:	2301      	movs	r3, #1
{
 8004660:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8004664:	f10d 0207 	add.w	r2, sp, #7
 8004668:	2191      	movs	r1, #145	@ 0x91
 800466a:	f7ff ffde 	bl	800462a <ft6x06_write_reg>
}
 800466e:	b003      	add	sp, #12
 8004670:	f85d fb04 	ldr.w	pc, [sp], #4

08004674 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004674:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8004676:	2301      	movs	r3, #1
{
 8004678:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 800467c:	f10d 0207 	add.w	r2, sp, #7
 8004680:	2192      	movs	r1, #146	@ 0x92
 8004682:	f7ff ffd2 	bl	800462a <ft6x06_write_reg>
}
 8004686:	b003      	add	sp, #12
 8004688:	f85d fb04 	ldr.w	pc, [sp], #4

0800468c <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 800468c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 800468e:	2301      	movs	r3, #1
{
 8004690:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004694:	f10d 0207 	add.w	r2, sp, #7
 8004698:	2193      	movs	r1, #147	@ 0x93
 800469a:	f7ff ffc6 	bl	800462a <ft6x06_write_reg>
}
 800469e:	b003      	add	sp, #12
 80046a0:	f85d fb04 	ldr.w	pc, [sp], #4

080046a4 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80046a4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80046a6:	2301      	movs	r3, #1
{
 80046a8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80046ac:	f10d 0207 	add.w	r2, sp, #7
 80046b0:	2194      	movs	r1, #148	@ 0x94
 80046b2:	f7ff ffba 	bl	800462a <ft6x06_write_reg>
}
 80046b6:	b003      	add	sp, #12
 80046b8:	f85d fb04 	ldr.w	pc, [sp], #4

080046bc <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80046bc:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80046be:	2301      	movs	r3, #1
{
 80046c0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80046c4:	f10d 0207 	add.w	r2, sp, #7
 80046c8:	2195      	movs	r1, #149	@ 0x95
 80046ca:	f7ff ffae 	bl	800462a <ft6x06_write_reg>
}
 80046ce:	b003      	add	sp, #12
 80046d0:	f85d fb04 	ldr.w	pc, [sp], #4

080046d4 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 80046d4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80046d6:	2301      	movs	r3, #1
{
 80046d8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80046dc:	f10d 0207 	add.w	r2, sp, #7
 80046e0:	2196      	movs	r1, #150	@ 0x96
 80046e2:	f7ff ffa2 	bl	800462a <ft6x06_write_reg>
}
 80046e6:	b003      	add	sp, #12
 80046e8:	f85d fb04 	ldr.w	pc, [sp], #4

080046ec <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 80046ec:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80046ee:	2301      	movs	r3, #1
{
 80046f0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80046f4:	f10d 0207 	add.w	r2, sp, #7
 80046f8:	21a4      	movs	r1, #164	@ 0xa4
 80046fa:	f7ff ff96 	bl	800462a <ft6x06_write_reg>
}
 80046fe:	b003      	add	sp, #12
 8004700:	f85d fb04 	ldr.w	pc, [sp], #4

08004704 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004704:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8004706:	2301      	movs	r3, #1
 8004708:	21a8      	movs	r1, #168	@ 0xa8
 800470a:	f7ff bf87 	b.w	800461c <ft6x06_read_reg>
	...

08004710 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004710:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004712:	2201      	movs	r2, #1
 8004714:	4b07      	ldr	r3, [pc, #28]	@ (8004734 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8004716:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 800471a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800471c:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800471e:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8004720:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004722:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004726:	f006 f9b9 	bl	800aa9c <HAL_SDRAM_SendCommand>
 800472a:	3800      	subs	r0, #0
 800472c:	bf18      	it	ne
 800472e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004730:	4240      	negs	r0, r0
 8004732:	bd08      	pop	{r3, pc}
 8004734:	2400b114 	.word	0x2400b114

08004738 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004738:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 800473a:	2202      	movs	r2, #2
 800473c:	4b08      	ldr	r3, [pc, #32]	@ (8004760 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 800473e:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8004742:	2101      	movs	r1, #1
 8004744:	2200      	movs	r2, #0
 8004746:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800474a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800474e:	4619      	mov	r1, r3
 8004750:	f006 f9a4 	bl	800aa9c <HAL_SDRAM_SendCommand>
 8004754:	3800      	subs	r0, #0
 8004756:	bf18      	it	ne
 8004758:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800475a:	4240      	negs	r0, r0
 800475c:	bd08      	pop	{r3, pc}
 800475e:	bf00      	nop
 8004760:	2400b114 	.word	0x2400b114

08004764 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8004764:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004766:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 800476a:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800476c:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 800476e:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004770:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8004772:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8004774:	6991      	ldr	r1, [r2, #24]
 8004776:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004778:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 800477a:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800477c:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800477e:	4907      	ldr	r1, [pc, #28]	@ (800479c <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8004780:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8004782:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004784:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8004786:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800478a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800478e:	f006 f985 	bl	800aa9c <HAL_SDRAM_SendCommand>
 8004792:	3800      	subs	r0, #0
 8004794:	bf18      	it	ne
 8004796:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004798:	4240      	negs	r0, r0
 800479a:	bd10      	pop	{r4, pc}
 800479c:	2400b114 	.word	0x2400b114

080047a0 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80047a0:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 80047a2:	4b08      	ldr	r3, [pc, #32]	@ (80047c4 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 80047a4:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 80047a8:	2108      	movs	r1, #8
 80047aa:	2200      	movs	r2, #0
 80047ac:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047b4:	4619      	mov	r1, r3
 80047b6:	f006 f971 	bl	800aa9c <HAL_SDRAM_SendCommand>
 80047ba:	3800      	subs	r0, #0
 80047bc:	bf18      	it	ne
 80047be:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80047c0:	4240      	negs	r0, r0
 80047c2:	bd08      	pop	{r3, pc}
 80047c4:	2400b114 	.word	0x2400b114

080047c8 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80047c8:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80047ca:	f006 f986 	bl	800aada <HAL_SDRAM_ProgramRefreshRate>
 80047ce:	3800      	subs	r0, #0
 80047d0:	bf18      	it	ne
 80047d2:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80047d4:	4240      	negs	r0, r0
 80047d6:	bd08      	pop	{r3, pc}

080047d8 <IS42S32800J_Init>:
{
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80047dc:	6809      	ldr	r1, [r1, #0]
{
 80047de:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80047e0:	f7ff ff96 	bl	8004710 <IS42S32800J_ClockEnable>
 80047e4:	b110      	cbz	r0, 80047ec <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 80047e6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80047ea:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80047ec:	f001 fc7e 	bl	80060ec <HAL_GetTick>
 80047f0:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80047f2:	f001 fc7b 	bl	80060ec <HAL_GetTick>
 80047f6:	4286      	cmp	r6, r0
 80047f8:	d0fb      	beq.n	80047f2 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80047fa:	6821      	ldr	r1, [r4, #0]
 80047fc:	4628      	mov	r0, r5
 80047fe:	f7ff ff9b 	bl	8004738 <IS42S32800J_Precharge>
 8004802:	2800      	cmp	r0, #0
 8004804:	d1ef      	bne.n	80047e6 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8004806:	4628      	mov	r0, r5
 8004808:	e9d4 1200 	ldrd	r1, r2, [r4]
 800480c:	f7ff ffc8 	bl	80047a0 <IS42S32800J_RefreshMode>
 8004810:	2800      	cmp	r0, #0
 8004812:	d1e8      	bne.n	80047e6 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8004814:	4621      	mov	r1, r4
 8004816:	4628      	mov	r0, r5
 8004818:	f7ff ffa4 	bl	8004764 <IS42S32800J_ModeRegConfig>
 800481c:	2800      	cmp	r0, #0
 800481e:	d1e2      	bne.n	80047e6 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8004820:	68a1      	ldr	r1, [r4, #8]
 8004822:	4628      	mov	r0, r5
 8004824:	f7ff ffd0 	bl	80047c8 <IS42S32800J_RefreshRate>
 8004828:	3800      	subs	r0, #0
 800482a:	bf18      	it	ne
 800482c:	2001      	movne	r0, #1
 800482e:	4240      	negs	r0, r0
  return ret;
 8004830:	e7db      	b.n	80047ea <IS42S32800J_Init+0x12>

08004832 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8004832:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004836:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800483a:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800483e:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8004842:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004846:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800484a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800484e:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8004850:	2000      	movs	r0, #0
 8004852:	4770      	bx	lr

08004854 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004854:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004856:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 800485a:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800485c:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004860:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8004862:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004864:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8004866:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8004868:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800486a:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 800486c:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800486e:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004870:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8004872:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004874:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8004876:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004878:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800487a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800487e:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8004882:	2310      	movs	r3, #16
 8004884:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004886:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800488a:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800488c:	f240 1301 	movw	r3, #257	@ 0x101
 8004890:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004892:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004896:	f004 fd15 	bl	80092c4 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 800489a:	2800      	cmp	r0, #0

}
 800489c:	bf14      	ite	ne
 800489e:	f06f 0004 	mvnne.w	r0, #4
 80048a2:	2000      	moveq	r0, #0
 80048a4:	b015      	add	sp, #84	@ 0x54
 80048a6:	f85d fb04 	ldr.w	pc, [sp], #4

080048aa <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80048aa:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048ac:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80048b0:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80048b2:	bf18      	it	ne
 80048b4:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80048b8:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80048ba:	bf08      	it	eq
 80048bc:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 80048c0:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048c2:	a906      	add	r1, sp, #24
{
 80048c4:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80048c6:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 80048c8:	2306      	movs	r3, #6
 80048ca:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80048cc:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80048ce:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 80048d2:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 80048d4:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80048d6:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80048d8:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048dc:	f004 fbf2 	bl	80090c4 <HAL_QSPI_Command>
 80048e0:	bb20      	cbnz	r0, 800492c <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80048e2:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 80048e6:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80048e8:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80048ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80048ee:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048f0:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80048f2:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 80048f6:	f04f 0310 	mov.w	r3, #16
 80048fa:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80048fe:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004902:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004904:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004908:	bf14      	ite	ne
 800490a:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 800490e:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004912:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004914:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004916:	f241 3388 	movw	r3, #5000	@ 0x1388
 800491a:	f004 fcd3 	bl	80092c4 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 800491e:	2800      	cmp	r0, #0
 8004920:	bf14      	ite	ne
 8004922:	f06f 0004 	mvnne.w	r0, #4
 8004926:	2000      	moveq	r0, #0
}
 8004928:	b015      	add	sp, #84	@ 0x54
 800492a:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 800492c:	f06f 0001 	mvn.w	r0, #1
 8004930:	e7fa      	b.n	8004928 <MT25TL01G_WriteEnable+0x7e>

08004932 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004932:	2903      	cmp	r1, #3
{
 8004934:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004936:	bf18      	it	ne
 8004938:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 800493c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800493e:	bf08      	it	eq
 8004940:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004944:	4604      	mov	r4, r0
 8004946:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004948:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800494a:	23b7      	movs	r3, #183	@ 0xb7
 800494c:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800494e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004950:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004954:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004956:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004958:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800495a:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800495e:	f7ff ffa4 	bl	80048aa <MT25TL01G_WriteEnable>
 8004962:	b118      	cbz	r0, 800496c <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8004964:	f06f 0001 	mvn.w	r0, #1
}
 8004968:	b00f      	add	sp, #60	@ 0x3c
 800496a:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800496c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004970:	4669      	mov	r1, sp
 8004972:	4620      	mov	r0, r4
 8004974:	f004 fba6 	bl	80090c4 <HAL_QSPI_Command>
 8004978:	2800      	cmp	r0, #0
 800497a:	d1f3      	bne.n	8004964 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800497c:	4629      	mov	r1, r5
 800497e:	4620      	mov	r0, r4
 8004980:	f7ff ff68 	bl	8004854 <MT25TL01G_AutoPollingMemReady>
 8004984:	2800      	cmp	r0, #0
 8004986:	d0ef      	beq.n	8004968 <MT25TL01G_Enter4BytesAddressMode+0x36>
 8004988:	e7ec      	b.n	8004964 <MT25TL01G_Enter4BytesAddressMode+0x32>

0800498a <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800498a:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800498c:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004990:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004992:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004996:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004998:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800499a:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800499c:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800499e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80049a0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80049a4:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80049a6:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80049a8:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80049aa:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049ae:	f004 fb89 	bl	80090c4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80049b2:	2800      	cmp	r0, #0
}
 80049b4:	bf14      	ite	ne
 80049b6:	f06f 0001 	mvnne.w	r0, #1
 80049ba:	2000      	moveq	r0, #0
 80049bc:	b00f      	add	sp, #60	@ 0x3c
 80049be:	f85d fb04 	ldr.w	pc, [sp], #4

080049c2 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80049c2:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80049c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 80049c8:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049ca:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80049ce:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80049d0:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049d2:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80049d4:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80049d6:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80049d8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80049dc:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80049de:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80049e0:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80049e2:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049e6:	f004 fb6d 	bl	80090c4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80049ea:	2800      	cmp	r0, #0
}
 80049ec:	bf14      	ite	ne
 80049ee:	f06f 0001 	mvnne.w	r0, #1
 80049f2:	2000      	moveq	r0, #0
 80049f4:	b00f      	add	sp, #60	@ 0x3c
 80049f6:	f85d fb04 	ldr.w	pc, [sp], #4

080049fa <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80049fa:	b500      	push	{lr}
 80049fc:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80049fe:	2903      	cmp	r1, #3
 8004a00:	d80e      	bhi.n	8004a20 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8004a02:	e8df f001 	tbb	[pc, r1]
 8004a06:	2902      	.short	0x2902
 8004a08:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a0e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8004a10:	230e      	movs	r3, #14
 8004a12:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004a14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a18:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004a1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004a1e:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004a20:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004a22:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004a26:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004a2a:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004a2c:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004a2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004a32:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004a34:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004a36:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004a3a:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004a3c:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004a3e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004a40:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004a44:	f004 fc8f 	bl	8009366 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004a48:	2800      	cmp	r0, #0
}
 8004a4a:	bf14      	ite	ne
 8004a4c:	f06f 0005 	mvnne.w	r0, #5
 8004a50:	2000      	moveq	r0, #0
 8004a52:	b011      	add	sp, #68	@ 0x44
 8004a54:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a5c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8004a5e:	233d      	movs	r3, #61	@ 0x3d
 8004a60:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004a62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a66:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004a68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a6c:	e7d7      	b.n	8004a1e <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a72:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8004a74:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004a76:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004a78:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004a7c:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004a7e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004a82:	e7cc      	b.n	8004a1e <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004a84:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004a88:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004a8a:	23ed      	movs	r3, #237	@ 0xed
 8004a8c:	e7f3      	b.n	8004a76 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08004a8e <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004a8e:	b500      	push	{lr}
 8004a90:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004a92:	2903      	cmp	r1, #3
 8004a94:	d80e      	bhi.n	8004ab4 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8004a96:	e8df f001 	tbb	[pc, r1]
 8004a9a:	2502      	.short	0x2502
 8004a9c:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004aa2:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8004aa4:	230c      	movs	r3, #12
 8004aa6:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004aa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004aac:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004aae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004ab2:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004ab4:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004ab6:	466a      	mov	r2, sp
 8004ab8:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004aba:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004abc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004ac0:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004ac6:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004ac8:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004acc:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004ad0:	f004 fc49 	bl	8009366 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004ad4:	2800      	cmp	r0, #0
}
 8004ad6:	bf14      	ite	ne
 8004ad8:	f06f 0005 	mvnne.w	r0, #5
 8004adc:	2000      	moveq	r0, #0
 8004ade:	b011      	add	sp, #68	@ 0x44
 8004ae0:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004ae4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ae8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004aea:	23bc      	movs	r3, #188	@ 0xbc
 8004aec:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8004aee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004af2:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004af4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004af8:	e7db      	b.n	8004ab2 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004afa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004afe:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004b00:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004b02:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004b04:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004b08:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004b0a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004b0e:	e7d0      	b.n	8004ab2 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004b10:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004b14:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004b16:	23eb      	movs	r3, #235	@ 0xeb
 8004b18:	e7f3      	b.n	8004b02 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08004b1a <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b1a:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004b20:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b22:	bf18      	it	ne
 8004b24:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004b28:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b2a:	bf08      	it	eq
 8004b2c:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b30:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b32:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8004b34:	2366      	movs	r3, #102	@ 0x66
 8004b36:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004b38:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b3a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004b3e:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004b40:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004b42:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004b44:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b48:	f004 fabc 	bl	80090c4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004b4c:	2800      	cmp	r0, #0
}
 8004b4e:	bf14      	ite	ne
 8004b50:	f06f 0001 	mvnne.w	r0, #1
 8004b54:	2000      	moveq	r0, #0
 8004b56:	b00f      	add	sp, #60	@ 0x3c
 8004b58:	f85d fb04 	ldr.w	pc, [sp], #4

08004b5c <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b5c:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004b62:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b64:	bf18      	it	ne
 8004b66:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004b6a:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b6c:	bf08      	it	eq
 8004b6e:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b72:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b74:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8004b76:	2399      	movs	r3, #153	@ 0x99
 8004b78:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004b7a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b7c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004b80:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004b82:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004b84:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004b86:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b8a:	f004 fa9b 	bl	80090c4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004b8e:	2800      	cmp	r0, #0
}
 8004b90:	bf14      	ite	ne
 8004b92:	f06f 0001 	mvnne.w	r0, #1
 8004b96:	2000      	moveq	r0, #0
 8004b98:	b00f      	add	sp, #60	@ 0x3c
 8004b9a:	f85d fb04 	ldr.w	pc, [sp], #4

08004b9e <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004b9e:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004ba0:	6884      	ldr	r4, [r0, #8]
 8004ba2:	8800      	ldrh	r0, [r0, #0]
 8004ba4:	46a4      	mov	ip, r4
}
 8004ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004baa:	4760      	bx	ip

08004bac <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004bac:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004bae:	6844      	ldr	r4, [r0, #4]
 8004bb0:	8800      	ldrh	r0, [r0, #0]
 8004bb2:	46a4      	mov	ip, r4
}
 8004bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004bb8:	4760      	bx	ip

08004bba <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004bba:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004bbc:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8004bc2:	4798      	blx	r3
 8004bc4:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004bc6:	68e3      	ldr	r3, [r4, #12]
 8004bc8:	4798      	blx	r3
 8004bca:	1b83      	subs	r3, r0, r6
 8004bcc:	42ab      	cmp	r3, r5
 8004bce:	d3fa      	bcc.n	8004bc6 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8004bd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08004bd4 <OTM8009A_Init>:
{
 8004bd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f100 0510 	add.w	r5, r0, #16
{
 8004bde:	4607      	mov	r7, r0
 8004be0:	460e      	mov	r6, r1
 8004be2:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004be4:	4619      	mov	r1, r3
 8004be6:	4ade      	ldr	r2, [pc, #888]	@ (8004f60 <OTM8009A_Init+0x38c>)
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 fb99 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004bee:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004bf0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004bf2:	4adc      	ldr	r2, [pc, #880]	@ (8004f64 <OTM8009A_Init+0x390>)
 8004bf4:	21ff      	movs	r1, #255	@ 0xff
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	f000 fb92 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bfc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004bfe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c00:	4ad9      	ldr	r2, [pc, #868]	@ (8004f68 <OTM8009A_Init+0x394>)
 8004c02:	4619      	mov	r1, r3
 8004c04:	4628      	mov	r0, r5
 8004c06:	f000 fb8b 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004c0a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c0c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004c0e:	4ad7      	ldr	r2, [pc, #860]	@ (8004f6c <OTM8009A_Init+0x398>)
 8004c10:	21ff      	movs	r1, #255	@ 0xff
 8004c12:	4628      	mov	r0, r5
 8004c14:	f000 fb84 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c18:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004c1a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c1c:	4ad2      	ldr	r2, [pc, #840]	@ (8004f68 <OTM8009A_Init+0x394>)
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4628      	mov	r0, r5
 8004c22:	f000 fb7d 	bl	8005320 <otm8009a_write_reg>
 8004c26:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004c28:	2300      	movs	r3, #0
 8004c2a:	4ad1      	ldr	r2, [pc, #836]	@ (8004f70 <OTM8009A_Init+0x39c>)
 8004c2c:	21c4      	movs	r1, #196	@ 0xc4
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f000 fb76 	bl	8005320 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004c34:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004c36:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004c38:	4638      	mov	r0, r7
 8004c3a:	f7ff ffbe 	bl	8004bba <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	4acc      	ldr	r2, [pc, #816]	@ (8004f74 <OTM8009A_Init+0x3a0>)
 8004c42:	4628      	mov	r0, r5
 8004c44:	4619      	mov	r1, r3
 8004c46:	f000 fb6b 	bl	8005320 <otm8009a_write_reg>
 8004c4a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4aca      	ldr	r2, [pc, #808]	@ (8004f78 <OTM8009A_Init+0x3a4>)
 8004c50:	21c4      	movs	r1, #196	@ 0xc4
 8004c52:	4628      	mov	r0, r5
 8004c54:	f000 fb64 	bl	8005320 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004c58:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004c5a:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004c5c:	4638      	mov	r0, r7
 8004c5e:	f7ff ffac 	bl	8004bba <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004c62:	2300      	movs	r3, #0
 8004c64:	4ac5      	ldr	r2, [pc, #788]	@ (8004f7c <OTM8009A_Init+0x3a8>)
 8004c66:	4628      	mov	r0, r5
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f000 fb59 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004c6e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004c70:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004c72:	4ac3      	ldr	r2, [pc, #780]	@ (8004f80 <OTM8009A_Init+0x3ac>)
 8004c74:	21c5      	movs	r1, #197	@ 0xc5
 8004c76:	4628      	mov	r0, r5
 8004c78:	f000 fb52 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004c7c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004c7e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004c80:	4ac0      	ldr	r2, [pc, #768]	@ (8004f84 <OTM8009A_Init+0x3b0>)
 8004c82:	4619      	mov	r1, r3
 8004c84:	4628      	mov	r0, r5
 8004c86:	f000 fb4b 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004c8a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004c8c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004c8e:	4abe      	ldr	r2, [pc, #760]	@ (8004f88 <OTM8009A_Init+0x3b4>)
 8004c90:	21c5      	movs	r1, #197	@ 0xc5
 8004c92:	4628      	mov	r0, r5
 8004c94:	f000 fb44 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004c98:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004c9a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004c9c:	4abb      	ldr	r2, [pc, #748]	@ (8004f8c <OTM8009A_Init+0x3b8>)
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f000 fb3d 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004ca6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004ca8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004caa:	4ab9      	ldr	r2, [pc, #740]	@ (8004f90 <OTM8009A_Init+0x3bc>)
 8004cac:	21c0      	movs	r1, #192	@ 0xc0
 8004cae:	4628      	mov	r0, r5
 8004cb0:	f000 fb36 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cb4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004cb6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cb8:	4aa9      	ldr	r2, [pc, #676]	@ (8004f60 <OTM8009A_Init+0x38c>)
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	f000 fb2f 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004cc2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004cc4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004cc6:	4ab3      	ldr	r2, [pc, #716]	@ (8004f94 <OTM8009A_Init+0x3c0>)
 8004cc8:	21d9      	movs	r1, #217	@ 0xd9
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f000 fb28 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004cd0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004cd2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004cd4:	4ab0      	ldr	r2, [pc, #704]	@ (8004f98 <OTM8009A_Init+0x3c4>)
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f000 fb21 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004cde:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004ce0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004ce2:	4aae      	ldr	r2, [pc, #696]	@ (8004f9c <OTM8009A_Init+0x3c8>)
 8004ce4:	21c1      	movs	r1, #193	@ 0xc1
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	f000 fb1a 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004cec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004cee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004cf0:	4aab      	ldr	r2, [pc, #684]	@ (8004fa0 <OTM8009A_Init+0x3cc>)
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f000 fb13 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004cfa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004cfc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004cfe:	4aa9      	ldr	r2, [pc, #676]	@ (8004fa4 <OTM8009A_Init+0x3d0>)
 8004d00:	21c5      	movs	r1, #197	@ 0xc5
 8004d02:	4628      	mov	r0, r5
 8004d04:	f000 fb0c 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004d08:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004d0a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004d0c:	4aa6      	ldr	r2, [pc, #664]	@ (8004fa8 <OTM8009A_Init+0x3d4>)
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4628      	mov	r0, r5
 8004d12:	f000 fb05 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004d16:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004d18:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004d1a:	4a9b      	ldr	r2, [pc, #620]	@ (8004f88 <OTM8009A_Init+0x3b4>)
 8004d1c:	21c5      	movs	r1, #197	@ 0xc5
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 fafe 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d24:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004d26:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d28:	4a8d      	ldr	r2, [pc, #564]	@ (8004f60 <OTM8009A_Init+0x38c>)
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	f000 faf7 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004d32:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d34:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004d36:	4a9d      	ldr	r2, [pc, #628]	@ (8004fac <OTM8009A_Init+0x3d8>)
 8004d38:	21d8      	movs	r1, #216	@ 0xd8
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f000 faf0 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004d40:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004d42:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004d44:	4a9a      	ldr	r2, [pc, #616]	@ (8004fb0 <OTM8009A_Init+0x3dc>)
 8004d46:	4619      	mov	r1, r3
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f000 fae9 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004d4e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004d50:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004d52:	4a98      	ldr	r2, [pc, #608]	@ (8004fb4 <OTM8009A_Init+0x3e0>)
 8004d54:	21c5      	movs	r1, #197	@ 0xc5
 8004d56:	4628      	mov	r0, r5
 8004d58:	f000 fae2 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004d5c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004d5e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004d60:	4a95      	ldr	r2, [pc, #596]	@ (8004fb8 <OTM8009A_Init+0x3e4>)
 8004d62:	4619      	mov	r1, r3
 8004d64:	4628      	mov	r0, r5
 8004d66:	f000 fadb 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004d6a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004d6c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004d6e:	4a93      	ldr	r2, [pc, #588]	@ (8004fbc <OTM8009A_Init+0x3e8>)
 8004d70:	21c0      	movs	r1, #192	@ 0xc0
 8004d72:	4628      	mov	r0, r5
 8004d74:	f000 fad4 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004d78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004d7a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004d7c:	4a90      	ldr	r2, [pc, #576]	@ (8004fc0 <OTM8009A_Init+0x3ec>)
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4628      	mov	r0, r5
 8004d82:	f000 facd 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004d86:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004d88:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004d8a:	4a8e      	ldr	r2, [pc, #568]	@ (8004fc4 <OTM8009A_Init+0x3f0>)
 8004d8c:	21c5      	movs	r1, #197	@ 0xc5
 8004d8e:	4628      	mov	r0, r5
 8004d90:	f000 fac6 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004d94:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004d96:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004d98:	4a8b      	ldr	r2, [pc, #556]	@ (8004fc8 <OTM8009A_Init+0x3f4>)
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	f000 fabf 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004da2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004da4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004da6:	4a89      	ldr	r2, [pc, #548]	@ (8004fcc <OTM8009A_Init+0x3f8>)
 8004da8:	21c4      	movs	r1, #196	@ 0xc4
 8004daa:	4628      	mov	r0, r5
 8004dac:	f000 fab8 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004db0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004db2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004db4:	4a78      	ldr	r2, [pc, #480]	@ (8004f98 <OTM8009A_Init+0x3c4>)
 8004db6:	4619      	mov	r1, r3
 8004db8:	4628      	mov	r0, r5
 8004dba:	f000 fab1 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004dbe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004dc0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004dc2:	4a83      	ldr	r2, [pc, #524]	@ (8004fd0 <OTM8009A_Init+0x3fc>)
 8004dc4:	21c1      	movs	r1, #193	@ 0xc1
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f000 faaa 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004dcc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004dce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004dd0:	4a80      	ldr	r2, [pc, #512]	@ (8004fd4 <OTM8009A_Init+0x400>)
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 faa3 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004dda:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004ddc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004dde:	4a7e      	ldr	r2, [pc, #504]	@ (8004fd8 <OTM8009A_Init+0x404>)
 8004de0:	21b3      	movs	r1, #179	@ 0xb3
 8004de2:	4628      	mov	r0, r5
 8004de4:	f000 fa9c 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004de8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004dea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004dec:	4a5e      	ldr	r2, [pc, #376]	@ (8004f68 <OTM8009A_Init+0x394>)
 8004dee:	4619      	mov	r1, r3
 8004df0:	4628      	mov	r0, r5
 8004df2:	f000 fa95 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004df6:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004df8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004dfa:	4a78      	ldr	r2, [pc, #480]	@ (8004fdc <OTM8009A_Init+0x408>)
 8004dfc:	21ce      	movs	r1, #206	@ 0xce
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f000 fa8e 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004e06:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e08:	4a75      	ldr	r2, [pc, #468]	@ (8004fe0 <OTM8009A_Init+0x40c>)
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f000 fa87 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004e12:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e14:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004e16:	4a73      	ldr	r2, [pc, #460]	@ (8004fe4 <OTM8009A_Init+0x410>)
 8004e18:	21ce      	movs	r1, #206	@ 0xce
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f000 fa80 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e20:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004e22:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e24:	4a70      	ldr	r2, [pc, #448]	@ (8004fe8 <OTM8009A_Init+0x414>)
 8004e26:	4619      	mov	r1, r3
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f000 fa79 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004e2e:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e30:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004e32:	4a6e      	ldr	r2, [pc, #440]	@ (8004fec <OTM8009A_Init+0x418>)
 8004e34:	21ce      	movs	r1, #206	@ 0xce
 8004e36:	4628      	mov	r0, r5
 8004e38:	f000 fa72 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e3c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004e3e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e40:	4a6b      	ldr	r2, [pc, #428]	@ (8004ff0 <OTM8009A_Init+0x41c>)
 8004e42:	4619      	mov	r1, r3
 8004e44:	4628      	mov	r0, r5
 8004e46:	f000 fa6b 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004e4a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e4c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004e4e:	4a69      	ldr	r2, [pc, #420]	@ (8004ff4 <OTM8009A_Init+0x420>)
 8004e50:	21cf      	movs	r1, #207	@ 0xcf
 8004e52:	4628      	mov	r0, r5
 8004e54:	f000 fa64 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e58:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004e5a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e5c:	4a66      	ldr	r2, [pc, #408]	@ (8004ff8 <OTM8009A_Init+0x424>)
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4628      	mov	r0, r5
 8004e62:	f000 fa5d 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004e66:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e68:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004e6a:	4a64      	ldr	r2, [pc, #400]	@ (8004ffc <OTM8009A_Init+0x428>)
 8004e6c:	21cf      	movs	r1, #207	@ 0xcf
 8004e6e:	4628      	mov	r0, r5
 8004e70:	f000 fa56 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e74:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004e76:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e78:	4a3b      	ldr	r2, [pc, #236]	@ (8004f68 <OTM8009A_Init+0x394>)
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	f000 fa4f 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004e82:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e84:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004e86:	4a5e      	ldr	r2, [pc, #376]	@ (8005000 <OTM8009A_Init+0x42c>)
 8004e88:	21cb      	movs	r1, #203	@ 0xcb
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	f000 fa48 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004e92:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e94:	4a5b      	ldr	r2, [pc, #364]	@ (8005004 <OTM8009A_Init+0x430>)
 8004e96:	4619      	mov	r1, r3
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 fa41 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004e9e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004ea0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004ea2:	4a59      	ldr	r2, [pc, #356]	@ (8005008 <OTM8009A_Init+0x434>)
 8004ea4:	21cb      	movs	r1, #203	@ 0xcb
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	f000 fa3a 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004eac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004eae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004eb0:	4a4b      	ldr	r2, [pc, #300]	@ (8004fe0 <OTM8009A_Init+0x40c>)
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	f000 fa33 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004eba:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004ebc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004ebe:	4a53      	ldr	r2, [pc, #332]	@ (800500c <OTM8009A_Init+0x438>)
 8004ec0:	21cb      	movs	r1, #203	@ 0xcb
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	f000 fa2c 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004ec8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004eca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004ecc:	4a46      	ldr	r2, [pc, #280]	@ (8004fe8 <OTM8009A_Init+0x414>)
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f000 fa25 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004ed6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004ed8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004eda:	4a4d      	ldr	r2, [pc, #308]	@ (8005010 <OTM8009A_Init+0x43c>)
 8004edc:	21cb      	movs	r1, #203	@ 0xcb
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f000 fa1e 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004ee4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004ee6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004ee8:	4a41      	ldr	r2, [pc, #260]	@ (8004ff0 <OTM8009A_Init+0x41c>)
 8004eea:	4619      	mov	r1, r3
 8004eec:	4628      	mov	r0, r5
 8004eee:	f000 fa17 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004ef2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004ef4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004ef6:	4a47      	ldr	r2, [pc, #284]	@ (8005014 <OTM8009A_Init+0x440>)
 8004ef8:	21cb      	movs	r1, #203	@ 0xcb
 8004efa:	4628      	mov	r0, r5
 8004efc:	f000 fa10 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004f00:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004f02:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004f04:	4a3c      	ldr	r2, [pc, #240]	@ (8004ff8 <OTM8009A_Init+0x424>)
 8004f06:	4619      	mov	r1, r3
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f000 fa09 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004f0e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004f10:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004f12:	4a41      	ldr	r2, [pc, #260]	@ (8005018 <OTM8009A_Init+0x444>)
 8004f14:	21cb      	movs	r1, #203	@ 0xcb
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 fa02 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004f1c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004f1e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004f20:	4a3e      	ldr	r2, [pc, #248]	@ (800501c <OTM8009A_Init+0x448>)
 8004f22:	4619      	mov	r1, r3
 8004f24:	4628      	mov	r0, r5
 8004f26:	f000 f9fb 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004f2a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004f2c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004f2e:	4a3c      	ldr	r2, [pc, #240]	@ (8005020 <OTM8009A_Init+0x44c>)
 8004f30:	21cb      	movs	r1, #203	@ 0xcb
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 f9f4 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004f38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004f3a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004f3c:	4a39      	ldr	r2, [pc, #228]	@ (8005024 <OTM8009A_Init+0x450>)
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4628      	mov	r0, r5
 8004f42:	f000 f9ed 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004f46:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004f48:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004f4a:	4a37      	ldr	r2, [pc, #220]	@ (8005028 <OTM8009A_Init+0x454>)
 8004f4c:	21cb      	movs	r1, #203	@ 0xcb
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f000 f9e6 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004f54:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004f56:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004f58:	4a03      	ldr	r2, [pc, #12]	@ (8004f68 <OTM8009A_Init+0x394>)
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	e065      	b.n	800502c <OTM8009A_Init+0x458>
 8004f60:	08023e05 	.word	0x08023e05
 8004f64:	08023e01 	.word	0x08023e01
 8004f68:	08023e06 	.word	0x08023e06
 8004f6c:	08023dff 	.word	0x08023dff
 8004f70:	08023e07 	.word	0x08023e07
 8004f74:	08023e08 	.word	0x08023e08
 8004f78:	08023e09 	.word	0x08023e09
 8004f7c:	08023e0a 	.word	0x08023e0a
 8004f80:	08023e0b 	.word	0x08023e0b
 8004f84:	08023e0c 	.word	0x08023e0c
 8004f88:	08023e0d 	.word	0x08023e0d
 8004f8c:	08023e0e 	.word	0x08023e0e
 8004f90:	08023e0f 	.word	0x08023e0f
 8004f94:	08023e10 	.word	0x08023e10
 8004f98:	08023e13 	.word	0x08023e13
 8004f9c:	08023e14 	.word	0x08023e14
 8004fa0:	08023e15 	.word	0x08023e15
 8004fa4:	08023e16 	.word	0x08023e16
 8004fa8:	08023e17 	.word	0x08023e17
 8004fac:	08023dfd 	.word	0x08023dfd
 8004fb0:	08023e18 	.word	0x08023e18
 8004fb4:	08023e19 	.word	0x08023e19
 8004fb8:	08023e1a 	.word	0x08023e1a
 8004fbc:	08023e1b 	.word	0x08023e1b
 8004fc0:	08023e1c 	.word	0x08023e1c
 8004fc4:	08023e1d 	.word	0x08023e1d
 8004fc8:	08023e11 	.word	0x08023e11
 8004fcc:	08023e1e 	.word	0x08023e1e
 8004fd0:	08023e1f 	.word	0x08023e1f
 8004fd4:	08023e20 	.word	0x08023e20
 8004fd8:	08023dfb 	.word	0x08023dfb
 8004fdc:	08023df5 	.word	0x08023df5
 8004fe0:	08023e21 	.word	0x08023e21
 8004fe4:	08023de7 	.word	0x08023de7
 8004fe8:	08023e22 	.word	0x08023e22
 8004fec:	08023dd9 	.word	0x08023dd9
 8004ff0:	08023e23 	.word	0x08023e23
 8004ff4:	08023dcf 	.word	0x08023dcf
 8004ff8:	08023e24 	.word	0x08023e24
 8004ffc:	08023e31 	.word	0x08023e31
 8005000:	08023dc5 	.word	0x08023dc5
 8005004:	08023e25 	.word	0x08023e25
 8005008:	08023db6 	.word	0x08023db6
 800500c:	08023da7 	.word	0x08023da7
 8005010:	08023d9d 	.word	0x08023d9d
 8005014:	08023d8e 	.word	0x08023d8e
 8005018:	08023d7f 	.word	0x08023d7f
 800501c:	08023e26 	.word	0x08023e26
 8005020:	08023d75 	.word	0x08023d75
 8005024:	08023e27 	.word	0x08023e27
 8005028:	08023d6b 	.word	0x08023d6b
 800502c:	f000 f978 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005030:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005032:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005034:	4a8e      	ldr	r2, [pc, #568]	@ (8005270 <OTM8009A_Init+0x69c>)
 8005036:	21cc      	movs	r1, #204	@ 0xcc
 8005038:	4628      	mov	r0, r5
 800503a:	f000 f971 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800503e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005040:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005042:	4a8c      	ldr	r2, [pc, #560]	@ (8005274 <OTM8009A_Init+0x6a0>)
 8005044:	4619      	mov	r1, r3
 8005046:	4628      	mov	r0, r5
 8005048:	f000 f96a 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800504c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800504e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005050:	4a89      	ldr	r2, [pc, #548]	@ (8005278 <OTM8009A_Init+0x6a4>)
 8005052:	21cc      	movs	r1, #204	@ 0xcc
 8005054:	4628      	mov	r0, r5
 8005056:	f000 f963 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800505a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800505c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800505e:	4a87      	ldr	r2, [pc, #540]	@ (800527c <OTM8009A_Init+0x6a8>)
 8005060:	4619      	mov	r1, r3
 8005062:	4628      	mov	r0, r5
 8005064:	f000 f95c 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005068:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800506a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800506c:	4a84      	ldr	r2, [pc, #528]	@ (8005280 <OTM8009A_Init+0x6ac>)
 800506e:	21cc      	movs	r1, #204	@ 0xcc
 8005070:	4628      	mov	r0, r5
 8005072:	f000 f955 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005076:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005078:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800507a:	4a82      	ldr	r2, [pc, #520]	@ (8005284 <OTM8009A_Init+0x6b0>)
 800507c:	4619      	mov	r1, r3
 800507e:	4628      	mov	r0, r5
 8005080:	f000 f94e 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005084:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005086:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005088:	4a7f      	ldr	r2, [pc, #508]	@ (8005288 <OTM8009A_Init+0x6b4>)
 800508a:	21cc      	movs	r1, #204	@ 0xcc
 800508c:	4628      	mov	r0, r5
 800508e:	f000 f947 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005092:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005094:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005096:	4a7d      	ldr	r2, [pc, #500]	@ (800528c <OTM8009A_Init+0x6b8>)
 8005098:	4619      	mov	r1, r3
 800509a:	4628      	mov	r0, r5
 800509c:	f000 f940 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80050a0:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80050a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80050a4:	4a7a      	ldr	r2, [pc, #488]	@ (8005290 <OTM8009A_Init+0x6bc>)
 80050a6:	21cc      	movs	r1, #204	@ 0xcc
 80050a8:	4628      	mov	r0, r5
 80050aa:	f000 f939 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050ae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80050b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050b2:	4a78      	ldr	r2, [pc, #480]	@ (8005294 <OTM8009A_Init+0x6c0>)
 80050b4:	4619      	mov	r1, r3
 80050b6:	4628      	mov	r0, r5
 80050b8:	f000 f932 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80050bc:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80050c0:	4a75      	ldr	r2, [pc, #468]	@ (8005298 <OTM8009A_Init+0x6c4>)
 80050c2:	21cc      	movs	r1, #204	@ 0xcc
 80050c4:	4628      	mov	r0, r5
 80050c6:	f000 f92b 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80050ca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80050cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80050ce:	4a73      	ldr	r2, [pc, #460]	@ (800529c <OTM8009A_Init+0x6c8>)
 80050d0:	4619      	mov	r1, r3
 80050d2:	4628      	mov	r0, r5
 80050d4:	f000 f924 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80050d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80050da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80050dc:	4a70      	ldr	r2, [pc, #448]	@ (80052a0 <OTM8009A_Init+0x6cc>)
 80050de:	21c5      	movs	r1, #197	@ 0xc5
 80050e0:	4628      	mov	r0, r5
 80050e2:	f000 f91d 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80050e6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80050e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80050ea:	4a6e      	ldr	r2, [pc, #440]	@ (80052a4 <OTM8009A_Init+0x6d0>)
 80050ec:	4619      	mov	r1, r3
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 f916 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80050f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80050f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80050f8:	4a6b      	ldr	r2, [pc, #428]	@ (80052a8 <OTM8009A_Init+0x6d4>)
 80050fa:	21f5      	movs	r1, #245	@ 0xf5
 80050fc:	4628      	mov	r0, r5
 80050fe:	f000 f90f 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005102:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005104:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005106:	4a69      	ldr	r2, [pc, #420]	@ (80052ac <OTM8009A_Init+0x6d8>)
 8005108:	4619      	mov	r1, r3
 800510a:	4628      	mov	r0, r5
 800510c:	f000 f908 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005110:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005112:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005114:	4a66      	ldr	r2, [pc, #408]	@ (80052b0 <OTM8009A_Init+0x6dc>)
 8005116:	21c6      	movs	r1, #198	@ 0xc6
 8005118:	4628      	mov	r0, r5
 800511a:	f000 f901 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800511e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005120:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005122:	4a64      	ldr	r2, [pc, #400]	@ (80052b4 <OTM8009A_Init+0x6e0>)
 8005124:	4619      	mov	r1, r3
 8005126:	4628      	mov	r0, r5
 8005128:	f000 f8fa 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800512c:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800512e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005130:	4a61      	ldr	r2, [pc, #388]	@ (80052b8 <OTM8009A_Init+0x6e4>)
 8005132:	21ff      	movs	r1, #255	@ 0xff
 8005134:	4628      	mov	r0, r5
 8005136:	f000 f8f3 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800513a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800513c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800513e:	4a5d      	ldr	r2, [pc, #372]	@ (80052b4 <OTM8009A_Init+0x6e0>)
 8005140:	4619      	mov	r1, r3
 8005142:	4628      	mov	r0, r5
 8005144:	f000 f8ec 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005148:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800514a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800514c:	4a59      	ldr	r2, [pc, #356]	@ (80052b4 <OTM8009A_Init+0x6e0>)
 800514e:	4619      	mov	r1, r3
 8005150:	4628      	mov	r0, r5
 8005152:	f000 f8e5 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005156:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005158:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800515a:	4a58      	ldr	r2, [pc, #352]	@ (80052bc <OTM8009A_Init+0x6e8>)
 800515c:	21e1      	movs	r1, #225	@ 0xe1
 800515e:	4628      	mov	r0, r5
 8005160:	f000 f8de 	bl	8005320 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005164:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005166:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005168:	4a52      	ldr	r2, [pc, #328]	@ (80052b4 <OTM8009A_Init+0x6e0>)
 800516a:	4619      	mov	r1, r3
 800516c:	4628      	mov	r0, r5
 800516e:	f000 f8d7 	bl	8005320 <otm8009a_write_reg>
 8005172:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8005174:	2310      	movs	r3, #16
 8005176:	4a52      	ldr	r2, [pc, #328]	@ (80052c0 <OTM8009A_Init+0x6ec>)
 8005178:	21e2      	movs	r1, #226	@ 0xe2
 800517a:	4628      	mov	r0, r5
 800517c:	f000 f8d0 	bl	8005320 <otm8009a_write_reg>
 8005180:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005182:	2300      	movs	r3, #0
 8005184:	4a4f      	ldr	r2, [pc, #316]	@ (80052c4 <OTM8009A_Init+0x6f0>)
 8005186:	2111      	movs	r1, #17
 8005188:	4628      	mov	r0, r5
 800518a:	f000 f8c9 	bl	8005320 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 800518e:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005190:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8005192:	4638      	mov	r0, r7
 8005194:	f7ff fd11 	bl	8004bba <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8005198:	4f4b      	ldr	r7, [pc, #300]	@ (80052c8 <OTM8009A_Init+0x6f4>)
 800519a:	2e00      	cmp	r6, #0
 800519c:	d061      	beq.n	8005262 <OTM8009A_Init+0x68e>
 800519e:	2e02      	cmp	r6, #2
 80051a0:	d107      	bne.n	80051b2 <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 80051a2:	2300      	movs	r3, #0
 80051a4:	4a49      	ldr	r2, [pc, #292]	@ (80052cc <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80051a6:	213a      	movs	r1, #58	@ 0x3a
 80051a8:	4628      	mov	r0, r5
 80051aa:	f000 f8b9 	bl	8005320 <otm8009a_write_reg>
 80051ae:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80051b0:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80051b2:	f1b8 0f01 	cmp.w	r8, #1
 80051b6:	d157      	bne.n	8005268 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80051b8:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80051ba:	f10d 0207 	add.w	r2, sp, #7
 80051be:	2136      	movs	r1, #54	@ 0x36
 80051c0:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80051c2:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80051c6:	2300      	movs	r3, #0
 80051c8:	f000 f8aa 	bl	8005320 <otm8009a_write_reg>
 80051cc:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80051ce:	2304      	movs	r3, #4
 80051d0:	4a3f      	ldr	r2, [pc, #252]	@ (80052d0 <OTM8009A_Init+0x6fc>)
 80051d2:	212a      	movs	r1, #42	@ 0x2a
 80051d4:	4628      	mov	r0, r5
 80051d6:	f000 f8a3 	bl	8005320 <otm8009a_write_reg>
 80051da:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80051dc:	2304      	movs	r3, #4
 80051de:	4a3d      	ldr	r2, [pc, #244]	@ (80052d4 <OTM8009A_Init+0x700>)
 80051e0:	212b      	movs	r1, #43	@ 0x2b
 80051e2:	4628      	mov	r0, r5
 80051e4:	f000 f89c 	bl	8005320 <otm8009a_write_reg>
 80051e8:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80051ea:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80051ee:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80051f0:	2300      	movs	r3, #0
 80051f2:	4a39      	ldr	r2, [pc, #228]	@ (80052d8 <OTM8009A_Init+0x704>)
 80051f4:	2151      	movs	r1, #81	@ 0x51
 80051f6:	4628      	mov	r0, r5
 80051f8:	f000 f892 	bl	8005320 <otm8009a_write_reg>
 80051fc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80051fe:	4633      	mov	r3, r6
 8005200:	4a36      	ldr	r2, [pc, #216]	@ (80052dc <OTM8009A_Init+0x708>)
 8005202:	2153      	movs	r1, #83	@ 0x53
 8005204:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005206:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005208:	f000 f88a 	bl	8005320 <otm8009a_write_reg>
 800520c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800520e:	4633      	mov	r3, r6
 8005210:	4a33      	ldr	r2, [pc, #204]	@ (80052e0 <OTM8009A_Init+0x70c>)
 8005212:	2155      	movs	r1, #85	@ 0x55
 8005214:	4628      	mov	r0, r5
 8005216:	f000 f883 	bl	8005320 <otm8009a_write_reg>
 800521a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800521c:	4633      	mov	r3, r6
 800521e:	4a31      	ldr	r2, [pc, #196]	@ (80052e4 <OTM8009A_Init+0x710>)
 8005220:	215e      	movs	r1, #94	@ 0x5e
 8005222:	4628      	mov	r0, r5
 8005224:	f000 f87c 	bl	8005320 <otm8009a_write_reg>
 8005228:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800522a:	4633      	mov	r3, r6
 800522c:	4a2e      	ldr	r2, [pc, #184]	@ (80052e8 <OTM8009A_Init+0x714>)
 800522e:	2129      	movs	r1, #41	@ 0x29
 8005230:	4628      	mov	r0, r5
 8005232:	f000 f875 	bl	8005320 <otm8009a_write_reg>
 8005236:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005238:	4633      	mov	r3, r6
 800523a:	4631      	mov	r1, r6
 800523c:	4a1d      	ldr	r2, [pc, #116]	@ (80052b4 <OTM8009A_Init+0x6e0>)
 800523e:	4628      	mov	r0, r5
 8005240:	f000 f86e 	bl	8005320 <otm8009a_write_reg>
 8005244:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8005246:	4633      	mov	r3, r6
 8005248:	4a28      	ldr	r2, [pc, #160]	@ (80052ec <OTM8009A_Init+0x718>)
 800524a:	212c      	movs	r1, #44	@ 0x2c
 800524c:	4628      	mov	r0, r5
 800524e:	f000 f867 	bl	8005320 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8005252:	42c4      	cmn	r4, r0
}
 8005254:	bf14      	ite	ne
 8005256:	f04f 30ff 	movne.w	r0, #4294967295
 800525a:	4630      	moveq	r0, r6
 800525c:	b002      	add	sp, #8
 800525e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005262:	4633      	mov	r3, r6
 8005264:	4a22      	ldr	r2, [pc, #136]	@ (80052f0 <OTM8009A_Init+0x71c>)
 8005266:	e79e      	b.n	80051a6 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8005268:	2300      	movs	r3, #0
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	e7bf      	b.n	80051ee <OTM8009A_Init+0x61a>
 800526e:	bf00      	nop
 8005270:	08023d61 	.word	0x08023d61
 8005274:	08023e25 	.word	0x08023e25
 8005278:	08023d52 	.word	0x08023d52
 800527c:	08023e21 	.word	0x08023e21
 8005280:	08023d43 	.word	0x08023d43
 8005284:	08023e22 	.word	0x08023e22
 8005288:	08023d39 	.word	0x08023d39
 800528c:	08023e23 	.word	0x08023e23
 8005290:	08023d2a 	.word	0x08023d2a
 8005294:	08023e24 	.word	0x08023e24
 8005298:	08023d1b 	.word	0x08023d1b
 800529c:	08023e11 	.word	0x08023e11
 80052a0:	08023e32 	.word	0x08023e32
 80052a4:	08023e33 	.word	0x08023e33
 80052a8:	08023e34 	.word	0x08023e34
 80052ac:	08023e35 	.word	0x08023e35
 80052b0:	08023e36 	.word	0x08023e36
 80052b4:	08023e05 	.word	0x08023e05
 80052b8:	08023d18 	.word	0x08023d18
 80052bc:	08023d08 	.word	0x08023d08
 80052c0:	08023cf8 	.word	0x08023cf8
 80052c4:	08023e28 	.word	0x08023e28
 80052c8:	2400b124 	.word	0x2400b124
 80052cc:	08023e29 	.word	0x08023e29
 80052d0:	08023e3b 	.word	0x08023e3b
 80052d4:	08023e37 	.word	0x08023e37
 80052d8:	08023e2b 	.word	0x08023e2b
 80052dc:	08023e2c 	.word	0x08023e2c
 80052e0:	08023e2d 	.word	0x08023e2d
 80052e4:	08023e2e 	.word	0x08023e2e
 80052e8:	08023e2f 	.word	0x08023e2f
 80052ec:	08023e30 	.word	0x08023e30
 80052f0:	08023e2a 	.word	0x08023e2a

080052f4 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 80052f4:	b160      	cbz	r0, 8005310 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 80052f6:	684b      	ldr	r3, [r1, #4]
 80052f8:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80052fa:	688b      	ldr	r3, [r1, #8]
 80052fc:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 80052fe:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8005300:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8005302:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8005304:	4b04      	ldr	r3, [pc, #16]	@ (8005318 <OTM8009A_RegisterBusIO+0x24>)
 8005306:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005308:	4b04      	ldr	r3, [pc, #16]	@ (800531c <OTM8009A_RegisterBusIO+0x28>)
 800530a:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 800530c:	2000      	movs	r0, #0
 800530e:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8005310:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	08004b9f 	.word	0x08004b9f
 800531c:	08004bad 	.word	0x08004bad

08005320 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8005320:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005322:	6804      	ldr	r4, [r0, #0]
 8005324:	6880      	ldr	r0, [r0, #8]
 8005326:	46a4      	mov	ip, r4
}
 8005328:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800532c:	4760      	bx	ip
	...

08005330 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8005330:	4a10      	ldr	r2, [pc, #64]	@ (8005374 <BSP_I2C4_DeInit+0x44>)
{
 8005332:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8005334:	6813      	ldr	r3, [r2, #0]
 8005336:	3b01      	subs	r3, #1
 8005338:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800533a:	b10b      	cbz	r3, 8005340 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 800533c:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800533e:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8005340:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005344:	480c      	ldr	r0, [pc, #48]	@ (8005378 <BSP_I2C4_DeInit+0x48>)
 8005346:	f001 fe49 	bl	8006fdc <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800534a:	480b      	ldr	r0, [pc, #44]	@ (8005378 <BSP_I2C4_DeInit+0x48>)
 800534c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005350:	f001 fe44 	bl	8006fdc <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8005354:	4a09      	ldr	r2, [pc, #36]	@ (800537c <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8005356:	480a      	ldr	r0, [pc, #40]	@ (8005380 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8005358:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 800535c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005360:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8005364:	f002 f88a 	bl	800747c <HAL_I2C_DeInit>
 8005368:	2800      	cmp	r0, #0
 800536a:	d0e7      	beq.n	800533c <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 800536c:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005370:	e7e5      	b.n	800533e <BSP_I2C4_DeInit+0xe>
 8005372:	bf00      	nop
 8005374:	2400bb88 	.word	0x2400bb88
 8005378:	58020c00 	.word	0x58020c00
 800537c:	58024400 	.word	0x58024400
 8005380:	2400b130 	.word	0x2400b130

08005384 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005384:	2300      	movs	r3, #0
 8005386:	2201      	movs	r2, #1
{
 8005388:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800538a:	6041      	str	r1, [r0, #4]
{
 800538c:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800538e:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005390:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8005394:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005398:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800539c:	f002 f818 	bl	80073d0 <HAL_I2C_Init>
 80053a0:	4601      	mov	r1, r0
 80053a2:	b108      	cbz	r0, 80053a8 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 80053a4:	2001      	movs	r0, #1
}
 80053a6:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80053a8:	4620      	mov	r0, r4
 80053aa:	f002 fa3e 	bl	800782a <HAL_I2CEx_ConfigAnalogFilter>
 80053ae:	4601      	mov	r1, r0
 80053b0:	2800      	cmp	r0, #0
 80053b2:	d1f7      	bne.n	80053a4 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80053b4:	4620      	mov	r0, r4
 80053b6:	f002 fa5e 	bl	8007876 <HAL_I2CEx_ConfigDigitalFilter>
 80053ba:	3800      	subs	r0, #0
 80053bc:	bf18      	it	ne
 80053be:	2001      	movne	r0, #1
 80053c0:	e7f1      	b.n	80053a6 <MX_I2C4_Init+0x22>
	...

080053c4 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 80053c4:	4ba2      	ldr	r3, [pc, #648]	@ (8005650 <BSP_I2C4_Init+0x28c>)
 80053c6:	48a3      	ldr	r0, [pc, #652]	@ (8005654 <BSP_I2C4_Init+0x290>)
{
 80053c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053cc:	b093      	sub	sp, #76	@ 0x4c
  hbus_i2c4.Instance = BUS_I2C4;
 80053ce:	6003      	str	r3, [r0, #0]
  if (I2c4InitCounter == 0U)
 80053d0:	4ba1      	ldr	r3, [pc, #644]	@ (8005658 <BSP_I2C4_Init+0x294>)
 80053d2:	681c      	ldr	r4, [r3, #0]
 80053d4:	b11c      	cbz	r4, 80053de <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 80053d6:	2000      	movs	r0, #0
}
 80053d8:	b013      	add	sp, #76	@ 0x4c
 80053da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 80053de:	2201      	movs	r2, #1
 80053e0:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80053e2:	f002 fa1d 	bl	8007820 <HAL_I2C_GetState>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d1f5      	bne.n	80053d6 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80053ea:	4d9c      	ldr	r5, [pc, #624]	@ (800565c <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80053ec:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80053f0:	2702      	movs	r7, #2
 80053f2:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80053f4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80053f8:	a90d      	add	r1, sp, #52	@ 0x34
 80053fa:	4899      	ldr	r0, [pc, #612]	@ (8005660 <BSP_I2C4_Init+0x29c>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80053fc:	f043 0308 	orr.w	r3, r3, #8
 8005400:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8005404:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	930a      	str	r3, [sp, #40]	@ 0x28
 800540e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005410:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8005414:	f043 0308 	orr.w	r3, r3, #8
 8005418:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800541c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005420:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005428:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800542a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800542e:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005432:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005436:	f001 fce9 	bl	8006e0c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800543a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800543e:	a90d      	add	r1, sp, #52	@ 0x34
 8005440:	4887      	ldr	r0, [pc, #540]	@ (8005660 <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8005442:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005444:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005448:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800544c:	f001 fcde 	bl	8006e0c <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8005450:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8005454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005458:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 800545c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8005460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005464:	930c      	str	r3, [sp, #48]	@ 0x30
 8005466:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 8005468:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800546c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005470:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 8005474:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8005478:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800547c:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005480:	f004 fca4 	bl	8009dcc <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8005484:	2800      	cmp	r0, #0
 8005486:	d06d      	beq.n	8005564 <BSP_I2C4_Init+0x1a0>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005488:	4b76      	ldr	r3, [pc, #472]	@ (8005664 <BSP_I2C4_Init+0x2a0>)
  if (tsdadel_max <= 0)
 800548a:	4622      	mov	r2, r4
 800548c:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 800548e:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005492:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005496:	f8df b1d4 	ldr.w	fp, [pc, #468]	@ 800566c <BSP_I2C4_Init+0x2a8>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800549a:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800549e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80054a2:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 80054a6:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80054a8:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80054ac:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 80054b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 80054b4:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 80054b8:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80054ba:	4b6b      	ldr	r3, [pc, #428]	@ (8005668 <BSP_I2C4_Init+0x2a4>)
 80054bc:	681b      	ldr	r3, [r3, #0]
{
 80054be:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80054c0:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 80054c4:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 80054c8:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80054cc:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 80054d0:	d35b      	bcc.n	800558a <BSP_I2C4_Init+0x1c6>
 80054d2:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80054d4:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80054d6:	9d00      	ldr	r5, [sp, #0]
 80054d8:	42bd      	cmp	r5, r7
 80054da:	d850      	bhi.n	800557e <BSP_I2C4_Init+0x1ba>
 80054dc:	42be      	cmp	r6, r7
 80054de:	d34e      	bcc.n	800557e <BSP_I2C4_Init+0x1ba>
            if(presc != prev_presc)
 80054e0:	4591      	cmp	r9, r2
 80054e2:	d04c      	beq.n	800557e <BSP_I2C4_Init+0x1ba>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80054e4:	2514      	movs	r5, #20
 80054e6:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 80054ea:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80054ec:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80054ee:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80054f2:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80054f4:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80054f8:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80054fc:	d93c      	bls.n	8005578 <BSP_I2C4_Init+0x1b4>
 80054fe:	4a5a      	ldr	r2, [pc, #360]	@ (8005668 <BSP_I2C4_Init+0x2a4>)
 8005500:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005502:	4b59      	ldr	r3, [pc, #356]	@ (8005668 <BSP_I2C4_Init+0x2a4>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005504:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8005508:	4958      	ldr	r1, [pc, #352]	@ (800566c <BSP_I2C4_Init+0x2a8>)
 800550a:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005510:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8005514:	9304      	str	r3, [sp, #16]
 8005516:	f04f 33ff 	mov.w	r3, #4294967295
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	f10b 0332 	add.w	r3, fp, #50	@ 0x32
 8005520:	9309      	str	r3, [sp, #36]	@ 0x24
 8005522:	f5cb 6380 	rsb	r3, fp, #1024	@ 0x400
 8005526:	3301      	adds	r3, #1
 8005528:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800552a:	9b06      	ldr	r3, [sp, #24]
 800552c:	429f      	cmp	r7, r3
 800552e:	d138      	bne.n	80055a2 <BSP_I2C4_Init+0x1de>
        if (idx < I2C_VALID_TIMING_NBR)
 8005530:	9b00      	ldr	r3, [sp, #0]
 8005532:	2b7f      	cmp	r3, #127	@ 0x7f
 8005534:	d816      	bhi.n	8005564 <BSP_I2C4_Init+0x1a0>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005536:	2114      	movs	r1, #20
 8005538:	9a00      	ldr	r2, [sp, #0]
 800553a:	4b4c      	ldr	r3, [pc, #304]	@ (800566c <BSP_I2C4_Init+0x2a8>)
 800553c:	434a      	muls	r2, r1
 800553e:	1899      	adds	r1, r3, r2
 8005540:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8005542:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005544:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005548:	684b      	ldr	r3, [r1, #4]
 800554a:	051b      	lsls	r3, r3, #20
 800554c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005550:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8005552:	688b      	ldr	r3, [r1, #8]
 8005554:	041b      	lsls	r3, r3, #16
 8005556:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800555a:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800555c:	68cb      	ldr	r3, [r1, #12]
 800555e:	021b      	lsls	r3, r3, #8
 8005560:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005562:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005564:	4621      	mov	r1, r4
 8005566:	483b      	ldr	r0, [pc, #236]	@ (8005654 <BSP_I2C4_Init+0x290>)
 8005568:	f7ff ff0c 	bl	8005384 <MX_I2C4_Init>
 800556c:	2800      	cmp	r0, #0
 800556e:	f43f af32 	beq.w	80053d6 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 8005572:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005576:	e72f      	b.n	80053d8 <BSP_I2C4_Init+0x14>
              prev_presc = presc;
 8005578:	4691      	mov	r9, r2
 800557a:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800557e:	f10e 0e01 	add.w	lr, lr, #1
 8005582:	440f      	add	r7, r1
 8005584:	f1be 0f10 	cmp.w	lr, #16
 8005588:	d1a5      	bne.n	80054d6 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800558a:	f1bc 0f10 	cmp.w	ip, #16
 800558e:	4488      	add	r8, r1
 8005590:	d198      	bne.n	80054c4 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005592:	3201      	adds	r2, #1
 8005594:	4401      	add	r1, r0
 8005596:	2a10      	cmp	r2, #16
 8005598:	d191      	bne.n	80054be <BSP_I2C4_Init+0xfa>
 800559a:	f1ba 0f00 	cmp.w	sl, #0
 800559e:	d1ae      	bne.n	80054fe <BSP_I2C4_Init+0x13a>
 80055a0:	e7af      	b.n	8005502 <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80055a2:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80055a4:	f04f 0c00 	mov.w	ip, #0
 80055a8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80055aa:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80055ae:	441d      	add	r5, r3
 80055b0:	eb03 060b 	add.w	r6, r3, fp
 80055b4:	9503      	str	r5, [sp, #12]
 80055b6:	f6a6 0634 	subw	r6, r6, #2100	@ 0x834
 80055ba:	9d02      	ldr	r5, [sp, #8]
 80055bc:	9608      	str	r6, [sp, #32]
 80055be:	1aed      	subs	r5, r5, r3
 80055c0:	006d      	lsls	r5, r5, #1
 80055c2:	9501      	str	r5, [sp, #4]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80055c4:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80055c6:	f240 5214 	movw	r2, #1300	@ 0x514
 80055ca:	f8cd c014 	str.w	ip, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80055ce:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80055d2:	4295      	cmp	r5, r2
 80055d4:	d930      	bls.n	8005638 <BSP_I2C4_Init+0x274>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80055d6:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80055da:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 80055de:	d22b      	bcs.n	8005638 <BSP_I2C4_Init+0x274>
 80055e0:	9e08      	ldr	r6, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80055e2:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80055e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80055ea:	442e      	add	r6, r5
 80055ec:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80055f0:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 80055f4:	f240 4212 	movw	r2, #1042	@ 0x412
 80055f8:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80055fc:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005600:	4592      	cmp	sl, r2
 8005602:	d812      	bhi.n	800562a <BSP_I2C4_Init+0x266>
 8005604:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8005608:	d30f      	bcc.n	800562a <BSP_I2C4_Init+0x266>
 800560a:	4540      	cmp	r0, r8
 800560c:	d20d      	bcs.n	800562a <BSP_I2C4_Init+0x266>
              error = -error;
 800560e:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8005612:	bf28      	it	cs
 8005614:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8005616:	9a04      	ldr	r2, [sp, #16]
 8005618:	4592      	cmp	sl, r2
 800561a:	d206      	bcs.n	800562a <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 800561c:	9a05      	ldr	r2, [sp, #20]
              prev_error = (uint32_t)error;
 800561e:	f8cd a010 	str.w	sl, [sp, #16]
              I2c_valid_timing[count].scll = scll;
 8005622:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8005624:	9a07      	ldr	r2, [sp, #28]
              ret = count;
 8005626:	9700      	str	r7, [sp, #0]
              I2c_valid_timing[count].sclh = sclh;
 8005628:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800562a:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 800562e:	4498      	add	r8, r3
 8005630:	441e      	add	r6, r3
 8005632:	eba9 0903 	sub.w	r9, r9, r3
 8005636:	d1db      	bne.n	80055f0 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005638:	9a01      	ldr	r2, [sp, #4]
 800563a:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 800563e:	441d      	add	r5, r3
 8005640:	eba2 0203 	sub.w	r2, r2, r3
 8005644:	9201      	str	r2, [sp, #4]
 8005646:	d1be      	bne.n	80055c6 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005648:	3701      	adds	r7, #1
 800564a:	3114      	adds	r1, #20
 800564c:	e76d      	b.n	800552a <BSP_I2C4_Init+0x166>
 800564e:	bf00      	nop
 8005650:	58001c00 	.word	0x58001c00
 8005654:	2400b130 	.word	0x2400b130
 8005658:	2400bb88 	.word	0x2400bb88
 800565c:	58024400 	.word	0x58024400
 8005660:	58020c00 	.word	0x58020c00
 8005664:	3b9aca00 	.word	0x3b9aca00
 8005668:	2400b184 	.word	0x2400b184
 800566c:	2400b188 	.word	0x2400b188

08005670 <BSP_I2C4_WriteReg>:
{
 8005670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005672:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8005676:	9200      	str	r2, [sp, #0]
 8005678:	460a      	mov	r2, r1
 800567a:	4601      	mov	r1, r0
 800567c:	4808      	ldr	r0, [pc, #32]	@ (80056a0 <BSP_I2C4_WriteReg+0x30>)
 800567e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005682:	2301      	movs	r3, #1
 8005684:	f001 ff14 	bl	80074b0 <HAL_I2C_Mem_Write>
 8005688:	b140      	cbz	r0, 800569c <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800568a:	4805      	ldr	r0, [pc, #20]	@ (80056a0 <BSP_I2C4_WriteReg+0x30>)
 800568c:	f002 f8cb 	bl	8007826 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005690:	2804      	cmp	r0, #4
 8005692:	bf14      	ite	ne
 8005694:	f06f 0003 	mvnne.w	r0, #3
 8005698:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 800569c:	b004      	add	sp, #16
 800569e:	bd10      	pop	{r4, pc}
 80056a0:	2400b130 	.word	0x2400b130

080056a4 <BSP_I2C4_ReadReg>:
{
 80056a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80056a6:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80056aa:	9200      	str	r2, [sp, #0]
 80056ac:	460a      	mov	r2, r1
 80056ae:	4601      	mov	r1, r0
 80056b0:	4808      	ldr	r0, [pc, #32]	@ (80056d4 <BSP_I2C4_ReadReg+0x30>)
 80056b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80056b6:	2301      	movs	r3, #1
 80056b8:	f001 ffd4 	bl	8007664 <HAL_I2C_Mem_Read>
 80056bc:	b140      	cbz	r0, 80056d0 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80056be:	4805      	ldr	r0, [pc, #20]	@ (80056d4 <BSP_I2C4_ReadReg+0x30>)
 80056c0:	f002 f8b1 	bl	8007826 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80056c4:	2804      	cmp	r0, #4
 80056c6:	bf14      	ite	ne
 80056c8:	f06f 0003 	mvnne.w	r0, #3
 80056cc:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 80056d0:	b004      	add	sp, #16
 80056d2:	bd10      	pop	{r4, pc}
 80056d4:	2400b130 	.word	0x2400b130

080056d8 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 80056d8:	f000 bd08 	b.w	80060ec <HAL_GetTick>

080056dc <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 80056dc:	4a09      	ldr	r2, [pc, #36]	@ (8005704 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80056de:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 80056e2:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 80056e4:	684a      	ldr	r2, [r1, #4]
 80056e6:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 80056e8:	2201      	movs	r2, #1
 80056ea:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 80056ec:	688a      	ldr	r2, [r1, #8]
 80056ee:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 80056f0:	680a      	ldr	r2, [r1, #0]
 80056f2:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80056f4:	2200      	movs	r2, #0
 80056f6:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 80056fa:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 80056fc:	68ca      	ldr	r2, [r1, #12]
 80056fe:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8005700:	f003 bc94 	b.w	800902c <HAL_QSPI_Init>
 8005704:	52005000 	.word	0x52005000

08005708 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8005708:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800570a:	b988      	cbnz	r0, 8005730 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800570c:	4c0a      	ldr	r4, [pc, #40]	@ (8005738 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 800570e:	480b      	ldr	r0, [pc, #44]	@ (800573c <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005710:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005712:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005714:	b94b      	cbnz	r3, 800572a <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005716:	f7ff f9ba 	bl	8004a8e <MT25TL01G_EnableMemoryMappedModeSTR>
 800571a:	b110      	cbz	r0, 8005722 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800571c:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8005720:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8005722:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8005724:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8005726:	7023      	strb	r3, [r4, #0]
 8005728:	e7fa      	b.n	8005720 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800572a:	f7ff f966 	bl	80049fa <MT25TL01G_EnableMemoryMappedModeDTR>
 800572e:	e7f4      	b.n	800571a <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8005730:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005734:	e7f4      	b.n	8005720 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8005736:	bf00      	nop
 8005738:	2400bb8c 	.word	0x2400bb8c
 800573c:	240099c8 	.word	0x240099c8

08005740 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8005740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005742:	460c      	mov	r4, r1
 8005744:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005746:	bb30      	cbnz	r0, 8005796 <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8005748:	4d17      	ldr	r5, [pc, #92]	@ (80057a8 <BSP_QSPI_ConfigFlash+0x68>)
 800574a:	782b      	ldrb	r3, [r5, #0]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d025      	beq.n	800579c <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005750:	fab2 f382 	clz	r3, r2
 8005754:	4e15      	ldr	r6, [pc, #84]	@ (80057ac <BSP_QSPI_ConfigFlash+0x6c>)
 8005756:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8005758:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800575e:	f003 fc65 	bl	800902c <HAL_QSPI_Init>
 8005762:	b9f0      	cbnz	r0, 80057a2 <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8005764:	786b      	ldrb	r3, [r5, #1]
 8005766:	2b03      	cmp	r3, #3
 8005768:	d10f      	bne.n	800578a <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800576a:	2c03      	cmp	r4, #3
 800576c:	d105      	bne.n	800577a <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800576e:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005770:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8005772:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8005774:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005776:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8005778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800577a:	4630      	mov	r0, r6
 800577c:	f7ff f921 	bl	80049c2 <MT25TL01G_ExitQPIMode>
 8005780:	2800      	cmp	r0, #0
 8005782:	d0f4      	beq.n	800576e <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005784:	f06f 0004 	mvn.w	r0, #4
 8005788:	e7f6      	b.n	8005778 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 800578a:	2c03      	cmp	r4, #3
 800578c:	d1ef      	bne.n	800576e <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800578e:	4630      	mov	r0, r6
 8005790:	f7ff f8fb 	bl	800498a <MT25TL01G_EnterQPIMode>
 8005794:	e7f4      	b.n	8005780 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 8005796:	f06f 0001 	mvn.w	r0, #1
 800579a:	e7ed      	b.n	8005778 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800579c:	f06f 0019 	mvn.w	r0, #25
 80057a0:	e7ea      	b.n	8005778 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 80057a2:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80057a6:	e7e7      	b.n	8005778 <BSP_QSPI_ConfigFlash+0x38>
 80057a8:	2400bb8c 	.word	0x2400bb8c
 80057ac:	240099c8 	.word	0x240099c8

080057b0 <BSP_QSPI_Init>:
{
 80057b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b4:	460c      	mov	r4, r1
 80057b6:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80057b8:	2800      	cmp	r0, #0
 80057ba:	f040 81ac 	bne.w	8005b16 <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 80057be:	4d03      	ldr	r5, [pc, #12]	@ (80057cc <BSP_QSPI_Init+0x1c>)
 80057c0:	782f      	ldrb	r7, [r5, #0]
 80057c2:	b12f      	cbz	r7, 80057d0 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 80057c4:	2000      	movs	r0, #0
}
 80057c6:	b024      	add	sp, #144	@ 0x90
 80057c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057cc:	2400bb8c 	.word	0x2400bb8c
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 80057d0:	4bc3      	ldr	r3, [pc, #780]	@ (8005ae0 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80057d2:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80057d6:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80057d8:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 80057da:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80057de:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80057e2:	48c0      	ldr	r0, [pc, #768]	@ (8005ae4 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80057e4:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 80057e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057ec:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80057f0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80057f4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80057f8:	9201      	str	r2, [sp, #4]
 80057fa:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 80057fc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80057fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005802:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8005804:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005806:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800580a:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 800580c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005810:	f042 0202 	orr.w	r2, r2, #2
 8005814:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005818:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800581c:	f002 0202 	and.w	r2, r2, #2
 8005820:	9202      	str	r2, [sp, #8]
 8005822:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8005824:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005828:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800582c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005830:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005834:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005838:	9203      	str	r2, [sp, #12]
 800583a:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800583c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005840:	f042 0208 	orr.w	r2, r2, #8
 8005844:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005848:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800584c:	f002 0208 	and.w	r2, r2, #8
 8005850:	9204      	str	r2, [sp, #16]
 8005852:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8005854:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005858:	f042 0220 	orr.w	r2, r2, #32
 800585c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005860:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005864:	f002 0220 	and.w	r2, r2, #32
 8005868:	9205      	str	r2, [sp, #20]
 800586a:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800586c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005870:	f042 0220 	orr.w	r2, r2, #32
 8005874:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005878:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800587c:	f002 0220 	and.w	r2, r2, #32
 8005880:	9206      	str	r2, [sp, #24]
 8005882:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8005884:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005888:	f042 0220 	orr.w	r2, r2, #32
 800588c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005890:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005894:	f002 0220 	and.w	r2, r2, #32
 8005898:	9207      	str	r2, [sp, #28]
 800589a:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800589c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80058a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058ac:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80058b0:	9208      	str	r2, [sp, #32]
 80058b2:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 80058b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80058bc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80058c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058c4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80058c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80058ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 80058cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80058d4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80058d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058dc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80058e0:	920a      	str	r2, [sp, #40]	@ 0x28
 80058e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 80058e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058ec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80058f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058f4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80058f8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80058fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 80058fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005904:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800590c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005910:	930c      	str	r3, [sp, #48]	@ 0x30
 8005912:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005914:	2302      	movs	r3, #2
 8005916:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800591a:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800591c:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800591e:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005922:	f001 fa73 	bl	8006e0c <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005926:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005928:	a916      	add	r1, sp, #88	@ 0x58
 800592a:	486f      	ldr	r0, [pc, #444]	@ (8005ae8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800592c:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800592e:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005932:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005936:	f001 fa69 	bl	8006e0c <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800593a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800593e:	a916      	add	r1, sp, #88	@ 0x58
 8005940:	486a      	ldr	r0, [pc, #424]	@ (8005aec <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005942:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005944:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005946:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005948:	f001 fa60 	bl	8006e0c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800594c:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800594e:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005952:	4867      	ldr	r0, [pc, #412]	@ (8005af0 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005954:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005958:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800595a:	f001 fa57 	bl	8006e0c <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800595e:	a916      	add	r1, sp, #88	@ 0x58
 8005960:	4864      	ldr	r0, [pc, #400]	@ (8005af4 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005962:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005966:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800596a:	f001 fa4f 	bl	8006e0c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800596e:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005970:	a916      	add	r1, sp, #88	@ 0x58
 8005972:	485f      	ldr	r0, [pc, #380]	@ (8005af0 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005974:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005976:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005978:	f001 fa48 	bl	8006e0c <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800597c:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800597e:	a916      	add	r1, sp, #88	@ 0x58
 8005980:	485c      	ldr	r0, [pc, #368]	@ (8005af4 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005982:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005984:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005986:	f001 fa41 	bl	8006e0c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800598a:	a916      	add	r1, sp, #88	@ 0x58
 800598c:	4856      	ldr	r0, [pc, #344]	@ (8005ae8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800598e:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005992:	f001 fa3b 	bl	8006e0c <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005996:	a916      	add	r1, sp, #88	@ 0x58
 8005998:	4856      	ldr	r0, [pc, #344]	@ (8005af4 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800599a:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800599e:	f001 fa35 	bl	8006e0c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80059a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80059a6:	a916      	add	r1, sp, #88	@ 0x58
 80059a8:	484f      	ldr	r0, [pc, #316]	@ (8005ae8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80059aa:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80059ac:	f001 fa2e 	bl	8006e0c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80059b0:	463a      	mov	r2, r7
 80059b2:	210f      	movs	r1, #15
 80059b4:	205c      	movs	r0, #92	@ 0x5c
 80059b6:	f000 fbd3 	bl	8006160 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80059ba:	205c      	movs	r0, #92	@ 0x5c
 80059bc:	f000 fc02 	bl	80061c4 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 80059c0:	a811      	add	r0, sp, #68	@ 0x44
 80059c2:	f7fe ff36 	bl	8004832 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 80059c6:	7863      	ldrb	r3, [r4, #1]
 80059c8:	4a4b      	ldr	r2, [pc, #300]	@ (8005af8 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 80059ca:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 80059ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80059d2:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80059d6:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80059da:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 80059de:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 80059e2:	a90d      	add	r1, sp, #52	@ 0x34
 80059e4:	4845      	ldr	r0, [pc, #276]	@ (8005afc <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80059e6:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 80059e8:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80059ea:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 80059ec:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80059ee:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 80059f0:	f7ff fe74 	bl	80056dc <MX_QSPI_Init>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	f040 8091 	bne.w	8005b1c <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80059fa:	2103      	movs	r1, #3
 80059fc:	483f      	ldr	r0, [pc, #252]	@ (8005afc <BSP_QSPI_Init+0x34c>)
 80059fe:	f7ff f88c 	bl	8004b1a <MT25TL01G_ResetEnable>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	f040 8084 	bne.w	8005b10 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005a08:	2103      	movs	r1, #3
 8005a0a:	483c      	ldr	r0, [pc, #240]	@ (8005afc <BSP_QSPI_Init+0x34c>)
 8005a0c:	f7ff f8a6 	bl	8004b5c <MT25TL01G_ResetMemory>
 8005a10:	2800      	cmp	r0, #0
 8005a12:	d17d      	bne.n	8005b10 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005a14:	7869      	ldrb	r1, [r5, #1]
 8005a16:	4839      	ldr	r0, [pc, #228]	@ (8005afc <BSP_QSPI_Init+0x34c>)
 8005a18:	f7fe ff1c 	bl	8004854 <MT25TL01G_AutoPollingMemReady>
 8005a1c:	4601      	mov	r1, r0
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d176      	bne.n	8005b10 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005a22:	4836      	ldr	r0, [pc, #216]	@ (8005afc <BSP_QSPI_Init+0x34c>)
 8005a24:	f7ff f879 	bl	8004b1a <MT25TL01G_ResetEnable>
 8005a28:	4601      	mov	r1, r0
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d170      	bne.n	8005b10 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005a2e:	4833      	ldr	r0, [pc, #204]	@ (8005afc <BSP_QSPI_Init+0x34c>)
 8005a30:	f7ff f894 	bl	8004b5c <MT25TL01G_ResetMemory>
 8005a34:	4601      	mov	r1, r0
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d16a      	bne.n	8005b10 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005a3a:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8005a3c:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005a3e:	482f      	ldr	r0, [pc, #188]	@ (8005afc <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005a40:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005a42:	f7fe ff07 	bl	8004854 <MT25TL01G_AutoPollingMemReady>
 8005a46:	2800      	cmp	r0, #0
 8005a48:	d162      	bne.n	8005b10 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005a4a:	7869      	ldrb	r1, [r5, #1]
 8005a4c:	482b      	ldr	r0, [pc, #172]	@ (8005afc <BSP_QSPI_Init+0x34c>)
 8005a4e:	f7fe ff70 	bl	8004932 <MT25TL01G_Enter4BytesAddressMode>
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d15c      	bne.n	8005b10 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005a56:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8005a5a:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8005a5e:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a60:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005a64:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005a66:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a68:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005a6a:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005a6c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8005a70:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 8005a72:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005a74:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005a78:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005a7c:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a80:	481e      	ldr	r0, [pc, #120]	@ (8005afc <BSP_QSPI_Init+0x34c>)
 8005a82:	f003 fb1f 	bl	80090c4 <HAL_QSPI_Command>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d142      	bne.n	8005b10 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a8e:	f10d 0102 	add.w	r1, sp, #2
 8005a92:	481a      	ldr	r0, [pc, #104]	@ (8005afc <BSP_QSPI_Init+0x34c>)
 8005a94:	f003 fbb6 	bl	8009204 <HAL_QSPI_Receive>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d139      	bne.n	8005b10 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005a9c:	7869      	ldrb	r1, [r5, #1]
 8005a9e:	4817      	ldr	r0, [pc, #92]	@ (8005afc <BSP_QSPI_Init+0x34c>)
 8005aa0:	f7fe ff03 	bl	80048aa <MT25TL01G_WriteEnable>
 8005aa4:	bba0      	cbnz	r0, 8005b10 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005aa6:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aac:	a916      	add	r1, sp, #88	@ 0x58
 8005aae:	4813      	ldr	r0, [pc, #76]	@ (8005afc <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005ab0:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8005ab2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005ab6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005aba:	051b      	lsls	r3, r3, #20
 8005abc:	0d1b      	lsrs	r3, r3, #20
 8005abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ac6:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005aca:	f003 fafb 	bl	80090c4 <HAL_QSPI_Command>
 8005ace:	b9f8      	cbnz	r0, 8005b10 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ad4:	f10d 0102 	add.w	r1, sp, #2
 8005ad8:	4808      	ldr	r0, [pc, #32]	@ (8005afc <BSP_QSPI_Init+0x34c>)
 8005ada:	f003 fb37 	bl	800914c <HAL_QSPI_Transmit>
 8005ade:	e00f      	b.n	8005b00 <BSP_QSPI_Init+0x350>
 8005ae0:	58024400 	.word	0x58024400
 8005ae4:	58020400 	.word	0x58020400
 8005ae8:	58021800 	.word	0x58021800
 8005aec:	58020c00 	.word	0x58020c00
 8005af0:	58021c00 	.word	0x58021c00
 8005af4:	58021400 	.word	0x58021400
 8005af8:	08023e40 	.word	0x08023e40
 8005afc:	240099c8 	.word	0x240099c8
 8005b00:	b930      	cbnz	r0, 8005b10 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8005b02:	7862      	ldrb	r2, [r4, #1]
 8005b04:	7821      	ldrb	r1, [r4, #0]
 8005b06:	f7ff fe1b 	bl	8005740 <BSP_QSPI_ConfigFlash>
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	f43f ae5a 	beq.w	80057c4 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b10:	f06f 0004 	mvn.w	r0, #4
 8005b14:	e657      	b.n	80057c6 <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 8005b16:	f06f 0001 	mvn.w	r0, #1
 8005b1a:	e654      	b.n	80057c6 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005b1c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005b20:	e651      	b.n	80057c6 <BSP_QSPI_Init+0x16>
 8005b22:	bf00      	nop

08005b24 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8005b24:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8005b26:	4604      	mov	r4, r0
 8005b28:	b970      	cbnz	r0, 8005b48 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8005b2a:	4b09      	ldr	r3, [pc, #36]	@ (8005b50 <BSP_SDRAM_DeInit+0x2c>)
 8005b2c:	4809      	ldr	r0, [pc, #36]	@ (8005b54 <BSP_SDRAM_DeInit+0x30>)
 8005b2e:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8005b30:	f004 ffa6 	bl	800aa80 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8005b34:	207a      	movs	r0, #122	@ 0x7a
 8005b36:	f000 fb53 	bl	80061e0 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8005b3a:	4807      	ldr	r0, [pc, #28]	@ (8005b58 <BSP_SDRAM_DeInit+0x34>)
 8005b3c:	4b07      	ldr	r3, [pc, #28]	@ (8005b5c <BSP_SDRAM_DeInit+0x38>)
 8005b3e:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005b40:	f002 fffc 	bl	8008b3c <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8005b44:	4620      	mov	r0, r4
}
 8005b46:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005b48:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005b4c:	e7fb      	b.n	8005b46 <BSP_SDRAM_DeInit+0x22>
 8005b4e:	bf00      	nop
 8005b50:	52004140 	.word	0x52004140
 8005b54:	2400bc90 	.word	0x2400bc90
 8005b58:	2400bb98 	.word	0x2400bb98
 8005b5c:	52000040 	.word	0x52000040

08005b60 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005b60:	2201      	movs	r2, #1
 8005b62:	4915      	ldr	r1, [pc, #84]	@ (8005bb8 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005b64:	4b15      	ldr	r3, [pc, #84]	@ (8005bbc <MX_SDRAM_Init+0x5c>)
{
 8005b66:	b510      	push	{r4, lr}
 8005b68:	b088      	sub	sp, #32
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005b6a:	6082      	str	r2, [r0, #8]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005b6c:	2440      	movs	r4, #64	@ 0x40
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005b6e:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005b72:	2104      	movs	r1, #4
 8005b74:	2220      	movs	r2, #32
 8005b76:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005b7a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8005b7e:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005b82:	2200      	movs	r2, #0
 8005b84:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8005b88:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005b8c:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8005b90:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005b92:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005b94:	2207      	movs	r2, #7
 8005b96:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8005b98:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005b9c:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8005b9e:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005ba0:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8005ba4:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005ba8:	f004 ff42 	bl	800aa30 <HAL_SDRAM_Init>
}
 8005bac:	3800      	subs	r0, #0
 8005bae:	bf18      	it	ne
 8005bb0:	2001      	movne	r0, #1
 8005bb2:	b008      	add	sp, #32
 8005bb4:	bd10      	pop	{r4, pc}
 8005bb6:	bf00      	nop
 8005bb8:	52004140 	.word	0x52004140
 8005bbc:	2400bc90 	.word	0x2400bc90

08005bc0 <BSP_SDRAM_Init>:
{
 8005bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005bc2:	4605      	mov	r5, r0
{
 8005bc4:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	f040 80dd 	bne.w	8005d86 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8005bcc:	4b71      	ldr	r3, [pc, #452]	@ (8005d94 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005bce:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005bd0:	a909      	add	r1, sp, #36	@ 0x24
 8005bd2:	4871      	ldr	r0, [pc, #452]	@ (8005d98 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005bd4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005bd8:	4c70      	ldr	r4, [pc, #448]	@ (8005d9c <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005bda:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005bde:	4e70      	ldr	r6, [pc, #448]	@ (8005da0 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005be0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005be4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005be8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005bec:	9201      	str	r2, [sp, #4]
 8005bee:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8005bf0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005bf4:	f042 0201 	orr.w	r2, r2, #1
 8005bf8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005bfc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005c00:	f002 0201 	and.w	r2, r2, #1
 8005c04:	9202      	str	r2, [sp, #8]
 8005c06:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c0c:	f042 0208 	orr.w	r2, r2, #8
 8005c10:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005c14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c18:	f002 0208 	and.w	r2, r2, #8
 8005c1c:	9203      	str	r2, [sp, #12]
 8005c1e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005c20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c24:	f042 0210 	orr.w	r2, r2, #16
 8005c28:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005c2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c30:	f002 0210 	and.w	r2, r2, #16
 8005c34:	9204      	str	r2, [sp, #16]
 8005c36:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c3c:	f042 0220 	orr.w	r2, r2, #32
 8005c40:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005c44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c48:	f002 0220 	and.w	r2, r2, #32
 8005c4c:	9205      	str	r2, [sp, #20]
 8005c4e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005c50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c58:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005c5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c60:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005c64:	9206      	str	r2, [sp, #24]
 8005c66:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005c68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005c70:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005c74:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c78:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005c7c:	9207      	str	r2, [sp, #28]
 8005c7e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005c80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c88:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005c8c:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c96:	9308      	str	r3, [sp, #32]
 8005c98:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005ca0:	230c      	movs	r3, #12
 8005ca2:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005ca6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005caa:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005cac:	f001 f8ae 	bl	8006e0c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005cb0:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005cb4:	a909      	add	r1, sp, #36	@ 0x24
 8005cb6:	483b      	ldr	r0, [pc, #236]	@ (8005da4 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005cb8:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005cba:	f001 f8a7 	bl	8006e0c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005cbe:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005cc2:	a909      	add	r1, sp, #36	@ 0x24
 8005cc4:	4838      	ldr	r0, [pc, #224]	@ (8005da8 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005cc6:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005cc8:	f001 f8a0 	bl	8006e0c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005ccc:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005cd0:	a909      	add	r1, sp, #36	@ 0x24
 8005cd2:	4836      	ldr	r0, [pc, #216]	@ (8005dac <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005cd4:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005cd6:	f001 f899 	bl	8006e0c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005cda:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005cde:	a909      	add	r1, sp, #36	@ 0x24
 8005ce0:	4833      	ldr	r0, [pc, #204]	@ (8005db0 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005ce2:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005ce4:	f001 f892 	bl	8006e0c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005ce8:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005cec:	a909      	add	r1, sp, #36	@ 0x24
 8005cee:	4831      	ldr	r0, [pc, #196]	@ (8005db4 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005cf0:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005cf2:	f001 f88b 	bl	8006e0c <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005cf6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005cfa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005cfe:	f240 2002 	movw	r0, #514	@ 0x202
 8005d02:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005d06:	6334      	str	r4, [r6, #48]	@ 0x30
 8005d08:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005d0a:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005d0e:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005d12:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005d14:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005d16:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8005d18:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8005d1a:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005d1e:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005d22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005d26:	4b24      	ldr	r3, [pc, #144]	@ (8005db8 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005d28:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005d2a:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8005d2c:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8005d30:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005d34:	f002 ff02 	bl	8008b3c <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f002 fe90 	bl	8008a5e <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8005d3e:	462a      	mov	r2, r5
 8005d40:	210f      	movs	r1, #15
 8005d42:	207a      	movs	r0, #122	@ 0x7a
 8005d44:	f000 fa0c 	bl	8006160 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8005d48:	207a      	movs	r0, #122	@ 0x7a
 8005d4a:	f000 fa3b 	bl	80061c4 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8005d4e:	4630      	mov	r0, r6
 8005d50:	f7ff ff06 	bl	8005b60 <MX_SDRAM_Init>
 8005d54:	b9d0      	cbnz	r0, 8005d8c <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005d56:	4919      	ldr	r1, [pc, #100]	@ (8005dbc <BSP_SDRAM_Init+0x1fc>)
 8005d58:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8005d5a:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8005d5e:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8005d62:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8005d64:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005d68:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8005d6a:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005d6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005d72:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005d74:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005d76:	f7fe fd2f 	bl	80047d8 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	bf18      	it	ne
 8005d7e:	f06f 0004 	mvnne.w	r0, #4
}
 8005d82:	b00f      	add	sp, #60	@ 0x3c
 8005d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005d86:	f06f 0001 	mvn.w	r0, #1
 8005d8a:	e7fa      	b.n	8005d82 <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8005d8c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005d90:	e7f7      	b.n	8005d82 <BSP_SDRAM_Init+0x1c2>
 8005d92:	bf00      	nop
 8005d94:	58024400 	.word	0x58024400
 8005d98:	58020c00 	.word	0x58020c00
 8005d9c:	2400bc04 	.word	0x2400bc04
 8005da0:	2400bc90 	.word	0x2400bc90
 8005da4:	58021000 	.word	0x58021000
 8005da8:	58021400 	.word	0x58021400
 8005dac:	58021800 	.word	0x58021800
 8005db0:	58021c00 	.word	0x58021c00
 8005db4:	58022000 	.word	0x58022000
 8005db8:	52000040 	.word	0x52000040
 8005dbc:	2400bc70 	.word	0x2400bc70

08005dc0 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8005dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005dc8:	4606      	mov	r6, r0
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	d15c      	bne.n	8005e88 <BSP_TS_Init+0xc8>
 8005dce:	680b      	ldr	r3, [r1, #0]
 8005dd0:	1e5a      	subs	r2, r3, #1
 8005dd2:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8005dd6:	d257      	bcs.n	8005e88 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005dd8:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005dda:	1e51      	subs	r1, r2, #1
 8005ddc:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8005de0:	d252      	bcs.n	8005e88 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8005de2:	4293      	cmp	r3, r2
 8005de4:	bf28      	it	cs
 8005de6:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005de8:	68e2      	ldr	r2, [r4, #12]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d84c      	bhi.n	8005e88 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005dee:	2370      	movs	r3, #112	@ 0x70
 8005df0:	2254      	movs	r2, #84	@ 0x54
 8005df2:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005df6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005ecc <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005dfa:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8005dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8005eb8 <BSP_TS_Init+0xf8>)
 8005e00:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8005e02:	4b2e      	ldr	r3, [pc, #184]	@ (8005ebc <BSP_TS_Init+0xfc>)
 8005e04:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8005e06:	4b2e      	ldr	r3, [pc, #184]	@ (8005ec0 <BSP_TS_Init+0x100>)
 8005e08:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8005e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8005ec4 <BSP_TS_Init+0x104>)
 8005e0c:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8005e0e:	4b2e      	ldr	r3, [pc, #184]	@ (8005ec8 <BSP_TS_Init+0x108>)
 8005e10:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005e12:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005e16:	a906      	add	r1, sp, #24
 8005e18:	482c      	ldr	r0, [pc, #176]	@ (8005ecc <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005e1a:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005e1e:	f7fe fbe1 	bl	80045e4 <FT6X06_RegisterBusIO>
 8005e22:	b9c0      	cbnz	r0, 8005e56 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8005e24:	4669      	mov	r1, sp
 8005e26:	4829      	ldr	r0, [pc, #164]	@ (8005ecc <BSP_TS_Init+0x10c>)
 8005e28:	f7fe fb26 	bl	8004478 <FT6X06_ReadID>
 8005e2c:	b998      	cbnz	r0, 8005e56 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 8005e2e:	9b00      	ldr	r3, [sp, #0]
 8005e30:	2b11      	cmp	r3, #17
 8005e32:	d110      	bne.n	8005e56 <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8005e34:	a903      	add	r1, sp, #12
 8005e36:	4825      	ldr	r0, [pc, #148]	@ (8005ecc <BSP_TS_Init+0x10c>)
 8005e38:	f7fe fad2 	bl	80043e0 <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 8005e3c:	4f24      	ldr	r7, [pc, #144]	@ (8005ed0 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8005e3e:	4b25      	ldr	r3, [pc, #148]	@ (8005ed4 <BSP_TS_Init+0x114>)
 8005e40:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8005edc <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8005e44:	4821      	ldr	r0, [pc, #132]	@ (8005ecc <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8005e46:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 8005e4a:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4798      	blx	r3
 8005e52:	4605      	mov	r5, r0
 8005e54:	b1d8      	cbz	r0, 8005e8e <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 8005e56:	b116      	cbz	r6, 8005e5e <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 8005e58:	f04f 35ff 	mov.w	r5, #4294967295
 8005e5c:	e010      	b.n	8005e80 <BSP_TS_Init+0xc0>
 8005e5e:	2601      	movs	r6, #1
 8005e60:	e7d7      	b.n	8005e12 <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005e62:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005e64:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005e66:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005e68:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005e6a:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005e6c:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005e6e:	68e3      	ldr	r3, [r4, #12]
 8005e70:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005e72:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005e74:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005e76:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005e78:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005e7a:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005e7c:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8005e80:	4628      	mov	r0, r5
 8005e82:	b00c      	add	sp, #48	@ 0x30
 8005e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005e88:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8005e8c:	e7f8      	b.n	8005e80 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005e8e:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005e90:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005e92:	4e11      	ldr	r6, [pc, #68]	@ (8005ed8 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005e94:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005e96:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8005e98:	6863      	ldr	r3, [r4, #4]
 8005e9a:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8005e9c:	68a3      	ldr	r3, [r4, #8]
 8005e9e:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8005ea0:	68e3      	ldr	r3, [r4, #12]
 8005ea2:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	4798      	blx	r3
 8005eac:	2800      	cmp	r0, #0
 8005eae:	dad8      	bge.n	8005e62 <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005eb0:	f06f 0504 	mvn.w	r5, #4
 8005eb4:	e7e4      	b.n	8005e80 <BSP_TS_Init+0xc0>
 8005eb6:	bf00      	nop
 8005eb8:	080053c5 	.word	0x080053c5
 8005ebc:	08005331 	.word	0x08005331
 8005ec0:	080056a5 	.word	0x080056a5
 8005ec4:	08005671 	.word	0x08005671
 8005ec8:	080056d9 	.word	0x080056d9
 8005ecc:	2400bcc4 	.word	0x2400bcc4
 8005ed0:	2400bcec 	.word	0x2400bcec
 8005ed4:	24000038 	.word	0x24000038
 8005ed8:	2400bcf0 	.word	0x2400bcf0
 8005edc:	2400bd18 	.word	0x2400bd18

08005ee0 <BSP_TS_GetState>:
{
 8005ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d14d      	bne.n	8005f86 <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8005eea:	4b28      	ldr	r3, [pc, #160]	@ (8005f8c <BSP_TS_GetState+0xac>)
 8005eec:	a901      	add	r1, sp, #4
 8005eee:	4a28      	ldr	r2, [pc, #160]	@ (8005f90 <BSP_TS_GetState+0xb0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6810      	ldr	r0, [r2, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	4798      	blx	r3
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	db41      	blt.n	8005f80 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005efc:	4925      	ldr	r1, [pc, #148]	@ (8005f94 <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 8005efe:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005f00:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8005f02:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8005f04:	2e00      	cmp	r6, #0
 8005f06:	d037      	beq.n	8005f78 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005f08:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8005f0a:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005f0e:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 8005f12:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005f16:	bf02      	ittt	eq
 8005f18:	4694      	moveq	ip, r2
      x_oriented = state.TouchX;
 8005f1a:	461a      	moveq	r2, r3
      y_oriented = state.TouchY;
 8005f1c:	4663      	moveq	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8005f1e:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8005f22:	bf1c      	itt	ne
 8005f24:	f10e 3cff 	addne.w	ip, lr, #4294967295
 8005f28:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8005f2c:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8005f30:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8005f32:	bf44      	itt	mi
 8005f34:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 8005f38:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005f3a:	680f      	ldr	r7, [r1, #0]
 8005f3c:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005f3e:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8005f40:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005f42:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8005f44:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005f46:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005f4a:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005f4e:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005f50:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005f52:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005f54:	bf8c      	ite	hi
 8005f56:	eba2 0c05 	subhi.w	ip, r2, r5
 8005f5a:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8005f5e:	4283      	cmp	r3, r0
 8005f60:	bf8c      	ite	hi
 8005f62:	1a1e      	subhi	r6, r3, r0
 8005f64:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8005f66:	4567      	cmp	r7, ip
 8005f68:	d301      	bcc.n	8005f6e <BSP_TS_GetState+0x8e>
 8005f6a:	42b7      	cmp	r7, r6
 8005f6c:	d205      	bcs.n	8005f7a <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8005f6e:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8005f70:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8005f72:	2000      	movs	r0, #0
}
 8005f74:	b005      	add	sp, #20
 8005f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8005f78:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8005f7a:	e9c4 5001 	strd	r5, r0, [r4, #4]
 8005f7e:	e7f8      	b.n	8005f72 <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f80:	f06f 0004 	mvn.w	r0, #4
 8005f84:	e7f6      	b.n	8005f74 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8005f86:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005f8a:	e7f3      	b.n	8005f74 <BSP_TS_GetState+0x94>
 8005f8c:	2400bd18 	.word	0x2400bd18
 8005f90:	2400bcec 	.word	0x2400bcec
 8005f94:	2400bcf0 	.word	0x2400bcf0

08005f98 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005f98:	4b2d      	ldr	r3, [pc, #180]	@ (8006050 <SystemInit+0xb8>)
 8005f9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005f9e:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8005fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	f042 0210 	orr.w	r2, r2, #16
 8005fac:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005fae:	4a29      	ldr	r2, [pc, #164]	@ (8006054 <SystemInit+0xbc>)
 8005fb0:	6813      	ldr	r3, [r2, #0]
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	2b06      	cmp	r3, #6
 8005fb8:	d805      	bhi.n	8005fc6 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005fba:	6813      	ldr	r3, [r2, #0]
 8005fbc:	f023 030f 	bic.w	r3, r3, #15
 8005fc0:	f043 0307 	orr.w	r3, r3, #7
 8005fc4:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005fc6:	4b24      	ldr	r3, [pc, #144]	@ (8006058 <SystemInit+0xc0>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	f042 0201 	orr.w	r2, r2, #1
 8005fce:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005fd4:	4a21      	ldr	r2, [pc, #132]	@ (800605c <SystemInit+0xc4>)
 8005fd6:	6819      	ldr	r1, [r3, #0]
 8005fd8:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005fda:	491e      	ldr	r1, [pc, #120]	@ (8006054 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8005fdc:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005fde:	680a      	ldr	r2, [r1, #0]
 8005fe0:	0712      	lsls	r2, r2, #28
 8005fe2:	d505      	bpl.n	8005ff0 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005fe4:	680a      	ldr	r2, [r1, #0]
 8005fe6:	f022 020f 	bic.w	r2, r2, #15
 8005fea:	f042 0207 	orr.w	r2, r2, #7
 8005fee:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005ff0:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005ff2:	491b      	ldr	r1, [pc, #108]	@ (8006060 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8005ff4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8005ff6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8005ff8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8005ffa:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005ffc:	4919      	ldr	r1, [pc, #100]	@ (8006064 <SystemInit+0xcc>)
 8005ffe:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006000:	4919      	ldr	r1, [pc, #100]	@ (8006068 <SystemInit+0xd0>)
 8006002:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006004:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006006:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006008:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800600a:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800600c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800600e:	6819      	ldr	r1, [r3, #0]
 8006010:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8006014:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006016:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8006018:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800601c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8006020:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006024:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006028:	4b10      	ldr	r3, [pc, #64]	@ (800606c <SystemInit+0xd4>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f36f 030f 	bfc	r3, #0, #16
 8006030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006034:	d203      	bcs.n	800603e <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006036:	4b0e      	ldr	r3, [pc, #56]	@ (8006070 <SystemInit+0xd8>)
 8006038:	2201      	movs	r2, #1
 800603a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800603e:	4b0d      	ldr	r3, [pc, #52]	@ (8006074 <SystemInit+0xdc>)
 8006040:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8006044:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8006046:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800604a:	4b01      	ldr	r3, [pc, #4]	@ (8006050 <SystemInit+0xb8>)
 800604c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800604e:	4770      	bx	lr
 8006050:	e000ed00 	.word	0xe000ed00
 8006054:	52002000 	.word	0x52002000
 8006058:	58024400 	.word	0x58024400
 800605c:	eaf6ed7f 	.word	0xeaf6ed7f
 8006060:	02020200 	.word	0x02020200
 8006064:	01ff0000 	.word	0x01ff0000
 8006068:	01010280 	.word	0x01010280
 800606c:	5c001000 	.word	0x5c001000
 8006070:	51008000 	.word	0x51008000
 8006074:	52004000 	.word	0x52004000

08006078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006078:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800607a:	2003      	movs	r0, #3
 800607c:	f000 f85e 	bl	800613c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006080:	f003 fca8 	bl	80099d4 <HAL_RCC_GetSysClockFreq>
 8006084:	490f      	ldr	r1, [pc, #60]	@ (80060c4 <HAL_Init+0x4c>)
 8006086:	4a10      	ldr	r2, [pc, #64]	@ (80060c8 <HAL_Init+0x50>)
 8006088:	698b      	ldr	r3, [r1, #24]
 800608a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800608e:	5cd3      	ldrb	r3, [r2, r3]
 8006090:	f003 031f 	and.w	r3, r3, #31
 8006094:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006096:	698b      	ldr	r3, [r1, #24]
 8006098:	f003 030f 	and.w	r3, r3, #15
 800609c:	5cd3      	ldrb	r3, [r2, r3]
 800609e:	4a0b      	ldr	r2, [pc, #44]	@ (80060cc <HAL_Init+0x54>)
 80060a0:	f003 031f 	and.w	r3, r3, #31
 80060a4:	fa20 f303 	lsr.w	r3, r0, r3
 80060a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060aa:	4b09      	ldr	r3, [pc, #36]	@ (80060d0 <HAL_Init+0x58>)
 80060ac:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80060ae:	2000      	movs	r0, #0
 80060b0:	f7fb fa9c 	bl	80015ec <HAL_InitTick>
 80060b4:	4604      	mov	r4, r0
 80060b6:	b918      	cbnz	r0, 80060c0 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80060b8:	f7fa ff88 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80060bc:	4620      	mov	r0, r4
 80060be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80060c0:	2401      	movs	r4, #1
 80060c2:	e7fb      	b.n	80060bc <HAL_Init+0x44>
 80060c4:	58024400 	.word	0x58024400
 80060c8:	08023e48 	.word	0x08023e48
 80060cc:	24000068 	.word	0x24000068
 80060d0:	2400006c 	.word	0x2400006c

080060d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80060d4:	4a03      	ldr	r2, [pc, #12]	@ (80060e4 <HAL_IncTick+0x10>)
 80060d6:	4b04      	ldr	r3, [pc, #16]	@ (80060e8 <HAL_IncTick+0x14>)
 80060d8:	6811      	ldr	r1, [r2, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	440b      	add	r3, r1
 80060de:	6013      	str	r3, [r2, #0]
}
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	2400bd1c 	.word	0x2400bd1c
 80060e8:	24000070 	.word	0x24000070

080060ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80060ec:	4b01      	ldr	r3, [pc, #4]	@ (80060f4 <HAL_GetTick+0x8>)
 80060ee:	6818      	ldr	r0, [r3, #0]
}
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	2400bd1c 	.word	0x2400bd1c

080060f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80060fc:	f7ff fff6 	bl	80060ec <HAL_GetTick>
 8006100:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006102:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006104:	bf1e      	ittt	ne
 8006106:	4b04      	ldrne	r3, [pc, #16]	@ (8006118 <HAL_Delay+0x20>)
 8006108:	781b      	ldrbne	r3, [r3, #0]
 800610a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800610c:	f7ff ffee 	bl	80060ec <HAL_GetTick>
 8006110:	1b43      	subs	r3, r0, r5
 8006112:	42a3      	cmp	r3, r4
 8006114:	d3fa      	bcc.n	800610c <HAL_Delay+0x14>
  {
  }
}
 8006116:	bd38      	pop	{r3, r4, r5, pc}
 8006118:	24000070 	.word	0x24000070

0800611c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800611c:	4b01      	ldr	r3, [pc, #4]	@ (8006124 <HAL_GetREVID+0x8>)
 800611e:	6818      	ldr	r0, [r3, #0]
}
 8006120:	0c00      	lsrs	r0, r0, #16
 8006122:	4770      	bx	lr
 8006124:	5c001000 	.word	0x5c001000

08006128 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8006128:	4a03      	ldr	r2, [pc, #12]	@ (8006138 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 800612a:	6853      	ldr	r3, [r2, #4]
 800612c:	ea23 0300 	bic.w	r3, r3, r0
 8006130:	430b      	orrs	r3, r1
 8006132:	6053      	str	r3, [r2, #4]
}
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	58000400 	.word	0x58000400

0800613c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800613c:	4907      	ldr	r1, [pc, #28]	@ (800615c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800613e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006140:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006142:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006146:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800614a:	0412      	lsls	r2, r2, #16
 800614c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800614e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006150:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8006158:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800615a:	4770      	bx	lr
 800615c:	e000ed00 	.word	0xe000ed00

08006160 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006160:	4b16      	ldr	r3, [pc, #88]	@ (80061bc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006162:	b530      	push	{r4, r5, lr}
 8006164:	68dc      	ldr	r4, [r3, #12]
 8006166:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800616a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800616e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006170:	2b04      	cmp	r3, #4
 8006172:	bf28      	it	cs
 8006174:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006176:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006178:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800617c:	bf8c      	ite	hi
 800617e:	3c03      	subhi	r4, #3
 8006180:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006182:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8006186:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006188:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800618c:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006190:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006194:	fa03 f304 	lsl.w	r3, r3, r4
 8006198:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800619c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80061a0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80061a2:	db06      	blt.n	80061b2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061a4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80061a8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80061ac:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80061b0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061b2:	f000 000f 	and.w	r0, r0, #15
 80061b6:	4a02      	ldr	r2, [pc, #8]	@ (80061c0 <HAL_NVIC_SetPriority+0x60>)
 80061b8:	5413      	strb	r3, [r2, r0]
 80061ba:	e7f9      	b.n	80061b0 <HAL_NVIC_SetPriority+0x50>
 80061bc:	e000ed00 	.word	0xe000ed00
 80061c0:	e000ed14 	.word	0xe000ed14

080061c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80061c4:	2800      	cmp	r0, #0
 80061c6:	db07      	blt.n	80061d8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061c8:	2301      	movs	r3, #1
 80061ca:	0941      	lsrs	r1, r0, #5
 80061cc:	f000 001f 	and.w	r0, r0, #31
 80061d0:	4a02      	ldr	r2, [pc, #8]	@ (80061dc <HAL_NVIC_EnableIRQ+0x18>)
 80061d2:	4083      	lsls	r3, r0
 80061d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	e000e100 	.word	0xe000e100

080061e0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80061e0:	2800      	cmp	r0, #0
 80061e2:	db0c      	blt.n	80061fe <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061e4:	0943      	lsrs	r3, r0, #5
 80061e6:	2201      	movs	r2, #1
 80061e8:	f000 001f 	and.w	r0, r0, #31
 80061ec:	4904      	ldr	r1, [pc, #16]	@ (8006200 <HAL_NVIC_DisableIRQ+0x20>)
 80061ee:	3320      	adds	r3, #32
 80061f0:	4082      	lsls	r2, r0
 80061f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80061f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80061fa:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80061fe:	4770      	bx	lr
 8006200:	e000e100 	.word	0xe000e100

08006204 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006204:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006208:	4b04      	ldr	r3, [pc, #16]	@ (800621c <HAL_MPU_Disable+0x18>)
 800620a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800620c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006210:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006212:	2200      	movs	r2, #0
 8006214:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	e000ed00 	.word	0xe000ed00

08006220 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006220:	4b06      	ldr	r3, [pc, #24]	@ (800623c <HAL_MPU_Enable+0x1c>)
 8006222:	f040 0001 	orr.w	r0, r0, #1
 8006226:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800622a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800622c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006230:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006232:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006236:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800623a:	4770      	bx	lr
 800623c:	e000ed00 	.word	0xe000ed00

08006240 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006240:	7843      	ldrb	r3, [r0, #1]
 8006242:	4a14      	ldr	r2, [pc, #80]	@ (8006294 <HAL_MPU_ConfigRegion+0x54>)
 8006244:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006248:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800624c:	f023 0301 	bic.w	r3, r3, #1
 8006250:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006254:	6843      	ldr	r3, [r0, #4]
 8006256:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800625a:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800625c:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800625e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006260:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006264:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006266:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006268:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800626a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800626e:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006270:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006274:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006276:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800627a:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800627c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006280:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006282:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006286:	7a01      	ldrb	r1, [r0, #8]
 8006288:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800628c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	e000ed00 	.word	0xe000ed00

08006298 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006298:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800629a:	4604      	mov	r4, r0
 800629c:	b908      	cbnz	r0, 80062a2 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800629e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80062a0:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80062a2:	7f43      	ldrb	r3, [r0, #29]
 80062a4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80062a8:	b913      	cbnz	r3, 80062b0 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80062aa:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80062ac:	f7fa fea6 	bl	8000ffc <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80062b0:	2302      	movs	r3, #2
 80062b2:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80062b4:	7923      	ldrb	r3, [r4, #4]
 80062b6:	b9e3      	cbnz	r3, 80062f2 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	4a13      	ldr	r2, [pc, #76]	@ (8006308 <HAL_CRC_Init+0x70>)
 80062bc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	f022 0218 	bic.w	r2, r2, #24
 80062c4:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80062c6:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80062c8:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80062ca:	b9d2      	cbnz	r2, 8006302 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80062cc:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80062d0:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80062d2:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	6961      	ldr	r1, [r4, #20]
 80062d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80062dc:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80062de:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80062e0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062e8:	430a      	orrs	r2, r1
 80062ea:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80062ec:	2301      	movs	r3, #1
 80062ee:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80062f0:	e7d6      	b.n	80062a0 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80062f2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80062f6:	4620      	mov	r0, r4
 80062f8:	f000 f808 	bl	800630c <HAL_CRCEx_Polynomial_Set>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d0e2      	beq.n	80062c6 <HAL_CRC_Init+0x2e>
 8006300:	e7cd      	b.n	800629e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006302:	6922      	ldr	r2, [r4, #16]
 8006304:	e7e4      	b.n	80062d0 <HAL_CRC_Init+0x38>
 8006306:	bf00      	nop
 8006308:	04c11db7 	.word	0x04c11db7

0800630c <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800630c:	07cb      	lsls	r3, r1, #31
{
 800630e:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006310:	d50d      	bpl.n	800632e <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006312:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006314:	3b01      	subs	r3, #1
 8006316:	d31d      	bcc.n	8006354 <HAL_CRCEx_Polynomial_Set+0x48>
 8006318:	fa21 f403 	lsr.w	r4, r1, r3
 800631c:	07e4      	lsls	r4, r4, #31
 800631e:	d5f9      	bpl.n	8006314 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8006320:	2a10      	cmp	r2, #16
 8006322:	d013      	beq.n	800634c <HAL_CRCEx_Polynomial_Set+0x40>
 8006324:	2a10      	cmp	r2, #16
 8006326:	d804      	bhi.n	8006332 <HAL_CRCEx_Polynomial_Set+0x26>
 8006328:	b13a      	cbz	r2, 800633a <HAL_CRCEx_Polynomial_Set+0x2e>
 800632a:	2a08      	cmp	r2, #8
 800632c:	d010      	beq.n	8006350 <HAL_CRCEx_Polynomial_Set+0x44>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
        {
          status =   HAL_ERROR;
 800632e:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8006330:	e00b      	b.n	800634a <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 8006332:	2a18      	cmp	r2, #24
 8006334:	d1fb      	bne.n	800632e <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 8006336:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8006338:	d8f9      	bhi.n	800632e <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800633a:	6800      	ldr	r0, [r0, #0]
 800633c:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800633e:	6883      	ldr	r3, [r0, #8]
 8006340:	f023 0318 	bic.w	r3, r3, #24
 8006344:	4313      	orrs	r3, r2
 8006346:	6083      	str	r3, [r0, #8]
 8006348:	2000      	movs	r0, #0
}
 800634a:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800634c:	2b07      	cmp	r3, #7
 800634e:	e7f3      	b.n	8006338 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 8006350:	2b0f      	cmp	r3, #15
 8006352:	e7f1      	b.n	8006338 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8006354:	2a10      	cmp	r2, #16
 8006356:	d1e5      	bne.n	8006324 <HAL_CRCEx_Polynomial_Set+0x18>
 8006358:	e7e9      	b.n	800632e <HAL_CRCEx_Polynomial_Set+0x22>

0800635a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800635a:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800635c:	4604      	mov	r4, r0
 800635e:	2800      	cmp	r0, #0
 8006360:	d036      	beq.n	80063d0 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006362:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8006366:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800636a:	b91b      	cbnz	r3, 8006374 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800636c:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006370:	f7fa fe5c 	bl	800102c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006374:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006376:	69e0      	ldr	r0, [r4, #28]
 8006378:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800637a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006382:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006384:	6819      	ldr	r1, [r3, #0]
 8006386:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 800638a:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 800638e:	430a      	orrs	r2, r1
 8006390:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006392:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006394:	68a2      	ldr	r2, [r4, #8]
 8006396:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 800639a:	4302      	orrs	r2, r0
 800639c:	f021 0101 	bic.w	r1, r1, #1
 80063a0:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80063a2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80063a4:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80063a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063a8:	f36f 020f 	bfc	r2, #0, #16
 80063ac:	430a      	orrs	r2, r1
 80063ae:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80063b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80063b2:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80063b6:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80063ba:	0552      	lsls	r2, r2, #21
 80063bc:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80063c0:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80063c2:	430a      	orrs	r2, r1
 80063c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80063c6:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80063c8:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80063ca:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 80063ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80063d0:	2001      	movs	r0, #1
 80063d2:	e7fc      	b.n	80063ce <HAL_DMA2D_Init+0x74>

080063d4 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 80063d4:	4770      	bx	lr

080063d6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 80063d6:	4770      	bx	lr

080063d8 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80063d8:	6803      	ldr	r3, [r0, #0]
{
 80063da:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80063dc:	685e      	ldr	r6, [r3, #4]
{
 80063de:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80063e0:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80063e2:	07f2      	lsls	r2, r6, #31
 80063e4:	d514      	bpl.n	8006410 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80063e6:	05e9      	lsls	r1, r5, #23
 80063e8:	d512      	bpl.n	8006410 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063f0:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80063f2:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80063f4:	f042 0201 	orr.w	r2, r2, #1
 80063f8:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80063fa:	2201      	movs	r2, #1
 80063fc:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80063fe:	2304      	movs	r3, #4
 8006400:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006404:	2300      	movs	r3, #0
 8006406:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800640a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800640c:	b103      	cbz	r3, 8006410 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 800640e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006410:	06b2      	lsls	r2, r6, #26
 8006412:	d516      	bpl.n	8006442 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006414:	04ab      	lsls	r3, r5, #18
 8006416:	d514      	bpl.n	8006442 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006420:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006422:	2220      	movs	r2, #32
 8006424:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006426:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006428:	f043 0302 	orr.w	r3, r3, #2
 800642c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800642e:	2304      	movs	r3, #4
 8006430:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006434:	2300      	movs	r3, #0
 8006436:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800643a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800643c:	b10b      	cbz	r3, 8006442 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 800643e:	4620      	mov	r0, r4
 8006440:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006442:	0730      	lsls	r0, r6, #28
 8006444:	d516      	bpl.n	8006474 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006446:	0529      	lsls	r1, r5, #20
 8006448:	d514      	bpl.n	8006474 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006452:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006454:	2208      	movs	r2, #8
 8006456:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006458:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800645a:	f043 0304 	orr.w	r3, r3, #4
 800645e:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006460:	2304      	movs	r3, #4
 8006462:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006466:	2300      	movs	r3, #0
 8006468:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800646c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800646e:	b10b      	cbz	r3, 8006474 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8006470:	4620      	mov	r0, r4
 8006472:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006474:	0772      	lsls	r2, r6, #29
 8006476:	d50b      	bpl.n	8006490 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006478:	056b      	lsls	r3, r5, #21
 800647a:	d509      	bpl.n	8006490 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800647c:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800647e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006486:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006488:	2204      	movs	r2, #4
 800648a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800648c:	f7ff ffa2 	bl	80063d4 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006490:	07b0      	lsls	r0, r6, #30
 8006492:	d514      	bpl.n	80064be <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006494:	05a9      	lsls	r1, r5, #22
 8006496:	d512      	bpl.n	80064be <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80064a0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80064a2:	2202      	movs	r2, #2
 80064a4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80064a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064a8:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80064aa:	2301      	movs	r3, #1
 80064ac:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80064b0:	2300      	movs	r3, #0
 80064b2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 80064b6:	6a23      	ldr	r3, [r4, #32]
 80064b8:	b10b      	cbz	r3, 80064be <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 80064ba:	4620      	mov	r0, r4
 80064bc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80064be:	06f2      	lsls	r2, r6, #27
 80064c0:	d513      	bpl.n	80064ea <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80064c2:	04eb      	lsls	r3, r5, #19
 80064c4:	d511      	bpl.n	80064ea <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80064c6:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80064c8:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80064d0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80064d2:	2210      	movs	r2, #16
 80064d4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80064d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064d8:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80064da:	2301      	movs	r3, #1
 80064dc:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80064e0:	2300      	movs	r3, #0
 80064e2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80064e6:	f7ff ff76 	bl	80063d6 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 80064ea:	bd70      	pop	{r4, r5, r6, pc}

080064ec <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 80064ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f0:	4607      	mov	r7, r0
 80064f2:	460d      	mov	r5, r1
 80064f4:	4614      	mov	r4, r2
 80064f6:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80064f8:	f7ff fdf8 	bl	80060ec <HAL_GetTick>
 80064fc:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006502:	07d2      	lsls	r2, r2, #31
 8006504:	d50a      	bpl.n	800651c <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006506:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800650a:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 800650c:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800650e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006512:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8006516:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8006518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800651c:	f7ff fde6 	bl	80060ec <HAL_GetTick>
 8006520:	eba0 0008 	sub.w	r0, r0, r8
 8006524:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006528:	d9e9      	bls.n	80064fe <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 800652a:	2003      	movs	r0, #3
 800652c:	e7f4      	b.n	8006518 <DSI_ShortWrite.constprop.0+0x2c>

0800652e <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800652e:	7c03      	ldrb	r3, [r0, #16]
{
 8006530:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8006532:	2b01      	cmp	r3, #1
 8006534:	d05b      	beq.n	80065ee <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8006536:	6803      	ldr	r3, [r0, #0]
 8006538:	2000      	movs	r0, #0
 800653a:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800653e:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006542:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8006544:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006546:	d507      	bpl.n	8006558 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8006548:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800654c:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 8006550:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 8006554:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8006558:	0788      	lsls	r0, r1, #30
 800655a:	d505      	bpl.n	8006568 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800655c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8006560:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 8006564:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8006568:	0748      	lsls	r0, r1, #29
 800656a:	d505      	bpl.n	8006578 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800656c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006570:	f040 0001 	orr.w	r0, r0, #1
 8006574:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8006578:	0708      	lsls	r0, r1, #28
 800657a:	d505      	bpl.n	8006588 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800657c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006580:	f040 0002 	orr.w	r0, r0, #2
 8006584:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8006588:	06c8      	lsls	r0, r1, #27
 800658a:	d505      	bpl.n	8006598 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800658c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006590:	f040 000c 	orr.w	r0, r0, #12
 8006594:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8006598:	0688      	lsls	r0, r1, #26
 800659a:	d505      	bpl.n	80065a8 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800659c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80065a0:	f040 0010 	orr.w	r0, r0, #16
 80065a4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80065a8:	0648      	lsls	r0, r1, #25
 80065aa:	d505      	bpl.n	80065b8 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80065ac:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80065b0:	f040 0020 	orr.w	r0, r0, #32
 80065b4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80065b8:	0608      	lsls	r0, r1, #24
 80065ba:	d505      	bpl.n	80065c8 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80065bc:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80065c0:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 80065c4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80065c8:	05c8      	lsls	r0, r1, #23
 80065ca:	d505      	bpl.n	80065d8 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80065cc:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80065d0:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80065d4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80065d8:	0589      	lsls	r1, r1, #22
 80065da:	d505      	bpl.n	80065e8 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80065dc:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 80065e0:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 80065e4:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80065e8:	2000      	movs	r0, #0
 80065ea:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 80065ec:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80065ee:	2002      	movs	r0, #2
}
 80065f0:	4770      	bx	lr
	...

080065f4 <HAL_DSI_Init>:
{
 80065f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80065f6:	460d      	mov	r5, r1
  if (hdsi == NULL)
 80065f8:	4604      	mov	r4, r0
 80065fa:	2800      	cmp	r0, #0
 80065fc:	f000 80ea 	beq.w	80067d4 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006600:	7c43      	ldrb	r3, [r0, #17]
 8006602:	b90b      	cbnz	r3, 8006608 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8006604:	f7fa fd36 	bl	8001074 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006608:	2303      	movs	r3, #3
 800660a:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800660c:	2300      	movs	r3, #0
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006616:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800661a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800661e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006622:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800662a:	f7ff fd5f 	bl	80060ec <HAL_GetTick>
 800662e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006630:	6822      	ldr	r2, [r4, #0]
 8006632:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8006636:	04d9      	lsls	r1, r3, #19
 8006638:	d56e      	bpl.n	8006718 <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800663a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800663e:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8006642:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8006646:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800664a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800664e:	e9d5 0300 	ldrd	r0, r3, [r5]
 8006652:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006654:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8006658:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800665a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 800665e:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006660:	430b      	orrs	r3, r1
 8006662:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8006666:	2300      	movs	r3, #0
 8006668:	9301      	str	r3, [sp, #4]
 800666a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800666e:	f043 0301 	orr.w	r3, r3, #1
 8006672:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 8006676:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8006682:	f7ff fd39 	bl	80060f8 <HAL_Delay>
  tickstart = HAL_GetTick();
 8006686:	f7ff fd31 	bl	80060ec <HAL_GetTick>
 800668a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8006692:	05d2      	lsls	r2, r2, #23
 8006694:	d548      	bpl.n	8006728 <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 8006696:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006698:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 800669a:	9202      	str	r2, [sp, #8]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	f042 0201 	orr.w	r2, r2, #1
 80066a2:	605a      	str	r2, [r3, #4]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	f002 0201 	and.w	r2, r2, #1
 80066aa:	9202      	str	r2, [sp, #8]
 80066ac:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80066b4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80066ba:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80066bc:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80066be:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80066c2:	f042 0202 	orr.w	r2, r2, #2
 80066c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80066ca:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80066ce:	f042 0204 	orr.w	r2, r2, #4
 80066d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80066d6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80066da:	f022 0203 	bic.w	r2, r2, #3
 80066de:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80066e2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80066e6:	430a      	orrs	r2, r1
 80066e8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 80066ec:	f7ff fcfe 	bl	80060ec <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80066f0:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80066f2:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80066f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066f8:	079b      	lsls	r3, r3, #30
 80066fa:	d025      	beq.n	8006748 <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006702:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8006706:	2b94      	cmp	r3, #148	@ 0x94
 8006708:	d025      	beq.n	8006756 <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800670a:	f7ff fcef 	bl	80060ec <HAL_GetTick>
 800670e:	1b80      	subs	r0, r0, r6
 8006710:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006714:	d9f2      	bls.n	80066fc <HAL_DSI_Init+0x108>
 8006716:	e014      	b.n	8006742 <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006718:	f7ff fce8 	bl	80060ec <HAL_GetTick>
 800671c:	1b80      	subs	r0, r0, r6
 800671e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006722:	d985      	bls.n	8006630 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8006724:	2003      	movs	r0, #3
 8006726:	e053      	b.n	80067d0 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006728:	f7ff fce0 	bl	80060ec <HAL_GetTick>
 800672c:	1b80      	subs	r0, r0, r6
 800672e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006732:	d9ab      	bls.n	800668c <HAL_DSI_Init+0x98>
 8006734:	e7f6      	b.n	8006724 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006736:	f7ff fcd9 	bl	80060ec <HAL_GetTick>
 800673a:	1b80      	subs	r0, r0, r6
 800673c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006740:	d902      	bls.n	8006748 <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 8006742:	2300      	movs	r3, #0
 8006744:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 8006746:	e7ed      	b.n	8006724 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800674e:	f003 0314 	and.w	r3, r3, #20
 8006752:	2b14      	cmp	r3, #20
 8006754:	d1ef      	bne.n	8006736 <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006756:	686b      	ldr	r3, [r5, #4]
 8006758:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800675c:	4a1e      	ldr	r2, [pc, #120]	@ (80067d8 <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 800675e:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006760:	2b01      	cmp	r3, #1
 8006762:	bf38      	it	cc
 8006764:	2301      	movcc	r3, #1
 8006766:	435a      	muls	r2, r3
 8006768:	68ab      	ldr	r3, [r5, #8]
 800676a:	f003 0303 	and.w	r3, r3, #3
 800676e:	409a      	lsls	r2, r3
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	434b      	muls	r3, r1
 8006774:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800677e:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8006782:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8006786:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800678a:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800678c:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800678e:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 8006792:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006796:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 800679a:	9003      	str	r0, [sp, #12]
 800679c:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 800679e:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 80067a0:	f022 0201 	bic.w	r2, r2, #1
 80067a4:	605a      	str	r2, [r3, #4]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	f002 0201 	and.w	r2, r2, #1
 80067ac:	9203      	str	r2, [sp, #12]
 80067ae:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80067b0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80067b4:	f022 0203 	bic.w	r2, r2, #3
 80067b8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80067bc:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80067c0:	430a      	orrs	r2, r1
 80067c2:	f042 0201 	orr.w	r2, r2, #1
 80067c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 80067ca:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80067cc:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 80067ce:	7463      	strb	r3, [r4, #17]
}
 80067d0:	b004      	add	sp, #16
 80067d2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80067d4:	2001      	movs	r0, #1
 80067d6:	e7fb      	b.n	80067d0 <HAL_DSI_Init+0x1dc>
 80067d8:	003d0900 	.word	0x003d0900

080067dc <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 80067dc:	4770      	bx	lr

080067de <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80067de:	6803      	ldr	r3, [r0, #0]
 80067e0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80067e4:	07d1      	lsls	r1, r2, #31
{
 80067e6:	b510      	push	{r4, lr}
 80067e8:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80067ea:	d508      	bpl.n	80067fe <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80067ec:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80067f0:	07d2      	lsls	r2, r2, #31
 80067f2:	d504      	bpl.n	80067fe <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80067f4:	2201      	movs	r2, #1
 80067f6:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 80067fa:	f7fb fb85 	bl	8001f08 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8006804:	0791      	lsls	r1, r2, #30
 8006806:	d509      	bpl.n	800681c <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8006808:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800680c:	0792      	lsls	r2, r2, #30
 800680e:	d505      	bpl.n	800681c <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006810:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006812:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006814:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006818:	f7fb fbaa 	bl	8001f70 <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 800681c:	69a3      	ldr	r3, [r4, #24]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d04e      	beq.n	80068c0 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8006822:	6821      	ldr	r1, [r4, #0]
 8006824:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006828:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 800682c:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800682e:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006832:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 8006836:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006838:	b291      	uxth	r1, r2
 800683a:	b119      	cbz	r1, 8006844 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800683c:	6961      	ldr	r1, [r4, #20]
 800683e:	f041 0101 	orr.w	r1, r1, #1
 8006842:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8006844:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 8006848:	d003      	beq.n	8006852 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800684a:	6962      	ldr	r2, [r4, #20]
 800684c:	f042 0202 	orr.w	r2, r2, #2
 8006850:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8006852:	07d8      	lsls	r0, r3, #31
 8006854:	d503      	bpl.n	800685e <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8006856:	6962      	ldr	r2, [r4, #20]
 8006858:	f042 0204 	orr.w	r2, r2, #4
 800685c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800685e:	0799      	lsls	r1, r3, #30
 8006860:	d503      	bpl.n	800686a <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8006862:	6962      	ldr	r2, [r4, #20]
 8006864:	f042 0208 	orr.w	r2, r2, #8
 8006868:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800686a:	f013 0f0c 	tst.w	r3, #12
 800686e:	d003      	beq.n	8006878 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8006870:	6962      	ldr	r2, [r4, #20]
 8006872:	f042 0210 	orr.w	r2, r2, #16
 8006876:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8006878:	06da      	lsls	r2, r3, #27
 800687a:	d503      	bpl.n	8006884 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800687c:	6962      	ldr	r2, [r4, #20]
 800687e:	f042 0220 	orr.w	r2, r2, #32
 8006882:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8006884:	0698      	lsls	r0, r3, #26
 8006886:	d503      	bpl.n	8006890 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006888:	6962      	ldr	r2, [r4, #20]
 800688a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800688e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8006890:	0659      	lsls	r1, r3, #25
 8006892:	d503      	bpl.n	800689c <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8006894:	6962      	ldr	r2, [r4, #20]
 8006896:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800689a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800689c:	061a      	lsls	r2, r3, #24
 800689e:	d503      	bpl.n	80068a8 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80068a0:	6962      	ldr	r2, [r4, #20]
 80068a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068a6:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80068a8:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 80068ac:	d003      	beq.n	80068b6 <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80068ae:	6963      	ldr	r3, [r4, #20]
 80068b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068b4:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80068b6:	6963      	ldr	r3, [r4, #20]
 80068b8:	b113      	cbz	r3, 80068c0 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 80068ba:	4620      	mov	r0, r4
 80068bc:	f7ff ff8e 	bl	80067dc <HAL_DSI_ErrorCallback>
}
 80068c0:	bd10      	pop	{r4, pc}

080068c2 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80068c2:	7c02      	ldrb	r2, [r0, #16]
{
 80068c4:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80068c6:	2a01      	cmp	r2, #1
 80068c8:	d00a      	beq.n	80068e0 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80068ca:	6802      	ldr	r2, [r0, #0]
 80068cc:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80068ce:	f020 0003 	bic.w	r0, r0, #3
 80068d2:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80068d4:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80068d6:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80068d8:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80068da:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 80068dc:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80068de:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80068e0:	2002      	movs	r0, #2
}
 80068e2:	4770      	bx	lr

080068e4 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80068e4:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80068e6:	7c03      	ldrb	r3, [r0, #16]
{
 80068e8:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d069      	beq.n	80069c2 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80068ee:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80068f0:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80068f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068f4:	f042 0201 	orr.w	r2, r2, #1
 80068f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80068fa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80068fe:	f022 0201 	bic.w	r2, r2, #1
 8006902:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8006906:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800690a:	f042 0201 	orr.w	r2, r2, #1
 800690e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	f022 0203 	bic.w	r2, r2, #3
 8006918:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	4302      	orrs	r2, r0
 800691e:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006920:	695a      	ldr	r2, [r3, #20]
 8006922:	f022 0207 	bic.w	r2, r2, #7
 8006926:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006928:	6958      	ldr	r0, [r3, #20]
 800692a:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800692e:	432a      	orrs	r2, r5
 8006930:	694d      	ldr	r5, [r1, #20]
 8006932:	432a      	orrs	r2, r5
 8006934:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006936:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006938:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	f022 020f 	bic.w	r2, r2, #15
 8006940:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	4302      	orrs	r2, r0
 8006946:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006948:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800694c:	f022 020e 	bic.w	r2, r2, #14
 8006950:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006954:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006958:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800695c:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800695e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8006962:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006964:	f36f 020f 	bfc	r2, #0, #16
 8006968:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800696a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800696c:	4302      	orrs	r2, r0
 800696e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8006970:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006974:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006978:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800697c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8006980:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8006984:	432a      	orrs	r2, r5
 8006986:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8006988:	432a      	orrs	r2, r5
 800698a:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800698c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800698e:	432a      	orrs	r2, r5
 8006990:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006992:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006994:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8006998:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800699a:	f022 0201 	bic.w	r2, r2, #1
 800699e:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80069a0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80069a2:	430a      	orrs	r2, r1
 80069a4:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80069a6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80069aa:	f042 0201 	orr.w	r2, r2, #1
 80069ae:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80069b2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80069b6:	f042 0202 	orr.w	r2, r2, #2
 80069ba:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 80069be:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80069c0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80069c2:	2002      	movs	r0, #2
 80069c4:	e7fc      	b.n	80069c0 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

080069c8 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80069c8:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80069ca:	7c03      	ldrb	r3, [r0, #16]
{
 80069cc:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d029      	beq.n	8006a26 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80069d2:	6800      	ldr	r0, [r0, #0]
 80069d4:	4b15      	ldr	r3, [pc, #84]	@ (8006a2c <HAL_DSI_ConfigCommand+0x64>)
 80069d6:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80069d8:	4023      	ands	r3, r4
 80069da:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80069dc:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80069de:	e9d1 3500 	ldrd	r3, r5, [r1]
 80069e2:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 80069e4:	688d      	ldr	r5, [r1, #8]
 80069e6:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 80069e8:	68cd      	ldr	r5, [r1, #12]
 80069ea:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 80069ec:	690d      	ldr	r5, [r1, #16]
 80069ee:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 80069f0:	694d      	ldr	r5, [r1, #20]
 80069f2:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 80069f4:	698d      	ldr	r5, [r1, #24]
 80069f6:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 80069f8:	69cd      	ldr	r5, [r1, #28]
 80069fa:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 80069fc:	6a0d      	ldr	r5, [r1, #32]
 80069fe:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8006a00:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8006a02:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8006a04:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8006a06:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8006a08:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006a0a:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 8006a0c:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006a0e:	4323      	orrs	r3, r4
 8006a10:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8006a12:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8006a14:	f023 0302 	bic.w	r3, r3, #2
 8006a18:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006a1a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8006a1c:	430b      	orrs	r3, r1
 8006a1e:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a20:	2000      	movs	r0, #0
 8006a22:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8006a24:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006a26:	2002      	movs	r0, #2
 8006a28:	e7fc      	b.n	8006a24 <HAL_DSI_ConfigCommand+0x5c>
 8006a2a:	bf00      	nop
 8006a2c:	fef080ff 	.word	0xfef080ff

08006a30 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006a30:	7c02      	ldrb	r2, [r0, #16]
{
 8006a32:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006a34:	2a01      	cmp	r2, #1
 8006a36:	d00a      	beq.n	8006a4e <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006a38:	6802      	ldr	r2, [r0, #0]
 8006a3a:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8006a3c:	f020 001f 	bic.w	r0, r0, #31
 8006a40:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006a42:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8006a44:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a46:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 8006a48:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 8006a4a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006a4c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006a4e:	2002      	movs	r0, #2
}
 8006a50:	4770      	bx	lr

08006a52 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8006a52:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006a54:	7c03      	ldrb	r3, [r0, #16]
{
 8006a56:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d034      	beq.n	8006ac6 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8006a5c:	e9d1 0300 	ldrd	r0, r3, [r1]
 8006a60:	4298      	cmp	r0, r3
 8006a62:	bf38      	it	cc
 8006a64:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006a6c:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8006a70:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8006a74:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006a78:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006a7c:	4302      	orrs	r2, r0
 8006a7e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8006a82:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006a86:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8006a8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006a8e:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8006a92:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006a96:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006a98:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8006a9c:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006a9e:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006aa0:	432a      	orrs	r2, r5
 8006aa2:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006aa4:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006aa6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8006aaa:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006aae:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006ab2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006ab6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006aba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006abe:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 8006ac2:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8006ac4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006ac6:	2002      	movs	r0, #2
 8006ac8:	e7fc      	b.n	8006ac4 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08006acc <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8006acc:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006ace:	7c03      	ldrb	r3, [r0, #16]
{
 8006ad0:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d05b      	beq.n	8006b8e <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006ad6:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006ad8:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006ada:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006adc:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006ade:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006ae2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006aea:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006aec:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8006aee:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8006af0:	b292      	uxth	r2, r2
 8006af2:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006af4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8006af6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006afa:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8006afc:	4a25      	ldr	r2, [pc, #148]	@ (8006b94 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8006afe:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8006b00:	4010      	ands	r0, r2
 8006b02:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006b04:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8006b06:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006b08:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006b0a:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8006b0c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006b0e:	4010      	ands	r0, r2
 8006b10:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006b12:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006b14:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006b16:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006b18:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8006b1a:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006b1e:	4010      	ands	r0, r2
 8006b20:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006b24:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006b28:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006b2a:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006b2c:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8006b30:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006b34:	4010      	ands	r0, r2
 8006b36:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006b3a:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006b3e:	4328      	orrs	r0, r5
 8006b40:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8006b44:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006b48:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8006b4c:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006b50:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006b54:	698d      	ldr	r5, [r1, #24]
 8006b56:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006b58:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006b5a:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006b5c:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8006b60:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8006b64:	4010      	ands	r0, r2
 8006b66:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006b6a:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8006b6e:	4328      	orrs	r0, r5
 8006b70:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006b74:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 8006b78:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006b7a:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006b7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006b80:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006b84:	430a      	orrs	r2, r1
 8006b86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 8006b8a:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8006b8c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006b8e:	2002      	movs	r0, #2
 8006b90:	e7fc      	b.n	8006b8c <HAL_DSI_ConfigHostTimeouts+0xc0>
 8006b92:	bf00      	nop
 8006b94:	ffff0000 	.word	0xffff0000

08006b98 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006b98:	7c03      	ldrb	r3, [r0, #16]
{
 8006b9a:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d01c      	beq.n	8006bda <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8006ba0:	6802      	ldr	r2, [r0, #0]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	6851      	ldr	r1, [r2, #4]
 8006ba8:	f041 0101 	orr.w	r1, r1, #1
 8006bac:	6051      	str	r1, [r2, #4]
 8006bae:	6851      	ldr	r1, [r2, #4]
 8006bb0:	f001 0101 	and.w	r1, r1, #1
 8006bb4:	9100      	str	r1, [sp, #0]
 8006bb6:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 8006bbe:	f041 0108 	orr.w	r1, r1, #8
 8006bc2:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 8006bc6:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006bca:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006bcc:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006bce:	f002 0208 	and.w	r2, r2, #8
 8006bd2:	9201      	str	r2, [sp, #4]
 8006bd4:	9a01      	ldr	r2, [sp, #4]
}
 8006bd6:	b002      	add	sp, #8
 8006bd8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006bda:	2002      	movs	r0, #2
 8006bdc:	e7fb      	b.n	8006bd6 <HAL_DSI_Start+0x3e>

08006bde <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006bde:	7c02      	ldrb	r2, [r0, #16]
{
 8006be0:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006be2:	2a01      	cmp	r2, #1
 8006be4:	d009      	beq.n	8006bfa <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8006be6:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006be8:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8006bea:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 8006bee:	f042 0204 	orr.w	r2, r2, #4
 8006bf2:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 8006bf6:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006bf8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006bfa:	2002      	movs	r0, #2
}
 8006bfc:	4770      	bx	lr

08006bfe <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8006bfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c00:	7c05      	ldrb	r5, [r0, #16]
{
 8006c02:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006c04:	2d01      	cmp	r5, #1
 8006c06:	d009      	beq.n	8006c1c <HAL_DSI_ShortWrite+0x1e>
 8006c08:	2501      	movs	r5, #1
 8006c0a:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006c0c:	9d06      	ldr	r5, [sp, #24]
 8006c0e:	9500      	str	r5, [sp, #0]
 8006c10:	f7ff fc6c 	bl	80064ec <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006c14:	2300      	movs	r3, #0
 8006c16:	7423      	strb	r3, [r4, #16]

  return status;
}
 8006c18:	b003      	add	sp, #12
 8006c1a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006c1c:	2002      	movs	r0, #2
 8006c1e:	e7fb      	b.n	8006c18 <HAL_DSI_ShortWrite+0x1a>

08006c20 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8006c20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c24:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c26:	7c03      	ldrb	r3, [r0, #16]
{
 8006c28:	4606      	mov	r6, r0
 8006c2a:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8006c2c:	2b01      	cmp	r3, #1
{
 8006c2e:	4615      	mov	r5, r2
 8006c30:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8006c34:	d052      	beq.n	8006cdc <HAL_DSI_LongWrite+0xbc>
 8006c36:	2301      	movs	r3, #1
 8006c38:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c3a:	f7ff fa57 	bl	80060ec <HAL_GetTick>
 8006c3e:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006c40:	6832      	ldr	r2, [r6, #0]
 8006c42:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8006c44:	f013 0a01 	ands.w	sl, r3, #1
 8006c48:	d019      	beq.n	8006c7e <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006c4a:	2c03      	cmp	r4, #3
 8006c4c:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8006c4e:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006c52:	bf28      	it	cs
 8006c54:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8006c56:	4283      	cmp	r3, r0
 8006c58:	d11d      	bne.n	8006c96 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8006c5a:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 8006c5c:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 8006c5e:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8006c62:	bb10      	cbnz	r0, 8006caa <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8006c64:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006c66:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 8006c6a:	0223      	lsls	r3, r4, #8
 8006c6c:	0224      	lsls	r4, r4, #8
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 8006c74:	431d      	orrs	r5, r3
 8006c76:	4325      	orrs	r5, r4
 8006c78:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006c7a:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8006c7c:	e009      	b.n	8006c92 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006c7e:	f7ff fa35 	bl	80060ec <HAL_GetTick>
 8006c82:	eba0 000b 	sub.w	r0, r0, fp
 8006c86:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006c8a:	d9d9      	bls.n	8006c40 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8006c8c:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006c8e:	f886 a010 	strb.w	sl, [r6, #16]
}
 8006c92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006c96:	f818 1003 	ldrb.w	r1, [r8, r3]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8006ca0:	fa01 f10c 	lsl.w	r1, r1, ip
 8006ca4:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 8006ca8:	e7d5      	b.n	8006c56 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006caa:	2804      	cmp	r0, #4
    fifoword = 0U;
 8006cac:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006cb0:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 8006cb2:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006cb4:	bf28      	it	cs
 8006cb6:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006cba:	f813 8001 	ldrb.w	r8, [r3, r1]
 8006cbe:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8006cc2:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006cc4:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8006cc8:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006cca:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8006cce:	d1f4      	bne.n	8006cba <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8006cd0:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8006cd4:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 8006cd6:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 8006cda:	e7c2      	b.n	8006c62 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8006cdc:	2002      	movs	r0, #2
 8006cde:	e7d8      	b.n	8006c92 <HAL_DSI_LongWrite+0x72>

08006ce0 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8006ce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ce4:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006ce6:	7c03      	ldrb	r3, [r0, #16]
{
 8006ce8:	4605      	mov	r5, r0
 8006cea:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8006cec:	2b01      	cmp	r3, #1
{
 8006cee:	4617      	mov	r7, r2
 8006cf0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006cf4:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8006cf8:	d06f      	beq.n	8006dda <HAL_DSI_Read+0xfa>
 8006cfa:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8006cfc:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8006cfe:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8006d00:	d90d      	bls.n	8006d1e <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8006d02:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8006d06:	2237      	movs	r2, #55	@ 0x37
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	b2f3      	uxtb	r3, r6
 8006d0c:	f7ff fbee 	bl	80064ec <DSI_ShortWrite.constprop.0>
 8006d10:	b128      	cbz	r0, 8006d1e <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8006d12:	2300      	movs	r3, #0

      return HAL_ERROR;
 8006d14:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8006d16:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8006d18:	b003      	add	sp, #12
 8006d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8006d1e:	f1b9 0f06 	cmp.w	r9, #6
 8006d22:	d10f      	bne.n	8006d44 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8006d26:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d28:	021b      	lsls	r3, r3, #8
 8006d2a:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8006d2e:	f043 0306 	orr.w	r3, r3, #6
 8006d32:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8006d34:	f7ff f9da 	bl	80060ec <HAL_GetTick>
 8006d38:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8006d3a:	2e00      	cmp	r6, #0
 8006d3c:	dc27      	bgt.n	8006d8e <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8006d3e:	2000      	movs	r0, #0
 8006d40:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8006d42:	e7e9      	b.n	8006d18 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8006d44:	f1b9 0f04 	cmp.w	r9, #4
 8006d48:	d105      	bne.n	8006d56 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d4a:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8006d4c:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d4e:	f044 0404 	orr.w	r4, r4, #4
 8006d52:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8006d54:	e7ee      	b.n	8006d34 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8006d56:	f1b9 0f14 	cmp.w	r9, #20
 8006d5a:	d108      	bne.n	8006d6e <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006d5c:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d60:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006d62:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d64:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8006d68:	f044 0414 	orr.w	r4, r4, #20
 8006d6c:	e7f1      	b.n	8006d52 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8006d6e:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 8006d72:	d1ce      	bne.n	8006d12 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006d74:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d78:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006d7a:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006d80:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d84:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8006d88:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 8006d8c:	e7e1      	b.n	8006d52 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8006d8e:	682a      	ldr	r2, [r5, #0]
 8006d90:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8006d92:	f013 0310 	ands.w	r3, r3, #16
 8006d96:	d10d      	bne.n	8006db4 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006d98:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8006d9a:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006d9c:	4632      	mov	r2, r6
 8006d9e:	bf28      	it	cs
 8006da0:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8006da2:	00d9      	lsls	r1, r3, #3
 8006da4:	fa20 f101 	lsr.w	r1, r0, r1
 8006da8:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8006daa:	3301      	adds	r3, #1
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d1f8      	bne.n	8006da2 <HAL_DSI_Read+0xc2>
 8006db0:	4417      	add	r7, r2
 8006db2:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006db4:	f7ff f99a 	bl	80060ec <HAL_GetTick>
 8006db8:	1b00      	subs	r0, r0, r4
 8006dba:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006dbe:	d903      	bls.n	8006dc8 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8006dc0:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8006dc2:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006dc4:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8006dc6:	e7a7      	b.n	8006d18 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006dcc:	0652      	lsls	r2, r2, #25
 8006dce:	d4b4      	bmi.n	8006d3a <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8006dd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006dd4:	069b      	lsls	r3, r3, #26
 8006dd6:	d49c      	bmi.n	8006d12 <HAL_DSI_Read+0x32>
 8006dd8:	e7af      	b.n	8006d3a <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8006dda:	2002      	movs	r0, #2
 8006ddc:	e79c      	b.n	8006d18 <HAL_DSI_Read+0x38>

08006dde <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006dde:	7c02      	ldrb	r2, [r0, #16]
{
 8006de0:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006de2:	2a01      	cmp	r2, #1
 8006de4:	d00f      	beq.n	8006e06 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8006de6:	6802      	ldr	r2, [r0, #0]
 8006de8:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8006dec:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8006df0:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8006df4:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8006df8:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006dfc:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8006dfe:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 8006e02:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006e04:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006e06:	2002      	movs	r0, #2
}
 8006e08:	4770      	bx	lr
	...

08006e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8006e10:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e12:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8006fd8 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e16:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e1a:	680a      	ldr	r2, [r1, #0]
 8006e1c:	fa32 f503 	lsrs.w	r5, r2, r3
 8006e20:	d102      	bne.n	8006e28 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8006e22:	b003      	add	sp, #12
 8006e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006e28:	2501      	movs	r5, #1
 8006e2a:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8006e2e:	ea18 0202 	ands.w	r2, r8, r2
 8006e32:	f000 80bb 	beq.w	8006fac <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e36:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e38:	2703      	movs	r7, #3
 8006e3a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e3e:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e42:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e46:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e48:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e4c:	2f01      	cmp	r7, #1
 8006e4e:	d834      	bhi.n	8006eba <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8006e50:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e52:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e56:	68cf      	ldr	r7, [r1, #12]
 8006e58:	fa07 f70e 	lsl.w	r7, r7, lr
 8006e5c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8006e60:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006e62:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e64:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e68:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8006e6c:	409f      	lsls	r7, r3
 8006e6e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8006e72:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8006e74:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e76:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e78:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e7c:	688f      	ldr	r7, [r1, #8]
 8006e7e:	fa07 f70e 	lsl.w	r7, r7, lr
 8006e82:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8006e86:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e88:	d119      	bne.n	8006ebe <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8006e8a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e8e:	f003 0a07 	and.w	sl, r3, #7
 8006e92:	f04f 0b0f 	mov.w	fp, #15
 8006e96:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8006e9a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8006e9e:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ea2:	fa0b fb0a 	lsl.w	fp, fp, sl
 8006ea6:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006eaa:	690f      	ldr	r7, [r1, #16]
 8006eac:	fa07 f70a 	lsl.w	r7, r7, sl
 8006eb0:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8006eb4:	f8c8 7020 	str.w	r7, [r8, #32]
 8006eb8:	e001      	b.n	8006ebe <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006eba:	2d03      	cmp	r5, #3
 8006ebc:	d1da      	bne.n	8006e74 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8006ebe:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ec0:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ec4:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ec8:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ecc:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8006ed0:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ed2:	d06b      	beq.n	8006fac <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ed4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8006ed8:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006edc:	f003 0c03 	and.w	ip, r3, #3
 8006ee0:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ee4:	f045 0502 	orr.w	r5, r5, #2
 8006ee8:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006eec:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ef0:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8006ef4:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8006ef8:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006efc:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f00:	f005 0502 	and.w	r5, r5, #2
 8006f04:	9501      	str	r5, [sp, #4]
 8006f06:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006f08:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f0a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f0e:	4d31      	ldr	r5, [pc, #196]	@ (8006fd4 <HAL_GPIO_Init+0x1c8>)
 8006f10:	42a8      	cmp	r0, r5
 8006f12:	d04d      	beq.n	8006fb0 <HAL_GPIO_Init+0x1a4>
 8006f14:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f18:	42a8      	cmp	r0, r5
 8006f1a:	d04b      	beq.n	8006fb4 <HAL_GPIO_Init+0x1a8>
 8006f1c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f20:	42a8      	cmp	r0, r5
 8006f22:	d049      	beq.n	8006fb8 <HAL_GPIO_Init+0x1ac>
 8006f24:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f28:	42a8      	cmp	r0, r5
 8006f2a:	d047      	beq.n	8006fbc <HAL_GPIO_Init+0x1b0>
 8006f2c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f30:	42a8      	cmp	r0, r5
 8006f32:	d045      	beq.n	8006fc0 <HAL_GPIO_Init+0x1b4>
 8006f34:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f38:	42a8      	cmp	r0, r5
 8006f3a:	d043      	beq.n	8006fc4 <HAL_GPIO_Init+0x1b8>
 8006f3c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f40:	42a8      	cmp	r0, r5
 8006f42:	d041      	beq.n	8006fc8 <HAL_GPIO_Init+0x1bc>
 8006f44:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f48:	42a8      	cmp	r0, r5
 8006f4a:	d03f      	beq.n	8006fcc <HAL_GPIO_Init+0x1c0>
 8006f4c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f50:	42a8      	cmp	r0, r5
 8006f52:	d03d      	beq.n	8006fd0 <HAL_GPIO_Init+0x1c4>
 8006f54:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f58:	42a8      	cmp	r0, r5
 8006f5a:	bf14      	ite	ne
 8006f5c:	250a      	movne	r5, #10
 8006f5e:	2509      	moveq	r5, #9
 8006f60:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f64:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f68:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f6c:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8006f6e:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8006f72:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8006f74:	bf0c      	ite	eq
 8006f76:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006f78:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f7a:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8006f7e:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8006f80:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8006f82:	bf0c      	ite	eq
 8006f84:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006f86:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f88:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8006f8c:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8006f8e:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8006f92:	bf0c      	ite	eq
 8006f94:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006f96:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f98:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8006f9a:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8006f9e:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8006fa2:	bf54      	ite	pl
 8006fa4:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8006fa6:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8006fa8:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8006fac:	3301      	adds	r3, #1
 8006fae:	e734      	b.n	8006e1a <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fb0:	2500      	movs	r5, #0
 8006fb2:	e7d5      	b.n	8006f60 <HAL_GPIO_Init+0x154>
 8006fb4:	2501      	movs	r5, #1
 8006fb6:	e7d3      	b.n	8006f60 <HAL_GPIO_Init+0x154>
 8006fb8:	2502      	movs	r5, #2
 8006fba:	e7d1      	b.n	8006f60 <HAL_GPIO_Init+0x154>
 8006fbc:	2503      	movs	r5, #3
 8006fbe:	e7cf      	b.n	8006f60 <HAL_GPIO_Init+0x154>
 8006fc0:	2504      	movs	r5, #4
 8006fc2:	e7cd      	b.n	8006f60 <HAL_GPIO_Init+0x154>
 8006fc4:	2505      	movs	r5, #5
 8006fc6:	e7cb      	b.n	8006f60 <HAL_GPIO_Init+0x154>
 8006fc8:	2506      	movs	r5, #6
 8006fca:	e7c9      	b.n	8006f60 <HAL_GPIO_Init+0x154>
 8006fcc:	2507      	movs	r5, #7
 8006fce:	e7c7      	b.n	8006f60 <HAL_GPIO_Init+0x154>
 8006fd0:	2508      	movs	r5, #8
 8006fd2:	e7c5      	b.n	8006f60 <HAL_GPIO_Init+0x154>
 8006fd4:	58020000 	.word	0x58020000
 8006fd8:	58024400 	.word	0x58024400

08006fdc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8006fe0:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006fe2:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006fe6:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006fea:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006fee:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8006ff2:	fa31 f302 	lsrs.w	r3, r1, r2
 8006ff6:	d101      	bne.n	8006ffc <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8006ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006ffc:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8007000:	ea1c 0601 	ands.w	r6, ip, r1
 8007004:	d070      	beq.n	80070e8 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007006:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800700a:	f002 0703 	and.w	r7, r2, #3
 800700e:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 8007012:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007014:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007018:	fa08 f907 	lsl.w	r9, r8, r7
 800701c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007020:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007024:	4b3a      	ldr	r3, [pc, #232]	@ (8007110 <HAL_GPIO_DeInit+0x134>)
 8007026:	4298      	cmp	r0, r3
 8007028:	d060      	beq.n	80070ec <HAL_GPIO_DeInit+0x110>
 800702a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800702e:	4298      	cmp	r0, r3
 8007030:	d05e      	beq.n	80070f0 <HAL_GPIO_DeInit+0x114>
 8007032:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007036:	4298      	cmp	r0, r3
 8007038:	d05c      	beq.n	80070f4 <HAL_GPIO_DeInit+0x118>
 800703a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800703e:	4298      	cmp	r0, r3
 8007040:	d05a      	beq.n	80070f8 <HAL_GPIO_DeInit+0x11c>
 8007042:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007046:	4298      	cmp	r0, r3
 8007048:	d058      	beq.n	80070fc <HAL_GPIO_DeInit+0x120>
 800704a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800704e:	4298      	cmp	r0, r3
 8007050:	d056      	beq.n	8007100 <HAL_GPIO_DeInit+0x124>
 8007052:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007056:	4298      	cmp	r0, r3
 8007058:	d054      	beq.n	8007104 <HAL_GPIO_DeInit+0x128>
 800705a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800705e:	4298      	cmp	r0, r3
 8007060:	d052      	beq.n	8007108 <HAL_GPIO_DeInit+0x12c>
 8007062:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007066:	4298      	cmp	r0, r3
 8007068:	d050      	beq.n	800710c <HAL_GPIO_DeInit+0x130>
 800706a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800706e:	4298      	cmp	r0, r3
 8007070:	bf14      	ite	ne
 8007072:	230a      	movne	r3, #10
 8007074:	2309      	moveq	r3, #9
 8007076:	40bb      	lsls	r3, r7
 8007078:	4573      	cmp	r3, lr
 800707a:	d117      	bne.n	80070ac <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800707c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8007080:	ea23 0306 	bic.w	r3, r3, r6
 8007084:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007088:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800708c:	ea23 0306 	bic.w	r3, r3, r6
 8007090:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8007094:	6863      	ldr	r3, [r4, #4]
 8007096:	ea23 0306 	bic.w	r3, r3, r6
 800709a:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	ea23 0306 	bic.w	r3, r3, r6
 80070a2:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80070a4:	68ab      	ldr	r3, [r5, #8]
 80070a6:	ea23 0309 	bic.w	r3, r3, r9
 80070aa:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80070ac:	0053      	lsls	r3, r2, #1
 80070ae:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80070b0:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80070b2:	fa0b f303 	lsl.w	r3, fp, r3
 80070b6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80070ba:	431d      	orrs	r5, r3
 80070bc:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80070be:	f002 0507 	and.w	r5, r2, #7
 80070c2:	6a37      	ldr	r7, [r6, #32]
 80070c4:	00ad      	lsls	r5, r5, #2
 80070c6:	fa08 f505 	lsl.w	r5, r8, r5
 80070ca:	ea27 0705 	bic.w	r7, r7, r5
 80070ce:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070d0:	68c5      	ldr	r5, [r0, #12]
 80070d2:	ea25 0503 	bic.w	r5, r5, r3
 80070d6:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80070d8:	6845      	ldr	r5, [r0, #4]
 80070da:	ea25 050c 	bic.w	r5, r5, ip
 80070de:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80070e0:	6885      	ldr	r5, [r0, #8]
 80070e2:	ea25 0303 	bic.w	r3, r5, r3
 80070e6:	6083      	str	r3, [r0, #8]
    position++;
 80070e8:	3201      	adds	r2, #1
 80070ea:	e782      	b.n	8006ff2 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80070ec:	2300      	movs	r3, #0
 80070ee:	e7c2      	b.n	8007076 <HAL_GPIO_DeInit+0x9a>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e7c0      	b.n	8007076 <HAL_GPIO_DeInit+0x9a>
 80070f4:	2302      	movs	r3, #2
 80070f6:	e7be      	b.n	8007076 <HAL_GPIO_DeInit+0x9a>
 80070f8:	2303      	movs	r3, #3
 80070fa:	e7bc      	b.n	8007076 <HAL_GPIO_DeInit+0x9a>
 80070fc:	2304      	movs	r3, #4
 80070fe:	e7ba      	b.n	8007076 <HAL_GPIO_DeInit+0x9a>
 8007100:	2305      	movs	r3, #5
 8007102:	e7b8      	b.n	8007076 <HAL_GPIO_DeInit+0x9a>
 8007104:	2306      	movs	r3, #6
 8007106:	e7b6      	b.n	8007076 <HAL_GPIO_DeInit+0x9a>
 8007108:	2307      	movs	r3, #7
 800710a:	e7b4      	b.n	8007076 <HAL_GPIO_DeInit+0x9a>
 800710c:	2308      	movs	r3, #8
 800710e:	e7b2      	b.n	8007076 <HAL_GPIO_DeInit+0x9a>
 8007110:	58020000 	.word	0x58020000

08007114 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007114:	6903      	ldr	r3, [r0, #16]
 8007116:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007118:	bf14      	ite	ne
 800711a:	2001      	movne	r0, #1
 800711c:	2000      	moveq	r0, #0
 800711e:	4770      	bx	lr

08007120 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007120:	b10a      	cbz	r2, 8007126 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007122:	6181      	str	r1, [r0, #24]
  }
}
 8007124:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007126:	0409      	lsls	r1, r1, #16
 8007128:	e7fb      	b.n	8007122 <HAL_GPIO_WritePin+0x2>

0800712a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800712a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800712c:	ea01 0203 	and.w	r2, r1, r3
 8007130:	ea21 0103 	bic.w	r1, r1, r3
 8007134:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007138:	6181      	str	r1, [r0, #24]
}
 800713a:	4770      	bx	lr

0800713c <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800713c:	4b04      	ldr	r3, [pc, #16]	@ (8007150 <HAL_HSEM_FastTake+0x14>)
 800713e:	3020      	adds	r0, #32
 8007140:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8007144:	4b03      	ldr	r3, [pc, #12]	@ (8007154 <HAL_HSEM_FastTake+0x18>)
 8007146:	1ac0      	subs	r0, r0, r3
 8007148:	bf18      	it	ne
 800714a:	2001      	movne	r0, #1
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	58026400 	.word	0x58026400
 8007154:	80000300 	.word	0x80000300

08007158 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007158:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 800715c:	4b01      	ldr	r3, [pc, #4]	@ (8007164 <HAL_HSEM_Release+0xc>)
 800715e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8007162:	4770      	bx	lr
 8007164:	58026400 	.word	0x58026400

08007168 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007168:	6803      	ldr	r3, [r0, #0]
 800716a:	699a      	ldr	r2, [r3, #24]
 800716c:	0791      	lsls	r1, r2, #30
 800716e:	d501      	bpl.n	8007174 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007170:	2200      	movs	r2, #0
 8007172:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	07d2      	lsls	r2, r2, #31
 8007178:	d403      	bmi.n	8007182 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800717a:	699a      	ldr	r2, [r3, #24]
 800717c:	f042 0201 	orr.w	r2, r2, #1
 8007180:	619a      	str	r2, [r3, #24]
  }
}
 8007182:	4770      	bx	lr

08007184 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007184:	b530      	push	{r4, r5, lr}
 8007186:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007188:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800718c:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800718e:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8007190:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8007196:	4a05      	ldr	r2, [pc, #20]	@ (80071ac <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007198:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800719a:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800719e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80071a2:	ea20 0002 	bic.w	r0, r0, r2
 80071a6:	4303      	orrs	r3, r0
 80071a8:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80071aa:	bd30      	pop	{r4, r5, pc}
 80071ac:	03ff63ff 	.word	0x03ff63ff

080071b0 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 80071b0:	6803      	ldr	r3, [r0, #0]
{
 80071b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80071b6:	699c      	ldr	r4, [r3, #24]
{
 80071b8:	4605      	mov	r5, r0
 80071ba:	460f      	mov	r7, r1
 80071bc:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80071be:	f014 0410 	ands.w	r4, r4, #16
 80071c2:	d06f      	beq.n	80072a4 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 80071c4:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071c6:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80071c8:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071ca:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	699a      	ldr	r2, [r3, #24]
 80071d0:	0690      	lsls	r0, r2, #26
 80071d2:	d461      	bmi.n	8007298 <I2C_IsErrorOccurred+0xe8>
 80071d4:	f1b8 0f00 	cmp.w	r8, #0
 80071d8:	d035      	beq.n	8007246 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 80071da:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80071de:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80071e0:	682e      	ldr	r6, [r5, #0]
 80071e2:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80071e4:	05d9      	lsls	r1, r3, #23
 80071e6:	d505      	bpl.n	80071f4 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80071e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80071ec:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80071f0:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80071f2:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80071f4:	055a      	lsls	r2, r3, #21
 80071f6:	d505      	bpl.n	8007204 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80071f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80071fc:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8007200:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007202:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007204:	059b      	lsls	r3, r3, #22
 8007206:	d54f      	bpl.n	80072a8 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007208:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800720c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007210:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8007212:	4628      	mov	r0, r5
 8007214:	f7ff ffa8 	bl	8007168 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007218:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800721a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800721c:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8007220:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8007224:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8007228:	f023 0301 	bic.w	r3, r3, #1
 800722c:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800722e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8007230:	4323      	orrs	r3, r4
 8007232:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007234:	2320      	movs	r3, #32
 8007236:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800723a:	2300      	movs	r3, #0
 800723c:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8007240:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8007244:	e032      	b.n	80072ac <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8007246:	1c7a      	adds	r2, r7, #1
 8007248:	d0c1      	beq.n	80071ce <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800724a:	f7fe ff4f 	bl	80060ec <HAL_GetTick>
 800724e:	1b80      	subs	r0, r0, r6
 8007250:	42b8      	cmp	r0, r7
 8007252:	d801      	bhi.n	8007258 <I2C_IsErrorOccurred+0xa8>
 8007254:	2f00      	cmp	r7, #0
 8007256:	d1b9      	bne.n	80071cc <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800725c:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007260:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8007262:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007264:	0400      	lsls	r0, r0, #16
 8007266:	d50a      	bpl.n	800727e <I2C_IsErrorOccurred+0xce>
 8007268:	0449      	lsls	r1, r1, #17
 800726a:	d408      	bmi.n	800727e <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 800726c:	2a20      	cmp	r2, #32
 800726e:	d006      	beq.n	800727e <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007276:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8007278:	f7fe ff38 	bl	80060ec <HAL_GetTick>
 800727c:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800727e:	682b      	ldr	r3, [r5, #0]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	069b      	lsls	r3, r3, #26
 8007284:	d4a2      	bmi.n	80071cc <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007286:	f7fe ff31 	bl	80060ec <HAL_GetTick>
 800728a:	1b80      	subs	r0, r0, r6
 800728c:	2819      	cmp	r0, #25
 800728e:	d9f6      	bls.n	800727e <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007290:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8007292:	f04f 0801 	mov.w	r8, #1
 8007296:	e799      	b.n	80071cc <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8007298:	f1b8 0f00 	cmp.w	r8, #0
 800729c:	d19d      	bne.n	80071da <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800729e:	2220      	movs	r2, #32
 80072a0:	61da      	str	r2, [r3, #28]
 80072a2:	e79a      	b.n	80071da <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 80072a4:	4620      	mov	r0, r4
 80072a6:	e79b      	b.n	80071e0 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d1b2      	bne.n	8007212 <I2C_IsErrorOccurred+0x62>
}
 80072ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080072b0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	4604      	mov	r4, r0
 80072b4:	460d      	mov	r5, r1
 80072b6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	079b      	lsls	r3, r3, #30
 80072be:	d501      	bpl.n	80072c4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80072c0:	2000      	movs	r0, #0
 80072c2:	e01f      	b.n	8007304 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072c4:	4632      	mov	r2, r6
 80072c6:	4629      	mov	r1, r5
 80072c8:	4620      	mov	r0, r4
 80072ca:	f7ff ff71 	bl	80071b0 <I2C_IsErrorOccurred>
 80072ce:	b9c0      	cbnz	r0, 8007302 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80072d0:	1c6a      	adds	r2, r5, #1
 80072d2:	d0f1      	beq.n	80072b8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072d4:	f7fe ff0a 	bl	80060ec <HAL_GetTick>
 80072d8:	1b80      	subs	r0, r0, r6
 80072da:	42a8      	cmp	r0, r5
 80072dc:	d801      	bhi.n	80072e2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80072de:	2d00      	cmp	r5, #0
 80072e0:	d1ea      	bne.n	80072b8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	f013 0302 	ands.w	r3, r3, #2
 80072ea:	d1e5      	bne.n	80072b8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072ec:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 80072ee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072f2:	f042 0220 	orr.w	r2, r2, #32
 80072f6:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80072f8:	2220      	movs	r2, #32
 80072fa:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072fe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8007302:	2001      	movs	r0, #1
}
 8007304:	bd70      	pop	{r4, r5, r6, pc}

08007306 <I2C_WaitOnFlagUntilTimeout>:
{
 8007306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800730e:	4604      	mov	r4, r0
 8007310:	460f      	mov	r7, r1
 8007312:	4616      	mov	r6, r2
 8007314:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	ea37 0303 	bics.w	r3, r7, r3
 800731e:	bf0c      	ite	eq
 8007320:	2301      	moveq	r3, #1
 8007322:	2300      	movne	r3, #0
 8007324:	42b3      	cmp	r3, r6
 8007326:	d001      	beq.n	800732c <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8007328:	2000      	movs	r0, #0
 800732a:	e025      	b.n	8007378 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800732c:	4642      	mov	r2, r8
 800732e:	4629      	mov	r1, r5
 8007330:	4620      	mov	r0, r4
 8007332:	f7ff ff3d 	bl	80071b0 <I2C_IsErrorOccurred>
 8007336:	b9f0      	cbnz	r0, 8007376 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8007338:	1c6b      	adds	r3, r5, #1
 800733a:	d0ec      	beq.n	8007316 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800733c:	f7fe fed6 	bl	80060ec <HAL_GetTick>
 8007340:	eba0 0008 	sub.w	r0, r0, r8
 8007344:	42a8      	cmp	r0, r5
 8007346:	d801      	bhi.n	800734c <I2C_WaitOnFlagUntilTimeout+0x46>
 8007348:	2d00      	cmp	r5, #0
 800734a:	d1e4      	bne.n	8007316 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	ea37 0303 	bics.w	r3, r7, r3
 8007354:	bf0c      	ite	eq
 8007356:	2301      	moveq	r3, #1
 8007358:	2300      	movne	r3, #0
 800735a:	42b3      	cmp	r3, r6
 800735c:	d1db      	bne.n	8007316 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800735e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007360:	f043 0320 	orr.w	r3, r3, #32
 8007364:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007366:	2320      	movs	r3, #32
 8007368:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800736c:	2300      	movs	r3, #0
 800736e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8007372:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007376:	2001      	movs	r0, #1
}
 8007378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800737c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800737c:	b570      	push	{r4, r5, r6, lr}
 800737e:	4604      	mov	r4, r0
 8007380:	460d      	mov	r5, r1
 8007382:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	069b      	lsls	r3, r3, #26
 800738a:	d501      	bpl.n	8007390 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800738c:	2000      	movs	r0, #0
 800738e:	e01d      	b.n	80073cc <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007390:	4632      	mov	r2, r6
 8007392:	4629      	mov	r1, r5
 8007394:	4620      	mov	r0, r4
 8007396:	f7ff ff0b 	bl	80071b0 <I2C_IsErrorOccurred>
 800739a:	b9b0      	cbnz	r0, 80073ca <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800739c:	f7fe fea6 	bl	80060ec <HAL_GetTick>
 80073a0:	1b80      	subs	r0, r0, r6
 80073a2:	42a8      	cmp	r0, r5
 80073a4:	d801      	bhi.n	80073aa <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80073a6:	2d00      	cmp	r5, #0
 80073a8:	d1ec      	bne.n	8007384 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	f013 0320 	ands.w	r3, r3, #32
 80073b2:	d1e7      	bne.n	8007384 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073b4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80073b6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073ba:	f042 0220 	orr.w	r2, r2, #32
 80073be:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073c0:	2220      	movs	r2, #32
 80073c2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80073ca:	2001      	movs	r0, #1
}
 80073cc:	bd70      	pop	{r4, r5, r6, pc}

080073ce <HAL_I2C_MspInit>:
}
 80073ce:	4770      	bx	lr

080073d0 <HAL_I2C_Init>:
{
 80073d0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80073d2:	4604      	mov	r4, r0
 80073d4:	2800      	cmp	r0, #0
 80073d6:	d04e      	beq.n	8007476 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073d8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80073dc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80073e0:	b91b      	cbnz	r3, 80073ea <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80073e2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80073e6:	f7ff fff2 	bl	80073ce <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80073ea:	2324      	movs	r3, #36	@ 0x24
 80073ec:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	f022 0201 	bic.w	r2, r2, #1
 80073f8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80073fa:	6862      	ldr	r2, [r4, #4]
 80073fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007400:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007408:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800740a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800740e:	2901      	cmp	r1, #1
 8007410:	d106      	bne.n	8007420 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007412:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007416:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800741e:	e007      	b.n	8007430 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007420:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007424:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007426:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007428:	d1f6      	bne.n	8007418 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007430:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007432:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800743a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800743e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007446:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007448:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800744c:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800744e:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007450:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007454:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007456:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800745a:	430a      	orrs	r2, r1
 800745c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	f042 0201 	orr.w	r2, r2, #1
 8007464:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8007466:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007468:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800746a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800746e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007470:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8007474:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007476:	2001      	movs	r0, #1
 8007478:	e7fc      	b.n	8007474 <HAL_I2C_Init+0xa4>

0800747a <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 800747a:	4770      	bx	lr

0800747c <HAL_I2C_DeInit>:
{
 800747c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800747e:	4604      	mov	r4, r0
 8007480:	b198      	cbz	r0, 80074aa <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8007482:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007484:	2324      	movs	r3, #36	@ 0x24
 8007486:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800748a:	6813      	ldr	r3, [r2, #0]
 800748c:	f023 0301 	bic.w	r3, r3, #1
 8007490:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8007492:	f7ff fff2 	bl	800747a <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007496:	2000      	movs	r0, #0
 8007498:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 800749a:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800749e:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80074a2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80074a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80074aa:	2001      	movs	r0, #1
 80074ac:	e7fc      	b.n	80074a8 <HAL_I2C_DeInit+0x2c>
	...

080074b0 <HAL_I2C_Mem_Write>:
{
 80074b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b4:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80074b6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80074ba:	4604      	mov	r4, r0
 80074bc:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80074be:	2b20      	cmp	r3, #32
{
 80074c0:	4616      	mov	r6, r2
 80074c2:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80074c6:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80074ca:	f040 80c6 	bne.w	800765a <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 80074ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074d0:	b113      	cbz	r3, 80074d8 <HAL_I2C_Mem_Write+0x28>
 80074d2:	f1ba 0f00 	cmp.w	sl, #0
 80074d6:	d106      	bne.n	80074e6 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80074d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074dc:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80074de:	2001      	movs	r0, #1
}
 80074e0:	b003      	add	sp, #12
 80074e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80074e6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	f000 80b5 	beq.w	800765a <HAL_I2C_Mem_Write+0x1aa>
 80074f0:	f04f 0b01 	mov.w	fp, #1
 80074f4:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80074f8:	f7fe fdf8 	bl	80060ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074fc:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80074fe:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007500:	9000      	str	r0, [sp, #0]
 8007502:	465a      	mov	r2, fp
 8007504:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007508:	4620      	mov	r0, r4
 800750a:	f7ff fefc 	bl	8007306 <I2C_WaitOnFlagUntilTimeout>
 800750e:	2800      	cmp	r0, #0
 8007510:	d1e5      	bne.n	80074de <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007512:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8007514:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007516:	fa5f f289 	uxtb.w	r2, r9
 800751a:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800751c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007520:	2340      	movs	r3, #64	@ 0x40
 8007522:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8007526:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007528:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800752a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800752c:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800752e:	4b4c      	ldr	r3, [pc, #304]	@ (8007660 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8007530:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800753a:	f7ff fe23 	bl	8007184 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800753e:	462a      	mov	r2, r5
 8007540:	4641      	mov	r1, r8
 8007542:	4620      	mov	r0, r4
 8007544:	f7ff feb4 	bl	80072b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007548:	bb18      	cbnz	r0, 8007592 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800754a:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800754e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007550:	d115      	bne.n	800757e <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007552:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007554:	2200      	movs	r2, #0
 8007556:	2180      	movs	r1, #128	@ 0x80
 8007558:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800755a:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800755c:	4643      	mov	r3, r8
 800755e:	9500      	str	r5, [sp, #0]
 8007560:	f7ff fed1 	bl	8007306 <I2C_WaitOnFlagUntilTimeout>
 8007564:	b9a8      	cbnz	r0, 8007592 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007566:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007568:	b29b      	uxth	r3, r3
 800756a:	2bff      	cmp	r3, #255	@ 0xff
 800756c:	d815      	bhi.n	800759a <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800756e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007570:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8007574:	b292      	uxth	r2, r2
 8007576:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007578:	b2d2      	uxtb	r2, r2
 800757a:	9000      	str	r0, [sp, #0]
 800757c:	e012      	b.n	80075a4 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800757e:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007580:	4641      	mov	r1, r8
 8007582:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007584:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007586:	462a      	mov	r2, r5
 8007588:	f7ff fe92 	bl	80072b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800758c:	b908      	cbnz	r0, 8007592 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	e7df      	b.n	8007552 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8007592:	2300      	movs	r3, #0
 8007594:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007598:	e7a1      	b.n	80074de <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800759a:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800759c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075a0:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075a2:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80075a4:	4639      	mov	r1, r7
 80075a6:	4620      	mov	r0, r4
 80075a8:	f7ff fdec 	bl	8007184 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075ac:	462a      	mov	r2, r5
 80075ae:	4641      	mov	r1, r8
 80075b0:	4620      	mov	r0, r4
 80075b2:	f7ff fe7d 	bl	80072b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d191      	bne.n	80074de <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80075ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80075bc:	6822      	ldr	r2, [r4, #0]
 80075be:	f813 1b01 	ldrb.w	r1, [r3], #1
 80075c2:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80075c4:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80075c6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80075c8:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80075ca:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80075cc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80075ce:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80075d0:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80075d2:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075d4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80075d6:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075d8:	b29b      	uxth	r3, r3
 80075da:	b1b3      	cbz	r3, 800760a <HAL_I2C_Mem_Write+0x15a>
 80075dc:	b9aa      	cbnz	r2, 800760a <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075de:	4643      	mov	r3, r8
 80075e0:	2180      	movs	r1, #128	@ 0x80
 80075e2:	4620      	mov	r0, r4
 80075e4:	9500      	str	r5, [sp, #0]
 80075e6:	f7ff fe8e 	bl	8007306 <I2C_WaitOnFlagUntilTimeout>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	f47f af77 	bne.w	80074de <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075f0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	2bff      	cmp	r3, #255	@ 0xff
 80075f6:	d928      	bls.n	800764a <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075f8:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80075fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075fe:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007600:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007602:	4639      	mov	r1, r7
 8007604:	4620      	mov	r0, r4
 8007606:	f7ff fdbd 	bl	8007184 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800760a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1cc      	bne.n	80075ac <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007612:	462a      	mov	r2, r5
 8007614:	4641      	mov	r1, r8
 8007616:	4620      	mov	r0, r4
 8007618:	f7ff feb0 	bl	800737c <I2C_WaitOnSTOPFlagUntilTimeout>
 800761c:	2800      	cmp	r0, #0
 800761e:	f47f af5e 	bne.w	80074de <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	2120      	movs	r1, #32
 8007626:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800762e:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8007632:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8007636:	f022 0201 	bic.w	r2, r2, #1
 800763a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800763c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007640:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007644:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8007648:	e74a      	b.n	80074e0 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800764a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800764c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8007650:	b292      	uxth	r2, r2
 8007652:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	9000      	str	r0, [sp, #0]
 8007658:	e7d3      	b.n	8007602 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 800765a:	2002      	movs	r0, #2
 800765c:	e740      	b.n	80074e0 <HAL_I2C_Mem_Write+0x30>
 800765e:	bf00      	nop
 8007660:	80002000 	.word	0x80002000

08007664 <HAL_I2C_Mem_Read>:
{
 8007664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007668:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800766a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800766e:	4604      	mov	r4, r0
 8007670:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007672:	2b20      	cmp	r3, #32
{
 8007674:	4616      	mov	r6, r2
 8007676:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800767a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800767e:	f040 80c9 	bne.w	8007814 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8007682:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007684:	b113      	cbz	r3, 800768c <HAL_I2C_Mem_Read+0x28>
 8007686:	f1ba 0f00 	cmp.w	sl, #0
 800768a:	d106      	bne.n	800769a <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800768c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007690:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8007692:	2001      	movs	r0, #1
}
 8007694:	b003      	add	sp, #12
 8007696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800769a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800769e:	2b01      	cmp	r3, #1
 80076a0:	f000 80b8 	beq.w	8007814 <HAL_I2C_Mem_Read+0x1b0>
 80076a4:	f04f 0b01 	mov.w	fp, #1
 80076a8:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80076ac:	f7fe fd1e 	bl	80060ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076b0:	2319      	movs	r3, #25
 80076b2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80076b4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076b6:	465a      	mov	r2, fp
 80076b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80076bc:	4620      	mov	r0, r4
 80076be:	f7ff fe22 	bl	8007306 <I2C_WaitOnFlagUntilTimeout>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d1e4      	bne.n	8007692 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80076c8:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 80076ca:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80076cc:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80076ce:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076d2:	2240      	movs	r2, #64	@ 0x40
 80076d4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 80076d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076da:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80076dc:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80076de:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80076e0:	4a4d      	ldr	r2, [pc, #308]	@ (8007818 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 80076e2:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80076e6:	9200      	str	r2, [sp, #0]
 80076e8:	fa5f f289 	uxtb.w	r2, r9
 80076ec:	f7ff fd4a 	bl	8007184 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076f0:	462a      	mov	r2, r5
 80076f2:	4641      	mov	r1, r8
 80076f4:	4620      	mov	r0, r4
 80076f6:	f7ff fddb 	bl	80072b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80076fa:	bb20      	cbnz	r0, 8007746 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076fc:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007700:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007702:	d116      	bne.n	8007732 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007704:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007706:	2200      	movs	r2, #0
 8007708:	2140      	movs	r1, #64	@ 0x40
 800770a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800770c:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800770e:	4643      	mov	r3, r8
 8007710:	9500      	str	r5, [sp, #0]
 8007712:	f7ff fdf8 	bl	8007306 <I2C_WaitOnFlagUntilTimeout>
 8007716:	b9b0      	cbnz	r0, 8007746 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007718:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800771a:	b29b      	uxth	r3, r3
 800771c:	2bff      	cmp	r3, #255	@ 0xff
 800771e:	4b3f      	ldr	r3, [pc, #252]	@ (800781c <HAL_I2C_Mem_Read+0x1b8>)
 8007720:	d815      	bhi.n	800774e <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8007722:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007724:	b292      	uxth	r2, r2
 8007726:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007728:	b2d2      	uxtb	r2, r2
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007730:	e012      	b.n	8007758 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007732:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007734:	4641      	mov	r1, r8
 8007736:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007738:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800773a:	462a      	mov	r2, r5
 800773c:	f7ff fdb8 	bl	80072b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007740:	b908      	cbnz	r0, 8007746 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	e7de      	b.n	8007704 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8007746:	2300      	movs	r3, #0
 8007748:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800774c:	e7a1      	b.n	8007692 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800774e:	22ff      	movs	r2, #255	@ 0xff
 8007750:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007758:	4639      	mov	r1, r7
 800775a:	4620      	mov	r0, r4
 800775c:	f7ff fd12 	bl	8007184 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007760:	4643      	mov	r3, r8
 8007762:	2200      	movs	r2, #0
 8007764:	2104      	movs	r1, #4
 8007766:	4620      	mov	r0, r4
 8007768:	9500      	str	r5, [sp, #0]
 800776a:	f7ff fdcc 	bl	8007306 <I2C_WaitOnFlagUntilTimeout>
 800776e:	2800      	cmp	r0, #0
 8007770:	d18f      	bne.n	8007692 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007776:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007778:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800777a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800777c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800777e:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8007780:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8007782:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007784:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007786:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007788:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800778a:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800778c:	b29b      	uxth	r3, r3
 800778e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007790:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007792:	b29b      	uxth	r3, r3
 8007794:	b1b3      	cbz	r3, 80077c4 <HAL_I2C_Mem_Read+0x160>
 8007796:	b9aa      	cbnz	r2, 80077c4 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007798:	4643      	mov	r3, r8
 800779a:	2180      	movs	r1, #128	@ 0x80
 800779c:	4620      	mov	r0, r4
 800779e:	9500      	str	r5, [sp, #0]
 80077a0:	f7ff fdb1 	bl	8007306 <I2C_WaitOnFlagUntilTimeout>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	f47f af74 	bne.w	8007692 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077aa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	2bff      	cmp	r3, #255	@ 0xff
 80077b0:	d928      	bls.n	8007804 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80077b2:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80077b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80077b8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80077ba:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077bc:	4639      	mov	r1, r7
 80077be:	4620      	mov	r0, r4
 80077c0:	f7ff fce0 	bl	8007184 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80077c4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1c9      	bne.n	8007760 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077cc:	462a      	mov	r2, r5
 80077ce:	4641      	mov	r1, r8
 80077d0:	4620      	mov	r0, r4
 80077d2:	f7ff fdd3 	bl	800737c <I2C_WaitOnSTOPFlagUntilTimeout>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	f47f af5b 	bne.w	8007692 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	2120      	movs	r1, #32
 80077e0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80077e8:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80077ec:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80077f0:	f022 0201 	bic.w	r2, r2, #1
 80077f4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80077f6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80077fa:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077fe:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8007802:	e747      	b.n	8007694 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8007804:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007806:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800780a:	b292      	uxth	r2, r2
 800780c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	9000      	str	r0, [sp, #0]
 8007812:	e7d3      	b.n	80077bc <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8007814:	2002      	movs	r0, #2
 8007816:	e73d      	b.n	8007694 <HAL_I2C_Mem_Read+0x30>
 8007818:	80002000 	.word	0x80002000
 800781c:	80002400 	.word	0x80002400

08007820 <HAL_I2C_GetState>:
  return hi2c->State;
 8007820:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8007824:	4770      	bx	lr

08007826 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8007826:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 8007828:	4770      	bx	lr

0800782a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800782a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800782c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8007830:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007832:	2a20      	cmp	r2, #32
 8007834:	b2d4      	uxtb	r4, r2
 8007836:	d11c      	bne.n	8007872 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007838:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800783c:	2a01      	cmp	r2, #1
 800783e:	d018      	beq.n	8007872 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007840:	2224      	movs	r2, #36	@ 0x24
 8007842:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007846:	6802      	ldr	r2, [r0, #0]
 8007848:	6810      	ldr	r0, [r2, #0]
 800784a:	f020 0001 	bic.w	r0, r0, #1
 800784e:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007850:	6810      	ldr	r0, [r2, #0]
 8007852:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8007856:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007858:	6810      	ldr	r0, [r2, #0]
 800785a:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800785c:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800785e:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007860:	6811      	ldr	r1, [r2, #0]
 8007862:	f041 0101 	orr.w	r1, r1, #1
 8007866:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007868:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800786c:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007870:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8007872:	2002      	movs	r0, #2
 8007874:	e7fc      	b.n	8007870 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08007876 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007876:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007878:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800787c:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800787e:	2a20      	cmp	r2, #32
 8007880:	b2d4      	uxtb	r4, r2
 8007882:	d11b      	bne.n	80078bc <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007884:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8007888:	2a01      	cmp	r2, #1
 800788a:	d017      	beq.n	80078bc <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800788c:	2224      	movs	r2, #36	@ 0x24
 800788e:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007892:	6802      	ldr	r2, [r0, #0]
 8007894:	6810      	ldr	r0, [r2, #0]
 8007896:	f020 0001 	bic.w	r0, r0, #1
 800789a:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800789c:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800789e:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80078a2:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078a6:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 80078a8:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80078aa:	6811      	ldr	r1, [r2, #0]
 80078ac:	f041 0101 	orr.w	r1, r1, #1
 80078b0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80078b2:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80078b6:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80078ba:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80078bc:	2002      	movs	r0, #2
 80078be:	e7fc      	b.n	80078ba <HAL_I2CEx_ConfigDigitalFilter+0x44>

080078c0 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80078c0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 80078c2:	2401      	movs	r4, #1
 80078c4:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 80078c6:	2500      	movs	r5, #0
 80078c8:	194e      	adds	r6, r1, r5
 80078ca:	443d      	add	r5, r7
 80078cc:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 80078ce:	42be      	cmp	r6, r7
 80078d0:	d112      	bne.n	80078f8 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 80078d2:	2c10      	cmp	r4, #16
 80078d4:	d108      	bne.n	80078e8 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 80078d6:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80078d8:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 80078da:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 80078dc:	601d      	str	r5, [r3, #0]
  p = 0;
 80078de:	4623      	mov	r3, r4
  si = Huffsize[0];
 80078e0:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 80078e2:	5cc8      	ldrb	r0, [r1, r3]
 80078e4:	b9d8      	cbnz	r0, 800791e <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 80078e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 80078e8:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 80078ea:	3401      	adds	r4, #1
 80078ec:	197e      	adds	r6, r7, r5
 80078ee:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80078f2:	d9e9      	bls.n	80078c8 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 80078f4:	2001      	movs	r0, #1
 80078f6:	e7f6      	b.n	80078e6 <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 80078f8:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 80078fc:	e7e7      	b.n	80078ce <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 80078fe:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 8007902:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8007904:	5cc8      	ldrb	r0, [r1, r3]
 8007906:	19dc      	adds	r4, r3, r7
 8007908:	42a8      	cmp	r0, r5
 800790a:	d0f8      	beq.n	80078fe <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 800790c:	2d1f      	cmp	r5, #31
 800790e:	d8f1      	bhi.n	80078f4 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8007910:	fa06 f005 	lsl.w	r0, r6, r5
 8007914:	42a0      	cmp	r0, r4
 8007916:	d9ed      	bls.n	80078f4 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 8007918:	0064      	lsls	r4, r4, #1
    si++;
 800791a:	3501      	adds	r5, #1
 800791c:	e7e1      	b.n	80078e2 <JPEG_Bits_To_SizeCodes+0x22>
 800791e:	1ae7      	subs	r7, r4, r3
 8007920:	e7f0      	b.n	8007904 <JPEG_Bits_To_SizeCodes+0x44>

08007922 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8007922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007924:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8007928:	460d      	mov	r5, r1
 800792a:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800792c:	ab01      	add	r3, sp, #4
 800792e:	aa43      	add	r2, sp, #268	@ 0x10c
 8007930:	a902      	add	r1, sp, #8
 8007932:	f7ff ffc5 	bl	80078c0 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8007936:	b940      	cbnz	r0, 800794a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>
 8007938:	9e01      	ldr	r6, [sp, #4]
 800793a:	4613      	mov	r3, r2
 800793c:	460a      	mov	r2, r1
 800793e:	f104 010f 	add.w	r1, r4, #15
 8007942:	360f      	adds	r6, #15
 8007944:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8007946:	42a1      	cmp	r1, r4
 8007948:	d102      	bne.n	8007950 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800794a:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 800794e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 8007950:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8007954:	2e0b      	cmp	r6, #11
 8007956:	d80a      	bhi.n	800796e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007958:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800795c:	f853 cb04 	ldr.w	ip, [r3], #4
 8007960:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007964:	f812 7b01 	ldrb.w	r7, [r2], #1
 8007968:	3f01      	subs	r7, #1
 800796a:	55af      	strb	r7, [r5, r6]
      k++;
 800796c:	e7eb      	b.n	8007946 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x24>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800796e:	2001      	movs	r0, #1
 8007970:	e7eb      	b.n	800794a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>

08007972 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8007972:	4603      	mov	r3, r0
 8007974:	4608      	mov	r0, r1
 8007976:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8007978:	681c      	ldr	r4, [r3, #0]
{
 800797a:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800797c:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 8007980:	429a      	cmp	r2, r3
 8007982:	d125      	bne.n	80079d0 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8007984:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8007988:	a901      	add	r1, sp, #4
 800798a:	f7ff ffca 	bl	8007922 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800798e:	b9e8      	cbnz	r0, 80079cc <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 8007990:	aa01      	add	r2, sp, #4
 8007992:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8007996:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 800799a:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800799c:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800799e:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80079a0:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 80079a2:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80079a4:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 80079a8:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80079aa:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80079ac:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80079b0:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 80079b4:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80079b6:	7b13      	ldrb	r3, [r2, #12]
 80079b8:	021b      	lsls	r3, r3, #8
 80079ba:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80079be:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80079c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80079c4:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80079c8:	42b4      	cmp	r4, r6
 80079ca:	d1e9      	bne.n	80079a0 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80079cc:	b011      	add	sp, #68	@ 0x44
 80079ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80079d0:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d102      	bne.n	80079de <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80079d8:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 80079dc:	e7d4      	b.n	8007988 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 80079de:	2001      	movs	r0, #1
 80079e0:	e7f4      	b.n	80079cc <JPEG_Set_HuffDC_Mem+0x5a>

080079e2 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80079e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80079e6:	6804      	ldr	r4, [r0, #0]
{
 80079e8:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 80079ec:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80079ee:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d149      	bne.n	8007a8a <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80079f6:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80079fa:	466b      	mov	r3, sp
 80079fc:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 8007a00:	a901      	add	r1, sp, #4
 8007a02:	4630      	mov	r0, r6
 8007a04:	f7ff ff5c 	bl	80078c0 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d13a      	bne.n	8007a82 <JPEG_Set_HuffAC_Mem+0xa0>
 8007a0c:	9b00      	ldr	r3, [sp, #0]
 8007a0e:	460d      	mov	r5, r1
 8007a10:	f106 0c0f 	add.w	ip, r6, #15
 8007a14:	4617      	mov	r7, r2
 8007a16:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8007a18:	f04f 0e0a 	mov.w	lr, #10
 8007a1c:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007a1e:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 8007a20:	4561      	cmp	r1, ip
 8007a22:	d139      	bne.n	8007a98 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8007a24:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8007a28:	a942      	add	r1, sp, #264	@ 0x108
 8007a2a:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 8007a2e:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8007a30:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8007a32:	6063      	str	r3, [r4, #4]
 8007a34:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8007a36:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 8007a3a:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 8007a3e:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8007a40:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007a44:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8007a46:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007a4a:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8007a4c:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007a50:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007a52:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 8007a56:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007a58:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 8007a5c:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007a5e:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007a60:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007a64:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8007a68:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007a6a:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 8007a6e:	021b      	lsls	r3, r3, #8
 8007a70:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007a74:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8007a76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a7a:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8007a7e:	42b4      	cmp	r4, r6
 8007a80:	d1e7      	bne.n	8007a52 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007a82:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 8007a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8007a8a:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d10f      	bne.n	8007ab2 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8007a92:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 8007a96:	e7b0      	b.n	80079fa <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 8007a98:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 8007a9c:	b15b      	cbz	r3, 8007ab6 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8007a9e:	2bf0      	cmp	r3, #240	@ 0xf0
 8007aa0:	d015      	beq.n	8007ace <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 8007aa2:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 8007aa4:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8007aae:	2ba1      	cmp	r3, #161	@ 0xa1
 8007ab0:	d902      	bls.n	8007ab8 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 8007ab2:	2001      	movs	r0, #1
 8007ab4:	e7e5      	b.n	8007a82 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 8007ab6:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007ab8:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8007abc:	f857 8b04 	ldr.w	r8, [r7], #4
 8007ac0:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007ac4:	f815 2b01 	ldrb.w	r2, [r5], #1
 8007ac8:	3a01      	subs	r2, #1
 8007aca:	54f2      	strb	r2, [r6, r3]
      k++;
 8007acc:	e7a8      	b.n	8007a20 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 8007ace:	23a1      	movs	r3, #161	@ 0xa1
 8007ad0:	e7f2      	b.n	8007ab8 <JPEG_Set_HuffAC_Mem+0xd6>

08007ad2 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8007ad2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007ad4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007ad8:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007ada:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8007adc:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007ade:	f002 0203 	and.w	r2, r2, #3
 8007ae2:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	bf0c      	ite	eq
 8007ae8:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8007aec:	f022 0208 	bicne.w	r2, r2, #8
 8007af0:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	f022 0201 	bic.w	r2, r2, #1
 8007af8:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007afa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007afc:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007b00:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8007b02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b08:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8007b0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b10:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007b12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b14:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007b18:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	f042 0201 	orr.w	r2, r2, #1
 8007b20:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007b22:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007b24:	f002 020c 	and.w	r2, r2, #12
 8007b28:	2a08      	cmp	r2, #8
 8007b2a:	d104      	bne.n	8007b36 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8007b2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b2e:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007b32:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8007b34:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8007b36:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007b38:	f002 020c 	and.w	r2, r2, #12
 8007b3c:	2a0c      	cmp	r2, #12
 8007b3e:	d1f9      	bne.n	8007b34 <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007b40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b42:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007b46:	e7f4      	b.n	8007b32 <JPEG_Init_Process+0x60>

08007b48 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8007b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007b4a:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 8007b4c:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007b4e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007b50:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007b52:	42aa      	cmp	r2, r5
 8007b54:	d313      	bcc.n	8007b7e <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8007b56:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007b58:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8007b5a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007b5c:	428b      	cmp	r3, r1
 8007b5e:	d30e      	bcc.n	8007b7e <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8007b60:	4f18      	ldr	r7, [pc, #96]	@ (8007bc4 <JPEG_DMA_StartProcess+0x7c>)
 8007b62:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007b64:	4f18      	ldr	r7, [pc, #96]	@ (8007bc8 <JPEG_DMA_StartProcess+0x80>)
 8007b66:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8007b68:	4e18      	ldr	r6, [pc, #96]	@ (8007bcc <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007b6a:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8007b6c:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8007b6e:	4e18      	ldr	r6, [pc, #96]	@ (8007bd0 <JPEG_DMA_StartProcess+0x88>)
 8007b70:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8007b72:	b105      	cbz	r5, 8007b76 <JPEG_DMA_StartProcess+0x2e>
 8007b74:	b931      	cbnz	r1, 8007b84 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007b76:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007b78:	f043 0304 	orr.w	r3, r3, #4
 8007b7c:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8007b7e:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8007b80:	b003      	add	sp, #12
 8007b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007b84:	fbb2 f6f5 	udiv	r6, r2, r5
 8007b88:	fb05 2516 	mls	r5, r5, r6, r2
 8007b8c:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007b8e:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007b90:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007b92:	fbb3 f2f1 	udiv	r2, r3, r1
 8007b96:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007b9a:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007b9c:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007b9e:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007ba0:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007ba2:	9500      	str	r5, [sp, #0]
 8007ba4:	69e2      	ldr	r2, [r4, #28]
 8007ba6:	f001 f810 	bl	8008bca <HAL_MDMA_Start_IT>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d1e3      	bne.n	8007b76 <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007bae:	6822      	ldr	r2, [r4, #0]
 8007bb0:	9500      	str	r5, [sp, #0]
 8007bb2:	3240      	adds	r2, #64	@ 0x40
 8007bb4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007bb6:	69a1      	ldr	r1, [r4, #24]
 8007bb8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007bba:	f001 f806 	bl	8008bca <HAL_MDMA_Start_IT>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d0de      	beq.n	8007b80 <JPEG_DMA_StartProcess+0x38>
 8007bc2:	e7d8      	b.n	8007b76 <JPEG_DMA_StartProcess+0x2e>
 8007bc4:	08008107 	.word	0x08008107
 8007bc8:	08008003 	.word	0x08008003
 8007bcc:	080085c5 	.word	0x080085c5
 8007bd0:	080085b7 	.word	0x080085b7

08007bd4 <HAL_JPEG_Init>:
{
 8007bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	f000 80f2 	beq.w	8007dc2 <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8007bde:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8007be2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007be6:	b91b      	cbnz	r3, 8007bf0 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8007be8:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8007bec:	f7f9 fa92 	bl	8001114 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8007bf0:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	4a86      	ldr	r2, [pc, #536]	@ (8007e10 <HAL_JPEG_Init+0x23c>)
 8007bf6:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 8007bfa:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 8007bfe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007c00:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 8007c04:	f043 0301 	orr.w	r3, r3, #1
 8007c08:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	f023 0301 	bic.w	r3, r3, #1
 8007c10:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007c12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007c14:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8007c18:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8007c1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007c1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007c20:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8007c22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c28:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007c2a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007c2c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007c30:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8007c32:	4b78      	ldr	r3, [pc, #480]	@ (8007e14 <HAL_JPEG_Init+0x240>)
 8007c34:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8007c36:	4b78      	ldr	r3, [pc, #480]	@ (8007e18 <HAL_JPEG_Init+0x244>)
 8007c38:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8007c3a:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8007c3c:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007c40:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 8007c42:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007c44:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007c46:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007c48:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8007c4c:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8007c4e:	4333      	orrs	r3, r6
 8007c50:	7c56      	ldrb	r6, [r2, #17]
 8007c52:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007c56:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8007c5a:	4281      	cmp	r1, r0
 8007c5c:	d1f0      	bne.n	8007c40 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007c5e:	4b6f      	ldr	r3, [pc, #444]	@ (8007e1c <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8007c60:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 8007c64:	4a6e      	ldr	r2, [pc, #440]	@ (8007e20 <HAL_JPEG_Init+0x24c>)
 8007c66:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007c6a:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 8007c6e:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8007c72:	4610      	mov	r0, r2
 8007c74:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007c76:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 8007c7a:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8007c7e:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007c82:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 8007c84:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007c86:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007c8a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007c8c:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8007c90:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8007c94:	ea43 030c 	orr.w	r3, r3, ip
 8007c98:	f890 c011 	ldrb.w	ip, [r0, #17]
 8007c9c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007ca0:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 8007ca4:	42be      	cmp	r6, r7
 8007ca6:	d1ec      	bne.n	8007c82 <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 8007ca8:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8007cac:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 8007cb0:	f36f 030f 	bfc	r3, #0, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8007cb4:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 8007cb8:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 8007cbc:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007cc0:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8007cc4:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007cc6:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007cca:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007ccc:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8007cd0:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8007cd4:	4333      	orrs	r3, r6
 8007cd6:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 8007cda:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007cde:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8007ce2:	4281      	cmp	r1, r0
 8007ce4:	d1ec      	bne.n	8007cc0 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 8007ce6:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 8007cea:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 8007cee:	4a4d      	ldr	r2, [pc, #308]	@ (8007e24 <HAL_JPEG_Init+0x250>)
 8007cf0:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 8007cf4:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8007cf6:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8007cfa:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8007cfe:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8007d02:	4013      	ands	r3, r2
  *address = value;
 8007d04:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007d08:	2301      	movs	r3, #1
 8007d0a:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 8007d0e:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8007d12:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 8007d16:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 8007d1a:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8007d1e:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8007d20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8007d24:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8007d28:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8007d2c:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8007d2e:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8007d32:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 8007d36:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8007e28 <HAL_JPEG_Init+0x254>)
 8007d3c:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8007d40:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8007d44:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8007d48:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8007d4c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8007d4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8007d52:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 8007d56:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8007d5a:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8007d5c:	4a33      	ldr	r2, [pc, #204]	@ (8007e2c <HAL_JPEG_Init+0x258>)
 8007d5e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8007d62:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 8007d66:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007d6a:	4b31      	ldr	r3, [pc, #196]	@ (8007e30 <HAL_JPEG_Init+0x25c>)
 8007d6c:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 8007d70:	4b30      	ldr	r3, [pc, #192]	@ (8007e34 <HAL_JPEG_Init+0x260>)
 8007d72:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 8007d76:	4b30      	ldr	r3, [pc, #192]	@ (8007e38 <HAL_JPEG_Init+0x264>)
 8007d78:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8007d7c:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8007d80:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8007d82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8007d86:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007d8a:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 8007d8e:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007d90:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007d94:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007d96:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8007d9a:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007d9e:	4333      	orrs	r3, r6
 8007da0:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 8007da4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007da8:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8007dac:	4281      	cmp	r1, r0
 8007dae:	d1ec      	bne.n	8007d8a <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8007db0:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8007db4:	491a      	ldr	r1, [pc, #104]	@ (8007e20 <HAL_JPEG_Init+0x24c>)
 8007db6:	4628      	mov	r0, r5
 8007db8:	f7ff fe13 	bl	80079e2 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8007dbc:	b118      	cbz	r0, 8007dc6 <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 8007dc2:	2001      	movs	r0, #1
}
 8007dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8007dc6:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8007dca:	4918      	ldr	r1, [pc, #96]	@ (8007e2c <HAL_JPEG_Init+0x258>)
 8007dcc:	4628      	mov	r0, r5
 8007dce:	f7ff fe08 	bl	80079e2 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	d1f3      	bne.n	8007dbe <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8007dd6:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8007dda:	490d      	ldr	r1, [pc, #52]	@ (8007e10 <HAL_JPEG_Init+0x23c>)
 8007ddc:	4628      	mov	r0, r5
 8007dde:	f7ff fdc8 	bl	8007972 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d1eb      	bne.n	8007dbe <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8007de6:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8007dea:	4914      	ldr	r1, [pc, #80]	@ (8007e3c <HAL_JPEG_Init+0x268>)
 8007dec:	4628      	mov	r0, r5
 8007dee:	f7ff fdc0 	bl	8007972 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d1e3      	bne.n	8007dbe <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8007df6:	6863      	ldr	r3, [r4, #4]
 8007df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dfc:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007dfe:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8007e00:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8007e02:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007e04:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8007e08:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8007e0a:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 8007e0c:	e7da      	b.n	8007dc4 <HAL_JPEG_Init+0x1f0>
 8007e0e:	bf00      	nop
 8007e10:	08024098 	.word	0x08024098
 8007e14:	08023e98 	.word	0x08023e98
 8007e18:	08023e58 	.word	0x08023e58
 8007e1c:	0b0a0908 	.word	0x0b0a0908
 8007e20:	08023fca 	.word	0x08023fca
 8007e24:	ffff0000 	.word	0xffff0000
 8007e28:	09080706 	.word	0x09080706
 8007e2c:	08023f18 	.word	0x08023f18
 8007e30:	01000404 	.word	0x01000404
 8007e34:	05070403 	.word	0x05070403
 8007e38:	04040201 	.word	0x04040201
 8007e3c:	0802407c 	.word	0x0802407c

08007e40 <HAL_JPEG_GetInfo>:
{
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d06f      	beq.n	8007f28 <HAL_JPEG_GetInfo+0xe8>
 8007e48:	2900      	cmp	r1, #0
 8007e4a:	d06d      	beq.n	8007f28 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8007e4c:	6804      	ldr	r4, [r0, #0]
 8007e4e:	6863      	ldr	r3, [r4, #4]
 8007e50:	f003 0303 	and.w	r3, r3, #3
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d047      	beq.n	8007ee8 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8007e58:	6863      	ldr	r3, [r4, #4]
 8007e5a:	f013 0303 	ands.w	r3, r3, #3
 8007e5e:	d005      	beq.n	8007e6c <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8007e60:	6863      	ldr	r3, [r4, #4]
 8007e62:	f003 0303 	and.w	r3, r3, #3
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d15e      	bne.n	8007f28 <HAL_JPEG_GetInfo+0xe8>
 8007e6a:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007e6c:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8007e6e:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007e70:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007e74:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007e76:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007e78:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8007e7a:	68e2      	ldr	r2, [r4, #12]
 8007e7c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007e80:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007e82:	d13c      	bne.n	8007efe <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007e84:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007e86:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007e88:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007e8c:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007e8e:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007e90:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007e92:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007e96:	d129      	bne.n	8007eec <HAL_JPEG_GetInfo+0xac>
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	f013 0f0f 	tst.w	r3, #15
 8007e9e:	bf0c      	ite	eq
 8007ea0:	2301      	moveq	r3, #1
 8007ea2:	2300      	movne	r3, #0
 8007ea4:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8007ea6:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	3450      	adds	r4, #80	@ 0x50
 8007eac:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8007f2c <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 8007eb0:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007eb2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 8007eb6:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 8007eba:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 8007ebe:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 8007ec2:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8007ec4:	fa29 f206 	lsr.w	r2, r9, r6
 8007ec8:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 8007eca:	2a01      	cmp	r2, #1
 8007ecc:	d119      	bne.n	8007f02 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 8007ece:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 8007ed0:	3608      	adds	r6, #8
 8007ed2:	3701      	adds	r7, #1
 8007ed4:	2e20      	cmp	r6, #32
 8007ed6:	d1f5      	bne.n	8007ec4 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 8007ed8:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007eda:	2d40      	cmp	r5, #64	@ 0x40
 8007edc:	d1ed      	bne.n	8007eba <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 8007ede:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8007ee0:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8007ee2:	610b      	str	r3, [r1, #16]
}
 8007ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee8:	2310      	movs	r3, #16
 8007eea:	e7bf      	b.n	8007e6c <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007eec:	2d03      	cmp	r5, #3
 8007eee:	d106      	bne.n	8007efe <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	f013 0f0f 	tst.w	r3, #15
 8007ef6:	bf0c      	ite	eq
 8007ef8:	2301      	moveq	r3, #1
 8007efa:	2300      	movne	r3, #0
 8007efc:	e7d3      	b.n	8007ea6 <HAL_JPEG_GetInfo+0x66>
 8007efe:	2300      	movs	r3, #0
 8007f00:	e7d1      	b.n	8007ea6 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007f02:	fb0e fb02 	mul.w	fp, lr, r2
 8007f06:	f897 a000 	ldrb.w	sl, [r7]
 8007f0a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f0c:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8007f10:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8007f14:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 8007f16:	bf8b      	itete	hi
 8007f18:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 8007f1c:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8007f20:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8007f22:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8007f26:	e7d3      	b.n	8007ed0 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 8007f28:	2001      	movs	r0, #1
 8007f2a:	e7db      	b.n	8007ee4 <HAL_JPEG_GetInfo+0xa4>
 8007f2c:	08023ed8 	.word	0x08023ed8

08007f30 <HAL_JPEG_Decode_DMA>:
{
 8007f30:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8007f32:	4604      	mov	r4, r0
 8007f34:	b348      	cbz	r0, 8007f8a <HAL_JPEG_Decode_DMA+0x5a>
 8007f36:	b341      	cbz	r1, 8007f8a <HAL_JPEG_Decode_DMA+0x5a>
 8007f38:	b33b      	cbz	r3, 8007f8a <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 8007f3a:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 8007f3e:	2d01      	cmp	r5, #1
 8007f40:	d028      	beq.n	8007f94 <HAL_JPEG_Decode_DMA+0x64>
 8007f42:	2501      	movs	r5, #1
 8007f44:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8007f48:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 8007f4c:	2d01      	cmp	r5, #1
 8007f4e:	d11e      	bne.n	8007f8e <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8007f50:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 8007f52:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8007f54:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8007f58:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8007f5a:	f025 050f 	bic.w	r5, r5, #15
 8007f5e:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8007f60:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8007f62:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8007f66:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8007f6a:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8007f6c:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 8007f6e:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 8007f70:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 8007f72:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 8007f74:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 8007f76:	f7ff fdac 	bl	8007ad2 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8007f7a:	f7ff fde5 	bl	8007b48 <JPEG_DMA_StartProcess>
 8007f7e:	b128      	cbz	r0, 8007f8c <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007f80:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 8007f82:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007f86:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8007f8a:	2001      	movs	r0, #1
}
 8007f8c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 8007f94:	2002      	movs	r0, #2
 8007f96:	e7f9      	b.n	8007f8c <HAL_JPEG_Decode_DMA+0x5c>

08007f98 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8007f98:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007f9a:	f003 030c 	and.w	r3, r3, #12
 8007f9e:	2b0c      	cmp	r3, #12
 8007fa0:	d10d      	bne.n	8007fbe <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8007fa2:	07cb      	lsls	r3, r1, #31
 8007fa4:	d503      	bpl.n	8007fae <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8007fa6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007fa8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007fac:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8007fae:	0789      	lsls	r1, r1, #30
 8007fb0:	d503      	bpl.n	8007fba <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8007fb2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007fb4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007fb8:	6543      	str	r3, [r0, #84]	@ 0x54
}
 8007fba:	2000      	movs	r0, #0
 8007fbc:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007fbe:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007fc0:	f003 030c 	and.w	r3, r3, #12
 8007fc4:	2b08      	cmp	r3, #8
 8007fc6:	d1f8      	bne.n	8007fba <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8007fc8:	f011 0301 	ands.w	r3, r1, #1
 8007fcc:	d004      	beq.n	8007fd8 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8007fce:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007fd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007fd4:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8007fd6:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8007fd8:	078a      	lsls	r2, r1, #30
 8007fda:	d505      	bpl.n	8007fe8 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8007fdc:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8007fde:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8007fe2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007fe6:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8007fe8:	6801      	ldr	r1, [r0, #0]
 8007fea:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8007fec:	ea22 0303 	bic.w	r3, r2, r3
 8007ff0:	630b      	str	r3, [r1, #48]	@ 0x30
 8007ff2:	e7e2      	b.n	8007fba <HAL_JPEG_Pause+0x22>

08007ff4 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8007ff4:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8007ff6:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8007ff8:	4770      	bx	lr

08007ffa <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8007ffa:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8007ffc:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8007ffe:	4770      	bx	lr

08008000 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8008000:	4770      	bx	lr

08008002 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008002:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 8008004:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008006:	6803      	ldr	r3, [r0, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	f022 0201 	bic.w	r2, r2, #1
 800800e:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008010:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008012:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008016:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008018:	2301      	movs	r3, #1
 800801a:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800801e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008020:	f043 0304 	orr.w	r3, r3, #4
 8008024:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8008026:	f7fa fb7b 	bl	8002720 <HAL_JPEG_ErrorCallback>
}
 800802a:	bd08      	pop	{r3, pc}

0800802c <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800802c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800802e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008030:	4604      	mov	r4, r0
 8008032:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008034:	b922      	cbnz	r2, 8008040 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8008036:	2101      	movs	r1, #1
 8008038:	f7ff ffae 	bl	8007f98 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 800803c:	2200      	movs	r2, #0
 800803e:	e004      	b.n	800804a <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008040:	6a03      	ldr	r3, [r0, #32]
 8008042:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008044:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008046:	d924      	bls.n	8008092 <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008048:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800804a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800804c:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8008050:	d11e      	bne.n	8008090 <JPEG_ReadInputData+0x64>
 8008052:	b1ea      	cbz	r2, 8008090 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 8008054:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008058:	69a0      	ldr	r0, [r4, #24]
    nb_words = nb_bytes / 4UL;
 800805a:	ea4f 0692 	mov.w	r6, r2, lsr #2
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800805e:	6821      	ldr	r1, [r4, #0]
    if (nb_words >= nbRequestWords)
 8008060:	d826      	bhi.n	80080b0 <JPEG_ReadInputData+0x84>
        input_count = hjpeg->JpegInCount;
 8008062:	6a27      	ldr	r7, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8008064:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008066:	19c6      	adds	r6, r0, r7
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008068:	5dc7      	ldrb	r7, [r0, r7]
      for (index = 0; index < nbRequestWords; index++)
 800806a:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800806c:	78b2      	ldrb	r2, [r6, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800806e:	f896 c001 	ldrb.w	ip, [r6, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008072:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008076:	78f6      	ldrb	r6, [r6, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008078:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800807c:	ea42 0207 	orr.w	r2, r2, r7
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008080:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008084:	640a      	str	r2, [r1, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8008086:	6a22      	ldr	r2, [r4, #32]
 8008088:	f102 0204 	add.w	r2, r2, #4
 800808c:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800808e:	d1e8      	bne.n	8008062 <JPEG_ReadInputData+0x36>
}
 8008090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8008092:	429a      	cmp	r2, r3
 8008094:	d1d2      	bne.n	800803c <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008096:	6a01      	ldr	r1, [r0, #32]
 8008098:	f7fa fad4 	bl	8002644 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800809c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800809e:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80080a0:	bf84      	itt	hi
 80080a2:	f023 0303 	bichi.w	r3, r3, #3
 80080a6:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 80080a8:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 80080aa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 80080ac:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 80080ae:	e7cc      	b.n	800804a <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 80080b0:	2a03      	cmp	r2, #3
 80080b2:	d917      	bls.n	80080e4 <JPEG_ReadInputData+0xb8>
          input_count = hjpeg->JpegInCount;
 80080b4:	6a27      	ldr	r7, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80080b6:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80080b8:	19c5      	adds	r5, r0, r7
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80080ba:	5dc7      	ldrb	r7, [r0, r7]
        for (index = 0; index < nb_words; index++)
 80080bc:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80080be:	78aa      	ldrb	r2, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80080c0:	f895 c001 	ldrb.w	ip, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80080c4:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80080c8:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80080ca:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80080ce:	ea42 0207 	orr.w	r2, r2, r7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80080d2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80080d6:	640a      	str	r2, [r1, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80080d8:	6a22      	ldr	r2, [r4, #32]
 80080da:	f102 0204 	add.w	r2, r2, #4
 80080de:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80080e0:	d8e8      	bhi.n	80080b4 <JPEG_ReadInputData+0x88>
 80080e2:	e7d5      	b.n	8008090 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 80080e4:	461d      	mov	r5, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80080e6:	6a26      	ldr	r6, [r4, #32]
 80080e8:	00ef      	lsls	r7, r5, #3
        for (index = 0; index < nb_bytes; index++)
 80080ea:	3501      	adds	r5, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80080ec:	5d86      	ldrb	r6, [r0, r6]
        for (index = 0; index < nb_bytes; index++)
 80080ee:	42aa      	cmp	r2, r5
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80080f0:	fa06 f607 	lsl.w	r6, r6, r7
 80080f4:	ea43 0306 	orr.w	r3, r3, r6
          hjpeg->JpegInCount++;
 80080f8:	6a26      	ldr	r6, [r4, #32]
 80080fa:	f106 0601 	add.w	r6, r6, #1
 80080fe:	6226      	str	r6, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008100:	d1f1      	bne.n	80080e6 <JPEG_ReadInputData+0xba>
        hjpeg->Instance->DIR = dataword;
 8008102:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8008104:	e7c4      	b.n	8008090 <JPEG_ReadInputData+0x64>

08008106 <JPEG_MDMAInCpltCallback>:
{
 8008106:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008108:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800810a:	6822      	ldr	r2, [r4, #0]
 800810c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800810e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8008112:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8008114:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008116:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800811a:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800811e:	041b      	lsls	r3, r3, #16
 8008120:	0c1b      	lsrs	r3, r3, #16
 8008122:	2b0c      	cmp	r3, #12
 8008124:	d11a      	bne.n	800815c <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008126:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008128:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800812a:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800812c:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800812e:	695a      	ldr	r2, [r3, #20]
 8008130:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008132:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8008136:	1a9b      	subs	r3, r3, r2
 8008138:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800813a:	6a21      	ldr	r1, [r4, #32]
 800813c:	f7fa fa82 	bl	8002644 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8008140:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008142:	42ab      	cmp	r3, r5
 8008144:	d327      	bcc.n	8008196 <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 8008146:	b95d      	cbnz	r5, 8008160 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008148:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800814a:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800814c:	f043 0304 	orr.w	r3, r3, #4
 8008150:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008152:	2306      	movs	r3, #6
 8008154:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8008158:	f7fa fae2 	bl	8002720 <HAL_JPEG_ErrorCallback>
}
 800815c:	b003      	add	sp, #12
 800815e:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8008160:	fbb3 f2f5 	udiv	r2, r3, r5
 8008164:	fb05 3212 	mls	r2, r5, r2, r3
 8008168:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800816a:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800816c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800816e:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8008170:	04db      	lsls	r3, r3, #19
 8008172:	d40a      	bmi.n	800818a <JPEG_MDMAInCpltCallback+0x84>
 8008174:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008176:	b143      	cbz	r3, 800818a <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008178:	2101      	movs	r1, #1
 800817a:	3240      	adds	r2, #64	@ 0x40
 800817c:	9100      	str	r1, [sp, #0]
 800817e:	69a1      	ldr	r1, [r4, #24]
 8008180:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008182:	f000 fd22 	bl	8008bca <HAL_MDMA_Start_IT>
 8008186:	2800      	cmp	r0, #0
 8008188:	d1de      	bne.n	8008148 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800818a:	6822      	ldr	r2, [r4, #0]
 800818c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800818e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008192:	6313      	str	r3, [r2, #48]	@ 0x30
 8008194:	e7e2      	b.n	800815c <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 8008196:	2b00      	cmp	r3, #0
 8008198:	d0e8      	beq.n	800816c <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800819a:	079a      	lsls	r2, r3, #30
 800819c:	d0e6      	beq.n	800816c <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800819e:	f023 0303 	bic.w	r3, r3, #3
 80081a2:	3304      	adds	r3, #4
 80081a4:	e7e1      	b.n	800816a <JPEG_MDMAInCpltCallback+0x64>

080081a6 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80081a6:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 80081a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80081aa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80081ae:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 80081b0:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d32a      	bcc.n	800820c <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 80081b6:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 80081b8:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 80081ba:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80081bc:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 80081be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 80081c0:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80081c2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80081c4:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80081c6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80081c8:	69e0      	ldr	r0, [r4, #28]
 80081ca:	4428      	add	r0, r5
 80081cc:	ea4f 2513 	mov.w	r5, r3, lsr #8
 80081d0:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80081d2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80081d4:	69e0      	ldr	r0, [r4, #28]
 80081d6:	4428      	add	r0, r5
 80081d8:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80081dc:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80081e0:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80081e2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80081e4:	69e0      	ldr	r0, [r4, #28]
 80081e6:	4428      	add	r0, r5
 80081e8:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 80081ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80081ec:	f103 0304 	add.w	r3, r3, #4
 80081f0:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 80081f2:	d1e1      	bne.n	80081b8 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80081f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80081f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d106      	bne.n	800820a <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80081fc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80081fe:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008200:	4620      	mov	r0, r4
 8008202:	f7fa fa3d 	bl	8002680 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008206:	2300      	movs	r3, #0
 8008208:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800820a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800820c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800820e:	4293      	cmp	r3, r2
 8008210:	d9fb      	bls.n	800820a <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8008212:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8008214:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800821a:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800821c:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800821e:	d105      	bne.n	800822c <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008220:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008222:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008224:	429f      	cmp	r7, r3
 8008226:	d119      	bne.n	800825c <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008228:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800822a:	e7e9      	b.n	8008200 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800822c:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800822e:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 8008230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008232:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008234:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008236:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008238:	69e1      	ldr	r1, [r4, #28]
 800823a:	4429      	add	r1, r5
 800823c:	0a1d      	lsrs	r5, r3, #8
 800823e:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008240:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008242:	69e1      	ldr	r1, [r4, #28]
 8008244:	4429      	add	r1, r5
 8008246:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008248:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800824a:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800824c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800824e:	69e1      	ldr	r1, [r4, #28]
 8008250:	4429      	add	r1, r5
 8008252:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 8008254:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008256:	3304      	adds	r3, #4
 8008258:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800825a:	e7de      	b.n	800821a <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800825c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800825e:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8008260:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8008262:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 8008264:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 8008266:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008268:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800826a:	d114      	bne.n	8008296 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800826c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800826e:	4620      	mov	r0, r4
 8008270:	f7fa fa06 	bl	8002680 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8008278:	1d2b      	adds	r3, r5, #4
 800827a:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800827c:	2b03      	cmp	r3, #3
 800827e:	d8c4      	bhi.n	800820a <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008280:	00da      	lsls	r2, r3, #3
 8008282:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008284:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 8008286:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008288:	fa26 f202 	lsr.w	r2, r6, r2
 800828c:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800828e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008290:	3201      	adds	r2, #1
 8008292:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8008294:	e7f2      	b.n	800827c <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008296:	f002 0303 	and.w	r3, r2, #3
 800829a:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800829e:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80082a0:	00db      	lsls	r3, r3, #3
 80082a2:	fa26 f303 	lsr.w	r3, r6, r3
 80082a6:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 80082aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80082ac:	3301      	adds	r3, #1
 80082ae:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80082b0:	e7d9      	b.n	8008266 <JPEG_StoreOutputData+0xc0>

080082b2 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80082b2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80082b4:	f003 0303 	and.w	r3, r3, #3
 80082b8:	2b02      	cmp	r3, #2
{
 80082ba:	b510      	push	{r4, lr}
 80082bc:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80082be:	d114      	bne.n	80082ea <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80082c0:	6803      	ldr	r3, [r0, #0]
 80082c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082c4:	065b      	lsls	r3, r3, #25
 80082c6:	d510      	bpl.n	80082ea <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80082c8:	1d01      	adds	r1, r0, #4
 80082ca:	f7ff fdb9 	bl	8007e40 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 80082ce:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80082d0:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 80082d2:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80082d4:	f7fa f980 	bl	80025d8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082e0:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80082e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082e8:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 80082ea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80082ec:	04d9      	lsls	r1, r3, #19
 80082ee:	d407      	bmi.n	8008300 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082f4:	0792      	lsls	r2, r2, #30
 80082f6:	d544      	bpl.n	8008382 <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80082f8:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 80082fa:	4620      	mov	r0, r4
 80082fc:	f7ff fe96 	bl	800802c <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008300:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008302:	0499      	lsls	r1, r3, #18
 8008304:	d407      	bmi.n	8008316 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800830a:	0712      	lsls	r2, r2, #28
 800830c:	d53e      	bpl.n	800838c <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800830e:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 8008310:	4620      	mov	r0, r4
 8008312:	f7ff ff48 	bl	80081a6 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800831a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800831e:	2a20      	cmp	r2, #32
 8008320:	d13c      	bne.n	800839c <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	f022 0201 	bic.w	r2, r2, #1
 8008328:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800832a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800832c:	f002 020c 	and.w	r2, r2, #12
 8008330:	2a08      	cmp	r2, #8
 8008332:	d103      	bne.n	800833c <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008334:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008336:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800833a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800833c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800833e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008342:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8008344:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008346:	b133      	cbz	r3, 8008356 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008348:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800834a:	4620      	mov	r0, r4
 800834c:	69e1      	ldr	r1, [r4, #28]
 800834e:	f7fa f997 	bl	8002680 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008352:	2300      	movs	r3, #0
 8008354:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8008356:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008358:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800835a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800835c:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008360:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008364:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008366:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008368:	f04f 0200 	mov.w	r2, #0
 800836c:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008370:	f04f 0201 	mov.w	r2, #1
 8008374:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008378:	d10d      	bne.n	8008396 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800837a:	f7fa f9d3 	bl	8002724 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800837e:	2001      	movs	r0, #1
}
 8008380:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8008382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008384:	0758      	lsls	r0, r3, #29
 8008386:	d5bb      	bpl.n	8008300 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 8008388:	2101      	movs	r1, #1
 800838a:	e7b6      	b.n	80082fa <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800838c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800838e:	06db      	lsls	r3, r3, #27
 8008390:	d5c1      	bpl.n	8008316 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 8008392:	2101      	movs	r1, #1
 8008394:	e7bc      	b.n	8008310 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008396:	f7ff fe33 	bl	8008000 <HAL_JPEG_EncodeCpltCallback>
 800839a:	e7f0      	b.n	800837e <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 800839c:	2000      	movs	r0, #0
 800839e:	e7ef      	b.n	8008380 <JPEG_Process+0xce>

080083a0 <JPEG_DMA_PollResidualData>:
{
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	4604      	mov	r4, r0
 80083a4:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80083a6:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80083a8:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80083aa:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 80083ae:	d122      	bne.n	80083f6 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80083b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083b2:	06d0      	lsls	r0, r2, #27
 80083b4:	d51f      	bpl.n	80083f6 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 80083b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 80083b8:	69e1      	ldr	r1, [r4, #28]
 80083ba:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80083bc:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 80083be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80083c0:	69e2      	ldr	r2, [r4, #28]
 80083c2:	440a      	add	r2, r1
 80083c4:	0a19      	lsrs	r1, r3, #8
 80083c6:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80083c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80083ca:	69e2      	ldr	r2, [r4, #28]
 80083cc:	440a      	add	r2, r1
 80083ce:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80083d0:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80083d2:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80083d4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80083d6:	69e2      	ldr	r2, [r4, #28]
 80083d8:	440a      	add	r2, r1
 80083da:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 80083dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80083de:	3304      	adds	r3, #4
 80083e0:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80083e2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80083e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d105      	bne.n	80083f6 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80083ea:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80083ec:	4620      	mov	r0, r4
 80083ee:	69e1      	ldr	r1, [r4, #28]
 80083f0:	f7fa f946 	bl	8002680 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 80083f4:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80083f6:	3e01      	subs	r6, #1
 80083f8:	d1d5      	bne.n	80083a6 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80083fa:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 80083fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80083fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008400:	06c9      	lsls	r1, r1, #27
 8008402:	d501      	bpl.n	8008408 <JPEG_DMA_PollResidualData+0x68>
 8008404:	0492      	lsls	r2, r2, #18
 8008406:	d420      	bmi.n	800844a <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	f022 0201 	bic.w	r2, r2, #1
 800840e:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8008410:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008412:	b133      	cbz	r3, 8008422 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008414:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008416:	4620      	mov	r0, r4
 8008418:	69e1      	ldr	r1, [r4, #28]
 800841a:	f7fa f931 	bl	8002680 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8008422:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008424:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008426:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008428:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800842c:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008430:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008432:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008434:	f04f 0200 	mov.w	r2, #0
 8008438:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800843c:	f04f 0201 	mov.w	r2, #1
 8008440:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008444:	d102      	bne.n	800844c <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008446:	f7fa f96d 	bl	8002724 <HAL_JPEG_DecodeCpltCallback>
}
 800844a:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800844c:	f7ff fdd8 	bl	8008000 <HAL_JPEG_EncodeCpltCallback>
}
 8008450:	e7fb      	b.n	800844a <JPEG_DMA_PollResidualData+0xaa>

08008452 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8008452:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008454:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 8008458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800845a:	4604      	mov	r4, r0
 800845c:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800845e:	d014      	beq.n	800848a <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008460:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008462:	f003 030c 	and.w	r3, r3, #12
 8008466:	2b0c      	cmp	r3, #12
 8008468:	d146      	bne.n	80084f8 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800846a:	07cb      	lsls	r3, r1, #31
 800846c:	d520      	bpl.n	80084b0 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800846e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008470:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008474:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008476:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8008478:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 800847a:	b941      	cbnz	r1, 800848e <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800847c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800847e:	f043 0304 	orr.w	r3, r3, #4
 8008482:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008484:	2306      	movs	r3, #6
 8008486:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800848a:	2001      	movs	r0, #1
 800848c:	e01d      	b.n	80084ca <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800848e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008490:	fbb3 f2f1 	udiv	r2, r3, r1
 8008494:	fb01 3212 	mls	r2, r1, r2, r3
 8008498:	1a9b      	subs	r3, r3, r2
 800849a:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 800849c:	b143      	cbz	r3, 80084b0 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800849e:	6822      	ldr	r2, [r4, #0]
 80084a0:	2101      	movs	r1, #1
 80084a2:	3240      	adds	r2, #64	@ 0x40
 80084a4:	9100      	str	r1, [sp, #0]
 80084a6:	69a1      	ldr	r1, [r4, #24]
 80084a8:	f000 fb8f 	bl	8008bca <HAL_MDMA_Start_IT>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d1e5      	bne.n	800847c <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80084b0:	07a8      	lsls	r0, r5, #30
 80084b2:	d509      	bpl.n	80084c8 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80084b4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80084b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084ba:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80084bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80084be:	0419      	lsls	r1, r3, #16
 80084c0:	d505      	bpl.n	80084ce <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 80084c2:	4620      	mov	r0, r4
 80084c4:	f7ff ff6c 	bl	80083a0 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 80084c8:	2000      	movs	r0, #0
}
 80084ca:	b003      	add	sp, #12
 80084cc:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 80084ce:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80084d0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 80084d2:	2900      	cmp	r1, #0
 80084d4:	d0d2      	beq.n	800847c <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 80084d6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80084d8:	fbb3 f2f1 	udiv	r2, r3, r1
 80084dc:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80084e0:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 80084e2:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80084e4:	2201      	movs	r2, #1
 80084e6:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 80084e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80084ea:	9200      	str	r2, [sp, #0]
 80084ec:	69e2      	ldr	r2, [r4, #28]
 80084ee:	f000 fb6c 	bl	8008bca <HAL_MDMA_Start_IT>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d0e8      	beq.n	80084c8 <HAL_JPEG_Resume+0x76>
 80084f6:	e7c1      	b.n	800847c <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80084f8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80084fa:	f003 030c 	and.w	r3, r3, #12
 80084fe:	2b08      	cmp	r3, #8
 8008500:	d1e2      	bne.n	80084c8 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008502:	f011 0301 	ands.w	r3, r1, #1
 8008506:	d004      	beq.n	8008512 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8008508:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800850a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800850e:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008510:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008512:	07aa      	lsls	r2, r5, #30
 8008514:	d505      	bpl.n	8008522 <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008516:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008518:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800851c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008520:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 8008522:	6821      	ldr	r1, [r4, #0]
 8008524:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008526:	4313      	orrs	r3, r2
 8008528:	630b      	str	r3, [r1, #48]	@ 0x30
 800852a:	e7cd      	b.n	80084c8 <HAL_JPEG_Resume+0x76>

0800852c <JPEG_DMA_EndProcess>:
{
 800852c:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800852e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 8008530:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008532:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8008540:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008542:	429a      	cmp	r2, r3
 8008544:	d105      	bne.n	8008552 <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008546:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8008548:	69c1      	ldr	r1, [r0, #28]
 800854a:	f7fa f899 	bl	8002680 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 8008556:	f015 0510 	ands.w	r5, r5, #16
 800855a:	d124      	bne.n	80085a6 <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 800855c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800855e:	b12b      	cbz	r3, 800856c <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008560:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008562:	4620      	mov	r0, r4
 8008564:	69e1      	ldr	r1, [r4, #28]
 8008566:	f7fa f88b 	bl	8002680 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800856a:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800856c:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800856e:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008570:	6813      	ldr	r3, [r2, #0]
 8008572:	f023 0301 	bic.w	r3, r3, #1
 8008576:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8008578:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800857a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800857c:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008580:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008584:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008586:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008588:	f04f 0200 	mov.w	r2, #0
 800858c:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008590:	f04f 0201 	mov.w	r2, #1
 8008594:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008598:	d102      	bne.n	80085a0 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800859a:	f7fa f8c3 	bl	8002724 <HAL_JPEG_DecodeCpltCallback>
}
 800859e:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80085a0:	f7ff fd2e 	bl	8008000 <HAL_JPEG_EncodeCpltCallback>
 80085a4:	e7fb      	b.n	800859e <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80085a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80085a8:	049b      	lsls	r3, r3, #18
 80085aa:	d4f8      	bmi.n	800859e <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 80085ac:	4620      	mov	r0, r4
}
 80085ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 80085b2:	f7ff bef5 	b.w	80083a0 <JPEG_DMA_PollResidualData>

080085b6 <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80085b6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80085b8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80085ba:	041b      	lsls	r3, r3, #16
 80085bc:	d501      	bpl.n	80085c2 <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 80085be:	f7ff bfb5 	b.w	800852c <JPEG_DMA_EndProcess>
}
 80085c2:	4770      	bx	lr

080085c4 <JPEG_MDMAOutCpltCallback>:
{
 80085c4:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80085c6:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085cc:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80085d0:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 80085d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085d4:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 80085d8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80085dc:	0412      	lsls	r2, r2, #16
 80085de:	0c12      	lsrs	r2, r2, #16
 80085e0:	2a0c      	cmp	r2, #12
 80085e2:	d125      	bne.n	8008630 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 80085e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085e6:	069a      	lsls	r2, r3, #26
 80085e8:	d424      	bmi.n	8008634 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80085ea:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80085ec:	4620      	mov	r0, r4
 80085ee:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80085f0:	695a      	ldr	r2, [r3, #20]
 80085f2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80085f4:	f3c2 0210 	ubfx	r2, r2, #0, #17
 80085f8:	1a9b      	subs	r3, r3, r2
 80085fa:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80085fc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80085fe:	f7fa f83f 	bl	8002680 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008602:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008604:	049b      	lsls	r3, r3, #18
 8008606:	d415      	bmi.n	8008634 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008608:	6821      	ldr	r1, [r4, #0]
 800860a:	2301      	movs	r3, #1
 800860c:	3144      	adds	r1, #68	@ 0x44
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008612:	69e2      	ldr	r2, [r4, #28]
 8008614:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008616:	f000 fad8 	bl	8008bca <HAL_MDMA_Start_IT>
 800861a:	b158      	cbz	r0, 8008634 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800861c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800861e:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008620:	f043 0304 	orr.w	r3, r3, #4
 8008624:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008626:	2306      	movs	r3, #6
 8008628:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800862c:	f7fa f878 	bl	8002720 <HAL_JPEG_ErrorCallback>
}
 8008630:	b002      	add	sp, #8
 8008632:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008634:	6822      	ldr	r2, [r4, #0]
 8008636:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008638:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800863c:	6313      	str	r3, [r2, #48]	@ 0x30
 800863e:	e7f7      	b.n	8008630 <JPEG_MDMAOutCpltCallback+0x6c>

08008640 <HAL_JPEG_IRQHandler>:
{
 8008640:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 8008642:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 8008646:	4604      	mov	r4, r0
  switch (hjpeg->State)
 8008648:	3b03      	subs	r3, #3
 800864a:	2b01      	cmp	r3, #1
 800864c:	d850      	bhi.n	80086f0 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800864e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008650:	f003 030c 	and.w	r3, r3, #12
 8008654:	2b08      	cmp	r3, #8
 8008656:	d103      	bne.n	8008660 <HAL_JPEG_IRQHandler+0x20>
}
 8008658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800865c:	f7ff be29 	b.w	80082b2 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008660:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008662:	f003 030c 	and.w	r3, r3, #12
 8008666:	2b0c      	cmp	r3, #12
 8008668:	d142      	bne.n	80086f0 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800866a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800866c:	f003 0303 	and.w	r3, r3, #3
 8008670:	2b02      	cmp	r3, #2
 8008672:	d114      	bne.n	800869e <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8008674:	6803      	ldr	r3, [r0, #0]
 8008676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008678:	0659      	lsls	r1, r3, #25
 800867a:	d510      	bpl.n	800869e <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800867c:	1d01      	adds	r1, r0, #4
 800867e:	f7ff fbdf 	bl	8007e40 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8008682:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008684:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8008686:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008688:	f7f9 ffa6 	bl	80025d8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800868c:	6823      	ldr	r3, [r4, #0]
 800868e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008690:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008694:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8008696:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008698:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800869c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086a2:	0692      	lsls	r2, r2, #26
 80086a4:	d524      	bpl.n	80086f0 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80086a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80086a8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80086aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80086ae:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	f022 0201 	bic.w	r2, r2, #1
 80086b6:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80086b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086ba:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80086be:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80086c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086c2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80086c6:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80086c8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d101      	bne.n	80086d4 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 80086d0:	f000 fac4 	bl	8008c5c <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 80086d4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80086d6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d103      	bne.n	80086e6 <HAL_JPEG_IRQHandler+0xa6>
}
 80086de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 80086e2:	f000 babb 	b.w	8008c5c <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 80086e6:	4620      	mov	r0, r4
}
 80086e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 80086ec:	f7ff bf1e 	b.w	800852c <JPEG_DMA_EndProcess>
}
 80086f0:	bd10      	pop	{r4, pc}
	...

080086f4 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80086f4:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80086f6:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80086f8:	3284      	adds	r2, #132	@ 0x84
 80086fa:	1883      	adds	r3, r0, r2
{
 80086fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80086fe:	68c7      	ldr	r7, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008700:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008702:	684c      	ldr	r4, [r1, #4]
 8008704:	f3c7 470b 	ubfx	r7, r7, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008708:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800870c:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800870e:	4427      	add	r7, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008710:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008712:	f106 0c01 	add.w	ip, r6, #1
 8008716:	68c5      	ldr	r5, [r0, #12]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008718:	1ba4      	subs	r4, r4, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800871a:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800871e:	4465      	add	r5, ip
 8008720:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008724:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008726:	68c7      	ldr	r7, [r0, #12]
 8008728:	68cd      	ldr	r5, [r1, #12]
 800872a:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800872e:	442f      	add	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008730:	689d      	ldr	r5, [r3, #8]
 8008732:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8008736:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008738:	688d      	ldr	r5, [r1, #8]
 800873a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800873e:	3501      	adds	r5, #1
 8008740:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 8008744:	4465      	add	r5, ip
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008746:	f8d1 c010 	ldr.w	ip, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800874a:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800874e:	698f      	ldr	r7, [r1, #24]
 8008750:	f1bc 0f07 	cmp.w	ip, #7
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008754:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008756:	691d      	ldr	r5, [r3, #16]
 8008758:	f025 0507 	bic.w	r5, r5, #7
 800875c:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800875e:	f8c3 c010 	str.w	ip, [r3, #16]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008762:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8008766:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800876a:	f891 7031 	ldrb.w	r7, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800876e:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008772:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008776:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800877a:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800877c:	695d      	ldr	r5, [r3, #20]
 800877e:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8008782:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008784:	694d      	ldr	r5, [r1, #20]
 8008786:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008788:	69dd      	ldr	r5, [r3, #28]
 800878a:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800878e:	f025 0507 	bic.w	r5, r5, #7
 8008792:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008794:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8008798:	ea45 0507 	orr.w	r5, r5, r7
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800879c:	bf88      	it	hi
 800879e:	2701      	movhi	r7, #1
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80087a0:	61dd      	str	r5, [r3, #28]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80087a2:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80087a4:	629d      	str	r5, [r3, #40]	@ 0x28
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80087a6:	bf9c      	itt	ls
 80087a8:	4d0c      	ldrls	r5, [pc, #48]	@ (80087dc <LTDC_SetConfig+0xe8>)
 80087aa:	f815 700c 	ldrbls.w	r7, [r5, ip]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80087ae:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80087b0:	437c      	muls	r4, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80087b2:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80087b6:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80087b8:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80087ba:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80087bc:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80087be:	437d      	muls	r5, r7
 80087c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80087c4:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80087c6:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80087c8:	f36f 040a 	bfc	r4, #0, #11
 80087cc:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80087ce:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80087d0:	5883      	ldr	r3, [r0, r2]
 80087d2:	f043 0301 	orr.w	r3, r3, #1
 80087d6:	5083      	str	r3, [r0, r2]
}
 80087d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087da:	bf00      	nop
 80087dc:	080240b4 	.word	0x080240b4

080087e0 <HAL_LTDC_Init>:
{
 80087e0:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80087e2:	4604      	mov	r4, r0
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d04e      	beq.n	8008886 <HAL_LTDC_Init+0xa6>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80087e8:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 80087ec:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80087f0:	b91b      	cbnz	r3, 80087fa <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80087f2:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 80087f6:	f7f8 fd13 	bl	8001220 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80087fa:	2302      	movs	r3, #2
 80087fc:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008800:	6823      	ldr	r3, [r4, #0]
 8008802:	699a      	ldr	r2, [r3, #24]
 8008804:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008808:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800880a:	6999      	ldr	r1, [r3, #24]
 800880c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8008810:	4302      	orrs	r2, r0
 8008812:	68e0      	ldr	r0, [r4, #12]
 8008814:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008816:	6920      	ldr	r0, [r4, #16]
 8008818:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800881a:	430a      	orrs	r2, r1
 800881c:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800881e:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 8008822:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008826:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8008828:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 800882c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008830:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8008832:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 8008836:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800883a:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800883c:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 8008840:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008844:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008848:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800884c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008850:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008854:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008856:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8008858:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800885c:	432a      	orrs	r2, r5
 800885e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008862:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008864:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008868:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800886a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800886c:	f042 0206 	orr.w	r2, r2, #6
 8008870:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8008872:	699a      	ldr	r2, [r3, #24]
 8008874:	f042 0201 	orr.w	r2, r2, #1
 8008878:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800887a:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800887c:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8008880:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8008884:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008886:	2001      	movs	r0, #1
 8008888:	e7fc      	b.n	8008884 <HAL_LTDC_Init+0xa4>

0800888a <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800888a:	4770      	bx	lr

0800888c <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800888c:	4770      	bx	lr

0800888e <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800888e:	4770      	bx	lr

08008890 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008890:	6803      	ldr	r3, [r0, #0]
{
 8008892:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008894:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 8008896:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008898:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800889a:	0772      	lsls	r2, r6, #29
 800889c:	d514      	bpl.n	80088c8 <HAL_LTDC_IRQHandler+0x38>
 800889e:	0769      	lsls	r1, r5, #29
 80088a0:	d512      	bpl.n	80088c8 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80088a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088a4:	f022 0204 	bic.w	r2, r2, #4
 80088a8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80088aa:	2204      	movs	r2, #4
 80088ac:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80088ae:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80088b2:	f043 0301 	orr.w	r3, r3, #1
 80088b6:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 80088ba:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80088bc:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80088c0:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80088c4:	f7ff ffe1 	bl	800888a <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80088c8:	07b2      	lsls	r2, r6, #30
 80088ca:	d516      	bpl.n	80088fa <HAL_LTDC_IRQHandler+0x6a>
 80088cc:	07ab      	lsls	r3, r5, #30
 80088ce:	d514      	bpl.n	80088fa <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80088d0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80088d2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80088d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088d6:	f022 0202 	bic.w	r2, r2, #2
 80088da:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80088dc:	2202      	movs	r2, #2
 80088de:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80088e0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80088e4:	4313      	orrs	r3, r2
 80088e6:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80088ea:	2304      	movs	r3, #4
 80088ec:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80088f0:	2300      	movs	r3, #0
 80088f2:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80088f6:	f7ff ffc8 	bl	800888a <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80088fa:	07f0      	lsls	r0, r6, #31
 80088fc:	d510      	bpl.n	8008920 <HAL_LTDC_IRQHandler+0x90>
 80088fe:	07e9      	lsls	r1, r5, #31
 8008900:	d50e      	bpl.n	8008920 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008902:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8008904:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008906:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008908:	f022 0201 	bic.w	r2, r2, #1
 800890c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800890e:	2201      	movs	r2, #1
 8008910:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8008912:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8008914:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008918:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800891c:	f7ff ffb6 	bl	800888c <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008920:	0732      	lsls	r2, r6, #28
 8008922:	d511      	bpl.n	8008948 <HAL_LTDC_IRQHandler+0xb8>
 8008924:	072b      	lsls	r3, r5, #28
 8008926:	d50f      	bpl.n	8008948 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008928:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800892a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800892c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800892e:	f022 0208 	bic.w	r2, r2, #8
 8008932:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008934:	2208      	movs	r2, #8
 8008936:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8008938:	2301      	movs	r3, #1
 800893a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800893e:	2300      	movs	r3, #0
 8008940:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008944:	f7ff ffa3 	bl	800888e <HAL_LTDC_ReloadEventCallback>
}
 8008948:	bd70      	pop	{r4, r5, r6, pc}

0800894a <HAL_LTDC_ConfigLayer>:
{
 800894a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800894e:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 8008952:	4606      	mov	r6, r0
 8008954:	460f      	mov	r7, r1
 8008956:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8008958:	2b01      	cmp	r3, #1
 800895a:	f04f 0002 	mov.w	r0, #2
 800895e:	d01f      	beq.n	80089a0 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008960:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 8008962:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008966:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008968:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800896c:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8008970:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008974:	3438      	adds	r4, #56	@ 0x38
 8008976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800897a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800897c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800897e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008982:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008984:	4630      	mov	r0, r6
 8008986:	4662      	mov	r2, ip
 8008988:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800898a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800898c:	f7ff feb2 	bl	80086f4 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008990:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8008992:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008994:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008998:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800899c:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 80089a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080089a4 <HAL_LTDC_SetPitch>:
{
 80089a4:	4603      	mov	r3, r0
 80089a6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 80089a8:	f890 00a0 	ldrb.w	r0, [r0, #160]	@ 0xa0
 80089ac:	2801      	cmp	r0, #1
 80089ae:	f04f 0002 	mov.w	r0, #2
 80089b2:	d026      	beq.n	8008a02 <HAL_LTDC_SetPitch+0x5e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80089b4:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80089b8:	2034      	movs	r0, #52	@ 0x34
 80089ba:	fb00 3002 	mla	r0, r0, r2, r3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80089be:	01d2      	lsls	r2, r2, #7
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80089c0:	6c80      	ldr	r0, [r0, #72]	@ 0x48
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80089c2:	3284      	adds	r2, #132	@ 0x84
 80089c4:	2807      	cmp	r0, #7
 80089c6:	bf96      	itet	ls
 80089c8:	4c0e      	ldrls	r4, [pc, #56]	@ (8008a04 <HAL_LTDC_SetPitch+0x60>)
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80089ca:	2401      	movhi	r4, #1
 80089cc:	5c24      	ldrbls	r4, [r4, r0]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80089ce:	6818      	ldr	r0, [r3, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 80089d0:	434c      	muls	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80089d2:	4402      	add	r2, r0
 80089d4:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80089d6:	f36f 401c 	bfc	r0, #16, #13
 80089da:	62d0      	str	r0, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80089dc:	480a      	ldr	r0, [pc, #40]	@ (8008a08 <HAL_LTDC_SetPitch+0x64>)
 80089de:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 80089e0:	f045 0501 	orr.w	r5, r5, #1
 80089e4:	6245      	str	r5, [r0, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 80089e6:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 80089e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80089ec:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80089ee:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80089f0:	f042 0201 	orr.w	r2, r2, #1
 80089f4:	6242      	str	r2, [r0, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80089f6:	2201      	movs	r2, #1
  __HAL_UNLOCK(hltdc);
 80089f8:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80089fa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80089fe:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 8008a02:	bd30      	pop	{r4, r5, pc}
 8008a04:	080240b4 	.word	0x080240b4
 8008a08:	50001000 	.word	0x50001000

08008a0c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8008a0c:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008a0e:	6804      	ldr	r4, [r0, #0]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008a10:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008a14:	6965      	ldr	r5, [r4, #20]
 8008a16:	f363 0510 	bfi	r5, r3, #0, #17
 8008a1a:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8008a1c:	9d03      	ldr	r5, [sp, #12]
 8008a1e:	6963      	ldr	r3, [r4, #20]
 8008a20:	f105 35ff 	add.w	r5, r5, #4294967295
 8008a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a28:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8008a2c:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8008a2e:	f04f 031f 	mov.w	r3, #31
 8008a32:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 8008a34:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 8008a36:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8008a38:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008a3a:	bf0c      	ite	eq
 8008a3c:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8008a40:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008a44:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8008a48:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8008a4a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008a4c:	bf0c      	ite	eq
 8008a4e:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8008a52:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 8008a56:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8008a58:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8008a5a:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8008a5c:	bd30      	pop	{r4, r5, pc}

08008a5e <HAL_MDMA_Init>:
{
 8008a5e:	b538      	push	{r3, r4, r5, lr}
 8008a60:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008a62:	f7fd fb43 	bl	80060ec <HAL_GetTick>
 8008a66:	4605      	mov	r5, r0
  if(hmdma == NULL)
 8008a68:	2c00      	cmp	r4, #0
 8008a6a:	d061      	beq.n	8008b30 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 8008a6c:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 8008a6e:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8008a70:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008a74:	2302      	movs	r3, #2
 8008a76:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8008a7a:	68d3      	ldr	r3, [r2, #12]
 8008a7c:	f023 0301 	bic.w	r3, r3, #1
 8008a80:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	07d2      	lsls	r2, r2, #31
 8008a88:	d448      	bmi.n	8008b1c <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008a8a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008a92:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	69e1      	ldr	r1, [r4, #28]
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	6a21      	ldr	r1, [r4, #32]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	68a1      	ldr	r1, [r4, #8]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8008ab2:	3901      	subs	r1, #1
 8008ab4:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008ab8:	6861      	ldr	r1, [r4, #4]
 8008aba:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008abe:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008ac0:	d103      	bne.n	8008aca <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008ac2:	691a      	ldr	r2, [r3, #16]
 8008ac4:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8008ac8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008aca:	2200      	movs	r2, #0
 8008acc:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008ace:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008ad0:	2a00      	cmp	r2, #0
 8008ad2:	da04      	bge.n	8008ade <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008ad4:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008ad6:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008ad8:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8008adc:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8008ade:	b292      	uxth	r2, r2
 8008ae0:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008ae2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008ae4:	2a00      	cmp	r2, #0
 8008ae6:	da25      	bge.n	8008b34 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008ae8:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008aea:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008aec:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 8008af0:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008af2:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008af4:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008af8:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008afc:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008afe:	f04f 0200 	mov.w	r2, #0
 8008b02:	d019      	beq.n	8008b38 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008b04:	b2c9      	uxtb	r1, r1
 8008b06:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8008b08:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 8008b0a:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008b0c:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 8008b0e:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 8008b10:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8008b12:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8008b16:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 8008b1a:	e00a      	b.n	8008b32 <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8008b1c:	f7fd fae6 	bl	80060ec <HAL_GetTick>
 8008b20:	1b40      	subs	r0, r0, r5
 8008b22:	2805      	cmp	r0, #5
 8008b24:	d9ad      	bls.n	8008a82 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008b26:	2340      	movs	r3, #64	@ 0x40
 8008b28:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8008b30:	2001      	movs	r0, #1
}
 8008b32:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008b34:	6a18      	ldr	r0, [r3, #32]
 8008b36:	e7dd      	b.n	8008af4 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8008b38:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b3a:	e7e5      	b.n	8008b08 <HAL_MDMA_Init+0xaa>

08008b3c <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8008b3c:	b1d8      	cbz	r0, 8008b76 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 8008b3e:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008b40:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 8008b42:	68d3      	ldr	r3, [r2, #12]
 8008b44:	f023 0301 	bic.w	r3, r3, #1
 8008b48:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8008b4e:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8008b50:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8008b52:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8008b54:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8008b56:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8008b58:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8008b5a:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8008b5c:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8008b5e:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008b60:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008b62:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8008b64:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8008b66:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 8008b6a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 8008b6e:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 8008b72:	4618      	mov	r0, r3
 8008b74:	4770      	bx	lr
    return HAL_ERROR;
 8008b76:	2001      	movs	r0, #1
}
 8008b78:	4770      	bx	lr

08008b7a <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 8008b7a:	4603      	mov	r3, r0
{
 8008b7c:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 8008b7e:	b300      	cbz	r0, 8008bc2 <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 8008b80:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8008b84:	2801      	cmp	r0, #1
 8008b86:	d01e      	beq.n	8008bc6 <HAL_MDMA_ConfigPostRequestMask+0x4c>
 8008b88:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008b8a:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 8008b8e:	42a5      	cmp	r5, r4
 8008b90:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 8008b92:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008b96:	d112      	bne.n	8008bbe <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8008b98:	681c      	ldr	r4, [r3, #0]
 8008b9a:	6925      	ldr	r5, [r4, #16]
 8008b9c:	006d      	lsls	r5, r5, #1
 8008b9e:	d407      	bmi.n	8008bb0 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 8008ba0:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 8008ba2:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008ba4:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 8008ba6:	b939      	cbnz	r1, 8008bb8 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008ba8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 8008bac:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008bae:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008bb6:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8008bb8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008bbc:	e7f6      	b.n	8008bac <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	e7f6      	b.n	8008bb0 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 8008bc2:	2001      	movs	r0, #1
 8008bc4:	e7f7      	b.n	8008bb6 <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 8008bc6:	2002      	movs	r0, #2
 8008bc8:	e7f5      	b.n	8008bb6 <HAL_MDMA_ConfigPostRequestMask+0x3c>

08008bca <HAL_MDMA_Start_IT>:
{
 8008bca:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 8008bcc:	4604      	mov	r4, r0
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d042      	beq.n	8008c58 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 8008bd2:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 8008bd6:	2d01      	cmp	r5, #1
 8008bd8:	d03c      	beq.n	8008c54 <HAL_MDMA_Start_IT+0x8a>
 8008bda:	2501      	movs	r5, #1
 8008bdc:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008be0:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 8008be4:	2d01      	cmp	r5, #1
 8008be6:	f04f 0500 	mov.w	r5, #0
 8008bea:	d131      	bne.n	8008c50 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8008bec:	2602      	movs	r6, #2
 8008bee:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008bf2:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8008bf4:	6805      	ldr	r5, [r0, #0]
 8008bf6:	68ee      	ldr	r6, [r5, #12]
 8008bf8:	f026 0601 	bic.w	r6, r6, #1
 8008bfc:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8008bfe:	9e06      	ldr	r6, [sp, #24]
 8008c00:	9600      	str	r6, [sp, #0]
 8008c02:	f7ff ff03 	bl	8008a0c <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8008c06:	68eb      	ldr	r3, [r5, #12]
 8008c08:	f043 0306 	orr.w	r3, r3, #6
 8008c0c:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 8008c0e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8008c10:	b11b      	cbz	r3, 8008c1a <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8008c12:	68eb      	ldr	r3, [r5, #12]
 8008c14:	f043 0310 	orr.w	r3, r3, #16
 8008c18:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008c1a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008c1c:	b11b      	cbz	r3, 8008c26 <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8008c1e:	68eb      	ldr	r3, [r5, #12]
 8008c20:	f043 0308 	orr.w	r3, r3, #8
 8008c24:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 8008c26:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008c28:	b11b      	cbz	r3, 8008c32 <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8008c2a:	68eb      	ldr	r3, [r5, #12]
 8008c2c:	f043 0320 	orr.w	r3, r3, #32
 8008c30:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 8008c32:	68eb      	ldr	r3, [r5, #12]
 8008c34:	f043 0301 	orr.w	r3, r3, #1
 8008c38:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008c3a:	6863      	ldr	r3, [r4, #4]
 8008c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c40:	d103      	bne.n	8008c4a <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8008c42:	68eb      	ldr	r3, [r5, #12]
 8008c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c48:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8008c4a:	2000      	movs	r0, #0
}
 8008c4c:	b002      	add	sp, #8
 8008c4e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 8008c50:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 8008c54:	2002      	movs	r0, #2
 8008c56:	e7f9      	b.n	8008c4c <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 8008c58:	2001      	movs	r0, #1
 8008c5a:	e7f7      	b.n	8008c4c <HAL_MDMA_Start_IT+0x82>

08008c5c <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 8008c5c:	b128      	cbz	r0, 8008c6a <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8008c5e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d003      	beq.n	8008c6e <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8008c66:	2380      	movs	r3, #128	@ 0x80
 8008c68:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 8008c6a:	2001      	movs	r0, #1
 8008c6c:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 8008c6e:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008c70:	2304      	movs	r3, #4
 8008c72:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 8008c76:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 8008c78:	68d3      	ldr	r3, [r2, #12]
 8008c7a:	f023 0301 	bic.w	r3, r3, #1
 8008c7e:	60d3      	str	r3, [r2, #12]
}
 8008c80:	4770      	bx	lr
	...

08008c84 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 8008c84:	2300      	movs	r3, #0
{
 8008c86:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 8008c88:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008c8a:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 8008c8e:	4b58      	ldr	r3, [pc, #352]	@ (8008df0 <HAL_MDMA_IRQHandler+0x16c>)
{
 8008c90:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008c92:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8008c94:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008c96:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008c98:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008c9a:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 8008c9e:	3a40      	subs	r2, #64	@ 0x40
 8008ca0:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8008ca4:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008ca8:	4202      	tst	r2, r0
 8008caa:	f000 809e 	beq.w	8008dea <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	07d1      	lsls	r1, r2, #31
 8008cb2:	d529      	bpl.n	8008d08 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8008cb4:	68da      	ldr	r2, [r3, #12]
 8008cb6:	0792      	lsls	r2, r2, #30
 8008cb8:	d526      	bpl.n	8008d08 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8008cba:	68da      	ldr	r2, [r3, #12]
 8008cbc:	f022 0202 	bic.w	r2, r2, #2
 8008cc0:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 8008cc2:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008cc4:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8008cc6:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008cc8:	bf54      	ite	pl
 8008cca:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8008cce:	f041 0102 	orrmi.w	r1, r1, #2
 8008cd2:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8008cd4:	0591      	lsls	r1, r2, #22
 8008cd6:	d503      	bpl.n	8008ce0 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8008cd8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008cda:	f041 0104 	orr.w	r1, r1, #4
 8008cde:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8008ce0:	05d0      	lsls	r0, r2, #23
 8008ce2:	d503      	bpl.n	8008cec <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8008ce4:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008ce6:	f041 0108 	orr.w	r1, r1, #8
 8008cea:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8008cec:	0551      	lsls	r1, r2, #21
 8008cee:	d503      	bpl.n	8008cf8 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8008cf0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008cf2:	f041 0110 	orr.w	r1, r1, #16
 8008cf6:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8008cf8:	0512      	lsls	r2, r2, #20
 8008cfa:	d503      	bpl.n	8008d04 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8008cfc:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8008cfe:	f042 0220 	orr.w	r2, r2, #32
 8008d02:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8008d04:	2201      	movs	r2, #1
 8008d06:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	06d0      	lsls	r0, r2, #27
 8008d0c:	d508      	bpl.n	8008d20 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8008d0e:	68da      	ldr	r2, [r3, #12]
 8008d10:	0691      	lsls	r1, r2, #26
 8008d12:	d505      	bpl.n	8008d20 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8008d14:	2210      	movs	r2, #16
 8008d16:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8008d18:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008d1a:	b10b      	cbz	r3, 8008d20 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	0712      	lsls	r2, r2, #28
 8008d26:	d508      	bpl.n	8008d3a <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8008d28:	68da      	ldr	r2, [r3, #12]
 8008d2a:	06d0      	lsls	r0, r2, #27
 8008d2c:	d505      	bpl.n	8008d3a <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8008d2e:	2208      	movs	r2, #8
 8008d30:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 8008d32:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008d34:	b10b      	cbz	r3, 8008d3a <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 8008d36:	4620      	mov	r0, r4
 8008d38:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	0751      	lsls	r1, r2, #29
 8008d40:	d508      	bpl.n	8008d54 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8008d42:	68da      	ldr	r2, [r3, #12]
 8008d44:	0712      	lsls	r2, r2, #28
 8008d46:	d505      	bpl.n	8008d54 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8008d48:	2204      	movs	r2, #4
 8008d4a:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008d4c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008d4e:	b10b      	cbz	r3, 8008d54 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8008d50:	4620      	mov	r0, r4
 8008d52:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	0790      	lsls	r0, r2, #30
 8008d5a:	d524      	bpl.n	8008da6 <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8008d5c:	68da      	ldr	r2, [r3, #12]
 8008d5e:	0751      	lsls	r1, r2, #29
 8008d60:	d521      	bpl.n	8008da6 <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8008d62:	68da      	ldr	r2, [r3, #12]
 8008d64:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8008d68:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8008d6a:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8008d6e:	2a04      	cmp	r2, #4
 8008d70:	f04f 0200 	mov.w	r2, #0
 8008d74:	d10c      	bne.n	8008d90 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 8008d76:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 8008d78:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8008d7c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8008d80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d031      	beq.n	8008dea <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 8008d86:	4620      	mov	r0, r4
}
 8008d88:	b003      	add	sp, #12
 8008d8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 8008d8e:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8008d90:	2102      	movs	r1, #2
 8008d92:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 8008d94:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 8008d96:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8008d9a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8008d9e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008da0:	b10b      	cbz	r3, 8008da6 <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 8008da2:	4620      	mov	r0, r4
 8008da4:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8008da6:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8008da8:	b1fb      	cbz	r3, 8008dea <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 8008daa:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8008dae:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008db2:	2304      	movs	r3, #4
 8008db4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	68da      	ldr	r2, [r3, #12]
 8008dbc:	f022 0201 	bic.w	r2, r2, #1
 8008dc0:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 8008dc2:	9a01      	ldr	r2, [sp, #4]
 8008dc4:	3201      	adds	r2, #1
 8008dc6:	42aa      	cmp	r2, r5
 8008dc8:	9201      	str	r2, [sp, #4]
 8008dca:	d802      	bhi.n	8008dd2 <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8008dcc:	68da      	ldr	r2, [r3, #12]
 8008dce:	07d2      	lsls	r2, r2, #31
 8008dd0:	d4f7      	bmi.n	8008dc2 <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008ddc:	bf4c      	ite	mi
 8008dde:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8008de0:	2301      	movpl	r3, #1
 8008de2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8008de6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008de8:	e7cb      	b.n	8008d82 <HAL_MDMA_IRQHandler+0xfe>
}
 8008dea:	b003      	add	sp, #12
 8008dec:	bd30      	pop	{r4, r5, pc}
 8008dee:	bf00      	nop
 8008df0:	2400006c 	.word	0x2400006c

08008df4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008df4:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008df6:	4d1c      	ldr	r5, [pc, #112]	@ (8008e68 <HAL_PWREx_ConfigSupply+0x74>)
{
 8008df8:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008dfa:	68eb      	ldr	r3, [r5, #12]
 8008dfc:	f003 0307 	and.w	r3, r3, #7
 8008e00:	2b06      	cmp	r3, #6
 8008e02:	d006      	beq.n	8008e12 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008e04:	68e8      	ldr	r0, [r5, #12]
 8008e06:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8008e0a:	1b00      	subs	r0, r0, r4
 8008e0c:	bf18      	it	ne
 8008e0e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008e10:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008e12:	68eb      	ldr	r3, [r5, #12]
 8008e14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008e18:	4303      	orrs	r3, r0
 8008e1a:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8008e1c:	f7fd f966 	bl	80060ec <HAL_GetTick>
 8008e20:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e22:	686b      	ldr	r3, [r5, #4]
 8008e24:	049a      	lsls	r2, r3, #18
 8008e26:	d508      	bpl.n	8008e3a <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008e28:	f1a4 031d 	sub.w	r3, r4, #29
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d90c      	bls.n	8008e4a <HAL_PWREx_ConfigSupply+0x56>
 8008e30:	3c2d      	subs	r4, #45	@ 0x2d
 8008e32:	2c01      	cmp	r4, #1
 8008e34:	d909      	bls.n	8008e4a <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 8008e36:	2000      	movs	r0, #0
 8008e38:	e7ea      	b.n	8008e10 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008e3a:	f7fd f957 	bl	80060ec <HAL_GetTick>
 8008e3e:	1b80      	subs	r0, r0, r6
 8008e40:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008e44:	d9ed      	bls.n	8008e22 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8008e46:	2001      	movs	r0, #1
 8008e48:	e7e2      	b.n	8008e10 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8008e4a:	f7fd f94f 	bl	80060ec <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008e4e:	4d06      	ldr	r5, [pc, #24]	@ (8008e68 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8008e50:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008e52:	68eb      	ldr	r3, [r5, #12]
 8008e54:	03db      	lsls	r3, r3, #15
 8008e56:	d4ee      	bmi.n	8008e36 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008e58:	f7fd f948 	bl	80060ec <HAL_GetTick>
 8008e5c:	1b00      	subs	r0, r0, r4
 8008e5e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008e62:	d9f6      	bls.n	8008e52 <HAL_PWREx_ConfigSupply+0x5e>
 8008e64:	e7ef      	b.n	8008e46 <HAL_PWREx_ConfigSupply+0x52>
 8008e66:	bf00      	nop
 8008e68:	58024800 	.word	0x58024800

08008e6c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8008e70:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8008e72:	b134      	cbz	r4, 8008e82 <QSPI_Config+0x16>
 8008e74:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8008e78:	d003      	beq.n	8008e82 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008e7a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8008e7c:	6805      	ldr	r5, [r0, #0]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	612b      	str	r3, [r5, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008e82:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008e86:	e9d1 c607 	ldrd	ip, r6, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008e8a:	f1ba 0f00 	cmp.w	sl, #0
 8008e8e:	d052      	beq.n	8008f36 <QSPI_Config+0xca>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008e90:	694f      	ldr	r7, [r1, #20]
 8008e92:	ea44 0a0a 	orr.w	sl, r4, sl
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008e96:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008e98:	04bf      	lsls	r7, r7, #18
 8008e9a:	680b      	ldr	r3, [r1, #0]
 8008e9c:	f8d1 e034 	ldr.w	lr, [r1, #52]	@ 0x34
 8008ea0:	ea4a 0a02 	orr.w	sl, sl, r2
 8008ea4:	e9d1 980b 	ldrd	r9, r8, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008ea8:	b34e      	cbz	r6, 8008efe <QSPI_Config+0x92>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008eaa:	688c      	ldr	r4, [r1, #8]
 8008eac:	ea4a 0006 	orr.w	r0, sl, r6
 8008eb0:	61ec      	str	r4, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008eb2:	690c      	ldr	r4, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008eb4:	f1bc 0f00 	cmp.w	ip, #0
 8008eb8:	d013      	beq.n	8008ee2 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008eba:	ea43 030c 	orr.w	r3, r3, ip
 8008ebe:	ea43 0309 	orr.w	r3, r3, r9
 8008ec2:	ea43 0308 	orr.w	r3, r3, r8
 8008ec6:	ea43 030e 	orr.w	r3, r3, lr
 8008eca:	4323      	orrs	r3, r4
 8008ecc:	68cc      	ldr	r4, [r1, #12]
 8008ece:	4323      	orrs	r3, r4
 8008ed0:	433b      	orrs	r3, r7
 8008ed2:	4303      	orrs	r3, r0
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008ed4:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008ed8:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008eda:	d00e      	beq.n	8008efa <QSPI_Config+0x8e>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008edc:	684b      	ldr	r3, [r1, #4]
 8008ede:	61ab      	str	r3, [r5, #24]
 8008ee0:	e00b      	b.n	8008efa <QSPI_Config+0x8e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008ee2:	ea43 0309 	orr.w	r3, r3, r9
 8008ee6:	ea43 0308 	orr.w	r3, r3, r8
 8008eea:	ea43 030e 	orr.w	r3, r3, lr
 8008eee:	4323      	orrs	r3, r4
 8008ef0:	433b      	orrs	r3, r7
 8008ef2:	4303      	orrs	r3, r0
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008ef4:	616b      	str	r3, [r5, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8008ef6:	f8c5 c018 	str.w	ip, [r5, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 8008efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008efe:	f1bc 0f00 	cmp.w	ip, #0
 8008f02:	d00d      	beq.n	8008f20 <QSPI_Config+0xb4>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f04:	ea43 030c 	orr.w	r3, r3, ip
 8008f08:	68c8      	ldr	r0, [r1, #12]
 8008f0a:	ea43 0309 	orr.w	r3, r3, r9
 8008f0e:	ea43 0308 	orr.w	r3, r3, r8
 8008f12:	ea43 030e 	orr.w	r3, r3, lr
 8008f16:	4303      	orrs	r3, r0
 8008f18:	433b      	orrs	r3, r7
 8008f1a:	ea43 030a 	orr.w	r3, r3, sl
 8008f1e:	e7d9      	b.n	8008ed4 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f20:	ea43 0309 	orr.w	r3, r3, r9
 8008f24:	ea43 0308 	orr.w	r3, r3, r8
 8008f28:	ea43 000e 	orr.w	r0, r3, lr
 8008f2c:	ea40 0307 	orr.w	r3, r0, r7
 8008f30:	ea43 030a 	orr.w	r3, r3, sl
 8008f34:	e7de      	b.n	8008ef4 <QSPI_Config+0x88>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008f36:	b316      	cbz	r6, 8008f7e <QSPI_Config+0x112>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008f38:	688b      	ldr	r3, [r1, #8]
 8008f3a:	4326      	orrs	r6, r4
 8008f3c:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f3e:	694f      	ldr	r7, [r1, #20]
 8008f40:	4316      	orrs	r6, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008f42:	61eb      	str	r3, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f44:	04bf      	lsls	r7, r7, #18
 8008f46:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f48:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8008f4a:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008f4e:	f1bc 0f00 	cmp.w	ip, #0
 8008f52:	d00b      	beq.n	8008f6c <QSPI_Config+0x100>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f54:	ea43 030c 	orr.w	r3, r3, ip
 8008f58:	68c8      	ldr	r0, [r1, #12]
 8008f5a:	ea43 0308 	orr.w	r3, r3, r8
 8008f5e:	ea43 030e 	orr.w	r3, r3, lr
 8008f62:	4323      	orrs	r3, r4
 8008f64:	4303      	orrs	r3, r0
 8008f66:	433b      	orrs	r3, r7
 8008f68:	4333      	orrs	r3, r6
 8008f6a:	e7b3      	b.n	8008ed4 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f6c:	ea43 0208 	orr.w	r2, r3, r8
 8008f70:	ea42 020e 	orr.w	r2, r2, lr
 8008f74:	4322      	orrs	r2, r4
 8008f76:	433a      	orrs	r2, r7
 8008f78:	4332      	orrs	r2, r6
 8008f7a:	616a      	str	r2, [r5, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8008f7c:	e7bb      	b.n	8008ef6 <QSPI_Config+0x8a>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008f7e:	f1bc 0f00 	cmp.w	ip, #0
 8008f82:	d01a      	beq.n	8008fba <QSPI_Config+0x14e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f84:	ea44 030c 	orr.w	r3, r4, ip
 8008f88:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8008f8a:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008f8c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f90:	ea43 0302 	orr.w	r3, r3, r2
 8008f94:	ea43 0304 	orr.w	r3, r3, r4
 8008f98:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 8008f9a:	ea43 0304 	orr.w	r3, r3, r4
 8008f9e:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8008fa0:	ea43 0304 	orr.w	r3, r3, r4
 8008fa4:	68cc      	ldr	r4, [r1, #12]
 8008fa6:	ea43 0304 	orr.w	r3, r3, r4
 8008faa:	694c      	ldr	r4, [r1, #20]
 8008fac:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8008fb0:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008fb2:	d0a2      	beq.n	8008efa <QSPI_Config+0x8e>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008fb4:	684b      	ldr	r3, [r1, #4]
 8008fb6:	6183      	str	r3, [r0, #24]
 8008fb8:	e79f      	b.n	8008efa <QSPI_Config+0x8e>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8008fba:	2c00      	cmp	r4, #0
 8008fbc:	d09d      	beq.n	8008efa <QSPI_Config+0x8e>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008fbe:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8008fc0:	6800      	ldr	r0, [r0, #0]
 8008fc2:	4323      	orrs	r3, r4
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	694a      	ldr	r2, [r1, #20]
 8008fd0:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8008fd4:	6143      	str	r3, [r0, #20]
          CLEAR_REG(hqspi->Instance->AR);
 8008fd6:	f8c0 c018 	str.w	ip, [r0, #24]
}
 8008fda:	e78e      	b.n	8008efa <QSPI_Config+0x8e>

08008fdc <QSPI_WaitFlagStateUntilTimeout>:
{
 8008fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	460e      	mov	r6, r1
 8008fe8:	4615      	mov	r5, r2
 8008fea:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008fec:	6822      	ldr	r2, [r4, #0]
 8008fee:	6893      	ldr	r3, [r2, #8]
 8008ff0:	4233      	tst	r3, r6
 8008ff2:	bf14      	ite	ne
 8008ff4:	2301      	movne	r3, #1
 8008ff6:	2300      	moveq	r3, #0
 8008ff8:	42ab      	cmp	r3, r5
 8008ffa:	d101      	bne.n	8009000 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	e00f      	b.n	8009020 <QSPI_WaitFlagStateUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8009000:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009004:	d0f3      	beq.n	8008fee <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009006:	f7fd f871 	bl	80060ec <HAL_GetTick>
 800900a:	1bc0      	subs	r0, r0, r7
 800900c:	4540      	cmp	r0, r8
 800900e:	d909      	bls.n	8009024 <QSPI_WaitFlagStateUntilTimeout+0x48>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009010:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009012:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009014:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009018:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800901a:	f043 0301 	orr.w	r3, r3, #1
 800901e:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8009020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009024:	f1b8 0f00 	cmp.w	r8, #0
 8009028:	d1e0      	bne.n	8008fec <QSPI_WaitFlagStateUntilTimeout+0x10>
 800902a:	e7f1      	b.n	8009010 <QSPI_WaitFlagStateUntilTimeout+0x34>

0800902c <HAL_QSPI_Init>:
{
 800902c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800902e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009030:	f7fd f85c 	bl	80060ec <HAL_GetTick>
 8009034:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8009036:	2c00      	cmp	r4, #0
 8009038:	d03f      	beq.n	80090ba <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800903a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800903e:	b92b      	cbnz	r3, 800904c <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 8009040:	4620      	mov	r0, r4
 8009042:	f7f8 f92b 	bl	800129c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8009046:	f241 3388 	movw	r3, #5000	@ 0x1388
 800904a:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800904c:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800904e:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009050:	68a3      	ldr	r3, [r4, #8]
 8009052:	680a      	ldr	r2, [r1, #0]
 8009054:	3b01      	subs	r3, #1
 8009056:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800905a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800905e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009060:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009062:	2200      	movs	r2, #0
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	2120      	movs	r1, #32
 8009068:	462b      	mov	r3, r5
 800906a:	f7ff ffb7 	bl	8008fdc <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800906e:	bb10      	cbnz	r0, 80090b6 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009070:	6822      	ldr	r2, [r4, #0]
 8009072:	69e5      	ldr	r5, [r4, #28]
 8009074:	68e3      	ldr	r3, [r4, #12]
 8009076:	6811      	ldr	r1, [r2, #0]
 8009078:	432b      	orrs	r3, r5
 800907a:	6a25      	ldr	r5, [r4, #32]
 800907c:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8009080:	432b      	orrs	r3, r5
 8009082:	6865      	ldr	r5, [r4, #4]
 8009084:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 8009088:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800908c:	430b      	orrs	r3, r1
 800908e:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009090:	6855      	ldr	r5, [r2, #4]
 8009092:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8009096:	430b      	orrs	r3, r1
 8009098:	6921      	ldr	r1, [r4, #16]
 800909a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800909e:	4908      	ldr	r1, [pc, #32]	@ (80090c0 <HAL_QSPI_Init+0x94>)
 80090a0:	4029      	ands	r1, r5
 80090a2:	430b      	orrs	r3, r1
 80090a4:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80090a6:	6813      	ldr	r3, [r2, #0]
 80090a8:	f043 0301 	orr.w	r3, r3, #1
 80090ac:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80090ae:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80090b0:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80090b2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 80090b6:	b003      	add	sp, #12
 80090b8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80090ba:	2001      	movs	r0, #1
 80090bc:	e7fb      	b.n	80090b6 <HAL_QSPI_Init+0x8a>
 80090be:	bf00      	nop
 80090c0:	ffe0f8fe 	.word	0xffe0f8fe

080090c4 <HAL_QSPI_Command>:
{
 80090c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80090c8:	4604      	mov	r4, r0
 80090ca:	468a      	mov	sl, r1
 80090cc:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80090ce:	f7fd f80d 	bl	80060ec <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80090d2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80090d6:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d035      	beq.n	8009148 <HAL_QSPI_Command+0x84>
 80090dc:	2301      	movs	r3, #1
 80090de:	2602      	movs	r6, #2
 80090e0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80090e4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	fa5f f983 	uxtb.w	r9, r3
 80090ee:	d129      	bne.n	8009144 <HAL_QSPI_Command+0x80>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80090f0:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80090f2:	4603      	mov	r3, r0
 80090f4:	2120      	movs	r1, #32
 80090f6:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80090f8:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80090fa:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80090fe:	f8cd 8000 	str.w	r8, [sp]
 8009102:	f7ff ff6b 	bl	8008fdc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009106:	4605      	mov	r5, r0
 8009108:	b9a8      	cbnz	r0, 8009136 <HAL_QSPI_Command+0x72>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800910a:	4602      	mov	r2, r0
 800910c:	4651      	mov	r1, sl
 800910e:	4620      	mov	r0, r4
 8009110:	f7ff feac 	bl	8008e6c <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8009114:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8009118:	b95b      	cbnz	r3, 8009132 <HAL_QSPI_Command+0x6e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800911a:	463b      	mov	r3, r7
 800911c:	464a      	mov	r2, r9
 800911e:	4631      	mov	r1, r6
 8009120:	4620      	mov	r0, r4
 8009122:	f8cd 8000 	str.w	r8, [sp]
 8009126:	f7ff ff59 	bl	8008fdc <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800912a:	4605      	mov	r5, r0
 800912c:	b918      	cbnz	r0, 8009136 <HAL_QSPI_Command+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009132:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009136:	2300      	movs	r3, #0
 8009138:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800913c:	4628      	mov	r0, r5
 800913e:	b002      	add	sp, #8
 8009140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 8009144:	4635      	mov	r5, r6
 8009146:	e7f6      	b.n	8009136 <HAL_QSPI_Command+0x72>
  __HAL_LOCK(hqspi);
 8009148:	2502      	movs	r5, #2
 800914a:	e7f7      	b.n	800913c <HAL_QSPI_Command+0x78>

0800914c <HAL_QSPI_Transmit>:
{
 800914c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009150:	4604      	mov	r4, r0
 8009152:	4688      	mov	r8, r1
 8009154:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8009156:	f7fc ffc9 	bl	80060ec <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800915a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800915e:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8009160:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8009162:	2b01      	cmp	r3, #1
 8009164:	d04c      	beq.n	8009200 <HAL_QSPI_Transmit+0xb4>
 8009166:	2301      	movs	r3, #1
 8009168:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800916c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009170:	2b01      	cmp	r3, #1
 8009172:	b2d8      	uxtb	r0, r3
 8009174:	d142      	bne.n	80091fc <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009176:	2300      	movs	r3, #0
 8009178:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800917a:	f1b8 0f00 	cmp.w	r8, #0
 800917e:	d038      	beq.n	80091f2 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8009180:	2312      	movs	r3, #18
 8009182:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009186:	692b      	ldr	r3, [r5, #16]
 8009188:	3301      	adds	r3, #1
 800918a:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800918c:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800918e:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009192:	3301      	adds	r3, #1
 8009194:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009196:	696b      	ldr	r3, [r5, #20]
 8009198:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800919c:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800919e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80091a0:	b99b      	cbnz	r3, 80091ca <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80091a2:	4633      	mov	r3, r6
 80091a4:	2201      	movs	r2, #1
 80091a6:	2102      	movs	r1, #2
 80091a8:	4620      	mov	r0, r4
 80091aa:	9700      	str	r7, [sp, #0]
 80091ac:	f7ff ff16 	bl	8008fdc <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80091b0:	b910      	cbnz	r0, 80091b8 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	2202      	movs	r2, #2
 80091b6:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 80091b8:	2301      	movs	r3, #1
 80091ba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80091be:	2300      	movs	r3, #0
 80091c0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80091c4:	b002      	add	sp, #8
 80091c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80091ca:	4633      	mov	r3, r6
 80091cc:	2201      	movs	r2, #1
 80091ce:	2104      	movs	r1, #4
 80091d0:	4620      	mov	r0, r4
 80091d2:	9700      	str	r7, [sp, #0]
 80091d4:	f7ff ff02 	bl	8008fdc <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80091d8:	2800      	cmp	r0, #0
 80091da:	d1ed      	bne.n	80091b8 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80091dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 80091e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80091e6:	3301      	adds	r3, #1
 80091e8:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 80091ea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80091ec:	3b01      	subs	r3, #1
 80091ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80091f0:	e7d5      	b.n	800919e <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80091f2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80091f4:	f043 0308 	orr.w	r3, r3, #8
 80091f8:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 80091fa:	e7e0      	b.n	80091be <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 80091fc:	2002      	movs	r0, #2
 80091fe:	e7de      	b.n	80091be <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8009200:	2002      	movs	r0, #2
 8009202:	e7df      	b.n	80091c4 <HAL_QSPI_Transmit+0x78>

08009204 <HAL_QSPI_Receive>:
{
 8009204:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009208:	4604      	mov	r4, r0
 800920a:	4617      	mov	r7, r2
 800920c:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800920e:	f7fc ff6d 	bl	80060ec <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009212:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8009214:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009216:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 8009218:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800921c:	2b01      	cmp	r3, #1
 800921e:	d04f      	beq.n	80092c0 <HAL_QSPI_Receive+0xbc>
 8009220:	2301      	movs	r3, #1
 8009222:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009226:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800922a:	2b01      	cmp	r3, #1
 800922c:	b2d8      	uxtb	r0, r3
 800922e:	d145      	bne.n	80092bc <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009230:	2300      	movs	r3, #0
 8009232:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8009234:	f1b8 0f00 	cmp.w	r8, #0
 8009238:	d03b      	beq.n	80092b2 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800923a:	2322      	movs	r3, #34	@ 0x22
 800923c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009240:	692b      	ldr	r3, [r5, #16]
 8009242:	3301      	adds	r3, #1
 8009244:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009246:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8009248:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800924c:	3301      	adds	r3, #1
 800924e:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8009250:	6969      	ldr	r1, [r5, #20]
 8009252:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 8009256:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800925a:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800925c:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800925e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009260:	b99b      	cbnz	r3, 800928a <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009262:	4633      	mov	r3, r6
 8009264:	2201      	movs	r2, #1
 8009266:	2102      	movs	r1, #2
 8009268:	4620      	mov	r0, r4
 800926a:	9700      	str	r7, [sp, #0]
 800926c:	f7ff feb6 	bl	8008fdc <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8009270:	b910      	cbnz	r0, 8009278 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	2202      	movs	r2, #2
 8009276:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009278:	2301      	movs	r3, #1
 800927a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800927e:	2300      	movs	r3, #0
 8009280:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009284:	b002      	add	sp, #8
 8009286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800928a:	4633      	mov	r3, r6
 800928c:	2201      	movs	r2, #1
 800928e:	2106      	movs	r1, #6
 8009290:	4620      	mov	r0, r4
 8009292:	9700      	str	r7, [sp, #0]
 8009294:	f7ff fea2 	bl	8008fdc <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8009298:	2800      	cmp	r0, #0
 800929a:	d1ed      	bne.n	8009278 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800929c:	f895 2020 	ldrb.w	r2, [r5, #32]
 80092a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80092a2:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80092a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80092a6:	3301      	adds	r3, #1
 80092a8:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 80092aa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80092ac:	3b01      	subs	r3, #1
 80092ae:	63a3      	str	r3, [r4, #56]	@ 0x38
 80092b0:	e7d5      	b.n	800925e <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80092b2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80092b4:	f043 0308 	orr.w	r3, r3, #8
 80092b8:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 80092ba:	e7e0      	b.n	800927e <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 80092bc:	2002      	movs	r0, #2
 80092be:	e7de      	b.n	800927e <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 80092c0:	2002      	movs	r0, #2
 80092c2:	e7df      	b.n	8009284 <HAL_QSPI_Receive+0x80>

080092c4 <HAL_QSPI_AutoPolling>:
{
 80092c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092c8:	4604      	mov	r4, r0
 80092ca:	461f      	mov	r7, r3
 80092cc:	4689      	mov	r9, r1
 80092ce:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 80092d0:	f7fc ff0c 	bl	80060ec <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80092d4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80092d8:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d041      	beq.n	8009362 <HAL_QSPI_AutoPolling+0x9e>
 80092de:	2301      	movs	r3, #1
 80092e0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80092e4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	fa5f f883 	uxtb.w	r8, r3
 80092ee:	d136      	bne.n	800935e <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80092f0:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80092f2:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80092f4:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80092f6:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80092f8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80092fc:	4603      	mov	r3, r0
 80092fe:	9700      	str	r7, [sp, #0]
 8009300:	4620      	mov	r0, r4
 8009302:	f7ff fe6b 	bl	8008fdc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009306:	bb20      	cbnz	r0, 8009352 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009308:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800930a:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800930c:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800930e:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009310:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8009312:	686b      	ldr	r3, [r5, #4]
 8009314:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8009316:	68ab      	ldr	r3, [r5, #8]
 8009318:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800931a:	6813      	ldr	r3, [r2, #0]
 800931c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8009320:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009322:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009324:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009328:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800932a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800932e:	68eb      	ldr	r3, [r5, #12]
 8009330:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009334:	f7ff fd9a 	bl	8008e6c <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8009338:	4633      	mov	r3, r6
 800933a:	4642      	mov	r2, r8
 800933c:	2108      	movs	r1, #8
 800933e:	4620      	mov	r0, r4
 8009340:	9700      	str	r7, [sp, #0]
 8009342:	f7ff fe4b 	bl	8008fdc <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8009346:	b920      	cbnz	r0, 8009352 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	2208      	movs	r2, #8
 800934c:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800934e:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009352:	2300      	movs	r3, #0
 8009354:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009358:	b003      	add	sp, #12
 800935a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800935e:	2002      	movs	r0, #2
 8009360:	e7f7      	b.n	8009352 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 8009362:	2002      	movs	r0, #2
 8009364:	e7f8      	b.n	8009358 <HAL_QSPI_AutoPolling+0x94>

08009366 <HAL_QSPI_MemoryMapped>:
{
 8009366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009368:	4604      	mov	r4, r0
 800936a:	4616      	mov	r6, r2
 800936c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800936e:	f7fc febd 	bl	80060ec <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009372:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009376:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8009378:	2a01      	cmp	r2, #1
 800937a:	d033      	beq.n	80093e4 <HAL_QSPI_MemoryMapped+0x7e>
 800937c:	2201      	movs	r2, #1
 800937e:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009382:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8009386:	2a01      	cmp	r2, #1
 8009388:	d12a      	bne.n	80093e0 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800938a:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800938c:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800938e:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009390:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8009392:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009396:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009398:	9100      	str	r1, [sp, #0]
 800939a:	2120      	movs	r1, #32
 800939c:	f7ff fe1e 	bl	8008fdc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80093a0:	4605      	mov	r5, r0
 80093a2:	b9b8      	cbnz	r0, 80093d4 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	6872      	ldr	r2, [r6, #4]
 80093a8:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80093aa:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80093ac:	f020 0008 	bic.w	r0, r0, #8
 80093b0:	ea40 0002 	orr.w	r0, r0, r2
 80093b4:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80093b6:	d107      	bne.n	80093c8 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80093b8:	6832      	ldr	r2, [r6, #0]
 80093ba:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80093bc:	2210      	movs	r2, #16
 80093be:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80093c6:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80093c8:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80093cc:	4639      	mov	r1, r7
 80093ce:	4620      	mov	r0, r4
 80093d0:	f7ff fd4c 	bl	8008e6c <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 80093d4:	2300      	movs	r3, #0
 80093d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80093da:	4628      	mov	r0, r5
 80093dc:	b003      	add	sp, #12
 80093de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 80093e0:	2502      	movs	r5, #2
 80093e2:	e7f7      	b.n	80093d4 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 80093e4:	2502      	movs	r5, #2
 80093e6:	e7f8      	b.n	80093da <HAL_QSPI_MemoryMapped+0x74>

080093e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80093ea:	4604      	mov	r4, r0
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d074      	beq.n	80094da <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093f0:	6803      	ldr	r3, [r0, #0]
 80093f2:	07d8      	lsls	r0, r3, #31
 80093f4:	d45e      	bmi.n	80094b4 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	0799      	lsls	r1, r3, #30
 80093fa:	f100 80ad 	bmi.w	8009558 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80093fe:	6823      	ldr	r3, [r4, #0]
 8009400:	06da      	lsls	r2, r3, #27
 8009402:	d527      	bpl.n	8009454 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009404:	4a9c      	ldr	r2, [pc, #624]	@ (8009678 <HAL_RCC_OscConfig+0x290>)
 8009406:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009408:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800940a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800940e:	2b08      	cmp	r3, #8
 8009410:	d007      	beq.n	8009422 <HAL_RCC_OscConfig+0x3a>
 8009412:	2b18      	cmp	r3, #24
 8009414:	f040 8103 	bne.w	800961e <HAL_RCC_OscConfig+0x236>
 8009418:	f001 0303 	and.w	r3, r1, #3
 800941c:	2b01      	cmp	r3, #1
 800941e:	f040 80fe 	bne.w	800961e <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009422:	6813      	ldr	r3, [r2, #0]
 8009424:	05db      	lsls	r3, r3, #23
 8009426:	d502      	bpl.n	800942e <HAL_RCC_OscConfig+0x46>
 8009428:	69e3      	ldr	r3, [r4, #28]
 800942a:	2b80      	cmp	r3, #128	@ 0x80
 800942c:	d155      	bne.n	80094da <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800942e:	f7fc fe75 	bl	800611c <HAL_GetREVID>
 8009432:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009436:	6a21      	ldr	r1, [r4, #32]
 8009438:	4298      	cmp	r0, r3
 800943a:	4b8f      	ldr	r3, [pc, #572]	@ (8009678 <HAL_RCC_OscConfig+0x290>)
 800943c:	f200 80e8 	bhi.w	8009610 <HAL_RCC_OscConfig+0x228>
 8009440:	685a      	ldr	r2, [r3, #4]
 8009442:	2920      	cmp	r1, #32
 8009444:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8009448:	bf0c      	ite	eq
 800944a:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800944e:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8009452:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	0719      	lsls	r1, r3, #28
 8009458:	f100 8123 	bmi.w	80096a2 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	069a      	lsls	r2, r3, #26
 8009460:	f100 8144 	bmi.w	80096ec <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009464:	6823      	ldr	r3, [r4, #0]
 8009466:	075d      	lsls	r5, r3, #29
 8009468:	d51e      	bpl.n	80094a8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800946a:	4d84      	ldr	r5, [pc, #528]	@ (800967c <HAL_RCC_OscConfig+0x294>)
 800946c:	682b      	ldr	r3, [r5, #0]
 800946e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009472:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009474:	f7fc fe3a 	bl	80060ec <HAL_GetTick>
 8009478:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800947a:	682b      	ldr	r3, [r5, #0]
 800947c:	05da      	lsls	r2, r3, #23
 800947e:	f140 815a 	bpl.w	8009736 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009482:	68a3      	ldr	r3, [r4, #8]
 8009484:	4d7c      	ldr	r5, [pc, #496]	@ (8009678 <HAL_RCC_OscConfig+0x290>)
 8009486:	2b01      	cmp	r3, #1
 8009488:	f040 815c 	bne.w	8009744 <HAL_RCC_OscConfig+0x35c>
 800948c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800948e:	f043 0301 	orr.w	r3, r3, #1
 8009492:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009494:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8009498:	f7fc fe28 	bl	80060ec <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800949c:	4e76      	ldr	r6, [pc, #472]	@ (8009678 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800949e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094a0:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80094a2:	079b      	lsls	r3, r3, #30
 80094a4:	f140 8174 	bpl.w	8009790 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094a8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80094aa:	2900      	cmp	r1, #0
 80094ac:	f040 8177 	bne.w	800979e <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 80094b0:	2000      	movs	r0, #0
 80094b2:	e02b      	b.n	800950c <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094b4:	4a70      	ldr	r2, [pc, #448]	@ (8009678 <HAL_RCC_OscConfig+0x290>)
 80094b6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80094b8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80094be:	2b10      	cmp	r3, #16
 80094c0:	d005      	beq.n	80094ce <HAL_RCC_OscConfig+0xe6>
 80094c2:	2b18      	cmp	r3, #24
 80094c4:	d10b      	bne.n	80094de <HAL_RCC_OscConfig+0xf6>
 80094c6:	f001 0303 	and.w	r3, r1, #3
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d107      	bne.n	80094de <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094ce:	6813      	ldr	r3, [r2, #0]
 80094d0:	039a      	lsls	r2, r3, #14
 80094d2:	d590      	bpl.n	80093f6 <HAL_RCC_OscConfig+0xe>
 80094d4:	6863      	ldr	r3, [r4, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d18d      	bne.n	80093f6 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80094da:	2001      	movs	r0, #1
 80094dc:	e016      	b.n	800950c <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094de:	6863      	ldr	r3, [r4, #4]
 80094e0:	4d65      	ldr	r5, [pc, #404]	@ (8009678 <HAL_RCC_OscConfig+0x290>)
 80094e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094e6:	d112      	bne.n	800950e <HAL_RCC_OscConfig+0x126>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80094f0:	f7fc fdfc 	bl	80060ec <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094f4:	4e60      	ldr	r6, [pc, #384]	@ (8009678 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80094f6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094f8:	6833      	ldr	r3, [r6, #0]
 80094fa:	039b      	lsls	r3, r3, #14
 80094fc:	f53f af7b 	bmi.w	80093f6 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009500:	f7fc fdf4 	bl	80060ec <HAL_GetTick>
 8009504:	1b40      	subs	r0, r0, r5
 8009506:	2864      	cmp	r0, #100	@ 0x64
 8009508:	d9f6      	bls.n	80094f8 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800950a:	2003      	movs	r0, #3
}
 800950c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800950e:	b9a3      	cbnz	r3, 800953a <HAL_RCC_OscConfig+0x152>
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009516:	602b      	str	r3, [r5, #0]
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800951e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009520:	f7fc fde4 	bl	80060ec <HAL_GetTick>
 8009524:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009526:	682b      	ldr	r3, [r5, #0]
 8009528:	039f      	lsls	r7, r3, #14
 800952a:	f57f af64 	bpl.w	80093f6 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800952e:	f7fc fddd 	bl	80060ec <HAL_GetTick>
 8009532:	1b80      	subs	r0, r0, r6
 8009534:	2864      	cmp	r0, #100	@ 0x64
 8009536:	d9f6      	bls.n	8009526 <HAL_RCC_OscConfig+0x13e>
 8009538:	e7e7      	b.n	800950a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800953a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800953e:	682b      	ldr	r3, [r5, #0]
 8009540:	d103      	bne.n	800954a <HAL_RCC_OscConfig+0x162>
 8009542:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009546:	602b      	str	r3, [r5, #0]
 8009548:	e7ce      	b.n	80094e8 <HAL_RCC_OscConfig+0x100>
 800954a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800954e:	602b      	str	r3, [r5, #0]
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009556:	e7ca      	b.n	80094ee <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009558:	4947      	ldr	r1, [pc, #284]	@ (8009678 <HAL_RCC_OscConfig+0x290>)
 800955a:	68e2      	ldr	r2, [r4, #12]
 800955c:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800955e:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009560:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8009564:	d003      	beq.n	800956e <HAL_RCC_OscConfig+0x186>
 8009566:	2b18      	cmp	r3, #24
 8009568:	d12a      	bne.n	80095c0 <HAL_RCC_OscConfig+0x1d8>
 800956a:	0780      	lsls	r0, r0, #30
 800956c:	d128      	bne.n	80095c0 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800956e:	680b      	ldr	r3, [r1, #0]
 8009570:	075b      	lsls	r3, r3, #29
 8009572:	d501      	bpl.n	8009578 <HAL_RCC_OscConfig+0x190>
 8009574:	2a00      	cmp	r2, #0
 8009576:	d0b0      	beq.n	80094da <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009578:	4d3f      	ldr	r5, [pc, #252]	@ (8009678 <HAL_RCC_OscConfig+0x290>)
 800957a:	682b      	ldr	r3, [r5, #0]
 800957c:	f023 0319 	bic.w	r3, r3, #25
 8009580:	4313      	orrs	r3, r2
 8009582:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009584:	f7fc fdb2 	bl	80060ec <HAL_GetTick>
 8009588:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800958a:	682b      	ldr	r3, [r5, #0]
 800958c:	075f      	lsls	r7, r3, #29
 800958e:	d511      	bpl.n	80095b4 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009590:	f7fc fdc4 	bl	800611c <HAL_GetREVID>
 8009594:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009598:	6922      	ldr	r2, [r4, #16]
 800959a:	4298      	cmp	r0, r3
 800959c:	686b      	ldr	r3, [r5, #4]
 800959e:	d822      	bhi.n	80095e6 <HAL_RCC_OscConfig+0x1fe>
 80095a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80095a4:	2a40      	cmp	r2, #64	@ 0x40
 80095a6:	bf0c      	ite	eq
 80095a8:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 80095ac:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80095b0:	606b      	str	r3, [r5, #4]
 80095b2:	e724      	b.n	80093fe <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095b4:	f7fc fd9a 	bl	80060ec <HAL_GetTick>
 80095b8:	1b80      	subs	r0, r0, r6
 80095ba:	2802      	cmp	r0, #2
 80095bc:	d9e5      	bls.n	800958a <HAL_RCC_OscConfig+0x1a2>
 80095be:	e7a4      	b.n	800950a <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80095c0:	4d2d      	ldr	r5, [pc, #180]	@ (8009678 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80095c2:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80095c4:	b1a2      	cbz	r2, 80095f0 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80095c6:	f023 0319 	bic.w	r3, r3, #25
 80095ca:	4313      	orrs	r3, r2
 80095cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80095ce:	f7fc fd8d 	bl	80060ec <HAL_GetTick>
 80095d2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	0758      	lsls	r0, r3, #29
 80095d8:	d4da      	bmi.n	8009590 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095da:	f7fc fd87 	bl	80060ec <HAL_GetTick>
 80095de:	1b80      	subs	r0, r0, r6
 80095e0:	2802      	cmp	r0, #2
 80095e2:	d9f7      	bls.n	80095d4 <HAL_RCC_OscConfig+0x1ec>
 80095e4:	e791      	b.n	800950a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095e6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80095ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80095ee:	e7df      	b.n	80095b0 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 80095f0:	f023 0301 	bic.w	r3, r3, #1
 80095f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80095f6:	f7fc fd79 	bl	80060ec <HAL_GetTick>
 80095fa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	0759      	lsls	r1, r3, #29
 8009600:	f57f aefd 	bpl.w	80093fe <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009604:	f7fc fd72 	bl	80060ec <HAL_GetTick>
 8009608:	1b80      	subs	r0, r0, r6
 800960a:	2802      	cmp	r0, #2
 800960c:	d9f6      	bls.n	80095fc <HAL_RCC_OscConfig+0x214>
 800960e:	e77c      	b.n	800950a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009610:	68da      	ldr	r2, [r3, #12]
 8009612:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8009616:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800961a:	60da      	str	r2, [r3, #12]
 800961c:	e71a      	b.n	8009454 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800961e:	69e3      	ldr	r3, [r4, #28]
 8009620:	4d15      	ldr	r5, [pc, #84]	@ (8009678 <HAL_RCC_OscConfig+0x290>)
 8009622:	b36b      	cbz	r3, 8009680 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800962a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800962c:	f7fc fd5e 	bl	80060ec <HAL_GetTick>
 8009630:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009632:	682b      	ldr	r3, [r5, #0]
 8009634:	05df      	lsls	r7, r3, #23
 8009636:	d511      	bpl.n	800965c <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009638:	f7fc fd70 	bl	800611c <HAL_GetREVID>
 800963c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009640:	6a22      	ldr	r2, [r4, #32]
 8009642:	4298      	cmp	r0, r3
 8009644:	d810      	bhi.n	8009668 <HAL_RCC_OscConfig+0x280>
 8009646:	686b      	ldr	r3, [r5, #4]
 8009648:	2a20      	cmp	r2, #32
 800964a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800964e:	bf0c      	ite	eq
 8009650:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8009654:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8009658:	606b      	str	r3, [r5, #4]
 800965a:	e6fb      	b.n	8009454 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800965c:	f7fc fd46 	bl	80060ec <HAL_GetTick>
 8009660:	1b80      	subs	r0, r0, r6
 8009662:	2802      	cmp	r0, #2
 8009664:	d9e5      	bls.n	8009632 <HAL_RCC_OscConfig+0x24a>
 8009666:	e750      	b.n	800950a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009668:	68eb      	ldr	r3, [r5, #12]
 800966a:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800966e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009672:	60eb      	str	r3, [r5, #12]
 8009674:	e6ee      	b.n	8009454 <HAL_RCC_OscConfig+0x6c>
 8009676:	bf00      	nop
 8009678:	58024400 	.word	0x58024400
 800967c:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8009680:	682b      	ldr	r3, [r5, #0]
 8009682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009686:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009688:	f7fc fd30 	bl	80060ec <HAL_GetTick>
 800968c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800968e:	682b      	ldr	r3, [r5, #0]
 8009690:	05d8      	lsls	r0, r3, #23
 8009692:	f57f aedf 	bpl.w	8009454 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009696:	f7fc fd29 	bl	80060ec <HAL_GetTick>
 800969a:	1b80      	subs	r0, r0, r6
 800969c:	2802      	cmp	r0, #2
 800969e:	d9f6      	bls.n	800968e <HAL_RCC_OscConfig+0x2a6>
 80096a0:	e733      	b.n	800950a <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80096a2:	6963      	ldr	r3, [r4, #20]
 80096a4:	4da3      	ldr	r5, [pc, #652]	@ (8009934 <HAL_RCC_OscConfig+0x54c>)
 80096a6:	b183      	cbz	r3, 80096ca <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 80096a8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80096aa:	f043 0301 	orr.w	r3, r3, #1
 80096ae:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80096b0:	f7fc fd1c 	bl	80060ec <HAL_GetTick>
 80096b4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80096b6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80096b8:	079b      	lsls	r3, r3, #30
 80096ba:	f53f aecf 	bmi.w	800945c <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096be:	f7fc fd15 	bl	80060ec <HAL_GetTick>
 80096c2:	1b80      	subs	r0, r0, r6
 80096c4:	2802      	cmp	r0, #2
 80096c6:	d9f6      	bls.n	80096b6 <HAL_RCC_OscConfig+0x2ce>
 80096c8:	e71f      	b.n	800950a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 80096ca:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80096cc:	f023 0301 	bic.w	r3, r3, #1
 80096d0:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80096d2:	f7fc fd0b 	bl	80060ec <HAL_GetTick>
 80096d6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80096d8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80096da:	079f      	lsls	r7, r3, #30
 80096dc:	f57f aebe 	bpl.w	800945c <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096e0:	f7fc fd04 	bl	80060ec <HAL_GetTick>
 80096e4:	1b80      	subs	r0, r0, r6
 80096e6:	2802      	cmp	r0, #2
 80096e8:	d9f6      	bls.n	80096d8 <HAL_RCC_OscConfig+0x2f0>
 80096ea:	e70e      	b.n	800950a <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80096ec:	69a3      	ldr	r3, [r4, #24]
 80096ee:	4d91      	ldr	r5, [pc, #580]	@ (8009934 <HAL_RCC_OscConfig+0x54c>)
 80096f0:	b183      	cbz	r3, 8009714 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 80096f2:	682b      	ldr	r3, [r5, #0]
 80096f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80096f8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80096fa:	f7fc fcf7 	bl	80060ec <HAL_GetTick>
 80096fe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009700:	682b      	ldr	r3, [r5, #0]
 8009702:	0498      	lsls	r0, r3, #18
 8009704:	f53f aeae 	bmi.w	8009464 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009708:	f7fc fcf0 	bl	80060ec <HAL_GetTick>
 800970c:	1b80      	subs	r0, r0, r6
 800970e:	2802      	cmp	r0, #2
 8009710:	d9f6      	bls.n	8009700 <HAL_RCC_OscConfig+0x318>
 8009712:	e6fa      	b.n	800950a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8009714:	682b      	ldr	r3, [r5, #0]
 8009716:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800971a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800971c:	f7fc fce6 	bl	80060ec <HAL_GetTick>
 8009720:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009722:	682b      	ldr	r3, [r5, #0]
 8009724:	0499      	lsls	r1, r3, #18
 8009726:	f57f ae9d 	bpl.w	8009464 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800972a:	f7fc fcdf 	bl	80060ec <HAL_GetTick>
 800972e:	1b80      	subs	r0, r0, r6
 8009730:	2802      	cmp	r0, #2
 8009732:	d9f6      	bls.n	8009722 <HAL_RCC_OscConfig+0x33a>
 8009734:	e6e9      	b.n	800950a <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009736:	f7fc fcd9 	bl	80060ec <HAL_GetTick>
 800973a:	1b80      	subs	r0, r0, r6
 800973c:	2864      	cmp	r0, #100	@ 0x64
 800973e:	f67f ae9c 	bls.w	800947a <HAL_RCC_OscConfig+0x92>
 8009742:	e6e2      	b.n	800950a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009744:	b9b3      	cbnz	r3, 8009774 <HAL_RCC_OscConfig+0x38c>
 8009746:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009748:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800974c:	f023 0301 	bic.w	r3, r3, #1
 8009750:	672b      	str	r3, [r5, #112]	@ 0x70
 8009752:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009754:	f023 0304 	bic.w	r3, r3, #4
 8009758:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800975a:	f7fc fcc7 	bl	80060ec <HAL_GetTick>
 800975e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009760:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009762:	0798      	lsls	r0, r3, #30
 8009764:	f57f aea0 	bpl.w	80094a8 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009768:	f7fc fcc0 	bl	80060ec <HAL_GetTick>
 800976c:	1b80      	subs	r0, r0, r6
 800976e:	42b8      	cmp	r0, r7
 8009770:	d9f6      	bls.n	8009760 <HAL_RCC_OscConfig+0x378>
 8009772:	e6ca      	b.n	800950a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009774:	2b05      	cmp	r3, #5
 8009776:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009778:	d103      	bne.n	8009782 <HAL_RCC_OscConfig+0x39a>
 800977a:	f043 0304 	orr.w	r3, r3, #4
 800977e:	672b      	str	r3, [r5, #112]	@ 0x70
 8009780:	e684      	b.n	800948c <HAL_RCC_OscConfig+0xa4>
 8009782:	f023 0301 	bic.w	r3, r3, #1
 8009786:	672b      	str	r3, [r5, #112]	@ 0x70
 8009788:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800978a:	f023 0304 	bic.w	r3, r3, #4
 800978e:	e680      	b.n	8009492 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009790:	f7fc fcac 	bl	80060ec <HAL_GetTick>
 8009794:	1b40      	subs	r0, r0, r5
 8009796:	42b8      	cmp	r0, r7
 8009798:	f67f ae82 	bls.w	80094a0 <HAL_RCC_OscConfig+0xb8>
 800979c:	e6b5      	b.n	800950a <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800979e:	4d65      	ldr	r5, [pc, #404]	@ (8009934 <HAL_RCC_OscConfig+0x54c>)
 80097a0:	692b      	ldr	r3, [r5, #16]
 80097a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097a6:	2b18      	cmp	r3, #24
 80097a8:	d078      	beq.n	800989c <HAL_RCC_OscConfig+0x4b4>
        __HAL_RCC_PLL_DISABLE();
 80097aa:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097ac:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 80097ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80097b2:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097b4:	d165      	bne.n	8009882 <HAL_RCC_OscConfig+0x49a>
        tickstart = HAL_GetTick();
 80097b6:	f7fc fc99 	bl	80060ec <HAL_GetTick>
 80097ba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097bc:	682b      	ldr	r3, [r5, #0]
 80097be:	0199      	lsls	r1, r3, #6
 80097c0:	d459      	bmi.n	8009876 <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80097c2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80097c4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80097c6:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 80097ca:	f023 0303 	bic.w	r3, r3, #3
 80097ce:	4313      	orrs	r3, r2
 80097d0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80097d2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80097d6:	62ab      	str	r3, [r5, #40]	@ 0x28
 80097d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097da:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80097dc:	3b01      	subs	r3, #1
 80097de:	3a01      	subs	r2, #1
 80097e0:	025b      	lsls	r3, r3, #9
 80097e2:	0412      	lsls	r2, r2, #16
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80097ea:	4313      	orrs	r3, r2
 80097ec:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80097ee:	3a01      	subs	r2, #1
 80097f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097f4:	4313      	orrs	r3, r2
 80097f6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80097f8:	3a01      	subs	r2, #1
 80097fa:	0612      	lsls	r2, r2, #24
 80097fc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009800:	4313      	orrs	r3, r2
 8009802:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8009804:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009806:	f023 0301 	bic.w	r3, r3, #1
 800980a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800980c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800980e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8009810:	f36f 03cf 	bfc	r3, #3, #13
 8009814:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009818:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800981a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800981c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800981e:	f023 030c 	bic.w	r3, r3, #12
 8009822:	4313      	orrs	r3, r2
 8009824:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009826:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009828:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800982a:	f023 0302 	bic.w	r3, r3, #2
 800982e:	4313      	orrs	r3, r2
 8009830:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009832:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009838:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800983a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800983c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009840:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009842:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009844:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009848:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800984a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800984c:	f043 0301 	orr.w	r3, r3, #1
 8009850:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8009852:	682b      	ldr	r3, [r5, #0]
 8009854:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009858:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800985a:	f7fc fc47 	bl	80060ec <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800985e:	4d35      	ldr	r5, [pc, #212]	@ (8009934 <HAL_RCC_OscConfig+0x54c>)
        tickstart = HAL_GetTick();
 8009860:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009862:	682b      	ldr	r3, [r5, #0]
 8009864:	019a      	lsls	r2, r3, #6
 8009866:	f53f ae23 	bmi.w	80094b0 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800986a:	f7fc fc3f 	bl	80060ec <HAL_GetTick>
 800986e:	1b00      	subs	r0, r0, r4
 8009870:	2802      	cmp	r0, #2
 8009872:	d9f6      	bls.n	8009862 <HAL_RCC_OscConfig+0x47a>
 8009874:	e649      	b.n	800950a <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009876:	f7fc fc39 	bl	80060ec <HAL_GetTick>
 800987a:	1b80      	subs	r0, r0, r6
 800987c:	2802      	cmp	r0, #2
 800987e:	d99d      	bls.n	80097bc <HAL_RCC_OscConfig+0x3d4>
 8009880:	e643      	b.n	800950a <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8009882:	f7fc fc33 	bl	80060ec <HAL_GetTick>
 8009886:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	019b      	lsls	r3, r3, #6
 800988c:	f57f ae10 	bpl.w	80094b0 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009890:	f7fc fc2c 	bl	80060ec <HAL_GetTick>
 8009894:	1b00      	subs	r0, r0, r4
 8009896:	2802      	cmp	r0, #2
 8009898:	d9f6      	bls.n	8009888 <HAL_RCC_OscConfig+0x4a0>
 800989a:	e636      	b.n	800950a <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800989c:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800989e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80098a0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098a2:	f43f ae1a 	beq.w	80094da <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098a6:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098aa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80098ac:	4281      	cmp	r1, r0
 80098ae:	f47f ae14 	bne.w	80094da <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80098b2:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80098b8:	428a      	cmp	r2, r1
 80098ba:	f47f ae0e 	bne.w	80094da <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80098be:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80098c0:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80098c4:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80098c6:	4291      	cmp	r1, r2
 80098c8:	f47f ae07 	bne.w	80094da <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80098cc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80098ce:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80098d2:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80098d4:	4291      	cmp	r1, r2
 80098d6:	f47f ae00 	bne.w	80094da <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80098da:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80098dc:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80098e0:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80098e2:	4291      	cmp	r1, r2
 80098e4:	f47f adf9 	bne.w	80094da <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80098e8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80098ea:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80098ee:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80098f0:	4293      	cmp	r3, r2
 80098f2:	f47f adf2 	bne.w	80094da <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80098f6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80098f8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80098fa:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80098fe:	429a      	cmp	r2, r3
 8009900:	f43f add6 	beq.w	80094b0 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 8009904:	4d0b      	ldr	r5, [pc, #44]	@ (8009934 <HAL_RCC_OscConfig+0x54c>)
 8009906:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009908:	f023 0301 	bic.w	r3, r3, #1
 800990c:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800990e:	f7fc fbed 	bl	80060ec <HAL_GetTick>
 8009912:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009914:	f7fc fbea 	bl	80060ec <HAL_GetTick>
 8009918:	42b0      	cmp	r0, r6
 800991a:	d0fb      	beq.n	8009914 <HAL_RCC_OscConfig+0x52c>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800991c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800991e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8009920:	f36f 03cf 	bfc	r3, #3, #13
 8009924:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009928:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800992a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800992c:	f043 0301 	orr.w	r3, r3, #1
 8009930:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8009932:	e5bd      	b.n	80094b0 <HAL_RCC_OscConfig+0xc8>
 8009934:	58024400 	.word	0x58024400

08009938 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	4c23      	ldr	r4, [pc, #140]	@ (80099c8 <HAL_RCC_MCOConfig+0x90>)
 800993c:	b088      	sub	sp, #32
 800993e:	460e      	mov	r6, r1
 8009940:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009942:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 8009946:	b9f8      	cbnz	r0, 8009988 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 8009948:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800994c:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009950:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8009952:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8009956:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800995a:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009964:	2302      	movs	r3, #2
 8009966:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800996a:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800996c:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009970:	4816      	ldr	r0, [pc, #88]	@ (80099cc <HAL_RCC_MCOConfig+0x94>)
 8009972:	f7fd fa4b 	bl	8006e0c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009976:	6923      	ldr	r3, [r4, #16]
 8009978:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800997c:	ea43 0106 	orr.w	r1, r3, r6
 8009980:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009982:	6121      	str	r1, [r4, #16]
  }
}
 8009984:	b008      	add	sp, #32
 8009986:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8009988:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800998c:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009990:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009992:	480f      	ldr	r0, [pc, #60]	@ (80099d0 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 8009994:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8009998:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800999c:	f003 0304 	and.w	r3, r3, #4
 80099a0:	9302      	str	r3, [sp, #8]
 80099a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099a4:	2302      	movs	r3, #2
 80099a6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099aa:	2300      	movs	r3, #0
 80099ac:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80099b0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80099b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80099b4:	f7fd fa2a 	bl	8006e0c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 80099be:	ea43 0106 	orr.w	r1, r3, r6
 80099c2:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 80099c6:	e7dc      	b.n	8009982 <HAL_RCC_MCOConfig+0x4a>
 80099c8:	58024400 	.word	0x58024400
 80099cc:	58020000 	.word	0x58020000
 80099d0:	58020800 	.word	0x58020800

080099d4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099d4:	4b49      	ldr	r3, [pc, #292]	@ (8009afc <HAL_RCC_GetSysClockFreq+0x128>)
 80099d6:	691a      	ldr	r2, [r3, #16]
 80099d8:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80099dc:	2a10      	cmp	r2, #16
{
 80099de:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099e0:	f000 8088 	beq.w	8009af4 <HAL_RCC_GetSysClockFreq+0x120>
 80099e4:	2a18      	cmp	r2, #24
 80099e6:	d00c      	beq.n	8009a02 <HAL_RCC_GetSysClockFreq+0x2e>
 80099e8:	2a00      	cmp	r2, #0
 80099ea:	f040 8085 	bne.w	8009af8 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	4843      	ldr	r0, [pc, #268]	@ (8009b00 <HAL_RCC_GetSysClockFreq+0x12c>)
 80099f2:	f012 0f20 	tst.w	r2, #32
 80099f6:	d003      	beq.n	8009a00 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80099fe:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8009a00:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a02:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009a04:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a06:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 8009a08:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009a0c:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 8009a12:	d0f5      	beq.n	8009a00 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a14:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a18:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a1c:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a20:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a24:	4362      	muls	r2, r4
 8009a26:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
        switch (pllsource)
 8009a2a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a30:	ee06 2a90 	vmov	s13, r2
 8009a34:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8009a38:	d04e      	beq.n	8009ad8 <HAL_RCC_GetSysClockFreq+0x104>
 8009a3a:	2902      	cmp	r1, #2
 8009a3c:	d03e      	beq.n	8009abc <HAL_RCC_GetSysClockFreq+0xe8>
 8009a3e:	2900      	cmp	r1, #0
 8009a40:	d14a      	bne.n	8009ad8 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	0692      	lsls	r2, r2, #26
 8009a46:	d527      	bpl.n	8009a98 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a48:	6819      	ldr	r1, [r3, #0]
 8009a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8009b00 <HAL_RCC_GetSysClockFreq+0x12c>)
 8009a4c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a52:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a58:	ee07 2a90 	vmov	s15, r2
 8009a5c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8009a60:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8009a64:	ee07 3a10 	vmov	s14, r3
 8009a68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a6c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009a70:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009a74:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009a78:	4b20      	ldr	r3, [pc, #128]	@ (8009afc <HAL_RCC_GetSysClockFreq+0x128>)
 8009a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a7c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009a80:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009a82:	ee07 3a10 	vmov	s14, r3
 8009a86:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009a8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009a8e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8009a92:	ee17 0a90 	vmov	r0, s15
 8009a96:	e7b3      	b.n	8009a00 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a9e:	ee07 3a90 	vmov	s15, r3
 8009aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aaa:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009aae:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8009b04 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ab2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8009ab6:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 8009aba:	e7dd      	b.n	8009a78 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ace:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009ad2:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8009b08 <HAL_RCC_GetSysClockFreq+0x134>
 8009ad6:	e7ec      	b.n	8009ab2 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ade:	ee07 3a90 	vmov	s15, r3
 8009ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aea:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009aee:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8009b0c <HAL_RCC_GetSysClockFreq+0x138>
 8009af2:	e7de      	b.n	8009ab2 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009af4:	4806      	ldr	r0, [pc, #24]	@ (8009b10 <HAL_RCC_GetSysClockFreq+0x13c>)
 8009af6:	e783      	b.n	8009a00 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8009af8:	4806      	ldr	r0, [pc, #24]	@ (8009b14 <HAL_RCC_GetSysClockFreq+0x140>)
 8009afa:	e781      	b.n	8009a00 <HAL_RCC_GetSysClockFreq+0x2c>
 8009afc:	58024400 	.word	0x58024400
 8009b00:	03d09000 	.word	0x03d09000
 8009b04:	4c742400 	.word	0x4c742400
 8009b08:	4bbebc20 	.word	0x4bbebc20
 8009b0c:	4a742400 	.word	0x4a742400
 8009b10:	017d7840 	.word	0x017d7840
 8009b14:	003d0900 	.word	0x003d0900

08009b18 <HAL_RCC_ClockConfig>:
{
 8009b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8009b1e:	4604      	mov	r4, r0
 8009b20:	b910      	cbnz	r0, 8009b28 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8009b22:	2001      	movs	r0, #1
}
 8009b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009b28:	4a88      	ldr	r2, [pc, #544]	@ (8009d4c <HAL_RCC_ClockConfig+0x234>)
 8009b2a:	6813      	ldr	r3, [r2, #0]
 8009b2c:	f003 030f 	and.w	r3, r3, #15
 8009b30:	428b      	cmp	r3, r1
 8009b32:	f0c0 8093 	bcc.w	8009c5c <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	075f      	lsls	r7, r3, #29
 8009b3a:	f100 809b 	bmi.w	8009c74 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b3e:	071e      	lsls	r6, r3, #28
 8009b40:	d50b      	bpl.n	8009b5a <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009b42:	4983      	ldr	r1, [pc, #524]	@ (8009d50 <HAL_RCC_ClockConfig+0x238>)
 8009b44:	6960      	ldr	r0, [r4, #20]
 8009b46:	69ca      	ldr	r2, [r1, #28]
 8009b48:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009b4c:	4290      	cmp	r0, r2
 8009b4e:	d904      	bls.n	8009b5a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009b50:	69ca      	ldr	r2, [r1, #28]
 8009b52:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009b56:	4302      	orrs	r2, r0
 8009b58:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b5a:	06d8      	lsls	r0, r3, #27
 8009b5c:	d50b      	bpl.n	8009b76 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009b5e:	497c      	ldr	r1, [pc, #496]	@ (8009d50 <HAL_RCC_ClockConfig+0x238>)
 8009b60:	69a0      	ldr	r0, [r4, #24]
 8009b62:	69ca      	ldr	r2, [r1, #28]
 8009b64:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009b68:	4290      	cmp	r0, r2
 8009b6a:	d904      	bls.n	8009b76 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009b6c:	69ca      	ldr	r2, [r1, #28]
 8009b6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009b72:	4302      	orrs	r2, r0
 8009b74:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009b76:	0699      	lsls	r1, r3, #26
 8009b78:	d50b      	bpl.n	8009b92 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009b7a:	4975      	ldr	r1, [pc, #468]	@ (8009d50 <HAL_RCC_ClockConfig+0x238>)
 8009b7c:	69e0      	ldr	r0, [r4, #28]
 8009b7e:	6a0a      	ldr	r2, [r1, #32]
 8009b80:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009b84:	4290      	cmp	r0, r2
 8009b86:	d904      	bls.n	8009b92 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009b88:	6a0a      	ldr	r2, [r1, #32]
 8009b8a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009b8e:	4302      	orrs	r2, r0
 8009b90:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b92:	079a      	lsls	r2, r3, #30
 8009b94:	d50b      	bpl.n	8009bae <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009b96:	496e      	ldr	r1, [pc, #440]	@ (8009d50 <HAL_RCC_ClockConfig+0x238>)
 8009b98:	68e0      	ldr	r0, [r4, #12]
 8009b9a:	698a      	ldr	r2, [r1, #24]
 8009b9c:	f002 020f 	and.w	r2, r2, #15
 8009ba0:	4290      	cmp	r0, r2
 8009ba2:	d904      	bls.n	8009bae <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ba4:	698a      	ldr	r2, [r1, #24]
 8009ba6:	f022 020f 	bic.w	r2, r2, #15
 8009baa:	4302      	orrs	r2, r0
 8009bac:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009bae:	07df      	lsls	r7, r3, #31
 8009bb0:	d46e      	bmi.n	8009c90 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009bb2:	6823      	ldr	r3, [r4, #0]
 8009bb4:	079e      	lsls	r6, r3, #30
 8009bb6:	f100 80a1 	bmi.w	8009cfc <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009bba:	4964      	ldr	r1, [pc, #400]	@ (8009d4c <HAL_RCC_ClockConfig+0x234>)
 8009bbc:	680a      	ldr	r2, [r1, #0]
 8009bbe:	f002 020f 	and.w	r2, r2, #15
 8009bc2:	42aa      	cmp	r2, r5
 8009bc4:	f200 80a8 	bhi.w	8009d18 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009bc8:	0758      	lsls	r0, r3, #29
 8009bca:	f100 80b1 	bmi.w	8009d30 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bce:	0719      	lsls	r1, r3, #28
 8009bd0:	d50b      	bpl.n	8009bea <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009bd2:	495f      	ldr	r1, [pc, #380]	@ (8009d50 <HAL_RCC_ClockConfig+0x238>)
 8009bd4:	6960      	ldr	r0, [r4, #20]
 8009bd6:	69ca      	ldr	r2, [r1, #28]
 8009bd8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009bdc:	4290      	cmp	r0, r2
 8009bde:	d204      	bcs.n	8009bea <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009be0:	69ca      	ldr	r2, [r1, #28]
 8009be2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009be6:	4302      	orrs	r2, r0
 8009be8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bea:	06da      	lsls	r2, r3, #27
 8009bec:	d50b      	bpl.n	8009c06 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009bee:	4958      	ldr	r1, [pc, #352]	@ (8009d50 <HAL_RCC_ClockConfig+0x238>)
 8009bf0:	69a0      	ldr	r0, [r4, #24]
 8009bf2:	69ca      	ldr	r2, [r1, #28]
 8009bf4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009bf8:	4290      	cmp	r0, r2
 8009bfa:	d204      	bcs.n	8009c06 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009bfc:	69ca      	ldr	r2, [r1, #28]
 8009bfe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009c02:	4302      	orrs	r2, r0
 8009c04:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009c06:	069b      	lsls	r3, r3, #26
 8009c08:	d50b      	bpl.n	8009c22 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009c0a:	4a51      	ldr	r2, [pc, #324]	@ (8009d50 <HAL_RCC_ClockConfig+0x238>)
 8009c0c:	69e1      	ldr	r1, [r4, #28]
 8009c0e:	6a13      	ldr	r3, [r2, #32]
 8009c10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009c14:	4299      	cmp	r1, r3
 8009c16:	d204      	bcs.n	8009c22 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009c18:	6a13      	ldr	r3, [r2, #32]
 8009c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c1e:	430b      	orrs	r3, r1
 8009c20:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009c22:	f7ff fed7 	bl	80099d4 <HAL_RCC_GetSysClockFreq>
 8009c26:	494a      	ldr	r1, [pc, #296]	@ (8009d50 <HAL_RCC_ClockConfig+0x238>)
 8009c28:	4a4a      	ldr	r2, [pc, #296]	@ (8009d54 <HAL_RCC_ClockConfig+0x23c>)
 8009c2a:	698b      	ldr	r3, [r1, #24]
 8009c2c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009c30:	5cd3      	ldrb	r3, [r2, r3]
 8009c32:	f003 031f 	and.w	r3, r3, #31
 8009c36:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009c38:	698b      	ldr	r3, [r1, #24]
 8009c3a:	f003 030f 	and.w	r3, r3, #15
 8009c3e:	5cd3      	ldrb	r3, [r2, r3]
 8009c40:	4a45      	ldr	r2, [pc, #276]	@ (8009d58 <HAL_RCC_ClockConfig+0x240>)
 8009c42:	f003 031f 	and.w	r3, r3, #31
 8009c46:	fa20 f303 	lsr.w	r3, r0, r3
 8009c4a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8009c4c:	4b43      	ldr	r3, [pc, #268]	@ (8009d5c <HAL_RCC_ClockConfig+0x244>)
 8009c4e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8009c50:	4b43      	ldr	r3, [pc, #268]	@ (8009d60 <HAL_RCC_ClockConfig+0x248>)
}
 8009c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8009c56:	6818      	ldr	r0, [r3, #0]
 8009c58:	f7f7 bcc8 	b.w	80015ec <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c5c:	6813      	ldr	r3, [r2, #0]
 8009c5e:	f023 030f 	bic.w	r3, r3, #15
 8009c62:	430b      	orrs	r3, r1
 8009c64:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c66:	6813      	ldr	r3, [r2, #0]
 8009c68:	f003 030f 	and.w	r3, r3, #15
 8009c6c:	428b      	cmp	r3, r1
 8009c6e:	f47f af58 	bne.w	8009b22 <HAL_RCC_ClockConfig+0xa>
 8009c72:	e760      	b.n	8009b36 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009c74:	4936      	ldr	r1, [pc, #216]	@ (8009d50 <HAL_RCC_ClockConfig+0x238>)
 8009c76:	6920      	ldr	r0, [r4, #16]
 8009c78:	698a      	ldr	r2, [r1, #24]
 8009c7a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009c7e:	4290      	cmp	r0, r2
 8009c80:	f67f af5d 	bls.w	8009b3e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009c84:	698a      	ldr	r2, [r1, #24]
 8009c86:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009c8a:	4302      	orrs	r2, r0
 8009c8c:	618a      	str	r2, [r1, #24]
 8009c8e:	e756      	b.n	8009b3e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009c90:	4b2f      	ldr	r3, [pc, #188]	@ (8009d50 <HAL_RCC_ClockConfig+0x238>)
 8009c92:	68a1      	ldr	r1, [r4, #8]
 8009c94:	699a      	ldr	r2, [r3, #24]
 8009c96:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 8009c9a:	430a      	orrs	r2, r1
 8009c9c:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c9e:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ca0:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ca2:	2902      	cmp	r1, #2
 8009ca4:	d11d      	bne.n	8009ce2 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ca6:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009caa:	f43f af3a 	beq.w	8009b22 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009cae:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cb0:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cb4:	4f26      	ldr	r7, [pc, #152]	@ (8009d50 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009cb6:	f022 0207 	bic.w	r2, r2, #7
 8009cba:	430a      	orrs	r2, r1
 8009cbc:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 8009cbe:	f7fc fa15 	bl	80060ec <HAL_GetTick>
 8009cc2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	6862      	ldr	r2, [r4, #4]
 8009cc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ccc:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8009cd0:	f43f af6f 	beq.w	8009bb2 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cd4:	f7fc fa0a 	bl	80060ec <HAL_GetTick>
 8009cd8:	1b80      	subs	r0, r0, r6
 8009cda:	4540      	cmp	r0, r8
 8009cdc:	d9f2      	bls.n	8009cc4 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 8009cde:	2003      	movs	r0, #3
 8009ce0:	e720      	b.n	8009b24 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ce2:	2903      	cmp	r1, #3
 8009ce4:	d102      	bne.n	8009cec <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ce6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8009cea:	e7de      	b.n	8009caa <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009cec:	2901      	cmp	r1, #1
 8009cee:	d102      	bne.n	8009cf6 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009cf0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009cf4:	e7d9      	b.n	8009caa <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009cf6:	f012 0f04 	tst.w	r2, #4
 8009cfa:	e7d6      	b.n	8009caa <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009cfc:	4914      	ldr	r1, [pc, #80]	@ (8009d50 <HAL_RCC_ClockConfig+0x238>)
 8009cfe:	68e0      	ldr	r0, [r4, #12]
 8009d00:	698a      	ldr	r2, [r1, #24]
 8009d02:	f002 020f 	and.w	r2, r2, #15
 8009d06:	4290      	cmp	r0, r2
 8009d08:	f4bf af57 	bcs.w	8009bba <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d0c:	698a      	ldr	r2, [r1, #24]
 8009d0e:	f022 020f 	bic.w	r2, r2, #15
 8009d12:	4302      	orrs	r2, r0
 8009d14:	618a      	str	r2, [r1, #24]
 8009d16:	e750      	b.n	8009bba <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d18:	680a      	ldr	r2, [r1, #0]
 8009d1a:	f022 020f 	bic.w	r2, r2, #15
 8009d1e:	432a      	orrs	r2, r5
 8009d20:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d22:	680a      	ldr	r2, [r1, #0]
 8009d24:	f002 020f 	and.w	r2, r2, #15
 8009d28:	42aa      	cmp	r2, r5
 8009d2a:	f47f aefa 	bne.w	8009b22 <HAL_RCC_ClockConfig+0xa>
 8009d2e:	e74b      	b.n	8009bc8 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009d30:	4907      	ldr	r1, [pc, #28]	@ (8009d50 <HAL_RCC_ClockConfig+0x238>)
 8009d32:	6920      	ldr	r0, [r4, #16]
 8009d34:	698a      	ldr	r2, [r1, #24]
 8009d36:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009d3a:	4290      	cmp	r0, r2
 8009d3c:	f4bf af47 	bcs.w	8009bce <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009d40:	698a      	ldr	r2, [r1, #24]
 8009d42:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009d46:	4302      	orrs	r2, r0
 8009d48:	618a      	str	r2, [r1, #24]
 8009d4a:	e740      	b.n	8009bce <HAL_RCC_ClockConfig+0xb6>
 8009d4c:	52002000 	.word	0x52002000
 8009d50:	58024400 	.word	0x58024400
 8009d54:	08023e48 	.word	0x08023e48
 8009d58:	24000068 	.word	0x24000068
 8009d5c:	2400006c 	.word	0x2400006c
 8009d60:	24000074 	.word	0x24000074

08009d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d64:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009d66:	f7ff fe35 	bl	80099d4 <HAL_RCC_GetSysClockFreq>
 8009d6a:	4a0b      	ldr	r2, [pc, #44]	@ (8009d98 <HAL_RCC_GetHCLKFreq+0x34>)
 8009d6c:	490b      	ldr	r1, [pc, #44]	@ (8009d9c <HAL_RCC_GetHCLKFreq+0x38>)
 8009d6e:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d70:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009d72:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d76:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009d7a:	5ccb      	ldrb	r3, [r1, r3]
 8009d7c:	f003 031f 	and.w	r3, r3, #31
 8009d80:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d84:	5c88      	ldrb	r0, [r1, r2]
 8009d86:	4a06      	ldr	r2, [pc, #24]	@ (8009da0 <HAL_RCC_GetHCLKFreq+0x3c>)
 8009d88:	f000 001f 	and.w	r0, r0, #31
 8009d8c:	fa23 f000 	lsr.w	r0, r3, r0
 8009d90:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009d92:	4a04      	ldr	r2, [pc, #16]	@ (8009da4 <HAL_RCC_GetHCLKFreq+0x40>)
 8009d94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8009d96:	bd08      	pop	{r3, pc}
 8009d98:	58024400 	.word	0x58024400
 8009d9c:	08023e48 	.word	0x08023e48
 8009da0:	24000068 	.word	0x24000068
 8009da4:	2400006c 	.word	0x2400006c

08009da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009da8:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009daa:	f7ff ffdb 	bl	8009d64 <HAL_RCC_GetHCLKFreq>
 8009dae:	4b05      	ldr	r3, [pc, #20]	@ (8009dc4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009db0:	4a05      	ldr	r2, [pc, #20]	@ (8009dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009db2:	69db      	ldr	r3, [r3, #28]
 8009db4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009db8:	5cd3      	ldrb	r3, [r2, r3]
 8009dba:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009dbe:	40d8      	lsrs	r0, r3
 8009dc0:	bd08      	pop	{r3, pc}
 8009dc2:	bf00      	nop
 8009dc4:	58024400 	.word	0x58024400
 8009dc8:	08023e48 	.word	0x08023e48

08009dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009dcc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009dce:	f7ff ffc9 	bl	8009d64 <HAL_RCC_GetHCLKFreq>
 8009dd2:	4b05      	ldr	r3, [pc, #20]	@ (8009de8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009dd4:	4a05      	ldr	r2, [pc, #20]	@ (8009dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8009dd6:	69db      	ldr	r3, [r3, #28]
 8009dd8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009ddc:	5cd3      	ldrb	r3, [r2, r3]
 8009dde:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009de2:	40d8      	lsrs	r0, r3
 8009de4:	bd08      	pop	{r3, pc}
 8009de6:	bf00      	nop
 8009de8:	58024400 	.word	0x58024400
 8009dec:	08023e48 	.word	0x08023e48

08009df0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009df0:	233f      	movs	r3, #63	@ 0x3f
 8009df2:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009df4:	4b11      	ldr	r3, [pc, #68]	@ (8009e3c <HAL_RCC_GetClockConfig+0x4c>)
 8009df6:	691a      	ldr	r2, [r3, #16]
 8009df8:	f002 0207 	and.w	r2, r2, #7
 8009dfc:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009dfe:	699a      	ldr	r2, [r3, #24]
 8009e00:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8009e04:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009e06:	699a      	ldr	r2, [r3, #24]
 8009e08:	f002 020f 	and.w	r2, r2, #15
 8009e0c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009e0e:	699a      	ldr	r2, [r3, #24]
 8009e10:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009e14:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009e16:	69da      	ldr	r2, [r3, #28]
 8009e18:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009e1c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009e1e:	69da      	ldr	r2, [r3, #28]
 8009e20:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009e24:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009e26:	6a1b      	ldr	r3, [r3, #32]
 8009e28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009e2c:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009e2e:	4b04      	ldr	r3, [pc, #16]	@ (8009e40 <HAL_RCC_GetClockConfig+0x50>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 030f 	and.w	r3, r3, #15
 8009e36:	600b      	str	r3, [r1, #0]
}
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	58024400 	.word	0x58024400
 8009e40:	52002000 	.word	0x52002000

08009e44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e46:	4c39      	ldr	r4, [pc, #228]	@ (8009f2c <RCCEx_PLL2_Config+0xe8>)
{
 8009e48:	4606      	mov	r6, r0
 8009e4a:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e4c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009e4e:	f003 0303 	and.w	r3, r3, #3
 8009e52:	2b03      	cmp	r3, #3
 8009e54:	d067      	beq.n	8009f26 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e5c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e5e:	f7fc f945 	bl	80060ec <HAL_GetTick>
 8009e62:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	011a      	lsls	r2, r3, #4
 8009e68:	d449      	bmi.n	8009efe <RCCEx_PLL2_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009e6a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009e6c:	6832      	ldr	r2, [r6, #0]
 8009e6e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009e72:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8009e76:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e78:	68b3      	ldr	r3, [r6, #8]
 8009e7a:	68f2      	ldr	r2, [r6, #12]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	3a01      	subs	r2, #1
 8009e80:	025b      	lsls	r3, r3, #9
 8009e82:	0412      	lsls	r2, r2, #16
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	6872      	ldr	r2, [r6, #4]
 8009e8e:	3a01      	subs	r2, #1
 8009e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e94:	4313      	orrs	r3, r2
 8009e96:	6932      	ldr	r2, [r6, #16]
 8009e98:	3a01      	subs	r2, #1
 8009e9a:	0612      	lsls	r2, r2, #24
 8009e9c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009ea4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009ea6:	6972      	ldr	r2, [r6, #20]
 8009ea8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009eac:	4313      	orrs	r3, r2
 8009eae:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009eb0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009eb2:	69b2      	ldr	r2, [r6, #24]
 8009eb4:	f023 0320 	bic.w	r3, r3, #32
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009ebc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009ebe:	f023 0310 	bic.w	r3, r3, #16
 8009ec2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009ec4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009ec6:	69f2      	ldr	r2, [r6, #28]
 8009ec8:	f36f 03cf 	bfc	r3, #3, #13
 8009ecc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009ed0:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009ed2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009ed4:	f043 0310 	orr.w	r3, r3, #16
 8009ed8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009eda:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8009edc:	b9b5      	cbnz	r5, 8009f0c <RCCEx_PLL2_Config+0xc8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ede:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009ee2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009ee4:	4c11      	ldr	r4, [pc, #68]	@ (8009f2c <RCCEx_PLL2_Config+0xe8>)
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009eec:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009eee:	f7fc f8fd 	bl	80060ec <HAL_GetTick>
 8009ef2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ef4:	6823      	ldr	r3, [r4, #0]
 8009ef6:	011b      	lsls	r3, r3, #4
 8009ef8:	d50f      	bpl.n	8009f1a <RCCEx_PLL2_Config+0xd6>
    }

  }


  return status;
 8009efa:	2000      	movs	r0, #0
 8009efc:	e005      	b.n	8009f0a <RCCEx_PLL2_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009efe:	f7fc f8f5 	bl	80060ec <HAL_GetTick>
 8009f02:	1bc0      	subs	r0, r0, r7
 8009f04:	2802      	cmp	r0, #2
 8009f06:	d9ad      	bls.n	8009e64 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8009f08:	2003      	movs	r0, #3
}
 8009f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8009f0c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009f0e:	bf0c      	ite	eq
 8009f10:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009f14:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8009f18:	e7e3      	b.n	8009ee2 <RCCEx_PLL2_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f1a:	f7fc f8e7 	bl	80060ec <HAL_GetTick>
 8009f1e:	1b40      	subs	r0, r0, r5
 8009f20:	2802      	cmp	r0, #2
 8009f22:	d9e7      	bls.n	8009ef4 <RCCEx_PLL2_Config+0xb0>
 8009f24:	e7f0      	b.n	8009f08 <RCCEx_PLL2_Config+0xc4>
    return HAL_ERROR;
 8009f26:	2001      	movs	r0, #1
 8009f28:	e7ef      	b.n	8009f0a <RCCEx_PLL2_Config+0xc6>
 8009f2a:	bf00      	nop
 8009f2c:	58024400 	.word	0x58024400

08009f30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f32:	4c39      	ldr	r4, [pc, #228]	@ (800a018 <RCCEx_PLL3_Config+0xe8>)
{
 8009f34:	4606      	mov	r6, r0
 8009f36:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f38:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009f3a:	f003 0303 	and.w	r3, r3, #3
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	d067      	beq.n	800a012 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f48:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f4a:	f7fc f8cf 	bl	80060ec <HAL_GetTick>
 8009f4e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f50:	6823      	ldr	r3, [r4, #0]
 8009f52:	009a      	lsls	r2, r3, #2
 8009f54:	d449      	bmi.n	8009fea <RCCEx_PLL3_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f56:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009f58:	6832      	ldr	r2, [r6, #0]
 8009f5a:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8009f5e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8009f62:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009f64:	68b3      	ldr	r3, [r6, #8]
 8009f66:	68f2      	ldr	r2, [r6, #12]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	3a01      	subs	r2, #1
 8009f6c:	025b      	lsls	r3, r3, #9
 8009f6e:	0412      	lsls	r2, r2, #16
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009f76:	4313      	orrs	r3, r2
 8009f78:	6872      	ldr	r2, [r6, #4]
 8009f7a:	3a01      	subs	r2, #1
 8009f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f80:	4313      	orrs	r3, r2
 8009f82:	6932      	ldr	r2, [r6, #16]
 8009f84:	3a01      	subs	r2, #1
 8009f86:	0612      	lsls	r2, r2, #24
 8009f88:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f90:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009f92:	6972      	ldr	r2, [r6, #20]
 8009f94:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009f9c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009f9e:	69b2      	ldr	r2, [r6, #24]
 8009fa0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009fa8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009faa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fae:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009fb0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009fb2:	69f2      	ldr	r2, [r6, #28]
 8009fb4:	f36f 03cf 	bfc	r3, #3, #13
 8009fb8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009fbc:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009fbe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fc4:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009fc6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8009fc8:	b9b5      	cbnz	r5, 8009ff8 <RCCEx_PLL3_Config+0xc8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009fca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009fce:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009fd0:	4c11      	ldr	r4, [pc, #68]	@ (800a018 <RCCEx_PLL3_Config+0xe8>)
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fd8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fda:	f7fc f887 	bl	80060ec <HAL_GetTick>
 8009fde:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	d50f      	bpl.n	800a006 <RCCEx_PLL3_Config+0xd6>
    }

  }


  return status;
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	e005      	b.n	8009ff6 <RCCEx_PLL3_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009fea:	f7fc f87f 	bl	80060ec <HAL_GetTick>
 8009fee:	1bc0      	subs	r0, r0, r7
 8009ff0:	2802      	cmp	r0, #2
 8009ff2:	d9ad      	bls.n	8009f50 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8009ff4:	2003      	movs	r0, #3
}
 8009ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8009ff8:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009ffa:	bf0c      	ite	eq
 8009ffc:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a000:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800a004:	e7e3      	b.n	8009fce <RCCEx_PLL3_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a006:	f7fc f871 	bl	80060ec <HAL_GetTick>
 800a00a:	1b40      	subs	r0, r0, r5
 800a00c:	2802      	cmp	r0, #2
 800a00e:	d9e7      	bls.n	8009fe0 <RCCEx_PLL3_Config+0xb0>
 800a010:	e7f0      	b.n	8009ff4 <RCCEx_PLL3_Config+0xc4>
    return HAL_ERROR;
 800a012:	2001      	movs	r0, #1
 800a014:	e7ef      	b.n	8009ff6 <RCCEx_PLL3_Config+0xc6>
 800a016:	bf00      	nop
 800a018:	58024400 	.word	0x58024400

0800a01c <HAL_RCCEx_PeriphCLKConfig>:
{
 800a01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a020:	6803      	ldr	r3, [r0, #0]
{
 800a022:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a024:	011c      	lsls	r4, r3, #4
 800a026:	d51e      	bpl.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a028:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800a02a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a02e:	d02a      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a030:	d80f      	bhi.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800a032:	b1d3      	cbz	r3, 800a06a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800a034:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a038:	d01d      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800a03a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a03c:	682b      	ldr	r3, [r5, #0]
 800a03e:	05d8      	lsls	r0, r3, #23
 800a040:	d54f      	bpl.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a042:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800a044:	2b04      	cmp	r3, #4
 800a046:	d84b      	bhi.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800a048:	e8df f003 	tbb	[pc, r3]
 800a04c:	27443d22 	.word	0x27443d22
 800a050:	27          	.byte	0x27
 800a051:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a052:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a056:	d1f0      	bne.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a058:	4a86      	ldr	r2, [pc, #536]	@ (800a274 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a05a:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800a05c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a05e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a062:	430b      	orrs	r3, r1
 800a064:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a066:	2600      	movs	r6, #0
 800a068:	e7e8      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a06a:	4a82      	ldr	r2, [pc, #520]	@ (800a274 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a06c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a06e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a072:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a074:	e7f0      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a076:	2102      	movs	r1, #2
 800a078:	3008      	adds	r0, #8
 800a07a:	f7ff fee3 	bl	8009e44 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a07e:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800a080:	2800      	cmp	r0, #0
 800a082:	d1db      	bne.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x20>
 800a084:	e7e8      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a086:	2102      	movs	r1, #2
 800a088:	3028      	adds	r0, #40	@ 0x28
 800a08a:	f7ff ff51 	bl	8009f30 <RCCEx_PLL3_Config>
 800a08e:	e7f6      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a090:	4a78      	ldr	r2, [pc, #480]	@ (800a274 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a092:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a098:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a09a:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800a09c:	bb1c      	cbnz	r4, 800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a09e:	4a75      	ldr	r2, [pc, #468]	@ (800a274 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a0a0:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800a0a2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a0a4:	f023 0307 	bic.w	r3, r3, #7
 800a0a8:	430b      	orrs	r3, r1
 800a0aa:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a0ac:	682b      	ldr	r3, [r5, #0]
 800a0ae:	0599      	lsls	r1, r3, #22
 800a0b0:	d528      	bpl.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a0b2:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800a0b4:	2b80      	cmp	r3, #128	@ 0x80
 800a0b6:	d043      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800a0b8:	d817      	bhi.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0xce>
 800a0ba:	b3a3      	cbz	r3, 800a126 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800a0bc:	2b40      	cmp	r3, #64	@ 0x40
 800a0be:	d038      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a0c0:	2601      	movs	r6, #1
 800a0c2:	4634      	mov	r4, r6
 800a0c4:	e01e      	b.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	f105 0008 	add.w	r0, r5, #8
 800a0cc:	f7ff feba 	bl	8009e44 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0d0:	4604      	mov	r4, r0
        break;
 800a0d2:	e7e3      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a0da:	f7ff ff29 	bl	8009f30 <RCCEx_PLL3_Config>
 800a0de:	e7f7      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a0e0:	2601      	movs	r6, #1
 800a0e2:	4634      	mov	r4, r6
 800a0e4:	e7e2      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x90>
      status = ret;
 800a0e6:	4626      	mov	r6, r4
 800a0e8:	e7e0      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a0ea:	2bc0      	cmp	r3, #192	@ 0xc0
 800a0ec:	d002      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800a0ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0f2:	d1e5      	bne.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800a0f4:	bb54      	cbnz	r4, 800a14c <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a0f6:	4a5f      	ldr	r2, [pc, #380]	@ (800a274 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a0f8:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a0fa:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a0fc:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800a100:	430b      	orrs	r3, r1
 800a102:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a104:	682b      	ldr	r3, [r5, #0]
 800a106:	055a      	lsls	r2, r3, #21
 800a108:	d531      	bpl.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a10a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800a10e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a112:	d049      	beq.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a114:	d81c      	bhi.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800a116:	2b00      	cmp	r3, #0
 800a118:	d039      	beq.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x172>
 800a11a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a11e:	d03c      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800a120:	2601      	movs	r6, #1
 800a122:	4634      	mov	r4, r6
 800a124:	e023      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a126:	4a53      	ldr	r2, [pc, #332]	@ (800a274 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a128:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a12a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a12e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a130:	e7e0      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a132:	2100      	movs	r1, #0
 800a134:	f105 0008 	add.w	r0, r5, #8
 800a138:	f7ff fe84 	bl	8009e44 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a13c:	4604      	mov	r4, r0
        break;
 800a13e:	e7d9      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a140:	2100      	movs	r1, #0
 800a142:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a146:	f7ff fef3 	bl	8009f30 <RCCEx_PLL3_Config>
 800a14a:	e7f7      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x120>
      status = ret;
 800a14c:	4626      	mov	r6, r4
 800a14e:	e7d9      	b.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a150:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a154:	d002      	beq.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x140>
 800a156:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a15a:	d1e1      	bne.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800a15c:	bb54      	cbnz	r4, 800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a15e:	4a45      	ldr	r2, [pc, #276]	@ (800a274 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a160:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800a164:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a166:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800a16a:	430b      	orrs	r3, r1
 800a16c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a16e:	682b      	ldr	r3, [r5, #0]
 800a170:	051b      	lsls	r3, r3, #20
 800a172:	d530      	bpl.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a174:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800a178:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a17c:	d045      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a17e:	d81b      	bhi.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800a180:	b3b3      	cbz	r3, 800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a182:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a186:	d039      	beq.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800a188:	2601      	movs	r6, #1
 800a18a:	4634      	mov	r4, r6
 800a18c:	e023      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a18e:	4a39      	ldr	r2, [pc, #228]	@ (800a274 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a190:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a196:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a198:	e7e0      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a19a:	2100      	movs	r1, #0
 800a19c:	f105 0008 	add.w	r0, r5, #8
 800a1a0:	f7ff fe50 	bl	8009e44 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1a4:	4604      	mov	r4, r0
        break;
 800a1a6:	e7d9      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a1ae:	f7ff febf 	bl	8009f30 <RCCEx_PLL3_Config>
 800a1b2:	e7f7      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      status = ret;
 800a1b4:	4626      	mov	r6, r4
 800a1b6:	e7da      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a1b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a1bc:	d002      	beq.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a1be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a1c2:	d1e1      	bne.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800a1c4:	bb3c      	cbnz	r4, 800a216 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a1c6:	4a2b      	ldr	r2, [pc, #172]	@ (800a274 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a1c8:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800a1cc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a1ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800a1d2:	430b      	orrs	r3, r1
 800a1d4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a1d6:	682b      	ldr	r3, [r5, #0]
 800a1d8:	019f      	lsls	r7, r3, #6
 800a1da:	d528      	bpl.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800a1dc:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800a1de:	2b20      	cmp	r3, #32
 800a1e0:	d03e      	beq.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800a1e2:	d81a      	bhi.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a1e4:	b1db      	cbz	r3, 800a21e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a1e6:	2b10      	cmp	r3, #16
 800a1e8:	d034      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800a1ea:	2601      	movs	r6, #1
 800a1ec:	4634      	mov	r4, r6
 800a1ee:	e01e      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1f0:	4a20      	ldr	r2, [pc, #128]	@ (800a274 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a1f2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a1f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a1fa:	e7e3      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	f105 0008 	add.w	r0, r5, #8
 800a202:	f7ff fe1f 	bl	8009e44 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a206:	4604      	mov	r4, r0
        break;
 800a208:	e7dc      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a20a:	2100      	movs	r1, #0
 800a20c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a210:	f7ff fe8e 	bl	8009f30 <RCCEx_PLL3_Config>
 800a214:	e7f7      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      status = ret;
 800a216:	4626      	mov	r6, r4
 800a218:	e7dd      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800a21a:	2b30      	cmp	r3, #48	@ 0x30
 800a21c:	d1e5      	bne.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800a21e:	bb34      	cbnz	r4, 800a26e <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a220:	4a14      	ldr	r2, [pc, #80]	@ (800a274 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a222:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a224:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a226:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a22a:	430b      	orrs	r3, r1
 800a22c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a22e:	682b      	ldr	r3, [r5, #0]
 800a230:	04d8      	lsls	r0, r3, #19
 800a232:	d530      	bpl.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800a234:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a23a:	f000 8095 	beq.w	800a368 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a23e:	d81b      	bhi.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800a240:	2b00      	cmp	r3, #0
 800a242:	f000 8084 	beq.w	800a34e <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a24a:	f000 8086 	beq.w	800a35a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800a24e:	2601      	movs	r6, #1
 800a250:	4634      	mov	r4, r6
 800a252:	e020      	b.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a254:	4a07      	ldr	r2, [pc, #28]	@ (800a274 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a256:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a25c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a25e:	e7de      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a260:	2102      	movs	r1, #2
 800a262:	f105 0008 	add.w	r0, r5, #8
 800a266:	f7ff fded 	bl	8009e44 <RCCEx_PLL2_Config>
 800a26a:	4604      	mov	r4, r0
        break;
 800a26c:	e7d7      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x202>
      status = ret;
 800a26e:	4626      	mov	r6, r4
 800a270:	e7dd      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800a272:	bf00      	nop
 800a274:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800a278:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a27c:	d002      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800a27e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a282:	d1e4      	bne.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800a284:	2c00      	cmp	r4, #0
 800a286:	d175      	bne.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x358>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a288:	4a93      	ldr	r2, [pc, #588]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a28a:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800a28c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a28e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a292:	430b      	orrs	r3, r1
 800a294:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a296:	682b      	ldr	r3, [r5, #0]
 800a298:	0499      	lsls	r1, r3, #18
 800a29a:	d50c      	bpl.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a29c:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800a29e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2a2:	f000 8081 	beq.w	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800a2a6:	d867      	bhi.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d06d      	beq.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800a2ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2b0:	d073      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a2b2:	2601      	movs	r6, #1
 800a2b4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a2b6:	682b      	ldr	r3, [r5, #0]
 800a2b8:	045a      	lsls	r2, r3, #17
 800a2ba:	d50e      	bpl.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a2bc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800a2c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2c4:	f000 8091 	beq.w	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a2c8:	d876      	bhi.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d07c      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800a2ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2d2:	f000 8083 	beq.w	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800a2d6:	2601      	movs	r6, #1
 800a2d8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a2da:	682b      	ldr	r3, [r5, #0]
 800a2dc:	015b      	lsls	r3, r3, #5
 800a2de:	d515      	bpl.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800a2e0:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a2e2:	b14b      	cbz	r3, 800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800a2e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2e8:	f040 8087 	bne.w	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	f105 0008 	add.w	r0, r5, #8
 800a2f2:	f7ff fda7 	bl	8009e44 <RCCEx_PLL2_Config>
 800a2f6:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a2f8:	2c00      	cmp	r4, #0
 800a2fa:	f040 8081 	bne.w	800a400 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800a2fe:	4a76      	ldr	r2, [pc, #472]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a300:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800a302:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a308:	430b      	orrs	r3, r1
 800a30a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	041f      	lsls	r7, r3, #16
 800a310:	d511      	bpl.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800a312:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a314:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a318:	d074      	beq.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800a31a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a31e:	d077      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800a320:	2b00      	cmp	r3, #0
 800a322:	d17c      	bne.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x402>
    if (ret == HAL_OK)
 800a324:	2c00      	cmp	r4, #0
 800a326:	d17d      	bne.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x408>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a328:	4a6b      	ldr	r2, [pc, #428]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a32a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800a32c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a32e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800a332:	430b      	orrs	r3, r1
 800a334:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a336:	682b      	ldr	r3, [r5, #0]
 800a338:	01d8      	lsls	r0, r3, #7
 800a33a:	f140 8083 	bpl.w	800a444 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch (PeriphClkInit->FmcClockSelection)
 800a33e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800a340:	2b03      	cmp	r3, #3
 800a342:	f200 80c4 	bhi.w	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a346:	e8df f003 	tbb	[pc, r3]
 800a34a:	6f74      	.short	0x6f74
 800a34c:	74bb      	.short	0x74bb
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a34e:	4a62      	ldr	r2, [pc, #392]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a350:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a356:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a358:	e794      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a35a:	2100      	movs	r1, #0
 800a35c:	f105 0008 	add.w	r0, r5, #8
 800a360:	f7ff fd70 	bl	8009e44 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a364:	4604      	mov	r4, r0
        break;
 800a366:	e78d      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a368:	2100      	movs	r1, #0
 800a36a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a36e:	f7ff fddf 	bl	8009f30 <RCCEx_PLL3_Config>
 800a372:	e7f7      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x348>
      status = ret;
 800a374:	4626      	mov	r6, r4
 800a376:	e78e      	b.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a378:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a37c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800a380:	d002      	beq.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800a382:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a386:	d194      	bne.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800a388:	b9a4      	cbnz	r4, 800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a38a:	4a53      	ldr	r2, [pc, #332]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a38c:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800a38e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a390:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a394:	430b      	orrs	r3, r1
 800a396:	6513      	str	r3, [r2, #80]	@ 0x50
 800a398:	e78d      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a39a:	2101      	movs	r1, #1
 800a39c:	f105 0008 	add.w	r0, r5, #8
 800a3a0:	f7ff fd50 	bl	8009e44 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3a4:	4604      	mov	r4, r0
        break;
 800a3a6:	e7ef      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3a8:	2101      	movs	r1, #1
 800a3aa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a3ae:	f7ff fdbf 	bl	8009f30 <RCCEx_PLL3_Config>
 800a3b2:	e7f7      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x388>
      status = ret;
 800a3b4:	4626      	mov	r6, r4
 800a3b6:	e77e      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a3b8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a3bc:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800a3c0:	d002      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800a3c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a3c6:	d186      	bne.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800a3c8:	b9ac      	cbnz	r4, 800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a3ca:	4a43      	ldr	r2, [pc, #268]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a3cc:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800a3d0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a3d2:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800a3d6:	430b      	orrs	r3, r1
 800a3d8:	6593      	str	r3, [r2, #88]	@ 0x58
 800a3da:	e77e      	b.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3dc:	2101      	movs	r1, #1
 800a3de:	f105 0008 	add.w	r0, r5, #8
 800a3e2:	f7ff fd2f 	bl	8009e44 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3e6:	4604      	mov	r4, r0
        break;
 800a3e8:	e7ee      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3ea:	2101      	movs	r1, #1
 800a3ec:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a3f0:	f7ff fd9e 	bl	8009f30 <RCCEx_PLL3_Config>
 800a3f4:	e7f7      	b.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      status = ret;
 800a3f6:	4626      	mov	r6, r4
 800a3f8:	e76f      	b.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800a3fa:	2601      	movs	r6, #1
 800a3fc:	4634      	mov	r4, r6
 800a3fe:	e785      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      status = ret;
 800a400:	4626      	mov	r6, r4
 800a402:	e783      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a404:	4a34      	ldr	r2, [pc, #208]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a406:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a40c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a40e:	e789      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a410:	2101      	movs	r1, #1
 800a412:	f105 0008 	add.w	r0, r5, #8
 800a416:	f7ff fd15 	bl	8009e44 <RCCEx_PLL2_Config>
 800a41a:	4604      	mov	r4, r0
        break;
 800a41c:	e782      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800a41e:	2601      	movs	r6, #1
 800a420:	4634      	mov	r4, r6
 800a422:	e788      	b.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      status = ret;
 800a424:	4626      	mov	r6, r4
 800a426:	e786      	b.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a428:	4a2b      	ldr	r2, [pc, #172]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a42a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a42c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a430:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a432:	2c00      	cmp	r4, #0
 800a434:	d14e      	bne.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a436:	4a28      	ldr	r2, [pc, #160]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a438:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800a43a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a43c:	f023 0303 	bic.w	r3, r3, #3
 800a440:	430b      	orrs	r3, r1
 800a442:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a444:	682b      	ldr	r3, [r5, #0]
 800a446:	0259      	lsls	r1, r3, #9
 800a448:	d554      	bpl.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a44a:	4f24      	ldr	r7, [pc, #144]	@ (800a4dc <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a452:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a454:	f7fb fe4a 	bl	80060ec <HAL_GetTick>
 800a458:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	05da      	lsls	r2, r3, #23
 800a45e:	d541      	bpl.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if (ret == HAL_OK)
 800a460:	2c00      	cmp	r4, #0
 800a462:	d174      	bne.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x532>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a464:	4b1c      	ldr	r3, [pc, #112]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a466:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800a46a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a46c:	4042      	eors	r2, r0
 800a46e:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800a472:	d00b      	beq.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x470>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a474:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800a476:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a478:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800a47c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800a480:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a482:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a484:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800a488:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800a48a:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a48c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a490:	d048      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x508>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a492:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800a496:	4910      	ldr	r1, [pc, #64]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a498:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800a49c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800a4a0:	d151      	bne.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800a4a2:	6908      	ldr	r0, [r1, #16]
 800a4a4:	4a0e      	ldr	r2, [pc, #56]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800a4a6:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800a4aa:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800a4ae:	4302      	orrs	r2, r0
 800a4b0:	610a      	str	r2, [r1, #16]
 800a4b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4b6:	4a08      	ldr	r2, [pc, #32]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800a4b8:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800a4ba:	430b      	orrs	r3, r1
 800a4bc:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4be:	e019      	b.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a4c0:	2102      	movs	r1, #2
 800a4c2:	f105 0008 	add.w	r0, r5, #8
 800a4c6:	f7ff fcbd 	bl	8009e44 <RCCEx_PLL2_Config>
 800a4ca:	4604      	mov	r4, r0
        break;
 800a4cc:	e7b1      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch (PeriphClkInit->FmcClockSelection)
 800a4ce:	2601      	movs	r6, #1
 800a4d0:	4634      	mov	r4, r6
 800a4d2:	e7b7      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x428>
      status = ret;
 800a4d4:	4626      	mov	r6, r4
 800a4d6:	e7b5      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a4d8:	58024400 	.word	0x58024400
 800a4dc:	58024800 	.word	0x58024800
 800a4e0:	00ffffcf 	.word	0x00ffffcf
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4e4:	f7fb fe02 	bl	80060ec <HAL_GetTick>
 800a4e8:	eba0 0008 	sub.w	r0, r0, r8
 800a4ec:	2864      	cmp	r0, #100	@ 0x64
 800a4ee:	d9b4      	bls.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x43e>
        ret = HAL_TIMEOUT;
 800a4f0:	2603      	movs	r6, #3
 800a4f2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a4f4:	682b      	ldr	r3, [r5, #0]
 800a4f6:	07d8      	lsls	r0, r3, #31
 800a4f8:	d509      	bpl.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a4fa:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800a4fe:	2b10      	cmp	r3, #16
 800a500:	d03e      	beq.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x564>
 800a502:	d826      	bhi.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x536>
 800a504:	b35b      	cbz	r3, 800a55e <HAL_RCCEx_PeriphCLKConfig+0x542>
 800a506:	2b08      	cmp	r3, #8
 800a508:	d033      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800a50a:	2601      	movs	r6, #1
 800a50c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a50e:	682b      	ldr	r3, [r5, #0]
 800a510:	0799      	lsls	r1, r3, #30
 800a512:	d54b      	bpl.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a514:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800a516:	2b05      	cmp	r3, #5
 800a518:	d85e      	bhi.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a51a:	e8df f003 	tbb	[pc, r3]
 800a51e:	393f      	.short	0x393f
 800a520:	3f3f3f57 	.word	0x3f3f3f57
        tickstart = HAL_GetTick();
 800a524:	f7fb fde2 	bl	80060ec <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a528:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
        tickstart = HAL_GetTick();
 800a52c:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a52e:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a532:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800a536:	079b      	lsls	r3, r3, #30
 800a538:	d4ab      	bmi.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x476>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a53a:	f7fb fdd7 	bl	80060ec <HAL_GetTick>
 800a53e:	1bc0      	subs	r0, r0, r7
 800a540:	4548      	cmp	r0, r9
 800a542:	d9f6      	bls.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800a544:	e7d4      	b.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a546:	690a      	ldr	r2, [r1, #16]
 800a548:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800a54c:	e7b0      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
      status = ret;
 800a54e:	4626      	mov	r6, r4
 800a550:	e7d0      	b.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a552:	f023 0208 	bic.w	r2, r3, #8
 800a556:	2a20      	cmp	r2, #32
 800a558:	d001      	beq.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x542>
 800a55a:	2b18      	cmp	r3, #24
 800a55c:	d1d5      	bne.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if (ret == HAL_OK)
 800a55e:	b9ac      	cbnz	r4, 800a58c <HAL_RCCEx_PeriphCLKConfig+0x570>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a560:	4a20      	ldr	r2, [pc, #128]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a562:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800a566:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a568:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800a56c:	430b      	orrs	r3, r1
 800a56e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a570:	e7cd      	b.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a572:	2101      	movs	r1, #1
 800a574:	f105 0008 	add.w	r0, r5, #8
 800a578:	f7ff fc64 	bl	8009e44 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a57c:	4604      	mov	r4, r0
        break;
 800a57e:	e7ee      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a580:	2101      	movs	r1, #1
 800a582:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a586:	f7ff fcd3 	bl	8009f30 <RCCEx_PLL3_Config>
 800a58a:	e7f7      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = ret;
 800a58c:	4626      	mov	r6, r4
 800a58e:	e7be      	b.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a590:	2101      	movs	r1, #1
 800a592:	f105 0008 	add.w	r0, r5, #8
 800a596:	f7ff fc55 	bl	8009e44 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a59a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a59c:	b9fc      	cbnz	r4, 800a5de <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a59e:	4a11      	ldr	r2, [pc, #68]	@ (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a5a0:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800a5a2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a5a4:	f023 0307 	bic.w	r3, r3, #7
 800a5a8:	430b      	orrs	r3, r1
 800a5aa:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a5ac:	682b      	ldr	r3, [r5, #0]
 800a5ae:	075a      	lsls	r2, r3, #29
 800a5b0:	d52b      	bpl.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a5b2:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800a5b6:	2b05      	cmp	r3, #5
 800a5b8:	f200 816e 	bhi.w	800a898 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800a5bc:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a5c0:	0014001a 	.word	0x0014001a
 800a5c4:	001a0166 	.word	0x001a0166
 800a5c8:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a5d2:	f7ff fcad 	bl	8009f30 <RCCEx_PLL3_Config>
 800a5d6:	e7e0      	b.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a5d8:	2601      	movs	r6, #1
 800a5da:	4634      	mov	r4, r6
 800a5dc:	e7e6      	b.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x590>
      status = ret;
 800a5de:	4626      	mov	r6, r4
 800a5e0:	e7e4      	b.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x590>
 800a5e2:	bf00      	nop
 800a5e4:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	f105 0008 	add.w	r0, r5, #8
 800a5ee:	f7ff fc29 	bl	8009e44 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5f2:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a5f4:	2c00      	cmp	r4, #0
 800a5f6:	f040 8152 	bne.w	800a89e <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a5fa:	4aaa      	ldr	r2, [pc, #680]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a5fc:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800a600:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a602:	f023 0307 	bic.w	r3, r3, #7
 800a606:	430b      	orrs	r3, r1
 800a608:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a60a:	682b      	ldr	r3, [r5, #0]
 800a60c:	069b      	lsls	r3, r3, #26
 800a60e:	d510      	bpl.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x616>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a610:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800a614:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a618:	f000 8160 	beq.w	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800a61c:	f200 8144 	bhi.w	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800a620:	2b00      	cmp	r3, #0
 800a622:	f000 814a 	beq.w	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800a626:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a62a:	f000 8150 	beq.w	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 800a62e:	2601      	movs	r6, #1
 800a630:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a632:	682b      	ldr	r3, [r5, #0]
 800a634:	065f      	lsls	r7, r3, #25
 800a636:	d510      	bpl.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a638:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800a63c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a640:	f000 816e 	beq.w	800a920 <HAL_RCCEx_PeriphCLKConfig+0x904>
 800a644:	f200 8152 	bhi.w	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f000 8158 	beq.w	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a64e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a652:	f000 815e 	beq.w	800a912 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800a656:	2601      	movs	r6, #1
 800a658:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a65a:	682b      	ldr	r3, [r5, #0]
 800a65c:	0618      	lsls	r0, r3, #24
 800a65e:	d510      	bpl.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x666>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a660:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800a664:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a668:	f000 817c 	beq.w	800a964 <HAL_RCCEx_PeriphCLKConfig+0x948>
 800a66c:	f200 8160 	bhi.w	800a930 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800a670:	2b00      	cmp	r3, #0
 800a672:	f000 8166 	beq.w	800a942 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800a676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a67a:	f000 816c 	beq.w	800a956 <HAL_RCCEx_PeriphCLKConfig+0x93a>
 800a67e:	2601      	movs	r6, #1
 800a680:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a682:	682b      	ldr	r3, [r5, #0]
 800a684:	0719      	lsls	r1, r3, #28
 800a686:	d514      	bpl.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a688:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800a68c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a690:	d107      	bne.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x686>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a692:	2102      	movs	r1, #2
 800a694:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a698:	f7ff fc4a 	bl	8009f30 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a69c:	2800      	cmp	r0, #0
 800a69e:	bf18      	it	ne
 800a6a0:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a6a2:	4a80      	ldr	r2, [pc, #512]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a6a4:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800a6a8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a6aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a6ae:	430b      	orrs	r3, r1
 800a6b0:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a6b2:	682b      	ldr	r3, [r5, #0]
 800a6b4:	06da      	lsls	r2, r3, #27
 800a6b6:	d514      	bpl.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a6b8:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800a6bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6c0:	d107      	bne.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a6c2:	2102      	movs	r1, #2
 800a6c4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a6c8:	f7ff fc32 	bl	8009f30 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	bf18      	it	ne
 800a6d0:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a6d2:	4a74      	ldr	r2, [pc, #464]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a6d4:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800a6d8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a6da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a6de:	430b      	orrs	r3, r1
 800a6e0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a6e2:	682b      	ldr	r3, [r5, #0]
 800a6e4:	031b      	lsls	r3, r3, #12
 800a6e6:	d51b      	bpl.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x704>
    switch (PeriphClkInit->AdcClockSelection)
 800a6e8:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800a6ec:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800a6f0:	f000 8140 	beq.w	800a974 <HAL_RCCEx_PeriphCLKConfig+0x958>
 800a6f4:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800a6f8:	d007      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800a6fa:	2900      	cmp	r1, #0
 800a6fc:	f040 8140 	bne.w	800a980 <HAL_RCCEx_PeriphCLKConfig+0x964>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a700:	f105 0008 	add.w	r0, r5, #8
 800a704:	f7ff fb9e 	bl	8009e44 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a708:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a70a:	2c00      	cmp	r4, #0
 800a70c:	f040 813b 	bne.w	800a986 <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a710:	4a64      	ldr	r2, [pc, #400]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a712:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800a716:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a718:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a71c:	430b      	orrs	r3, r1
 800a71e:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	035f      	lsls	r7, r3, #13
 800a724:	d50f      	bpl.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x72a>
    switch (PeriphClkInit->UsbClockSelection)
 800a726:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800a72a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a72e:	f000 813b 	beq.w	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a732:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a736:	f000 812d 	beq.w	800a994 <HAL_RCCEx_PeriphCLKConfig+0x978>
 800a73a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a73e:	f000 8124 	beq.w	800a98a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a742:	2601      	movs	r6, #1
 800a744:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a746:	682b      	ldr	r3, [r5, #0]
 800a748:	03d8      	lsls	r0, r3, #15
 800a74a:	d509      	bpl.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x744>
    switch (PeriphClkInit->SdmmcClockSelection)
 800a74c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f000 8133 	beq.w	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800a754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a758:	f000 813d 	beq.w	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800a75c:	2601      	movs	r6, #1
 800a75e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	0099      	lsls	r1, r3, #2
 800a764:	d507      	bpl.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x75a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a766:	2102      	movs	r1, #2
 800a768:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a76c:	f7ff fbe0 	bl	8009f30 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800a770:	2800      	cmp	r0, #0
 800a772:	bf18      	it	ne
 800a774:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a776:	e9d5 3100 	ldrd	r3, r1, [r5]
 800a77a:	039a      	lsls	r2, r3, #14
 800a77c:	f140 8143 	bpl.w	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
    switch (PeriphClkInit->RngClockSelection)
 800a780:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800a784:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a788:	f000 813f 	beq.w	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a78c:	f200 812c 	bhi.w	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a790:	2800      	cmp	r0, #0
 800a792:	f000 812f 	beq.w	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 800a796:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a798:	02df      	lsls	r7, r3, #11
 800a79a:	d506      	bpl.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x78e>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a79c:	4841      	ldr	r0, [pc, #260]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a79e:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800a7a0:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a7a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a7a6:	4332      	orrs	r2, r6
 800a7a8:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a7aa:	00de      	lsls	r6, r3, #3
 800a7ac:	d507      	bpl.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a7ae:	483d      	ldr	r0, [pc, #244]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a7b0:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800a7b4:	6902      	ldr	r2, [r0, #16]
 800a7b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a7ba:	4332      	orrs	r2, r6
 800a7bc:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a7be:	0298      	lsls	r0, r3, #10
 800a7c0:	d506      	bpl.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a7c2:	4838      	ldr	r0, [pc, #224]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a7c4:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800a7c6:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a7c8:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a7cc:	4332      	orrs	r2, r6
 800a7ce:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a7d0:	005a      	lsls	r2, r3, #1
 800a7d2:	d509      	bpl.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a7d4:	4a33      	ldr	r2, [pc, #204]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a7d6:	6910      	ldr	r0, [r2, #16]
 800a7d8:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800a7dc:	6110      	str	r0, [r2, #16]
 800a7de:	6910      	ldr	r0, [r2, #16]
 800a7e0:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800a7e4:	4330      	orrs	r0, r6
 800a7e6:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	da06      	bge.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x7de>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a7ec:	482d      	ldr	r0, [pc, #180]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a7ee:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a7f0:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800a7f2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a7f6:	4332      	orrs	r2, r6
 800a7f8:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a7fa:	021f      	lsls	r7, r3, #8
 800a7fc:	d507      	bpl.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a7fe:	4a29      	ldr	r2, [pc, #164]	@ (800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a800:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800a804:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a806:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a80a:	4303      	orrs	r3, r0
 800a80c:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a80e:	07ce      	lsls	r6, r1, #31
 800a810:	d506      	bpl.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x804>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a812:	2100      	movs	r1, #0
 800a814:	f105 0008 	add.w	r0, r5, #8
 800a818:	f7ff fb14 	bl	8009e44 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a81c:	4607      	mov	r7, r0
 800a81e:	b900      	cbnz	r0, 800a822 <HAL_RCCEx_PeriphCLKConfig+0x806>
    switch (PeriphClkInit->RngClockSelection)
 800a820:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a822:	686b      	ldr	r3, [r5, #4]
 800a824:	079c      	lsls	r4, r3, #30
 800a826:	d506      	bpl.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x81a>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a828:	2101      	movs	r1, #1
 800a82a:	f105 0008 	add.w	r0, r5, #8
 800a82e:	f7ff fb09 	bl	8009e44 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a832:	4606      	mov	r6, r0
 800a834:	b900      	cbnz	r0, 800a838 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    switch (PeriphClkInit->RngClockSelection)
 800a836:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a838:	686b      	ldr	r3, [r5, #4]
 800a83a:	0758      	lsls	r0, r3, #29
 800a83c:	d506      	bpl.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x830>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a83e:	2102      	movs	r1, #2
 800a840:	f105 0008 	add.w	r0, r5, #8
 800a844:	f7ff fafe 	bl	8009e44 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a848:	4604      	mov	r4, r0
 800a84a:	b900      	cbnz	r0, 800a84e <HAL_RCCEx_PeriphCLKConfig+0x832>
    switch (PeriphClkInit->RngClockSelection)
 800a84c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a84e:	686b      	ldr	r3, [r5, #4]
 800a850:	0719      	lsls	r1, r3, #28
 800a852:	d506      	bpl.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x846>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a854:	2100      	movs	r1, #0
 800a856:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a85a:	f7ff fb69 	bl	8009f30 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a85e:	4606      	mov	r6, r0
 800a860:	b900      	cbnz	r0, 800a864 <HAL_RCCEx_PeriphCLKConfig+0x848>
    switch (PeriphClkInit->RngClockSelection)
 800a862:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a864:	686b      	ldr	r3, [r5, #4]
 800a866:	06da      	lsls	r2, r3, #27
 800a868:	d506      	bpl.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a86a:	2101      	movs	r1, #1
 800a86c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a870:	f7ff fb5e 	bl	8009f30 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a874:	4604      	mov	r4, r0
 800a876:	b900      	cbnz	r0, 800a87a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    switch (PeriphClkInit->RngClockSelection)
 800a878:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a87a:	686b      	ldr	r3, [r5, #4]
 800a87c:	069b      	lsls	r3, r3, #26
 800a87e:	f100 80ca 	bmi.w	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  if (status == HAL_OK)
 800a882:	1e20      	subs	r0, r4, #0
 800a884:	bf18      	it	ne
 800a886:	2001      	movne	r0, #1
}
 800a888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a88c:	2101      	movs	r1, #1
 800a88e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a892:	f7ff fb4d 	bl	8009f30 <RCCEx_PLL3_Config>
 800a896:	e6ac      	b.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a898:	2601      	movs	r6, #1
 800a89a:	4634      	mov	r4, r6
 800a89c:	e6b5      	b.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 800a89e:	4626      	mov	r6, r4
 800a8a0:	e6b3      	b.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 800a8a2:	bf00      	nop
 800a8a4:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a8a8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a8ac:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800a8b0:	d003      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800a8b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a8b6:	f47f aeba 	bne.w	800a62e <HAL_RCCEx_PeriphCLKConfig+0x612>
    if (ret == HAL_OK)
 800a8ba:	b9ac      	cbnz	r4, 800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8bc:	4a5b      	ldr	r2, [pc, #364]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800a8be:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800a8c2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a8c4:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800a8c8:	430b      	orrs	r3, r1
 800a8ca:	6553      	str	r3, [r2, #84]	@ 0x54
 800a8cc:	e6b1      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x616>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	f105 0008 	add.w	r0, r5, #8
 800a8d4:	f7ff fab6 	bl	8009e44 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8d8:	4604      	mov	r4, r0
        break;
 800a8da:	e7ee      	b.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8dc:	2102      	movs	r1, #2
 800a8de:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a8e2:	f7ff fb25 	bl	8009f30 <RCCEx_PLL3_Config>
 800a8e6:	e7f7      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      status = ret;
 800a8e8:	4626      	mov	r6, r4
 800a8ea:	e6a2      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x616>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a8ec:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a8f0:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800a8f4:	d003      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a8f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a8fa:	f47f aeac 	bne.w	800a656 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    if (ret == HAL_OK)
 800a8fe:	b9ac      	cbnz	r4, 800a92c <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a900:	4a4a      	ldr	r2, [pc, #296]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800a902:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800a906:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a908:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800a90c:	430b      	orrs	r3, r1
 800a90e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a910:	e6a3      	b.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a912:	2100      	movs	r1, #0
 800a914:	f105 0008 	add.w	r0, r5, #8
 800a918:	f7ff fa94 	bl	8009e44 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a91c:	4604      	mov	r4, r0
        break;
 800a91e:	e7ee      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a920:	2102      	movs	r1, #2
 800a922:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a926:	f7ff fb03 	bl	8009f30 <RCCEx_PLL3_Config>
 800a92a:	e7f7      	b.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x900>
      status = ret;
 800a92c:	4626      	mov	r6, r4
 800a92e:	e694      	b.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a930:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a934:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800a938:	d003      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800a93a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a93e:	f47f ae9e 	bne.w	800a67e <HAL_RCCEx_PeriphCLKConfig+0x662>
    if (ret == HAL_OK)
 800a942:	b9ac      	cbnz	r4, 800a970 <HAL_RCCEx_PeriphCLKConfig+0x954>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a944:	4a39      	ldr	r2, [pc, #228]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800a946:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800a94a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a94c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800a950:	430b      	orrs	r3, r1
 800a952:	6593      	str	r3, [r2, #88]	@ 0x58
 800a954:	e695      	b.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a956:	2100      	movs	r1, #0
 800a958:	f105 0008 	add.w	r0, r5, #8
 800a95c:	f7ff fa72 	bl	8009e44 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a960:	4604      	mov	r4, r0
        break;
 800a962:	e7ee      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x926>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a964:	2102      	movs	r1, #2
 800a966:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a96a:	f7ff fae1 	bl	8009f30 <RCCEx_PLL3_Config>
 800a96e:	e7f7      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x944>
      status = ret;
 800a970:	4626      	mov	r6, r4
 800a972:	e686      	b.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a974:	2102      	movs	r1, #2
 800a976:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a97a:	f7ff fad9 	bl	8009f30 <RCCEx_PLL3_Config>
 800a97e:	e6c3      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    switch (PeriphClkInit->AdcClockSelection)
 800a980:	2601      	movs	r6, #1
 800a982:	4634      	mov	r4, r6
 800a984:	e6cc      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x704>
      status = ret;
 800a986:	4626      	mov	r6, r4
 800a988:	e6ca      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x704>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a98a:	4a28      	ldr	r2, [pc, #160]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800a98c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a98e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a992:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a994:	b97c      	cbnz	r4, 800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x99a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a996:	4a25      	ldr	r2, [pc, #148]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800a998:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800a99c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a99e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a9a2:	430b      	orrs	r3, r1
 800a9a4:	6553      	str	r3, [r2, #84]	@ 0x54
 800a9a6:	e6ce      	b.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x72a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9a8:	2101      	movs	r1, #1
 800a9aa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a9ae:	f7ff fabf 	bl	8009f30 <RCCEx_PLL3_Config>
 800a9b2:	4604      	mov	r4, r0
        break;
 800a9b4:	e7ee      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x978>
      status = ret;
 800a9b6:	4626      	mov	r6, r4
 800a9b8:	e6c5      	b.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x72a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9ba:	4a1c      	ldr	r2, [pc, #112]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800a9bc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a9be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a9c4:	b974      	cbnz	r4, 800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a9c6:	4a19      	ldr	r2, [pc, #100]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800a9c8:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800a9ca:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a9cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a9d4:	e6c4      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x744>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a9d6:	2102      	movs	r1, #2
 800a9d8:	f105 0008 	add.w	r0, r5, #8
 800a9dc:	f7ff fa32 	bl	8009e44 <RCCEx_PLL2_Config>
 800a9e0:	4604      	mov	r4, r0
        break;
 800a9e2:	e7ef      	b.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      status = ret;
 800a9e4:	4626      	mov	r6, r4
 800a9e6:	e6bb      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x744>
    switch (PeriphClkInit->RngClockSelection)
 800a9e8:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800a9ec:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800a9f0:	f47f aed1 	bne.w	800a796 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    if (ret == HAL_OK)
 800a9f4:	2c00      	cmp	r4, #0
 800a9f6:	f47f aecf 	bne.w	800a798 <HAL_RCCEx_PeriphCLKConfig+0x77c>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a9fa:	4c0c      	ldr	r4, [pc, #48]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800a9fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a9fe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800aa02:	4302      	orrs	r2, r0
 800aa04:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800aa06:	4634      	mov	r4, r6
 800aa08:	e6c6      	b.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa0a:	4f08      	ldr	r7, [pc, #32]	@ (800aa2c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800aa0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa0e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800aa12:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800aa14:	e7ee      	b.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa16:	2102      	movs	r1, #2
 800aa18:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aa1c:	f7ff fa88 	bl	8009f30 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800aa20:	2800      	cmp	r0, #0
 800aa22:	f43f af2e 	beq.w	800a882 <HAL_RCCEx_PeriphCLKConfig+0x866>
  return HAL_ERROR;
 800aa26:	2001      	movs	r0, #1
 800aa28:	e72e      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800aa2a:	bf00      	nop
 800aa2c:	58024400 	.word	0x58024400

0800aa30 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800aa34:	4604      	mov	r4, r0
 800aa36:	b1f0      	cbz	r0, 800aa76 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800aa38:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800aa3c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800aa40:	b91b      	cbnz	r3, 800aa4a <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800aa42:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800aa46:	f7f6 fced 	bl	8001424 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aa4a:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aa4c:	1d21      	adds	r1, r4, #4
 800aa4e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aa50:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aa54:	f000 f9fd 	bl	800ae52 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800aa58:	6862      	ldr	r2, [r4, #4]
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	6820      	ldr	r0, [r4, #0]
 800aa5e:	f000 fa2e 	bl	800aebe <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800aa62:	4a06      	ldr	r2, [pc, #24]	@ (800aa7c <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800aa64:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800aa66:	6813      	ldr	r3, [r2, #0]
 800aa68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aa6c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800aa74:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800aa76:	2001      	movs	r0, #1
 800aa78:	e7fc      	b.n	800aa74 <HAL_SDRAM_Init+0x44>
 800aa7a:	bf00      	nop
 800aa7c:	52004000 	.word	0x52004000

0800aa80 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800aa80:	b510      	push	{r4, lr}
 800aa82:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800aa84:	f7f6 fd68 	bl	8001558 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800aa88:	e9d4 0100 	ldrd	r0, r1, [r4]
 800aa8c:	f000 fa4d 	bl	800af2a <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800aa90:	2000      	movs	r0, #0
 800aa92:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800aa96:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800aa9a:	bd10      	pop	{r4, pc}

0800aa9c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800aa9c:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800aa9e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800aaa2:	4605      	mov	r5, r0
 800aaa4:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800aaa6:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800aaa8:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800aaaa:	d010      	beq.n	800aace <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800aaac:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800aab0:	2c01      	cmp	r4, #1
 800aab2:	d110      	bne.n	800aad6 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aab4:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800aab6:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aab8:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800aabc:	f000 fa44 	bl	800af48 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800aac0:	6833      	ldr	r3, [r6, #0]
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d104      	bne.n	800aad0 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800aac6:	2305      	movs	r3, #5
 800aac8:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800aacc:	2000      	movs	r0, #0
}
 800aace:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800aad0:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800aad4:	e7fa      	b.n	800aacc <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800aad6:	2001      	movs	r0, #1
 800aad8:	e7f9      	b.n	800aace <HAL_SDRAM_SendCommand+0x32>

0800aada <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800aada:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800aadc:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800aae0:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	b2d8      	uxtb	r0, r3
 800aae6:	d00d      	beq.n	800ab04 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800aae8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	b2dd      	uxtb	r5, r3
 800aaf0:	d109      	bne.n	800ab06 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aaf2:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800aaf4:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aaf6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800aafa:	f000 fa37 	bl	800af6c <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800aafe:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ab00:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800ab04:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ab06:	2001      	movs	r0, #1
 800ab08:	e7fc      	b.n	800ab04 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800ab0a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab0c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d12f      	bne.n	800ab74 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab14:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab16:	4a18      	ldr	r2, [pc, #96]	@ (800ab78 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ab18:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab1c:	6803      	ldr	r3, [r0, #0]
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d01a      	beq.n	800ab58 <HAL_TIM_Base_Start+0x4c>
 800ab22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab26:	d017      	beq.n	800ab58 <HAL_TIM_Base_Start+0x4c>
 800ab28:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d013      	beq.n	800ab58 <HAL_TIM_Base_Start+0x4c>
 800ab30:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d00f      	beq.n	800ab58 <HAL_TIM_Base_Start+0x4c>
 800ab38:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d00b      	beq.n	800ab58 <HAL_TIM_Base_Start+0x4c>
 800ab40:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d007      	beq.n	800ab58 <HAL_TIM_Base_Start+0x4c>
 800ab48:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d003      	beq.n	800ab58 <HAL_TIM_Base_Start+0x4c>
 800ab50:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d107      	bne.n	800ab68 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab58:	6899      	ldr	r1, [r3, #8]
 800ab5a:	4a08      	ldr	r2, [pc, #32]	@ (800ab7c <HAL_TIM_Base_Start+0x70>)
 800ab5c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab5e:	2a06      	cmp	r2, #6
 800ab60:	d006      	beq.n	800ab70 <HAL_TIM_Base_Start+0x64>
 800ab62:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800ab66:	d003      	beq.n	800ab70 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	f042 0201 	orr.w	r2, r2, #1
 800ab6e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800ab70:	2000      	movs	r0, #0
 800ab72:	4770      	bx	lr
    return HAL_ERROR;
 800ab74:	2001      	movs	r0, #1
}
 800ab76:	4770      	bx	lr
 800ab78:	40010000 	.word	0x40010000
 800ab7c:	00010007 	.word	0x00010007

0800ab80 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab80:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d133      	bne.n	800abf0 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab88:	2302      	movs	r3, #2
 800ab8a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab8e:	6803      	ldr	r3, [r0, #0]
 800ab90:	68da      	ldr	r2, [r3, #12]
 800ab92:	f042 0201 	orr.w	r2, r2, #1
 800ab96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab98:	4a16      	ldr	r2, [pc, #88]	@ (800abf4 <HAL_TIM_Base_Start_IT+0x74>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d01a      	beq.n	800abd4 <HAL_TIM_Base_Start_IT+0x54>
 800ab9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aba2:	d017      	beq.n	800abd4 <HAL_TIM_Base_Start_IT+0x54>
 800aba4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d013      	beq.n	800abd4 <HAL_TIM_Base_Start_IT+0x54>
 800abac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d00f      	beq.n	800abd4 <HAL_TIM_Base_Start_IT+0x54>
 800abb4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800abb8:	4293      	cmp	r3, r2
 800abba:	d00b      	beq.n	800abd4 <HAL_TIM_Base_Start_IT+0x54>
 800abbc:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d007      	beq.n	800abd4 <HAL_TIM_Base_Start_IT+0x54>
 800abc4:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800abc8:	4293      	cmp	r3, r2
 800abca:	d003      	beq.n	800abd4 <HAL_TIM_Base_Start_IT+0x54>
 800abcc:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d107      	bne.n	800abe4 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abd4:	6899      	ldr	r1, [r3, #8]
 800abd6:	4a08      	ldr	r2, [pc, #32]	@ (800abf8 <HAL_TIM_Base_Start_IT+0x78>)
 800abd8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abda:	2a06      	cmp	r2, #6
 800abdc:	d006      	beq.n	800abec <HAL_TIM_Base_Start_IT+0x6c>
 800abde:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800abe2:	d003      	beq.n	800abec <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	f042 0201 	orr.w	r2, r2, #1
 800abea:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800abec:	2000      	movs	r0, #0
 800abee:	4770      	bx	lr
    return HAL_ERROR;
 800abf0:	2001      	movs	r0, #1
}
 800abf2:	4770      	bx	lr
 800abf4:	40010000 	.word	0x40010000
 800abf8:	00010007 	.word	0x00010007

0800abfc <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800abfc:	4770      	bx	lr

0800abfe <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800abfe:	4770      	bx	lr

0800ac00 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800ac00:	4770      	bx	lr

0800ac02 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800ac02:	4770      	bx	lr

0800ac04 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800ac04:	6803      	ldr	r3, [r0, #0]
{
 800ac06:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800ac08:	68dd      	ldr	r5, [r3, #12]
{
 800ac0a:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800ac0c:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ac0e:	07b2      	lsls	r2, r6, #30
 800ac10:	d50d      	bpl.n	800ac2e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ac12:	07a9      	lsls	r1, r5, #30
 800ac14:	d50b      	bpl.n	800ac2e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ac16:	f06f 0202 	mvn.w	r2, #2
 800ac1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	079a      	lsls	r2, r3, #30
 800ac24:	d075      	beq.n	800ad12 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800ac26:	f7ff ffea 	bl	800abfe <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ac2e:	0773      	lsls	r3, r6, #29
 800ac30:	d510      	bpl.n	800ac54 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ac32:	0768      	lsls	r0, r5, #29
 800ac34:	d50e      	bpl.n	800ac54 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ac36:	6823      	ldr	r3, [r4, #0]
 800ac38:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800ac3c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ac3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac40:	2202      	movs	r2, #2
 800ac42:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac44:	699b      	ldr	r3, [r3, #24]
 800ac46:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800ac4a:	d068      	beq.n	800ad1e <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800ac4c:	f7ff ffd7 	bl	800abfe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac50:	2300      	movs	r3, #0
 800ac52:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ac54:	0731      	lsls	r1, r6, #28
 800ac56:	d50f      	bpl.n	800ac78 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ac58:	072a      	lsls	r2, r5, #28
 800ac5a:	d50d      	bpl.n	800ac78 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ac5c:	6823      	ldr	r3, [r4, #0]
 800ac5e:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800ac62:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ac64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac66:	2204      	movs	r2, #4
 800ac68:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac6a:	69db      	ldr	r3, [r3, #28]
 800ac6c:	079b      	lsls	r3, r3, #30
 800ac6e:	d05c      	beq.n	800ad2a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800ac70:	f7ff ffc5 	bl	800abfe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac74:	2300      	movs	r3, #0
 800ac76:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ac78:	06f1      	lsls	r1, r6, #27
 800ac7a:	d510      	bpl.n	800ac9e <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ac7c:	06ea      	lsls	r2, r5, #27
 800ac7e:	d50e      	bpl.n	800ac9e <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ac80:	6823      	ldr	r3, [r4, #0]
 800ac82:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800ac86:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ac88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac8a:	2208      	movs	r2, #8
 800ac8c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac8e:	69db      	ldr	r3, [r3, #28]
 800ac90:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800ac94:	d04f      	beq.n	800ad36 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800ac96:	f7ff ffb2 	bl	800abfe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ac9e:	07f3      	lsls	r3, r6, #31
 800aca0:	d508      	bpl.n	800acb4 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aca2:	07e8      	lsls	r0, r5, #31
 800aca4:	d506      	bpl.n	800acb4 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800acac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800acae:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800acb0:	f7f6 f980 	bl	8000fb4 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800acb4:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800acb8:	d008      	beq.n	800accc <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800acba:	0629      	lsls	r1, r5, #24
 800acbc:	d506      	bpl.n	800accc <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800acc4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800acc6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800acc8:	f000 f8c1 	bl	800ae4e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800accc:	05f2      	lsls	r2, r6, #23
 800acce:	d508      	bpl.n	800ace2 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800acd0:	062b      	lsls	r3, r5, #24
 800acd2:	d506      	bpl.n	800ace2 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800acd4:	6823      	ldr	r3, [r4, #0]
 800acd6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800acda:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800acdc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800acde:	f000 f8b7 	bl	800ae50 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ace2:	0670      	lsls	r0, r6, #25
 800ace4:	d508      	bpl.n	800acf8 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ace6:	0669      	lsls	r1, r5, #25
 800ace8:	d506      	bpl.n	800acf8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800acea:	6823      	ldr	r3, [r4, #0]
 800acec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800acf0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800acf2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800acf4:	f7ff ff85 	bl	800ac02 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800acf8:	06b2      	lsls	r2, r6, #26
 800acfa:	d522      	bpl.n	800ad42 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800acfc:	06ab      	lsls	r3, r5, #26
 800acfe:	d520      	bpl.n	800ad42 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800ad06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ad08:	611a      	str	r2, [r3, #16]
}
 800ad0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800ad0e:	f000 b89d 	b.w	800ae4c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad12:	f7ff ff73 	bl	800abfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad16:	4620      	mov	r0, r4
 800ad18:	f7ff ff72 	bl	800ac00 <HAL_TIM_PWM_PulseFinishedCallback>
 800ad1c:	e785      	b.n	800ac2a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad1e:	f7ff ff6d 	bl	800abfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad22:	4620      	mov	r0, r4
 800ad24:	f7ff ff6c 	bl	800ac00 <HAL_TIM_PWM_PulseFinishedCallback>
 800ad28:	e792      	b.n	800ac50 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad2a:	f7ff ff67 	bl	800abfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f7ff ff66 	bl	800ac00 <HAL_TIM_PWM_PulseFinishedCallback>
 800ad34:	e79e      	b.n	800ac74 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad36:	f7ff ff61 	bl	800abfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f7ff ff60 	bl	800ac00 <HAL_TIM_PWM_PulseFinishedCallback>
 800ad40:	e7ab      	b.n	800ac9a <HAL_TIM_IRQHandler+0x96>
}
 800ad42:	bd70      	pop	{r4, r5, r6, pc}

0800ad44 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad44:	4a27      	ldr	r2, [pc, #156]	@ (800ade4 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 800ad46:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad48:	4290      	cmp	r0, r2
 800ad4a:	d012      	beq.n	800ad72 <TIM_Base_SetConfig+0x2e>
 800ad4c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ad50:	d00f      	beq.n	800ad72 <TIM_Base_SetConfig+0x2e>
 800ad52:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ad56:	4290      	cmp	r0, r2
 800ad58:	d00b      	beq.n	800ad72 <TIM_Base_SetConfig+0x2e>
 800ad5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ad5e:	4290      	cmp	r0, r2
 800ad60:	d007      	beq.n	800ad72 <TIM_Base_SetConfig+0x2e>
 800ad62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ad66:	4290      	cmp	r0, r2
 800ad68:	d003      	beq.n	800ad72 <TIM_Base_SetConfig+0x2e>
 800ad6a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ad6e:	4290      	cmp	r0, r2
 800ad70:	d108      	bne.n	800ad84 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800ad76:	684a      	ldr	r2, [r1, #4]
 800ad78:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad7e:	68ca      	ldr	r2, [r1, #12]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	e00a      	b.n	800ad9a <TIM_Base_SetConfig+0x56>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad84:	4a18      	ldr	r2, [pc, #96]	@ (800ade8 <TIM_Base_SetConfig+0xa4>)
 800ad86:	4290      	cmp	r0, r2
 800ad88:	d0f7      	beq.n	800ad7a <TIM_Base_SetConfig+0x36>
 800ad8a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ad8e:	4290      	cmp	r0, r2
 800ad90:	d0f3      	beq.n	800ad7a <TIM_Base_SetConfig+0x36>
 800ad92:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ad96:	4290      	cmp	r0, r2
 800ad98:	d0ef      	beq.n	800ad7a <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad9a:	694a      	ldr	r2, [r1, #20]
 800ad9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ada0:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ada2:	688a      	ldr	r2, [r1, #8]
 800ada4:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ada6:	680a      	ldr	r2, [r1, #0]
 800ada8:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adaa:	4a0e      	ldr	r2, [pc, #56]	@ (800ade4 <TIM_Base_SetConfig+0xa0>)
 800adac:	4290      	cmp	r0, r2
 800adae:	d00f      	beq.n	800add0 <TIM_Base_SetConfig+0x8c>
 800adb0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800adb4:	4290      	cmp	r0, r2
 800adb6:	d00b      	beq.n	800add0 <TIM_Base_SetConfig+0x8c>
 800adb8:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800adbc:	4290      	cmp	r0, r2
 800adbe:	d007      	beq.n	800add0 <TIM_Base_SetConfig+0x8c>
 800adc0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800adc4:	4290      	cmp	r0, r2
 800adc6:	d003      	beq.n	800add0 <TIM_Base_SetConfig+0x8c>
 800adc8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800adcc:	4290      	cmp	r0, r2
 800adce:	d101      	bne.n	800add4 <TIM_Base_SetConfig+0x90>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800add0:	690a      	ldr	r2, [r1, #16]
 800add2:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800add4:	6802      	ldr	r2, [r0, #0]
 800add6:	f042 0204 	orr.w	r2, r2, #4
 800adda:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800addc:	2201      	movs	r2, #1
 800adde:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800ade0:	6003      	str	r3, [r0, #0]
}
 800ade2:	4770      	bx	lr
 800ade4:	40010000 	.word	0x40010000
 800ade8:	40014000 	.word	0x40014000

0800adec <HAL_TIM_Base_Init>:
{
 800adec:	b510      	push	{r4, lr}
  if (htim == NULL)
 800adee:	4604      	mov	r4, r0
 800adf0:	b350      	cbz	r0, 800ae48 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800adf2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800adf6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800adfa:	b91b      	cbnz	r3, 800ae04 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800adfc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800ae00:	f7ff fe83 	bl	800ab0a <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800ae04:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae06:	6820      	ldr	r0, [r4, #0]
 800ae08:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800ae0a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae0e:	f7ff ff99 	bl	800ad44 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae12:	2301      	movs	r3, #1
  return HAL_OK;
 800ae14:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae16:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae1a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800ae1e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800ae22:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800ae26:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800ae2a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae32:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800ae36:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800ae3a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800ae3e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800ae42:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800ae46:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ae48:	2001      	movs	r0, #1
 800ae4a:	e7fc      	b.n	800ae46 <HAL_TIM_Base_Init+0x5a>

0800ae4c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800ae4c:	4770      	bx	lr

0800ae4e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800ae4e:	4770      	bx	lr

0800ae50 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800ae50:	4770      	bx	lr

0800ae52 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800ae52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ae56:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800ae5a:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800ae5e:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800ae62:	ea43 0308 	orr.w	r3, r3, r8
 800ae66:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800ae6a:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ae6e:	6809      	ldr	r1, [r1, #0]
 800ae70:	b981      	cbnz	r1, 800ae94 <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ae72:	ea43 030e 	orr.w	r3, r3, lr
 800ae76:	6801      	ldr	r1, [r0, #0]
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	f36f 010e 	bfc	r1, #0, #15
 800ae7e:	ea43 030c 	orr.w	r3, r3, ip
 800ae82:	433b      	orrs	r3, r7
 800ae84:	4333      	orrs	r3, r6
 800ae86:	432b      	orrs	r3, r5
 800ae88:	4323      	orrs	r3, r4
 800ae8a:	430b      	orrs	r3, r1
 800ae8c:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800ae8e:	2000      	movs	r0, #0
 800ae90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ae94:	6801      	ldr	r1, [r0, #0]
 800ae96:	ea43 030e 	orr.w	r3, r3, lr
 800ae9a:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800ae9e:	430b      	orrs	r3, r1
 800aea0:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800aea2:	ea42 030c 	orr.w	r3, r2, ip
 800aea6:	6841      	ldr	r1, [r0, #4]
 800aea8:	433b      	orrs	r3, r7
 800aeaa:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800aeae:	4333      	orrs	r3, r6
 800aeb0:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800aeb4:	432b      	orrs	r3, r5
 800aeb6:	4323      	orrs	r3, r4
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	6043      	str	r3, [r0, #4]
 800aebc:	e7e7      	b.n	800ae8e <FMC_SDRAM_Init+0x3c>

0800aebe <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800aebe:	68cb      	ldr	r3, [r1, #12]
 800aec0:	f103 3cff 	add.w	ip, r3, #4294967295
 800aec4:	694b      	ldr	r3, [r1, #20]
{
 800aec6:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800aec8:	3b01      	subs	r3, #1
 800aeca:	684c      	ldr	r4, [r1, #4]
 800aecc:	688f      	ldr	r7, [r1, #8]
 800aece:	690e      	ldr	r6, [r1, #16]
 800aed0:	051b      	lsls	r3, r3, #20
 800aed2:	698d      	ldr	r5, [r1, #24]
 800aed4:	3c01      	subs	r4, #1
 800aed6:	3f01      	subs	r7, #1
 800aed8:	3e01      	subs	r6, #1
 800aeda:	3d01      	subs	r5, #1
 800aedc:	6809      	ldr	r1, [r1, #0]
 800aede:	0124      	lsls	r4, r4, #4
 800aee0:	023f      	lsls	r7, r7, #8
 800aee2:	3901      	subs	r1, #1
 800aee4:	0436      	lsls	r6, r6, #16
 800aee6:	062d      	lsls	r5, r5, #24
 800aee8:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800aeec:	b95a      	cbnz	r2, 800af06 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800aeee:	430b      	orrs	r3, r1
 800aef0:	6882      	ldr	r2, [r0, #8]
 800aef2:	4323      	orrs	r3, r4
 800aef4:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800aef8:	433b      	orrs	r3, r7
 800aefa:	4333      	orrs	r3, r6
 800aefc:	432b      	orrs	r3, r5
 800aefe:	4313      	orrs	r3, r2
 800af00:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800af02:	2000      	movs	r0, #0
 800af04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800af06:	6882      	ldr	r2, [r0, #8]
 800af08:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800af0c:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800af10:	4313      	orrs	r3, r2
 800af12:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800af14:	ea44 0307 	orr.w	r3, r4, r7
 800af18:	68c2      	ldr	r2, [r0, #12]
 800af1a:	430b      	orrs	r3, r1
 800af1c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800af20:	4333      	orrs	r3, r6
 800af22:	432b      	orrs	r3, r5
 800af24:	4313      	orrs	r3, r2
 800af26:	60c3      	str	r3, [r0, #12]
 800af28:	e7eb      	b.n	800af02 <FMC_SDRAM_Timing_Init+0x44>

0800af2a <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800af2a:	4603      	mov	r3, r0
 800af2c:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800af30:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800af34:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800af38:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800af3a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800af3e:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800af40:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800af42:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800af44:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800af46:	4770      	bx	lr

0800af48 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800af48:	b510      	push	{r4, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800af4a:	e9d1 3400 	ldrd	r3, r4, [r1]
 800af4e:	6902      	ldr	r2, [r0, #16]
 800af50:	4323      	orrs	r3, r4
 800af52:	68cc      	ldr	r4, [r1, #12]
 800af54:	f36f 0215 	bfc	r2, #0, #22
 800af58:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800af5c:	4313      	orrs	r3, r2
 800af5e:	688a      	ldr	r2, [r1, #8]
 800af60:	3a01      	subs	r2, #1
 800af62:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800af66:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800af68:	2000      	movs	r0, #0
 800af6a:	bd10      	pop	{r4, pc}

0800af6c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800af6c:	6943      	ldr	r3, [r0, #20]
 800af6e:	f36f 034d 	bfc	r3, #1, #13
 800af72:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800af76:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800af78:	2000      	movs	r0, #0
 800af7a:	4770      	bx	lr

0800af7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800af7c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800af7e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800af82:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800af84:	f001 fede 	bl	800cd44 <xTaskGetSchedulerState>
 800af88:	2801      	cmp	r0, #1
 800af8a:	d003      	beq.n	800af94 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800af8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800af90:	f000 bc48 	b.w	800b824 <xPortSysTickHandler>
}
 800af94:	bd08      	pop	{r3, pc}
	...

0800af98 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af98:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800af9c:	b92b      	cbnz	r3, 800afaa <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800af9e:	4b06      	ldr	r3, [pc, #24]	@ (800afb8 <osKernelInitialize+0x20>)
 800afa0:	6818      	ldr	r0, [r3, #0]
 800afa2:	b928      	cbnz	r0, 800afb0 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800afa4:	2201      	movs	r2, #1
 800afa6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800afa8:	4770      	bx	lr
    stat = osErrorISR;
 800afaa:	f06f 0005 	mvn.w	r0, #5
 800afae:	4770      	bx	lr
    } else {
      stat = osError;
 800afb0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	2400c3e0 	.word	0x2400c3e0

0800afbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800afbc:	b510      	push	{r4, lr}
 800afbe:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800afc2:	b95c      	cbnz	r4, 800afdc <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800afc4:	4b08      	ldr	r3, [pc, #32]	@ (800afe8 <osKernelStart+0x2c>)
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	2a01      	cmp	r2, #1
 800afca:	d10a      	bne.n	800afe2 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afcc:	4a07      	ldr	r2, [pc, #28]	@ (800afec <osKernelStart+0x30>)
 800afce:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800afd0:	2202      	movs	r2, #2
 800afd2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800afd4:	f001 fd56 	bl	800ca84 <vTaskStartScheduler>
      stat = osOK;
 800afd8:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800afda:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800afdc:	f06f 0005 	mvn.w	r0, #5
 800afe0:	e7fb      	b.n	800afda <osKernelStart+0x1e>
      stat = osError;
 800afe2:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800afe6:	e7f8      	b.n	800afda <osKernelStart+0x1e>
 800afe8:	2400c3e0 	.word	0x2400c3e0
 800afec:	e000ed00 	.word	0xe000ed00

0800aff0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aff2:	4614      	mov	r4, r2
 800aff4:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aff6:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aff8:	460b      	mov	r3, r1
  hTask = NULL;
 800affa:	9205      	str	r2, [sp, #20]
 800affc:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800b000:	b9fa      	cbnz	r2, 800b042 <osThreadNew+0x52>
 800b002:	b1f0      	cbz	r0, 800b042 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800b004:	b354      	cbz	r4, 800b05c <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800b006:	69a5      	ldr	r5, [r4, #24]
 800b008:	b125      	cbz	r5, 800b014 <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b00a:	1e69      	subs	r1, r5, #1
 800b00c:	2937      	cmp	r1, #55	@ 0x37
 800b00e:	d902      	bls.n	800b016 <osThreadNew+0x26>
        return (NULL);
 800b010:	2000      	movs	r0, #0
 800b012:	e017      	b.n	800b044 <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 800b014:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b016:	6862      	ldr	r2, [r4, #4]
 800b018:	07d2      	lsls	r2, r2, #31
 800b01a:	d4f9      	bmi.n	800b010 <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 800b01c:	6966      	ldr	r6, [r4, #20]
 800b01e:	b19e      	cbz	r6, 800b048 <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b020:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800b022:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b024:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
 800b028:	b187      	cbz	r7, 800b04c <osThreadNew+0x5c>
 800b02a:	f1bc 0f5f 	cmp.w	ip, #95	@ 0x5f
 800b02e:	d908      	bls.n	800b042 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b030:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b032:	b134      	cbz	r4, 800b042 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b034:	b12e      	cbz	r6, 800b042 <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b036:	9500      	str	r5, [sp, #0]
 800b038:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800b03c:	f001 fb87 	bl	800c74e <xTaskCreateStatic>
 800b040:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b042:	9805      	ldr	r0, [sp, #20]
}
 800b044:	b007      	add	sp, #28
 800b046:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800b048:	2280      	movs	r2, #128	@ 0x80
 800b04a:	e7ea      	b.n	800b022 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b04c:	f1bc 0f00 	cmp.w	ip, #0
 800b050:	d1f7      	bne.n	800b042 <osThreadNew+0x52>
 800b052:	6924      	ldr	r4, [r4, #16]
 800b054:	2c00      	cmp	r4, #0
 800b056:	d1f4      	bne.n	800b042 <osThreadNew+0x52>
 800b058:	460c      	mov	r4, r1
 800b05a:	e001      	b.n	800b060 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 800b05c:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 800b05e:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b060:	a905      	add	r1, sp, #20
 800b062:	b292      	uxth	r2, r2
 800b064:	e9cd 5100 	strd	r5, r1, [sp]
 800b068:	4621      	mov	r1, r4
 800b06a:	f001 fba8 	bl	800c7be <xTaskCreate>
 800b06e:	2801      	cmp	r0, #1
            hTask = NULL;
 800b070:	bf1c      	itt	ne
 800b072:	2300      	movne	r3, #0
 800b074:	9305      	strne	r3, [sp, #20]
 800b076:	e7e4      	b.n	800b042 <osThreadNew+0x52>

0800b078 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b07a:	4605      	mov	r5, r0
 800b07c:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800b080:	b117      	cbz	r7, 800b088 <osMutexNew+0x10>
  hMutex = NULL;
 800b082:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800b084:	4620      	mov	r0, r4
 800b086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (attr != NULL) {
 800b088:	b320      	cbz	r0, 800b0d4 <osMutexNew+0x5c>
      type = attr->attr_bits;
 800b08a:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800b08c:	0733      	lsls	r3, r6, #28
 800b08e:	d4f8      	bmi.n	800b082 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b090:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b094:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 800b098:	b199      	cbz	r1, 800b0c2 <osMutexNew+0x4a>
 800b09a:	2b4f      	cmp	r3, #79	@ 0x4f
 800b09c:	d9f1      	bls.n	800b082 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800b09e:	b1be      	cbz	r6, 800b0d0 <osMutexNew+0x58>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b0a0:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b0a2:	f000 fec6 	bl	800be32 <xQueueCreateMutexStatic>
 800b0a6:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	d0ea      	beq.n	800b082 <osMutexNew+0xa>
          name = attr->name;
 800b0ac:	682d      	ldr	r5, [r5, #0]
 800b0ae:	4637      	mov	r7, r6
        vQueueAddToRegistry (hMutex, name);
 800b0b0:	4629      	mov	r1, r5
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f001 f986 	bl	800c3c4 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b0b8:	2f00      	cmp	r7, #0
 800b0ba:	d0e3      	beq.n	800b084 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b0bc:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800b0c0:	e7e0      	b.n	800b084 <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d1dd      	bne.n	800b082 <osMutexNew+0xa>
            if (rmtx != 0U) {
 800b0c6:	b12e      	cbz	r6, 800b0d4 <osMutexNew+0x5c>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b0c8:	2004      	movs	r0, #4
 800b0ca:	f000 fee6 	bl	800be9a <xQueueCreateMutex>
 800b0ce:	e7ea      	b.n	800b0a6 <osMutexNew+0x2e>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b0d0:	2001      	movs	r0, #1
 800b0d2:	e7e6      	b.n	800b0a2 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
 800b0d4:	2001      	movs	r0, #1
 800b0d6:	f000 fee0 	bl	800be9a <xQueueCreateMutex>
      if (hMutex != NULL) {
 800b0da:	4604      	mov	r4, r0
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	d0d0      	beq.n	800b082 <osMutexNew+0xa>
        if (attr != NULL) {
 800b0e0:	2d00      	cmp	r5, #0
 800b0e2:	d0e5      	beq.n	800b0b0 <osMutexNew+0x38>
 800b0e4:	2600      	movs	r6, #0
 800b0e6:	e7e1      	b.n	800b0ac <osMutexNew+0x34>

0800b0e8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b0e8:	b538      	push	{r3, r4, r5, lr}
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b0ee:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800b0f2:	f003 0201 	and.w	r2, r3, #1
 800b0f6:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800b0fa:	b995      	cbnz	r5, 800b122 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d913      	bls.n	800b128 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800b100:	b162      	cbz	r2, 800b11c <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b102:	f001 f8f0 	bl	800c2e6 <xQueueTakeMutexRecursive>
 800b106:	2801      	cmp	r0, #1
 800b108:	d101      	bne.n	800b10e <osMutexAcquire+0x26>
  stat = osOK;
 800b10a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800b10c:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800b10e:	2c00      	cmp	r4, #0
 800b110:	bf14      	ite	ne
 800b112:	f06f 0001 	mvnne.w	r0, #1
 800b116:	f06f 0002 	mvneq.w	r0, #2
 800b11a:	e7f7      	b.n	800b10c <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b11c:	f001 f826 	bl	800c16c <xQueueSemaphoreTake>
 800b120:	e7f1      	b.n	800b106 <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800b122:	f06f 0005 	mvn.w	r0, #5
 800b126:	e7f1      	b.n	800b10c <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800b128:	f06f 0003 	mvn.w	r0, #3
 800b12c:	e7ee      	b.n	800b10c <osMutexAcquire+0x24>

0800b12e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b12e:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b130:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b134:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800b136:	f002 0301 	and.w	r3, r2, #1
 800b13a:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800b13e:	b979      	cbnz	r1, 800b160 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800b140:	2a01      	cmp	r2, #1
 800b142:	d910      	bls.n	800b166 <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800b144:	b13b      	cbz	r3, 800b156 <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b146:	f000 fe89 	bl	800be5c <xQueueGiveMutexRecursive>
 800b14a:	2801      	cmp	r0, #1
  stat = osOK;
 800b14c:	bf0c      	ite	eq
 800b14e:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800b150:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b154:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b156:	461a      	mov	r2, r3
 800b158:	4619      	mov	r1, r3
 800b15a:	f000 fdb8 	bl	800bcce <xQueueGenericSend>
 800b15e:	e7f4      	b.n	800b14a <osMutexRelease+0x1c>
    stat = osErrorISR;
 800b160:	f06f 0005 	mvn.w	r0, #5
 800b164:	e7f6      	b.n	800b154 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800b166:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b16a:	e7f3      	b.n	800b154 <osMutexRelease+0x26>

0800b16c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b16c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b16e:	4604      	mov	r4, r0
 800b170:	460e      	mov	r6, r1
 800b172:	4615      	mov	r5, r2
 800b174:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b178:	b942      	cbnz	r2, 800b18c <osSemaphoreNew+0x20>
 800b17a:	b138      	cbz	r0, 800b18c <osSemaphoreNew+0x20>
 800b17c:	4288      	cmp	r0, r1
 800b17e:	d305      	bcc.n	800b18c <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800b180:	b155      	cbz	r5, 800b198 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b182:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800b186:	b12b      	cbz	r3, 800b194 <osSemaphoreNew+0x28>
 800b188:	2f4f      	cmp	r7, #79	@ 0x4f
 800b18a:	d822      	bhi.n	800b1d2 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800b18c:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800b18e:	4620      	mov	r0, r4
 800b190:	b003      	add	sp, #12
 800b192:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b194:	2f00      	cmp	r7, #0
 800b196:	d1f9      	bne.n	800b18c <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800b198:	2c01      	cmp	r4, #1
 800b19a:	d00c      	beq.n	800b1b6 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b19c:	4620      	mov	r0, r4
 800b19e:	4631      	mov	r1, r6
 800b1a0:	f000 fd77 	bl	800bc92 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d0f0      	beq.n	800b18c <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800b1aa:	b985      	cbnz	r5, 800b1ce <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800b1ac:	4629      	mov	r1, r5
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f001 f908 	bl	800c3c4 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800b1b4:	e7eb      	b.n	800b18e <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800b1b6:	2203      	movs	r2, #3
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	2001      	movs	r0, #1
 800b1bc:	f000 fd20 	bl	800bc00 <xQueueGenericCreate>
 800b1c0:	e00e      	b.n	800b1e0 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	f000 fd43 	bl	800bc4e <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d0de      	beq.n	800b18c <osSemaphoreNew+0x20>
          name = attr->name;
 800b1ce:	682d      	ldr	r5, [r5, #0]
 800b1d0:	e7ec      	b.n	800b1ac <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800b1d2:	2801      	cmp	r0, #1
 800b1d4:	d1f5      	bne.n	800b1c2 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b1d6:	2103      	movs	r1, #3
 800b1d8:	9100      	str	r1, [sp, #0]
 800b1da:	4611      	mov	r1, r2
 800b1dc:	f000 fcc2 	bl	800bb64 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800b1e0:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	d0d2      	beq.n	800b18c <osSemaphoreNew+0x20>
 800b1e6:	2e00      	cmp	r6, #0
 800b1e8:	d0df      	beq.n	800b1aa <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	f000 fd6d 	bl	800bcce <xQueueGenericSend>
 800b1f4:	2801      	cmp	r0, #1
 800b1f6:	d0d8      	beq.n	800b1aa <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f001 f90d 	bl	800c418 <vQueueDelete>
      if (hSemaphore != NULL) {
 800b1fe:	e7c5      	b.n	800b18c <osSemaphoreNew+0x20>

0800b200 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b200:	b513      	push	{r0, r1, r4, lr}
 800b202:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b204:	b328      	cbz	r0, 800b252 <osSemaphoreAcquire+0x52>
 800b206:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b20a:	b1cb      	cbz	r3, 800b240 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800b20c:	bb09      	cbnz	r1, 800b252 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b20e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b210:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b212:	f001 f889 	bl	800c328 <xQueueReceiveFromISR>
 800b216:	2801      	cmp	r0, #1
 800b218:	d003      	beq.n	800b222 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800b21a:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b21e:	b002      	add	sp, #8
 800b220:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800b222:	9b01      	ldr	r3, [sp, #4]
 800b224:	b90b      	cbnz	r3, 800b22a <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800b226:	2000      	movs	r0, #0
 800b228:	e7f9      	b.n	800b21e <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800b22a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b22e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b232:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	e7f2      	b.n	800b226 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b240:	f000 ff94 	bl	800c16c <xQueueSemaphoreTake>
 800b244:	2801      	cmp	r0, #1
 800b246:	d0ee      	beq.n	800b226 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800b248:	2c00      	cmp	r4, #0
 800b24a:	d0e6      	beq.n	800b21a <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800b24c:	f06f 0001 	mvn.w	r0, #1
 800b250:	e7e5      	b.n	800b21e <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800b252:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b256:	e7e2      	b.n	800b21e <osSemaphoreAcquire+0x1e>

0800b258 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b258:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b25a:	b318      	cbz	r0, 800b2a4 <osSemaphoreRelease+0x4c>
 800b25c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b260:	b1cb      	cbz	r3, 800b296 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800b262:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b264:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800b266:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b268:	f000 fe91 	bl	800bf8e <xQueueGiveFromISR>
 800b26c:	2801      	cmp	r0, #1
 800b26e:	d004      	beq.n	800b27a <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800b270:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800b274:	b003      	add	sp, #12
 800b276:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800b27a:	9b01      	ldr	r3, [sp, #4]
 800b27c:	b14b      	cbz	r3, 800b292 <osSemaphoreRelease+0x3a>
 800b27e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b286:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800b292:	2000      	movs	r0, #0
 800b294:	e7ee      	b.n	800b274 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b296:	461a      	mov	r2, r3
 800b298:	4619      	mov	r1, r3
 800b29a:	f000 fd18 	bl	800bcce <xQueueGenericSend>
 800b29e:	2801      	cmp	r0, #1
 800b2a0:	d0f7      	beq.n	800b292 <osSemaphoreRelease+0x3a>
 800b2a2:	e7e5      	b.n	800b270 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800b2a4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b2a8:	e7e4      	b.n	800b274 <osSemaphoreRelease+0x1c>

0800b2aa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b2aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2ac:	4605      	mov	r5, r0
 800b2ae:	460e      	mov	r6, r1
 800b2b0:	4614      	mov	r4, r2
 800b2b2:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b2b6:	b11f      	cbz	r7, 800b2c0 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800b2b8:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	b003      	add	sp, #12
 800b2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d0f9      	beq.n	800b2b8 <osMessageQueueNew+0xe>
 800b2c4:	2900      	cmp	r1, #0
 800b2c6:	d0f7      	beq.n	800b2b8 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800b2c8:	b1da      	cbz	r2, 800b302 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b2ca:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800b2ce:	b183      	cbz	r3, 800b2f2 <osMessageQueueNew+0x48>
 800b2d0:	2a4f      	cmp	r2, #79	@ 0x4f
 800b2d2:	d9f1      	bls.n	800b2b8 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b2d4:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b2d6:	2a00      	cmp	r2, #0
 800b2d8:	d0ee      	beq.n	800b2b8 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b2da:	434d      	muls	r5, r1
 800b2dc:	6966      	ldr	r6, [r4, #20]
 800b2de:	42ae      	cmp	r6, r5
 800b2e0:	d3ea      	bcc.n	800b2b8 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b2e2:	9700      	str	r7, [sp, #0]
 800b2e4:	f000 fc3e 	bl	800bb64 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d0e4      	beq.n	800b2b8 <osMessageQueueNew+0xe>
        name = attr->name;
 800b2ee:	6824      	ldr	r4, [r4, #0]
 800b2f0:	e011      	b.n	800b316 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b2f2:	2a00      	cmp	r2, #0
 800b2f4:	d1e0      	bne.n	800b2b8 <osMessageQueueNew+0xe>
 800b2f6:	6923      	ldr	r3, [r4, #16]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1dd      	bne.n	800b2b8 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b2fc:	6963      	ldr	r3, [r4, #20]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1da      	bne.n	800b2b8 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800b302:	4628      	mov	r0, r5
 800b304:	2200      	movs	r2, #0
 800b306:	4631      	mov	r1, r6
 800b308:	f000 fc7a 	bl	800bc00 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800b30c:	4605      	mov	r5, r0
 800b30e:	2800      	cmp	r0, #0
 800b310:	d0d2      	beq.n	800b2b8 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800b312:	2c00      	cmp	r4, #0
 800b314:	d1eb      	bne.n	800b2ee <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800b316:	4621      	mov	r1, r4
 800b318:	4628      	mov	r0, r5
 800b31a:	f001 f853 	bl	800c3c4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800b31e:	e7cc      	b.n	800b2ba <osMessageQueueNew+0x10>

0800b320 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b320:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b322:	461c      	mov	r4, r3
 800b324:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b328:	b1de      	cbz	r6, 800b362 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b32a:	b338      	cbz	r0, 800b37c <osMessageQueuePut+0x5c>
 800b32c:	b331      	cbz	r1, 800b37c <osMessageQueuePut+0x5c>
 800b32e:	bb2b      	cbnz	r3, 800b37c <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b330:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b332:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b334:	f000 fdce 	bl	800bed4 <xQueueGenericSendFromISR>
 800b338:	2801      	cmp	r0, #1
 800b33a:	d003      	beq.n	800b344 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800b33c:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b340:	b002      	add	sp, #8
 800b342:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800b344:	9b01      	ldr	r3, [sp, #4]
 800b346:	b90b      	cbnz	r3, 800b34c <osMessageQueuePut+0x2c>
  stat = osOK;
 800b348:	2000      	movs	r0, #0
 800b34a:	e7f9      	b.n	800b340 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800b34c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b350:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b354:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	e7f2      	b.n	800b348 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b362:	b158      	cbz	r0, 800b37c <osMessageQueuePut+0x5c>
 800b364:	b151      	cbz	r1, 800b37c <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b366:	4633      	mov	r3, r6
 800b368:	4622      	mov	r2, r4
 800b36a:	f000 fcb0 	bl	800bcce <xQueueGenericSend>
 800b36e:	2801      	cmp	r0, #1
 800b370:	d0ea      	beq.n	800b348 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800b372:	2c00      	cmp	r4, #0
 800b374:	d0e2      	beq.n	800b33c <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800b376:	f06f 0001 	mvn.w	r0, #1
 800b37a:	e7e1      	b.n	800b340 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800b37c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b380:	e7de      	b.n	800b340 <osMessageQueuePut+0x20>

0800b382 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b382:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b384:	461c      	mov	r4, r3
 800b386:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b38a:	b1db      	cbz	r3, 800b3c4 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b38c:	b330      	cbz	r0, 800b3dc <osMessageQueueGet+0x5a>
 800b38e:	b329      	cbz	r1, 800b3dc <osMessageQueueGet+0x5a>
 800b390:	bb24      	cbnz	r4, 800b3dc <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b392:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b394:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b396:	f000 ffc7 	bl	800c328 <xQueueReceiveFromISR>
 800b39a:	2801      	cmp	r0, #1
 800b39c:	d003      	beq.n	800b3a6 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800b39e:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b3a2:	b003      	add	sp, #12
 800b3a4:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800b3a6:	9b01      	ldr	r3, [sp, #4]
 800b3a8:	b90b      	cbnz	r3, 800b3ae <osMessageQueueGet+0x2c>
  stat = osOK;
 800b3aa:	2000      	movs	r0, #0
 800b3ac:	e7f9      	b.n	800b3a2 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800b3ae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b3b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	f3bf 8f6f 	isb	sy
 800b3c2:	e7f2      	b.n	800b3aa <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b3c4:	b150      	cbz	r0, 800b3dc <osMessageQueueGet+0x5a>
 800b3c6:	b149      	cbz	r1, 800b3dc <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b3c8:	4622      	mov	r2, r4
 800b3ca:	f000 fe31 	bl	800c030 <xQueueReceive>
 800b3ce:	2801      	cmp	r0, #1
 800b3d0:	d0eb      	beq.n	800b3aa <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800b3d2:	2c00      	cmp	r4, #0
 800b3d4:	d0e3      	beq.n	800b39e <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800b3d6:	f06f 0001 	mvn.w	r0, #1
 800b3da:	e7e2      	b.n	800b3a2 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800b3dc:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b3e0:	e7df      	b.n	800b3a2 <osMessageQueueGet+0x20>
	...

0800b3e4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b3e4:	4b03      	ldr	r3, [pc, #12]	@ (800b3f4 <vApplicationGetIdleTaskMemory+0x10>)
 800b3e6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b3e8:	4b03      	ldr	r3, [pc, #12]	@ (800b3f8 <vApplicationGetIdleTaskMemory+0x14>)
 800b3ea:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b3ec:	2380      	movs	r3, #128	@ 0x80
 800b3ee:	6013      	str	r3, [r2, #0]
}
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	2400c380 	.word	0x2400c380
 800b3f8:	2400c180 	.word	0x2400c180

0800b3fc <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b3fc:	4b03      	ldr	r3, [pc, #12]	@ (800b40c <vApplicationGetTimerTaskMemory+0x10>)
 800b3fe:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b400:	4b03      	ldr	r3, [pc, #12]	@ (800b410 <vApplicationGetTimerTaskMemory+0x14>)
 800b402:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b404:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b408:	6013      	str	r3, [r2, #0]
}
 800b40a:	4770      	bx	lr
 800b40c:	2400c120 	.word	0x2400c120
 800b410:	2400bd20 	.word	0x2400bd20

0800b414 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b414:	4b10      	ldr	r3, [pc, #64]	@ (800b458 <prvInsertBlockIntoFreeList+0x44>)
{
 800b416:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b418:	461a      	mov	r2, r3
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4283      	cmp	r3, r0
 800b41e:	d3fb      	bcc.n	800b418 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b420:	6854      	ldr	r4, [r2, #4]
 800b422:	1911      	adds	r1, r2, r4
 800b424:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b426:	bf01      	itttt	eq
 800b428:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 800b42a:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b42c:	1909      	addeq	r1, r1, r4
 800b42e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b430:	6844      	ldr	r4, [r0, #4]
 800b432:	1901      	adds	r1, r0, r4
 800b434:	428b      	cmp	r3, r1
 800b436:	d10c      	bne.n	800b452 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b438:	4908      	ldr	r1, [pc, #32]	@ (800b45c <prvInsertBlockIntoFreeList+0x48>)
 800b43a:	6809      	ldr	r1, [r1, #0]
 800b43c:	428b      	cmp	r3, r1
 800b43e:	d003      	beq.n	800b448 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b440:	6859      	ldr	r1, [r3, #4]
 800b442:	4421      	add	r1, r4
 800b444:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b446:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b448:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b44a:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b44c:	bf18      	it	ne
 800b44e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b450:	bd10      	pop	{r4, pc}
 800b452:	4619      	mov	r1, r3
 800b454:	e7f8      	b.n	800b448 <prvInsertBlockIntoFreeList+0x34>
 800b456:	bf00      	nop
 800b458:	2400c3fc 	.word	0x2400c3fc
 800b45c:	2400c3f8 	.word	0x2400c3f8

0800b460 <pvPortMalloc>:
{
 800b460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b464:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b466:	f001 f9d9 	bl	800c81c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b46a:	4940      	ldr	r1, [pc, #256]	@ (800b56c <pvPortMalloc+0x10c>)
 800b46c:	4d40      	ldr	r5, [pc, #256]	@ (800b570 <pvPortMalloc+0x110>)
 800b46e:	680b      	ldr	r3, [r1, #0]
 800b470:	b9f3      	cbnz	r3, 800b4b0 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800b472:	4a40      	ldr	r2, [pc, #256]	@ (800b574 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800b474:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b476:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b478:	4e3f      	ldr	r6, [pc, #252]	@ (800b578 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b47a:	bf1b      	ittet	ne
 800b47c:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b47e:	4b3f      	ldrne	r3, [pc, #252]	@ (800b57c <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b480:	4b3f      	ldreq	r3, [pc, #252]	@ (800b580 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b482:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800b486:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b488:	bf18      	it	ne
 800b48a:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b48c:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b48e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800b490:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b492:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800b496:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b49a:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800b49c:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b49e:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4a2:	4b38      	ldr	r3, [pc, #224]	@ (800b584 <pvPortMalloc+0x124>)
 800b4a4:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4a6:	4b38      	ldr	r3, [pc, #224]	@ (800b588 <pvPortMalloc+0x128>)
 800b4a8:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b4aa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b4ae:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4b0:	682e      	ldr	r6, [r5, #0]
 800b4b2:	4226      	tst	r6, r4
 800b4b4:	d155      	bne.n	800b562 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800b4b6:	2c00      	cmp	r4, #0
 800b4b8:	d046      	beq.n	800b548 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800b4ba:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b4be:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b4c0:	bf1c      	itt	ne
 800b4c2:	f023 0307 	bicne.w	r3, r3, #7
 800b4c6:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d04a      	beq.n	800b562 <pvPortMalloc+0x102>
 800b4cc:	4f2e      	ldr	r7, [pc, #184]	@ (800b588 <pvPortMalloc+0x128>)
 800b4ce:	683c      	ldr	r4, [r7, #0]
 800b4d0:	429c      	cmp	r4, r3
 800b4d2:	d346      	bcc.n	800b562 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800b4d4:	4a28      	ldr	r2, [pc, #160]	@ (800b578 <pvPortMalloc+0x118>)
 800b4d6:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4d8:	6868      	ldr	r0, [r5, #4]
 800b4da:	4298      	cmp	r0, r3
 800b4dc:	d204      	bcs.n	800b4e8 <pvPortMalloc+0x88>
 800b4de:	f8d5 c000 	ldr.w	ip, [r5]
 800b4e2:	f1bc 0f00 	cmp.w	ip, #0
 800b4e6:	d115      	bne.n	800b514 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800b4e8:	6809      	ldr	r1, [r1, #0]
 800b4ea:	42a9      	cmp	r1, r5
 800b4ec:	d039      	beq.n	800b562 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4ee:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4f0:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4f4:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4f6:	1ac2      	subs	r2, r0, r3
 800b4f8:	2a10      	cmp	r2, #16
 800b4fa:	d912      	bls.n	800b522 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b4fc:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4fe:	0741      	lsls	r1, r0, #29
 800b500:	d00b      	beq.n	800b51a <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	e7fe      	b.n	800b512 <pvPortMalloc+0xb2>
					pxPreviousBlock = pxBlock;
 800b514:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800b516:	4665      	mov	r5, ip
 800b518:	e7de      	b.n	800b4d8 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b51a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b51c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b51e:	f7ff ff79 	bl	800b414 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b522:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b524:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b526:	4917      	ldr	r1, [pc, #92]	@ (800b584 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b528:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b52a:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b52c:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800b52e:	4a17      	ldr	r2, [pc, #92]	@ (800b58c <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b530:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800b532:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800b534:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b536:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800b538:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b53c:	bf38      	it	cc
 800b53e:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b540:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b544:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800b546:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800b548:	f001 fa0c 	bl	800c964 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b54c:	0763      	lsls	r3, r4, #29
 800b54e:	d00a      	beq.n	800b566 <pvPortMalloc+0x106>
 800b550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b554:	f383 8811 	msr	BASEPRI, r3
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	e7fe      	b.n	800b560 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800b562:	2400      	movs	r4, #0
 800b564:	e7f0      	b.n	800b548 <pvPortMalloc+0xe8>
}
 800b566:	4620      	mov	r0, r4
 800b568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b56c:	2400c3f8 	.word	0x2400c3f8
 800b570:	2400c3e4 	.word	0x2400c3e4
 800b574:	2400c404 	.word	0x2400c404
 800b578:	2400c3fc 	.word	0x2400c3fc
 800b57c:	24024aa4 	.word	0x24024aa4
 800b580:	000186a0 	.word	0x000186a0
 800b584:	2400c3f0 	.word	0x2400c3f0
 800b588:	2400c3f4 	.word	0x2400c3f4
 800b58c:	2400c3ec 	.word	0x2400c3ec

0800b590 <vPortFree>:
{
 800b590:	b510      	push	{r4, lr}
	if( pv != NULL )
 800b592:	4604      	mov	r4, r0
 800b594:	b390      	cbz	r0, 800b5fc <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b596:	4a1a      	ldr	r2, [pc, #104]	@ (800b600 <vPortFree+0x70>)
 800b598:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b59c:	6812      	ldr	r2, [r2, #0]
 800b59e:	4213      	tst	r3, r2
 800b5a0:	d108      	bne.n	800b5b4 <vPortFree+0x24>
 800b5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	e7fe      	b.n	800b5b2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b5b4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b5b8:	b141      	cbz	r1, 800b5cc <vPortFree+0x3c>
 800b5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	e7fe      	b.n	800b5ca <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b5cc:	ea23 0302 	bic.w	r3, r3, r2
 800b5d0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b5d4:	f001 f922 	bl	800c81c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b5d8:	4a0a      	ldr	r2, [pc, #40]	@ (800b604 <vPortFree+0x74>)
 800b5da:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b5de:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b5e2:	6811      	ldr	r1, [r2, #0]
 800b5e4:	440b      	add	r3, r1
 800b5e6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b5e8:	f7ff ff14 	bl	800b414 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b5ec:	4a06      	ldr	r2, [pc, #24]	@ (800b608 <vPortFree+0x78>)
 800b5ee:	6813      	ldr	r3, [r2, #0]
 800b5f0:	3301      	adds	r3, #1
}
 800b5f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800b5f6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800b5f8:	f001 b9b4 	b.w	800c964 <xTaskResumeAll>
}
 800b5fc:	bd10      	pop	{r4, pc}
 800b5fe:	bf00      	nop
 800b600:	2400c3e4 	.word	0x2400c3e4
 800b604:	2400c3f4 	.word	0x2400c3f4
 800b608:	2400c3e8 	.word	0x2400c3e8

0800b60c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b60c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b610:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b614:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b616:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b618:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b61c:	2300      	movs	r3, #0
 800b61e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b620:	4770      	bx	lr

0800b622 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b622:	2300      	movs	r3, #0
 800b624:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b626:	4770      	bx	lr

0800b628 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800b628:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b62a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800b62c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b62e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b630:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b632:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b634:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b636:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b638:	3301      	adds	r3, #1
 800b63a:	6003      	str	r3, [r0, #0]
}
 800b63c:	4770      	bx	lr

0800b63e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b63e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b640:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b642:	1c63      	adds	r3, r4, #1
 800b644:	d10a      	bne.n	800b65c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b646:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b648:	685a      	ldr	r2, [r3, #4]
 800b64a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b64c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b64e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800b650:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b652:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b654:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b656:	3301      	adds	r3, #1
 800b658:	6003      	str	r3, [r0, #0]
}
 800b65a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b65c:	f100 0208 	add.w	r2, r0, #8
 800b660:	4613      	mov	r3, r2
 800b662:	6852      	ldr	r2, [r2, #4]
 800b664:	6815      	ldr	r5, [r2, #0]
 800b666:	42a5      	cmp	r5, r4
 800b668:	d9fa      	bls.n	800b660 <vListInsert+0x22>
 800b66a:	e7ed      	b.n	800b648 <vListInsert+0xa>

0800b66c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b66c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b66e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800b672:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b674:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b676:	6859      	ldr	r1, [r3, #4]
 800b678:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b67a:	bf08      	it	eq
 800b67c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b67e:	2200      	movs	r2, #0
 800b680:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	3a01      	subs	r2, #1
 800b686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b688:	6818      	ldr	r0, [r3, #0]
}
 800b68a:	4770      	bx	lr

0800b68c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b68c:	4808      	ldr	r0, [pc, #32]	@ (800b6b0 <prvPortStartFirstTask+0x24>)
 800b68e:	6800      	ldr	r0, [r0, #0]
 800b690:	6800      	ldr	r0, [r0, #0]
 800b692:	f380 8808 	msr	MSP, r0
 800b696:	f04f 0000 	mov.w	r0, #0
 800b69a:	f380 8814 	msr	CONTROL, r0
 800b69e:	b662      	cpsie	i
 800b6a0:	b661      	cpsie	f
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	df00      	svc	0
 800b6ac:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b6ae:	0000      	.short	0x0000
 800b6b0:	e000ed08 	.word	0xe000ed08

0800b6b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b6c4 <vPortEnableVFP+0x10>
 800b6b8:	6801      	ldr	r1, [r0, #0]
 800b6ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b6be:	6001      	str	r1, [r0, #0]
 800b6c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6c2:	0000      	.short	0x0000
 800b6c4:	e000ed88 	.word	0xe000ed88

0800b6c8 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800b6c8:	2300      	movs	r3, #0
{
 800b6ca:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b6cc:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800b6ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b704 <prvTaskExitError+0x3c>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	d008      	beq.n	800b6e8 <prvTaskExitError+0x20>
 800b6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6da:	f383 8811 	msr	BASEPRI, r3
 800b6de:	f3bf 8f6f 	isb	sy
 800b6e2:	f3bf 8f4f 	dsb	sy
 800b6e6:	e7fe      	b.n	800b6e6 <prvTaskExitError+0x1e>
 800b6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800b6f8:	9b01      	ldr	r3, [sp, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0fc      	beq.n	800b6f8 <prvTaskExitError+0x30>
}
 800b6fe:	b002      	add	sp, #8
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	24000078 	.word	0x24000078

0800b708 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b708:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b70c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b710:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800b714:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b716:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b718:	4b03      	ldr	r3, [pc, #12]	@ (800b728 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b71a:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b71c:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b71e:	f06f 0302 	mvn.w	r3, #2
 800b722:	6203      	str	r3, [r0, #32]
}
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	0800b6c9 	.word	0x0800b6c9
 800b72c:	00000000 	.word	0x00000000

0800b730 <SVC_Handler>:
	__asm volatile (
 800b730:	4b07      	ldr	r3, [pc, #28]	@ (800b750 <pxCurrentTCBConst2>)
 800b732:	6819      	ldr	r1, [r3, #0]
 800b734:	6808      	ldr	r0, [r1, #0]
 800b736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b73a:	f380 8809 	msr	PSP, r0
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f04f 0000 	mov.w	r0, #0
 800b746:	f380 8811 	msr	BASEPRI, r0
 800b74a:	4770      	bx	lr
 800b74c:	f3af 8000 	nop.w

0800b750 <pxCurrentTCBConst2>:
 800b750:	24024fe4 	.word	0x24024fe4

0800b754 <vPortEnterCritical>:
 800b754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b758:	f383 8811 	msr	BASEPRI, r3
 800b75c:	f3bf 8f6f 	isb	sy
 800b760:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b764:	4a0a      	ldr	r2, [pc, #40]	@ (800b790 <vPortEnterCritical+0x3c>)
 800b766:	6813      	ldr	r3, [r2, #0]
 800b768:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800b76a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b76c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b76e:	d10e      	bne.n	800b78e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b770:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b774:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	b143      	cbz	r3, 800b78e <vPortEnterCritical+0x3a>
 800b77c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b780:	f383 8811 	msr	BASEPRI, r3
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	e7fe      	b.n	800b78c <vPortEnterCritical+0x38>
}
 800b78e:	4770      	bx	lr
 800b790:	24000078 	.word	0x24000078

0800b794 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b794:	4a08      	ldr	r2, [pc, #32]	@ (800b7b8 <vPortExitCritical+0x24>)
 800b796:	6813      	ldr	r3, [r2, #0]
 800b798:	b943      	cbnz	r3, 800b7ac <vPortExitCritical+0x18>
 800b79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b79e:	f383 8811 	msr	BASEPRI, r3
 800b7a2:	f3bf 8f6f 	isb	sy
 800b7a6:	f3bf 8f4f 	dsb	sy
 800b7aa:	e7fe      	b.n	800b7aa <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b7b0:	b90b      	cbnz	r3, 800b7b6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b7b2:	f383 8811 	msr	BASEPRI, r3
}
 800b7b6:	4770      	bx	lr
 800b7b8:	24000078 	.word	0x24000078
 800b7bc:	00000000 	.word	0x00000000

0800b7c0 <PendSV_Handler>:
	__asm volatile
 800b7c0:	f3ef 8009 	mrs	r0, PSP
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	4b15      	ldr	r3, [pc, #84]	@ (800b820 <pxCurrentTCBConst>)
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	f01e 0f10 	tst.w	lr, #16
 800b7d0:	bf08      	it	eq
 800b7d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7da:	6010      	str	r0, [r2, #0]
 800b7dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b7e4:	f380 8811 	msr	BASEPRI, r0
 800b7e8:	f3bf 8f4f 	dsb	sy
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f001 f996 	bl	800cb20 <vTaskSwitchContext>
 800b7f4:	f04f 0000 	mov.w	r0, #0
 800b7f8:	f380 8811 	msr	BASEPRI, r0
 800b7fc:	bc09      	pop	{r0, r3}
 800b7fe:	6819      	ldr	r1, [r3, #0]
 800b800:	6808      	ldr	r0, [r1, #0]
 800b802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b806:	f01e 0f10 	tst.w	lr, #16
 800b80a:	bf08      	it	eq
 800b80c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b810:	f380 8809 	msr	PSP, r0
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	f3af 8000 	nop.w

0800b820 <pxCurrentTCBConst>:
 800b820:	24024fe4 	.word	0x24024fe4

0800b824 <xPortSysTickHandler>:
{
 800b824:	b508      	push	{r3, lr}
	__asm volatile
 800b826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b82a:	f383 8811 	msr	BASEPRI, r3
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b836:	f000 ffff 	bl	800c838 <xTaskIncrementTick>
 800b83a:	b128      	cbz	r0, 800b848 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b83c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b844:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800b848:	2300      	movs	r3, #0
 800b84a:	f383 8811 	msr	BASEPRI, r3
}
 800b84e:	bd08      	pop	{r3, pc}

0800b850 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b850:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800b854:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b856:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b85a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b85c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b85e:	4b04      	ldr	r3, [pc, #16]	@ (800b870 <vPortSetupTimerInterrupt+0x20>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	fbb3 f3f1 	udiv	r3, r3, r1
 800b866:	3b01      	subs	r3, #1
 800b868:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b86a:	2307      	movs	r3, #7
 800b86c:	6113      	str	r3, [r2, #16]
}
 800b86e:	4770      	bx	lr
 800b870:	2400006c 	.word	0x2400006c

0800b874 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b874:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800b878:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b87a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800b87e:	4a38      	ldr	r2, [pc, #224]	@ (800b960 <xPortStartScheduler+0xec>)
 800b880:	4291      	cmp	r1, r2
 800b882:	d108      	bne.n	800b896 <xPortStartScheduler+0x22>
	__asm volatile
 800b884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b888:	f383 8811 	msr	BASEPRI, r3
 800b88c:	f3bf 8f6f 	isb	sy
 800b890:	f3bf 8f4f 	dsb	sy
 800b894:	e7fe      	b.n	800b894 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b896:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800b89a:	4b32      	ldr	r3, [pc, #200]	@ (800b964 <xPortStartScheduler+0xf0>)
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d108      	bne.n	800b8b2 <xPortStartScheduler+0x3e>
 800b8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a4:	f383 8811 	msr	BASEPRI, r3
 800b8a8:	f3bf 8f6f 	isb	sy
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	e7fe      	b.n	800b8b0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b8b2:	4b2d      	ldr	r3, [pc, #180]	@ (800b968 <xPortStartScheduler+0xf4>)
 800b8b4:	781a      	ldrb	r2, [r3, #0]
 800b8b6:	b2d2      	uxtb	r2, r2
 800b8b8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b8ba:	22ff      	movs	r2, #255	@ 0xff
 800b8bc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8be:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8c0:	4a2a      	ldr	r2, [pc, #168]	@ (800b96c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b8cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b8d0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b8d2:	2307      	movs	r3, #7
 800b8d4:	4a26      	ldr	r2, [pc, #152]	@ (800b970 <xPortStartScheduler+0xfc>)
 800b8d6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8d8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800b8dc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8de:	0609      	lsls	r1, r1, #24
 800b8e0:	d40a      	bmi.n	800b8f8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b8e2:	2b03      	cmp	r3, #3
 800b8e4:	d011      	beq.n	800b90a <xPortStartScheduler+0x96>
 800b8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	e7fe      	b.n	800b8f6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b8fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b900:	005b      	lsls	r3, r3, #1
 800b902:	b2db      	uxtb	r3, r3
 800b904:	f88d 3003 	strb.w	r3, [sp, #3]
 800b908:	e7e6      	b.n	800b8d8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b90a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b90e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800b912:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b914:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b916:	9b01      	ldr	r3, [sp, #4]
 800b918:	4a13      	ldr	r2, [pc, #76]	@ (800b968 <xPortStartScheduler+0xf4>)
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b91e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800b922:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b926:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b92a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800b92e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b932:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800b936:	f7ff ff8b 	bl	800b850 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b93a:	4b0e      	ldr	r3, [pc, #56]	@ (800b974 <xPortStartScheduler+0x100>)
 800b93c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800b93e:	f7ff feb9 	bl	800b6b4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b942:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800b946:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b94a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800b94e:	f7ff fe9d 	bl	800b68c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b952:	f001 f8e5 	bl	800cb20 <vTaskSwitchContext>
}
 800b956:	4628      	mov	r0, r5
	prvTaskExitError();
 800b958:	f7ff feb6 	bl	800b6c8 <prvTaskExitError>
}
 800b95c:	b003      	add	sp, #12
 800b95e:	bd30      	pop	{r4, r5, pc}
 800b960:	410fc271 	.word	0x410fc271
 800b964:	410fc270 	.word	0x410fc270
 800b968:	e000e400 	.word	0xe000e400
 800b96c:	24024aa8 	.word	0x24024aa8
 800b970:	24024aa4 	.word	0x24024aa4
 800b974:	24000078 	.word	0x24000078

0800b978 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b978:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b97c:	2b0f      	cmp	r3, #15
 800b97e:	d90e      	bls.n	800b99e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b980:	4a11      	ldr	r2, [pc, #68]	@ (800b9c8 <vPortValidateInterruptPriority+0x50>)
 800b982:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b984:	4a11      	ldr	r2, [pc, #68]	@ (800b9cc <vPortValidateInterruptPriority+0x54>)
 800b986:	7812      	ldrb	r2, [r2, #0]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d908      	bls.n	800b99e <vPortValidateInterruptPriority+0x26>
 800b98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	e7fe      	b.n	800b99c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b99e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b9a2:	4a0b      	ldr	r2, [pc, #44]	@ (800b9d0 <vPortValidateInterruptPriority+0x58>)
 800b9a4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800b9a8:	6812      	ldr	r2, [r2, #0]
 800b9aa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d908      	bls.n	800b9c4 <vPortValidateInterruptPriority+0x4c>
 800b9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b6:	f383 8811 	msr	BASEPRI, r3
 800b9ba:	f3bf 8f6f 	isb	sy
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	e7fe      	b.n	800b9c2 <vPortValidateInterruptPriority+0x4a>
	}
 800b9c4:	4770      	bx	lr
 800b9c6:	bf00      	nop
 800b9c8:	e000e3f0 	.word	0xe000e3f0
 800b9cc:	24024aa8 	.word	0x24024aa8
 800b9d0:	24024aa4 	.word	0x24024aa4

0800b9d4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b9d4:	b510      	push	{r4, lr}
 800b9d6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b9d8:	f7ff febc 	bl	800b754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b9dc:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b9de:	f7ff fed9 	bl	800b794 <vPortExitCritical>

	return xReturn;
}
 800b9e2:	fab4 f084 	clz	r0, r4
 800b9e6:	0940      	lsrs	r0, r0, #5
 800b9e8:	bd10      	pop	{r4, pc}

0800b9ea <prvCopyDataToQueue>:
{
 800b9ea:	b570      	push	{r4, r5, r6, lr}
 800b9ec:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b9ee:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800b9f0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9f2:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b9f4:	b942      	cbnz	r2, 800ba08 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b9f6:	6806      	ldr	r6, [r0, #0]
 800b9f8:	b99e      	cbnz	r6, 800ba22 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b9fa:	6880      	ldr	r0, [r0, #8]
 800b9fc:	f001 f9f0 	bl	800cde0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba00:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba02:	3501      	adds	r5, #1
 800ba04:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800ba06:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800ba08:	b96e      	cbnz	r6, 800ba26 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba0a:	6840      	ldr	r0, [r0, #4]
 800ba0c:	f015 fa49 	bl	8020ea2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba10:	6863      	ldr	r3, [r4, #4]
 800ba12:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800ba14:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba16:	68a2      	ldr	r2, [r4, #8]
 800ba18:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba1a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba1c:	bf24      	itt	cs
 800ba1e:	6823      	ldrcs	r3, [r4, #0]
 800ba20:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800ba22:	2000      	movs	r0, #0
 800ba24:	e7ed      	b.n	800ba02 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ba26:	68c0      	ldr	r0, [r0, #12]
 800ba28:	f015 fa3b 	bl	8020ea2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba2c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800ba2e:	68e3      	ldr	r3, [r4, #12]
 800ba30:	4251      	negs	r1, r2
 800ba32:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba34:	6822      	ldr	r2, [r4, #0]
 800ba36:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba38:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ba3a:	bf3e      	ittt	cc
 800ba3c:	68a3      	ldrcc	r3, [r4, #8]
 800ba3e:	185b      	addcc	r3, r3, r1
 800ba40:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800ba42:	2e02      	cmp	r6, #2
 800ba44:	d1ed      	bne.n	800ba22 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba46:	b10d      	cbz	r5, 800ba4c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800ba48:	3d01      	subs	r5, #1
 800ba4a:	e7ea      	b.n	800ba22 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	e7d8      	b.n	800ba02 <prvCopyDataToQueue+0x18>

0800ba50 <prvCopyDataFromQueue>:
{
 800ba50:	4603      	mov	r3, r0
 800ba52:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ba54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800ba56:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ba58:	b162      	cbz	r2, 800ba74 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba5a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ba5c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba5e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ba60:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba62:	60dc      	str	r4, [r3, #12]
}
 800ba64:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ba68:	bf24      	itt	cs
 800ba6a:	6819      	ldrcs	r1, [r3, #0]
 800ba6c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba6e:	68d9      	ldr	r1, [r3, #12]
 800ba70:	f015 ba17 	b.w	8020ea2 <memcpy>
}
 800ba74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <prvUnlockQueue>:
{
 800ba7a:	b570      	push	{r4, r5, r6, lr}
 800ba7c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ba7e:	f7ff fe69 	bl	800b754 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ba82:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba86:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800ba8a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba8c:	2d00      	cmp	r5, #0
 800ba8e:	dd01      	ble.n	800ba94 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba90:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ba92:	b9b3      	cbnz	r3, 800bac2 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 800ba94:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba96:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800ba9a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800ba9e:	f7ff fe79 	bl	800b794 <vPortExitCritical>
	taskENTER_CRITICAL();
 800baa2:	f7ff fe57 	bl	800b754 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800baa6:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800baaa:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800baac:	2d00      	cmp	r5, #0
 800baae:	dd01      	ble.n	800bab4 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bab0:	6923      	ldr	r3, [r4, #16]
 800bab2:	b97b      	cbnz	r3, 800bad4 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 800bab4:	23ff      	movs	r3, #255	@ 0xff
 800bab6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800baba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800babe:	f7ff be69 	b.w	800b794 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bac2:	4630      	mov	r0, r6
 800bac4:	f001 f8a8 	bl	800cc18 <xTaskRemoveFromEventList>
 800bac8:	b108      	cbz	r0, 800bace <prvUnlockQueue+0x54>
						vTaskMissedYield();
 800baca:	f001 f92f 	bl	800cd2c <vTaskMissedYield>
			--cTxLock;
 800bace:	3d01      	subs	r5, #1
 800bad0:	b26d      	sxtb	r5, r5
 800bad2:	e7db      	b.n	800ba8c <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bad4:	4630      	mov	r0, r6
 800bad6:	f001 f89f 	bl	800cc18 <xTaskRemoveFromEventList>
 800bada:	b108      	cbz	r0, 800bae0 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800badc:	f001 f926 	bl	800cd2c <vTaskMissedYield>
				--cRxLock;
 800bae0:	3d01      	subs	r5, #1
 800bae2:	b26d      	sxtb	r5, r5
 800bae4:	e7e2      	b.n	800baac <prvUnlockQueue+0x32>

0800bae6 <xQueueGenericReset>:
{
 800bae6:	b538      	push	{r3, r4, r5, lr}
 800bae8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800baea:	4604      	mov	r4, r0
 800baec:	b940      	cbnz	r0, 800bb00 <xQueueGenericReset+0x1a>
 800baee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	e7fe      	b.n	800bafe <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800bb00:	f7ff fe28 	bl	800b754 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb04:	6822      	ldr	r2, [r4, #0]
 800bb06:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb0a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb0c:	434b      	muls	r3, r1
 800bb0e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb10:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb12:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb14:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bb16:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800bb18:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb1a:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bb1c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800bb1e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bb22:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800bb26:	b9a5      	cbnz	r5, 800bb52 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb28:	6923      	ldr	r3, [r4, #16]
 800bb2a:	b173      	cbz	r3, 800bb4a <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb2c:	f104 0010 	add.w	r0, r4, #16
 800bb30:	f001 f872 	bl	800cc18 <xTaskRemoveFromEventList>
 800bb34:	b148      	cbz	r0, 800bb4a <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800bb36:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bb3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb3e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800bb4a:	f7ff fe23 	bl	800b794 <vPortExitCritical>
}
 800bb4e:	2001      	movs	r0, #1
 800bb50:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bb52:	f104 0010 	add.w	r0, r4, #16
 800bb56:	f7ff fd59 	bl	800b60c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb5a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800bb5e:	f7ff fd55 	bl	800b60c <vListInitialise>
 800bb62:	e7f2      	b.n	800bb4a <xQueueGenericReset+0x64>

0800bb64 <xQueueGenericCreateStatic>:
	{
 800bb64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb66:	460d      	mov	r5, r1
 800bb68:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb6a:	b940      	cbnz	r0, 800bb7e <xQueueGenericCreateStatic+0x1a>
 800bb6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb70:	f383 8811 	msr	BASEPRI, r3
 800bb74:	f3bf 8f6f 	isb	sy
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	e7fe      	b.n	800bb7c <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800bb7e:	b943      	cbnz	r3, 800bb92 <xQueueGenericCreateStatic+0x2e>
 800bb80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb84:	f383 8811 	msr	BASEPRI, r3
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	e7fe      	b.n	800bb90 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bb92:	b14a      	cbz	r2, 800bba8 <xQueueGenericCreateStatic+0x44>
 800bb94:	b991      	cbnz	r1, 800bbbc <xQueueGenericCreateStatic+0x58>
 800bb96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb9a:	f383 8811 	msr	BASEPRI, r3
 800bb9e:	f3bf 8f6f 	isb	sy
 800bba2:	f3bf 8f4f 	dsb	sy
 800bba6:	e7fe      	b.n	800bba6 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bba8:	b141      	cbz	r1, 800bbbc <xQueueGenericCreateStatic+0x58>
 800bbaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbae:	f383 8811 	msr	BASEPRI, r3
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	e7fe      	b.n	800bbba <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bbbc:	2350      	movs	r3, #80	@ 0x50
 800bbbe:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bbc0:	9b01      	ldr	r3, [sp, #4]
 800bbc2:	2b50      	cmp	r3, #80	@ 0x50
 800bbc4:	d008      	beq.n	800bbd8 <xQueueGenericCreateStatic+0x74>
 800bbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	e7fe      	b.n	800bbd6 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bbd8:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bbda:	2d00      	cmp	r5, #0
 800bbdc:	bf08      	it	eq
 800bbde:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bbe0:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bbe2:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800bbe6:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800bbe8:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bbec:	4620      	mov	r0, r4
 800bbee:	f7ff ff7a 	bl	800bae6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800bbf2:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800bbf6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800bbf8:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800bbfc:	b003      	add	sp, #12
 800bbfe:	bd30      	pop	{r4, r5, pc}

0800bc00 <xQueueGenericCreate>:
	{
 800bc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc02:	460d      	mov	r5, r1
 800bc04:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc06:	4606      	mov	r6, r0
 800bc08:	b940      	cbnz	r0, 800bc1c <xQueueGenericCreate+0x1c>
 800bc0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc0e:	f383 8811 	msr	BASEPRI, r3
 800bc12:	f3bf 8f6f 	isb	sy
 800bc16:	f3bf 8f4f 	dsb	sy
 800bc1a:	e7fe      	b.n	800bc1a <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc1c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bc1e:	3050      	adds	r0, #80	@ 0x50
 800bc20:	f7ff fc1e 	bl	800b460 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800bc24:	4604      	mov	r4, r0
 800bc26:	b170      	cbz	r0, 800bc46 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc2e:	b165      	cbz	r5, 800bc4a <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc30:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bc34:	2101      	movs	r1, #1
 800bc36:	4620      	mov	r0, r4
 800bc38:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800bc3a:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bc3e:	f7ff ff52 	bl	800bae6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800bc42:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800bc46:	4620      	mov	r0, r4
 800bc48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	e7f2      	b.n	800bc34 <xQueueGenericCreate+0x34>

0800bc4e <xQueueCreateCountingSemaphoreStatic>:
	{
 800bc4e:	b513      	push	{r0, r1, r4, lr}
 800bc50:	4613      	mov	r3, r2
 800bc52:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800bc54:	b940      	cbnz	r0, 800bc68 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800bc56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc5a:	f383 8811 	msr	BASEPRI, r3
 800bc5e:	f3bf 8f6f 	isb	sy
 800bc62:	f3bf 8f4f 	dsb	sy
 800bc66:	e7fe      	b.n	800bc66 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bc68:	4288      	cmp	r0, r1
 800bc6a:	d208      	bcs.n	800bc7e <xQueueCreateCountingSemaphoreStatic+0x30>
 800bc6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc70:	f383 8811 	msr	BASEPRI, r3
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	f3bf 8f4f 	dsb	sy
 800bc7c:	e7fe      	b.n	800bc7c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bc7e:	2202      	movs	r2, #2
 800bc80:	9200      	str	r2, [sp, #0]
 800bc82:	2200      	movs	r2, #0
 800bc84:	4611      	mov	r1, r2
 800bc86:	f7ff ff6d 	bl	800bb64 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800bc8a:	b100      	cbz	r0, 800bc8e <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bc8c:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800bc8e:	b002      	add	sp, #8
 800bc90:	bd10      	pop	{r4, pc}

0800bc92 <xQueueCreateCountingSemaphore>:
	{
 800bc92:	b510      	push	{r4, lr}
 800bc94:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800bc96:	b940      	cbnz	r0, 800bcaa <xQueueCreateCountingSemaphore+0x18>
 800bc98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc9c:	f383 8811 	msr	BASEPRI, r3
 800bca0:	f3bf 8f6f 	isb	sy
 800bca4:	f3bf 8f4f 	dsb	sy
 800bca8:	e7fe      	b.n	800bca8 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bcaa:	4288      	cmp	r0, r1
 800bcac:	d208      	bcs.n	800bcc0 <xQueueCreateCountingSemaphore+0x2e>
 800bcae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb2:	f383 8811 	msr	BASEPRI, r3
 800bcb6:	f3bf 8f6f 	isb	sy
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	e7fe      	b.n	800bcbe <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bcc0:	2202      	movs	r2, #2
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	f7ff ff9c 	bl	800bc00 <xQueueGenericCreate>
		if( xHandle != NULL )
 800bcc8:	b100      	cbz	r0, 800bccc <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bcca:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800bccc:	bd10      	pop	{r4, pc}

0800bcce <xQueueGenericSend>:
{
 800bcce:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800bcd2:	460f      	mov	r7, r1
 800bcd4:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800bcd6:	4604      	mov	r4, r0
{
 800bcd8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800bcda:	b940      	cbnz	r0, 800bcee <xQueueGenericSend+0x20>
 800bcdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	e7fe      	b.n	800bcec <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcee:	b951      	cbnz	r1, 800bd06 <xQueueGenericSend+0x38>
 800bcf0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800bcf2:	b143      	cbz	r3, 800bd06 <xQueueGenericSend+0x38>
 800bcf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf8:	f383 8811 	msr	BASEPRI, r3
 800bcfc:	f3bf 8f6f 	isb	sy
 800bd00:	f3bf 8f4f 	dsb	sy
 800bd04:	e7fe      	b.n	800bd04 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd06:	2e02      	cmp	r6, #2
 800bd08:	d10b      	bne.n	800bd22 <xQueueGenericSend+0x54>
 800bd0a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d008      	beq.n	800bd22 <xQueueGenericSend+0x54>
 800bd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd14:	f383 8811 	msr	BASEPRI, r3
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	e7fe      	b.n	800bd20 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd22:	f001 f80f 	bl	800cd44 <xTaskGetSchedulerState>
 800bd26:	4605      	mov	r5, r0
 800bd28:	b320      	cbz	r0, 800bd74 <xQueueGenericSend+0xa6>
 800bd2a:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800bd2c:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800bd30:	f7ff fd10 	bl	800b754 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd34:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bd36:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d227      	bcs.n	800bd8c <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd3c:	4632      	mov	r2, r6
 800bd3e:	4639      	mov	r1, r7
 800bd40:	4620      	mov	r0, r4
 800bd42:	f7ff fe52 	bl	800b9ea <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd46:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bd48:	b11b      	cbz	r3, 800bd52 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd4a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800bd4e:	f000 ff63 	bl	800cc18 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800bd52:	b148      	cbz	r0, 800bd68 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 800bd54:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bd58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd5c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800bd68:	f7ff fd14 	bl	800b794 <vPortExitCritical>
				return pdPASS;
 800bd6c:	2001      	movs	r0, #1
}
 800bd6e:	b004      	add	sp, #16
 800bd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd74:	9b01      	ldr	r3, [sp, #4]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d0d8      	beq.n	800bd2c <xQueueGenericSend+0x5e>
 800bd7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	e7fe      	b.n	800bd8a <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd8c:	2e02      	cmp	r6, #2
 800bd8e:	d0d5      	beq.n	800bd3c <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd90:	9b01      	ldr	r3, [sp, #4]
 800bd92:	b91b      	cbnz	r3, 800bd9c <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800bd94:	f7ff fcfe 	bl	800b794 <vPortExitCritical>
					return errQUEUE_FULL;
 800bd98:	2000      	movs	r0, #0
 800bd9a:	e7e8      	b.n	800bd6e <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 800bd9c:	b915      	cbnz	r5, 800bda4 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd9e:	a802      	add	r0, sp, #8
 800bda0:	f000 ff7c 	bl	800cc9c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800bda4:	f7ff fcf6 	bl	800b794 <vPortExitCritical>
		vTaskSuspendAll();
 800bda8:	f000 fd38 	bl	800c81c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdac:	f7ff fcd2 	bl	800b754 <vPortEnterCritical>
 800bdb0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bdb4:	2bff      	cmp	r3, #255	@ 0xff
 800bdb6:	d101      	bne.n	800bdbc <xQueueGenericSend+0xee>
 800bdb8:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800bdbc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bdc0:	2bff      	cmp	r3, #255	@ 0xff
 800bdc2:	d101      	bne.n	800bdc8 <xQueueGenericSend+0xfa>
 800bdc4:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800bdc8:	f7ff fce4 	bl	800b794 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bdcc:	a901      	add	r1, sp, #4
 800bdce:	a802      	add	r0, sp, #8
 800bdd0:	f000 ff70 	bl	800ccb4 <xTaskCheckForTimeOut>
 800bdd4:	bb38      	cbnz	r0, 800be26 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bdd6:	f7ff fcbd 	bl	800b754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bdda:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bddc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d10e      	bne.n	800be00 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800bde2:	f7ff fcd7 	bl	800b794 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bde6:	9901      	ldr	r1, [sp, #4]
 800bde8:	f104 0010 	add.w	r0, r4, #16
 800bdec:	f000 fedc 	bl	800cba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	f7ff fe42 	bl	800ba7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bdf6:	f000 fdb5 	bl	800c964 <xTaskResumeAll>
 800bdfa:	b148      	cbz	r0, 800be10 <xQueueGenericSend+0x142>
 800bdfc:	2501      	movs	r5, #1
 800bdfe:	e797      	b.n	800bd30 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800be00:	f7ff fcc8 	bl	800b794 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800be04:	4620      	mov	r0, r4
 800be06:	f7ff fe38 	bl	800ba7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be0a:	f000 fdab 	bl	800c964 <xTaskResumeAll>
 800be0e:	e7f5      	b.n	800bdfc <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800be10:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800be14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be18:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	e7ea      	b.n	800bdfc <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800be26:	4620      	mov	r0, r4
 800be28:	f7ff fe27 	bl	800ba7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be2c:	f000 fd9a 	bl	800c964 <xTaskResumeAll>
			return errQUEUE_FULL;
 800be30:	e7b2      	b.n	800bd98 <xQueueGenericSend+0xca>

0800be32 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800be32:	2200      	movs	r2, #0
	{
 800be34:	460b      	mov	r3, r1
 800be36:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800be38:	4611      	mov	r1, r2
 800be3a:	9000      	str	r0, [sp, #0]
 800be3c:	2001      	movs	r0, #1
 800be3e:	f7ff fe91 	bl	800bb64 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800be42:	4604      	mov	r4, r0
 800be44:	b138      	cbz	r0, 800be56 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800be46:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800be48:	461a      	mov	r2, r3
 800be4a:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800be4c:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800be4e:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800be50:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800be52:	f7ff ff3c 	bl	800bcce <xQueueGenericSend>
	}
 800be56:	4620      	mov	r0, r4
 800be58:	b002      	add	sp, #8
 800be5a:	bd10      	pop	{r4, pc}

0800be5c <xQueueGiveMutexRecursive>:
	{
 800be5c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800be5e:	4604      	mov	r4, r0
 800be60:	b940      	cbnz	r0, 800be74 <xQueueGiveMutexRecursive+0x18>
 800be62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be66:	f383 8811 	msr	BASEPRI, r3
 800be6a:	f3bf 8f6f 	isb	sy
 800be6e:	f3bf 8f4f 	dsb	sy
 800be72:	e7fe      	b.n	800be72 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800be74:	6885      	ldr	r5, [r0, #8]
 800be76:	f000 ff5f 	bl	800cd38 <xTaskGetCurrentTaskHandle>
 800be7a:	4285      	cmp	r5, r0
 800be7c:	d10b      	bne.n	800be96 <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800be7e:	68e3      	ldr	r3, [r4, #12]
 800be80:	3b01      	subs	r3, #1
 800be82:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800be84:	b10b      	cbz	r3, 800be8a <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800be86:	2001      	movs	r0, #1
	}
 800be88:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800be8a:	461a      	mov	r2, r3
 800be8c:	4619      	mov	r1, r3
 800be8e:	4620      	mov	r0, r4
 800be90:	f7ff ff1d 	bl	800bcce <xQueueGenericSend>
 800be94:	e7f7      	b.n	800be86 <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800be96:	2000      	movs	r0, #0
		return xReturn;
 800be98:	e7f6      	b.n	800be88 <xQueueGiveMutexRecursive+0x2c>

0800be9a <xQueueCreateMutex>:
	{
 800be9a:	b570      	push	{r4, r5, r6, lr}
 800be9c:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800be9e:	2050      	movs	r0, #80	@ 0x50
 800bea0:	f7ff fade 	bl	800b460 <pvPortMalloc>
 800bea4:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800bea6:	b198      	cbz	r0, 800bed0 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bea8:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800beaa:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800beac:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800beae:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800beb2:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800beb6:	f7ff fe16 	bl	800bae6 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800beba:	462b      	mov	r3, r5
 800bebc:	462a      	mov	r2, r5
 800bebe:	4629      	mov	r1, r5
 800bec0:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800bec2:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bec6:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bec8:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800beca:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800becc:	f7ff feff 	bl	800bcce <xQueueGenericSend>
	}
 800bed0:	4620      	mov	r0, r4
 800bed2:	bd70      	pop	{r4, r5, r6, pc}

0800bed4 <xQueueGenericSendFromISR>:
{
 800bed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bed8:	4689      	mov	r9, r1
 800beda:	4617      	mov	r7, r2
 800bedc:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800bede:	4604      	mov	r4, r0
 800bee0:	b940      	cbnz	r0, 800bef4 <xQueueGenericSendFromISR+0x20>
 800bee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee6:	f383 8811 	msr	BASEPRI, r3
 800beea:	f3bf 8f6f 	isb	sy
 800beee:	f3bf 8f4f 	dsb	sy
 800bef2:	e7fe      	b.n	800bef2 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bef4:	b951      	cbnz	r1, 800bf0c <xQueueGenericSendFromISR+0x38>
 800bef6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800bef8:	b143      	cbz	r3, 800bf0c <xQueueGenericSendFromISR+0x38>
 800befa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800befe:	f383 8811 	msr	BASEPRI, r3
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	e7fe      	b.n	800bf0a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf0c:	2e02      	cmp	r6, #2
 800bf0e:	d10b      	bne.n	800bf28 <xQueueGenericSendFromISR+0x54>
 800bf10:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d008      	beq.n	800bf28 <xQueueGenericSendFromISR+0x54>
 800bf16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf1a:	f383 8811 	msr	BASEPRI, r3
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	e7fe      	b.n	800bf26 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf28:	f7ff fd26 	bl	800b978 <vPortValidateInterruptPriority>
	__asm volatile
 800bf2c:	f3ef 8811 	mrs	r8, BASEPRI
 800bf30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf34:	f383 8811 	msr	BASEPRI, r3
 800bf38:	f3bf 8f6f 	isb	sy
 800bf3c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf40:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bf42:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d301      	bcc.n	800bf4c <xQueueGenericSendFromISR+0x78>
 800bf48:	2e02      	cmp	r6, #2
 800bf4a:	d11e      	bne.n	800bf8a <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf4c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf50:	4632      	mov	r2, r6
 800bf52:	4649      	mov	r1, r9
 800bf54:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf56:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf58:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf5a:	f7ff fd46 	bl	800b9ea <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800bf5e:	1c6b      	adds	r3, r5, #1
 800bf60:	d10e      	bne.n	800bf80 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf62:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bf64:	b13b      	cbz	r3, 800bf76 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf66:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800bf6a:	f000 fe55 	bl	800cc18 <xTaskRemoveFromEventList>
 800bf6e:	b110      	cbz	r0, 800bf76 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800bf70:	b10f      	cbz	r7, 800bf76 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf72:	2301      	movs	r3, #1
 800bf74:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800bf76:	2001      	movs	r0, #1
	__asm volatile
 800bf78:	f388 8811 	msr	BASEPRI, r8
}
 800bf7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf80:	3501      	adds	r5, #1
 800bf82:	b26d      	sxtb	r5, r5
 800bf84:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800bf88:	e7f5      	b.n	800bf76 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	e7f4      	b.n	800bf78 <xQueueGenericSendFromISR+0xa4>

0800bf8e <xQueueGiveFromISR>:
{
 800bf8e:	b570      	push	{r4, r5, r6, lr}
 800bf90:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800bf92:	4604      	mov	r4, r0
 800bf94:	b940      	cbnz	r0, 800bfa8 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800bf96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf9a:	f383 8811 	msr	BASEPRI, r3
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	e7fe      	b.n	800bfa6 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800bfa8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800bfaa:	b143      	cbz	r3, 800bfbe <xQueueGiveFromISR+0x30>
 800bfac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	e7fe      	b.n	800bfbc <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bfbe:	6803      	ldr	r3, [r0, #0]
 800bfc0:	b953      	cbnz	r3, 800bfd8 <xQueueGiveFromISR+0x4a>
 800bfc2:	6883      	ldr	r3, [r0, #8]
 800bfc4:	b143      	cbz	r3, 800bfd8 <xQueueGiveFromISR+0x4a>
 800bfc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfca:	f383 8811 	msr	BASEPRI, r3
 800bfce:	f3bf 8f6f 	isb	sy
 800bfd2:	f3bf 8f4f 	dsb	sy
 800bfd6:	e7fe      	b.n	800bfd6 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfd8:	f7ff fcce 	bl	800b978 <vPortValidateInterruptPriority>
	__asm volatile
 800bfdc:	f3ef 8611 	mrs	r6, BASEPRI
 800bfe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe4:	f383 8811 	msr	BASEPRI, r3
 800bfe8:	f3bf 8f6f 	isb	sy
 800bfec:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bff0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bff2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d919      	bls.n	800c02c <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800bff8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bffc:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800bffe:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800c000:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c002:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800c004:	d10d      	bne.n	800c022 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c006:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c008:	b13b      	cbz	r3, 800c01a <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c00a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c00e:	f000 fe03 	bl	800cc18 <xTaskRemoveFromEventList>
 800c012:	b110      	cbz	r0, 800c01a <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800c014:	b10d      	cbz	r5, 800c01a <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c016:	2301      	movs	r3, #1
 800c018:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800c01a:	2001      	movs	r0, #1
	__asm volatile
 800c01c:	f386 8811 	msr	BASEPRI, r6
}
 800c020:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c022:	3301      	adds	r3, #1
 800c024:	b25b      	sxtb	r3, r3
 800c026:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c02a:	e7f6      	b.n	800c01a <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800c02c:	2000      	movs	r0, #0
 800c02e:	e7f5      	b.n	800c01c <xQueueGiveFromISR+0x8e>

0800c030 <xQueueReceive>:
{
 800c030:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c034:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800c036:	4604      	mov	r4, r0
{
 800c038:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c03a:	b940      	cbnz	r0, 800c04e <xQueueReceive+0x1e>
	__asm volatile
 800c03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c040:	f383 8811 	msr	BASEPRI, r3
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	e7fe      	b.n	800c04c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c04e:	b951      	cbnz	r1, 800c066 <xQueueReceive+0x36>
 800c050:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c052:	b143      	cbz	r3, 800c066 <xQueueReceive+0x36>
 800c054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c058:	f383 8811 	msr	BASEPRI, r3
 800c05c:	f3bf 8f6f 	isb	sy
 800c060:	f3bf 8f4f 	dsb	sy
 800c064:	e7fe      	b.n	800c064 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c066:	f000 fe6d 	bl	800cd44 <xTaskGetSchedulerState>
 800c06a:	4605      	mov	r5, r0
 800c06c:	b318      	cbz	r0, 800c0b6 <xQueueReceive+0x86>
 800c06e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800c070:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800c074:	f7ff fb6e 	bl	800b754 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c078:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c07a:	b347      	cbz	r7, 800c0ce <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c07c:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c07e:	4631      	mov	r1, r6
 800c080:	4620      	mov	r0, r4
 800c082:	f7ff fce5 	bl	800ba50 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c086:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c088:	6923      	ldr	r3, [r4, #16]
 800c08a:	b173      	cbz	r3, 800c0aa <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c08c:	f104 0010 	add.w	r0, r4, #16
 800c090:	f000 fdc2 	bl	800cc18 <xTaskRemoveFromEventList>
 800c094:	b148      	cbz	r0, 800c0aa <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800c096:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c09a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c09e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c0a2:	f3bf 8f4f 	dsb	sy
 800c0a6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c0aa:	f7ff fb73 	bl	800b794 <vPortExitCritical>
				return pdPASS;
 800c0ae:	2001      	movs	r0, #1
}
 800c0b0:	b004      	add	sp, #16
 800c0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0b6:	9b01      	ldr	r3, [sp, #4]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d0d9      	beq.n	800c070 <xQueueReceive+0x40>
 800c0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	e7fe      	b.n	800c0cc <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0ce:	9b01      	ldr	r3, [sp, #4]
 800c0d0:	b91b      	cbnz	r3, 800c0da <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800c0d2:	f7ff fb5f 	bl	800b794 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	e7ea      	b.n	800c0b0 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800c0da:	b915      	cbnz	r5, 800c0e2 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0dc:	a802      	add	r0, sp, #8
 800c0de:	f000 fddd 	bl	800cc9c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c0e2:	f7ff fb57 	bl	800b794 <vPortExitCritical>
		vTaskSuspendAll();
 800c0e6:	f000 fb99 	bl	800c81c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0ea:	f7ff fb33 	bl	800b754 <vPortEnterCritical>
 800c0ee:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c0f2:	2bff      	cmp	r3, #255	@ 0xff
 800c0f4:	d101      	bne.n	800c0fa <xQueueReceive+0xca>
 800c0f6:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800c0fa:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c0fe:	2bff      	cmp	r3, #255	@ 0xff
 800c100:	d101      	bne.n	800c106 <xQueueReceive+0xd6>
 800c102:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800c106:	f7ff fb45 	bl	800b794 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c10a:	a901      	add	r1, sp, #4
 800c10c:	a802      	add	r0, sp, #8
 800c10e:	f000 fdd1 	bl	800ccb4 <xTaskCheckForTimeOut>
 800c112:	bb00      	cbnz	r0, 800c156 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c114:	4620      	mov	r0, r4
 800c116:	f7ff fc5d 	bl	800b9d4 <prvIsQueueEmpty>
 800c11a:	b1b0      	cbz	r0, 800c14a <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c11c:	9901      	ldr	r1, [sp, #4]
 800c11e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c122:	f000 fd41 	bl	800cba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c126:	4620      	mov	r0, r4
 800c128:	f7ff fca7 	bl	800ba7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c12c:	f000 fc1a 	bl	800c964 <xTaskResumeAll>
 800c130:	b948      	cbnz	r0, 800c146 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800c132:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c13a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	2501      	movs	r5, #1
 800c148:	e794      	b.n	800c074 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800c14a:	4620      	mov	r0, r4
 800c14c:	f7ff fc95 	bl	800ba7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c150:	f000 fc08 	bl	800c964 <xTaskResumeAll>
 800c154:	e7f7      	b.n	800c146 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800c156:	4620      	mov	r0, r4
 800c158:	f7ff fc8f 	bl	800ba7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c15c:	f000 fc02 	bl	800c964 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c160:	4620      	mov	r0, r4
 800c162:	f7ff fc37 	bl	800b9d4 <prvIsQueueEmpty>
 800c166:	2800      	cmp	r0, #0
 800c168:	d0ed      	beq.n	800c146 <xQueueReceive+0x116>
 800c16a:	e7b4      	b.n	800c0d6 <xQueueReceive+0xa6>

0800c16c <xQueueSemaphoreTake>:
{
 800c16c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c16e:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800c170:	4604      	mov	r4, r0
{
 800c172:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c174:	b940      	cbnz	r0, 800c188 <xQueueSemaphoreTake+0x1c>
 800c176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c17a:	f383 8811 	msr	BASEPRI, r3
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	e7fe      	b.n	800c186 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c188:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800c18a:	b145      	cbz	r5, 800c19e <xQueueSemaphoreTake+0x32>
 800c18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c190:	f383 8811 	msr	BASEPRI, r3
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	e7fe      	b.n	800c19c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c19e:	f000 fdd1 	bl	800cd44 <xTaskGetSchedulerState>
 800c1a2:	4606      	mov	r6, r0
 800c1a4:	b320      	cbz	r0, 800c1f0 <xQueueSemaphoreTake+0x84>
 800c1a6:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800c1a8:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800c1aa:	f7ff fad3 	bl	800b754 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c1ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c1b0:	b353      	cbz	r3, 800c208 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1b6:	6823      	ldr	r3, [r4, #0]
 800c1b8:	b913      	cbnz	r3, 800c1c0 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c1ba:	f000 fea1 	bl	800cf00 <pvTaskIncrementMutexHeldCount>
 800c1be:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1c0:	6923      	ldr	r3, [r4, #16]
 800c1c2:	b173      	cbz	r3, 800c1e2 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1c4:	f104 0010 	add.w	r0, r4, #16
 800c1c8:	f000 fd26 	bl	800cc18 <xTaskRemoveFromEventList>
 800c1cc:	b148      	cbz	r0, 800c1e2 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800c1ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c1d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c1e2:	f7ff fad7 	bl	800b794 <vPortExitCritical>
				return pdPASS;
 800c1e6:	2001      	movs	r0, #1
}
 800c1e8:	b005      	add	sp, #20
 800c1ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1ec:	4635      	mov	r5, r6
 800c1ee:	e7db      	b.n	800c1a8 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1f0:	9b01      	ldr	r3, [sp, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d0fa      	beq.n	800c1ec <xQueueSemaphoreTake+0x80>
 800c1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fa:	f383 8811 	msr	BASEPRI, r3
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	f3bf 8f4f 	dsb	sy
 800c206:	e7fe      	b.n	800c206 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c208:	9b01      	ldr	r3, [sp, #4]
 800c20a:	b953      	cbnz	r3, 800c222 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c20c:	2d00      	cmp	r5, #0
 800c20e:	d066      	beq.n	800c2de <xQueueSemaphoreTake+0x172>
 800c210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	e7fe      	b.n	800c220 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800c222:	b916      	cbnz	r6, 800c22a <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c224:	a802      	add	r0, sp, #8
 800c226:	f000 fd39 	bl	800cc9c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c22a:	f7ff fab3 	bl	800b794 <vPortExitCritical>
		vTaskSuspendAll();
 800c22e:	f000 faf5 	bl	800c81c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c232:	f7ff fa8f 	bl	800b754 <vPortEnterCritical>
 800c236:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c23a:	2bff      	cmp	r3, #255	@ 0xff
 800c23c:	d101      	bne.n	800c242 <xQueueSemaphoreTake+0xd6>
 800c23e:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800c242:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c246:	2bff      	cmp	r3, #255	@ 0xff
 800c248:	d101      	bne.n	800c24e <xQueueSemaphoreTake+0xe2>
 800c24a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c24e:	f7ff faa1 	bl	800b794 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c252:	a901      	add	r1, sp, #4
 800c254:	a802      	add	r0, sp, #8
 800c256:	f000 fd2d 	bl	800ccb4 <xTaskCheckForTimeOut>
 800c25a:	bb50      	cbnz	r0, 800c2b2 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c25c:	4620      	mov	r0, r4
 800c25e:	f7ff fbb9 	bl	800b9d4 <prvIsQueueEmpty>
 800c262:	b300      	cbz	r0, 800c2a6 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c264:	6823      	ldr	r3, [r4, #0]
 800c266:	b93b      	cbnz	r3, 800c278 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800c268:	f7ff fa74 	bl	800b754 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c26c:	68a0      	ldr	r0, [r4, #8]
 800c26e:	f000 fd79 	bl	800cd64 <xTaskPriorityInherit>
 800c272:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800c274:	f7ff fa8e 	bl	800b794 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c278:	9901      	ldr	r1, [sp, #4]
 800c27a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c27e:	f000 fc93 	bl	800cba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c282:	4620      	mov	r0, r4
 800c284:	f7ff fbf9 	bl	800ba7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c288:	f000 fb6c 	bl	800c964 <xTaskResumeAll>
 800c28c:	b948      	cbnz	r0, 800c2a2 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800c28e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c296:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c29a:	f3bf 8f4f 	dsb	sy
 800c29e:	f3bf 8f6f 	isb	sy
 800c2a2:	2601      	movs	r6, #1
 800c2a4:	e781      	b.n	800c1aa <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	f7ff fbe7 	bl	800ba7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2ac:	f000 fb5a 	bl	800c964 <xTaskResumeAll>
 800c2b0:	e7f7      	b.n	800c2a2 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f7ff fbe1 	bl	800ba7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2b8:	f000 fb54 	bl	800c964 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f7ff fb89 	bl	800b9d4 <prvIsQueueEmpty>
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	d0ed      	beq.n	800c2a2 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800c2c6:	b165      	cbz	r5, 800c2e2 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800c2c8:	f7ff fa44 	bl	800b754 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c2cc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c2ce:	b119      	cbz	r1, 800c2d8 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c2d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c2d2:	6819      	ldr	r1, [r3, #0]
 800c2d4:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c2d8:	68a0      	ldr	r0, [r4, #8]
 800c2da:	f000 fdc3 	bl	800ce64 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800c2de:	f7ff fa59 	bl	800b794 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	e780      	b.n	800c1e8 <xQueueSemaphoreTake+0x7c>

0800c2e6 <xQueueTakeMutexRecursive>:
	{
 800c2e6:	b570      	push	{r4, r5, r6, lr}
 800c2e8:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	b940      	cbnz	r0, 800c300 <xQueueTakeMutexRecursive+0x1a>
 800c2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f2:	f383 8811 	msr	BASEPRI, r3
 800c2f6:	f3bf 8f6f 	isb	sy
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	e7fe      	b.n	800c2fe <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c300:	6886      	ldr	r6, [r0, #8]
 800c302:	f000 fd19 	bl	800cd38 <xTaskGetCurrentTaskHandle>
 800c306:	4286      	cmp	r6, r0
 800c308:	d104      	bne.n	800c314 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c30a:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800c30c:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c30e:	3301      	adds	r3, #1
 800c310:	60e3      	str	r3, [r4, #12]
	}
 800c312:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c314:	4629      	mov	r1, r5
 800c316:	4620      	mov	r0, r4
 800c318:	f7ff ff28 	bl	800c16c <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800c31c:	2800      	cmp	r0, #0
 800c31e:	d0f8      	beq.n	800c312 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c320:	68e3      	ldr	r3, [r4, #12]
 800c322:	3301      	adds	r3, #1
 800c324:	60e3      	str	r3, [r4, #12]
 800c326:	e7f4      	b.n	800c312 <xQueueTakeMutexRecursive+0x2c>

0800c328 <xQueueReceiveFromISR>:
{
 800c328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c32c:	4689      	mov	r9, r1
 800c32e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800c330:	4604      	mov	r4, r0
 800c332:	b940      	cbnz	r0, 800c346 <xQueueReceiveFromISR+0x1e>
 800c334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c338:	f383 8811 	msr	BASEPRI, r3
 800c33c:	f3bf 8f6f 	isb	sy
 800c340:	f3bf 8f4f 	dsb	sy
 800c344:	e7fe      	b.n	800c344 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c346:	b951      	cbnz	r1, 800c35e <xQueueReceiveFromISR+0x36>
 800c348:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c34a:	b143      	cbz	r3, 800c35e <xQueueReceiveFromISR+0x36>
 800c34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c350:	f383 8811 	msr	BASEPRI, r3
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	e7fe      	b.n	800c35c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c35e:	f7ff fb0b 	bl	800b978 <vPortValidateInterruptPriority>
	__asm volatile
 800c362:	f3ef 8711 	mrs	r7, BASEPRI
 800c366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c376:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c378:	b30d      	cbz	r5, 800c3be <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800c37a:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c37e:	4649      	mov	r1, r9
 800c380:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c382:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800c384:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c386:	f7ff fb63 	bl	800ba50 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c38a:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800c38c:	1c73      	adds	r3, r6, #1
 800c38e:	d111      	bne.n	800c3b4 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c390:	6923      	ldr	r3, [r4, #16]
 800c392:	b153      	cbz	r3, 800c3aa <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c394:	f104 0010 	add.w	r0, r4, #16
 800c398:	f000 fc3e 	bl	800cc18 <xTaskRemoveFromEventList>
 800c39c:	b128      	cbz	r0, 800c3aa <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800c39e:	f1b8 0f00 	cmp.w	r8, #0
 800c3a2:	d002      	beq.n	800c3aa <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800c3aa:	2001      	movs	r0, #1
	__asm volatile
 800c3ac:	f387 8811 	msr	BASEPRI, r7
}
 800c3b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c3b4:	3601      	adds	r6, #1
 800c3b6:	b276      	sxtb	r6, r6
 800c3b8:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800c3bc:	e7f5      	b.n	800c3aa <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800c3be:	4628      	mov	r0, r5
 800c3c0:	e7f4      	b.n	800c3ac <xQueueReceiveFromISR+0x84>
	...

0800c3c4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3c4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c3c6:	4a07      	ldr	r2, [pc, #28]	@ (800c3e4 <vQueueAddToRegistry+0x20>)
	{
 800c3c8:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c3ca:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800c3ce:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800c3d2:	b91d      	cbnz	r5, 800c3dc <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c3d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c3d8:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c3da:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3dc:	3301      	adds	r3, #1
 800c3de:	2b08      	cmp	r3, #8
 800c3e0:	d1f3      	bne.n	800c3ca <vQueueAddToRegistry+0x6>
 800c3e2:	e7fa      	b.n	800c3da <vQueueAddToRegistry+0x16>
 800c3e4:	24024aac 	.word	0x24024aac

0800c3e8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3e8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c3ea:	4a09      	ldr	r2, [pc, #36]	@ (800c410 <vQueueUnregisterQueue+0x28>)
	{
 800c3ec:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c3ee:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c3f2:	00dc      	lsls	r4, r3, #3
 800c3f4:	4281      	cmp	r1, r0
 800c3f6:	d106      	bne.n	800c406 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c3f8:	4a06      	ldr	r2, [pc, #24]	@ (800c414 <vQueueUnregisterQueue+0x2c>)
 800c3fa:	2100      	movs	r1, #0
 800c3fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c400:	4422      	add	r2, r4
 800c402:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c404:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c406:	3301      	adds	r3, #1
 800c408:	2b08      	cmp	r3, #8
 800c40a:	d1f0      	bne.n	800c3ee <vQueueUnregisterQueue+0x6>
 800c40c:	e7fa      	b.n	800c404 <vQueueUnregisterQueue+0x1c>
 800c40e:	bf00      	nop
 800c410:	24024ab0 	.word	0x24024ab0
 800c414:	24024aac 	.word	0x24024aac

0800c418 <vQueueDelete>:
{
 800c418:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800c41a:	b940      	cbnz	r0, 800c42e <vQueueDelete+0x16>
	__asm volatile
 800c41c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	e7fe      	b.n	800c42c <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800c42e:	f7ff ffdb 	bl	800c3e8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c432:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800c436:	b91b      	cbnz	r3, 800c440 <vQueueDelete+0x28>
}
 800c438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800c43c:	f7ff b8a8 	b.w	800b590 <vPortFree>
}
 800c440:	bd10      	pop	{r4, pc}

0800c442 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c442:	b570      	push	{r4, r5, r6, lr}
 800c444:	4604      	mov	r4, r0
 800c446:	460d      	mov	r5, r1
 800c448:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c44a:	f7ff f983 	bl	800b754 <vPortEnterCritical>
 800c44e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c452:	2bff      	cmp	r3, #255	@ 0xff
 800c454:	d102      	bne.n	800c45c <vQueueWaitForMessageRestricted+0x1a>
 800c456:	2300      	movs	r3, #0
 800c458:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c45c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c460:	2bff      	cmp	r3, #255	@ 0xff
 800c462:	d102      	bne.n	800c46a <vQueueWaitForMessageRestricted+0x28>
 800c464:	2300      	movs	r3, #0
 800c466:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c46a:	f7ff f993 	bl	800b794 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c46e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c470:	b92b      	cbnz	r3, 800c47e <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c472:	4632      	mov	r2, r6
 800c474:	4629      	mov	r1, r5
 800c476:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c47a:	f000 fbaf 	bl	800cbdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c47e:	4620      	mov	r0, r4
	}
 800c480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800c484:	f7ff baf9 	b.w	800ba7a <prvUnlockQueue>

0800c488 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c48c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c48e:	f7ff f961 	bl	800b754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c492:	4b2f      	ldr	r3, [pc, #188]	@ (800c550 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800c494:	4e2f      	ldr	r6, [pc, #188]	@ (800c554 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	4f2f      	ldr	r7, [pc, #188]	@ (800c558 <prvAddNewTaskToReadyList+0xd0>)
 800c49a:	3201      	adds	r2, #1
 800c49c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800c49e:	6835      	ldr	r5, [r6, #0]
 800c4a0:	2d00      	cmp	r5, #0
 800c4a2:	d14a      	bne.n	800c53a <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c4a4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d11f      	bne.n	800c4ec <prvAddNewTaskToReadyList+0x64>
 800c4ac:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c4ae:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c4b0:	4640      	mov	r0, r8
 800c4b2:	f7ff f8ab 	bl	800b60c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c4b6:	f108 0814 	add.w	r8, r8, #20
 800c4ba:	2d38      	cmp	r5, #56	@ 0x38
 800c4bc:	d1f7      	bne.n	800c4ae <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c4be:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800c580 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800c4c2:	4d26      	ldr	r5, [pc, #152]	@ (800c55c <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800c4c4:	4640      	mov	r0, r8
 800c4c6:	f7ff f8a1 	bl	800b60c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	f7ff f89e 	bl	800b60c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c4d0:	4823      	ldr	r0, [pc, #140]	@ (800c560 <prvAddNewTaskToReadyList+0xd8>)
 800c4d2:	f7ff f89b 	bl	800b60c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c4d6:	4823      	ldr	r0, [pc, #140]	@ (800c564 <prvAddNewTaskToReadyList+0xdc>)
 800c4d8:	f7ff f898 	bl	800b60c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c4dc:	4822      	ldr	r0, [pc, #136]	@ (800c568 <prvAddNewTaskToReadyList+0xe0>)
 800c4de:	f7ff f895 	bl	800b60c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c4e2:	4b22      	ldr	r3, [pc, #136]	@ (800c56c <prvAddNewTaskToReadyList+0xe4>)
 800c4e4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c4e8:	4b21      	ldr	r3, [pc, #132]	@ (800c570 <prvAddNewTaskToReadyList+0xe8>)
 800c4ea:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800c4ec:	4a21      	ldr	r2, [pc, #132]	@ (800c574 <prvAddNewTaskToReadyList+0xec>)
 800c4ee:	6813      	ldr	r3, [r2, #0]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800c4f4:	4a20      	ldr	r2, [pc, #128]	@ (800c578 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c4f6:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800c4f8:	6811      	ldr	r1, [r2, #0]
 800c4fa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c4fc:	428b      	cmp	r3, r1
 800c4fe:	d900      	bls.n	800c502 <prvAddNewTaskToReadyList+0x7a>
 800c500:	6013      	str	r3, [r2, #0]
 800c502:	2014      	movs	r0, #20
 800c504:	1d21      	adds	r1, r4, #4
 800c506:	fb00 7003 	mla	r0, r0, r3, r7
 800c50a:	f7ff f88d 	bl	800b628 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800c50e:	f7ff f941 	bl	800b794 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800c512:	4b1a      	ldr	r3, [pc, #104]	@ (800c57c <prvAddNewTaskToReadyList+0xf4>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	b173      	cbz	r3, 800c536 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c518:	6833      	ldr	r3, [r6, #0]
 800c51a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c51c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c51e:	429a      	cmp	r2, r3
 800c520:	d209      	bcs.n	800c536 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800c522:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c52a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	f3bf 8f6f 	isb	sy
}
 800c536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800c53a:	4b10      	ldr	r3, [pc, #64]	@ (800c57c <prvAddNewTaskToReadyList+0xf4>)
 800c53c:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c53e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800c540:	2a00      	cmp	r2, #0
 800c542:	d1d3      	bne.n	800c4ec <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c544:	6832      	ldr	r2, [r6, #0]
 800c546:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c548:	429a      	cmp	r2, r3
 800c54a:	d8cf      	bhi.n	800c4ec <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800c54c:	6034      	str	r4, [r6, #0]
 800c54e:	e7cd      	b.n	800c4ec <prvAddNewTaskToReadyList+0x64>
 800c550:	24024b10 	.word	0x24024b10
 800c554:	24024fe4 	.word	0x24024fe4
 800c558:	24024b84 	.word	0x24024b84
 800c55c:	24024b5c 	.word	0x24024b5c
 800c560:	24024b40 	.word	0x24024b40
 800c564:	24024b2c 	.word	0x24024b2c
 800c568:	24024b14 	.word	0x24024b14
 800c56c:	24024b58 	.word	0x24024b58
 800c570:	24024b54 	.word	0x24024b54
 800c574:	24024af4 	.word	0x24024af4
 800c578:	24024b08 	.word	0x24024b08
 800c57c:	24024b04 	.word	0x24024b04
 800c580:	24024b70 	.word	0x24024b70

0800c584 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c586:	4b15      	ldr	r3, [pc, #84]	@ (800c5dc <prvAddCurrentTaskToDelayedList+0x58>)
{
 800c588:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c58a:	4d15      	ldr	r5, [pc, #84]	@ (800c5e0 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800c58c:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800c58e:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c590:	6828      	ldr	r0, [r5, #0]
 800c592:	3004      	adds	r0, #4
 800c594:	f7ff f86a 	bl	800b66c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c598:	1c73      	adds	r3, r6, #1
 800c59a:	d107      	bne.n	800c5ac <prvAddCurrentTaskToDelayedList+0x28>
 800c59c:	b137      	cbz	r7, 800c5ac <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c59e:	6829      	ldr	r1, [r5, #0]
 800c5a0:	4810      	ldr	r0, [pc, #64]	@ (800c5e4 <prvAddCurrentTaskToDelayedList+0x60>)
 800c5a2:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c5a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5a8:	f7ff b83e 	b.w	800b628 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c5ac:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c5ae:	682b      	ldr	r3, [r5, #0]
 800c5b0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c5b2:	d307      	bcc.n	800c5c4 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c5e8 <prvAddCurrentTaskToDelayedList+0x64>)
 800c5b6:	6818      	ldr	r0, [r3, #0]
 800c5b8:	6829      	ldr	r1, [r5, #0]
}
 800c5ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5be:	3104      	adds	r1, #4
 800c5c0:	f7ff b83d 	b.w	800b63e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5c4:	4b09      	ldr	r3, [pc, #36]	@ (800c5ec <prvAddCurrentTaskToDelayedList+0x68>)
 800c5c6:	6818      	ldr	r0, [r3, #0]
 800c5c8:	6829      	ldr	r1, [r5, #0]
 800c5ca:	3104      	adds	r1, #4
 800c5cc:	f7ff f837 	bl	800b63e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5d0:	4b07      	ldr	r3, [pc, #28]	@ (800c5f0 <prvAddCurrentTaskToDelayedList+0x6c>)
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	42a2      	cmp	r2, r4
 800c5d6:	d900      	bls.n	800c5da <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800c5d8:	601c      	str	r4, [r3, #0]
}
 800c5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5dc:	24024b0c 	.word	0x24024b0c
 800c5e0:	24024fe4 	.word	0x24024fe4
 800c5e4:	24024b14 	.word	0x24024b14
 800c5e8:	24024b54 	.word	0x24024b54
 800c5ec:	24024b58 	.word	0x24024b58
 800c5f0:	24024af0 	.word	0x24024af0

0800c5f4 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5f4:	4a06      	ldr	r2, [pc, #24]	@ (800c610 <prvResetNextTaskUnblockTime+0x1c>)
 800c5f6:	6813      	ldr	r3, [r2, #0]
 800c5f8:	6819      	ldr	r1, [r3, #0]
 800c5fa:	4b06      	ldr	r3, [pc, #24]	@ (800c614 <prvResetNextTaskUnblockTime+0x20>)
 800c5fc:	b919      	cbnz	r1, 800c606 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800c5fe:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c602:	601a      	str	r2, [r3, #0]
}
 800c604:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c606:	6812      	ldr	r2, [r2, #0]
 800c608:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c60a:	68d2      	ldr	r2, [r2, #12]
 800c60c:	6852      	ldr	r2, [r2, #4]
 800c60e:	e7f8      	b.n	800c602 <prvResetNextTaskUnblockTime+0xe>
 800c610:	24024b58 	.word	0x24024b58
 800c614:	24024af0 	.word	0x24024af0

0800c618 <prvDeleteTCB>:
	{
 800c618:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c61a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800c61e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c620:	b93b      	cbnz	r3, 800c632 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800c622:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800c624:	f7fe ffb4 	bl	800b590 <vPortFree>
				vPortFree( pxTCB );
 800c628:	4620      	mov	r0, r4
	}
 800c62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800c62e:	f7fe bfaf 	b.w	800b590 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c632:	2b01      	cmp	r3, #1
 800c634:	d0f9      	beq.n	800c62a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c636:	2b02      	cmp	r3, #2
 800c638:	d008      	beq.n	800c64c <prvDeleteTCB+0x34>
 800c63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c63e:	f383 8811 	msr	BASEPRI, r3
 800c642:	f3bf 8f6f 	isb	sy
 800c646:	f3bf 8f4f 	dsb	sy
 800c64a:	e7fe      	b.n	800c64a <prvDeleteTCB+0x32>
	}
 800c64c:	bd10      	pop	{r4, pc}
	...

0800c650 <prvIdleTask>:
{
 800c650:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c652:	4c14      	ldr	r4, [pc, #80]	@ (800c6a4 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c654:	4f14      	ldr	r7, [pc, #80]	@ (800c6a8 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800c656:	4d15      	ldr	r5, [pc, #84]	@ (800c6ac <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c658:	6823      	ldr	r3, [r4, #0]
 800c65a:	b983      	cbnz	r3, 800c67e <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c65c:	4b14      	ldr	r3, [pc, #80]	@ (800c6b0 <prvIdleTask+0x60>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d909      	bls.n	800c678 <prvIdleTask+0x28>
				taskYIELD();
 800c664:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c668:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c66c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800c678:	f7f4 f83e 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c67c:	e7eb      	b.n	800c656 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800c67e:	f7ff f869 	bl	800b754 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c686:	1d30      	adds	r0, r6, #4
 800c688:	f7fe fff0 	bl	800b66c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c68c:	682b      	ldr	r3, [r5, #0]
 800c68e:	3b01      	subs	r3, #1
 800c690:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c692:	6823      	ldr	r3, [r4, #0]
 800c694:	3b01      	subs	r3, #1
 800c696:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800c698:	f7ff f87c 	bl	800b794 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800c69c:	4630      	mov	r0, r6
 800c69e:	f7ff ffbb 	bl	800c618 <prvDeleteTCB>
 800c6a2:	e7d9      	b.n	800c658 <prvIdleTask+0x8>
 800c6a4:	24024b28 	.word	0x24024b28
 800c6a8:	24024b2c 	.word	0x24024b2c
 800c6ac:	24024b10 	.word	0x24024b10
 800c6b0:	24024b84 	.word	0x24024b84

0800c6b4 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c6b8:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c6ba:	4607      	mov	r7, r0
 800c6bc:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c6be:	21a5      	movs	r1, #165	@ 0xa5
 800c6c0:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c6c2:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c6c4:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c6c6:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c6ca:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c6cc:	f014 fb08 	bl	8020ce0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c6d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c6d2:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c6d4:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800c6d8:	b3b5      	cbz	r5, 800c748 <prvInitialiseNewTask.constprop.0+0x94>
 800c6da:	1e6b      	subs	r3, r5, #1
 800c6dc:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800c6e0:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c6e2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800c6e6:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800c6ea:	b109      	cbz	r1, 800c6f0 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c6ec:	42ab      	cmp	r3, r5
 800c6ee:	d1f8      	bne.n	800c6e2 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c6f6:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800c6f8:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c6fc:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c6fe:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800c700:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c704:	bf28      	it	cs
 800c706:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800c708:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800c70a:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c70c:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c710:	f7fe ff87 	bl	800b622 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c714:	f104 0018 	add.w	r0, r4, #24
 800c718:	f7fe ff83 	bl	800b622 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800c71c:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c720:	4642      	mov	r2, r8
 800c722:	4639      	mov	r1, r7
 800c724:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c726:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c728:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c72a:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800c72c:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c730:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c734:	f7fe ffe8 	bl	800b708 <pxPortInitialiseStack>
 800c738:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800c73a:	f1b9 0f00 	cmp.w	r9, #0
 800c73e:	d001      	beq.n	800c744 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c740:	f8c9 4000 	str.w	r4, [r9]
}
 800c744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c748:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800c74c:	e7d3      	b.n	800c6f6 <prvInitialiseNewTask.constprop.0+0x42>

0800c74e <xTaskCreateStatic>:
	{
 800c74e:	b570      	push	{r4, r5, r6, lr}
 800c750:	b086      	sub	sp, #24
 800c752:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800c756:	b945      	cbnz	r5, 800c76a <xTaskCreateStatic+0x1c>
 800c758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c75c:	f383 8811 	msr	BASEPRI, r3
 800c760:	f3bf 8f6f 	isb	sy
 800c764:	f3bf 8f4f 	dsb	sy
 800c768:	e7fe      	b.n	800c768 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800c76a:	b944      	cbnz	r4, 800c77e <xTaskCreateStatic+0x30>
 800c76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c770:	f383 8811 	msr	BASEPRI, r3
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	f3bf 8f4f 	dsb	sy
 800c77c:	e7fe      	b.n	800c77c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800c77e:	2660      	movs	r6, #96	@ 0x60
 800c780:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c782:	9e05      	ldr	r6, [sp, #20]
 800c784:	2e60      	cmp	r6, #96	@ 0x60
 800c786:	d008      	beq.n	800c79a <xTaskCreateStatic+0x4c>
 800c788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c78c:	f383 8811 	msr	BASEPRI, r3
 800c790:	f3bf 8f6f 	isb	sy
 800c794:	f3bf 8f4f 	dsb	sy
 800c798:	e7fe      	b.n	800c798 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c79a:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c79c:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c79e:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c7a0:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c7a4:	ad04      	add	r5, sp, #16
 800c7a6:	9402      	str	r4, [sp, #8]
 800c7a8:	9501      	str	r5, [sp, #4]
 800c7aa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c7ac:	9500      	str	r5, [sp, #0]
 800c7ae:	f7ff ff81 	bl	800c6b4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f7ff fe68 	bl	800c488 <prvAddNewTaskToReadyList>
	}
 800c7b8:	9804      	ldr	r0, [sp, #16]
 800c7ba:	b006      	add	sp, #24
 800c7bc:	bd70      	pop	{r4, r5, r6, pc}

0800c7be <xTaskCreate>:
	{
 800c7be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7c2:	4607      	mov	r7, r0
 800c7c4:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c7c6:	0090      	lsls	r0, r2, #2
	{
 800c7c8:	4688      	mov	r8, r1
 800c7ca:	4616      	mov	r6, r2
 800c7cc:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c7ce:	f7fe fe47 	bl	800b460 <pvPortMalloc>
			if( pxStack != NULL )
 800c7d2:	4605      	mov	r5, r0
 800c7d4:	b920      	cbnz	r0, 800c7e0 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c7d6:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800c7da:	b005      	add	sp, #20
 800c7dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c7e0:	2060      	movs	r0, #96	@ 0x60
 800c7e2:	f7fe fe3d 	bl	800b460 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	b198      	cbz	r0, 800c812 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c7ea:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800c7ec:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c7ee:	4632      	mov	r2, r6
 800c7f0:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c7f2:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c7f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c7f8:	9002      	str	r0, [sp, #8]
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	9301      	str	r3, [sp, #4]
 800c7fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c800:	9300      	str	r3, [sp, #0]
 800c802:	464b      	mov	r3, r9
 800c804:	f7ff ff56 	bl	800c6b4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c808:	4620      	mov	r0, r4
 800c80a:	f7ff fe3d 	bl	800c488 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c80e:	2001      	movs	r0, #1
 800c810:	e7e3      	b.n	800c7da <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800c812:	4628      	mov	r0, r5
 800c814:	f7fe febc 	bl	800b590 <vPortFree>
		if( pxNewTCB != NULL )
 800c818:	e7dd      	b.n	800c7d6 <xTaskCreate+0x18>
	...

0800c81c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800c81c:	4a02      	ldr	r2, [pc, #8]	@ (800c828 <vTaskSuspendAll+0xc>)
 800c81e:	6813      	ldr	r3, [r2, #0]
 800c820:	3301      	adds	r3, #1
 800c822:	6013      	str	r3, [r2, #0]
}
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	24024aec 	.word	0x24024aec

0800c82c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800c82c:	4b01      	ldr	r3, [pc, #4]	@ (800c834 <xTaskGetTickCount+0x8>)
 800c82e:	6818      	ldr	r0, [r3, #0]
}
 800c830:	4770      	bx	lr
 800c832:	bf00      	nop
 800c834:	24024b0c 	.word	0x24024b0c

0800c838 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c838:	4b3f      	ldr	r3, [pc, #252]	@ (800c938 <xTaskIncrementTick+0x100>)
 800c83a:	681b      	ldr	r3, [r3, #0]
{
 800c83c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c840:	2b00      	cmp	r3, #0
 800c842:	d172      	bne.n	800c92a <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c844:	4b3d      	ldr	r3, [pc, #244]	@ (800c93c <xTaskIncrementTick+0x104>)
 800c846:	681c      	ldr	r4, [r3, #0]
 800c848:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800c84a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c84c:	b9bc      	cbnz	r4, 800c87e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800c84e:	4b3c      	ldr	r3, [pc, #240]	@ (800c940 <xTaskIncrementTick+0x108>)
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	6812      	ldr	r2, [r2, #0]
 800c854:	b142      	cbz	r2, 800c868 <xTaskIncrementTick+0x30>
 800c856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	e7fe      	b.n	800c866 <xTaskIncrementTick+0x2e>
 800c868:	4a36      	ldr	r2, [pc, #216]	@ (800c944 <xTaskIncrementTick+0x10c>)
 800c86a:	6819      	ldr	r1, [r3, #0]
 800c86c:	6810      	ldr	r0, [r2, #0]
 800c86e:	6018      	str	r0, [r3, #0]
 800c870:	6011      	str	r1, [r2, #0]
 800c872:	4a35      	ldr	r2, [pc, #212]	@ (800c948 <xTaskIncrementTick+0x110>)
 800c874:	6813      	ldr	r3, [r2, #0]
 800c876:	3301      	adds	r3, #1
 800c878:	6013      	str	r3, [r2, #0]
 800c87a:	f7ff febb 	bl	800c5f4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c87e:	4d33      	ldr	r5, [pc, #204]	@ (800c94c <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800c880:	f04f 0b00 	mov.w	fp, #0
 800c884:	4e32      	ldr	r6, [pc, #200]	@ (800c950 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c886:	682b      	ldr	r3, [r5, #0]
 800c888:	4f32      	ldr	r7, [pc, #200]	@ (800c954 <xTaskIncrementTick+0x11c>)
 800c88a:	429c      	cmp	r4, r3
 800c88c:	d212      	bcs.n	800c8b4 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c88e:	683a      	ldr	r2, [r7, #0]
 800c890:	2114      	movs	r1, #20
 800c892:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c894:	434a      	muls	r2, r1
 800c896:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800c898:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800c89a:	4a2f      	ldr	r2, [pc, #188]	@ (800c958 <xTaskIncrementTick+0x120>)
 800c89c:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800c89e:	bf28      	it	cs
 800c8a0:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800c8a4:	2a00      	cmp	r2, #0
 800c8a6:	bf18      	it	ne
 800c8a8:	f04f 0b01 	movne.w	fp, #1
}
 800c8ac:	4658      	mov	r0, fp
 800c8ae:	b003      	add	sp, #12
 800c8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8b4:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800c940 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800c8b8:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800c960 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8bc:	f8d9 2000 	ldr.w	r2, [r9]
 800c8c0:	6812      	ldr	r2, [r2, #0]
 800c8c2:	b91a      	cbnz	r2, 800c8cc <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8c8:	602a      	str	r2, [r5, #0]
					break;
 800c8ca:	e7e0      	b.n	800c88e <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8cc:	f8d9 2000 	ldr.w	r2, [r9]
 800c8d0:	68d2      	ldr	r2, [r2, #12]
 800c8d2:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c8d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800c8da:	428c      	cmp	r4, r1
 800c8dc:	d201      	bcs.n	800c8e2 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800c8de:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c8e0:	e7d5      	b.n	800c88e <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8e2:	f108 0304 	add.w	r3, r8, #4
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	9301      	str	r3, [sp, #4]
 800c8ea:	f7fe febf 	bl	800b66c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c8ee:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800c8f2:	b119      	cbz	r1, 800c8fc <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c8f4:	f108 0018 	add.w	r0, r8, #24
 800c8f8:	f7fe feb8 	bl	800b66c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c8fc:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800c900:	f8da 1000 	ldr.w	r1, [sl]
 800c904:	4288      	cmp	r0, r1
 800c906:	d901      	bls.n	800c90c <xTaskIncrementTick+0xd4>
 800c908:	f8ca 0000 	str.w	r0, [sl]
 800c90c:	2314      	movs	r3, #20
 800c90e:	9901      	ldr	r1, [sp, #4]
 800c910:	fb03 6000 	mla	r0, r3, r0, r6
 800c914:	f7fe fe88 	bl	800b628 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c918:	6838      	ldr	r0, [r7, #0]
 800c91a:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800c91e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800c920:	4291      	cmp	r1, r2
 800c922:	bf28      	it	cs
 800c924:	f04f 0b01 	movcs.w	fp, #1
 800c928:	e7c8      	b.n	800c8bc <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800c92a:	4a0c      	ldr	r2, [pc, #48]	@ (800c95c <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800c92c:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800c930:	6813      	ldr	r3, [r2, #0]
 800c932:	3301      	adds	r3, #1
 800c934:	6013      	str	r3, [r2, #0]
 800c936:	e7b9      	b.n	800c8ac <xTaskIncrementTick+0x74>
 800c938:	24024aec 	.word	0x24024aec
 800c93c:	24024b0c 	.word	0x24024b0c
 800c940:	24024b58 	.word	0x24024b58
 800c944:	24024b54 	.word	0x24024b54
 800c948:	24024af8 	.word	0x24024af8
 800c94c:	24024af0 	.word	0x24024af0
 800c950:	24024b84 	.word	0x24024b84
 800c954:	24024fe4 	.word	0x24024fe4
 800c958:	24024afc 	.word	0x24024afc
 800c95c:	24024b00 	.word	0x24024b00
 800c960:	24024b08 	.word	0x24024b08

0800c964 <xTaskResumeAll>:
{
 800c964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800c968:	4c30      	ldr	r4, [pc, #192]	@ (800ca2c <xTaskResumeAll+0xc8>)
 800c96a:	6823      	ldr	r3, [r4, #0]
 800c96c:	b943      	cbnz	r3, 800c980 <xTaskResumeAll+0x1c>
 800c96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c972:	f383 8811 	msr	BASEPRI, r3
 800c976:	f3bf 8f6f 	isb	sy
 800c97a:	f3bf 8f4f 	dsb	sy
 800c97e:	e7fe      	b.n	800c97e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800c980:	f7fe fee8 	bl	800b754 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800c984:	6823      	ldr	r3, [r4, #0]
 800c986:	3b01      	subs	r3, #1
 800c988:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c98a:	6824      	ldr	r4, [r4, #0]
 800c98c:	b12c      	cbz	r4, 800c99a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800c98e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800c990:	f7fe ff00 	bl	800b794 <vPortExitCritical>
}
 800c994:	4620      	mov	r0, r4
 800c996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c99a:	4b25      	ldr	r3, [pc, #148]	@ (800ca30 <xTaskResumeAll+0xcc>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d0f5      	beq.n	800c98e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9a2:	4d24      	ldr	r5, [pc, #144]	@ (800ca34 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800c9a4:	4e24      	ldr	r6, [pc, #144]	@ (800ca38 <xTaskResumeAll+0xd4>)
 800c9a6:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800ca48 <xTaskResumeAll+0xe4>
 800c9aa:	e01d      	b.n	800c9e8 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9ac:	68eb      	ldr	r3, [r5, #12]
 800c9ae:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9b0:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9b2:	f104 0018 	add.w	r0, r4, #24
 800c9b6:	f7fe fe59 	bl	800b66c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9ba:	4638      	mov	r0, r7
 800c9bc:	f7fe fe56 	bl	800b66c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c9c2:	6832      	ldr	r2, [r6, #0]
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d900      	bls.n	800c9ca <xTaskResumeAll+0x66>
 800c9c8:	6033      	str	r3, [r6, #0]
 800c9ca:	2014      	movs	r0, #20
 800c9cc:	4639      	mov	r1, r7
 800c9ce:	fb00 8003 	mla	r0, r0, r3, r8
 800c9d2:	f7fe fe29 	bl	800b628 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9d6:	4b19      	ldr	r3, [pc, #100]	@ (800ca3c <xTaskResumeAll+0xd8>)
 800c9d8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d302      	bcc.n	800c9e8 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800c9e2:	4b17      	ldr	r3, [pc, #92]	@ (800ca40 <xTaskResumeAll+0xdc>)
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9e8:	682b      	ldr	r3, [r5, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1de      	bne.n	800c9ac <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800c9ee:	b10c      	cbz	r4, 800c9f4 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800c9f0:	f7ff fe00 	bl	800c5f4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c9f4:	4d13      	ldr	r5, [pc, #76]	@ (800ca44 <xTaskResumeAll+0xe0>)
 800c9f6:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800c9f8:	b144      	cbz	r4, 800ca0c <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800c9fa:	4e11      	ldr	r6, [pc, #68]	@ (800ca40 <xTaskResumeAll+0xdc>)
 800c9fc:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800c9fe:	f7ff ff1b 	bl	800c838 <xTaskIncrementTick>
 800ca02:	b100      	cbz	r0, 800ca06 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800ca04:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ca06:	3c01      	subs	r4, #1
 800ca08:	d1f9      	bne.n	800c9fe <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800ca0a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800ca0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ca40 <xTaskResumeAll+0xdc>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d0bc      	beq.n	800c98e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800ca14:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ca18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca1c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ca20:	f3bf 8f4f 	dsb	sy
 800ca24:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800ca28:	2401      	movs	r4, #1
 800ca2a:	e7b1      	b.n	800c990 <xTaskResumeAll+0x2c>
 800ca2c:	24024aec 	.word	0x24024aec
 800ca30:	24024b10 	.word	0x24024b10
 800ca34:	24024b40 	.word	0x24024b40
 800ca38:	24024b08 	.word	0x24024b08
 800ca3c:	24024fe4 	.word	0x24024fe4
 800ca40:	24024afc 	.word	0x24024afc
 800ca44:	24024b00 	.word	0x24024b00
 800ca48:	24024b84 	.word	0x24024b84

0800ca4c <vTaskSetApplicationTaskTag>:
	{
 800ca4c:	b538      	push	{r3, r4, r5, lr}
 800ca4e:	460d      	mov	r5, r1
		if( xTask == NULL )
 800ca50:	4604      	mov	r4, r0
 800ca52:	b908      	cbnz	r0, 800ca58 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800ca54:	4b04      	ldr	r3, [pc, #16]	@ (800ca68 <vTaskSetApplicationTaskTag+0x1c>)
 800ca56:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800ca58:	f7fe fe7c 	bl	800b754 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800ca5c:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800ca5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800ca62:	f7fe be97 	b.w	800b794 <vPortExitCritical>
 800ca66:	bf00      	nop
 800ca68:	24024fe4 	.word	0x24024fe4

0800ca6c <xTaskCallApplicationTaskHook>:
	{
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	4608      	mov	r0, r1
		if( xTask == NULL )
 800ca70:	b90b      	cbnz	r3, 800ca76 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800ca72:	4b03      	ldr	r3, [pc, #12]	@ (800ca80 <xTaskCallApplicationTaskHook+0x14>)
 800ca74:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800ca76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca78:	b103      	cbz	r3, 800ca7c <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800ca7a:	4718      	bx	r3
	}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	4770      	bx	lr
 800ca80:	24024fe4 	.word	0x24024fe4

0800ca84 <vTaskStartScheduler>:
{
 800ca84:	b510      	push	{r4, lr}
 800ca86:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ca88:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ca8a:	aa07      	add	r2, sp, #28
 800ca8c:	a906      	add	r1, sp, #24
 800ca8e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ca90:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ca94:	f7fe fca6 	bl	800b3e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ca98:	9b05      	ldr	r3, [sp, #20]
 800ca9a:	9a07      	ldr	r2, [sp, #28]
 800ca9c:	9302      	str	r3, [sp, #8]
 800ca9e:	9b06      	ldr	r3, [sp, #24]
 800caa0:	4919      	ldr	r1, [pc, #100]	@ (800cb08 <vTaskStartScheduler+0x84>)
 800caa2:	481a      	ldr	r0, [pc, #104]	@ (800cb0c <vTaskStartScheduler+0x88>)
 800caa4:	e9cd 4300 	strd	r4, r3, [sp]
 800caa8:	4623      	mov	r3, r4
 800caaa:	f7ff fe50 	bl	800c74e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800caae:	b340      	cbz	r0, 800cb02 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800cab0:	f000 fa84 	bl	800cfbc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800cab4:	2801      	cmp	r0, #1
 800cab6:	d119      	bne.n	800caec <vTaskStartScheduler+0x68>
 800cab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cabc:	f383 8811 	msr	BASEPRI, r3
 800cac0:	f3bf 8f6f 	isb	sy
 800cac4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800cac8:	f04f 32ff 	mov.w	r2, #4294967295
 800cacc:	4b10      	ldr	r3, [pc, #64]	@ (800cb10 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800cace:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800cad0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cad2:	4b10      	ldr	r3, [pc, #64]	@ (800cb14 <vTaskStartScheduler+0x90>)
 800cad4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cad6:	4b10      	ldr	r3, [pc, #64]	@ (800cb18 <vTaskStartScheduler+0x94>)
 800cad8:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800cada:	4b10      	ldr	r3, [pc, #64]	@ (800cb1c <vTaskStartScheduler+0x98>)
 800cadc:	6818      	ldr	r0, [r3, #0]
 800cade:	f7ff ffc5 	bl	800ca6c <xTaskCallApplicationTaskHook>
}
 800cae2:	b008      	add	sp, #32
 800cae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800cae8:	f7fe bec4 	b.w	800b874 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800caec:	3001      	adds	r0, #1
 800caee:	d108      	bne.n	800cb02 <vTaskStartScheduler+0x7e>
 800caf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf4:	f383 8811 	msr	BASEPRI, r3
 800caf8:	f3bf 8f6f 	isb	sy
 800cafc:	f3bf 8f4f 	dsb	sy
 800cb00:	e7fe      	b.n	800cb00 <vTaskStartScheduler+0x7c>
}
 800cb02:	b008      	add	sp, #32
 800cb04:	bd10      	pop	{r4, pc}
 800cb06:	bf00      	nop
 800cb08:	080235e2 	.word	0x080235e2
 800cb0c:	0800c651 	.word	0x0800c651
 800cb10:	24024af0 	.word	0x24024af0
 800cb14:	24024b04 	.word	0x24024b04
 800cb18:	24024b0c 	.word	0x24024b0c
 800cb1c:	24024fe4 	.word	0x24024fe4

0800cb20 <vTaskSwitchContext>:
{
 800cb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cb22:	4b1c      	ldr	r3, [pc, #112]	@ (800cb94 <vTaskSwitchContext+0x74>)
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	4b1c      	ldr	r3, [pc, #112]	@ (800cb98 <vTaskSwitchContext+0x78>)
 800cb28:	b112      	cbz	r2, 800cb30 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	601a      	str	r2, [r3, #0]
}
 800cb2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800cb30:	4c1a      	ldr	r4, [pc, #104]	@ (800cb9c <vTaskSwitchContext+0x7c>)
 800cb32:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb34:	4e1a      	ldr	r6, [pc, #104]	@ (800cba0 <vTaskSwitchContext+0x80>)
 800cb36:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800cb38:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800cb3a:	6820      	ldr	r0, [r4, #0]
 800cb3c:	f7ff ff96 	bl	800ca6c <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb40:	6832      	ldr	r2, [r6, #0]
 800cb42:	4918      	ldr	r1, [pc, #96]	@ (800cba4 <vTaskSwitchContext+0x84>)
 800cb44:	fb07 f302 	mul.w	r3, r7, r2
 800cb48:	58cd      	ldr	r5, [r1, r3]
 800cb4a:	18c8      	adds	r0, r1, r3
 800cb4c:	b1ad      	cbz	r5, 800cb7a <vTaskSwitchContext+0x5a>
 800cb4e:	6845      	ldr	r5, [r0, #4]
 800cb50:	3308      	adds	r3, #8
 800cb52:	686d      	ldr	r5, [r5, #4]
 800cb54:	440b      	add	r3, r1
 800cb56:	429d      	cmp	r5, r3
 800cb58:	6045      	str	r5, [r0, #4]
 800cb5a:	bf04      	itt	eq
 800cb5c:	686b      	ldreq	r3, [r5, #4]
 800cb5e:	6043      	streq	r3, [r0, #4]
 800cb60:	2314      	movs	r3, #20
 800cb62:	fb03 1102 	mla	r1, r3, r2, r1
 800cb66:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800cb68:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800cb70:	6820      	ldr	r0, [r4, #0]
}
 800cb72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800cb76:	f7ff bf79 	b.w	800ca6c <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb7a:	b942      	cbnz	r2, 800cb8e <vTaskSwitchContext+0x6e>
 800cb7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	e7fe      	b.n	800cb8c <vTaskSwitchContext+0x6c>
 800cb8e:	3a01      	subs	r2, #1
 800cb90:	e7d8      	b.n	800cb44 <vTaskSwitchContext+0x24>
 800cb92:	bf00      	nop
 800cb94:	24024aec 	.word	0x24024aec
 800cb98:	24024afc 	.word	0x24024afc
 800cb9c:	24024fe4 	.word	0x24024fe4
 800cba0:	24024b08 	.word	0x24024b08
 800cba4:	24024b84 	.word	0x24024b84

0800cba8 <vTaskPlaceOnEventList>:
{
 800cba8:	b510      	push	{r4, lr}
 800cbaa:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800cbac:	b940      	cbnz	r0, 800cbc0 <vTaskPlaceOnEventList+0x18>
 800cbae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	e7fe      	b.n	800cbbe <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cbc0:	4b05      	ldr	r3, [pc, #20]	@ (800cbd8 <vTaskPlaceOnEventList+0x30>)
 800cbc2:	6819      	ldr	r1, [r3, #0]
 800cbc4:	3118      	adds	r1, #24
 800cbc6:	f7fe fd3a 	bl	800b63e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cbca:	4620      	mov	r0, r4
 800cbcc:	2101      	movs	r1, #1
}
 800cbce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cbd2:	f7ff bcd7 	b.w	800c584 <prvAddCurrentTaskToDelayedList>
 800cbd6:	bf00      	nop
 800cbd8:	24024fe4 	.word	0x24024fe4

0800cbdc <vTaskPlaceOnEventListRestricted>:
	{
 800cbdc:	b538      	push	{r3, r4, r5, lr}
 800cbde:	460d      	mov	r5, r1
 800cbe0:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800cbe2:	b940      	cbnz	r0, 800cbf6 <vTaskPlaceOnEventListRestricted+0x1a>
 800cbe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbe8:	f383 8811 	msr	BASEPRI, r3
 800cbec:	f3bf 8f6f 	isb	sy
 800cbf0:	f3bf 8f4f 	dsb	sy
 800cbf4:	e7fe      	b.n	800cbf4 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cbf6:	4b07      	ldr	r3, [pc, #28]	@ (800cc14 <vTaskPlaceOnEventListRestricted+0x38>)
 800cbf8:	6819      	ldr	r1, [r3, #0]
 800cbfa:	3118      	adds	r1, #24
 800cbfc:	f7fe fd14 	bl	800b628 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800cc00:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cc02:	4621      	mov	r1, r4
 800cc04:	bf0c      	ite	eq
 800cc06:	4628      	moveq	r0, r5
 800cc08:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800cc0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cc10:	f7ff bcb8 	b.w	800c584 <prvAddCurrentTaskToDelayedList>
 800cc14:	24024fe4 	.word	0x24024fe4

0800cc18 <xTaskRemoveFromEventList>:
{
 800cc18:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc1a:	68c3      	ldr	r3, [r0, #12]
 800cc1c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800cc1e:	b944      	cbnz	r4, 800cc32 <xTaskRemoveFromEventList+0x1a>
 800cc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	e7fe      	b.n	800cc30 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cc32:	f104 0518 	add.w	r5, r4, #24
 800cc36:	4628      	mov	r0, r5
 800cc38:	f7fe fd18 	bl	800b66c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc3c:	4b11      	ldr	r3, [pc, #68]	@ (800cc84 <xTaskRemoveFromEventList+0x6c>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	b9d3      	cbnz	r3, 800cc78 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cc42:	1d25      	adds	r5, r4, #4
 800cc44:	4628      	mov	r0, r5
 800cc46:	f7fe fd11 	bl	800b66c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cc4a:	4a0f      	ldr	r2, [pc, #60]	@ (800cc88 <xTaskRemoveFromEventList+0x70>)
 800cc4c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cc4e:	6811      	ldr	r1, [r2, #0]
 800cc50:	428b      	cmp	r3, r1
 800cc52:	d900      	bls.n	800cc56 <xTaskRemoveFromEventList+0x3e>
 800cc54:	6013      	str	r3, [r2, #0]
 800cc56:	2014      	movs	r0, #20
 800cc58:	4a0c      	ldr	r2, [pc, #48]	@ (800cc8c <xTaskRemoveFromEventList+0x74>)
 800cc5a:	4629      	mov	r1, r5
 800cc5c:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cc60:	f7fe fce2 	bl	800b628 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc64:	4b0a      	ldr	r3, [pc, #40]	@ (800cc90 <xTaskRemoveFromEventList+0x78>)
 800cc66:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d906      	bls.n	800cc7e <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800cc70:	2001      	movs	r0, #1
 800cc72:	4b08      	ldr	r3, [pc, #32]	@ (800cc94 <xTaskRemoveFromEventList+0x7c>)
 800cc74:	6018      	str	r0, [r3, #0]
}
 800cc76:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cc78:	4629      	mov	r1, r5
 800cc7a:	4807      	ldr	r0, [pc, #28]	@ (800cc98 <xTaskRemoveFromEventList+0x80>)
 800cc7c:	e7f0      	b.n	800cc60 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800cc7e:	2000      	movs	r0, #0
	return xReturn;
 800cc80:	e7f9      	b.n	800cc76 <xTaskRemoveFromEventList+0x5e>
 800cc82:	bf00      	nop
 800cc84:	24024aec 	.word	0x24024aec
 800cc88:	24024b08 	.word	0x24024b08
 800cc8c:	24024b84 	.word	0x24024b84
 800cc90:	24024fe4 	.word	0x24024fe4
 800cc94:	24024afc 	.word	0x24024afc
 800cc98:	24024b40 	.word	0x24024b40

0800cc9c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cc9c:	4b03      	ldr	r3, [pc, #12]	@ (800ccac <vTaskInternalSetTimeOutState+0x10>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cca2:	4b03      	ldr	r3, [pc, #12]	@ (800ccb0 <vTaskInternalSetTimeOutState+0x14>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	6043      	str	r3, [r0, #4]
}
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop
 800ccac:	24024af8 	.word	0x24024af8
 800ccb0:	24024b0c 	.word	0x24024b0c

0800ccb4 <xTaskCheckForTimeOut>:
{
 800ccb4:	b570      	push	{r4, r5, r6, lr}
 800ccb6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800ccb8:	4605      	mov	r5, r0
 800ccba:	b940      	cbnz	r0, 800ccce <xTaskCheckForTimeOut+0x1a>
 800ccbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc0:	f383 8811 	msr	BASEPRI, r3
 800ccc4:	f3bf 8f6f 	isb	sy
 800ccc8:	f3bf 8f4f 	dsb	sy
 800cccc:	e7fe      	b.n	800cccc <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800ccce:	b941      	cbnz	r1, 800cce2 <xTaskCheckForTimeOut+0x2e>
 800ccd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd4:	f383 8811 	msr	BASEPRI, r3
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	f3bf 8f4f 	dsb	sy
 800cce0:	e7fe      	b.n	800cce0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800cce2:	f7fe fd37 	bl	800b754 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800cce6:	4b0f      	ldr	r3, [pc, #60]	@ (800cd24 <xTaskCheckForTimeOut+0x70>)
 800cce8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ccea:	6823      	ldr	r3, [r4, #0]
 800ccec:	1c5a      	adds	r2, r3, #1
 800ccee:	d010      	beq.n	800cd12 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ccf0:	480d      	ldr	r0, [pc, #52]	@ (800cd28 <xTaskCheckForTimeOut+0x74>)
 800ccf2:	682e      	ldr	r6, [r5, #0]
 800ccf4:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ccf6:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ccf8:	4286      	cmp	r6, r0
 800ccfa:	d001      	beq.n	800cd00 <xTaskCheckForTimeOut+0x4c>
 800ccfc:	428a      	cmp	r2, r1
 800ccfe:	d90f      	bls.n	800cd20 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd00:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd02:	4283      	cmp	r3, r0
 800cd04:	d90a      	bls.n	800cd1c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800cd06:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd08:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800cd0a:	4413      	add	r3, r2
 800cd0c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd0e:	f7ff ffc5 	bl	800cc9c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800cd12:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800cd14:	f7fe fd3e 	bl	800b794 <vPortExitCritical>
}
 800cd18:	4620      	mov	r0, r4
 800cd1a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800cd20:	2401      	movs	r4, #1
 800cd22:	e7f7      	b.n	800cd14 <xTaskCheckForTimeOut+0x60>
 800cd24:	24024b0c 	.word	0x24024b0c
 800cd28:	24024af8 	.word	0x24024af8

0800cd2c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800cd2c:	4b01      	ldr	r3, [pc, #4]	@ (800cd34 <vTaskMissedYield+0x8>)
 800cd2e:	2201      	movs	r2, #1
 800cd30:	601a      	str	r2, [r3, #0]
}
 800cd32:	4770      	bx	lr
 800cd34:	24024afc 	.word	0x24024afc

0800cd38 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800cd38:	4b01      	ldr	r3, [pc, #4]	@ (800cd40 <xTaskGetCurrentTaskHandle+0x8>)
 800cd3a:	6818      	ldr	r0, [r3, #0]
	}
 800cd3c:	4770      	bx	lr
 800cd3e:	bf00      	nop
 800cd40:	24024fe4 	.word	0x24024fe4

0800cd44 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800cd44:	4b05      	ldr	r3, [pc, #20]	@ (800cd5c <xTaskGetSchedulerState+0x18>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	b133      	cbz	r3, 800cd58 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd4a:	4b05      	ldr	r3, [pc, #20]	@ (800cd60 <xTaskGetSchedulerState+0x1c>)
 800cd4c:	6818      	ldr	r0, [r3, #0]
 800cd4e:	fab0 f080 	clz	r0, r0
 800cd52:	0940      	lsrs	r0, r0, #5
 800cd54:	0040      	lsls	r0, r0, #1
 800cd56:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cd58:	2001      	movs	r0, #1
	}
 800cd5a:	4770      	bx	lr
 800cd5c:	24024b04 	.word	0x24024b04
 800cd60:	24024aec 	.word	0x24024aec

0800cd64 <xTaskPriorityInherit>:
	{
 800cd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800cd66:	4604      	mov	r4, r0
 800cd68:	b338      	cbz	r0, 800cdba <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cd6a:	4d1a      	ldr	r5, [pc, #104]	@ (800cdd4 <xTaskPriorityInherit+0x70>)
 800cd6c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800cd6e:	682a      	ldr	r2, [r5, #0]
 800cd70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d226      	bcs.n	800cdc4 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd76:	6982      	ldr	r2, [r0, #24]
 800cd78:	2a00      	cmp	r2, #0
 800cd7a:	db04      	blt.n	800cd86 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd7c:	682a      	ldr	r2, [r5, #0]
 800cd7e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cd80:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800cd84:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cd86:	2214      	movs	r2, #20
 800cd88:	4e13      	ldr	r6, [pc, #76]	@ (800cdd8 <xTaskPriorityInherit+0x74>)
 800cd8a:	fb02 6303 	mla	r3, r2, r3, r6
 800cd8e:	6962      	ldr	r2, [r4, #20]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d113      	bne.n	800cdbc <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd94:	1d27      	adds	r7, r4, #4
 800cd96:	4638      	mov	r0, r7
 800cd98:	f7fe fc68 	bl	800b66c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cd9c:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cd9e:	4a0f      	ldr	r2, [pc, #60]	@ (800cddc <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cda0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cda2:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cda4:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cda6:	428b      	cmp	r3, r1
 800cda8:	d900      	bls.n	800cdac <xTaskPriorityInherit+0x48>
 800cdaa:	6013      	str	r3, [r2, #0]
 800cdac:	2014      	movs	r0, #20
 800cdae:	4639      	mov	r1, r7
 800cdb0:	fb00 6003 	mla	r0, r0, r3, r6
 800cdb4:	f7fe fc38 	bl	800b628 <vListInsertEnd>
				xReturn = pdTRUE;
 800cdb8:	2001      	movs	r0, #1
	}
 800cdba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cdbc:	682b      	ldr	r3, [r5, #0]
 800cdbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cdc2:	e7f9      	b.n	800cdb8 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cdc4:	682b      	ldr	r3, [r5, #0]
 800cdc6:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800cdc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdca:	4298      	cmp	r0, r3
 800cdcc:	bf2c      	ite	cs
 800cdce:	2000      	movcs	r0, #0
 800cdd0:	2001      	movcc	r0, #1
 800cdd2:	e7f2      	b.n	800cdba <xTaskPriorityInherit+0x56>
 800cdd4:	24024fe4 	.word	0x24024fe4
 800cdd8:	24024b84 	.word	0x24024b84
 800cddc:	24024b08 	.word	0x24024b08

0800cde0 <xTaskPriorityDisinherit>:
	{
 800cde0:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800cde2:	b908      	cbnz	r0, 800cde8 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800cde4:	2000      	movs	r0, #0
	}
 800cde6:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800cde8:	4b1b      	ldr	r3, [pc, #108]	@ (800ce58 <xTaskPriorityDisinherit+0x78>)
 800cdea:	681c      	ldr	r4, [r3, #0]
 800cdec:	4284      	cmp	r4, r0
 800cdee:	d008      	beq.n	800ce02 <xTaskPriorityDisinherit+0x22>
 800cdf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdf4:	f383 8811 	msr	BASEPRI, r3
 800cdf8:	f3bf 8f6f 	isb	sy
 800cdfc:	f3bf 8f4f 	dsb	sy
 800ce00:	e7fe      	b.n	800ce00 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800ce02:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ce04:	b943      	cbnz	r3, 800ce18 <xTaskPriorityDisinherit+0x38>
 800ce06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce0a:	f383 8811 	msr	BASEPRI, r3
 800ce0e:	f3bf 8f6f 	isb	sy
 800ce12:	f3bf 8f4f 	dsb	sy
 800ce16:	e7fe      	b.n	800ce16 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ce18:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800ce1a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ce1c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800ce1e:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ce20:	4291      	cmp	r1, r2
 800ce22:	d0df      	beq.n	800cde4 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d1dd      	bne.n	800cde4 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce28:	1d25      	adds	r5, r4, #4
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	f7fe fc1e 	bl	800b66c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce30:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce32:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce36:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce38:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ce3a:	4a08      	ldr	r2, [pc, #32]	@ (800ce5c <xTaskPriorityDisinherit+0x7c>)
 800ce3c:	6811      	ldr	r1, [r2, #0]
 800ce3e:	428b      	cmp	r3, r1
 800ce40:	d900      	bls.n	800ce44 <xTaskPriorityDisinherit+0x64>
 800ce42:	6013      	str	r3, [r2, #0]
 800ce44:	4a06      	ldr	r2, [pc, #24]	@ (800ce60 <xTaskPriorityDisinherit+0x80>)
 800ce46:	2014      	movs	r0, #20
 800ce48:	4629      	mov	r1, r5
 800ce4a:	fb00 2003 	mla	r0, r0, r3, r2
 800ce4e:	f7fe fbeb 	bl	800b628 <vListInsertEnd>
					xReturn = pdTRUE;
 800ce52:	2001      	movs	r0, #1
		return xReturn;
 800ce54:	e7c7      	b.n	800cde6 <xTaskPriorityDisinherit+0x6>
 800ce56:	bf00      	nop
 800ce58:	24024fe4 	.word	0x24024fe4
 800ce5c:	24024b08 	.word	0x24024b08
 800ce60:	24024b84 	.word	0x24024b84

0800ce64 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800ce64:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800ce66:	4604      	mov	r4, r0
 800ce68:	2800      	cmp	r0, #0
 800ce6a:	d042      	beq.n	800cef2 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800ce6c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800ce6e:	b942      	cbnz	r2, 800ce82 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800ce70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce74:	f383 8811 	msr	BASEPRI, r3
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	f3bf 8f4f 	dsb	sy
 800ce80:	e7fe      	b.n	800ce80 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ce82:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800ce84:	4299      	cmp	r1, r3
 800ce86:	bf38      	it	cc
 800ce88:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ce8a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800ce8c:	428b      	cmp	r3, r1
 800ce8e:	d030      	beq.n	800cef2 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ce90:	2a01      	cmp	r2, #1
 800ce92:	d12e      	bne.n	800cef2 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800ce94:	4a17      	ldr	r2, [pc, #92]	@ (800cef4 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800ce96:	6812      	ldr	r2, [r2, #0]
 800ce98:	4282      	cmp	r2, r0
 800ce9a:	d108      	bne.n	800ceae <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800ce9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea0:	f383 8811 	msr	BASEPRI, r3
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	e7fe      	b.n	800ceac <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ceae:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ceb0:	4d11      	ldr	r5, [pc, #68]	@ (800cef8 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ceb2:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ceb4:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800ceb8:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ceba:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cebe:	bfa8      	it	ge
 800cec0:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cec4:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cec6:	bfa8      	it	ge
 800cec8:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d111      	bne.n	800cef2 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cece:	1d06      	adds	r6, r0, #4
 800ced0:	4630      	mov	r0, r6
 800ced2:	f7fe fbcb 	bl	800b66c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ced6:	4a09      	ldr	r2, [pc, #36]	@ (800cefc <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800ced8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ceda:	6811      	ldr	r1, [r2, #0]
 800cedc:	428b      	cmp	r3, r1
 800cede:	d900      	bls.n	800cee2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800cee0:	6013      	str	r3, [r2, #0]
 800cee2:	2014      	movs	r0, #20
 800cee4:	4631      	mov	r1, r6
 800cee6:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800ceea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800ceee:	f7fe bb9b 	b.w	800b628 <vListInsertEnd>
	}
 800cef2:	bd70      	pop	{r4, r5, r6, pc}
 800cef4:	24024fe4 	.word	0x24024fe4
 800cef8:	24024b84 	.word	0x24024b84
 800cefc:	24024b08 	.word	0x24024b08

0800cf00 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800cf00:	4b04      	ldr	r3, [pc, #16]	@ (800cf14 <pvTaskIncrementMutexHeldCount+0x14>)
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	b11a      	cbz	r2, 800cf0e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800cf06:	6819      	ldr	r1, [r3, #0]
 800cf08:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800cf0a:	3201      	adds	r2, #1
 800cf0c:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800cf0e:	6818      	ldr	r0, [r3, #0]
	}
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop
 800cf14:	24024fe4 	.word	0x24024fe4

0800cf18 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800cf18:	4291      	cmp	r1, r2
{
 800cf1a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cf1c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf1e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800cf20:	d80a      	bhi.n	800cf38 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf22:	1ad2      	subs	r2, r2, r3
 800cf24:	6983      	ldr	r3, [r0, #24]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d20d      	bcs.n	800cf46 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cf2a:	1d01      	adds	r1, r0, #4
 800cf2c:	4b07      	ldr	r3, [pc, #28]	@ (800cf4c <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf2e:	6818      	ldr	r0, [r3, #0]
 800cf30:	f7fe fb85 	bl	800b63e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800cf34:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800cf36:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d201      	bcs.n	800cf40 <prvInsertTimerInActiveList+0x28>
 800cf3c:	4299      	cmp	r1, r3
 800cf3e:	d202      	bcs.n	800cf46 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf40:	1d01      	adds	r1, r0, #4
 800cf42:	4b03      	ldr	r3, [pc, #12]	@ (800cf50 <prvInsertTimerInActiveList+0x38>)
 800cf44:	e7f3      	b.n	800cf2e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800cf46:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800cf48:	e7f5      	b.n	800cf36 <prvInsertTimerInActiveList+0x1e>
 800cf4a:	bf00      	nop
 800cf4c:	240250e4 	.word	0x240250e4
 800cf50:	240250e8 	.word	0x240250e8

0800cf54 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cf54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800cf56:	4c11      	ldr	r4, [pc, #68]	@ (800cf9c <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800cf58:	f7fe fbfc 	bl	800b754 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800cf5c:	6825      	ldr	r5, [r4, #0]
 800cf5e:	b9bd      	cbnz	r5, 800cf90 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800cf60:	4f0f      	ldr	r7, [pc, #60]	@ (800cfa0 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800cf62:	4e10      	ldr	r6, [pc, #64]	@ (800cfa4 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800cf64:	4638      	mov	r0, r7
 800cf66:	f7fe fb51 	bl	800b60c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	f7fe fb4e 	bl	800b60c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cf70:	4b0d      	ldr	r3, [pc, #52]	@ (800cfa8 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cf72:	4a0e      	ldr	r2, [pc, #56]	@ (800cfac <prvCheckForValidListAndQueue+0x58>)
 800cf74:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800cf76:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cf78:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800cf7a:	4b0d      	ldr	r3, [pc, #52]	@ (800cfb0 <prvCheckForValidListAndQueue+0x5c>)
 800cf7c:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cf7e:	4b0d      	ldr	r3, [pc, #52]	@ (800cfb4 <prvCheckForValidListAndQueue+0x60>)
 800cf80:	9500      	str	r5, [sp, #0]
 800cf82:	f7fe fdef 	bl	800bb64 <xQueueGenericCreateStatic>
 800cf86:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cf88:	b110      	cbz	r0, 800cf90 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cf8a:	490b      	ldr	r1, [pc, #44]	@ (800cfb8 <prvCheckForValidListAndQueue+0x64>)
 800cf8c:	f7ff fa1a 	bl	800c3c4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800cf90:	b003      	add	sp, #12
 800cf92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800cf96:	f7fe bbfd 	b.w	800b794 <vPortExitCritical>
 800cf9a:	bf00      	nop
 800cf9c:	240250e0 	.word	0x240250e0
 800cfa0:	24025100 	.word	0x24025100
 800cfa4:	240250ec 	.word	0x240250ec
 800cfa8:	240250e8 	.word	0x240250e8
 800cfac:	24025038 	.word	0x24025038
 800cfb0:	240250e4 	.word	0x240250e4
 800cfb4:	24024fe8 	.word	0x24024fe8
 800cfb8:	080235e7 	.word	0x080235e7

0800cfbc <xTimerCreateTimerTask>:
{
 800cfbc:	b510      	push	{r4, lr}
 800cfbe:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800cfc0:	f7ff ffc8 	bl	800cf54 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800cfc4:	4b12      	ldr	r3, [pc, #72]	@ (800d010 <xTimerCreateTimerTask+0x54>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	b1b3      	cbz	r3, 800cff8 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cfca:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cfcc:	aa07      	add	r2, sp, #28
 800cfce:	a906      	add	r1, sp, #24
 800cfd0:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cfd2:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cfd6:	f7fe fa11 	bl	800b3fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cfda:	9b05      	ldr	r3, [sp, #20]
 800cfdc:	9a07      	ldr	r2, [sp, #28]
 800cfde:	9302      	str	r3, [sp, #8]
 800cfe0:	9b06      	ldr	r3, [sp, #24]
 800cfe2:	490c      	ldr	r1, [pc, #48]	@ (800d014 <xTimerCreateTimerTask+0x58>)
 800cfe4:	9301      	str	r3, [sp, #4]
 800cfe6:	2302      	movs	r3, #2
 800cfe8:	480b      	ldr	r0, [pc, #44]	@ (800d018 <xTimerCreateTimerTask+0x5c>)
 800cfea:	9300      	str	r3, [sp, #0]
 800cfec:	4623      	mov	r3, r4
 800cfee:	f7ff fbae 	bl	800c74e <xTaskCreateStatic>
 800cff2:	4b0a      	ldr	r3, [pc, #40]	@ (800d01c <xTimerCreateTimerTask+0x60>)
 800cff4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800cff6:	b940      	cbnz	r0, 800d00a <xTimerCreateTimerTask+0x4e>
 800cff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cffc:	f383 8811 	msr	BASEPRI, r3
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800d008:	e7fe      	b.n	800d008 <xTimerCreateTimerTask+0x4c>
}
 800d00a:	2001      	movs	r0, #1
 800d00c:	b008      	add	sp, #32
 800d00e:	bd10      	pop	{r4, pc}
 800d010:	240250e0 	.word	0x240250e0
 800d014:	080235ec 	.word	0x080235ec
 800d018:	0800d119 	.word	0x0800d119
 800d01c:	240250dc 	.word	0x240250dc

0800d020 <xTimerGenericCommand>:
{
 800d020:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d022:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800d024:	4604      	mov	r4, r0
{
 800d026:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800d028:	b940      	cbnz	r0, 800d03c <xTimerGenericCommand+0x1c>
 800d02a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02e:	f383 8811 	msr	BASEPRI, r3
 800d032:	f3bf 8f6f 	isb	sy
 800d036:	f3bf 8f4f 	dsb	sy
 800d03a:	e7fe      	b.n	800d03a <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800d03c:	4d0c      	ldr	r5, [pc, #48]	@ (800d070 <xTimerGenericCommand+0x50>)
 800d03e:	6828      	ldr	r0, [r5, #0]
 800d040:	b178      	cbz	r0, 800d062 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d042:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d044:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d046:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d04a:	dc0c      	bgt.n	800d066 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d04c:	f7ff fe7a 	bl	800cd44 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d050:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d052:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d054:	4669      	mov	r1, sp
 800d056:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d058:	bf0c      	ite	eq
 800d05a:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d05c:	461a      	movne	r2, r3
 800d05e:	f7fe fe36 	bl	800bcce <xQueueGenericSend>
}
 800d062:	b004      	add	sp, #16
 800d064:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d066:	2300      	movs	r3, #0
 800d068:	4669      	mov	r1, sp
 800d06a:	f7fe ff33 	bl	800bed4 <xQueueGenericSendFromISR>
 800d06e:	e7f8      	b.n	800d062 <xTimerGenericCommand+0x42>
 800d070:	240250e0 	.word	0x240250e0

0800d074 <prvSampleTimeNow>:
{
 800d074:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800d078:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800d114 <prvSampleTimeNow+0xa0>
{
 800d07c:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800d07e:	f7ff fbd5 	bl	800c82c <xTaskGetTickCount>
 800d082:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800d084:	f8d8 3000 	ldr.w	r3, [r8]
 800d088:	4283      	cmp	r3, r0
 800d08a:	d909      	bls.n	800d0a0 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d08c:	4f1f      	ldr	r7, [pc, #124]	@ (800d10c <prvSampleTimeNow+0x98>)
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	b96a      	cbnz	r2, 800d0b0 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800d094:	4a1e      	ldr	r2, [pc, #120]	@ (800d110 <prvSampleTimeNow+0x9c>)
 800d096:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d098:	6013      	str	r3, [r2, #0]
 800d09a:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800d09c:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800d09e:	e000      	b.n	800d0a2 <prvSampleTimeNow+0x2e>
 800d0a0:	2300      	movs	r3, #0
}
 800d0a2:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800d0a4:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800d0a6:	f8c8 5000 	str.w	r5, [r8]
}
 800d0aa:	b002      	add	sp, #8
 800d0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0b0:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0b2:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0b4:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0b8:	f104 0a04 	add.w	sl, r4, #4
 800d0bc:	4650      	mov	r0, sl
 800d0be:	f7fe fad5 	bl	800b66c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0c2:	6a23      	ldr	r3, [r4, #32]
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d0c8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d0cc:	075b      	lsls	r3, r3, #29
 800d0ce:	d5de      	bpl.n	800d08e <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d0d0:	69a3      	ldr	r3, [r4, #24]
 800d0d2:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800d0d4:	4599      	cmp	r9, r3
 800d0d6:	d206      	bcs.n	800d0e6 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d0d8:	4651      	mov	r1, sl
 800d0da:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d0dc:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d0de:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d0e0:	f7fe faad 	bl	800b63e <vListInsert>
 800d0e4:	e7d3      	b.n	800d08e <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	464a      	mov	r2, r9
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	9300      	str	r3, [sp, #0]
 800d0f0:	f7ff ff96 	bl	800d020 <xTimerGenericCommand>
				configASSERT( xResult );
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	d1ca      	bne.n	800d08e <prvSampleTimeNow+0x1a>
 800d0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0fc:	f383 8811 	msr	BASEPRI, r3
 800d100:	f3bf 8f6f 	isb	sy
 800d104:	f3bf 8f4f 	dsb	sy
 800d108:	e7fe      	b.n	800d108 <prvSampleTimeNow+0x94>
 800d10a:	bf00      	nop
 800d10c:	240250e8 	.word	0x240250e8
 800d110:	240250e4 	.word	0x240250e4
 800d114:	240250d8 	.word	0x240250d8

0800d118 <prvTimerTask>:
{
 800d118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d11c:	4d6e      	ldr	r5, [pc, #440]	@ (800d2d8 <prvTimerTask+0x1c0>)
{
 800d11e:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d120:	4e6e      	ldr	r6, [pc, #440]	@ (800d2dc <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d122:	682b      	ldr	r3, [r5, #0]
 800d124:	f8d3 8000 	ldr.w	r8, [r3]
 800d128:	f1b8 0f00 	cmp.w	r8, #0
 800d12c:	d035      	beq.n	800d19a <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d12e:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d130:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d132:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800d136:	f7ff fb71 	bl	800c81c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d13a:	a804      	add	r0, sp, #16
 800d13c:	f7ff ff9a 	bl	800d074 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800d140:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d142:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800d144:	2b00      	cmp	r3, #0
 800d146:	d169      	bne.n	800d21c <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d148:	2c00      	cmp	r4, #0
 800d14a:	d14c      	bne.n	800d1e6 <prvTimerTask+0xce>
 800d14c:	4540      	cmp	r0, r8
 800d14e:	d350      	bcc.n	800d1f2 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800d150:	f7ff fc08 	bl	800c964 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d154:	682b      	ldr	r3, [r5, #0]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d15a:	1d38      	adds	r0, r7, #4
 800d15c:	f7fe fa86 	bl	800b66c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d160:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d164:	0758      	lsls	r0, r3, #29
 800d166:	d51a      	bpl.n	800d19e <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d168:	69b9      	ldr	r1, [r7, #24]
 800d16a:	4643      	mov	r3, r8
 800d16c:	464a      	mov	r2, r9
 800d16e:	4638      	mov	r0, r7
 800d170:	4441      	add	r1, r8
 800d172:	f7ff fed1 	bl	800cf18 <prvInsertTimerInActiveList>
 800d176:	b1b0      	cbz	r0, 800d1a6 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d178:	4623      	mov	r3, r4
 800d17a:	4642      	mov	r2, r8
 800d17c:	4621      	mov	r1, r4
 800d17e:	4638      	mov	r0, r7
 800d180:	9400      	str	r4, [sp, #0]
 800d182:	f7ff ff4d 	bl	800d020 <xTimerGenericCommand>
			configASSERT( xResult );
 800d186:	b970      	cbnz	r0, 800d1a6 <prvTimerTask+0x8e>
 800d188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d18c:	f383 8811 	msr	BASEPRI, r3
 800d190:	f3bf 8f6f 	isb	sy
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	e7fe      	b.n	800d198 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d19a:	2401      	movs	r4, #1
 800d19c:	e7cb      	b.n	800d136 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d19e:	f023 0301 	bic.w	r3, r3, #1
 800d1a2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d1a6:	6a3b      	ldr	r3, [r7, #32]
 800d1a8:	4638      	mov	r0, r7
 800d1aa:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	a904      	add	r1, sp, #16
 800d1b0:	6830      	ldr	r0, [r6, #0]
 800d1b2:	f7fe ff3d 	bl	800c030 <xQueueReceive>
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	d0b3      	beq.n	800d122 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d1ba:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d1bc:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	db2f      	blt.n	800d222 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d1c2:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d1c4:	6963      	ldr	r3, [r4, #20]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d132      	bne.n	800d230 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d1ca:	a803      	add	r0, sp, #12
 800d1cc:	f7ff ff52 	bl	800d074 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800d1d0:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d1d2:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800d1d4:	2b09      	cmp	r3, #9
 800d1d6:	d8e9      	bhi.n	800d1ac <prvTimerTask+0x94>
 800d1d8:	e8df f003 	tbb	[pc, r3]
 800d1dc:	572e2e2e 	.word	0x572e2e2e
 800d1e0:	2e2e765e 	.word	0x2e2e765e
 800d1e4:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d1e6:	4b3e      	ldr	r3, [pc, #248]	@ (800d2e0 <prvTimerTask+0x1c8>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	681c      	ldr	r4, [r3, #0]
 800d1ec:	fab4 f484 	clz	r4, r4
 800d1f0:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d1f2:	4622      	mov	r2, r4
 800d1f4:	eba8 0109 	sub.w	r1, r8, r9
 800d1f8:	6830      	ldr	r0, [r6, #0]
 800d1fa:	f7ff f922 	bl	800c442 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d1fe:	f7ff fbb1 	bl	800c964 <xTaskResumeAll>
 800d202:	2800      	cmp	r0, #0
 800d204:	d1d2      	bne.n	800d1ac <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800d206:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d20a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d20e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	e7c7      	b.n	800d1ac <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800d21c:	f7ff fba2 	bl	800c964 <xTaskResumeAll>
}
 800d220:	e7c4      	b.n	800d1ac <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d222:	9b05      	ldr	r3, [sp, #20]
 800d224:	9907      	ldr	r1, [sp, #28]
 800d226:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d228:	9b04      	ldr	r3, [sp, #16]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	dbbe      	blt.n	800d1ac <prvTimerTask+0x94>
 800d22e:	e7c8      	b.n	800d1c2 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d230:	1d20      	adds	r0, r4, #4
 800d232:	f7fe fa1b 	bl	800b66c <uxListRemove>
 800d236:	e7c8      	b.n	800d1ca <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d238:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d23c:	4620      	mov	r0, r4
 800d23e:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d240:	f043 0301 	orr.w	r3, r3, #1
 800d244:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d248:	9b05      	ldr	r3, [sp, #20]
 800d24a:	4419      	add	r1, r3
 800d24c:	f7ff fe64 	bl	800cf18 <prvInsertTimerInActiveList>
 800d250:	2800      	cmp	r0, #0
 800d252:	d0ab      	beq.n	800d1ac <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d254:	6a23      	ldr	r3, [r4, #32]
 800d256:	4620      	mov	r0, r4
 800d258:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d25a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d25e:	0759      	lsls	r1, r3, #29
 800d260:	d5a4      	bpl.n	800d1ac <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d262:	69a2      	ldr	r2, [r4, #24]
 800d264:	2300      	movs	r3, #0
 800d266:	9905      	ldr	r1, [sp, #20]
 800d268:	4620      	mov	r0, r4
 800d26a:	9300      	str	r3, [sp, #0]
 800d26c:	440a      	add	r2, r1
 800d26e:	4619      	mov	r1, r3
 800d270:	f7ff fed6 	bl	800d020 <xTimerGenericCommand>
							configASSERT( xResult );
 800d274:	2800      	cmp	r0, #0
 800d276:	d199      	bne.n	800d1ac <prvTimerTask+0x94>
 800d278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d27c:	f383 8811 	msr	BASEPRI, r3
 800d280:	f3bf 8f6f 	isb	sy
 800d284:	f3bf 8f4f 	dsb	sy
 800d288:	e7fe      	b.n	800d288 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d28a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d28e:	f023 0301 	bic.w	r3, r3, #1
 800d292:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800d296:	e789      	b.n	800d1ac <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d298:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d29c:	f043 0301 	orr.w	r3, r3, #1
 800d2a0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d2a4:	9905      	ldr	r1, [sp, #20]
 800d2a6:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d2a8:	b941      	cbnz	r1, 800d2bc <prvTimerTask+0x1a4>
 800d2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ae:	f383 8811 	msr	BASEPRI, r3
 800d2b2:	f3bf 8f6f 	isb	sy
 800d2b6:	f3bf 8f4f 	dsb	sy
 800d2ba:	e7fe      	b.n	800d2ba <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d2bc:	4603      	mov	r3, r0
 800d2be:	4401      	add	r1, r0
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f7ff fe29 	bl	800cf18 <prvInsertTimerInActiveList>
					break;
 800d2c6:	e771      	b.n	800d1ac <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d2c8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d2cc:	079a      	lsls	r2, r3, #30
 800d2ce:	d4de      	bmi.n	800d28e <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f7fe f95d 	bl	800b590 <vPortFree>
 800d2d6:	e769      	b.n	800d1ac <prvTimerTask+0x94>
 800d2d8:	240250e8 	.word	0x240250e8
 800d2dc:	240250e0 	.word	0x240250e0
 800d2e0:	240250e4 	.word	0x240250e4

0800d2e4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800d2e4:	8880      	ldrh	r0, [r0, #4]
 800d2e6:	4770      	bx	lr

0800d2e8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800d2e8:	b570      	push	{r4, r5, r6, lr}
 800d2ea:	6803      	ldr	r3, [r0, #0]
 800d2ec:	460c      	mov	r4, r1
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	4605      	mov	r5, r0
 800d2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2f4:	4798      	blx	r3
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	682b      	ldr	r3, [r5, #0]
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	1ba4      	subs	r4, r4, r6
 800d2fe:	6a1b      	ldr	r3, [r3, #32]
 800d300:	b2a4      	uxth	r4, r4
 800d302:	4798      	blx	r3
 800d304:	fbb4 f0f0 	udiv	r0, r4, r0
 800d308:	bd70      	pop	{r4, r5, r6, pc}

0800d30a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800d30a:	2300      	movs	r3, #0
 800d30c:	8083      	strh	r3, [r0, #4]
 800d30e:	4770      	bx	lr

0800d310 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800d310:	b510      	push	{r4, lr}
 800d312:	6803      	ldr	r3, [r0, #0]
 800d314:	4604      	mov	r4, r0
 800d316:	8881      	ldrh	r1, [r0, #4]
 800d318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d31a:	4798      	blx	r3
 800d31c:	88a3      	ldrh	r3, [r4, #4]
 800d31e:	3301      	adds	r3, #1
 800d320:	80a3      	strh	r3, [r4, #4]
 800d322:	bd10      	pop	{r4, pc}

0800d324 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800d324:	6803      	ldr	r3, [r0, #0]
 800d326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d328:	4718      	bx	r3

0800d32a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800d32a:	4770      	bx	lr

0800d32c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800d32c:	4a02      	ldr	r2, [pc, #8]	@ (800d338 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800d32e:	6002      	str	r2, [r0, #0]
 800d330:	2200      	movs	r2, #0
 800d332:	8082      	strh	r2, [r0, #4]
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	080240c4 	.word	0x080240c4

0800d33c <_ZN8touchgfx9Container13getFirstChildEv>:
 800d33c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800d33e:	4770      	bx	lr

0800d340 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800d340:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d342:	2000      	movs	r0, #0
 800d344:	b12b      	cbz	r3, 800d352 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d346:	b920      	cbnz	r0, 800d352 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d348:	1a5a      	subs	r2, r3, r1
 800d34a:	699b      	ldr	r3, [r3, #24]
 800d34c:	4250      	negs	r0, r2
 800d34e:	4150      	adcs	r0, r2
 800d350:	e7f8      	b.n	800d344 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800d352:	4770      	bx	lr

0800d354 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800d354:	2300      	movs	r3, #0
 800d356:	6148      	str	r0, [r1, #20]
 800d358:	618b      	str	r3, [r1, #24]
 800d35a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d35c:	b913      	cbnz	r3, 800d364 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800d35e:	6281      	str	r1, [r0, #40]	@ 0x28
 800d360:	4770      	bx	lr
 800d362:	4613      	mov	r3, r2
 800d364:	699a      	ldr	r2, [r3, #24]
 800d366:	2a00      	cmp	r2, #0
 800d368:	d1fb      	bne.n	800d362 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800d36a:	6199      	str	r1, [r3, #24]
 800d36c:	4770      	bx	lr

0800d36e <_ZN8touchgfx9Container9removeAllEv>:
 800d36e:	2200      	movs	r2, #0
 800d370:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d372:	b123      	cbz	r3, 800d37e <_ZN8touchgfx9Container9removeAllEv+0x10>
 800d374:	6999      	ldr	r1, [r3, #24]
 800d376:	6281      	str	r1, [r0, #40]	@ 0x28
 800d378:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800d37c:	e7f8      	b.n	800d370 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800d37e:	4770      	bx	lr

0800d380 <_ZN8touchgfx9Container6unlinkEv>:
 800d380:	2300      	movs	r3, #0
 800d382:	6283      	str	r3, [r0, #40]	@ 0x28
 800d384:	4770      	bx	lr

0800d386 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800d386:	2200      	movs	r2, #0
 800d388:	8002      	strh	r2, [r0, #0]
 800d38a:	8042      	strh	r2, [r0, #2]
 800d38c:	8082      	strh	r2, [r0, #4]
 800d38e:	80c2      	strh	r2, [r0, #6]
 800d390:	4770      	bx	lr

0800d392 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800d392:	b570      	push	{r4, r5, r6, lr}
 800d394:	460d      	mov	r5, r1
 800d396:	4616      	mov	r6, r2
 800d398:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d39a:	b13c      	cbz	r4, 800d3ac <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800d39c:	6823      	ldr	r3, [r4, #0]
 800d39e:	4620      	mov	r0, r4
 800d3a0:	4632      	mov	r2, r6
 800d3a2:	4629      	mov	r1, r5
 800d3a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3a6:	4798      	blx	r3
 800d3a8:	69a4      	ldr	r4, [r4, #24]
 800d3aa:	e7f6      	b.n	800d39a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800d3ac:	bd70      	pop	{r4, r5, r6, pc}

0800d3ae <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800d3ae:	b538      	push	{r3, r4, r5, lr}
 800d3b0:	460d      	mov	r5, r1
 800d3b2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d3b4:	b134      	cbz	r4, 800d3c4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800d3b6:	682b      	ldr	r3, [r5, #0]
 800d3b8:	4621      	mov	r1, r4
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	4798      	blx	r3
 800d3c0:	69a4      	ldr	r4, [r4, #24]
 800d3c2:	e7f7      	b.n	800d3b4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800d3c4:	bd38      	pop	{r3, r4, r5, pc}

0800d3c6 <_ZN8touchgfx9ContainerD1Ev>:
 800d3c6:	4770      	bx	lr

0800d3c8 <_ZN8touchgfx9ContainerD0Ev>:
 800d3c8:	b510      	push	{r4, lr}
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	212c      	movs	r1, #44	@ 0x2c
 800d3ce:	f012 fe73 	bl	80200b8 <_ZdlPvj>
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	bd10      	pop	{r4, pc}

0800d3d6 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800d3d6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d3d8:	b19b      	cbz	r3, 800d402 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d3da:	428b      	cmp	r3, r1
 800d3dc:	d109      	bne.n	800d3f2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800d3de:	699a      	ldr	r2, [r3, #24]
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	6159      	str	r1, [r3, #20]
 800d3e4:	6282      	str	r2, [r0, #40]	@ 0x28
 800d3e6:	b902      	cbnz	r2, 800d3ea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800d3e8:	4770      	bx	lr
 800d3ea:	6199      	str	r1, [r3, #24]
 800d3ec:	4770      	bx	lr
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	b13a      	cbz	r2, 800d402 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d3f2:	699a      	ldr	r2, [r3, #24]
 800d3f4:	428a      	cmp	r2, r1
 800d3f6:	d1fa      	bne.n	800d3ee <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800d3f8:	698a      	ldr	r2, [r1, #24]
 800d3fa:	619a      	str	r2, [r3, #24]
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800d402:	4770      	bx	lr

0800d404 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800d404:	b410      	push	{r4}
 800d406:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d408:	4604      	mov	r4, r0
 800d40a:	b92b      	cbnz	r3, 800d418 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800d40c:	6803      	ldr	r3, [r0, #0]
 800d40e:	4611      	mov	r1, r2
 800d410:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d416:	4718      	bx	r3
 800d418:	b941      	cbnz	r1, 800d42c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800d41a:	6193      	str	r3, [r2, #24]
 800d41c:	6282      	str	r2, [r0, #40]	@ 0x28
 800d41e:	6154      	str	r4, [r2, #20]
 800d420:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d424:	4770      	bx	lr
 800d426:	4603      	mov	r3, r0
 800d428:	2800      	cmp	r0, #0
 800d42a:	d0f9      	beq.n	800d420 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800d42c:	4299      	cmp	r1, r3
 800d42e:	6998      	ldr	r0, [r3, #24]
 800d430:	d1f9      	bne.n	800d426 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800d432:	6190      	str	r0, [r2, #24]
 800d434:	618a      	str	r2, [r1, #24]
 800d436:	e7f2      	b.n	800d41e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800d438 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800d438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d43c:	461f      	mov	r7, r3
 800d43e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d442:	460d      	mov	r5, r1
 800d444:	4616      	mov	r6, r2
 800d446:	b103      	cbz	r3, 800d44a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800d448:	6038      	str	r0, [r7, #0]
 800d44a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d44c:	b314      	cbz	r4, 800d494 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800d44e:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800d452:	b1eb      	cbz	r3, 800d490 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d454:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d458:	428d      	cmp	r5, r1
 800d45a:	db19      	blt.n	800d490 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d45c:	b289      	uxth	r1, r1
 800d45e:	8923      	ldrh	r3, [r4, #8]
 800d460:	440b      	add	r3, r1
 800d462:	b21b      	sxth	r3, r3
 800d464:	429d      	cmp	r5, r3
 800d466:	da13      	bge.n	800d490 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d468:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d46c:	4296      	cmp	r6, r2
 800d46e:	db0f      	blt.n	800d490 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d470:	b292      	uxth	r2, r2
 800d472:	8963      	ldrh	r3, [r4, #10]
 800d474:	4413      	add	r3, r2
 800d476:	b21b      	sxth	r3, r3
 800d478:	429e      	cmp	r6, r3
 800d47a:	da09      	bge.n	800d490 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d47c:	6823      	ldr	r3, [r4, #0]
 800d47e:	1ab2      	subs	r2, r6, r2
 800d480:	1a69      	subs	r1, r5, r1
 800d482:	4620      	mov	r0, r4
 800d484:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800d488:	b212      	sxth	r2, r2
 800d48a:	463b      	mov	r3, r7
 800d48c:	b209      	sxth	r1, r1
 800d48e:	47c0      	blx	r8
 800d490:	69a4      	ldr	r4, [r4, #24]
 800d492:	e7db      	b.n	800d44c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800d494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d498 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800d498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d49c:	4c6d      	ldr	r4, [pc, #436]	@ (800d654 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800d49e:	b0a1      	sub	sp, #132	@ 0x84
 800d4a0:	4606      	mov	r6, r0
 800d4a2:	6824      	ldr	r4, [r4, #0]
 800d4a4:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800d4a6:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800d4aa:	2400      	movs	r4, #0
 800d4ac:	9303      	str	r3, [sp, #12]
 800d4ae:	802c      	strh	r4, [r5, #0]
 800d4b0:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800d4b2:	802c      	strh	r4, [r5, #0]
 800d4b4:	601c      	str	r4, [r3, #0]
 800d4b6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800d4ba:	f7ff ffbd 	bl	800d438 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d4be:	f1b9 0f03 	cmp.w	r9, #3
 800d4c2:	f340 80c1 	ble.w	800d648 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800d4c6:	4631      	mov	r1, r6
 800d4c8:	a80c      	add	r0, sp, #48	@ 0x30
 800d4ca:	f006 f813 	bl	80134f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d4ce:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800d4d2:	9306      	str	r3, [sp, #24]
 800d4d4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800d4d8:	9307      	str	r3, [sp, #28]
 800d4da:	9b03      	ldr	r3, [sp, #12]
 800d4dc:	f8d3 a000 	ldr.w	sl, [r3]
 800d4e0:	f1ba 0f00 	cmp.w	sl, #0
 800d4e4:	f000 80b3 	beq.w	800d64e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800d4e8:	4651      	mov	r1, sl
 800d4ea:	a810      	add	r0, sp, #64	@ 0x40
 800d4ec:	f006 f802 	bl	80134f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d4f0:	2002      	movs	r0, #2
 800d4f2:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800d4f6:	9b01      	ldr	r3, [sp, #4]
 800d4f8:	9a06      	ldr	r2, [sp, #24]
 800d4fa:	fb91 f1f0 	sdiv	r1, r1, r0
 800d4fe:	189d      	adds	r5, r3, r2
 800d500:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800d504:	9a07      	ldr	r2, [sp, #28]
 800d506:	4419      	add	r1, r3
 800d508:	9b02      	ldr	r3, [sp, #8]
 800d50a:	4413      	add	r3, r2
 800d50c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800d510:	1a6d      	subs	r5, r5, r1
 800d512:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800d516:	fb92 f2f0 	sdiv	r2, r2, r0
 800d51a:	440a      	add	r2, r1
 800d51c:	1a9b      	subs	r3, r3, r2
 800d51e:	435b      	muls	r3, r3
 800d520:	fb05 3505 	mla	r5, r5, r5, r3
 800d524:	4f4c      	ldr	r7, [pc, #304]	@ (800d658 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800d526:	ac10      	add	r4, sp, #64	@ 0x40
 800d528:	f1b9 0f0c 	cmp.w	r9, #12
 800d52c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d52e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d530:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d534:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d538:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800d53c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d540:	f04f 0303 	mov.w	r3, #3
 800d544:	bfd8      	it	le
 800d546:	f109 32ff 	addle.w	r2, r9, #4294967295
 800d54a:	f04f 0400 	mov.w	r4, #0
 800d54e:	f8cd 9000 	str.w	r9, [sp]
 800d552:	bfcc      	ite	gt
 800d554:	4698      	movgt	r8, r3
 800d556:	fb92 f8f3 	sdivle	r8, r2, r3
 800d55a:	1c63      	adds	r3, r4, #1
 800d55c:	aa10      	add	r2, sp, #64	@ 0x40
 800d55e:	f004 0401 	and.w	r4, r4, #1
 800d562:	f04f 0b00 	mov.w	fp, #0
 800d566:	9308      	str	r3, [sp, #32]
 800d568:	9b00      	ldr	r3, [sp, #0]
 800d56a:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800d56e:	fb93 f3f8 	sdiv	r3, r3, r8
 800d572:	3404      	adds	r4, #4
 800d574:	b29b      	uxth	r3, r3
 800d576:	9304      	str	r3, [sp, #16]
 800d578:	9a04      	ldr	r2, [sp, #16]
 800d57a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d57e:	fb13 f302 	smulbb	r3, r3, r2
 800d582:	9a01      	ldr	r2, [sp, #4]
 800d584:	b29b      	uxth	r3, r3
 800d586:	1899      	adds	r1, r3, r2
 800d588:	9305      	str	r3, [sp, #20]
 800d58a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d58e:	b209      	sxth	r1, r1
 800d590:	4299      	cmp	r1, r3
 800d592:	db4d      	blt.n	800d630 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d594:	8932      	ldrh	r2, [r6, #8]
 800d596:	4413      	add	r3, r2
 800d598:	b21b      	sxth	r3, r3
 800d59a:	4299      	cmp	r1, r3
 800d59c:	da48      	bge.n	800d630 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d59e:	9b04      	ldr	r3, [sp, #16]
 800d5a0:	6827      	ldr	r7, [r4, #0]
 800d5a2:	fb17 f703 	smulbb	r7, r7, r3
 800d5a6:	9b02      	ldr	r3, [sp, #8]
 800d5a8:	b2bf      	uxth	r7, r7
 800d5aa:	18fa      	adds	r2, r7, r3
 800d5ac:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d5b0:	b212      	sxth	r2, r2
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	db3c      	blt.n	800d630 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d5b6:	8970      	ldrh	r0, [r6, #10]
 800d5b8:	4403      	add	r3, r0
 800d5ba:	b21b      	sxth	r3, r3
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	da37      	bge.n	800d630 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	4630      	mov	r0, r6
 800d5c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5c6:	ab0b      	add	r3, sp, #44	@ 0x2c
 800d5c8:	f7ff ff36 	bl	800d438 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d5cc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d5ce:	b37a      	cbz	r2, 800d630 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d5d0:	4552      	cmp	r2, sl
 800d5d2:	d02d      	beq.n	800d630 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d5d4:	4611      	mov	r1, r2
 800d5d6:	a80e      	add	r0, sp, #56	@ 0x38
 800d5d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5da:	f005 ff8b 	bl	80134f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d5de:	f04f 0e02 	mov.w	lr, #2
 800d5e2:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800d5e6:	9a06      	ldr	r2, [sp, #24]
 800d5e8:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800d5ec:	9b01      	ldr	r3, [sp, #4]
 800d5ee:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800d5f2:	4413      	add	r3, r2
 800d5f4:	9a07      	ldr	r2, [sp, #28]
 800d5f6:	fb91 f1fe 	sdiv	r1, r1, lr
 800d5fa:	fb9c fcfe 	sdiv	ip, ip, lr
 800d5fe:	4401      	add	r1, r0
 800d600:	1a58      	subs	r0, r3, r1
 800d602:	9b02      	ldr	r3, [sp, #8]
 800d604:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800d608:	4413      	add	r3, r2
 800d60a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d60c:	448c      	add	ip, r1
 800d60e:	eba3 030c 	sub.w	r3, r3, ip
 800d612:	435b      	muls	r3, r3
 800d614:	fb00 3300 	mla	r3, r0, r0, r3
 800d618:	42ab      	cmp	r3, r5
 800d61a:	d208      	bcs.n	800d62e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800d61c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d61e:	461d      	mov	r5, r3
 800d620:	9803      	ldr	r0, [sp, #12]
 800d622:	6001      	str	r1, [r0, #0]
 800d624:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800d626:	9805      	ldr	r0, [sp, #20]
 800d628:	8008      	strh	r0, [r1, #0]
 800d62a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800d62c:	800f      	strh	r7, [r1, #0]
 800d62e:	4692      	mov	sl, r2
 800d630:	f10b 0b01 	add.w	fp, fp, #1
 800d634:	3408      	adds	r4, #8
 800d636:	f1bb 0f04 	cmp.w	fp, #4
 800d63a:	d19d      	bne.n	800d578 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800d63c:	9b00      	ldr	r3, [sp, #0]
 800d63e:	9c08      	ldr	r4, [sp, #32]
 800d640:	444b      	add	r3, r9
 800d642:	4544      	cmp	r4, r8
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	d188      	bne.n	800d55a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800d648:	b021      	add	sp, #132	@ 0x84
 800d64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d64e:	f04f 35ff 	mov.w	r5, #4294967295
 800d652:	e767      	b.n	800d524 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800d654:	24025120 	.word	0x24025120
 800d658:	08021820 	.word	0x08021820

0800d65c <_ZN8touchgfx4RectaNERKS0_>:
 800d65c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d660:	f9b1 7000 	ldrsh.w	r7, [r1]
 800d664:	888c      	ldrh	r4, [r1, #4]
 800d666:	f9b0 9000 	ldrsh.w	r9, [r0]
 800d66a:	443c      	add	r4, r7
 800d66c:	b2a4      	uxth	r4, r4
 800d66e:	fa0f f884 	sxth.w	r8, r4
 800d672:	45c1      	cmp	r9, r8
 800d674:	da2f      	bge.n	800d6d6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d676:	8882      	ldrh	r2, [r0, #4]
 800d678:	444a      	add	r2, r9
 800d67a:	b292      	uxth	r2, r2
 800d67c:	fa0f fe82 	sxth.w	lr, r2
 800d680:	4577      	cmp	r7, lr
 800d682:	da28      	bge.n	800d6d6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d684:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800d688:	88cb      	ldrh	r3, [r1, #6]
 800d68a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800d68e:	442b      	add	r3, r5
 800d690:	b21b      	sxth	r3, r3
 800d692:	429e      	cmp	r6, r3
 800d694:	da1f      	bge.n	800d6d6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d696:	88c3      	ldrh	r3, [r0, #6]
 800d698:	4433      	add	r3, r6
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	fa0f fc83 	sxth.w	ip, r3
 800d6a0:	4565      	cmp	r5, ip
 800d6a2:	da18      	bge.n	800d6d6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d6a4:	454f      	cmp	r7, r9
 800d6a6:	bfb8      	it	lt
 800d6a8:	464f      	movlt	r7, r9
 800d6aa:	42b5      	cmp	r5, r6
 800d6ac:	bfb8      	it	lt
 800d6ae:	4635      	movlt	r5, r6
 800d6b0:	45f0      	cmp	r8, lr
 800d6b2:	bfd8      	it	le
 800d6b4:	4622      	movle	r2, r4
 800d6b6:	1bd2      	subs	r2, r2, r7
 800d6b8:	8082      	strh	r2, [r0, #4]
 800d6ba:	884a      	ldrh	r2, [r1, #2]
 800d6bc:	88c9      	ldrh	r1, [r1, #6]
 800d6be:	8007      	strh	r7, [r0, #0]
 800d6c0:	440a      	add	r2, r1
 800d6c2:	8045      	strh	r5, [r0, #2]
 800d6c4:	b292      	uxth	r2, r2
 800d6c6:	b211      	sxth	r1, r2
 800d6c8:	458c      	cmp	ip, r1
 800d6ca:	bfa8      	it	ge
 800d6cc:	4613      	movge	r3, r2
 800d6ce:	1b5b      	subs	r3, r3, r5
 800d6d0:	80c3      	strh	r3, [r0, #6]
 800d6d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	8003      	strh	r3, [r0, #0]
 800d6da:	8043      	strh	r3, [r0, #2]
 800d6dc:	8083      	strh	r3, [r0, #4]
 800d6de:	80c3      	strh	r3, [r0, #6]
 800d6e0:	e7f7      	b.n	800d6d2 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800d6e2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	dd06      	ble.n	800d6f8 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800d6ea:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	bfcc      	ite	gt
 800d6f2:	2000      	movgt	r0, #0
 800d6f4:	2001      	movle	r0, #1
 800d6f6:	4770      	bx	lr
 800d6f8:	2001      	movs	r0, #1
 800d6fa:	4770      	bx	lr

0800d6fc <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800d6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d700:	2300      	movs	r3, #0
 800d702:	4604      	mov	r4, r0
 800d704:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800d706:	8003      	strh	r3, [r0, #0]
 800d708:	8043      	strh	r3, [r0, #2]
 800d70a:	8083      	strh	r3, [r0, #4]
 800d70c:	80c3      	strh	r3, [r0, #6]
 800d70e:	2d00      	cmp	r5, #0
 800d710:	d040      	beq.n	800d794 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800d712:	1d28      	adds	r0, r5, #4
 800d714:	f7ff ffe5 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d718:	b988      	cbnz	r0, 800d73e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d71a:	4620      	mov	r0, r4
 800d71c:	f7ff ffe1 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d720:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800d724:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d728:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800d72c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800d730:	b138      	cbz	r0, 800d742 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800d732:	8022      	strh	r2, [r4, #0]
 800d734:	8063      	strh	r3, [r4, #2]
 800d736:	f8a4 e004 	strh.w	lr, [r4, #4]
 800d73a:	f8a4 c006 	strh.w	ip, [r4, #6]
 800d73e:	69ad      	ldr	r5, [r5, #24]
 800d740:	e7e5      	b.n	800d70e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800d742:	f9b4 0000 	ldrsh.w	r0, [r4]
 800d746:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800d74a:	4290      	cmp	r0, r2
 800d74c:	4607      	mov	r7, r0
 800d74e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800d752:	460e      	mov	r6, r1
 800d754:	bfa8      	it	ge
 800d756:	4617      	movge	r7, r2
 800d758:	4299      	cmp	r1, r3
 800d75a:	4472      	add	r2, lr
 800d75c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800d760:	bfa8      	it	ge
 800d762:	461e      	movge	r6, r3
 800d764:	4440      	add	r0, r8
 800d766:	4471      	add	r1, lr
 800d768:	4463      	add	r3, ip
 800d76a:	b200      	sxth	r0, r0
 800d76c:	8027      	strh	r7, [r4, #0]
 800d76e:	b212      	sxth	r2, r2
 800d770:	8066      	strh	r6, [r4, #2]
 800d772:	b209      	sxth	r1, r1
 800d774:	b21b      	sxth	r3, r3
 800d776:	4290      	cmp	r0, r2
 800d778:	bfac      	ite	ge
 800d77a:	ebc7 0200 	rsbge	r2, r7, r0
 800d77e:	ebc7 0202 	rsblt	r2, r7, r2
 800d782:	4299      	cmp	r1, r3
 800d784:	bfac      	ite	ge
 800d786:	ebc6 0301 	rsbge	r3, r6, r1
 800d78a:	ebc6 0303 	rsblt	r3, r6, r3
 800d78e:	80a2      	strh	r2, [r4, #4]
 800d790:	80e3      	strh	r3, [r4, #6]
 800d792:	e7d4      	b.n	800d73e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d794:	4620      	mov	r0, r4
 800d796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d79a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800d79a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d79e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800d7a2:	b383      	cbz	r3, 800d806 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d7a4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d7a6:	b374      	cbz	r4, 800d806 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d7a8:	f9b1 5000 	ldrsh.w	r5, [r1]
 800d7ac:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800d7b0:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800d7b4:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800d7b8:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800d7bc:	b303      	cbz	r3, 800d800 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d7be:	4668      	mov	r0, sp
 800d7c0:	1d21      	adds	r1, r4, #4
 800d7c2:	f8ad 5000 	strh.w	r5, [sp]
 800d7c6:	f8ad 6002 	strh.w	r6, [sp, #2]
 800d7ca:	f8ad 7004 	strh.w	r7, [sp, #4]
 800d7ce:	f8ad 8006 	strh.w	r8, [sp, #6]
 800d7d2:	f7ff ff43 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 800d7d6:	4668      	mov	r0, sp
 800d7d8:	f7ff ff83 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d7dc:	b980      	cbnz	r0, 800d800 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d7de:	f8bd 3000 	ldrh.w	r3, [sp]
 800d7e2:	4669      	mov	r1, sp
 800d7e4:	88a2      	ldrh	r2, [r4, #4]
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	1a9b      	subs	r3, r3, r2
 800d7ea:	88e2      	ldrh	r2, [r4, #6]
 800d7ec:	f8ad 3000 	strh.w	r3, [sp]
 800d7f0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d7f4:	1a9b      	subs	r3, r3, r2
 800d7f6:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d7fa:	6823      	ldr	r3, [r4, #0]
 800d7fc:	689b      	ldr	r3, [r3, #8]
 800d7fe:	4798      	blx	r3
 800d800:	69a4      	ldr	r4, [r4, #24]
 800d802:	2c00      	cmp	r4, #0
 800d804:	d1d8      	bne.n	800d7b8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800d806:	b002      	add	sp, #8
 800d808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d80c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800d80c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d80e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800d812:	460d      	mov	r5, r1
 800d814:	4616      	mov	r6, r2
 800d816:	b323      	cbz	r3, 800d862 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d818:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d81a:	b314      	cbz	r4, 800d862 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d81c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800d820:	b1eb      	cbz	r3, 800d85e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800d822:	6828      	ldr	r0, [r5, #0]
 800d824:	466b      	mov	r3, sp
 800d826:	6869      	ldr	r1, [r5, #4]
 800d828:	c303      	stmia	r3!, {r0, r1}
 800d82a:	4668      	mov	r0, sp
 800d82c:	1d21      	adds	r1, r4, #4
 800d82e:	f7ff ff15 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 800d832:	4668      	mov	r0, sp
 800d834:	f7ff ff55 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d838:	b988      	cbnz	r0, 800d85e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800d83a:	f8bd 3000 	ldrh.w	r3, [sp]
 800d83e:	4669      	mov	r1, sp
 800d840:	88a2      	ldrh	r2, [r4, #4]
 800d842:	4620      	mov	r0, r4
 800d844:	1a9b      	subs	r3, r3, r2
 800d846:	88e2      	ldrh	r2, [r4, #6]
 800d848:	f8ad 3000 	strh.w	r3, [sp]
 800d84c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d850:	1a9b      	subs	r3, r3, r2
 800d852:	4632      	mov	r2, r6
 800d854:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d858:	6823      	ldr	r3, [r4, #0]
 800d85a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d85c:	4798      	blx	r3
 800d85e:	69a4      	ldr	r4, [r4, #24]
 800d860:	e7db      	b.n	800d81a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800d862:	b002      	add	sp, #8
 800d864:	bd70      	pop	{r4, r5, r6, pc}

0800d866 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800d866:	6803      	ldr	r3, [r0, #0]
 800d868:	b513      	push	{r0, r1, r4, lr}
 800d86a:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 800d86e:	2300      	movs	r3, #0
 800d870:	e9cd 3300 	strd	r3, r3, [sp]
 800d874:	466b      	mov	r3, sp
 800d876:	47a0      	blx	r4
 800d878:	b002      	add	sp, #8
 800d87a:	bd10      	pop	{r4, pc}

0800d87c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800d87c:	2301      	movs	r3, #1
 800d87e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800d882:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800d886:	4770      	bx	lr

0800d888 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800d888:	2301      	movs	r3, #1
 800d88a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800d88e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800d892:	4770      	bx	lr

0800d894 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800d894:	6843      	ldr	r3, [r0, #4]
 800d896:	2201      	movs	r2, #1
 800d898:	725a      	strb	r2, [r3, #9]
 800d89a:	6840      	ldr	r0, [r0, #4]
 800d89c:	6803      	ldr	r3, [r0, #0]
 800d89e:	691b      	ldr	r3, [r3, #16]
 800d8a0:	4718      	bx	r3

0800d8a2 <_ZN8touchgfx3HAL8flushDMAEv>:
 800d8a2:	6840      	ldr	r0, [r0, #4]
 800d8a4:	6803      	ldr	r3, [r0, #0]
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	4718      	bx	r3

0800d8aa <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800d8aa:	b530      	push	{r4, r5, lr}
 800d8ac:	b08b      	sub	sp, #44	@ 0x2c
 800d8ae:	6804      	ldr	r4, [r0, #0]
 800d8b0:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800d8b4:	9509      	str	r5, [sp, #36]	@ 0x24
 800d8b6:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800d8ba:	9508      	str	r5, [sp, #32]
 800d8bc:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800d8c0:	9507      	str	r5, [sp, #28]
 800d8c2:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800d8c6:	9506      	str	r5, [sp, #24]
 800d8c8:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800d8cc:	9505      	str	r5, [sp, #20]
 800d8ce:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800d8d2:	9504      	str	r5, [sp, #16]
 800d8d4:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800d8d8:	9503      	str	r5, [sp, #12]
 800d8da:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800d8de:	9502      	str	r5, [sp, #8]
 800d8e0:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800d8e4:	e9cd 3500 	strd	r3, r5, [sp]
 800d8e8:	4613      	mov	r3, r2
 800d8ea:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	47a0      	blx	r4
 800d8f0:	b00b      	add	sp, #44	@ 0x2c
 800d8f2:	bd30      	pop	{r4, r5, pc}

0800d8f4 <_ZN8touchgfx3HAL10beginFrameEv>:
 800d8f4:	4b04      	ldr	r3, [pc, #16]	@ (800d908 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	b123      	cbz	r3, 800d904 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800d8fa:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800d8fe:	f080 0001 	eor.w	r0, r0, #1
 800d902:	4770      	bx	lr
 800d904:	2001      	movs	r0, #1
 800d906:	4770      	bx	lr
 800d908:	2402511e 	.word	0x2402511e

0800d90c <_ZN8touchgfx3HAL8endFrameEv>:
 800d90c:	b510      	push	{r4, lr}
 800d90e:	4604      	mov	r4, r0
 800d910:	6840      	ldr	r0, [r0, #4]
 800d912:	6803      	ldr	r3, [r0, #0]
 800d914:	689b      	ldr	r3, [r3, #8]
 800d916:	4798      	blx	r3
 800d918:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800d91c:	b113      	cbz	r3, 800d924 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800d91e:	2301      	movs	r3, #1
 800d920:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800d924:	bd10      	pop	{r4, pc}

0800d926 <_ZN8touchgfx3HAL10initializeEv>:
 800d926:	b510      	push	{r4, lr}
 800d928:	4604      	mov	r4, r0
 800d92a:	f7f5 f875 	bl	8002a18 <_ZN8touchgfx10OSWrappers10initializeEv>
 800d92e:	f7f4 f8bb 	bl	8001aa8 <_ZN8touchgfx4GPIO4initEv>
 800d932:	6860      	ldr	r0, [r4, #4]
 800d934:	6803      	ldr	r3, [r0, #0]
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	4798      	blx	r3
 800d93a:	68e0      	ldr	r0, [r4, #12]
 800d93c:	6803      	ldr	r3, [r0, #0]
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	4798      	blx	r3
 800d942:	6823      	ldr	r3, [r4, #0]
 800d944:	4620      	mov	r0, r4
 800d946:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d94c:	4718      	bx	r3
	...

0800d950 <_ZN8touchgfx3HAL4tickEv>:
 800d950:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d952:	6803      	ldr	r3, [r0, #0]
 800d954:	4604      	mov	r4, r0
 800d956:	4d62      	ldr	r5, [pc, #392]	@ (800dae0 <_ZN8touchgfx3HAL4tickEv+0x190>)
 800d958:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d95c:	4798      	blx	r3
 800d95e:	2800      	cmp	r0, #0
 800d960:	f000 809e 	beq.w	800daa0 <_ZN8touchgfx3HAL4tickEv+0x150>
 800d964:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d968:	2b02      	cmp	r3, #2
 800d96a:	d002      	beq.n	800d972 <_ZN8touchgfx3HAL4tickEv+0x22>
 800d96c:	2001      	movs	r0, #1
 800d96e:	f7f4 f801 	bl	8001974 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800d972:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800d976:	2600      	movs	r6, #0
 800d978:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800d97c:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800d980:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800d984:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800d988:	b133      	cbz	r3, 800d998 <_ZN8touchgfx3HAL4tickEv+0x48>
 800d98a:	6823      	ldr	r3, [r4, #0]
 800d98c:	4620      	mov	r0, r4
 800d98e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d992:	4798      	blx	r3
 800d994:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800d998:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800d99c:	2601      	movs	r6, #1
 800d99e:	6862      	ldr	r2, [r4, #4]
 800d9a0:	f083 0301 	eor.w	r3, r3, #1
 800d9a4:	702e      	strb	r6, [r5, #0]
 800d9a6:	7253      	strb	r3, [r2, #9]
 800d9a8:	f004 fb50 	bl	801204c <_ZN8touchgfx11Application11getInstanceEv>
 800d9ac:	6803      	ldr	r3, [r0, #0]
 800d9ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9b0:	4798      	blx	r3
 800d9b2:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800d9b6:	b90b      	cbnz	r3, 800d9bc <_ZN8touchgfx3HAL4tickEv+0x6c>
 800d9b8:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800d9bc:	f004 fb46 	bl	801204c <_ZN8touchgfx11Application11getInstanceEv>
 800d9c0:	6803      	ldr	r3, [r0, #0]
 800d9c2:	695b      	ldr	r3, [r3, #20]
 800d9c4:	4798      	blx	r3
 800d9c6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800d9c8:	6803      	ldr	r3, [r0, #0]
 800d9ca:	691b      	ldr	r3, [r3, #16]
 800d9cc:	4798      	blx	r3
 800d9ce:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800d9d2:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800d9d6:	3b01      	subs	r3, #1
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800d9de:	b10a      	cbz	r2, 800d9e4 <_ZN8touchgfx3HAL4tickEv+0x94>
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d1eb      	bne.n	800d9bc <_ZN8touchgfx3HAL4tickEv+0x6c>
 800d9e4:	4a3f      	ldr	r2, [pc, #252]	@ (800dae4 <_ZN8touchgfx3HAL4tickEv+0x194>)
 800d9e6:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800d9ea:	7813      	ldrb	r3, [r2, #0]
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	b25b      	sxtb	r3, r3
 800d9f0:	4299      	cmp	r1, r3
 800d9f2:	7013      	strb	r3, [r2, #0]
 800d9f4:	dc10      	bgt.n	800da18 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	68e0      	ldr	r0, [r4, #12]
 800d9fa:	a902      	add	r1, sp, #8
 800d9fc:	7013      	strb	r3, [r2, #0]
 800d9fe:	aa03      	add	r2, sp, #12
 800da00:	6803      	ldr	r3, [r0, #0]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	4798      	blx	r3
 800da06:	6823      	ldr	r3, [r4, #0]
 800da08:	2800      	cmp	r0, #0
 800da0a:	d059      	beq.n	800dac0 <_ZN8touchgfx3HAL4tickEv+0x170>
 800da0c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800da10:	4620      	mov	r0, r4
 800da12:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800da16:	4798      	blx	r3
 800da18:	2300      	movs	r3, #0
 800da1a:	6960      	ldr	r0, [r4, #20]
 800da1c:	f88d 3007 	strb.w	r3, [sp, #7]
 800da20:	b158      	cbz	r0, 800da3a <_ZN8touchgfx3HAL4tickEv+0xea>
 800da22:	6803      	ldr	r3, [r0, #0]
 800da24:	f10d 0107 	add.w	r1, sp, #7
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	4798      	blx	r3
 800da2c:	b128      	cbz	r0, 800da3a <_ZN8touchgfx3HAL4tickEv+0xea>
 800da2e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800da30:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800da34:	6803      	ldr	r3, [r0, #0]
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	4798      	blx	r3
 800da3a:	f104 001c 	add.w	r0, r4, #28
 800da3e:	f011 fd1f 	bl	801f480 <_ZN8touchgfx8Gestures4tickEv>
 800da42:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800da46:	b30b      	cbz	r3, 800da8c <_ZN8touchgfx3HAL4tickEv+0x13c>
 800da48:	6920      	ldr	r0, [r4, #16]
 800da4a:	6803      	ldr	r3, [r0, #0]
 800da4c:	691b      	ldr	r3, [r3, #16]
 800da4e:	4798      	blx	r3
 800da50:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800da52:	4606      	mov	r6, r0
 800da54:	b903      	cbnz	r3, 800da58 <_ZN8touchgfx3HAL4tickEv+0x108>
 800da56:	6760      	str	r0, [r4, #116]	@ 0x74
 800da58:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800da5a:	4a23      	ldr	r2, [pc, #140]	@ (800dae8 <_ZN8touchgfx3HAL4tickEv+0x198>)
 800da5c:	1af3      	subs	r3, r6, r3
 800da5e:	4293      	cmp	r3, r2
 800da60:	d914      	bls.n	800da8c <_ZN8touchgfx3HAL4tickEv+0x13c>
 800da62:	6920      	ldr	r0, [r4, #16]
 800da64:	6803      	ldr	r3, [r0, #0]
 800da66:	699b      	ldr	r3, [r3, #24]
 800da68:	4798      	blx	r3
 800da6a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800da6c:	2264      	movs	r2, #100	@ 0x64
 800da6e:	1af3      	subs	r3, r6, r3
 800da70:	fbb3 f3f2 	udiv	r3, r3, r2
 800da74:	fbb0 f0f3 	udiv	r0, r0, r3
 800da78:	2800      	cmp	r0, #0
 800da7a:	dc26      	bgt.n	800daca <_ZN8touchgfx3HAL4tickEv+0x17a>
 800da7c:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800da80:	6920      	ldr	r0, [r4, #16]
 800da82:	2100      	movs	r1, #0
 800da84:	6803      	ldr	r3, [r0, #0]
 800da86:	69db      	ldr	r3, [r3, #28]
 800da88:	4798      	blx	r3
 800da8a:	6766      	str	r6, [r4, #116]	@ 0x74
 800da8c:	6823      	ldr	r3, [r4, #0]
 800da8e:	4620      	mov	r0, r4
 800da90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800da94:	4798      	blx	r3
 800da96:	f004 fad9 	bl	801204c <_ZN8touchgfx11Application11getInstanceEv>
 800da9a:	6803      	ldr	r3, [r0, #0]
 800da9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da9e:	4798      	blx	r3
 800daa0:	6823      	ldr	r3, [r4, #0]
 800daa2:	4620      	mov	r0, r4
 800daa4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800daa8:	4798      	blx	r3
 800daaa:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800daae:	2b02      	cmp	r3, #2
 800dab0:	d002      	beq.n	800dab8 <_ZN8touchgfx3HAL4tickEv+0x168>
 800dab2:	2001      	movs	r0, #1
 800dab4:	f7f3 ff8e 	bl	80019d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800dab8:	2300      	movs	r3, #0
 800daba:	702b      	strb	r3, [r5, #0]
 800dabc:	b004      	add	sp, #16
 800dabe:	bd70      	pop	{r4, r5, r6, pc}
 800dac0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800dac4:	4620      	mov	r0, r4
 800dac6:	4798      	blx	r3
 800dac8:	e7a6      	b.n	800da18 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800daca:	2863      	cmp	r0, #99	@ 0x63
 800dacc:	bfcb      	itete	gt
 800dace:	2300      	movgt	r3, #0
 800dad0:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800dad4:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800dad8:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800dadc:	e7d0      	b.n	800da80 <_ZN8touchgfx3HAL4tickEv+0x130>
 800dade:	bf00      	nop
 800dae0:	24025124 	.word	0x24025124
 800dae4:	24025125 	.word	0x24025125
 800dae8:	05f5e100 	.word	0x05f5e100

0800daec <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800daec:	b510      	push	{r4, lr}
 800daee:	4604      	mov	r4, r0
 800daf0:	f7f4 ffc2 	bl	8002a78 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800daf4:	2200      	movs	r2, #0
 800daf6:	6863      	ldr	r3, [r4, #4]
 800daf8:	729a      	strb	r2, [r3, #10]
 800dafa:	bd10      	pop	{r4, pc}

0800dafc <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800dafc:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800dafe:	301c      	adds	r0, #28
 800db00:	f011 bcbc 	b.w	801f47c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800db04 <_ZN8touchgfx3HAL5touchEll>:
 800db04:	b530      	push	{r4, r5, lr}
 800db06:	b087      	sub	sp, #28
 800db08:	4604      	mov	r4, r0
 800db0a:	a804      	add	r0, sp, #16
 800db0c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800db10:	f004 f884 	bl	8011c1c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800db14:	9b04      	ldr	r3, [sp, #16]
 800db16:	a906      	add	r1, sp, #24
 800db18:	a803      	add	r0, sp, #12
 800db1a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800db1e:	9b05      	ldr	r3, [sp, #20]
 800db20:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800db24:	f004 f8cc 	bl	8011cc0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800db28:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800db2c:	f104 001c 	add.w	r0, r4, #28
 800db30:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800db34:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800db38:	b189      	cbz	r1, 800db5e <_ZN8touchgfx3HAL5touchEll+0x5a>
 800db3a:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800db3e:	9300      	str	r3, [sp, #0]
 800db40:	4613      	mov	r3, r2
 800db42:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800db46:	462a      	mov	r2, r5
 800db48:	f011 fca8 	bl	801f49c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800db4c:	b128      	cbz	r0, 800db5a <_ZN8touchgfx3HAL5touchEll+0x56>
 800db4e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800db52:	6623      	str	r3, [r4, #96]	@ 0x60
 800db54:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800db58:	6663      	str	r3, [r4, #100]	@ 0x64
 800db5a:	b007      	add	sp, #28
 800db5c:	bd30      	pop	{r4, r5, pc}
 800db5e:	f011 fcdd 	bl	801f51c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800db62:	2301      	movs	r3, #1
 800db64:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800db68:	e7f1      	b.n	800db4e <_ZN8touchgfx3HAL5touchEll+0x4a>

0800db6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800db6a:	b510      	push	{r4, lr}
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d046      	beq.n	800dbfe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800db70:	ea81 0002 	eor.w	r0, r1, r2
 800db74:	07c4      	lsls	r4, r0, #31
 800db76:	d508      	bpl.n	800db8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800db78:	440b      	add	r3, r1
 800db7a:	3a01      	subs	r2, #1
 800db7c:	428b      	cmp	r3, r1
 800db7e:	d93e      	bls.n	800dbfe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800db80:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800db84:	f801 0b01 	strb.w	r0, [r1], #1
 800db88:	e7f8      	b.n	800db7c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800db8a:	07d0      	lsls	r0, r2, #31
 800db8c:	bf42      	ittt	mi
 800db8e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800db92:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800db96:	f801 0b01 	strbmi.w	r0, [r1], #1
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d911      	bls.n	800dbc2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800db9e:	ea81 0402 	eor.w	r4, r1, r2
 800dba2:	4610      	mov	r0, r2
 800dba4:	07a4      	lsls	r4, r4, #30
 800dba6:	d022      	beq.n	800dbee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800dba8:	f023 0401 	bic.w	r4, r3, #1
 800dbac:	440c      	add	r4, r1
 800dbae:	428c      	cmp	r4, r1
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	d904      	bls.n	800dbbe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800dbb4:	8812      	ldrh	r2, [r2, #0]
 800dbb6:	3002      	adds	r0, #2
 800dbb8:	f821 2b02 	strh.w	r2, [r1], #2
 800dbbc:	e7f7      	b.n	800dbae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800dbbe:	f003 0301 	and.w	r3, r3, #1
 800dbc2:	f023 0003 	bic.w	r0, r3, #3
 800dbc6:	4408      	add	r0, r1
 800dbc8:	4288      	cmp	r0, r1
 800dbca:	4614      	mov	r4, r2
 800dbcc:	d904      	bls.n	800dbd8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800dbce:	6824      	ldr	r4, [r4, #0]
 800dbd0:	3204      	adds	r2, #4
 800dbd2:	f841 4b04 	str.w	r4, [r1], #4
 800dbd6:	e7f7      	b.n	800dbc8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800dbd8:	f003 0303 	and.w	r3, r3, #3
 800dbdc:	3a01      	subs	r2, #1
 800dbde:	440b      	add	r3, r1
 800dbe0:	428b      	cmp	r3, r1
 800dbe2:	d90c      	bls.n	800dbfe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800dbe4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800dbe8:	f801 0b01 	strb.w	r0, [r1], #1
 800dbec:	e7f8      	b.n	800dbe0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800dbee:	0790      	lsls	r0, r2, #30
 800dbf0:	d0e7      	beq.n	800dbc2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800dbf2:	f832 0b02 	ldrh.w	r0, [r2], #2
 800dbf6:	3b02      	subs	r3, #2
 800dbf8:	f821 0b02 	strh.w	r0, [r1], #2
 800dbfc:	e7e1      	b.n	800dbc2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800dbfe:	2001      	movs	r0, #1
 800dc00:	bd10      	pop	{r4, pc}

0800dc02 <_ZN8touchgfx3HAL7noTouchEv>:
 800dc02:	b510      	push	{r4, lr}
 800dc04:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800dc08:	4604      	mov	r4, r0
 800dc0a:	b153      	cbz	r3, 800dc22 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800dc0c:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800dc10:	2101      	movs	r1, #1
 800dc12:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800dc16:	301c      	adds	r0, #28
 800dc18:	f011 fc80 	bl	801f51c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800dc22:	bd10      	pop	{r4, pc}

0800dc24 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800dc24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc28:	b085      	sub	sp, #20
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	4699      	mov	r9, r3
 800dc30:	ad04      	add	r5, sp, #16
 800dc32:	460f      	mov	r7, r1
 800dc34:	4690      	mov	r8, r2
 800dc36:	f845 0d04 	str.w	r0, [r5, #-4]!
 800dc3a:	69a0      	ldr	r0, [r4, #24]
 800dc3c:	6806      	ldr	r6, [r0, #0]
 800dc3e:	9501      	str	r5, [sp, #4]
 800dc40:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800dc44:	9500      	str	r5, [sp, #0]
 800dc46:	6835      	ldr	r5, [r6, #0]
 800dc48:	47a8      	blx	r5
 800dc4a:	4d10      	ldr	r5, [pc, #64]	@ (800dc8c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800dc4c:	4606      	mov	r6, r0
 800dc4e:	f8a5 9000 	strh.w	r9, [r5]
 800dc52:	f7f6 f80d 	bl	8003c70 <_ZN8touchgfx3HAL3lcdEv>
 800dc56:	6803      	ldr	r3, [r0, #0]
 800dc58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc5a:	4798      	blx	r3
 800dc5c:	b128      	cbz	r0, 800dc6a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800dc5e:	2801      	cmp	r0, #1
 800dc60:	d00b      	beq.n	800dc7a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800dc62:	4630      	mov	r0, r6
 800dc64:	b005      	add	sp, #20
 800dc66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc6a:	882b      	ldrh	r3, [r5, #0]
 800dc6c:	fb08 7203 	mla	r2, r8, r3, r7
 800dc70:	9b03      	ldr	r3, [sp, #12]
 800dc72:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800dc76:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800dc78:	e7f3      	b.n	800dc62 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800dc7a:	882a      	ldrh	r2, [r5, #0]
 800dc7c:	9b03      	ldr	r3, [sp, #12]
 800dc7e:	fb08 7202 	mla	r2, r8, r2, r7
 800dc82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800dc86:	1a9a      	subs	r2, r3, r2
 800dc88:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800dc8a:	e7ea      	b.n	800dc62 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800dc8c:	2402511a 	.word	0x2402511a

0800dc90 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 800dc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc92:	4b15      	ldr	r3, [pc, #84]	@ (800dce8 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 800dc94:	460f      	mov	r7, r1
 800dc96:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 800dc9a:	4606      	mov	r6, r0
 800dc9c:	881b      	ldrh	r3, [r3, #0]
 800dc9e:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800dca0:	fb93 f4f4 	sdiv	r4, r3, r4
 800dca4:	f7f5 ffe4 	bl	8003c70 <_ZN8touchgfx3HAL3lcdEv>
 800dca8:	6803      	ldr	r3, [r0, #0]
 800dcaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcac:	4798      	blx	r3
 800dcae:	2801      	cmp	r0, #1
 800dcb0:	d00b      	beq.n	800dcca <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 800dcb2:	d303      	bcc.n	800dcbc <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 800dcb4:	2802      	cmp	r0, #2
 800dcb6:	d010      	beq.n	800dcda <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 800dcb8:	63f5      	str	r5, [r6, #60]	@ 0x3c
 800dcba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcbc:	4b0b      	ldr	r3, [pc, #44]	@ (800dcec <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800dcbe:	437c      	muls	r4, r7
 800dcc0:	8819      	ldrh	r1, [r3, #0]
 800dcc2:	434c      	muls	r4, r1
 800dcc4:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 800dcc8:	e7f6      	b.n	800dcb8 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800dcca:	4b08      	ldr	r3, [pc, #32]	@ (800dcec <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800dccc:	437c      	muls	r4, r7
 800dcce:	8819      	ldrh	r1, [r3, #0]
 800dcd0:	434c      	muls	r4, r1
 800dcd2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800dcd6:	1b2d      	subs	r5, r5, r4
 800dcd8:	e7ee      	b.n	800dcb8 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800dcda:	4b04      	ldr	r3, [pc, #16]	@ (800dcec <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800dcdc:	437c      	muls	r4, r7
 800dcde:	8819      	ldrh	r1, [r3, #0]
 800dce0:	434c      	muls	r4, r1
 800dce2:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 800dce6:	e7e7      	b.n	800dcb8 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800dce8:	2402511c 	.word	0x2402511c
 800dcec:	2402511a 	.word	0x2402511a

0800dcf0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800dcf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcf2:	b08b      	sub	sp, #44	@ 0x2c
 800dcf4:	4617      	mov	r7, r2
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	460e      	mov	r6, r1
 800dcfa:	461d      	mov	r5, r3
 800dcfc:	f7f5 ffb8 	bl	8003c70 <_ZN8touchgfx3HAL3lcdEv>
 800dd00:	6803      	ldr	r3, [r0, #0]
 800dd02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd04:	4798      	blx	r3
 800dd06:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800dd0a:	9007      	str	r0, [sp, #28]
 800dd0c:	4631      	mov	r1, r6
 800dd0e:	6822      	ldr	r2, [r4, #0]
 800dd10:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800dd14:	4b0c      	ldr	r3, [pc, #48]	@ (800dd48 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800dd16:	4620      	mov	r0, r4
 800dd18:	881b      	ldrh	r3, [r3, #0]
 800dd1a:	9306      	str	r3, [sp, #24]
 800dd1c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800dd20:	9305      	str	r3, [sp, #20]
 800dd22:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800dd26:	9304      	str	r3, [sp, #16]
 800dd28:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800dd2c:	9303      	str	r3, [sp, #12]
 800dd2e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800dd32:	9302      	str	r3, [sp, #8]
 800dd34:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800dd38:	e9cd 5300 	strd	r5, r3, [sp]
 800dd3c:	463b      	mov	r3, r7
 800dd3e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800dd40:	2200      	movs	r2, #0
 800dd42:	47a8      	blx	r5
 800dd44:	b00b      	add	sp, #44	@ 0x2c
 800dd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd48:	2402511a 	.word	0x2402511a

0800dd4c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800dd4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd50:	4698      	mov	r8, r3
 800dd52:	6803      	ldr	r3, [r0, #0]
 800dd54:	b08b      	sub	sp, #44	@ 0x2c
 800dd56:	4617      	mov	r7, r2
 800dd58:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800dd5a:	460e      	mov	r6, r1
 800dd5c:	4b13      	ldr	r3, [pc, #76]	@ (800ddac <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800dd5e:	4604      	mov	r4, r0
 800dd60:	f8b3 9000 	ldrh.w	r9, [r3]
 800dd64:	f7f5 ff84 	bl	8003c70 <_ZN8touchgfx3HAL3lcdEv>
 800dd68:	6803      	ldr	r3, [r0, #0]
 800dd6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd6c:	4798      	blx	r3
 800dd6e:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800dd72:	2200      	movs	r2, #0
 800dd74:	4631      	mov	r1, r6
 800dd76:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800dd7a:	2302      	movs	r3, #2
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800dd82:	2301      	movs	r3, #1
 800dd84:	9305      	str	r3, [sp, #20]
 800dd86:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800dd8a:	9304      	str	r3, [sp, #16]
 800dd8c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800dd90:	9303      	str	r3, [sp, #12]
 800dd92:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800dd96:	9302      	str	r3, [sp, #8]
 800dd98:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800dd9c:	e9cd 8300 	strd	r8, r3, [sp]
 800dda0:	463b      	mov	r3, r7
 800dda2:	47a8      	blx	r5
 800dda4:	b00b      	add	sp, #44	@ 0x2c
 800dda6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddaa:	bf00      	nop
 800ddac:	2402511a 	.word	0x2402511a

0800ddb0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800ddb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddb4:	4698      	mov	r8, r3
 800ddb6:	6803      	ldr	r3, [r0, #0]
 800ddb8:	b087      	sub	sp, #28
 800ddba:	460e      	mov	r6, r1
 800ddbc:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 800ddbe:	4617      	mov	r7, r2
 800ddc0:	4b0f      	ldr	r3, [pc, #60]	@ (800de00 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	f8b3 9000 	ldrh.w	r9, [r3]
 800ddc8:	f7f5 ff52 	bl	8003c70 <_ZN8touchgfx3HAL3lcdEv>
 800ddcc:	6803      	ldr	r3, [r0, #0]
 800ddce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddd0:	4798      	blx	r3
 800ddd2:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800ddd6:	463a      	mov	r2, r7
 800ddd8:	4631      	mov	r1, r6
 800ddda:	f8cd 900c 	str.w	r9, [sp, #12]
 800ddde:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800dde2:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800dde6:	4620      	mov	r0, r4
 800dde8:	9302      	str	r3, [sp, #8]
 800ddea:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800ddee:	9301      	str	r3, [sp, #4]
 800ddf0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800ddf4:	9300      	str	r3, [sp, #0]
 800ddf6:	4643      	mov	r3, r8
 800ddf8:	47a8      	blx	r5
 800ddfa:	b007      	add	sp, #28
 800ddfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de00:	2402511a 	.word	0x2402511a

0800de04 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800de04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de08:	4604      	mov	r4, r0
 800de0a:	b08f      	sub	sp, #60	@ 0x3c
 800de0c:	4610      	mov	r0, r2
 800de0e:	460d      	mov	r5, r1
 800de10:	4691      	mov	r9, r2
 800de12:	461e      	mov	r6, r3
 800de14:	f007 fa1e 	bl	8015254 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800de18:	2800      	cmp	r0, #0
 800de1a:	f000 809d 	beq.w	800df58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800de1e:	6823      	ldr	r3, [r4, #0]
 800de20:	4620      	mov	r0, r4
 800de22:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800dfbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800de26:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800de2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de2c:	4798      	blx	r3
 800de2e:	6823      	ldr	r3, [r4, #0]
 800de30:	4620      	mov	r0, r4
 800de32:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800dfc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800de36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de38:	4798      	blx	r3
 800de3a:	f8bb 3000 	ldrh.w	r3, [fp]
 800de3e:	4f5c      	ldr	r7, [pc, #368]	@ (800dfb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800de40:	9301      	str	r3, [sp, #4]
 800de42:	f8ba 3000 	ldrh.w	r3, [sl]
 800de46:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800de4a:	4640      	mov	r0, r8
 800de4c:	9302      	str	r3, [sp, #8]
 800de4e:	883b      	ldrh	r3, [r7, #0]
 800de50:	9303      	str	r3, [sp, #12]
 800de52:	4b58      	ldr	r3, [pc, #352]	@ (800dfb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800de54:	881a      	ldrh	r2, [r3, #0]
 800de56:	9305      	str	r3, [sp, #20]
 800de58:	9204      	str	r2, [sp, #16]
 800de5a:	f007 fb4b 	bl	80154f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800de5e:	8038      	strh	r0, [r7, #0]
 800de60:	4640      	mov	r0, r8
 800de62:	f007 fb7b 	bl	801555c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800de66:	9b05      	ldr	r3, [sp, #20]
 800de68:	b280      	uxth	r0, r0
 800de6a:	8018      	strh	r0, [r3, #0]
 800de6c:	4b52      	ldr	r3, [pc, #328]	@ (800dfb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d174      	bne.n	800df5e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800de74:	883b      	ldrh	r3, [r7, #0]
 800de76:	f8aa 0000 	strh.w	r0, [sl]
 800de7a:	f8ab 3000 	strh.w	r3, [fp]
 800de7e:	4648      	mov	r0, r9
 800de80:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800de84:	f007 f9e6 	bl	8015254 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800de88:	2200      	movs	r2, #0
 800de8a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800de8e:	4611      	mov	r1, r2
 800de90:	4628      	mov	r0, r5
 800de92:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800de96:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800de9a:	f7f5 ffd4 	bl	8003e46 <_ZN8touchgfx8Drawable5setXYEss>
 800de9e:	2301      	movs	r3, #1
 800dea0:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800dea4:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800dea8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	dd5c      	ble.n	800df6a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800deb0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	dd58      	ble.n	800df6a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800deb8:	462a      	mov	r2, r5
 800deba:	ab0a      	add	r3, sp, #40	@ 0x28
 800debc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800dec0:	6851      	ldr	r1, [r2, #4]
 800dec2:	c303      	stmia	r3!, {r0, r1}
 800dec4:	4631      	mov	r1, r6
 800dec6:	a80a      	add	r0, sp, #40	@ 0x28
 800dec8:	f7ff fbc8 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 800decc:	4b38      	ldr	r3, [pc, #224]	@ (800dfb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800dece:	2100      	movs	r1, #0
 800ded0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ded4:	4b37      	ldr	r3, [pc, #220]	@ (800dfb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800ded6:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800deda:	aa0a      	add	r2, sp, #40	@ 0x28
 800dedc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dee0:	910c      	str	r1, [sp, #48]	@ 0x30
 800dee2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800dee6:	ab08      	add	r3, sp, #32
 800dee8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800deec:	e883 0003 	stmia.w	r3, {r0, r1}
 800def0:	4618      	mov	r0, r3
 800def2:	a90c      	add	r1, sp, #48	@ 0x30
 800def4:	f7ff fbb2 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 800def8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800defa:	2b00      	cmp	r3, #0
 800defc:	d13c      	bne.n	800df78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800defe:	2000      	movs	r0, #0
 800df00:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800df04:	2600      	movs	r6, #0
 800df06:	696b      	ldr	r3, [r5, #20]
 800df08:	a908      	add	r1, sp, #32
 800df0a:	682a      	ldr	r2, [r5, #0]
 800df0c:	4628      	mov	r0, r5
 800df0e:	9305      	str	r3, [sp, #20]
 800df10:	616e      	str	r6, [r5, #20]
 800df12:	6892      	ldr	r2, [r2, #8]
 800df14:	4790      	blx	r2
 800df16:	9b05      	ldr	r3, [sp, #20]
 800df18:	4652      	mov	r2, sl
 800df1a:	4649      	mov	r1, r9
 800df1c:	616b      	str	r3, [r5, #20]
 800df1e:	4628      	mov	r0, r5
 800df20:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800df24:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800df28:	f7f5 ff8d 	bl	8003e46 <_ZN8touchgfx8Drawable5setXYEss>
 800df2c:	9a01      	ldr	r2, [sp, #4]
 800df2e:	4b23      	ldr	r3, [pc, #140]	@ (800dfbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800df30:	4620      	mov	r0, r4
 800df32:	801a      	strh	r2, [r3, #0]
 800df34:	9a02      	ldr	r2, [sp, #8]
 800df36:	4b22      	ldr	r3, [pc, #136]	@ (800dfc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800df38:	801a      	strh	r2, [r3, #0]
 800df3a:	9a03      	ldr	r2, [sp, #12]
 800df3c:	4b1c      	ldr	r3, [pc, #112]	@ (800dfb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800df3e:	801a      	strh	r2, [r3, #0]
 800df40:	4b1c      	ldr	r3, [pc, #112]	@ (800dfb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800df42:	9a04      	ldr	r2, [sp, #16]
 800df44:	801a      	strh	r2, [r3, #0]
 800df46:	6823      	ldr	r3, [r4, #0]
 800df48:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800df4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df4e:	4798      	blx	r3
 800df50:	6823      	ldr	r3, [r4, #0]
 800df52:	4620      	mov	r0, r4
 800df54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df56:	4798      	blx	r3
 800df58:	b00f      	add	sp, #60	@ 0x3c
 800df5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df5e:	883b      	ldrh	r3, [r7, #0]
 800df60:	f8ab 0000 	strh.w	r0, [fp]
 800df64:	f8aa 3000 	strh.w	r3, [sl]
 800df68:	e789      	b.n	800de7e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800df6a:	462a      	mov	r2, r5
 800df6c:	ab0a      	add	r3, sp, #40	@ 0x28
 800df6e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800df72:	6851      	ldr	r1, [r2, #4]
 800df74:	c303      	stmia	r3!, {r0, r1}
 800df76:	e7a9      	b.n	800decc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800df78:	a807      	add	r0, sp, #28
 800df7a:	f007 fbf9 	bl	8015770 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800df7e:	4606      	mov	r6, r0
 800df80:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800df82:	6803      	ldr	r3, [r0, #0]
 800df84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df86:	4798      	blx	r3
 800df88:	4286      	cmp	r6, r0
 800df8a:	d1b8      	bne.n	800defe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800df8c:	f7f5 fe70 	bl	8003c70 <_ZN8touchgfx3HAL3lcdEv>
 800df90:	6803      	ldr	r3, [r0, #0]
 800df92:	4606      	mov	r6, r0
 800df94:	a807      	add	r0, sp, #28
 800df96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df98:	9305      	str	r3, [sp, #20]
 800df9a:	f007 fbe9 	bl	8015770 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800df9e:	9b05      	ldr	r3, [sp, #20]
 800dfa0:	4601      	mov	r1, r0
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	4798      	blx	r3
 800dfa6:	f080 0001 	eor.w	r0, r0, #1
 800dfaa:	b2c0      	uxtb	r0, r0
 800dfac:	e7a8      	b.n	800df00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800dfae:	bf00      	nop
 800dfb0:	24025114 	.word	0x24025114
 800dfb4:	24025116 	.word	0x24025116
 800dfb8:	24025118 	.word	0x24025118
 800dfbc:	2402511a 	.word	0x2402511a
 800dfc0:	2402511c 	.word	0x2402511c

0800dfc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800dfc4:	4b07      	ldr	r3, [pc, #28]	@ (800dfe4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800dfc6:	b510      	push	{r4, lr}
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	4604      	mov	r4, r0
 800dfcc:	b13b      	cbz	r3, 800dfde <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800dfce:	6803      	ldr	r3, [r0, #0]
 800dfd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfd2:	4798      	blx	r3
 800dfd4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dfd6:	4283      	cmp	r3, r0
 800dfd8:	d101      	bne.n	800dfde <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800dfda:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800dfdc:	bd10      	pop	{r4, pc}
 800dfde:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800dfe0:	e7fc      	b.n	800dfdc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800dfe2:	bf00      	nop
 800dfe4:	2402511e 	.word	0x2402511e

0800dfe8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800dfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfec:	461d      	mov	r5, r3
 800dfee:	b08a      	sub	sp, #40	@ 0x28
 800dff0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dff4:	4690      	mov	r8, r2
 800dff6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800dffa:	2400      	movs	r4, #0
 800dffc:	4607      	mov	r7, r0
 800dffe:	fb06 8505 	mla	r5, r6, r5, r8
 800e002:	9404      	str	r4, [sp, #16]
 800e004:	f88d 4020 	strb.w	r4, [sp, #32]
 800e008:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e00c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e010:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e014:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e018:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e01c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e020:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e024:	f7ff ffce 	bl	800dfc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e028:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e032:	a901      	add	r1, sp, #4
 800e034:	9505      	str	r5, [sp, #20]
 800e036:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e03a:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800e03e:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800e042:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800e046:	6803      	ldr	r3, [r0, #0]
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	4798      	blx	r3
 800e04c:	b00a      	add	sp, #40	@ 0x28
 800e04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e052 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800e052:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e056:	b08b      	sub	sp, #44	@ 0x2c
 800e058:	2400      	movs	r4, #0
 800e05a:	4691      	mov	r9, r2
 800e05c:	461d      	mov	r5, r3
 800e05e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800e062:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e066:	4688      	mov	r8, r1
 800e068:	4607      	mov	r7, r0
 800e06a:	9404      	str	r4, [sp, #16]
 800e06c:	fb06 9505 	mla	r5, r6, r5, r9
 800e070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e074:	f7ff ffa6 	bl	800dfc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e078:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e07c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e086:	a901      	add	r1, sp, #4
 800e088:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e08c:	9505      	str	r5, [sp, #20]
 800e08e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e092:	f8ad 401c 	strh.w	r4, [sp, #28]
 800e096:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e09a:	f8cd 8010 	str.w	r8, [sp, #16]
 800e09e:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e0a2:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e0a6:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800e0aa:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800e0ae:	6803      	ldr	r3, [r0, #0]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	4798      	blx	r3
 800e0b4:	b00b      	add	sp, #44	@ 0x2c
 800e0b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800e0bc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800e0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c0:	b08a      	sub	sp, #40	@ 0x28
 800e0c2:	4698      	mov	r8, r3
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	4606      	mov	r6, r0
 800e0c8:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800e0cc:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800e0d0:	2d0b      	cmp	r5, #11
 800e0d2:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800e0d6:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800e0da:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800e0de:	9304      	str	r3, [sp, #16]
 800e0e0:	d137      	bne.n	800e152 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800e0e2:	2380      	movs	r3, #128	@ 0x80
 800e0e4:	f88d 0020 	strb.w	r0, [sp, #32]
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	9203      	str	r2, [sp, #12]
 800e0ec:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e0f0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e0f4:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e0f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e0fc:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e100:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e104:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e108:	f7ff ff5c 	bl	800dfc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e10c:	2c0b      	cmp	r4, #11
 800e10e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800e112:	f8ad 701e 	strh.w	r7, [sp, #30]
 800e116:	bf94      	ite	ls
 800e118:	4b19      	ldrls	r3, [pc, #100]	@ (800e180 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800e11a:	2100      	movhi	r1, #0
 800e11c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800e120:	bf98      	it	ls
 800e122:	5d19      	ldrbls	r1, [r3, r4]
 800e124:	fb02 8307 	mla	r3, r2, r7, r8
 800e128:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e12c:	10c9      	asrs	r1, r1, #3
 800e12e:	fb01 0003 	mla	r0, r1, r3, r0
 800e132:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800e136:	a901      	add	r1, sp, #4
 800e138:	9005      	str	r0, [sp, #20]
 800e13a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800e13e:	2300      	movs	r3, #0
 800e140:	6870      	ldr	r0, [r6, #4]
 800e142:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e146:	6803      	ldr	r3, [r0, #0]
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	4798      	blx	r3
 800e14c:	b00a      	add	sp, #40	@ 0x28
 800e14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e152:	2d02      	cmp	r5, #2
 800e154:	d109      	bne.n	800e16a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800e156:	28ff      	cmp	r0, #255	@ 0xff
 800e158:	d105      	bne.n	800e166 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800e15a:	f1bc 0f00 	cmp.w	ip, #0
 800e15e:	bf14      	ite	ne
 800e160:	2340      	movne	r3, #64	@ 0x40
 800e162:	2320      	moveq	r3, #32
 800e164:	e7be      	b.n	800e0e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e166:	2340      	movs	r3, #64	@ 0x40
 800e168:	e7bc      	b.n	800e0e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e16a:	28ff      	cmp	r0, #255	@ 0xff
 800e16c:	d105      	bne.n	800e17a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800e16e:	f1bc 0f00 	cmp.w	ip, #0
 800e172:	bf14      	ite	ne
 800e174:	2304      	movne	r3, #4
 800e176:	2301      	moveq	r3, #1
 800e178:	e7b4      	b.n	800e0e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e17a:	2304      	movs	r3, #4
 800e17c:	e7b2      	b.n	800e0e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e17e:	bf00      	nop
 800e180:	08024180 	.word	0x08024180

0800e184 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800e184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e188:	b08b      	sub	sp, #44	@ 0x2c
 800e18a:	461d      	mov	r5, r3
 800e18c:	2400      	movs	r4, #0
 800e18e:	4688      	mov	r8, r1
 800e190:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800e194:	4693      	mov	fp, r2
 800e196:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800e19a:	4607      	mov	r7, r0
 800e19c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800e1a0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800e1a4:	9404      	str	r4, [sp, #16]
 800e1a6:	bf14      	ite	ne
 800e1a8:	2308      	movne	r3, #8
 800e1aa:	2302      	moveq	r3, #2
 800e1ac:	fb05 b50a 	mla	r5, r5, sl, fp
 800e1b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1b4:	f7ff ff06 	bl	800dfc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e1b8:	2e0b      	cmp	r6, #11
 800e1ba:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800e1be:	a901      	add	r1, sp, #4
 800e1c0:	bf98      	it	ls
 800e1c2:	4b13      	ldrls	r3, [pc, #76]	@ (800e210 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800e1c4:	f8ad a01e 	strh.w	sl, [sp, #30]
 800e1c8:	bf98      	it	ls
 800e1ca:	5d9c      	ldrbls	r4, [r3, r6]
 800e1cc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800e1d0:	10e4      	asrs	r4, r4, #3
 800e1d2:	f8cd 8010 	str.w	r8, [sp, #16]
 800e1d6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e1da:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e1de:	fb04 0405 	mla	r4, r4, r5, r0
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	9405      	str	r4, [sp, #20]
 800e1ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e1f0:	f88d 9020 	strb.w	r9, [sp, #32]
 800e1f4:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800e1f8:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e1fc:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800e200:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800e204:	6803      	ldr	r3, [r0, #0]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	4798      	blx	r3
 800e20a:	b00b      	add	sp, #44	@ 0x2c
 800e20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e210:	08024180 	.word	0x08024180

0800e214 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800e214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e218:	461e      	mov	r6, r3
 800e21a:	4b0a      	ldr	r3, [pc, #40]	@ (800e244 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800e21c:	460f      	mov	r7, r1
 800e21e:	4690      	mov	r8, r2
 800e220:	881d      	ldrh	r5, [r3, #0]
 800e222:	f7f5 fd25 	bl	8003c70 <_ZN8touchgfx3HAL3lcdEv>
 800e226:	6803      	ldr	r3, [r0, #0]
 800e228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e22a:	4798      	blx	r3
 800e22c:	280b      	cmp	r0, #11
 800e22e:	bf96      	itet	ls
 800e230:	4b05      	ldrls	r3, [pc, #20]	@ (800e248 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800e232:	2400      	movhi	r4, #0
 800e234:	5c1c      	ldrbls	r4, [r3, r0]
 800e236:	fb08 7005 	mla	r0, r8, r5, r7
 800e23a:	10e4      	asrs	r4, r4, #3
 800e23c:	fb04 6000 	mla	r0, r4, r0, r6
 800e240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e244:	2402511a 	.word	0x2402511a
 800e248:	08024180 	.word	0x08024180

0800e24c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800e24c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e24e:	b08b      	sub	sp, #44	@ 0x2c
 800e250:	461f      	mov	r7, r3
 800e252:	4604      	mov	r4, r0
 800e254:	4616      	mov	r6, r2
 800e256:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e25a:	2500      	movs	r5, #0
 800e25c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e260:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e264:	9504      	str	r5, [sp, #16]
 800e266:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e26a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e26e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e272:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e276:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e27a:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800e27e:	f88d 3020 	strb.w	r3, [sp, #32]
 800e282:	f7ff fe9f 	bl	800dfc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e286:	463a      	mov	r2, r7
 800e288:	4631      	mov	r1, r6
 800e28a:	4603      	mov	r3, r0
 800e28c:	4620      	mov	r0, r4
 800e28e:	f7ff ffc1 	bl	800e214 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e292:	4b0e      	ldr	r3, [pc, #56]	@ (800e2cc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800e294:	9005      	str	r0, [sp, #20]
 800e296:	881b      	ldrh	r3, [r3, #0]
 800e298:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e29c:	f7f5 fce8 	bl	8003c70 <_ZN8touchgfx3HAL3lcdEv>
 800e2a0:	6803      	ldr	r3, [r0, #0]
 800e2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2a4:	4798      	blx	r3
 800e2a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e2a8:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800e2ac:	a901      	add	r1, sp, #4
 800e2ae:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800e2b2:	9304      	str	r3, [sp, #16]
 800e2b4:	6860      	ldr	r0, [r4, #4]
 800e2b6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800e2ba:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800e2be:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800e2c2:	6803      	ldr	r3, [r0, #0]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	4798      	blx	r3
 800e2c8:	b00b      	add	sp, #44	@ 0x2c
 800e2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2cc:	2402511a 	.word	0x2402511a

0800e2d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800e2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2d2:	b08d      	sub	sp, #52	@ 0x34
 800e2d4:	2501      	movs	r5, #1
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	466b      	mov	r3, sp
 800e2da:	9503      	str	r5, [sp, #12]
 800e2dc:	e883 0006 	stmia.w	r3, {r1, r2}
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	f8bd 6000 	ldrh.w	r6, [sp]
 800e2e6:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800e2ea:	9306      	str	r3, [sp, #24]
 800e2ec:	6803      	ldr	r3, [r0, #0]
 800e2ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2f0:	4798      	blx	r3
 800e2f2:	463a      	mov	r2, r7
 800e2f4:	4631      	mov	r1, r6
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	f7ff ff8b 	bl	800e214 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e2fe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e300:	9004      	str	r0, [sp, #16]
 800e302:	9307      	str	r3, [sp, #28]
 800e304:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e308:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e30c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e310:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800e314:	4b0e      	ldr	r3, [pc, #56]	@ (800e350 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800e316:	881b      	ldrh	r3, [r3, #0]
 800e318:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800e31c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800e320:	f7f5 fca6 	bl	8003c70 <_ZN8touchgfx3HAL3lcdEv>
 800e324:	6803      	ldr	r3, [r0, #0]
 800e326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e328:	4798      	blx	r3
 800e32a:	23ff      	movs	r3, #255	@ 0xff
 800e32c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800e330:	a903      	add	r1, sp, #12
 800e332:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800e336:	6860      	ldr	r0, [r4, #4]
 800e338:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800e33c:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800e340:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800e344:	6803      	ldr	r3, [r0, #0]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	4798      	blx	r3
 800e34a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800e34c:	b00d      	add	sp, #52	@ 0x34
 800e34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e350:	2402511a 	.word	0x2402511a

0800e354 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800e354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e358:	b08c      	sub	sp, #48	@ 0x30
 800e35a:	461e      	mov	r6, r3
 800e35c:	2300      	movs	r3, #0
 800e35e:	4604      	mov	r4, r0
 800e360:	466d      	mov	r5, sp
 800e362:	9306      	str	r3, [sp, #24]
 800e364:	6803      	ldr	r3, [r0, #0]
 800e366:	e885 0006 	stmia.w	r5, {r1, r2}
 800e36a:	2501      	movs	r5, #1
 800e36c:	f8bd 7000 	ldrh.w	r7, [sp]
 800e370:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800e374:	9503      	str	r5, [sp, #12]
 800e376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e378:	4798      	blx	r3
 800e37a:	4642      	mov	r2, r8
 800e37c:	4639      	mov	r1, r7
 800e37e:	4603      	mov	r3, r0
 800e380:	4620      	mov	r0, r4
 800e382:	f7ff ff47 	bl	800e214 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e386:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e38a:	9004      	str	r0, [sp, #16]
 800e38c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e390:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e394:	9607      	str	r6, [sp, #28]
 800e396:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800e39a:	4b10      	ldr	r3, [pc, #64]	@ (800e3dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800e39c:	881b      	ldrh	r3, [r3, #0]
 800e39e:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800e3a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e3a4:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800e3a8:	f7f5 fc62 	bl	8003c70 <_ZN8touchgfx3HAL3lcdEv>
 800e3ac:	6803      	ldr	r3, [r0, #0]
 800e3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3b0:	4798      	blx	r3
 800e3b2:	23ff      	movs	r3, #255	@ 0xff
 800e3b4:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800e3b8:	a903      	add	r1, sp, #12
 800e3ba:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800e3be:	6860      	ldr	r0, [r4, #4]
 800e3c0:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800e3c4:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800e3c8:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800e3cc:	6803      	ldr	r3, [r0, #0]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	4798      	blx	r3
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	b00c      	add	sp, #48	@ 0x30
 800e3d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3da:	bf00      	nop
 800e3dc:	2402511a 	.word	0x2402511a

0800e3e0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800e3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3e2:	b085      	sub	sp, #20
 800e3e4:	4605      	mov	r5, r0
 800e3e6:	ac02      	add	r4, sp, #8
 800e3e8:	e884 0006 	stmia.w	r4, {r1, r2}
 800e3ec:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800e3f0:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800e3f4:	f7ff fde6 	bl	800dfc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e3f8:	4631      	mov	r1, r6
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	463a      	mov	r2, r7
 800e3fe:	4628      	mov	r0, r5
 800e400:	f7ff ff08 	bl	800e214 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e404:	4a05      	ldr	r2, [pc, #20]	@ (800e41c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800e406:	682b      	ldr	r3, [r5, #0]
 800e408:	8812      	ldrh	r2, [r2, #0]
 800e40a:	9200      	str	r2, [sp, #0]
 800e40c:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 800e40e:	4603      	mov	r3, r0
 800e410:	4628      	mov	r0, r5
 800e412:	e894 0006 	ldmia.w	r4, {r1, r2}
 800e416:	47b0      	blx	r6
 800e418:	b005      	add	sp, #20
 800e41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e41c:	2402511a 	.word	0x2402511a

0800e420 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800e420:	b570      	push	{r4, r5, r6, lr}
 800e422:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800e426:	4604      	mov	r4, r0
 800e428:	b19b      	cbz	r3, 800e452 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800e42a:	2002      	movs	r0, #2
 800e42c:	f7f3 fb02 	bl	8001a34 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800e430:	2300      	movs	r3, #0
 800e432:	4620      	mov	r0, r4
 800e434:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800e438:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800e43c:	6823      	ldr	r3, [r4, #0]
 800e43e:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 800e442:	f7ff fdbf 	bl	800dfc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e446:	4601      	mov	r1, r0
 800e448:	4620      	mov	r0, r4
 800e44a:	462b      	mov	r3, r5
 800e44c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e450:	4718      	bx	r3
 800e452:	bd70      	pop	{r4, r5, r6, pc}

0800e454 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800e454:	b570      	push	{r4, r5, r6, lr}
 800e456:	4605      	mov	r5, r0
 800e458:	460c      	mov	r4, r1
 800e45a:	2003      	movs	r0, #3
 800e45c:	b149      	cbz	r1, 800e472 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800e45e:	f7f3 fa89 	bl	8001974 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800e462:	6928      	ldr	r0, [r5, #16]
 800e464:	b168      	cbz	r0, 800e482 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e466:	6803      	ldr	r3, [r0, #0]
 800e468:	2101      	movs	r1, #1
 800e46a:	695b      	ldr	r3, [r3, #20]
 800e46c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e470:	4718      	bx	r3
 800e472:	f7f3 faaf 	bl	80019d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e476:	6928      	ldr	r0, [r5, #16]
 800e478:	b118      	cbz	r0, 800e482 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e47a:	6803      	ldr	r3, [r0, #0]
 800e47c:	4621      	mov	r1, r4
 800e47e:	695b      	ldr	r3, [r3, #20]
 800e480:	e7f4      	b.n	800e46c <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800e482:	bd70      	pop	{r4, r5, r6, pc}

0800e484 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800e484:	b538      	push	{r3, r4, r5, lr}
 800e486:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800e48a:	4604      	mov	r4, r0
 800e48c:	460d      	mov	r5, r1
 800e48e:	428b      	cmp	r3, r1
 800e490:	d006      	beq.n	800e4a0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800e492:	6803      	ldr	r3, [r0, #0]
 800e494:	b929      	cbnz	r1, 800e4a2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800e496:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e49a:	4798      	blx	r3
 800e49c:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800e4a0:	bd38      	pop	{r3, r4, r5, pc}
 800e4a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e4a6:	e7f8      	b.n	800e49a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800e4a8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800e4a8:	4b0c      	ldr	r3, [pc, #48]	@ (800e4dc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 800e4aa:	b510      	push	{r4, lr}
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	b953      	cbnz	r3, 800e4c8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800e4b2:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800e4b6:	b93b      	cbnz	r3, 800e4c8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800e4b8:	6840      	ldr	r0, [r0, #4]
 800e4ba:	f000 f919 	bl	800e6f0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800e4be:	b118      	cbz	r0, 800e4c8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800e4c0:	6862      	ldr	r2, [r4, #4]
 800e4c2:	7a53      	ldrb	r3, [r2, #9]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d0fc      	beq.n	800e4c2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 800e4c8:	f7f4 face 	bl	8002a68 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	2100      	movs	r1, #0
 800e4d0:	f7ff ffd8 	bl	800e484 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	f7ff fd75 	bl	800dfc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e4da:	bd10      	pop	{r4, pc}
 800e4dc:	2402511e 	.word	0x2402511e

0800e4e0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800e4e0:	b570      	push	{r4, r5, r6, lr}
 800e4e2:	4604      	mov	r4, r0
 800e4e4:	6803      	ldr	r3, [r0, #0]
 800e4e6:	b919      	cbnz	r1, 800e4f0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800e4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4ee:	4718      	bx	r3
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 800e4f6:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 800e4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4fc:	4798      	blx	r3
 800e4fe:	6863      	ldr	r3, [r4, #4]
 800e500:	2101      	movs	r1, #1
 800e502:	4605      	mov	r5, r0
 800e504:	4620      	mov	r0, r4
 800e506:	7299      	strb	r1, [r3, #10]
 800e508:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 800e50c:	f7ff ffba 	bl	800e484 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e510:	4628      	mov	r0, r5
 800e512:	bd70      	pop	{r4, r5, r6, pc}

0800e514 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800e514:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800e518:	1a13      	subs	r3, r2, r0
 800e51a:	4258      	negs	r0, r3
 800e51c:	4158      	adcs	r0, r3
 800e51e:	4770      	bx	lr

0800e520 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800e520:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800e524:	1a9b      	subs	r3, r3, r2
 800e526:	2b00      	cmp	r3, #0
 800e528:	bfdc      	itt	le
 800e52a:	6882      	ldrle	r2, [r0, #8]
 800e52c:	189b      	addle	r3, r3, r2
 800e52e:	2b01      	cmp	r3, #1
 800e530:	bfcc      	ite	gt
 800e532:	2000      	movgt	r0, #0
 800e534:	2001      	movle	r0, #1
 800e536:	4770      	bx	lr

0800e538 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800e538:	6902      	ldr	r2, [r0, #16]
 800e53a:	6843      	ldr	r3, [r0, #4]
 800e53c:	2024      	movs	r0, #36	@ 0x24
 800e53e:	fb00 3002 	mla	r0, r0, r2, r3
 800e542:	4770      	bx	lr

0800e544 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800e544:	6803      	ldr	r3, [r0, #0]
 800e546:	691b      	ldr	r3, [r3, #16]
 800e548:	4718      	bx	r3

0800e54a <_ZN8touchgfx13DMA_Interface7executeEv>:
 800e54a:	2301      	movs	r3, #1
 800e54c:	b570      	push	{r4, r5, r6, lr}
 800e54e:	7203      	strb	r3, [r0, #8]
 800e550:	4604      	mov	r4, r0
 800e552:	6840      	ldr	r0, [r0, #4]
 800e554:	6803      	ldr	r3, [r0, #0]
 800e556:	699b      	ldr	r3, [r3, #24]
 800e558:	4798      	blx	r3
 800e55a:	6803      	ldr	r3, [r0, #0]
 800e55c:	4605      	mov	r5, r0
 800e55e:	2b40      	cmp	r3, #64	@ 0x40
 800e560:	d00c      	beq.n	800e57c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e562:	d810      	bhi.n	800e586 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800e564:	2b04      	cmp	r3, #4
 800e566:	d01d      	beq.n	800e5a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800e568:	d804      	bhi.n	800e574 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d006      	beq.n	800e57c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e56e:	2b02      	cmp	r3, #2
 800e570:	d02c      	beq.n	800e5cc <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800e572:	bd70      	pop	{r4, r5, r6, pc}
 800e574:	2b08      	cmp	r3, #8
 800e576:	d01d      	beq.n	800e5b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800e578:	2b20      	cmp	r3, #32
 800e57a:	d1fa      	bne.n	800e572 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800e57c:	6823      	ldr	r3, [r4, #0]
 800e57e:	4620      	mov	r0, r4
 800e580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e582:	4798      	blx	r3
 800e584:	e013      	b.n	800e5ae <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800e586:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e58a:	d0f7      	beq.n	800e57c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e58c:	d804      	bhi.n	800e598 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800e58e:	2b80      	cmp	r3, #128	@ 0x80
 800e590:	d0f4      	beq.n	800e57c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e596:	e7f0      	b.n	800e57a <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800e598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e59c:	d0ee      	beq.n	800e57c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e59e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e5a2:	e7e5      	b.n	800e570 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800e5a4:	6823      	ldr	r3, [r4, #0]
 800e5a6:	7f01      	ldrb	r1, [r0, #28]
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5ac:	4798      	blx	r3
 800e5ae:	6823      	ldr	r3, [r4, #0]
 800e5b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5b2:	e006      	b.n	800e5c2 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800e5b4:	6823      	ldr	r3, [r4, #0]
 800e5b6:	7f01      	ldrb	r1, [r0, #28]
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5bc:	4798      	blx	r3
 800e5be:	6823      	ldr	r3, [r4, #0]
 800e5c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5c2:	4629      	mov	r1, r5
 800e5c4:	4620      	mov	r0, r4
 800e5c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e5ca:	4718      	bx	r3
 800e5cc:	6823      	ldr	r3, [r4, #0]
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5d2:	4798      	blx	r3
 800e5d4:	e7f3      	b.n	800e5be <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800e5d6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800e5d6:	4770      	bx	lr

0800e5d8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800e5d8:	4770      	bx	lr

0800e5da <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800e5da:	4770      	bx	lr

0800e5dc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800e5dc:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800e5e0:	b510      	push	{r4, lr}
 800e5e2:	1ad2      	subs	r2, r2, r3
 800e5e4:	2a00      	cmp	r2, #0
 800e5e6:	bfdc      	itt	le
 800e5e8:	6884      	ldrle	r4, [r0, #8]
 800e5ea:	1912      	addle	r2, r2, r4
 800e5ec:	2a01      	cmp	r2, #1
 800e5ee:	dd16      	ble.n	800e61e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800e5f0:	6842      	ldr	r2, [r0, #4]
 800e5f2:	2424      	movs	r4, #36	@ 0x24
 800e5f4:	fb04 2303 	mla	r3, r4, r3, r2
 800e5f8:	f101 0220 	add.w	r2, r1, #32
 800e5fc:	f851 4b04 	ldr.w	r4, [r1], #4
 800e600:	4291      	cmp	r1, r2
 800e602:	f843 4b04 	str.w	r4, [r3], #4
 800e606:	d1f9      	bne.n	800e5fc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800e608:	780a      	ldrb	r2, [r1, #0]
 800e60a:	701a      	strb	r2, [r3, #0]
 800e60c:	68c3      	ldr	r3, [r0, #12]
 800e60e:	6882      	ldr	r2, [r0, #8]
 800e610:	f3bf 8f5b 	dmb	ish
 800e614:	3301      	adds	r3, #1
 800e616:	429a      	cmp	r2, r3
 800e618:	bfd8      	it	le
 800e61a:	1a9b      	suble	r3, r3, r2
 800e61c:	60c3      	str	r3, [r0, #12]
 800e61e:	bd10      	pop	{r4, pc}

0800e620 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800e620:	6903      	ldr	r3, [r0, #16]
 800e622:	6882      	ldr	r2, [r0, #8]
 800e624:	f3bf 8f5b 	dmb	ish
 800e628:	3301      	adds	r3, #1
 800e62a:	429a      	cmp	r2, r3
 800e62c:	bfd8      	it	le
 800e62e:	1a9b      	suble	r3, r3, r2
 800e630:	6103      	str	r3, [r0, #16]
 800e632:	4770      	bx	lr

0800e634 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800e634:	b570      	push	{r4, r5, r6, lr}
 800e636:	4604      	mov	r4, r0
 800e638:	460e      	mov	r6, r1
 800e63a:	6860      	ldr	r0, [r4, #4]
 800e63c:	6803      	ldr	r3, [r0, #0]
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	4798      	blx	r3
 800e642:	2800      	cmp	r0, #0
 800e644:	d1f9      	bne.n	800e63a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800e646:	4d0d      	ldr	r5, [pc, #52]	@ (800e67c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800e648:	6828      	ldr	r0, [r5, #0]
 800e64a:	6803      	ldr	r3, [r0, #0]
 800e64c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e650:	4798      	blx	r3
 800e652:	f7f4 fa17 	bl	8002a84 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800e656:	6828      	ldr	r0, [r5, #0]
 800e658:	2101      	movs	r1, #1
 800e65a:	f7ff ff13 	bl	800e484 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e65e:	6860      	ldr	r0, [r4, #4]
 800e660:	4631      	mov	r1, r6
 800e662:	6803      	ldr	r3, [r0, #0]
 800e664:	689b      	ldr	r3, [r3, #8]
 800e666:	4798      	blx	r3
 800e668:	6823      	ldr	r3, [r4, #0]
 800e66a:	4620      	mov	r0, r4
 800e66c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e66e:	4798      	blx	r3
 800e670:	6828      	ldr	r0, [r5, #0]
 800e672:	6803      	ldr	r3, [r0, #0]
 800e674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e678:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e67a:	4718      	bx	r3
 800e67c:	24025120 	.word	0x24025120

0800e680 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800e680:	b508      	push	{r3, lr}
 800e682:	f7f4 f9f1 	bl	8002a68 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e68a:	f7f4 b9f5 	b.w	8002a78 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800e68e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800e68e:	b510      	push	{r4, lr}
 800e690:	4604      	mov	r4, r0
 800e692:	2114      	movs	r1, #20
 800e694:	f011 fd10 	bl	80200b8 <_ZdlPvj>
 800e698:	4620      	mov	r0, r4
 800e69a:	bd10      	pop	{r4, pc}

0800e69c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800e69c:	b570      	push	{r4, r5, r6, lr}
 800e69e:	4604      	mov	r4, r0
 800e6a0:	6840      	ldr	r0, [r0, #4]
 800e6a2:	6803      	ldr	r3, [r0, #0]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4798      	blx	r3
 800e6a8:	4605      	mov	r5, r0
 800e6aa:	b930      	cbnz	r0, 800e6ba <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e6ac:	7a23      	ldrb	r3, [r4, #8]
 800e6ae:	b123      	cbz	r3, 800e6ba <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e6b0:	6860      	ldr	r0, [r4, #4]
 800e6b2:	6803      	ldr	r3, [r0, #0]
 800e6b4:	695b      	ldr	r3, [r3, #20]
 800e6b6:	4798      	blx	r3
 800e6b8:	7225      	strb	r5, [r4, #8]
 800e6ba:	6860      	ldr	r0, [r4, #4]
 800e6bc:	6803      	ldr	r3, [r0, #0]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4798      	blx	r3
 800e6c2:	b928      	cbnz	r0, 800e6d0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800e6c4:	6823      	ldr	r3, [r4, #0]
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6ce:	4718      	bx	r3
 800e6d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6d4:	f7f4 b9de 	b.w	8002a94 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800e6d8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800e6d8:	b510      	push	{r4, lr}
 800e6da:	6082      	str	r2, [r0, #8]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	4c03      	ldr	r4, [pc, #12]	@ (800e6ec <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800e6e0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800e6e4:	e9c0 4100 	strd	r4, r1, [r0]
 800e6e8:	bd10      	pop	{r4, pc}
 800e6ea:	bf00      	nop
 800e6ec:	08024194 	.word	0x08024194

0800e6f0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800e6f0:	6840      	ldr	r0, [r0, #4]
 800e6f2:	6803      	ldr	r3, [r0, #0]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	4718      	bx	r3

0800e6f8 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800e6fc:	8503      	strh	r3, [r0, #40]	@ 0x28
 800e6fe:	8543      	strh	r3, [r0, #42]	@ 0x2a
 800e700:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800e702:	6980      	ldr	r0, [r0, #24]
 800e704:	b110      	cbz	r0, 800e70c <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 800e706:	6803      	ldr	r3, [r0, #0]
 800e708:	691b      	ldr	r3, [r3, #16]
 800e70a:	4718      	bx	r3
 800e70c:	4770      	bx	lr

0800e70e <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 800e70e:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 800e712:	4770      	bx	lr

0800e714 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 800e714:	b538      	push	{r3, r4, r5, lr}
 800e716:	0e0b      	lsrs	r3, r1, #24
 800e718:	4604      	mov	r4, r0
 800e71a:	460d      	mov	r5, r1
 800e71c:	7783      	strb	r3, [r0, #30]
 800e71e:	6803      	ldr	r3, [r0, #0]
 800e720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e722:	4798      	blx	r3
 800e724:	6803      	ldr	r3, [r0, #0]
 800e726:	4629      	mov	r1, r5
 800e728:	689b      	ldr	r3, [r3, #8]
 800e72a:	4798      	blx	r3
 800e72c:	6823      	ldr	r3, [r4, #0]
 800e72e:	4620      	mov	r0, r4
 800e730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e732:	4798      	blx	r3
 800e734:	61a0      	str	r0, [r4, #24]
 800e736:	bd38      	pop	{r3, r4, r5, pc}

0800e738 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 800e738:	7741      	strb	r1, [r0, #29]
 800e73a:	4770      	bx	lr

0800e73c <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 800e73c:	b530      	push	{r4, r5, lr}
 800e73e:	460d      	mov	r5, r1
 800e740:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800e744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e74a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e74c:	682b      	ldr	r3, [r5, #0]
 800e74e:	6023      	str	r3, [r4, #0]
 800e750:	bd30      	pop	{r4, r5, pc}

0800e752 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 800e752:	b538      	push	{r3, r4, r5, lr}
 800e754:	4604      	mov	r4, r0
 800e756:	1d03      	adds	r3, r0, #4
 800e758:	6808      	ldr	r0, [r1, #0]
 800e75a:	2500      	movs	r5, #0
 800e75c:	6849      	ldr	r1, [r1, #4]
 800e75e:	c303      	stmia	r3!, {r0, r1}
 800e760:	6813      	ldr	r3, [r2, #0]
 800e762:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800e766:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 800e76a:	6853      	ldr	r3, [r2, #4]
 800e76c:	61a5      	str	r5, [r4, #24]
 800e76e:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 800e772:	f005 f9b1 	bl	8013ad8 <_ZN8touchgfx9Matrix3x35resetEv>
 800e776:	23ff      	movs	r3, #255	@ 0xff
 800e778:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 800e77c:	7763      	strb	r3, [r4, #29]
 800e77e:	77a3      	strb	r3, [r4, #30]
 800e780:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800e784:	6323      	str	r3, [r4, #48]	@ 0x30
 800e786:	2301      	movs	r3, #1
 800e788:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800e78c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e790 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 800e790:	ee70 7a41 	vsub.f32	s15, s0, s2
 800e794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e798:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e79c:	4605      	mov	r5, r0
 800e79e:	ed2d 8b0a 	vpush	{d8-d12}
 800e7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7a6:	b087      	sub	sp, #28
 800e7a8:	eef0 9a40 	vmov.f32	s19, s0
 800e7ac:	6802      	ldr	r2, [r0, #0]
 800e7ae:	eeb0 aa60 	vmov.f32	s20, s1
 800e7b2:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800e7b6:	eeb0 9a41 	vmov.f32	s18, s2
 800e7ba:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 800e7bc:	eef0 8a61 	vmov.f32	s17, s3
 800e7c0:	eeb0 ca42 	vmov.f32	s24, s4
 800e7c4:	eef0 ca62 	vmov.f32	s25, s5
 800e7c8:	d112      	bne.n	800e7f0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800e7ca:	ee70 7ae1 	vsub.f32	s15, s1, s3
 800e7ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7d6:	d10b      	bne.n	800e7f0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800e7d8:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800e7dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800e7de:	3901      	subs	r1, #1
 800e7e0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800e7e4:	b007      	add	sp, #28
 800e7e6:	ecbd 8b0a 	vpop	{d8-d12}
 800e7ea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7ee:	4710      	bx	r2
 800e7f0:	23ff      	movs	r3, #255	@ 0xff
 800e7f2:	4628      	mov	r0, r5
 800e7f4:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 800e7f8:	f8df 92c4 	ldr.w	r9, [pc, #708]	@ 800eac0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x330>
 800e7fc:	77ab      	strb	r3, [r5, #30]
 800e7fe:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800e800:	4798      	blx	r3
 800e802:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 800e806:	eeb0 0a69 	vmov.f32	s0, s19
 800e80a:	4604      	mov	r4, r0
 800e80c:	80c3      	strh	r3, [r0, #6]
 800e80e:	eef0 0a4a 	vmov.f32	s1, s20
 800e812:	4640      	mov	r0, r8
 800e814:	f005 fa0f 	bl	8013c36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800e818:	eeb0 ba40 	vmov.f32	s22, s0
 800e81c:	ed8d 0a00 	vstr	s0, [sp]
 800e820:	eeb0 0a49 	vmov.f32	s0, s18
 800e824:	eef0 ba60 	vmov.f32	s23, s1
 800e828:	edcd 0a01 	vstr	s1, [sp, #4]
 800e82c:	4640      	mov	r0, r8
 800e82e:	eef0 0a68 	vmov.f32	s1, s17
 800e832:	f005 fa00 	bl	8013c36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800e836:	eeb4 ba40 	vcmp.f32	s22, s0
 800e83a:	eeb0 8a40 	vmov.f32	s16, s0
 800e83e:	ed8d 0a02 	vstr	s0, [sp, #8]
 800e842:	eef0 aa60 	vmov.f32	s21, s1
 800e846:	edcd 0a03 	vstr	s1, [sp, #12]
 800e84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e84e:	eef4 ba60 	vcmp.f32	s23, s1
 800e852:	bf0c      	ite	eq
 800e854:	2301      	moveq	r3, #1
 800e856:	2300      	movne	r3, #0
 800e858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e85c:	eeb4 ba40 	vcmp.f32	s22, s0
 800e860:	7463      	strb	r3, [r4, #17]
 800e862:	bf0c      	ite	eq
 800e864:	2301      	moveq	r3, #1
 800e866:	2300      	movne	r3, #0
 800e868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e86c:	74a3      	strb	r3, [r4, #18]
 800e86e:	d031      	beq.n	800e8d4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 800e870:	eef4 ba60 	vcmp.f32	s23, s1
 800e874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e878:	d02c      	beq.n	800e8d4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 800e87a:	ee39 9a69 	vsub.f32	s18, s18, s19
 800e87e:	4640      	mov	r0, r8
 800e880:	ee78 8aca 	vsub.f32	s17, s17, s20
 800e884:	eef0 0a4a 	vmov.f32	s1, s20
 800e888:	ee89 7a0c 	vdiv.f32	s14, s18, s24
 800e88c:	eec8 7aac 	vdiv.f32	s15, s17, s25
 800e890:	eeb0 0a69 	vmov.f32	s0, s19
 800e894:	eeec 0a87 	vfma.f32	s1, s25, s14
 800e898:	eea7 0acc 	vfms.f32	s0, s15, s24
 800e89c:	f005 f9cb 	bl	8013c36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800e8a0:	f899 3000 	ldrb.w	r3, [r9]
 800e8a4:	edcd 0a05 	vstr	s1, [sp, #20]
 800e8a8:	ee70 0aeb 	vsub.f32	s1, s1, s23
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	bf08      	it	eq
 800e8b0:	eef1 7a60 	vnegeq.f32	s15, s1
 800e8b4:	ed8d 0a04 	vstr	s0, [sp, #16]
 800e8b8:	ee30 0a4b 	vsub.f32	s0, s0, s22
 800e8bc:	bf04      	itt	eq
 800e8be:	eef0 0a40 	vmoveq.f32	s1, s0
 800e8c2:	eeb0 0a67 	vmoveq.f32	s0, s15
 800e8c6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ce:	d135      	bne.n	800e93c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ac>
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	74a3      	strb	r3, [r4, #18]
 800e8d4:	f899 2000 	ldrb.w	r2, [r9]
 800e8d8:	7c63      	ldrb	r3, [r4, #17]
 800e8da:	2a01      	cmp	r2, #1
 800e8dc:	f040 80a3 	bne.w	800ea26 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x296>
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d073      	beq.n	800e9cc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x23c>
 800e8e4:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 800e8e8:	eddf 6a73 	vldr	s13, [pc, #460]	@ 800eab8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 800e8ec:	eef4 baea 	vcmpe.f32	s23, s21
 800e8f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f8:	edc4 7a08 	vstr	s15, [r4, #32]
 800e8fc:	eefd 7aea 	vcvt.s32.f32	s15, s21
 800e900:	ee17 3a90 	vmov	r3, s15
 800e904:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 800e908:	b21a      	sxth	r2, r3
 800e90a:	ee17 3a90 	vmov	r3, s15
 800e90e:	bf48      	it	mi
 800e910:	8162      	strhmi	r2, [r4, #10]
 800e912:	b21b      	sxth	r3, r3
 800e914:	bf56      	itet	pl
 800e916:	8122      	strhpl	r2, [r4, #8]
 800e918:	8123      	strhmi	r3, [r4, #8]
 800e91a:	8163      	strhpl	r3, [r4, #10]
 800e91c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800e920:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800e924:	1a9b      	subs	r3, r3, r2
 800e926:	ee07 3a90 	vmov	s15, r3
 800e92a:	2300      	movs	r3, #0
 800e92c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e930:	7463      	strb	r3, [r4, #17]
 800e932:	2301      	movs	r3, #1
 800e934:	edc4 7a07 	vstr	s15, [r4, #28]
 800e938:	74a3      	strb	r3, [r4, #18]
 800e93a:	e03f      	b.n	800e9bc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800e93c:	ee80 7a80 	vdiv.f32	s14, s1, s0
 800e940:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e944:	ed84 7a05 	vstr	s14, [r4, #20]
 800e948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e94c:	d102      	bne.n	800e954 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1c4>
 800e94e:	2301      	movs	r3, #1
 800e950:	7463      	strb	r3, [r4, #17]
 800e952:	e7bf      	b.n	800e8d4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 800e954:	2b01      	cmp	r3, #1
 800e956:	ee38 8a4b 	vsub.f32	s16, s16, s22
 800e95a:	ee7a aaeb 	vsub.f32	s21, s21, s23
 800e95e:	bf0b      	itete	eq
 800e960:	f9b4 2006 	ldrsheq.w	r2, [r4, #6]
 800e964:	eef0 7a6b 	vmovne.f32	s15, s23
 800e968:	ee07 2a90 	vmoveq	s15, r2
 800e96c:	eeeb 7a47 	vfmsne.f32	s15, s22, s14
 800e970:	bf02      	ittt	eq
 800e972:	eef8 7ae7 	vcvteq.f32.s32	s15, s15
 800e976:	ee77 7acb 	vsubeq.f32	s15, s15, s22
 800e97a:	eeeb 7ac7 	vfmseq.f32	s15, s23, s14
 800e97e:	2b01      	cmp	r3, #1
 800e980:	edc4 7a06 	vstr	s15, [r4, #24]
 800e984:	bf02      	ittt	eq
 800e986:	eef1 7a48 	vnegeq.f32	s15, s16
 800e98a:	eeb0 8a6a 	vmoveq.f32	s16, s21
 800e98e:	eef0 aa67 	vmoveq.f32	s21, s15
 800e992:	eeca 7a87 	vdiv.f32	s15, s21, s14
 800e996:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800eabc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x32c>
 800e99a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800e99e:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800e9a2:	ed84 8a07 	vstr	s16, [r4, #28]
 800e9a6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ae:	edc4 7a08 	vstr	s15, [r4, #32]
 800e9b2:	d503      	bpl.n	800e9bc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800e9b4:	eeb1 8a48 	vneg.f32	s16, s16
 800e9b8:	ed84 8a07 	vstr	s16, [r4, #28]
 800e9bc:	60e7      	str	r7, [r4, #12]
 800e9be:	7426      	strb	r6, [r4, #16]
 800e9c0:	61ac      	str	r4, [r5, #24]
 800e9c2:	b007      	add	sp, #28
 800e9c4:	ecbd 8b0a 	vpop	{d8-d12}
 800e9c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9cc:	7ca3      	ldrb	r3, [r4, #18]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d0f4      	beq.n	800e9bc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800e9d2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e9d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800eab8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 800e9da:	ee00 3a10 	vmov	s0, r3
 800e9de:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800e9e2:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e9e6:	ee30 0a4b 	vsub.f32	s0, s0, s22
 800e9ea:	ee38 7a40 	vsub.f32	s14, s16, s0
 800e9ee:	eeb4 8ac0 	vcmpe.f32	s16, s0
 800e9f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9fa:	edc4 7a08 	vstr	s15, [r4, #32]
 800e9fe:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ea02:	ee17 3a90 	vmov	r3, s15
 800ea06:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ea0a:	b21a      	sxth	r2, r3
 800ea0c:	ee17 3a90 	vmov	r3, s15
 800ea10:	bfc8      	it	gt
 800ea12:	8162      	strhgt	r2, [r4, #10]
 800ea14:	b21b      	sxth	r3, r3
 800ea16:	bfd6      	itet	le
 800ea18:	8122      	strhle	r2, [r4, #8]
 800ea1a:	8123      	strhgt	r3, [r4, #8]
 800ea1c:	8163      	strhle	r3, [r4, #10]
 800ea1e:	2301      	movs	r3, #1
 800ea20:	7463      	strb	r3, [r4, #17]
 800ea22:	2300      	movs	r3, #0
 800ea24:	e788      	b.n	800e938 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a8>
 800ea26:	b1e3      	cbz	r3, 800ea62 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x2d2>
 800ea28:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 800ea2c:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800eab8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 800ea30:	eef4 baea 	vcmpe.f32	s23, s21
 800ea34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea3c:	edc4 7a08 	vstr	s15, [r4, #32]
 800ea40:	eefd 7aea 	vcvt.s32.f32	s15, s21
 800ea44:	ee17 3a90 	vmov	r3, s15
 800ea48:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 800ea4c:	b21a      	sxth	r2, r3
 800ea4e:	ee17 3a90 	vmov	r3, s15
 800ea52:	bf48      	it	mi
 800ea54:	8162      	strhmi	r2, [r4, #10]
 800ea56:	b21b      	sxth	r3, r3
 800ea58:	bf56      	itet	pl
 800ea5a:	8122      	strhpl	r2, [r4, #8]
 800ea5c:	8123      	strhmi	r3, [r4, #8]
 800ea5e:	8163      	strhpl	r3, [r4, #10]
 800ea60:	e7ac      	b.n	800e9bc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800ea62:	7ca3      	ldrb	r3, [r4, #18]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d0a9      	beq.n	800e9bc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800ea68:	ee38 7a4b 	vsub.f32	s14, s16, s22
 800ea6c:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800eab8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 800ea70:	eeb4 bac8 	vcmpe.f32	s22, s16
 800ea74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea7c:	edc4 7a08 	vstr	s15, [r4, #32]
 800ea80:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ea84:	ee17 3a90 	vmov	r3, s15
 800ea88:	eefd 7acb 	vcvt.s32.f32	s15, s22
 800ea8c:	b21a      	sxth	r2, r3
 800ea8e:	ee17 3a90 	vmov	r3, s15
 800ea92:	bf48      	it	mi
 800ea94:	8162      	strhmi	r2, [r4, #10]
 800ea96:	b21b      	sxth	r3, r3
 800ea98:	bf56      	itet	pl
 800ea9a:	8122      	strhpl	r2, [r4, #8]
 800ea9c:	8123      	strhmi	r3, [r4, #8]
 800ea9e:	8163      	strhpl	r3, [r4, #10]
 800eaa0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800eaa4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800eaa8:	1a9b      	subs	r3, r3, r2
 800eaaa:	ee07 3a90 	vmov	s15, r3
 800eaae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eab2:	edc4 7a07 	vstr	s15, [r4, #28]
 800eab6:	e781      	b.n	800e9bc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 800eab8:	447ffffe 	.word	0x447ffffe
 800eabc:	44800000 	.word	0x44800000
 800eac0:	24025118 	.word	0x24025118

0800eac4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 800eac4:	b510      	push	{r4, lr}
 800eac6:	ed2d 8b02 	vpush	{d8}
 800eaca:	eef0 8a62 	vmov.f32	s17, s5
 800eace:	2100      	movs	r1, #0
 800ead0:	4604      	mov	r4, r0
 800ead2:	eeb0 8a42 	vmov.f32	s16, s4
 800ead6:	f011 f861 	bl	801fb9c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 800eada:	eef0 7a68 	vmov.f32	s15, s17
 800eade:	6823      	ldr	r3, [r4, #0]
 800eae0:	4620      	mov	r0, r4
 800eae2:	689b      	ldr	r3, [r3, #8]
 800eae4:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eae8:	ee17 2a90 	vmov	r2, s15
 800eaec:	eef0 7a48 	vmov.f32	s15, s16
 800eaf0:	ecbd 8b02 	vpop	{d8}
 800eaf4:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eaf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eafc:	ee17 1a90 	vmov	r1, s15
 800eb00:	4718      	bx	r3

0800eb02 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 800eb02:	b510      	push	{r4, lr}
 800eb04:	ed2d 8b02 	vpush	{d8}
 800eb08:	eef0 8a63 	vmov.f32	s17, s7
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	4604      	mov	r4, r0
 800eb10:	eeb0 8a43 	vmov.f32	s16, s6
 800eb14:	f011 f904 	bl	801fd20 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 800eb18:	eef0 7a68 	vmov.f32	s15, s17
 800eb1c:	6823      	ldr	r3, [r4, #0]
 800eb1e:	4620      	mov	r0, r4
 800eb20:	689b      	ldr	r3, [r3, #8]
 800eb22:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eb26:	ee17 2a90 	vmov	r2, s15
 800eb2a:	eef0 7a48 	vmov.f32	s15, s16
 800eb2e:	ecbd 8b02 	vpop	{d8}
 800eb32:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eb36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb3a:	ee17 1a90 	vmov	r1, s15
 800eb3e:	4718      	bx	r3

0800eb40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 800eb40:	b513      	push	{r0, r1, r4, lr}
 800eb42:	4604      	mov	r4, r0
 800eb44:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800eb46:	f005 f876 	bl	8013c36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800eb4a:	eef0 7a60 	vmov.f32	s15, s1
 800eb4e:	4620      	mov	r0, r4
 800eb50:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eb54:	ee17 2a90 	vmov	r2, s15
 800eb58:	eef0 7a40 	vmov.f32	s15, s0
 800eb5c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eb60:	ee17 1a90 	vmov	r1, s15
 800eb64:	b002      	add	sp, #8
 800eb66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb6a:	f010 bf71 	b.w	801fa50 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 800eb6e:	b513      	push	{r0, r1, r4, lr}
 800eb70:	4604      	mov	r4, r0
 800eb72:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800eb74:	f005 f85f 	bl	8013c36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800eb78:	eef0 7a60 	vmov.f32	s15, s1
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eb82:	ee17 2a90 	vmov	r2, s15
 800eb86:	eef0 7a40 	vmov.f32	s15, s0
 800eb8a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eb8e:	ee17 1a90 	vmov	r1, s15
 800eb92:	b002      	add	sp, #8
 800eb94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb98:	f010 bfa7 	b.w	801faea <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

0800eb9c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 800eb9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb9e:	2400      	movs	r4, #0
 800eba0:	9f07      	ldr	r7, [sp, #28]
 800eba2:	f04f 0e01 	mov.w	lr, #1
 800eba6:	4626      	mov	r6, r4
 800eba8:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 800ebac:	4463      	add	r3, ip
 800ebae:	4563      	cmp	r3, ip
 800ebb0:	d02d      	beq.n	800ec0e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 800ebb2:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 800ebb6:	2d06      	cmp	r5, #6
 800ebb8:	d8f9      	bhi.n	800ebae <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800ebba:	fa0e f505 	lsl.w	r5, lr, r5
 800ebbe:	f015 0f66 	tst.w	r5, #102	@ 0x66
 800ebc2:	d10d      	bne.n	800ebe0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 800ebc4:	f015 0f10 	tst.w	r5, #16
 800ebc8:	d117      	bne.n	800ebfa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 800ebca:	072d      	lsls	r5, r5, #28
 800ebcc:	d5ef      	bpl.n	800ebae <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800ebce:	3801      	subs	r0, #1
 800ebd0:	b91e      	cbnz	r6, 800ebda <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 800ebd2:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 800ebd6:	682d      	ldr	r5, [r5, #0]
 800ebd8:	600d      	str	r5, [r1, #0]
 800ebda:	b96c      	cbnz	r4, 800ebf8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800ebdc:	2601      	movs	r6, #1
 800ebde:	e7e6      	b.n	800ebae <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800ebe0:	b926      	cbnz	r6, 800ebec <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 800ebe2:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800ebe6:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800ebea:	600b      	str	r3, [r1, #0]
 800ebec:	b924      	cbnz	r4, 800ebf8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800ebee:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800ebf2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ebf6:	6013      	str	r3, [r2, #0]
 800ebf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebfa:	3801      	subs	r0, #1
 800ebfc:	b91c      	cbnz	r4, 800ec06 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 800ebfe:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 800ec02:	6824      	ldr	r4, [r4, #0]
 800ec04:	6014      	str	r4, [r2, #0]
 800ec06:	2e00      	cmp	r6, #0
 800ec08:	d1f6      	bne.n	800ebf8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800ec0a:	2401      	movs	r4, #1
 800ec0c:	e7cf      	b.n	800ebae <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800ec0e:	b90e      	cbnz	r6, 800ec14 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 800ec10:	2300      	movs	r3, #0
 800ec12:	600b      	str	r3, [r1, #0]
 800ec14:	2c00      	cmp	r4, #0
 800ec16:	d1ef      	bne.n	800ebf8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800ec18:	2300      	movs	r3, #0
 800ec1a:	e7ec      	b.n	800ebf6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0800ec1c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 800ec1c:	b538      	push	{r3, r4, r5, lr}
 800ec1e:	ed2d 8b0a 	vpush	{d8-d12}
 800ec22:	eef0 ba40 	vmov.f32	s23, s0
 800ec26:	4604      	mov	r4, r0
 800ec28:	eeb0 ca60 	vmov.f32	s24, s1
 800ec2c:	460d      	mov	r5, r1
 800ec2e:	eef0 aa41 	vmov.f32	s21, s2
 800ec32:	eeb0 ba61 	vmov.f32	s22, s3
 800ec36:	eeb0 9a42 	vmov.f32	s18, s4
 800ec3a:	eef0 9a62 	vmov.f32	s19, s5
 800ec3e:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 800ec42:	ee7b 8a29 	vadd.f32	s17, s22, s19
 800ec46:	ee3a 8a89 	vadd.f32	s16, s21, s18
 800ec4a:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800ec4e:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800ec52:	ee3c 0a68 	vsub.f32	s0, s24, s17
 800ec56:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 800ec5a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ec5e:	eea7 0aa7 	vfma.f32	s0, s15, s15
 800ec62:	f011 fa53 	bl	802010c <sqrtf>
 800ec66:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ec6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec6e:	d12e      	bne.n	800ecce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 800ec70:	ee79 7a6a 	vsub.f32	s15, s18, s21
 800ec74:	ee39 7acb 	vsub.f32	s14, s19, s22
 800ec78:	eeb0 8a6a 	vmov.f32	s16, s21
 800ec7c:	eef0 8a4b 	vmov.f32	s17, s22
 800ec80:	eea7 8a8a 	vfma.f32	s16, s15, s20
 800ec84:	eee7 8a0a 	vfma.f32	s17, s14, s20
 800ec88:	eea7 8a0a 	vfma.f32	s16, s14, s20
 800ec8c:	eee7 8aca 	vfms.f32	s17, s15, s20
 800ec90:	2d02      	cmp	r5, #2
 800ec92:	dc2f      	bgt.n	800ecf4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 800ec94:	3501      	adds	r5, #1
 800ec96:	eef0 1a4b 	vmov.f32	s3, s22
 800ec9a:	eeb0 1a6a 	vmov.f32	s2, s21
 800ec9e:	4620      	mov	r0, r4
 800eca0:	4629      	mov	r1, r5
 800eca2:	eef0 2a68 	vmov.f32	s5, s17
 800eca6:	eeb0 2a48 	vmov.f32	s4, s16
 800ecaa:	eef0 0a4c 	vmov.f32	s1, s24
 800ecae:	eeb0 0a6b 	vmov.f32	s0, s23
 800ecb2:	f7ff ffb3 	bl	800ec1c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800ecb6:	eef0 0a68 	vmov.f32	s1, s17
 800ecba:	eeb0 0a48 	vmov.f32	s0, s16
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f7ff ff55 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ecc4:	eeb0 ba68 	vmov.f32	s22, s17
 800ecc8:	eef0 aa48 	vmov.f32	s21, s16
 800eccc:	e7b9      	b.n	800ec42 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 800ecce:	ee38 8a6b 	vsub.f32	s16, s16, s23
 800ecd2:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800ecd6:	ee78 8acc 	vsub.f32	s17, s17, s24
 800ecda:	ee28 7a27 	vmul.f32	s14, s16, s15
 800ecde:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800ece2:	ee87 8a00 	vdiv.f32	s16, s14, s0
 800ece6:	eec7 8a80 	vdiv.f32	s17, s15, s0
 800ecea:	ee3b 8a88 	vadd.f32	s16, s23, s16
 800ecee:	ee7c 8a28 	vadd.f32	s17, s24, s17
 800ecf2:	e7cd      	b.n	800ec90 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 800ecf4:	eef0 0a68 	vmov.f32	s1, s17
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	eeb0 0a48 	vmov.f32	s0, s16
 800ecfe:	f7ff ff36 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ed02:	ecbd 8b0a 	vpop	{d8-d12}
 800ed06:	bd38      	pop	{r3, r4, r5, pc}

0800ed08 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 800ed08:	b510      	push	{r4, lr}
 800ed0a:	ed2d 8b0a 	vpush	{d8-d12}
 800ed0e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800ed12:	4604      	mov	r4, r0
 800ed14:	eeb0 ca40 	vmov.f32	s24, s0
 800ed18:	2b02      	cmp	r3, #2
 800ed1a:	eeb0 9a60 	vmov.f32	s18, s1
 800ed1e:	eef0 9a41 	vmov.f32	s19, s2
 800ed22:	eef0 8a61 	vmov.f32	s17, s3
 800ed26:	eeb0 ba42 	vmov.f32	s22, s4
 800ed2a:	eef0 ba62 	vmov.f32	s23, s5
 800ed2e:	eeb0 aa43 	vmov.f32	s20, s6
 800ed32:	eef0 aa63 	vmov.f32	s21, s7
 800ed36:	eeb0 8a44 	vmov.f32	s16, s8
 800ed3a:	eef0 ca64 	vmov.f32	s25, s9
 800ed3e:	d12c      	bne.n	800ed9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 800ed40:	eef0 0a62 	vmov.f32	s1, s5
 800ed44:	eeb0 0a42 	vmov.f32	s0, s4
 800ed48:	f7ff ff11 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ed4c:	ee79 9acb 	vsub.f32	s19, s19, s22
 800ed50:	ee7a caec 	vsub.f32	s25, s21, s25
 800ed54:	ee78 8aeb 	vsub.f32	s17, s17, s23
 800ed58:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800ed5c:	ee69 9aac 	vmul.f32	s19, s19, s25
 800ed60:	ee28 8a88 	vmul.f32	s16, s17, s16
 800ed64:	eef4 9ac8 	vcmpe.f32	s19, s16
 800ed68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed6c:	db0f      	blt.n	800ed8e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 800ed6e:	2101      	movs	r1, #1
 800ed70:	eef0 2a6a 	vmov.f32	s5, s21
 800ed74:	eeb0 2a4a 	vmov.f32	s4, s20
 800ed78:	4620      	mov	r0, r4
 800ed7a:	eef0 1a6b 	vmov.f32	s3, s23
 800ed7e:	eeb0 1a4b 	vmov.f32	s2, s22
 800ed82:	eef0 0a49 	vmov.f32	s1, s18
 800ed86:	eeb0 0a4c 	vmov.f32	s0, s24
 800ed8a:	f7ff ff47 	bl	800ec1c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800ed8e:	eef0 0a6a 	vmov.f32	s1, s21
 800ed92:	4620      	mov	r0, r4
 800ed94:	eeb0 0a4a 	vmov.f32	s0, s20
 800ed98:	e035      	b.n	800ee06 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	d138      	bne.n	800ee10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800ed9e:	ee31 4ae2 	vsub.f32	s8, s3, s5
 800eda2:	ee33 6a48 	vsub.f32	s12, s6, s16
 800eda6:	ee71 7a42 	vsub.f32	s15, s2, s4
 800edaa:	ee73 6ae4 	vsub.f32	s13, s7, s9
 800edae:	ee26 7a44 	vnmul.f32	s14, s12, s8
 800edb2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800edb6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800edba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edbe:	d027      	beq.n	800ee10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800edc0:	ee28 8a63 	vnmul.f32	s16, s16, s7
 800edc4:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 800edc8:	eea4 8a83 	vfma.f32	s16, s9, s6
 800edcc:	eee1 8a22 	vfma.f32	s17, s2, s5
 800edd0:	ee68 7a67 	vnmul.f32	s15, s16, s15
 800edd4:	ee28 8a44 	vnmul.f32	s16, s16, s8
 800edd8:	eee6 7a28 	vfma.f32	s15, s12, s17
 800eddc:	eea6 8aa8 	vfma.f32	s16, s13, s17
 800ede0:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800ede4:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 800ede8:	eec8 0a07 	vdiv.f32	s1, s16, s14
 800edec:	ee3c ca40 	vsub.f32	s24, s24, s0
 800edf0:	ee39 9a60 	vsub.f32	s18, s18, s1
 800edf4:	ee29 9a09 	vmul.f32	s18, s18, s18
 800edf8:	eeac 9a0c 	vfma.f32	s18, s24, s24
 800edfc:	eef4 7ac9 	vcmpe.f32	s15, s18
 800ee00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee04:	db04      	blt.n	800ee10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800ee06:	f7ff feb2 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ee0a:	ecbd 8b0a 	vpop	{d8-d12}
 800ee0e:	bd10      	pop	{r4, pc}
 800ee10:	eef0 0a6b 	vmov.f32	s1, s23
 800ee14:	4620      	mov	r0, r4
 800ee16:	eeb0 0a4b 	vmov.f32	s0, s22
 800ee1a:	f7ff fea8 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ee1e:	e7b6      	b.n	800ed8e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

0800ee20 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 800ee20:	b510      	push	{r4, lr}
 800ee22:	ed2d 8b0c 	vpush	{d8-d13}
 800ee26:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 800ee2a:	4604      	mov	r4, r0
 800ee2c:	eeb0 9a40 	vmov.f32	s18, s0
 800ee30:	eef0 9a60 	vmov.f32	s19, s1
 800ee34:	eef0 aa41 	vmov.f32	s21, s2
 800ee38:	eeb0 ba61 	vmov.f32	s22, s3
 800ee3c:	b933      	cbnz	r3, 800ee4c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 800ee3e:	f7ff fe96 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ee42:	eef0 0a4b 	vmov.f32	s1, s22
 800ee46:	eeb0 0a6a 	vmov.f32	s0, s21
 800ee4a:	e015      	b.n	800ee78 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 800ee4c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ee50:	2b02      	cmp	r3, #2
 800ee52:	ee71 8a40 	vsub.f32	s17, s2, s0
 800ee56:	ee31 8ae0 	vsub.f32	s16, s3, s1
 800ee5a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800ee5e:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ee62:	d10f      	bne.n	800ee84 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 800ee64:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800ee68:	ee30 0a08 	vadd.f32	s0, s0, s16
 800ee6c:	f7ff fe7f 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ee70:	ee7b 0a68 	vsub.f32	s1, s22, s17
 800ee74:	ee3a 0a88 	vadd.f32	s0, s21, s16
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f7ff fe78 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ee7e:	ecbd 8b0c 	vpop	{d8-d13}
 800ee82:	bd10      	pop	{r4, pc}
 800ee84:	f7ff fe73 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ee88:	eef0 0a69 	vmov.f32	s1, s19
 800ee8c:	eeb0 0a49 	vmov.f32	s0, s18
 800ee90:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800efc0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 800ee94:	eeb1 aa68 	vneg.f32	s20, s17
 800ee98:	eddf ba4a 	vldr	s23, [pc, #296]	@ 800efc4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 800ee9c:	eee8 0a27 	vfma.f32	s1, s16, s15
 800eea0:	4620      	mov	r0, r4
 800eea2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800eea6:	ed9f ca48 	vldr	s24, [pc, #288]	@ 800efc8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 800eeaa:	eddf ca48 	vldr	s25, [pc, #288]	@ 800efcc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 800eeae:	ed9f da48 	vldr	s26, [pc, #288]	@ 800efd0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 800eeb2:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800eeb6:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800eeba:	f7ff fe58 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800eebe:	eef0 0a69 	vmov.f32	s1, s19
 800eec2:	eeb0 0a49 	vmov.f32	s0, s18
 800eec6:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800efd4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 800eeca:	4620      	mov	r0, r4
 800eecc:	eee8 0a27 	vfma.f32	s1, s16, s15
 800eed0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800eed4:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800eed8:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800eedc:	f7ff fe47 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800eee0:	eef0 0a69 	vmov.f32	s1, s19
 800eee4:	eeb0 0a49 	vmov.f32	s0, s18
 800eee8:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800efd8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 800eeec:	4620      	mov	r0, r4
 800eeee:	eee8 0a27 	vfma.f32	s1, s16, s15
 800eef2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800eef6:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800eefa:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800eefe:	f7ff fe36 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ef02:	eef0 0a69 	vmov.f32	s1, s19
 800ef06:	eeb0 0a49 	vmov.f32	s0, s18
 800ef0a:	eddf 7a34 	vldr	s15, [pc, #208]	@ 800efdc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 800ef0e:	4620      	mov	r0, r4
 800ef10:	eee8 0a27 	vfma.f32	s1, s16, s15
 800ef14:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800ef18:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800ef1c:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800ef20:	f7ff fe25 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ef24:	ee79 0a88 	vadd.f32	s1, s19, s16
 800ef28:	ee39 0a28 	vadd.f32	s0, s18, s17
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800ef32:	ee30 0a08 	vadd.f32	s0, s0, s16
 800ef36:	f7ff fe1a 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ef3a:	eef0 0a69 	vmov.f32	s1, s19
 800ef3e:	eeb0 0a49 	vmov.f32	s0, s18
 800ef42:	eddf 7a27 	vldr	s15, [pc, #156]	@ 800efe0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 800ef46:	4620      	mov	r0, r4
 800ef48:	eee8 0a27 	vfma.f32	s1, s16, s15
 800ef4c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800ef50:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800ef54:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800ef58:	f7ff fe09 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ef5c:	eef0 0a69 	vmov.f32	s1, s19
 800ef60:	eeb0 0a49 	vmov.f32	s0, s18
 800ef64:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800efe4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 800ef68:	4620      	mov	r0, r4
 800ef6a:	eee8 0a27 	vfma.f32	s1, s16, s15
 800ef6e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800ef72:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800ef76:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800ef7a:	f7ff fdf8 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ef7e:	eef0 0a69 	vmov.f32	s1, s19
 800ef82:	eeb0 0a49 	vmov.f32	s0, s18
 800ef86:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800efe8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	eee8 0a27 	vfma.f32	s1, s16, s15
 800ef90:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800ef94:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800ef98:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800ef9c:	f7ff fde7 	bl	800eb6e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800efa0:	eef0 0a69 	vmov.f32	s1, s19
 800efa4:	eeb0 0a49 	vmov.f32	s0, s18
 800efa8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800efec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 800efac:	4620      	mov	r0, r4
 800efae:	eee8 0a27 	vfma.f32	s1, s16, s15
 800efb2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800efb6:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800efba:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800efbe:	e73e      	b.n	800ee3e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 800efc0:	3d23d70a 	.word	0x3d23d70a
 800efc4:	3e8f5c29 	.word	0x3e8f5c29
 800efc8:	3f19999a 	.word	0x3f19999a
 800efcc:	3f4ccccd 	.word	0x3f4ccccd
 800efd0:	3f75c28f 	.word	0x3f75c28f
 800efd4:	3e4ccccd 	.word	0x3e4ccccd
 800efd8:	3ecccccd 	.word	0x3ecccccd
 800efdc:	3f3851ec 	.word	0x3f3851ec
 800efe0:	3fa3d70a 	.word	0x3fa3d70a
 800efe4:	3fcccccd 	.word	0x3fcccccd
 800efe8:	3fe66666 	.word	0x3fe66666
 800efec:	3ffae148 	.word	0x3ffae148

0800eff0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 800eff0:	b570      	push	{r4, r5, r6, lr}
 800eff2:	ed2d 8b06 	vpush	{d8-d10}
 800eff6:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800effa:	eef0 aa40 	vmov.f32	s21, s0
 800effe:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 800f002:	4604      	mov	r4, r0
 800f004:	ee30 8ac8 	vsub.f32	s16, s1, s16
 800f008:	ee30 9a49 	vsub.f32	s18, s0, s18
 800f00c:	eeb0 aa60 	vmov.f32	s20, s1
 800f010:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f014:	eea9 0a09 	vfma.f32	s0, s18, s18
 800f018:	f011 f878 	bl	802010c <sqrtf>
 800f01c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f024:	dd36      	ble.n	800f094 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 800f026:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800f02a:	2600      	movs	r6, #0
 800f02c:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 800f030:	eec0 6a27 	vdiv.f32	s13, s0, s15
 800f034:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 800f038:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 800f03c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800f040:	eec8 8a26 	vdiv.f32	s17, s16, s13
 800f044:	ee89 8a26 	vdiv.f32	s16, s18, s13
 800f048:	ee70 9a28 	vadd.f32	s19, s0, s17
 800f04c:	ee78 8aaa 	vadd.f32	s17, s17, s21
 800f050:	ee30 9ac8 	vsub.f32	s18, s1, s16
 800f054:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800f058:	b1fd      	cbz	r5, 800f09a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 800f05a:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 800f05e:	eef0 0a49 	vmov.f32	s1, s18
 800f062:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 800f066:	eeb0 0a69 	vmov.f32	s0, s19
 800f06a:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 800f06e:	4620      	mov	r0, r4
 800f070:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 800f074:	f7ff fd64 	bl	800eb40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800f078:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 800f07c:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 800f080:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 800f084:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 800f088:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 800f08c:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 800f090:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 800f094:	ecbd 8b06 	vpop	{d8-d10}
 800f098:	bd70      	pop	{r4, r5, r6, pc}
 800f09a:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 800f09e:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800f0a2:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800f0a6:	b16b      	cbz	r3, 800f0c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 800f0a8:	eef0 1a49 	vmov.f32	s3, s18
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	eeb0 1a69 	vmov.f32	s2, s19
 800f0b2:	eef0 0a62 	vmov.f32	s1, s5
 800f0b6:	eeb0 0a42 	vmov.f32	s0, s4
 800f0ba:	f7ff feb1 	bl	800ee20 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f0be:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 800f0c2:	e7db      	b.n	800f07c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 800f0c4:	eef0 4a48 	vmov.f32	s9, s16
 800f0c8:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800f0cc:	eeb0 4a68 	vmov.f32	s8, s17
 800f0d0:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800f0d4:	eef0 3a49 	vmov.f32	s7, s18
 800f0d8:	4620      	mov	r0, r4
 800f0da:	eeb0 3a69 	vmov.f32	s6, s19
 800f0de:	f7ff fe13 	bl	800ed08 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800f0e2:	e7cb      	b.n	800f07c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

0800f0e4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 800f0e4:	ee07 2a90 	vmov	s15, r2
 800f0e8:	ee07 1a10 	vmov	s14, r1
 800f0ec:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800f0f0:	eddf 7a04 	vldr	s15, [pc, #16]	@ 800f104 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 800f0f4:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800f0f8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f0fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f100:	f7ff bf76 	b.w	800eff0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f104:	3d000000 	.word	0x3d000000

0800f108 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 800f108:	b538      	push	{r3, r4, r5, lr}
 800f10a:	ed2d 8b02 	vpush	{d8}
 800f10e:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 800f112:	4604      	mov	r4, r0
 800f114:	b31d      	cbz	r5, 800f15e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 800f116:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 800f11a:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800f11e:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 800f122:	ee78 8a67 	vsub.f32	s17, s16, s15
 800f126:	ee38 8a27 	vadd.f32	s16, s16, s15
 800f12a:	eef0 0a68 	vmov.f32	s1, s17
 800f12e:	f7ff fd07 	bl	800eb40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800f132:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800f136:	eef0 1a48 	vmov.f32	s3, s16
 800f13a:	4620      	mov	r0, r4
 800f13c:	eeb0 0a41 	vmov.f32	s0, s2
 800f140:	eef0 0a68 	vmov.f32	s1, s17
 800f144:	f7ff fe6c 	bl	800ee20 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f148:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800f14c:	eef0 1a68 	vmov.f32	s3, s17
 800f150:	4620      	mov	r0, r4
 800f152:	eef0 0a48 	vmov.f32	s1, s16
 800f156:	eeb0 0a41 	vmov.f32	s0, s2
 800f15a:	f7ff fe61 	bl	800ee20 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f15e:	4628      	mov	r0, r5
 800f160:	ecbd 8b02 	vpop	{d8}
 800f164:	bd38      	pop	{r3, r4, r5, pc}

0800f166 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 800f166:	b510      	push	{r4, lr}
 800f168:	ed2d 8b02 	vpush	{d8}
 800f16c:	4604      	mov	r4, r0
 800f16e:	eeb0 8a40 	vmov.f32	s16, s0
 800f172:	eef0 8a60 	vmov.f32	s17, s1
 800f176:	f7ff ffc7 	bl	800f108 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f17a:	b9d0      	cbnz	r0, 800f1b2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 800f17c:	4620      	mov	r0, r4
 800f17e:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 800f182:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 800f186:	eef0 0a68 	vmov.f32	s1, s17
 800f18a:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 800f18e:	eeb0 0a48 	vmov.f32	s0, s16
 800f192:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 800f196:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800f19a:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800f19e:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800f1a2:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800f1a6:	f7ff fdaf 	bl	800ed08 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800f1aa:	2001      	movs	r0, #1
 800f1ac:	ecbd 8b02 	vpop	{d8}
 800f1b0:	bd10      	pop	{r4, pc}
 800f1b2:	2000      	movs	r0, #0
 800f1b4:	e7fa      	b.n	800f1ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

0800f1b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 800f1b6:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 800f1ba:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 800f1be:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 800f1c2:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 800f1c6:	f7ff be2b 	b.w	800ee20 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

0800f1cc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 800f1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d0:	b089      	sub	sp, #36	@ 0x24
 800f1d2:	461c      	mov	r4, r3
 800f1d4:	4682      	mov	sl, r0
 800f1d6:	4615      	mov	r5, r2
 800f1d8:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800f1dc:	f10d 0820 	add.w	r8, sp, #32
 800f1e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f1e2:	9304      	str	r3, [sp, #16]
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	9105      	str	r1, [sp, #20]
 800f1e8:	9306      	str	r3, [sp, #24]
 800f1ea:	f848 3d04 	str.w	r3, [r8, #-4]!
 800f1ee:	9b04      	ldr	r3, [sp, #16]
 800f1f0:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 800f1f4:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 800f1f8:	9b05      	ldr	r3, [sp, #20]
 800f1fa:	429d      	cmp	r5, r3
 800f1fc:	d96d      	bls.n	800f2da <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 800f1fe:	3d01      	subs	r5, #1
 800f200:	f819 3005 	ldrb.w	r3, [r9, r5]
 800f204:	2b06      	cmp	r3, #6
 800f206:	d8f7      	bhi.n	800f1f8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f208:	a201      	add	r2, pc, #4	@ (adr r2, 800f210 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 800f20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f20e:	bf00      	nop
 800f210:	0800f22f 	.word	0x0800f22f
 800f214:	0800f1f9 	.word	0x0800f1f9
 800f218:	0800f22d 	.word	0x0800f22d
 800f21c:	0800f251 	.word	0x0800f251
 800f220:	0800f251 	.word	0x0800f251
 800f224:	0800f255 	.word	0x0800f255
 800f228:	0800f295 	.word	0x0800f295
 800f22c:	3c02      	subs	r4, #2
 800f22e:	4650      	mov	r0, sl
 800f230:	9400      	str	r4, [sp, #0]
 800f232:	462b      	mov	r3, r5
 800f234:	4642      	mov	r2, r8
 800f236:	a906      	add	r1, sp, #24
 800f238:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f23c:	f7ff fcae 	bl	800eb9c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f240:	eddd 0a07 	vldr	s1, [sp, #28]
 800f244:	ed9d 0a06 	vldr	s0, [sp, #24]
 800f248:	4630      	mov	r0, r6
 800f24a:	f7ff fed1 	bl	800eff0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f24e:	e7d3      	b.n	800f1f8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f250:	3c01      	subs	r4, #1
 800f252:	e7ec      	b.n	800f22e <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 800f254:	f1a4 0b04 	sub.w	fp, r4, #4
 800f258:	3c02      	subs	r4, #2
 800f25a:	4650      	mov	r0, sl
 800f25c:	462b      	mov	r3, r5
 800f25e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f262:	f8cd b000 	str.w	fp, [sp]
 800f266:	4642      	mov	r2, r8
 800f268:	a906      	add	r1, sp, #24
 800f26a:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f26e:	f7ff fc95 	bl	800eb9c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f272:	eddd 2a07 	vldr	s5, [sp, #28]
 800f276:	ed9d 2a06 	vldr	s4, [sp, #24]
 800f27a:	4630      	mov	r0, r6
 800f27c:	ed54 1a01 	vldr	s3, [r4, #-4]
 800f280:	ed14 1a02 	vldr	s2, [r4, #-8]
 800f284:	edd4 0a01 	vldr	s1, [r4, #4]
 800f288:	ed94 0a00 	vldr	s0, [r4]
 800f28c:	f7ff fc1a 	bl	800eac4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f290:	465c      	mov	r4, fp
 800f292:	e7b1      	b.n	800f1f8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f294:	f1a4 0b06 	sub.w	fp, r4, #6
 800f298:	3c02      	subs	r4, #2
 800f29a:	4650      	mov	r0, sl
 800f29c:	462b      	mov	r3, r5
 800f29e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f2a2:	f8cd b000 	str.w	fp, [sp]
 800f2a6:	4642      	mov	r2, r8
 800f2a8:	a906      	add	r1, sp, #24
 800f2aa:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f2ae:	f7ff fc75 	bl	800eb9c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f2b2:	eddd 3a07 	vldr	s7, [sp, #28]
 800f2b6:	ed9d 3a06 	vldr	s6, [sp, #24]
 800f2ba:	4630      	mov	r0, r6
 800f2bc:	ed54 2a03 	vldr	s5, [r4, #-12]
 800f2c0:	ed14 2a04 	vldr	s4, [r4, #-16]
 800f2c4:	ed54 1a01 	vldr	s3, [r4, #-4]
 800f2c8:	ed14 1a02 	vldr	s2, [r4, #-8]
 800f2cc:	edd4 0a01 	vldr	s1, [r4, #4]
 800f2d0:	ed94 0a00 	vldr	s0, [r4]
 800f2d4:	f7ff fc15 	bl	800eb02 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f2d8:	e7da      	b.n	800f290 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 800f2da:	9b04      	ldr	r3, [sp, #16]
 800f2dc:	b113      	cbz	r3, 800f2e4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 800f2de:	4630      	mov	r0, r6
 800f2e0:	f7ff ff69 	bl	800f1b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 800f2e4:	b009      	add	sp, #36	@ 0x24
 800f2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ea:	bf00      	nop

0800f2ec <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 800f2ec:	eef0 7a60 	vmov.f32	s15, s1
 800f2f0:	6803      	ldr	r3, [r0, #0]
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f2f8:	ee17 2a90 	vmov	r2, s15
 800f2fc:	eef0 7a40 	vmov.f32	s15, s0
 800f300:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f304:	ee17 1a90 	vmov	r1, s15
 800f308:	4718      	bx	r3
	...

0800f30c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 800f30c:	4b04      	ldr	r3, [pc, #16]	@ (800f320 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 800f30e:	b510      	push	{r4, lr}
 800f310:	4604      	mov	r4, r0
 800f312:	f840 3b14 	str.w	r3, [r0], #20
 800f316:	f000 ffd7 	bl	80102c8 <_ZN8touchgfx7OutlineD1Ev>
 800f31a:	4620      	mov	r0, r4
 800f31c:	bd10      	pop	{r4, pc}
 800f31e:	bf00      	nop
 800f320:	080247c8 	.word	0x080247c8

0800f324 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 800f324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f328:	ed2d 8b04 	vpush	{d8-d9}
 800f32c:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 800f330:	b0b5      	sub	sp, #212	@ 0xd4
 800f332:	4605      	mov	r5, r0
 800f334:	468b      	mov	fp, r1
 800f336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f33a:	9206      	str	r2, [sp, #24]
 800f33c:	461e      	mov	r6, r3
 800f33e:	2400      	movs	r4, #0
 800f340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f344:	f240 814f 	bls.w	800f5e6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 800f348:	23ff      	movs	r3, #255	@ 0xff
 800f34a:	1d02      	adds	r2, r0, #4
 800f34c:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 800f5ec <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 800f350:	f04f 0800 	mov.w	r8, #0
 800f354:	9300      	str	r3, [sp, #0]
 800f356:	af08      	add	r7, sp, #32
 800f358:	6981      	ldr	r1, [r0, #24]
 800f35a:	a808      	add	r0, sp, #32
 800f35c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f35e:	eef0 9a49 	vmov.f32	s19, s18
 800f362:	f010 fa29 	bl	801f7b8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800f366:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 800f36a:	4ba1      	ldr	r3, [pc, #644]	@ (800f5f0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 800f36c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f370:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f374:	2201      	movs	r2, #1
 800f376:	9308      	str	r3, [sp, #32]
 800f378:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 800f37c:	edd5 6a08 	vldr	s13, [r5, #32]
 800f380:	eeb0 8a49 	vmov.f32	s16, s18
 800f384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f388:	9325      	str	r3, [sp, #148]	@ 0x94
 800f38a:	f04f 0300 	mov.w	r3, #0
 800f38e:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 800f392:	7f6a      	ldrb	r2, [r5, #29]
 800f394:	eef0 8a49 	vmov.f32	s17, s18
 800f398:	bf48      	it	mi
 800f39a:	eef1 7a67 	vnegmi.f32	s15, s15
 800f39e:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 800f3a2:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 800f3a6:	46c1      	mov	r9, r8
 800f3a8:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f3ac:	f04f 0a01 	mov.w	sl, #1
 800f3b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f3b4:	7fab      	ldrb	r3, [r5, #30]
 800f3b6:	942a      	str	r4, [sp, #168]	@ 0xa8
 800f3b8:	435a      	muls	r2, r3
 800f3ba:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 800f3be:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800f3c2:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 800f3c6:	1c53      	adds	r3, r2, #1
 800f3c8:	942b      	str	r4, [sp, #172]	@ 0xac
 800f3ca:	942c      	str	r4, [sp, #176]	@ 0xb0
 800f3cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f3d0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 800f3d4:	942d      	str	r4, [sp, #180]	@ 0xb4
 800f3d6:	942e      	str	r4, [sp, #184]	@ 0xb8
 800f3d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f3dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3e0:	942f      	str	r4, [sp, #188]	@ 0xbc
 800f3e2:	9430      	str	r4, [sp, #192]	@ 0xc0
 800f3e4:	9431      	str	r4, [sp, #196]	@ 0xc4
 800f3e6:	9432      	str	r4, [sp, #200]	@ 0xc8
 800f3e8:	9433      	str	r4, [sp, #204]	@ 0xcc
 800f3ea:	4644      	mov	r4, r8
 800f3ec:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800f3f0:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 800f3f4:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 800f3f8:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 800f3fc:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 800f400:	9b06      	ldr	r3, [sp, #24]
 800f402:	454b      	cmp	r3, r9
 800f404:	f000 80cc 	beq.w	800f5a0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 800f408:	f109 0301 	add.w	r3, r9, #1
 800f40c:	9305      	str	r3, [sp, #20]
 800f40e:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800f412:	2b06      	cmp	r3, #6
 800f414:	d839      	bhi.n	800f48a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f416:	e8df f003 	tbb	[pc, r3]
 800f41a:	3b04      	.short	0x3b04
 800f41c:	817c6f60 	.word	0x817c6f60
 800f420:	a0          	.byte	0xa0
 800f421:	00          	.byte	0x00
 800f422:	45c1      	cmp	r9, r8
 800f424:	d92b      	bls.n	800f47e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 800f426:	eef0 0a49 	vmov.f32	s1, s18
 800f42a:	4638      	mov	r0, r7
 800f42c:	eeb0 0a69 	vmov.f32	s0, s19
 800f430:	f7ff fdde 	bl	800eff0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f434:	4638      	mov	r0, r7
 800f436:	f7ff fe67 	bl	800f108 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f43a:	4681      	mov	r9, r0
 800f43c:	b9f8      	cbnz	r0, 800f47e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 800f43e:	eef0 0a49 	vmov.f32	s1, s18
 800f442:	4638      	mov	r0, r7
 800f444:	eeb0 0a69 	vmov.f32	s0, s19
 800f448:	f7ff fe8d 	bl	800f166 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 800f44c:	4628      	mov	r0, r5
 800f44e:	4623      	mov	r3, r4
 800f450:	9a05      	ldr	r2, [sp, #20]
 800f452:	4641      	mov	r1, r8
 800f454:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 800f458:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 800f45c:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 800f460:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 800f464:	e9cd 9702 	strd	r9, r7, [sp, #8]
 800f468:	e9cd b600 	strd	fp, r6, [sp]
 800f46c:	f7ff feae 	bl	800f1cc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f470:	eef0 0a49 	vmov.f32	s1, s18
 800f474:	eeb0 0a69 	vmov.f32	s0, s19
 800f478:	4638      	mov	r0, r7
 800f47a:	f7ff fe74 	bl	800f166 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 800f47e:	eeb0 8a49 	vmov.f32	s16, s18
 800f482:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f486:	eef0 8a69 	vmov.f32	s17, s19
 800f48a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f48e:	e7b7      	b.n	800f400 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 800f490:	45c1      	cmp	r9, r8
 800f492:	d90d      	bls.n	800f4b0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 800f494:	4638      	mov	r0, r7
 800f496:	f7ff fe37 	bl	800f108 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f49a:	b948      	cbnz	r0, 800f4b0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 800f49c:	4623      	mov	r3, r4
 800f49e:	464a      	mov	r2, r9
 800f4a0:	4641      	mov	r1, r8
 800f4a2:	4628      	mov	r0, r5
 800f4a4:	e9cd a702 	strd	sl, r7, [sp, #8]
 800f4a8:	e9cd b600 	strd	fp, r6, [sp]
 800f4ac:	f7ff fe8e 	bl	800f1cc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f4b0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f4b4:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 800f4b8:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 800f4bc:	3402      	adds	r4, #2
 800f4be:	edd3 8a00 	vldr	s17, [r3]
 800f4c2:	46c8      	mov	r8, r9
 800f4c4:	ed93 8a01 	vldr	s16, [r3, #4]
 800f4c8:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 800f4cc:	eef0 9a68 	vmov.f32	s19, s17
 800f4d0:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 800f4d4:	eeb0 9a48 	vmov.f32	s18, s16
 800f4d8:	e7d7      	b.n	800f48a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f4da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f4de:	4638      	mov	r0, r7
 800f4e0:	3402      	adds	r4, #2
 800f4e2:	edd3 8a00 	vldr	s17, [r3]
 800f4e6:	ed93 8a01 	vldr	s16, [r3, #4]
 800f4ea:	eeb0 0a68 	vmov.f32	s0, s17
 800f4ee:	eef0 0a48 	vmov.f32	s1, s16
 800f4f2:	f7ff fd7d 	bl	800eff0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f4f6:	e7c8      	b.n	800f48a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f4f8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f4fc:	edd3 8a00 	vldr	s17, [r3]
 800f500:	eef0 0a48 	vmov.f32	s1, s16
 800f504:	4638      	mov	r0, r7
 800f506:	eeb0 0a68 	vmov.f32	s0, s17
 800f50a:	3401      	adds	r4, #1
 800f50c:	f7ff fd70 	bl	800eff0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f510:	e7bb      	b.n	800f48a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f512:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f516:	ed93 8a00 	vldr	s16, [r3]
 800f51a:	e7f1      	b.n	800f500 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 800f51c:	00a3      	lsls	r3, r4, #2
 800f51e:	eef0 0a48 	vmov.f32	s1, s16
 800f522:	eeb0 0a68 	vmov.f32	s0, s17
 800f526:	4638      	mov	r0, r7
 800f528:	f103 0208 	add.w	r2, r3, #8
 800f52c:	f103 090c 	add.w	r9, r3, #12
 800f530:	4433      	add	r3, r6
 800f532:	3404      	adds	r4, #4
 800f534:	4432      	add	r2, r6
 800f536:	44b1      	add	r9, r6
 800f538:	edd3 1a01 	vldr	s3, [r3, #4]
 800f53c:	ed92 2a00 	vldr	s4, [r2]
 800f540:	edd9 2a00 	vldr	s5, [r9]
 800f544:	ed93 1a00 	vldr	s2, [r3]
 800f548:	9207      	str	r2, [sp, #28]
 800f54a:	f7ff fabb 	bl	800eac4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f54e:	9a07      	ldr	r2, [sp, #28]
 800f550:	ed99 8a00 	vldr	s16, [r9]
 800f554:	edd2 8a00 	vldr	s17, [r2]
 800f558:	e797      	b.n	800f48a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f55a:	00a3      	lsls	r3, r4, #2
 800f55c:	eef0 0a48 	vmov.f32	s1, s16
 800f560:	eeb0 0a68 	vmov.f32	s0, s17
 800f564:	4638      	mov	r0, r7
 800f566:	f103 0210 	add.w	r2, r3, #16
 800f56a:	f103 0914 	add.w	r9, r3, #20
 800f56e:	4433      	add	r3, r6
 800f570:	3406      	adds	r4, #6
 800f572:	4432      	add	r2, r6
 800f574:	44b1      	add	r9, r6
 800f576:	edd3 2a03 	vldr	s5, [r3, #12]
 800f57a:	ed92 3a00 	vldr	s6, [r2]
 800f57e:	edd9 3a00 	vldr	s7, [r9]
 800f582:	ed93 2a02 	vldr	s4, [r3, #8]
 800f586:	edd3 1a01 	vldr	s3, [r3, #4]
 800f58a:	ed93 1a00 	vldr	s2, [r3]
 800f58e:	9207      	str	r2, [sp, #28]
 800f590:	f7ff fab7 	bl	800eb02 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f594:	9a07      	ldr	r2, [sp, #28]
 800f596:	ed99 8a00 	vldr	s16, [r9]
 800f59a:	edd2 8a00 	vldr	s17, [r2]
 800f59e:	e774      	b.n	800f48a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f5a0:	9b06      	ldr	r3, [sp, #24]
 800f5a2:	af08      	add	r7, sp, #32
 800f5a4:	4543      	cmp	r3, r8
 800f5a6:	d90f      	bls.n	800f5c8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 800f5a8:	4638      	mov	r0, r7
 800f5aa:	f7ff fdad 	bl	800f108 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f5ae:	b958      	cbnz	r0, 800f5c8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	9703      	str	r7, [sp, #12]
 800f5b4:	f8cd b000 	str.w	fp, [sp]
 800f5b8:	4641      	mov	r1, r8
 800f5ba:	9a06      	ldr	r2, [sp, #24]
 800f5bc:	4628      	mov	r0, r5
 800f5be:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800f5c2:	4623      	mov	r3, r4
 800f5c4:	f7ff fe02 	bl	800f1cc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f5c8:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 800f5cc:	4638      	mov	r0, r7
 800f5ce:	f010 f987 	bl	801f8e0 <_ZN8touchgfx6Canvas6renderEh>
 800f5d2:	4604      	mov	r4, r0
 800f5d4:	4638      	mov	r0, r7
 800f5d6:	f7ff fe99 	bl	800f30c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 800f5da:	4620      	mov	r0, r4
 800f5dc:	b035      	add	sp, #212	@ 0xd4
 800f5de:	ecbd 8b04 	vpop	{d8-d9}
 800f5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e6:	2401      	movs	r4, #1
 800f5e8:	e7f7      	b.n	800f5da <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 800f5ea:	bf00      	nop
 800f5ec:	00000000 	.word	0x00000000
 800f5f0:	080241b8 	.word	0x080241b8

0800f5f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 800f5f4:	b510      	push	{r4, lr}
 800f5f6:	4604      	mov	r4, r0
 800f5f8:	f7ff fe88 	bl	800f30c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 800f5fc:	21b0      	movs	r1, #176	@ 0xb0
 800f5fe:	4620      	mov	r0, r4
 800f600:	f010 fd5a 	bl	80200b8 <_ZdlPvj>
 800f604:	4620      	mov	r0, r4
 800f606:	bd10      	pop	{r4, pc}

0800f608 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 800f608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f60c:	4698      	mov	r8, r3
 800f60e:	23ff      	movs	r3, #255	@ 0xff
 800f610:	4607      	mov	r7, r0
 800f612:	4689      	mov	r9, r1
 800f614:	4692      	mov	sl, r2
 800f616:	1d02      	adds	r2, r0, #4
 800f618:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 800f61c:	2400      	movs	r4, #0
 800f61e:	44ca      	add	sl, r9
 800f620:	ed2d 8b06 	vpush	{d8-d10}
 800f624:	b0aa      	sub	sp, #168	@ 0xa8
 800f626:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 800f82c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 800f62a:	9300      	str	r3, [sp, #0]
 800f62c:	eef0 8a48 	vmov.f32	s17, s16
 800f630:	6981      	ldr	r1, [r0, #24]
 800f632:	a80d      	add	r0, sp, #52	@ 0x34
 800f634:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800f636:	f010 f8bf 	bl	801f7b8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800f63a:	7f3b      	ldrb	r3, [r7, #28]
 800f63c:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 800f82c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 800f640:	4628      	mov	r0, r5
 800f642:	1e5a      	subs	r2, r3, #1
 800f644:	eeb0 0a60 	vmov.f32	s0, s1
 800f648:	4253      	negs	r3, r2
 800f64a:	4153      	adcs	r3, r2
 800f64c:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 800f650:	f004 faf1 	bl	8013c36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f654:	eeb0 9a40 	vmov.f32	s18, s0
 800f658:	eef0 9a60 	vmov.f32	s19, s1
 800f65c:	45ca      	cmp	sl, r9
 800f65e:	f000 80cd 	beq.w	800f7fc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 800f662:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f666:	2b06      	cmp	r3, #6
 800f668:	d8f8      	bhi.n	800f65c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f66a:	e8df f003 	tbb	[pc, r3]
 800f66e:	0804      	.short	0x0804
 800f670:	58533f2a 	.word	0x58533f2a
 800f674:	8a          	.byte	0x8a
 800f675:	00          	.byte	0x00
 800f676:	a80d      	add	r0, sp, #52	@ 0x34
 800f678:	f010 f910 	bl	801f89c <_ZN8touchgfx6Canvas5closeEv>
 800f67c:	e7ee      	b.n	800f65c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f67e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f682:	4628      	mov	r0, r5
 800f684:	ed93 8a01 	vldr	s16, [r3, #4]
 800f688:	edd3 8a00 	vldr	s17, [r3]
 800f68c:	eef0 0a48 	vmov.f32	s1, s16
 800f690:	eeb0 0a68 	vmov.f32	s0, s17
 800f694:	f004 facf 	bl	8013c36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f698:	a80d      	add	r0, sp, #52	@ 0x34
 800f69a:	eef0 7a60 	vmov.f32	s15, s1
 800f69e:	eeb0 9a40 	vmov.f32	s18, s0
 800f6a2:	eef0 9a60 	vmov.f32	s19, s1
 800f6a6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f6aa:	ee17 2a90 	vmov	r2, s15
 800f6ae:	eef0 7a40 	vmov.f32	s15, s0
 800f6b2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f6b6:	ee17 1a90 	vmov	r1, s15
 800f6ba:	f010 f9c9 	bl	801fa50 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 800f6be:	3402      	adds	r4, #2
 800f6c0:	e7cc      	b.n	800f65c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f6c2:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	edd3 8a00 	vldr	s17, [r3]
 800f6cc:	ed93 8a01 	vldr	s16, [r3, #4]
 800f6d0:	eeb0 0a68 	vmov.f32	s0, s17
 800f6d4:	eef0 0a48 	vmov.f32	s1, s16
 800f6d8:	f004 faad 	bl	8013c36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f6dc:	a80d      	add	r0, sp, #52	@ 0x34
 800f6de:	eeb0 9a40 	vmov.f32	s18, s0
 800f6e2:	eef0 9a60 	vmov.f32	s19, s1
 800f6e6:	f7ff fe01 	bl	800f2ec <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 800f6ea:	e7e8      	b.n	800f6be <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 800f6ec:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f6f0:	edd3 8a00 	vldr	s17, [r3]
 800f6f4:	eef0 0a48 	vmov.f32	s1, s16
 800f6f8:	4628      	mov	r0, r5
 800f6fa:	eeb0 0a68 	vmov.f32	s0, s17
 800f6fe:	3401      	adds	r4, #1
 800f700:	f004 fa99 	bl	8013c36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f704:	a80d      	add	r0, sp, #52	@ 0x34
 800f706:	eef0 9a60 	vmov.f32	s19, s1
 800f70a:	eeb0 9a40 	vmov.f32	s18, s0
 800f70e:	f7ff fded 	bl	800f2ec <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 800f712:	e7a3      	b.n	800f65c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f714:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f718:	ed93 8a00 	vldr	s16, [r3]
 800f71c:	e7ea      	b.n	800f6f4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 800f71e:	1ca3      	adds	r3, r4, #2
 800f720:	4628      	mov	r0, r5
 800f722:	3404      	adds	r4, #4
 800f724:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800f728:	ed53 0a01 	vldr	s1, [r3, #-4]
 800f72c:	ed13 0a02 	vldr	s0, [r3, #-8]
 800f730:	edd3 8a00 	vldr	s17, [r3]
 800f734:	ed93 8a01 	vldr	s16, [r3, #4]
 800f738:	f004 fa7d 	bl	8013c36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f73c:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 800f740:	eeb0 0a68 	vmov.f32	s0, s17
 800f744:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 800f748:	eef0 0a48 	vmov.f32	s1, s16
 800f74c:	4628      	mov	r0, r5
 800f74e:	f004 fa72 	bl	8013c36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f752:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 800f756:	eef0 2a60 	vmov.f32	s5, s1
 800f75a:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 800f75e:	eeb0 2a40 	vmov.f32	s4, s0
 800f762:	a80d      	add	r0, sp, #52	@ 0x34
 800f764:	eeb0 aa40 	vmov.f32	s20, s0
 800f768:	eef0 aa60 	vmov.f32	s21, s1
 800f76c:	eeb0 0a49 	vmov.f32	s0, s18
 800f770:	eef0 0a69 	vmov.f32	s1, s19
 800f774:	f7ff f9a6 	bl	800eac4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f778:	eef0 9a6a 	vmov.f32	s19, s21
 800f77c:	eeb0 9a4a 	vmov.f32	s18, s20
 800f780:	e76c      	b.n	800f65c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f782:	1d26      	adds	r6, r4, #4
 800f784:	4628      	mov	r0, r5
 800f786:	3406      	adds	r4, #6
 800f788:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f78c:	ed56 0a03 	vldr	s1, [r6, #-12]
 800f790:	ed16 0a04 	vldr	s0, [r6, #-16]
 800f794:	edd6 8a00 	vldr	s17, [r6]
 800f798:	ed96 8a01 	vldr	s16, [r6, #4]
 800f79c:	f004 fa4b 	bl	8013c36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f7a0:	ed8d 0a07 	vstr	s0, [sp, #28]
 800f7a4:	4628      	mov	r0, r5
 800f7a6:	ed16 0a02 	vldr	s0, [r6, #-8]
 800f7aa:	edcd 0a08 	vstr	s1, [sp, #32]
 800f7ae:	ed56 0a01 	vldr	s1, [r6, #-4]
 800f7b2:	f004 fa40 	bl	8013c36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f7b6:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 800f7ba:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 800f7be:	eeb0 0a68 	vmov.f32	s0, s17
 800f7c2:	eef0 0a48 	vmov.f32	s1, s16
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	f004 fa35 	bl	8013c36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f7cc:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 800f7d0:	eeb0 3a40 	vmov.f32	s6, s0
 800f7d4:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 800f7d8:	eef0 3a60 	vmov.f32	s7, s1
 800f7dc:	eddd 1a08 	vldr	s3, [sp, #32]
 800f7e0:	eeb0 aa40 	vmov.f32	s20, s0
 800f7e4:	ed9d 1a07 	vldr	s2, [sp, #28]
 800f7e8:	eef0 aa60 	vmov.f32	s21, s1
 800f7ec:	a80d      	add	r0, sp, #52	@ 0x34
 800f7ee:	eef0 0a69 	vmov.f32	s1, s19
 800f7f2:	eeb0 0a49 	vmov.f32	s0, s18
 800f7f6:	f7ff f984 	bl	800eb02 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f7fa:	e7bd      	b.n	800f778 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 800f7fc:	7f7b      	ldrb	r3, [r7, #29]
 800f7fe:	a80d      	add	r0, sp, #52	@ 0x34
 800f800:	7fb9      	ldrb	r1, [r7, #30]
 800f802:	4359      	muls	r1, r3
 800f804:	1c4b      	adds	r3, r1, #1
 800f806:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 800f80a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f80e:	f010 f867 	bl	801f8e0 <_ZN8touchgfx6Canvas6renderEh>
 800f812:	4b07      	ldr	r3, [pc, #28]	@ (800f830 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 800f814:	4604      	mov	r4, r0
 800f816:	a812      	add	r0, sp, #72	@ 0x48
 800f818:	930d      	str	r3, [sp, #52]	@ 0x34
 800f81a:	f000 fd55 	bl	80102c8 <_ZN8touchgfx7OutlineD1Ev>
 800f81e:	4620      	mov	r0, r4
 800f820:	b02a      	add	sp, #168	@ 0xa8
 800f822:	ecbd 8b06 	vpop	{d8-d10}
 800f826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f82a:	bf00      	nop
 800f82c:	00000000 	.word	0x00000000
 800f830:	080247c8 	.word	0x080247c8

0800f834 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 800f834:	b410      	push	{r4}
 800f836:	7f04      	ldrb	r4, [r0, #28]
 800f838:	b11c      	cbz	r4, 800f842 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 800f83a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f83e:	f7ff bee3 	b.w	800f608 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 800f842:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f846:	f7ff bd6d 	b.w	800f324 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>
	...

0800f84c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 800f84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f850:	4691      	mov	r9, r2
 800f852:	4602      	mov	r2, r0
 800f854:	b085      	sub	sp, #20
 800f856:	4605      	mov	r5, r0
 800f858:	f852 0f26 	ldr.w	r0, [r2, #38]!
 800f85c:	4688      	mov	r8, r1
 800f85e:	469a      	mov	sl, r3
 800f860:	ab02      	add	r3, sp, #8
 800f862:	6851      	ldr	r1, [r2, #4]
 800f864:	af02      	add	r7, sp, #8
 800f866:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800f86a:	c303      	stmia	r3!, {r0, r1}
 800f86c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f870:	2b00      	cmp	r3, #0
 800f872:	dd08      	ble.n	800f886 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 800f874:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 800f878:	2c00      	cmp	r4, #0
 800f87a:	dd04      	ble.n	800f886 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 800f87c:	4a2e      	ldr	r2, [pc, #184]	@ (800f938 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xec>)
 800f87e:	7812      	ldrb	r2, [r2, #0]
 800f880:	b122      	cbz	r2, 800f88c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x40>
 800f882:	2a01      	cmp	r2, #1
 800f884:	d02d      	beq.n	800f8e2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x96>
 800f886:	b005      	add	sp, #20
 800f888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f88c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f890:	441c      	add	r4, r3
 800f892:	b2a4      	uxth	r4, r4
 800f894:	b226      	sxth	r6, r4
 800f896:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800f89a:	42b3      	cmp	r3, r6
 800f89c:	daf3      	bge.n	800f886 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 800f89e:	4653      	mov	r3, sl
 800f8a0:	464a      	mov	r2, r9
 800f8a2:	4641      	mov	r1, r8
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	e9cd b700 	strd	fp, r7, [sp]
 800f8aa:	f7ff ffc3 	bl	800f834 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 800f8ae:	b940      	cbnz	r0, 800f8c2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 800f8b0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d004      	beq.n	800f8c2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 800f8b8:	3301      	adds	r3, #1
 800f8ba:	105b      	asrs	r3, r3, #1
 800f8bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f8c0:	e7ed      	b.n	800f89e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x52>
 800f8c2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800f8c6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f8ca:	4413      	add	r3, r2
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	441a      	add	r2, r3
 800f8d0:	f8ad 300a 	strh.w	r3, [sp, #10]
 800f8d4:	b212      	sxth	r2, r2
 800f8d6:	4296      	cmp	r6, r2
 800f8d8:	dadd      	bge.n	800f896 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 800f8da:	1ae3      	subs	r3, r4, r3
 800f8dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f8e0:	e7d9      	b.n	800f896 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 800f8e2:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 800f8e6:	441c      	add	r4, r3
 800f8e8:	b2a4      	uxth	r4, r4
 800f8ea:	b226      	sxth	r6, r4
 800f8ec:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800f8f0:	42b3      	cmp	r3, r6
 800f8f2:	dac8      	bge.n	800f886 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 800f8f4:	4653      	mov	r3, sl
 800f8f6:	464a      	mov	r2, r9
 800f8f8:	4641      	mov	r1, r8
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	e9cd b700 	strd	fp, r7, [sp]
 800f900:	f7ff ff98 	bl	800f834 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 800f904:	b940      	cbnz	r0, 800f918 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 800f906:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d004      	beq.n	800f918 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 800f90e:	3301      	adds	r3, #1
 800f910:	105b      	asrs	r3, r3, #1
 800f912:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f916:	e7ed      	b.n	800f8f4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa8>
 800f918:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800f91c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f920:	4413      	add	r3, r2
 800f922:	b29b      	uxth	r3, r3
 800f924:	441a      	add	r2, r3
 800f926:	f8ad 3008 	strh.w	r3, [sp, #8]
 800f92a:	b212      	sxth	r2, r2
 800f92c:	4296      	cmp	r6, r2
 800f92e:	dadd      	bge.n	800f8ec <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 800f930:	1ae3      	subs	r3, r4, r3
 800f932:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f936:	e7d9      	b.n	800f8ec <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 800f938:	24025118 	.word	0x24025118

0800f93c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800f93c:	0c0b      	lsrs	r3, r1, #16
 800f93e:	60c1      	str	r1, [r0, #12]
 800f940:	7481      	strb	r1, [r0, #18]
 800f942:	7403      	strb	r3, [r0, #16]
 800f944:	0a0b      	lsrs	r3, r1, #8
 800f946:	7443      	strb	r3, [r0, #17]
 800f948:	4770      	bx	lr

0800f94a <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800f94a:	f1a0 0008 	sub.w	r0, r0, #8
 800f94e:	e7f5      	b.n	800f93c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>

0800f950 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 800f950:	b508      	push	{r3, lr}
 800f952:	4b05      	ldr	r3, [pc, #20]	@ (800f968 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 800f954:	6818      	ldr	r0, [r3, #0]
 800f956:	6803      	ldr	r3, [r0, #0]
 800f958:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f95c:	4798      	blx	r3
 800f95e:	1e43      	subs	r3, r0, #1
 800f960:	4258      	negs	r0, r3
 800f962:	4158      	adcs	r0, r3
 800f964:	bd08      	pop	{r3, pc}
 800f966:	bf00      	nop
 800f968:	24025120 	.word	0x24025120

0800f96c <_ZN8touchgfx13PainterRGB888D1Ev>:
 800f96c:	4770      	bx	lr

0800f96e <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 800f96e:	3808      	subs	r0, #8
 800f970:	4770      	bx	lr

0800f972 <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 800f972:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f976:	b410      	push	{r4}
 800f978:	188c      	adds	r4, r1, r2
 800f97a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f97e:	68c2      	ldr	r2, [r0, #12]
 800f980:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800f984:	4620      	mov	r0, r4
 800f986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f98a:	f7f3 bae1 	b.w	8002f50 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0800f98e <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 800f98e:	f7f3 babb 	b.w	8002f08 <_ZN8touchgfx5paint8tearDownEv>

0800f992 <_ZN8touchgfx13PainterRGB888D0Ev>:
 800f992:	b510      	push	{r4, lr}
 800f994:	4604      	mov	r4, r0
 800f996:	2114      	movs	r1, #20
 800f998:	f010 fb8e 	bl	80200b8 <_ZdlPvj>
 800f99c:	4620      	mov	r0, r4
 800f99e:	bd10      	pop	{r4, pc}

0800f9a0 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 800f9a0:	f1a0 0008 	sub.w	r0, r0, #8
 800f9a4:	e7f5      	b.n	800f992 <_ZN8touchgfx13PainterRGB888D0Ev>
	...

0800f9a8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 800f9a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9b0:	4411      	add	r1, r2
 800f9b2:	7c42      	ldrb	r2, [r0, #17]
 800f9b4:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 800f9b8:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 800f9bc:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 800f9c0:	2a00      	cmp	r2, #0
 800f9c2:	f000 8084 	beq.w	800face <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 800f9c6:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800f9ca:	ed90 7a08 	vldr	s14, [r0, #32]
 800f9ce:	42a2      	cmp	r2, r4
 800f9d0:	68c3      	ldr	r3, [r0, #12]
 800f9d2:	db20      	blt.n	800fa16 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 800f9d4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f9d8:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800f9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e0:	bfc8      	it	gt
 800f9e2:	2200      	movgt	r2, #0
 800f9e4:	589a      	ldr	r2, [r3, r2]
 800f9e6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800f9ea:	7c03      	ldrb	r3, [r0, #16]
 800f9ec:	fa5f fc82 	uxtb.w	ip, r2
 800f9f0:	f3c2 2707 	ubfx	r7, r2, #8, #8
 800f9f4:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800f9f8:	440e      	add	r6, r1
 800f9fa:	b36b      	cbz	r3, 800fa58 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 800f9fc:	2dff      	cmp	r5, #255	@ 0xff
 800f9fe:	d12b      	bne.n	800fa58 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 800fa00:	42b1      	cmp	r1, r6
 800fa02:	f080 8204 	bcs.w	800fe0e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fa06:	f881 c000 	strb.w	ip, [r1]
 800fa0a:	3103      	adds	r1, #3
 800fa0c:	f801 7c02 	strb.w	r7, [r1, #-2]
 800fa10:	f801 4c01 	strb.w	r4, [r1, #-1]
 800fa14:	e7f4      	b.n	800fa00 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 800fa16:	f9b0 700a 	ldrsh.w	r7, [r0, #10]
 800fa1a:	42a7      	cmp	r7, r4
 800fa1c:	dc08      	bgt.n	800fa30 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 800fa1e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fa22:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800fa26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa2a:	bfd8      	it	le
 800fa2c:	2200      	movle	r2, #0
 800fa2e:	e7d9      	b.n	800f9e4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 800fa30:	1aa2      	subs	r2, r4, r2
 800fa32:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fa36:	ee07 2a90 	vmov	s15, r2
 800fa3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa42:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa4a:	ee17 2a90 	vmov	r2, s15
 800fa4e:	bfd8      	it	le
 800fa50:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 800fa54:	0092      	lsls	r2, r2, #2
 800fa56:	e7c5      	b.n	800f9e4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 800fa58:	0e12      	lsrs	r2, r2, #24
 800fa5a:	4355      	muls	r5, r2
 800fa5c:	1c6a      	adds	r2, r5, #1
 800fa5e:	eb02 2525 	add.w	r5, r2, r5, asr #8
 800fa62:	122d      	asrs	r5, r5, #8
 800fa64:	43e8      	mvns	r0, r5
 800fa66:	b2ad      	uxth	r5, r5
 800fa68:	fb1c fc05 	smulbb	ip, ip, r5
 800fa6c:	b2c0      	uxtb	r0, r0
 800fa6e:	fb17 f705 	smulbb	r7, r7, r5
 800fa72:	fb14 f505 	smulbb	r5, r4, r5
 800fa76:	fa1f fc8c 	uxth.w	ip, ip
 800fa7a:	b2bf      	uxth	r7, r7
 800fa7c:	b2ad      	uxth	r5, r5
 800fa7e:	428e      	cmp	r6, r1
 800fa80:	f101 0303 	add.w	r3, r1, #3
 800fa84:	f240 81c3 	bls.w	800fe0e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fa88:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 800fa8c:	fb02 c200 	mla	r2, r2, r0, ip
 800fa90:	b292      	uxth	r2, r2
 800fa92:	1c51      	adds	r1, r2, #1
 800fa94:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800fa98:	1212      	asrs	r2, r2, #8
 800fa9a:	f803 2c03 	strb.w	r2, [r3, #-3]
 800fa9e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 800faa2:	fb02 7200 	mla	r2, r2, r0, r7
 800faa6:	b292      	uxth	r2, r2
 800faa8:	1c51      	adds	r1, r2, #1
 800faaa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800faae:	1212      	asrs	r2, r2, #8
 800fab0:	f803 2c02 	strb.w	r2, [r3, #-2]
 800fab4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800fab8:	fb02 5200 	mla	r2, r2, r0, r5
 800fabc:	b292      	uxth	r2, r2
 800fabe:	1c51      	adds	r1, r2, #1
 800fac0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800fac4:	4619      	mov	r1, r3
 800fac6:	1212      	asrs	r2, r2, #8
 800fac8:	f803 2c01 	strb.w	r2, [r3, #-1]
 800facc:	e7d7      	b.n	800fa7e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 800face:	7c82      	ldrb	r2, [r0, #18]
 800fad0:	2a00      	cmp	r2, #0
 800fad2:	d047      	beq.n	800fb64 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 800fad4:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800fad8:	ee07 2a10 	vmov	s14, r2
 800fadc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fae0:	ee07 3a90 	vmov	s15, r3
 800fae4:	461a      	mov	r2, r3
 800fae6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800faea:	eef4 6ac7 	vcmpe.f32	s13, s14
 800faee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf2:	f200 808e 	bhi.w	800fc12 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 800faf6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fafa:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800fafe:	68c7      	ldr	r7, [r0, #12]
 800fb00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fb08:	ee06 6a90 	vmov	s13, r6
 800fb0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fb10:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb18:	bf4a      	itet	mi
 800fb1a:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 800fb1e:	4634      	movpl	r4, r6
 800fb20:	ee17 4a90 	vmovmi	r4, s15
 800fb24:	edd0 7a08 	vldr	s15, [r0, #32]
 800fb28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fb2c:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 800fb30:	448e      	add	lr, r1
 800fb32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb36:	bfc8      	it	gt
 800fb38:	2200      	movgt	r2, #0
 800fb3a:	58bf      	ldr	r7, [r7, r2]
 800fb3c:	7c02      	ldrb	r2, [r0, #16]
 800fb3e:	fa5f f987 	uxtb.w	r9, r7
 800fb42:	f3c7 2807 	ubfx	r8, r7, #8, #8
 800fb46:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 800fb4a:	b31a      	cbz	r2, 800fb94 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 800fb4c:	2dff      	cmp	r5, #255	@ 0xff
 800fb4e:	d121      	bne.n	800fb94 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 800fb50:	4571      	cmp	r1, lr
 800fb52:	d25d      	bcs.n	800fc10 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 800fb54:	f881 9000 	strb.w	r9, [r1]
 800fb58:	3103      	adds	r1, #3
 800fb5a:	f801 8c02 	strb.w	r8, [r1, #-2]
 800fb5e:	f801 cc01 	strb.w	ip, [r1, #-1]
 800fb62:	e7f5      	b.n	800fb50 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 800fb64:	ee07 4a90 	vmov	s15, r4
 800fb68:	ed90 7a06 	vldr	s14, [r0, #24]
 800fb6c:	edd0 6a05 	vldr	s13, [r0, #20]
 800fb70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fb7c:	edd0 7a08 	vldr	s15, [r0, #32]
 800fb80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fb84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb88:	bf44      	itt	mi
 800fb8a:	edd0 7a07 	vldrmi	s15, [r0, #28]
 800fb8e:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 800fb92:	e7a5      	b.n	800fae0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 800fb94:	0e3f      	lsrs	r7, r7, #24
 800fb96:	436f      	muls	r7, r5
 800fb98:	1c7a      	adds	r2, r7, #1
 800fb9a:	eb02 2227 	add.w	r2, r2, r7, asr #8
 800fb9e:	1212      	asrs	r2, r2, #8
 800fba0:	ea6f 0a02 	mvn.w	sl, r2
 800fba4:	b292      	uxth	r2, r2
 800fba6:	fb19 f902 	smulbb	r9, r9, r2
 800fbaa:	fa5f fa8a 	uxtb.w	sl, sl
 800fbae:	fb18 f802 	smulbb	r8, r8, r2
 800fbb2:	fb1c fc02 	smulbb	ip, ip, r2
 800fbb6:	fa1f f989 	uxth.w	r9, r9
 800fbba:	fa1f f888 	uxth.w	r8, r8
 800fbbe:	fa1f fc8c 	uxth.w	ip, ip
 800fbc2:	458e      	cmp	lr, r1
 800fbc4:	f101 0203 	add.w	r2, r1, #3
 800fbc8:	d922      	bls.n	800fc10 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 800fbca:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800fbce:	fb01 910a 	mla	r1, r1, sl, r9
 800fbd2:	b289      	uxth	r1, r1
 800fbd4:	1c4f      	adds	r7, r1, #1
 800fbd6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fbda:	1209      	asrs	r1, r1, #8
 800fbdc:	f802 1c03 	strb.w	r1, [r2, #-3]
 800fbe0:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800fbe4:	fb01 810a 	mla	r1, r1, sl, r8
 800fbe8:	b289      	uxth	r1, r1
 800fbea:	1c4f      	adds	r7, r1, #1
 800fbec:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fbf0:	1209      	asrs	r1, r1, #8
 800fbf2:	f802 1c02 	strb.w	r1, [r2, #-2]
 800fbf6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800fbfa:	fb01 c10a 	mla	r1, r1, sl, ip
 800fbfe:	b289      	uxth	r1, r1
 800fc00:	1c4f      	adds	r7, r1, #1
 800fc02:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fc06:	1209      	asrs	r1, r1, #8
 800fc08:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fc0c:	4611      	mov	r1, r2
 800fc0e:	e7d8      	b.n	800fbc2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 800fc10:	191a      	adds	r2, r3, r4
 800fc12:	4433      	add	r3, r6
 800fc14:	b21b      	sxth	r3, r3
 800fc16:	4293      	cmp	r3, r2
 800fc18:	f340 80f9 	ble.w	800fe0e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fc1c:	edd0 7a07 	vldr	s15, [r0, #28]
 800fc20:	ee06 2a90 	vmov	s13, r2
 800fc24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fc28:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fc2c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc34:	f340 80b0 	ble.w	800fd98 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 800fc38:	ee06 3a10 	vmov	s12, r3
 800fc3c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800fc40:	eddf 5a74 	vldr	s11, [pc, #464]	@ 800fe14 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 800fc44:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800fc48:	eef4 7ac6 	vcmpe.f32	s15, s12
 800fc4c:	ed90 6a08 	vldr	s12, [r0, #32]
 800fc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc54:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800fc58:	bfd6      	itet	le
 800fc5a:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 800fc5e:	469c      	movgt	ip, r3
 800fc60:	ee17 ca90 	vmovle	ip, s15
 800fc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc68:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 800fe18 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 800fc6c:	ebac 0202 	sub.w	r2, ip, r2
 800fc70:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 800fc74:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fc78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fc7c:	188c      	adds	r4, r1, r2
 800fc7e:	7c02      	ldrb	r2, [r0, #16]
 800fc80:	b1d2      	cbz	r2, 800fcb8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 800fc82:	2dff      	cmp	r5, #255	@ 0xff
 800fc84:	d118      	bne.n	800fcb8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 800fc86:	42a1      	cmp	r1, r4
 800fc88:	d261      	bcs.n	800fd4e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 800fc8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fc8e:	68c6      	ldr	r6, [r0, #12]
 800fc90:	3103      	adds	r1, #3
 800fc92:	ee17 7a10 	vmov	r7, s14
 800fc96:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 800fc9a:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 800fc9e:	f801 6c03 	strb.w	r6, [r1, #-3]
 800fca2:	7856      	ldrb	r6, [r2, #1]
 800fca4:	f801 6c02 	strb.w	r6, [r1, #-2]
 800fca8:	7892      	ldrb	r2, [r2, #2]
 800fcaa:	f801 2c01 	strb.w	r2, [r1, #-1]
 800fcae:	ed90 7a08 	vldr	s14, [r0, #32]
 800fcb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fcb6:	e7e6      	b.n	800fc86 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 800fcb8:	68c2      	ldr	r2, [r0, #12]
 800fcba:	428c      	cmp	r4, r1
 800fcbc:	f101 0e03 	add.w	lr, r1, #3
 800fcc0:	d945      	bls.n	800fd4e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 800fcc2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fcc6:	ee17 9a10 	vmov	r9, s14
 800fcca:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 800fcce:	f898 7003 	ldrb.w	r7, [r8, #3]
 800fcd2:	fb07 f605 	mul.w	r6, r7, r5
 800fcd6:	1c77      	adds	r7, r6, #1
 800fcd8:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 800fcdc:	123f      	asrs	r7, r7, #8
 800fcde:	b2b9      	uxth	r1, r7
 800fce0:	43ff      	mvns	r7, r7
 800fce2:	b2fe      	uxtb	r6, r7
 800fce4:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 800fce8:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 800fcec:	fb19 f906 	smulbb	r9, r9, r6
 800fcf0:	fb07 9701 	mla	r7, r7, r1, r9
 800fcf4:	b2bf      	uxth	r7, r7
 800fcf6:	f107 0901 	add.w	r9, r7, #1
 800fcfa:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 800fcfe:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 800fd02:	fb19 f906 	smulbb	r9, r9, r6
 800fd06:	123f      	asrs	r7, r7, #8
 800fd08:	f80e 7c03 	strb.w	r7, [lr, #-3]
 800fd0c:	f898 7001 	ldrb.w	r7, [r8, #1]
 800fd10:	fb07 9701 	mla	r7, r7, r1, r9
 800fd14:	b2bf      	uxth	r7, r7
 800fd16:	f107 0901 	add.w	r9, r7, #1
 800fd1a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 800fd1e:	123f      	asrs	r7, r7, #8
 800fd20:	f80e 7c02 	strb.w	r7, [lr, #-2]
 800fd24:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 800fd28:	f898 8002 	ldrb.w	r8, [r8, #2]
 800fd2c:	fb17 f606 	smulbb	r6, r7, r6
 800fd30:	fb08 6601 	mla	r6, r8, r1, r6
 800fd34:	b2b6      	uxth	r6, r6
 800fd36:	1c71      	adds	r1, r6, #1
 800fd38:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 800fd3c:	4671      	mov	r1, lr
 800fd3e:	1236      	asrs	r6, r6, #8
 800fd40:	f80e 6c01 	strb.w	r6, [lr, #-1]
 800fd44:	ed90 7a08 	vldr	s14, [r0, #32]
 800fd48:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd4c:	e7b5      	b.n	800fcba <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 800fd4e:	4563      	cmp	r3, ip
 800fd50:	dd5d      	ble.n	800fe0e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fd52:	edd0 7a08 	vldr	s15, [r0, #32]
 800fd56:	eba3 030c 	sub.w	r3, r3, ip
 800fd5a:	68c4      	ldr	r4, [r0, #12]
 800fd5c:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800fd60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fd64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fd68:	7c00      	ldrb	r0, [r0, #16]
 800fd6a:	440b      	add	r3, r1
 800fd6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd70:	bfd8      	it	le
 800fd72:	2200      	movle	r2, #0
 800fd74:	58a2      	ldr	r2, [r4, r2]
 800fd76:	b2d4      	uxtb	r4, r2
 800fd78:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 800fd7c:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800fd80:	b160      	cbz	r0, 800fd9c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 800fd82:	2dff      	cmp	r5, #255	@ 0xff
 800fd84:	d10a      	bne.n	800fd9c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 800fd86:	4299      	cmp	r1, r3
 800fd88:	d241      	bcs.n	800fe0e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fd8a:	700c      	strb	r4, [r1, #0]
 800fd8c:	3103      	adds	r1, #3
 800fd8e:	f801 cc02 	strb.w	ip, [r1, #-2]
 800fd92:	f801 7c01 	strb.w	r7, [r1, #-1]
 800fd96:	e7f6      	b.n	800fd86 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 800fd98:	4694      	mov	ip, r2
 800fd9a:	e7da      	b.n	800fd52 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 800fd9c:	0e12      	lsrs	r2, r2, #24
 800fd9e:	436a      	muls	r2, r5
 800fda0:	1c55      	adds	r5, r2, #1
 800fda2:	eb05 2522 	add.w	r5, r5, r2, asr #8
 800fda6:	122d      	asrs	r5, r5, #8
 800fda8:	43ee      	mvns	r6, r5
 800fdaa:	b2ad      	uxth	r5, r5
 800fdac:	fb14 f405 	smulbb	r4, r4, r5
 800fdb0:	b2f6      	uxtb	r6, r6
 800fdb2:	fb1c f005 	smulbb	r0, ip, r5
 800fdb6:	fb17 f505 	smulbb	r5, r7, r5
 800fdba:	b2a4      	uxth	r4, r4
 800fdbc:	b280      	uxth	r0, r0
 800fdbe:	b2ad      	uxth	r5, r5
 800fdc0:	428b      	cmp	r3, r1
 800fdc2:	f101 0203 	add.w	r2, r1, #3
 800fdc6:	d922      	bls.n	800fe0e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fdc8:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800fdcc:	fb01 4106 	mla	r1, r1, r6, r4
 800fdd0:	b289      	uxth	r1, r1
 800fdd2:	1c4f      	adds	r7, r1, #1
 800fdd4:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fdd8:	1209      	asrs	r1, r1, #8
 800fdda:	f802 1c03 	strb.w	r1, [r2, #-3]
 800fdde:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800fde2:	fb01 0106 	mla	r1, r1, r6, r0
 800fde6:	b289      	uxth	r1, r1
 800fde8:	1c4f      	adds	r7, r1, #1
 800fdea:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fdee:	1209      	asrs	r1, r1, #8
 800fdf0:	f802 1c02 	strb.w	r1, [r2, #-2]
 800fdf4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800fdf8:	fb01 5106 	mla	r1, r1, r6, r5
 800fdfc:	b289      	uxth	r1, r1
 800fdfe:	1c4f      	adds	r7, r1, #1
 800fe00:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fe04:	1209      	asrs	r1, r1, #8
 800fe06:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fe0a:	4611      	mov	r1, r2
 800fe0c:	e7d8      	b.n	800fdc0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 800fe0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe12:	bf00      	nop
 800fe14:	447ffffe 	.word	0x447ffffe
 800fe18:	00000000 	.word	0x00000000

0800fe1c <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 800fe1c:	4770      	bx	lr

0800fe1e <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 800fe1e:	4770      	bx	lr

0800fe20 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 800fe20:	b510      	push	{r4, lr}
 800fe22:	4604      	mov	r4, r0
 800fe24:	2124      	movs	r1, #36	@ 0x24
 800fe26:	f010 f947 	bl	80200b8 <_ZdlPvj>
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	bd10      	pop	{r4, pc}
	...

0800fe30 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 800fe30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fe32:	6803      	ldr	r3, [r0, #0]
 800fe34:	460d      	mov	r5, r1
 800fe36:	4604      	mov	r4, r0
 800fe38:	4601      	mov	r1, r0
 800fe3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fe3c:	a802      	add	r0, sp, #8
 800fe3e:	4798      	blx	r3
 800fe40:	6828      	ldr	r0, [r5, #0]
 800fe42:	6869      	ldr	r1, [r5, #4]
 800fe44:	466b      	mov	r3, sp
 800fe46:	c303      	stmia	r3!, {r0, r1}
 800fe48:	4668      	mov	r0, sp
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	f7fd fc06 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 800fe50:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800fe52:	b188      	cbz	r0, 800fe78 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fe54:	6803      	ldr	r3, [r0, #0]
 800fe56:	1d21      	adds	r1, r4, #4
 800fe58:	68db      	ldr	r3, [r3, #12]
 800fe5a:	4798      	blx	r3
 800fe5c:	b160      	cbz	r0, 800fe78 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fe5e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	dd08      	ble.n	800fe78 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fe66:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 800fe6a:	2d00      	cmp	r5, #0
 800fe6c:	dd04      	ble.n	800fe78 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fe6e:	4a2b      	ldr	r2, [pc, #172]	@ (800ff1c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 800fe70:	7812      	ldrb	r2, [r2, #0]
 800fe72:	b11a      	cbz	r2, 800fe7c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 800fe74:	2a01      	cmp	r2, #1
 800fe76:	d029      	beq.n	800fecc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 800fe78:	b004      	add	sp, #16
 800fe7a:	bd70      	pop	{r4, r5, r6, pc}
 800fe7c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800fe80:	441d      	add	r5, r3
 800fe82:	b2ad      	uxth	r5, r5
 800fe84:	b22e      	sxth	r6, r5
 800fe86:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800fe8a:	42b3      	cmp	r3, r6
 800fe8c:	daf4      	bge.n	800fe78 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fe8e:	6823      	ldr	r3, [r4, #0]
 800fe90:	4669      	mov	r1, sp
 800fe92:	4620      	mov	r0, r4
 800fe94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe96:	4798      	blx	r3
 800fe98:	b940      	cbnz	r0, 800feac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 800fe9a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800fe9e:	2b01      	cmp	r3, #1
 800fea0:	d004      	beq.n	800feac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 800fea2:	3301      	adds	r3, #1
 800fea4:	105b      	asrs	r3, r3, #1
 800fea6:	f8ad 3006 	strh.w	r3, [sp, #6]
 800feaa:	e7f0      	b.n	800fe8e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 800feac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800feb0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800feb4:	4413      	add	r3, r2
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	441a      	add	r2, r3
 800feba:	f8ad 3002 	strh.w	r3, [sp, #2]
 800febe:	b212      	sxth	r2, r2
 800fec0:	4296      	cmp	r6, r2
 800fec2:	dae0      	bge.n	800fe86 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 800fec4:	1aeb      	subs	r3, r5, r3
 800fec6:	f8ad 3006 	strh.w	r3, [sp, #6]
 800feca:	e7dc      	b.n	800fe86 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 800fecc:	f8bd 5000 	ldrh.w	r5, [sp]
 800fed0:	441d      	add	r5, r3
 800fed2:	b2ad      	uxth	r5, r5
 800fed4:	b22e      	sxth	r6, r5
 800fed6:	f9bd 3000 	ldrsh.w	r3, [sp]
 800feda:	42b3      	cmp	r3, r6
 800fedc:	dacc      	bge.n	800fe78 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fede:	6823      	ldr	r3, [r4, #0]
 800fee0:	4669      	mov	r1, sp
 800fee2:	4620      	mov	r0, r4
 800fee4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fee6:	4798      	blx	r3
 800fee8:	b940      	cbnz	r0, 800fefc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 800feea:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800feee:	2b01      	cmp	r3, #1
 800fef0:	d004      	beq.n	800fefc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 800fef2:	3301      	adds	r3, #1
 800fef4:	105b      	asrs	r3, r3, #1
 800fef6:	f8ad 3004 	strh.w	r3, [sp, #4]
 800fefa:	e7f0      	b.n	800fede <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 800fefc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800ff00:	f8bd 3000 	ldrh.w	r3, [sp]
 800ff04:	4413      	add	r3, r2
 800ff06:	b29b      	uxth	r3, r3
 800ff08:	441a      	add	r2, r3
 800ff0a:	f8ad 3000 	strh.w	r3, [sp]
 800ff0e:	b212      	sxth	r2, r2
 800ff10:	4296      	cmp	r6, r2
 800ff12:	dae0      	bge.n	800fed6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 800ff14:	1aeb      	subs	r3, r5, r3
 800ff16:	f8ad 3004 	strh.w	r3, [sp, #4]
 800ff1a:	e7dc      	b.n	800fed6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 800ff1c:	24025118 	.word	0x24025118

0800ff20 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 800ff20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff22:	6803      	ldr	r3, [r0, #0]
 800ff24:	4604      	mov	r4, r0
 800ff26:	4601      	mov	r1, r0
 800ff28:	4668      	mov	r0, sp
 800ff2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff2c:	4798      	blx	r3
 800ff2e:	2100      	movs	r1, #0
 800ff30:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800ff34:	4668      	mov	r0, sp
 800ff36:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800ff3a:	9102      	str	r1, [sp, #8]
 800ff3c:	a902      	add	r1, sp, #8
 800ff3e:	f8ad 200c 	strh.w	r2, [sp, #12]
 800ff42:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ff46:	f7fd fb89 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 800ff4a:	6823      	ldr	r3, [r4, #0]
 800ff4c:	4669      	mov	r1, sp
 800ff4e:	4620      	mov	r0, r4
 800ff50:	691b      	ldr	r3, [r3, #16]
 800ff52:	4798      	blx	r3
 800ff54:	b004      	add	sp, #16
 800ff56:	bd10      	pop	{r4, pc}

0800ff58 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 800ff58:	2101      	movs	r1, #1
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 800ff60:	490a      	ldr	r1, [pc, #40]	@ (800ff8c <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 800ff62:	8082      	strh	r2, [r0, #4]
 800ff64:	6001      	str	r1, [r0, #0]
 800ff66:	21ff      	movs	r1, #255	@ 0xff
 800ff68:	80c2      	strh	r2, [r0, #6]
 800ff6a:	8102      	strh	r2, [r0, #8]
 800ff6c:	8142      	strh	r2, [r0, #10]
 800ff6e:	8182      	strh	r2, [r0, #12]
 800ff70:	81c2      	strh	r2, [r0, #14]
 800ff72:	8202      	strh	r2, [r0, #16]
 800ff74:	8242      	strh	r2, [r0, #18]
 800ff76:	61c2      	str	r2, [r0, #28]
 800ff78:	8402      	strh	r2, [r0, #32]
 800ff7a:	8442      	strh	r2, [r0, #34]	@ 0x22
 800ff7c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 800ff80:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 800ff84:	6282      	str	r2, [r0, #40]	@ 0x28
 800ff86:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800ff8a:	4770      	bx	lr
 800ff8c:	08024270 	.word	0x08024270

0800ff90 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800ff90:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800ff94:	4770      	bx	lr

0800ff96 <_ZN8touchgfx12ToggleButtonD1Ev>:
 800ff96:	4770      	bx	lr

0800ff98 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 800ff98:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800ff9c:	b133      	cbz	r3, 800ffac <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 800ff9e:	790b      	ldrb	r3, [r1, #4]
 800ffa0:	2b01      	cmp	r3, #1
 800ffa2:	bf01      	itttt	eq
 800ffa4:	8dc3      	ldrheq	r3, [r0, #46]	@ 0x2e
 800ffa6:	8e02      	ldrheq	r2, [r0, #48]	@ 0x30
 800ffa8:	8603      	strheq	r3, [r0, #48]	@ 0x30
 800ffaa:	85c2      	strheq	r2, [r0, #46]	@ 0x2e
 800ffac:	f010 b860 	b.w	8020070 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0800ffb0 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 800ffb0:	8813      	ldrh	r3, [r2, #0]
 800ffb2:	8683      	strh	r3, [r0, #52]	@ 0x34
 800ffb4:	f000 b860 	b.w	8010078 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

0800ffb8 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800ffb8:	b510      	push	{r4, lr}
 800ffba:	4604      	mov	r4, r0
 800ffbc:	2138      	movs	r1, #56	@ 0x38
 800ffbe:	f010 f87b 	bl	80200b8 <_ZdlPvj>
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	bd10      	pop	{r4, pc}

0800ffc6 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800ffc6:	b510      	push	{r4, lr}
 800ffc8:	4604      	mov	r4, r0
 800ffca:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800ffcc:	b150      	cbz	r0, 800ffe4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800ffce:	6803      	ldr	r3, [r0, #0]
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	4798      	blx	r3
 800ffd4:	b130      	cbz	r0, 800ffe4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800ffd6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800ffd8:	4621      	mov	r1, r4
 800ffda:	6803      	ldr	r3, [r0, #0]
 800ffdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffe0:	689b      	ldr	r3, [r3, #8]
 800ffe2:	4718      	bx	r3
 800ffe4:	bd10      	pop	{r4, pc}

0800ffe6 <_ZNK8touchgfx6Button17invalidateContentEv>:
 800ffe6:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 800ffea:	b12a      	cbz	r2, 800fff8 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800ffec:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800fff0:	b112      	cbz	r2, 800fff8 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800fff2:	6803      	ldr	r3, [r0, #0]
 800fff4:	695b      	ldr	r3, [r3, #20]
 800fff6:	4718      	bx	r3
 800fff8:	4770      	bx	lr

0800fffa <_ZNK8touchgfx3Box12getSolidRectEv>:
 800fffa:	2300      	movs	r3, #0
 800fffc:	8083      	strh	r3, [r0, #4]
 800fffe:	80c3      	strh	r3, [r0, #6]
 8010000:	8003      	strh	r3, [r0, #0]
 8010002:	8043      	strh	r3, [r0, #2]
 8010004:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8010008:	2bff      	cmp	r3, #255	@ 0xff
 801000a:	bf01      	itttt	eq
 801000c:	890b      	ldrheq	r3, [r1, #8]
 801000e:	8083      	strheq	r3, [r0, #4]
 8010010:	894b      	ldrheq	r3, [r1, #10]
 8010012:	80c3      	strheq	r3, [r0, #6]
 8010014:	4770      	bx	lr
	...

08010018 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8010018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801001a:	4604      	mov	r4, r0
 801001c:	466b      	mov	r3, sp
 801001e:	6808      	ldr	r0, [r1, #0]
 8010020:	6849      	ldr	r1, [r1, #4]
 8010022:	c303      	stmia	r3!, {r0, r1}
 8010024:	6823      	ldr	r3, [r4, #0]
 8010026:	4669      	mov	r1, sp
 8010028:	4620      	mov	r0, r4
 801002a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801002c:	4798      	blx	r3
 801002e:	4b08      	ldr	r3, [pc, #32]	@ (8010050 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8010036:	b10a      	cbz	r2, 801003c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8010038:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801003a:	b900      	cbnz	r0, 801003e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801003c:	6898      	ldr	r0, [r3, #8]
 801003e:	6803      	ldr	r3, [r0, #0]
 8010040:	4669      	mov	r1, sp
 8010042:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8010044:	6a1d      	ldr	r5, [r3, #32]
 8010046:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801004a:	47a8      	blx	r5
 801004c:	b003      	add	sp, #12
 801004e:	bd30      	pop	{r4, r5, pc}
 8010050:	24025120 	.word	0x24025120

08010054 <_ZN8touchgfx3BoxD1Ev>:
 8010054:	4770      	bx	lr

08010056 <_ZN8touchgfx3BoxD0Ev>:
 8010056:	b510      	push	{r4, lr}
 8010058:	4604      	mov	r4, r0
 801005a:	212c      	movs	r1, #44	@ 0x2c
 801005c:	f010 f82c 	bl	80200b8 <_ZdlPvj>
 8010060:	4620      	mov	r0, r4
 8010062:	bd10      	pop	{r4, pc}

08010064 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8010064:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8010068:	b12a      	cbz	r2, 8010076 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801006a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801006e:	b112      	cbz	r2, 8010076 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8010070:	6803      	ldr	r3, [r0, #0]
 8010072:	695b      	ldr	r3, [r3, #20]
 8010074:	4718      	bx	r3
 8010076:	4770      	bx	lr

08010078 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8010078:	b570      	push	{r4, r5, r6, lr}
 801007a:	880b      	ldrh	r3, [r1, #0]
 801007c:	4605      	mov	r5, r0
 801007e:	4604      	mov	r4, r0
 8010080:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8010082:	8813      	ldrh	r3, [r2, #0]
 8010084:	f825 3f30 	strh.w	r3, [r5, #48]!
 8010088:	4628      	mov	r0, r5
 801008a:	f005 fa33 	bl	80154f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801008e:	4606      	mov	r6, r0
 8010090:	4628      	mov	r0, r5
 8010092:	f005 fa63 	bl	801555c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010096:	6823      	ldr	r3, [r4, #0]
 8010098:	4605      	mov	r5, r0
 801009a:	4631      	mov	r1, r6
 801009c:	4620      	mov	r0, r4
 801009e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100a0:	4798      	blx	r3
 80100a2:	6823      	ldr	r3, [r4, #0]
 80100a4:	4629      	mov	r1, r5
 80100a6:	4620      	mov	r0, r4
 80100a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80100ae:	4718      	bx	r3

080100b0 <_ZNK8touchgfx6Button12getSolidRectEv>:
 80100b0:	b510      	push	{r4, lr}
 80100b2:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 80100b6:	4604      	mov	r4, r0
 80100b8:	2bff      	cmp	r3, #255	@ 0xff
 80100ba:	d006      	beq.n	80100ca <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80100bc:	2300      	movs	r3, #0
 80100be:	8003      	strh	r3, [r0, #0]
 80100c0:	8043      	strh	r3, [r0, #2]
 80100c2:	8083      	strh	r3, [r0, #4]
 80100c4:	80c3      	strh	r3, [r0, #6]
 80100c6:	4620      	mov	r0, r4
 80100c8:	bd10      	pop	{r4, pc}
 80100ca:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 80100ce:	b11b      	cbz	r3, 80100d8 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80100d0:	3130      	adds	r1, #48	@ 0x30
 80100d2:	f005 fa77 	bl	80155c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80100d6:	e7f6      	b.n	80100c6 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80100d8:	312e      	adds	r1, #46	@ 0x2e
 80100da:	e7fa      	b.n	80100d2 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

080100dc <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80100dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80100e4:	b08a      	sub	sp, #40	@ 0x28
 80100e6:	4604      	mov	r4, r0
 80100e8:	4688      	mov	r8, r1
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d066      	beq.n	80101bc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80100ee:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80100f0:	a805      	add	r0, sp, #20
 80100f2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80100f6:	f005 f9fd 	bl	80154f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80100fa:	4607      	mov	r7, r0
 80100fc:	a805      	add	r0, sp, #20
 80100fe:	f005 fa2d 	bl	801555c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010102:	f9b8 6000 	ldrsh.w	r6, [r8]
 8010106:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801010a:	2300      	movs	r3, #0
 801010c:	4432      	add	r2, r6
 801010e:	9306      	str	r3, [sp, #24]
 8010110:	b292      	uxth	r2, r2
 8010112:	fa0f fc82 	sxth.w	ip, r2
 8010116:	459c      	cmp	ip, r3
 8010118:	dd52      	ble.n	80101c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801011a:	42b7      	cmp	r7, r6
 801011c:	dd50      	ble.n	80101c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801011e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8010122:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8010126:	442b      	add	r3, r5
 8010128:	b29b      	uxth	r3, r3
 801012a:	b219      	sxth	r1, r3
 801012c:	2900      	cmp	r1, #0
 801012e:	dd47      	ble.n	80101c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8010130:	42a8      	cmp	r0, r5
 8010132:	dd45      	ble.n	80101c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8010134:	4567      	cmp	r7, ip
 8010136:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801013a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801013e:	bfb8      	it	lt
 8010140:	b2ba      	uxthlt	r2, r7
 8010142:	4288      	cmp	r0, r1
 8010144:	f8ad 6018 	strh.w	r6, [sp, #24]
 8010148:	bfb8      	it	lt
 801014a:	b283      	uxthlt	r3, r0
 801014c:	1b92      	subs	r2, r2, r6
 801014e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8010152:	1b5b      	subs	r3, r3, r5
 8010154:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010158:	f8ad 301e 	strh.w	r3, [sp, #30]
 801015c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010160:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010164:	429a      	cmp	r2, r3
 8010166:	d026      	beq.n	80101b6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8010168:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801016c:	2b00      	cmp	r3, #0
 801016e:	dd22      	ble.n	80101b6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8010170:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8010174:	2b00      	cmp	r3, #0
 8010176:	dd1e      	ble.n	80101b6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8010178:	2300      	movs	r3, #0
 801017a:	a908      	add	r1, sp, #32
 801017c:	4620      	mov	r0, r4
 801017e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8010182:	6823      	ldr	r3, [r4, #0]
 8010184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010186:	4798      	blx	r3
 8010188:	4b0f      	ldr	r3, [pc, #60]	@ (80101c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8010190:	b10a      	cbz	r2, 8010196 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8010192:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8010194:	b900      	cbnz	r0, 8010198 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8010196:	6898      	ldr	r0, [r3, #8]
 8010198:	2501      	movs	r5, #1
 801019a:	6801      	ldr	r1, [r0, #0]
 801019c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80101a0:	9502      	str	r5, [sp, #8]
 80101a2:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 80101a6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80101aa:	9401      	str	r4, [sp, #4]
 80101ac:	ac06      	add	r4, sp, #24
 80101ae:	9400      	str	r4, [sp, #0]
 80101b0:	688c      	ldr	r4, [r1, #8]
 80101b2:	a905      	add	r1, sp, #20
 80101b4:	47a0      	blx	r4
 80101b6:	b00a      	add	sp, #40	@ 0x28
 80101b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101bc:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80101be:	e797      	b.n	80100f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80101c0:	2300      	movs	r3, #0
 80101c2:	9307      	str	r3, [sp, #28]
 80101c4:	e7ca      	b.n	801015c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 80101c6:	bf00      	nop
 80101c8:	24025120 	.word	0x24025120

080101cc <_ZN8touchgfx5ImageD1Ev>:
 80101cc:	4770      	bx	lr

080101ce <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80101ce:	b570      	push	{r4, r5, r6, lr}
 80101d0:	880b      	ldrh	r3, [r1, #0]
 80101d2:	460d      	mov	r5, r1
 80101d4:	4604      	mov	r4, r0
 80101d6:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80101d8:	4608      	mov	r0, r1
 80101da:	f005 f98b 	bl	80154f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80101de:	4606      	mov	r6, r0
 80101e0:	4628      	mov	r0, r5
 80101e2:	f005 f9bb 	bl	801555c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80101e6:	6823      	ldr	r3, [r4, #0]
 80101e8:	4605      	mov	r5, r0
 80101ea:	4631      	mov	r1, r6
 80101ec:	4620      	mov	r0, r4
 80101ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101f0:	4798      	blx	r3
 80101f2:	6823      	ldr	r3, [r4, #0]
 80101f4:	4629      	mov	r1, r5
 80101f6:	4620      	mov	r0, r4
 80101f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80101fe:	4718      	bx	r3

08010200 <_ZN8touchgfx5ImageD0Ev>:
 8010200:	b510      	push	{r4, lr}
 8010202:	4604      	mov	r4, r0
 8010204:	212c      	movs	r1, #44	@ 0x2c
 8010206:	f00f ff57 	bl	80200b8 <_ZdlPvj>
 801020a:	4620      	mov	r0, r4
 801020c:	bd10      	pop	{r4, pc}

0801020e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801020e:	b510      	push	{r4, lr}
 8010210:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8010214:	4604      	mov	r4, r0
 8010216:	2bff      	cmp	r3, #255	@ 0xff
 8010218:	d006      	beq.n	8010228 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801021a:	2300      	movs	r3, #0
 801021c:	8003      	strh	r3, [r0, #0]
 801021e:	8043      	strh	r3, [r0, #2]
 8010220:	8083      	strh	r3, [r0, #4]
 8010222:	80c3      	strh	r3, [r0, #6]
 8010224:	4620      	mov	r0, r4
 8010226:	bd10      	pop	{r4, pc}
 8010228:	3126      	adds	r1, #38	@ 0x26
 801022a:	f005 f9cb 	bl	80155c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801022e:	e7f9      	b.n	8010224 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08010230 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8010230:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8010234:	b12a      	cbz	r2, 8010242 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8010236:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801023a:	b112      	cbz	r2, 8010242 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801023c:	6803      	ldr	r3, [r0, #0]
 801023e:	695b      	ldr	r3, [r3, #20]
 8010240:	4718      	bx	r3
 8010242:	4770      	bx	lr

08010244 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8010244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010248:	4604      	mov	r4, r0
 801024a:	b088      	sub	sp, #32
 801024c:	2500      	movs	r5, #0
 801024e:	460f      	mov	r7, r1
 8010250:	f854 3b26 	ldr.w	r3, [r4], #38
 8010254:	a904      	add	r1, sp, #16
 8010256:	4606      	mov	r6, r0
 8010258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801025a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801025e:	4798      	blx	r3
 8010260:	4620      	mov	r0, r4
 8010262:	f005 f947 	bl	80154f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010266:	4680      	mov	r8, r0
 8010268:	4620      	mov	r0, r4
 801026a:	f005 f977 	bl	801555c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801026e:	9506      	str	r5, [sp, #24]
 8010270:	ad06      	add	r5, sp, #24
 8010272:	f8ad 001e 	strh.w	r0, [sp, #30]
 8010276:	4639      	mov	r1, r7
 8010278:	f8ad 801c 	strh.w	r8, [sp, #28]
 801027c:	4628      	mov	r0, r5
 801027e:	f7fd f9ed 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 8010282:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8010286:	2b00      	cmp	r3, #0
 8010288:	dd19      	ble.n	80102be <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801028a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801028e:	2b00      	cmp	r3, #0
 8010290:	dd15      	ble.n	80102be <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8010292:	4b0c      	ldr	r3, [pc, #48]	@ (80102c4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801029a:	b10a      	cbz	r2, 80102a0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801029c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801029e:	b900      	cbnz	r0, 80102a2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80102a0:	6898      	ldr	r0, [r3, #8]
 80102a2:	2701      	movs	r7, #1
 80102a4:	6801      	ldr	r1, [r0, #0]
 80102a6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80102aa:	9702      	str	r7, [sp, #8]
 80102ac:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 80102b0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80102b4:	e9cd 5600 	strd	r5, r6, [sp]
 80102b8:	688d      	ldr	r5, [r1, #8]
 80102ba:	4621      	mov	r1, r4
 80102bc:	47a8      	blx	r5
 80102be:	b008      	add	sp, #32
 80102c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102c4:	24025120 	.word	0x24025120

080102c8 <_ZN8touchgfx7OutlineD1Ev>:
 80102c8:	4770      	bx	lr

080102ca <_ZN8touchgfx7OutlineD0Ev>:
 80102ca:	b510      	push	{r4, lr}
 80102cc:	4604      	mov	r4, r0
 80102ce:	2130      	movs	r1, #48	@ 0x30
 80102d0:	f00f fef2 	bl	80200b8 <_ZdlPvj>
 80102d4:	4620      	mov	r0, r4
 80102d6:	bd10      	pop	{r4, pc}

080102d8 <_ZN8touchgfx7Outline5resetEv>:
 80102d8:	b510      	push	{r4, lr}
 80102da:	4604      	mov	r4, r0
 80102dc:	f000 fe72 	bl	8010fc4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80102e0:	60e0      	str	r0, [r4, #12]
 80102e2:	f000 fe75 	bl	8010fd0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80102e6:	68e3      	ldr	r3, [r4, #12]
 80102e8:	08c0      	lsrs	r0, r0, #3
 80102ea:	2200      	movs	r2, #0
 80102ec:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80102f0:	6123      	str	r3, [r4, #16]
 80102f2:	3801      	subs	r0, #1
 80102f4:	60a2      	str	r2, [r4, #8]
 80102f6:	6060      	str	r0, [r4, #4]
 80102f8:	8019      	strh	r1, [r3, #0]
 80102fa:	8059      	strh	r1, [r3, #2]
 80102fc:	809a      	strh	r2, [r3, #4]
 80102fe:	80da      	strh	r2, [r3, #6]
 8010300:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010302:	f023 0301 	bic.w	r3, r3, #1
 8010306:	f043 0302 	orr.w	r3, r3, #2
 801030a:	6263      	str	r3, [r4, #36]	@ 0x24
 801030c:	bd10      	pop	{r4, pc}
	...

08010310 <_ZN8touchgfx7OutlineC1Ev>:
 8010310:	4b0a      	ldr	r3, [pc, #40]	@ (801033c <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8010312:	b510      	push	{r4, lr}
 8010314:	6003      	str	r3, [r0, #0]
 8010316:	2300      	movs	r3, #0
 8010318:	4604      	mov	r4, r0
 801031a:	6243      	str	r3, [r0, #36]	@ 0x24
 801031c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8010320:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010324:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8010328:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801032c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010330:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8010334:	f7ff ffd0 	bl	80102d8 <_ZN8touchgfx7Outline5resetEv>
 8010338:	4620      	mov	r0, r4
 801033a:	bd10      	pop	{r4, pc}
 801033c:	08024430 	.word	0x08024430

08010340 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8010340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010344:	b093      	sub	sp, #76	@ 0x4c
 8010346:	1156      	asrs	r6, r2, #5
 8010348:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801034a:	9305      	str	r3, [sp, #20]
 801034c:	1153      	asrs	r3, r2, #5
 801034e:	f004 051f 	and.w	r5, r4, #31
 8010352:	9303      	str	r3, [sp, #12]
 8010354:	1163      	asrs	r3, r4, #5
 8010356:	9504      	str	r5, [sp, #16]
 8010358:	1165      	asrs	r5, r4, #5
 801035a:	9306      	str	r3, [sp, #24]
 801035c:	f002 031f 	and.w	r3, r2, #31
 8010360:	42ae      	cmp	r6, r5
 8010362:	f040 80f4 	bne.w	801054e <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8010366:	9c04      	ldr	r4, [sp, #16]
 8010368:	9a05      	ldr	r2, [sp, #20]
 801036a:	42a3      	cmp	r3, r4
 801036c:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8010370:	6902      	ldr	r2, [r0, #16]
 8010372:	d125      	bne.n	80103c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8010374:	f9b2 3000 	ldrsh.w	r3, [r2]
 8010378:	459e      	cmp	lr, r3
 801037a:	d103      	bne.n	8010384 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 801037c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8010380:	429e      	cmp	r6, r3
 8010382:	d035      	beq.n	80103f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010384:	88d1      	ldrh	r1, [r2, #6]
 8010386:	8893      	ldrh	r3, [r2, #4]
 8010388:	430b      	orrs	r3, r1
 801038a:	d010      	beq.n	80103ae <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801038c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8010390:	2b00      	cmp	r3, #0
 8010392:	db0c      	blt.n	80103ae <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8010394:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010396:	428b      	cmp	r3, r1
 8010398:	da09      	bge.n	80103ae <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801039a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801039e:	428b      	cmp	r3, r1
 80103a0:	f103 0301 	add.w	r3, r3, #1
 80103a4:	bf38      	it	cc
 80103a6:	3208      	addcc	r2, #8
 80103a8:	6083      	str	r3, [r0, #8]
 80103aa:	bf38      	it	cc
 80103ac:	6102      	strcc	r2, [r0, #16]
 80103ae:	6903      	ldr	r3, [r0, #16]
 80103b0:	9a03      	ldr	r2, [sp, #12]
 80103b2:	f8a3 e000 	strh.w	lr, [r3]
 80103b6:	805a      	strh	r2, [r3, #2]
 80103b8:	2200      	movs	r2, #0
 80103ba:	809a      	strh	r2, [r3, #4]
 80103bc:	80da      	strh	r2, [r3, #6]
 80103be:	e017      	b.n	80103f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80103c0:	9c05      	ldr	r4, [sp, #20]
 80103c2:	114e      	asrs	r6, r1, #5
 80103c4:	f001 0c1f 	and.w	ip, r1, #31
 80103c8:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80103cc:	f004 041f 	and.w	r4, r4, #31
 80103d0:	4576      	cmp	r6, lr
 80103d2:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80103d6:	9402      	str	r4, [sp, #8]
 80103d8:	9c04      	ldr	r4, [sp, #16]
 80103da:	eba4 0403 	sub.w	r4, r4, r3
 80103de:	d10a      	bne.n	80103f6 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 80103e0:	9b02      	ldr	r3, [sp, #8]
 80103e2:	44a0      	add	r8, r4
 80103e4:	449c      	add	ip, r3
 80103e6:	f8a2 8004 	strh.w	r8, [r2, #4]
 80103ea:	fb04 a40c 	mla	r4, r4, ip, sl
 80103ee:	80d4      	strh	r4, [r2, #6]
 80103f0:	b013      	add	sp, #76	@ 0x4c
 80103f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f6:	9d05      	ldr	r5, [sp, #20]
 80103f8:	1a69      	subs	r1, r5, r1
 80103fa:	bf51      	iteee	pl
 80103fc:	f1cc 0520 	rsbpl	r5, ip, #32
 8010400:	fb04 f40c 	mulmi.w	r4, r4, ip
 8010404:	4249      	negmi	r1, r1
 8010406:	2500      	movmi	r5, #0
 8010408:	bf5d      	ittte	pl
 801040a:	436c      	mulpl	r4, r5
 801040c:	2520      	movpl	r5, #32
 801040e:	f04f 0901 	movpl.w	r9, #1
 8010412:	f04f 39ff 	movmi.w	r9, #4294967295
 8010416:	9501      	str	r5, [sp, #4]
 8010418:	9f01      	ldr	r7, [sp, #4]
 801041a:	444e      	add	r6, r9
 801041c:	fb94 f5f1 	sdiv	r5, r4, r1
 8010420:	fb01 4415 	mls	r4, r1, r5, r4
 8010424:	44bc      	add	ip, r7
 8010426:	2c00      	cmp	r4, #0
 8010428:	bfbc      	itt	lt
 801042a:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801042e:	1864      	addlt	r4, r4, r1
 8010430:	44a8      	add	r8, r5
 8010432:	fb05 ac0c 	mla	ip, r5, ip, sl
 8010436:	f8a2 8004 	strh.w	r8, [r2, #4]
 801043a:	f8a2 c006 	strh.w	ip, [r2, #6]
 801043e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010442:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8010446:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801044a:	ea58 0202 	orrs.w	r2, r8, r2
 801044e:	d011      	beq.n	8010474 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8010450:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8010454:	f1b8 0f00 	cmp.w	r8, #0
 8010458:	db0c      	blt.n	8010474 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801045a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801045c:	4590      	cmp	r8, r2
 801045e:	da09      	bge.n	8010474 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8010460:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8010464:	4590      	cmp	r8, r2
 8010466:	bf3c      	itt	cc
 8010468:	f10c 0208 	addcc.w	r2, ip, #8
 801046c:	6102      	strcc	r2, [r0, #16]
 801046e:	f108 0201 	add.w	r2, r8, #1
 8010472:	6082      	str	r2, [r0, #8]
 8010474:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010478:	2700      	movs	r7, #0
 801047a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801047e:	45b6      	cmp	lr, r6
 8010480:	f8ac 6000 	strh.w	r6, [ip]
 8010484:	442b      	add	r3, r5
 8010486:	f8ac 2002 	strh.w	r2, [ip, #2]
 801048a:	f8ac 7004 	strh.w	r7, [ip, #4]
 801048e:	f8ac 7006 	strh.w	r7, [ip, #6]
 8010492:	d04b      	beq.n	801052c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8010494:	9f04      	ldr	r7, [sp, #16]
 8010496:	1a64      	subs	r4, r4, r1
 8010498:	f04f 0a00 	mov.w	sl, #0
 801049c:	1aff      	subs	r7, r7, r3
 801049e:	443d      	add	r5, r7
 80104a0:	016d      	lsls	r5, r5, #5
 80104a2:	fb95 f8f1 	sdiv	r8, r5, r1
 80104a6:	fb01 5518 	mls	r5, r1, r8, r5
 80104aa:	2d00      	cmp	r5, #0
 80104ac:	bfbc      	itt	lt
 80104ae:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80104b2:	186d      	addlt	r5, r5, r1
 80104b4:	f108 0701 	add.w	r7, r8, #1
 80104b8:	9703      	str	r7, [sp, #12]
 80104ba:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80104be:	1964      	adds	r4, r4, r5
 80104c0:	444e      	add	r6, r9
 80104c2:	bf54      	ite	pl
 80104c4:	9f03      	ldrpl	r7, [sp, #12]
 80104c6:	4647      	movmi	r7, r8
 80104c8:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80104cc:	bf58      	it	pl
 80104ce:	1a64      	subpl	r4, r4, r1
 80104d0:	443b      	add	r3, r7
 80104d2:	44bb      	add	fp, r7
 80104d4:	f8ac b004 	strh.w	fp, [ip, #4]
 80104d8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80104dc:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80104e0:	f8ac b006 	strh.w	fp, [ip, #6]
 80104e4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80104e8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80104ec:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80104f0:	ea5b 0707 	orrs.w	r7, fp, r7
 80104f4:	d011      	beq.n	801051a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80104f6:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80104fa:	f1bb 0f00 	cmp.w	fp, #0
 80104fe:	db0c      	blt.n	801051a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8010500:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010502:	45bb      	cmp	fp, r7
 8010504:	da09      	bge.n	801051a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8010506:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801050a:	45bb      	cmp	fp, r7
 801050c:	bf3c      	itt	cc
 801050e:	f10c 0708 	addcc.w	r7, ip, #8
 8010512:	6107      	strcc	r7, [r0, #16]
 8010514:	f10b 0701 	add.w	r7, fp, #1
 8010518:	6087      	str	r7, [r0, #8]
 801051a:	6907      	ldr	r7, [r0, #16]
 801051c:	45b6      	cmp	lr, r6
 801051e:	803e      	strh	r6, [r7, #0]
 8010520:	807a      	strh	r2, [r7, #2]
 8010522:	f8a7 a004 	strh.w	sl, [r7, #4]
 8010526:	f8a7 a006 	strh.w	sl, [r7, #6]
 801052a:	d1c6      	bne.n	80104ba <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 801052c:	9a04      	ldr	r2, [sp, #16]
 801052e:	1ad3      	subs	r3, r2, r3
 8010530:	6902      	ldr	r2, [r0, #16]
 8010532:	8891      	ldrh	r1, [r2, #4]
 8010534:	88d6      	ldrh	r6, [r2, #6]
 8010536:	4419      	add	r1, r3
 8010538:	8091      	strh	r1, [r2, #4]
 801053a:	9902      	ldr	r1, [sp, #8]
 801053c:	f101 0c20 	add.w	ip, r1, #32
 8010540:	9901      	ldr	r1, [sp, #4]
 8010542:	ebac 0c01 	sub.w	ip, ip, r1
 8010546:	fb03 630c 	mla	r3, r3, ip, r6
 801054a:	80d3      	strh	r3, [r2, #6]
 801054c:	e750      	b.n	80103f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801054e:	9d05      	ldr	r5, [sp, #20]
 8010550:	1aa2      	subs	r2, r4, r2
 8010552:	eba5 0501 	sub.w	r5, r5, r1
 8010556:	9202      	str	r2, [sp, #8]
 8010558:	9508      	str	r5, [sp, #32]
 801055a:	f140 8128 	bpl.w	80107ae <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 801055e:	9a03      	ldr	r2, [sp, #12]
 8010560:	2a00      	cmp	r2, #0
 8010562:	f6ff af45 	blt.w	80103f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010566:	9a02      	ldr	r2, [sp, #8]
 8010568:	f04f 34ff 	mov.w	r4, #4294967295
 801056c:	4252      	negs	r2, r2
 801056e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010570:	2400      	movs	r4, #0
 8010572:	9202      	str	r2, [sp, #8]
 8010574:	9a06      	ldr	r2, [sp, #24]
 8010576:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801057a:	9206      	str	r2, [sp, #24]
 801057c:	462a      	mov	r2, r5
 801057e:	435a      	muls	r2, r3
 8010580:	9401      	str	r4, [sp, #4]
 8010582:	9c02      	ldr	r4, [sp, #8]
 8010584:	9d02      	ldr	r5, [sp, #8]
 8010586:	fb92 f4f4 	sdiv	r4, r2, r4
 801058a:	fb05 2214 	mls	r2, r5, r4, r2
 801058e:	2a00      	cmp	r2, #0
 8010590:	9207      	str	r2, [sp, #28]
 8010592:	bfbc      	itt	lt
 8010594:	1952      	addlt	r2, r2, r5
 8010596:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801059a:	6905      	ldr	r5, [r0, #16]
 801059c:	bfb8      	it	lt
 801059e:	9207      	strlt	r2, [sp, #28]
 80105a0:	eb04 0901 	add.w	r9, r4, r1
 80105a4:	9a01      	ldr	r2, [sp, #4]
 80105a6:	ea4f 1669 	mov.w	r6, r9, asr #5
 80105aa:	429a      	cmp	r2, r3
 80105ac:	f040 8111 	bne.w	80107d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 80105b0:	f9b5 3000 	ldrsh.w	r3, [r5]
 80105b4:	429e      	cmp	r6, r3
 80105b6:	d104      	bne.n	80105c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 80105b8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80105bc:	9a03      	ldr	r2, [sp, #12]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d01b      	beq.n	80105fa <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80105c2:	88ea      	ldrh	r2, [r5, #6]
 80105c4:	88ab      	ldrh	r3, [r5, #4]
 80105c6:	4313      	orrs	r3, r2
 80105c8:	d010      	beq.n	80105ec <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80105ca:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80105ce:	2a00      	cmp	r2, #0
 80105d0:	db0c      	blt.n	80105ec <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80105d2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80105d4:	429a      	cmp	r2, r3
 80105d6:	da09      	bge.n	80105ec <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80105d8:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80105dc:	429a      	cmp	r2, r3
 80105de:	f102 0201 	add.w	r2, r2, #1
 80105e2:	bf38      	it	cc
 80105e4:	3508      	addcc	r5, #8
 80105e6:	6082      	str	r2, [r0, #8]
 80105e8:	bf38      	it	cc
 80105ea:	6105      	strcc	r5, [r0, #16]
 80105ec:	6903      	ldr	r3, [r0, #16]
 80105ee:	9a03      	ldr	r2, [sp, #12]
 80105f0:	801e      	strh	r6, [r3, #0]
 80105f2:	805a      	strh	r2, [r3, #2]
 80105f4:	2200      	movs	r2, #0
 80105f6:	809a      	strh	r2, [r3, #4]
 80105f8:	80da      	strh	r2, [r3, #6]
 80105fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80105fc:	9a03      	ldr	r2, [sp, #12]
 80105fe:	6901      	ldr	r1, [r0, #16]
 8010600:	441a      	add	r2, r3
 8010602:	f9b1 3000 	ldrsh.w	r3, [r1]
 8010606:	42b3      	cmp	r3, r6
 8010608:	d103      	bne.n	8010612 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 801060a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801060e:	429a      	cmp	r2, r3
 8010610:	d01a      	beq.n	8010648 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8010612:	88cc      	ldrh	r4, [r1, #6]
 8010614:	888b      	ldrh	r3, [r1, #4]
 8010616:	4323      	orrs	r3, r4
 8010618:	d010      	beq.n	801063c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801061a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801061e:	2c00      	cmp	r4, #0
 8010620:	db0c      	blt.n	801063c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8010622:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010624:	429c      	cmp	r4, r3
 8010626:	da09      	bge.n	801063c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8010628:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801062c:	429c      	cmp	r4, r3
 801062e:	f104 0401 	add.w	r4, r4, #1
 8010632:	bf38      	it	cc
 8010634:	3108      	addcc	r1, #8
 8010636:	6084      	str	r4, [r0, #8]
 8010638:	bf38      	it	cc
 801063a:	6101      	strcc	r1, [r0, #16]
 801063c:	6903      	ldr	r3, [r0, #16]
 801063e:	2100      	movs	r1, #0
 8010640:	801e      	strh	r6, [r3, #0]
 8010642:	805a      	strh	r2, [r3, #2]
 8010644:	8099      	strh	r1, [r3, #4]
 8010646:	80d9      	strh	r1, [r3, #6]
 8010648:	9b06      	ldr	r3, [sp, #24]
 801064a:	4293      	cmp	r3, r2
 801064c:	f000 8082 	beq.w	8010754 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8010650:	9b08      	ldr	r3, [sp, #32]
 8010652:	9902      	ldr	r1, [sp, #8]
 8010654:	015b      	lsls	r3, r3, #5
 8010656:	9c02      	ldr	r4, [sp, #8]
 8010658:	fb93 f1f1 	sdiv	r1, r3, r1
 801065c:	fb04 3311 	mls	r3, r4, r1, r3
 8010660:	9103      	str	r1, [sp, #12]
 8010662:	2b00      	cmp	r3, #0
 8010664:	9308      	str	r3, [sp, #32]
 8010666:	da04      	bge.n	8010672 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8010668:	1e4b      	subs	r3, r1, #1
 801066a:	9303      	str	r3, [sp, #12]
 801066c:	9b08      	ldr	r3, [sp, #32]
 801066e:	4423      	add	r3, r4
 8010670:	9308      	str	r3, [sp, #32]
 8010672:	9b07      	ldr	r3, [sp, #28]
 8010674:	464f      	mov	r7, r9
 8010676:	9902      	ldr	r1, [sp, #8]
 8010678:	2600      	movs	r6, #0
 801067a:	1a5b      	subs	r3, r3, r1
 801067c:	9307      	str	r3, [sp, #28]
 801067e:	9b01      	ldr	r3, [sp, #4]
 8010680:	f1c3 0320 	rsb	r3, r3, #32
 8010684:	930e      	str	r3, [sp, #56]	@ 0x38
 8010686:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010688:	9b01      	ldr	r3, [sp, #4]
 801068a:	1a5b      	subs	r3, r3, r1
 801068c:	930a      	str	r3, [sp, #40]	@ 0x28
 801068e:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8010692:	185b      	adds	r3, r3, r1
 8010694:	bf58      	it	pl
 8010696:	9902      	ldrpl	r1, [sp, #8]
 8010698:	9307      	str	r3, [sp, #28]
 801069a:	bf57      	itett	pl
 801069c:	1a5b      	subpl	r3, r3, r1
 801069e:	9903      	ldrmi	r1, [sp, #12]
 80106a0:	9307      	strpl	r3, [sp, #28]
 80106a2:	9b03      	ldrpl	r3, [sp, #12]
 80106a4:	bf58      	it	pl
 80106a6:	1c59      	addpl	r1, r3, #1
 80106a8:	2a00      	cmp	r2, #0
 80106aa:	4489      	add	r9, r1
 80106ac:	ea4f 1a69 	mov.w	sl, r9, asr #5
 80106b0:	db2e      	blt.n	8010710 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80106b2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80106b4:	4293      	cmp	r3, r2
 80106b6:	dd2b      	ble.n	8010710 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80106b8:	9c01      	ldr	r4, [sp, #4]
 80106ba:	6905      	ldr	r5, [r0, #16]
 80106bc:	46a0      	mov	r8, r4
 80106be:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80106c0:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 80106c4:	45a0      	cmp	r8, r4
 80106c6:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 80106ca:	f040 814c 	bne.w	8010966 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 80106ce:	f9b5 1000 	ldrsh.w	r1, [r5]
 80106d2:	4551      	cmp	r1, sl
 80106d4:	d103      	bne.n	80106de <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 80106d6:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80106da:	4291      	cmp	r1, r2
 80106dc:	d018      	beq.n	8010710 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80106de:	ea5c 010e 	orrs.w	r1, ip, lr
 80106e2:	d00f      	beq.n	8010704 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80106e4:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80106e8:	2900      	cmp	r1, #0
 80106ea:	db0b      	blt.n	8010704 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80106ec:	428b      	cmp	r3, r1
 80106ee:	dd09      	ble.n	8010704 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80106f0:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80106f4:	4299      	cmp	r1, r3
 80106f6:	f101 0101 	add.w	r1, r1, #1
 80106fa:	bf38      	it	cc
 80106fc:	3508      	addcc	r5, #8
 80106fe:	6081      	str	r1, [r0, #8]
 8010700:	bf38      	it	cc
 8010702:	6105      	strcc	r5, [r0, #16]
 8010704:	6903      	ldr	r3, [r0, #16]
 8010706:	f8a3 a000 	strh.w	sl, [r3]
 801070a:	805a      	strh	r2, [r3, #2]
 801070c:	809e      	strh	r6, [r3, #4]
 801070e:	80de      	strh	r6, [r3, #6]
 8010710:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010712:	6901      	ldr	r1, [r0, #16]
 8010714:	441a      	add	r2, r3
 8010716:	88cc      	ldrh	r4, [r1, #6]
 8010718:	888b      	ldrh	r3, [r1, #4]
 801071a:	4323      	orrs	r3, r4
 801071c:	d010      	beq.n	8010740 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801071e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8010722:	2c00      	cmp	r4, #0
 8010724:	db0c      	blt.n	8010740 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8010726:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010728:	429c      	cmp	r4, r3
 801072a:	da09      	bge.n	8010740 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801072c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8010730:	429c      	cmp	r4, r3
 8010732:	f104 0401 	add.w	r4, r4, #1
 8010736:	bf38      	it	cc
 8010738:	3108      	addcc	r1, #8
 801073a:	6084      	str	r4, [r0, #8]
 801073c:	bf38      	it	cc
 801073e:	6101      	strcc	r1, [r0, #16]
 8010740:	6903      	ldr	r3, [r0, #16]
 8010742:	464f      	mov	r7, r9
 8010744:	f8a3 a000 	strh.w	sl, [r3]
 8010748:	805a      	strh	r2, [r3, #2]
 801074a:	809e      	strh	r6, [r3, #4]
 801074c:	80de      	strh	r6, [r3, #6]
 801074e:	9b06      	ldr	r3, [sp, #24]
 8010750:	4293      	cmp	r3, r2
 8010752:	d19c      	bne.n	801068e <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8010754:	9b01      	ldr	r3, [sp, #4]
 8010756:	6907      	ldr	r7, [r0, #16]
 8010758:	f1c3 0620 	rsb	r6, r3, #32
 801075c:	9b05      	ldr	r3, [sp, #20]
 801075e:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8010762:	9b04      	ldr	r3, [sp, #16]
 8010764:	429e      	cmp	r6, r3
 8010766:	f040 81c7 	bne.w	8010af8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801076a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801076e:	459e      	cmp	lr, r3
 8010770:	d104      	bne.n	801077c <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8010772:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010776:	429a      	cmp	r2, r3
 8010778:	f43f ae3a 	beq.w	80103f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801077c:	88f9      	ldrh	r1, [r7, #6]
 801077e:	88bb      	ldrh	r3, [r7, #4]
 8010780:	430b      	orrs	r3, r1
 8010782:	d010      	beq.n	80107a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8010784:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010788:	2b00      	cmp	r3, #0
 801078a:	db0c      	blt.n	80107a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801078c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801078e:	428b      	cmp	r3, r1
 8010790:	da09      	bge.n	80107a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8010792:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8010796:	428b      	cmp	r3, r1
 8010798:	f103 0301 	add.w	r3, r3, #1
 801079c:	bf38      	it	cc
 801079e:	3708      	addcc	r7, #8
 80107a0:	6083      	str	r3, [r0, #8]
 80107a2:	bf38      	it	cc
 80107a4:	6107      	strcc	r7, [r0, #16]
 80107a6:	6903      	ldr	r3, [r0, #16]
 80107a8:	f8a3 e000 	strh.w	lr, [r3]
 80107ac:	e603      	b.n	80103b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 80107ae:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80107b0:	9c03      	ldr	r4, [sp, #12]
 80107b2:	42a2      	cmp	r2, r4
 80107b4:	f6ff ae1c 	blt.w	80103f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80107b8:	9c06      	ldr	r4, [sp, #24]
 80107ba:	42a2      	cmp	r2, r4
 80107bc:	9c08      	ldr	r4, [sp, #32]
 80107be:	bfbc      	itt	lt
 80107c0:	3201      	addlt	r2, #1
 80107c2:	9206      	strlt	r2, [sp, #24]
 80107c4:	f1c3 0220 	rsb	r2, r3, #32
 80107c8:	4362      	muls	r2, r4
 80107ca:	2401      	movs	r4, #1
 80107cc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80107ce:	2420      	movs	r4, #32
 80107d0:	e6d6      	b.n	8010580 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 80107d2:	ea4f 1861 	mov.w	r8, r1, asr #5
 80107d6:	f009 021f 	and.w	r2, r9, #31
 80107da:	f001 011f 	and.w	r1, r1, #31
 80107de:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80107e2:	920c      	str	r2, [sp, #48]	@ 0x30
 80107e4:	45b0      	cmp	r8, r6
 80107e6:	9a01      	ldr	r2, [sp, #4]
 80107e8:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80107ec:	eba2 0203 	sub.w	r2, r2, r3
 80107f0:	d108      	bne.n	8010804 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 80107f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80107f4:	4496      	add	lr, r2
 80107f6:	4419      	add	r1, r3
 80107f8:	f8a5 e004 	strh.w	lr, [r5, #4]
 80107fc:	fb02 a101 	mla	r1, r2, r1, sl
 8010800:	80e9      	strh	r1, [r5, #6]
 8010802:	e6fa      	b.n	80105fa <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8010804:	2c00      	cmp	r4, #0
 8010806:	f2c0 80a7 	blt.w	8010958 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 801080a:	2701      	movs	r7, #1
 801080c:	f1c1 0c20 	rsb	ip, r1, #32
 8010810:	970a      	str	r7, [sp, #40]	@ 0x28
 8010812:	2720      	movs	r7, #32
 8010814:	fb02 f20c 	mul.w	r2, r2, ip
 8010818:	9709      	str	r7, [sp, #36]	@ 0x24
 801081a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801081c:	fb92 fcf4 	sdiv	ip, r2, r4
 8010820:	fb04 221c 	mls	r2, r4, ip, r2
 8010824:	4439      	add	r1, r7
 8010826:	2a00      	cmp	r2, #0
 8010828:	bfbc      	itt	lt
 801082a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801082e:	1912      	addlt	r2, r2, r4
 8010830:	fb0c a101 	mla	r1, ip, r1, sl
 8010834:	44e6      	add	lr, ip
 8010836:	80e9      	strh	r1, [r5, #6]
 8010838:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801083a:	f8a5 e004 	strh.w	lr, [r5, #4]
 801083e:	eb08 0501 	add.w	r5, r8, r1
 8010842:	6901      	ldr	r1, [r0, #16]
 8010844:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8010848:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801084c:	ea58 070e 	orrs.w	r7, r8, lr
 8010850:	d010      	beq.n	8010874 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8010852:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8010856:	f1be 0f00 	cmp.w	lr, #0
 801085a:	db0b      	blt.n	8010874 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801085c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801085e:	45be      	cmp	lr, r7
 8010860:	da08      	bge.n	8010874 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8010862:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8010866:	45be      	cmp	lr, r7
 8010868:	bf3c      	itt	cc
 801086a:	3108      	addcc	r1, #8
 801086c:	6101      	strcc	r1, [r0, #16]
 801086e:	f10e 0101 	add.w	r1, lr, #1
 8010872:	6081      	str	r1, [r0, #8]
 8010874:	6901      	ldr	r1, [r0, #16]
 8010876:	f04f 0e00 	mov.w	lr, #0
 801087a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801087e:	42ae      	cmp	r6, r5
 8010880:	800d      	strh	r5, [r1, #0]
 8010882:	4463      	add	r3, ip
 8010884:	f8a1 8002 	strh.w	r8, [r1, #2]
 8010888:	f8a1 e004 	strh.w	lr, [r1, #4]
 801088c:	f8a1 e006 	strh.w	lr, [r1, #6]
 8010890:	d053      	beq.n	801093a <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8010892:	9901      	ldr	r1, [sp, #4]
 8010894:	1b12      	subs	r2, r2, r4
 8010896:	1ac9      	subs	r1, r1, r3
 8010898:	4461      	add	r1, ip
 801089a:	0149      	lsls	r1, r1, #5
 801089c:	fb91 fef4 	sdiv	lr, r1, r4
 80108a0:	fb04 111e 	mls	r1, r4, lr, r1
 80108a4:	2900      	cmp	r1, #0
 80108a6:	bfbc      	itt	lt
 80108a8:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80108ac:	1909      	addlt	r1, r1, r4
 80108ae:	f10e 0701 	add.w	r7, lr, #1
 80108b2:	970d      	str	r7, [sp, #52]	@ 0x34
 80108b4:	f8d0 a010 	ldr.w	sl, [r0, #16]
 80108b8:	1852      	adds	r2, r2, r1
 80108ba:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80108bc:	bf54      	ite	pl
 80108be:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 80108c2:	46f4      	movmi	ip, lr
 80108c4:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80108c8:	bf58      	it	pl
 80108ca:	1b12      	subpl	r2, r2, r4
 80108cc:	4463      	add	r3, ip
 80108ce:	443d      	add	r5, r7
 80108d0:	44e3      	add	fp, ip
 80108d2:	f8aa b004 	strh.w	fp, [sl, #4]
 80108d6:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80108da:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80108de:	f8aa b006 	strh.w	fp, [sl, #6]
 80108e2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80108e6:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80108ea:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80108ee:	ea5b 070a 	orrs.w	r7, fp, sl
 80108f2:	d014      	beq.n	801091e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80108f4:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80108f8:	f1ba 0f00 	cmp.w	sl, #0
 80108fc:	db0f      	blt.n	801091e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80108fe:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010900:	45ba      	cmp	sl, r7
 8010902:	da0c      	bge.n	801091e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8010904:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8010908:	45ba      	cmp	sl, r7
 801090a:	f10a 0a01 	add.w	sl, sl, #1
 801090e:	bf38      	it	cc
 8010910:	f10c 0c08 	addcc.w	ip, ip, #8
 8010914:	f8c0 a008 	str.w	sl, [r0, #8]
 8010918:	bf38      	it	cc
 801091a:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801091e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010922:	f04f 0700 	mov.w	r7, #0
 8010926:	42ae      	cmp	r6, r5
 8010928:	f8ac 5000 	strh.w	r5, [ip]
 801092c:	f8ac 8002 	strh.w	r8, [ip, #2]
 8010930:	f8ac 7004 	strh.w	r7, [ip, #4]
 8010934:	f8ac 7006 	strh.w	r7, [ip, #6]
 8010938:	d1bc      	bne.n	80108b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801093a:	6904      	ldr	r4, [r0, #16]
 801093c:	9a01      	ldr	r2, [sp, #4]
 801093e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010940:	1ad3      	subs	r3, r2, r3
 8010942:	88a2      	ldrh	r2, [r4, #4]
 8010944:	3120      	adds	r1, #32
 8010946:	441a      	add	r2, r3
 8010948:	80a2      	strh	r2, [r4, #4]
 801094a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801094c:	1a89      	subs	r1, r1, r2
 801094e:	88e2      	ldrh	r2, [r4, #6]
 8010950:	fb03 2301 	mla	r3, r3, r1, r2
 8010954:	80e3      	strh	r3, [r4, #6]
 8010956:	e650      	b.n	80105fa <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8010958:	f04f 37ff 	mov.w	r7, #4294967295
 801095c:	434a      	muls	r2, r1
 801095e:	4264      	negs	r4, r4
 8010960:	970a      	str	r7, [sp, #40]	@ 0x28
 8010962:	2700      	movs	r7, #0
 8010964:	e758      	b.n	8010818 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8010966:	ea4f 1867 	mov.w	r8, r7, asr #5
 801096a:	f009 031f 	and.w	r3, r9, #31
 801096e:	f007 071f 	and.w	r7, r7, #31
 8010972:	fa1f fc8c 	uxth.w	ip, ip
 8010976:	45d0      	cmp	r8, sl
 8010978:	930f      	str	r3, [sp, #60]	@ 0x3c
 801097a:	fa1f fe8e 	uxth.w	lr, lr
 801097e:	d10a      	bne.n	8010996 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8010980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010982:	449c      	add	ip, r3
 8010984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010986:	441f      	add	r7, r3
 8010988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801098a:	f8a5 c004 	strh.w	ip, [r5, #4]
 801098e:	fb03 e707 	mla	r7, r3, r7, lr
 8010992:	80ef      	strh	r7, [r5, #6]
 8010994:	e6bc      	b.n	8010710 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010996:	2900      	cmp	r1, #0
 8010998:	f2c0 80a6 	blt.w	8010ae8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 801099c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801099e:	f1c7 0320 	rsb	r3, r7, #32
 80109a2:	4363      	muls	r3, r4
 80109a4:	2401      	movs	r4, #1
 80109a6:	940d      	str	r4, [sp, #52]	@ 0x34
 80109a8:	2420      	movs	r4, #32
 80109aa:	940c      	str	r4, [sp, #48]	@ 0x30
 80109ac:	fb93 f4f1 	sdiv	r4, r3, r1
 80109b0:	fb01 3b14 	mls	fp, r1, r4, r3
 80109b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80109b6:	f1bb 0f00 	cmp.w	fp, #0
 80109ba:	441f      	add	r7, r3
 80109bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109be:	bfbc      	itt	lt
 80109c0:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80109c4:	448b      	addlt	fp, r1
 80109c6:	fb04 e707 	mla	r7, r4, r7, lr
 80109ca:	44a4      	add	ip, r4
 80109cc:	80ef      	strh	r7, [r5, #6]
 80109ce:	f8a5 c004 	strh.w	ip, [r5, #4]
 80109d2:	eb08 0503 	add.w	r5, r8, r3
 80109d6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80109da:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80109de:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80109e2:	ea5e 0307 	orrs.w	r3, lr, r7
 80109e6:	d011      	beq.n	8010a0c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80109e8:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80109ec:	f1be 0f00 	cmp.w	lr, #0
 80109f0:	db0c      	blt.n	8010a0c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80109f2:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80109f4:	45be      	cmp	lr, r7
 80109f6:	da09      	bge.n	8010a0c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80109f8:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80109fc:	45be      	cmp	lr, r7
 80109fe:	bf3c      	itt	cc
 8010a00:	f10c 0708 	addcc.w	r7, ip, #8
 8010a04:	6107      	strcc	r7, [r0, #16]
 8010a06:	f10e 0701 	add.w	r7, lr, #1
 8010a0a:	6087      	str	r7, [r0, #8]
 8010a0c:	6907      	ldr	r7, [r0, #16]
 8010a0e:	b213      	sxth	r3, r2
 8010a10:	4555      	cmp	r5, sl
 8010a12:	9310      	str	r3, [sp, #64]	@ 0x40
 8010a14:	807b      	strh	r3, [r7, #2]
 8010a16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a18:	803d      	strh	r5, [r7, #0]
 8010a1a:	80be      	strh	r6, [r7, #4]
 8010a1c:	eb04 0c03 	add.w	ip, r4, r3
 8010a20:	80fe      	strh	r6, [r7, #6]
 8010a22:	d050      	beq.n	8010ac6 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8010a24:	9b01      	ldr	r3, [sp, #4]
 8010a26:	eba3 070c 	sub.w	r7, r3, ip
 8010a2a:	ebab 0301 	sub.w	r3, fp, r1
 8010a2e:	443c      	add	r4, r7
 8010a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a32:	0164      	lsls	r4, r4, #5
 8010a34:	fb94 f8f1 	sdiv	r8, r4, r1
 8010a38:	fb01 4418 	mls	r4, r1, r8, r4
 8010a3c:	2c00      	cmp	r4, #0
 8010a3e:	bfbc      	itt	lt
 8010a40:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8010a44:	1864      	addlt	r4, r4, r1
 8010a46:	f108 0701 	add.w	r7, r8, #1
 8010a4a:	9711      	str	r7, [sp, #68]	@ 0x44
 8010a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a4e:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8010a52:	191b      	adds	r3, r3, r4
 8010a54:	f8be b004 	ldrh.w	fp, [lr, #4]
 8010a58:	bf54      	ite	pl
 8010a5a:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8010a5c:	4647      	movmi	r7, r8
 8010a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a60:	bf58      	it	pl
 8010a62:	1a5b      	subpl	r3, r3, r1
 8010a64:	44bb      	add	fp, r7
 8010a66:	44bc      	add	ip, r7
 8010a68:	bf58      	it	pl
 8010a6a:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8010a6c:	f8ae b004 	strh.w	fp, [lr, #4]
 8010a70:	f8be b006 	ldrh.w	fp, [lr, #6]
 8010a74:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8010a78:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8010a7a:	f8ae b006 	strh.w	fp, [lr, #6]
 8010a7e:	443d      	add	r5, r7
 8010a80:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8010a84:	f8be b006 	ldrh.w	fp, [lr, #6]
 8010a88:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8010a8c:	ea5b 0307 	orrs.w	r3, fp, r7
 8010a90:	d011      	beq.n	8010ab6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010a92:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8010a96:	f1bb 0f00 	cmp.w	fp, #0
 8010a9a:	db0c      	blt.n	8010ab6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010a9c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010a9e:	45bb      	cmp	fp, r7
 8010aa0:	da09      	bge.n	8010ab6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010aa2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8010aa6:	45bb      	cmp	fp, r7
 8010aa8:	bf3c      	itt	cc
 8010aaa:	f10e 0708 	addcc.w	r7, lr, #8
 8010aae:	6107      	strcc	r7, [r0, #16]
 8010ab0:	f10b 0701 	add.w	r7, fp, #1
 8010ab4:	6087      	str	r7, [r0, #8]
 8010ab6:	6907      	ldr	r7, [r0, #16]
 8010ab8:	4555      	cmp	r5, sl
 8010aba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010abc:	803d      	strh	r5, [r7, #0]
 8010abe:	807b      	strh	r3, [r7, #2]
 8010ac0:	80be      	strh	r6, [r7, #4]
 8010ac2:	80fe      	strh	r6, [r7, #6]
 8010ac4:	d1c2      	bne.n	8010a4c <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8010ac6:	9b01      	ldr	r3, [sp, #4]
 8010ac8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8010aca:	eba3 0c0c 	sub.w	ip, r3, ip
 8010ace:	6903      	ldr	r3, [r0, #16]
 8010ad0:	3720      	adds	r7, #32
 8010ad2:	8899      	ldrh	r1, [r3, #4]
 8010ad4:	4461      	add	r1, ip
 8010ad6:	8099      	strh	r1, [r3, #4]
 8010ad8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010ada:	1a7f      	subs	r7, r7, r1
 8010adc:	88d9      	ldrh	r1, [r3, #6]
 8010ade:	fb0c 1c07 	mla	ip, ip, r7, r1
 8010ae2:	f8a3 c006 	strh.w	ip, [r3, #6]
 8010ae6:	e613      	b.n	8010710 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010ae8:	f04f 34ff 	mov.w	r4, #4294967295
 8010aec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010aee:	4249      	negs	r1, r1
 8010af0:	940d      	str	r4, [sp, #52]	@ 0x34
 8010af2:	2400      	movs	r4, #0
 8010af4:	437b      	muls	r3, r7
 8010af6:	e758      	b.n	80109aa <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8010af8:	9905      	ldr	r1, [sp, #20]
 8010afa:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8010afe:	f009 0c1f 	and.w	ip, r9, #31
 8010b02:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8010b06:	f001 011f 	and.w	r1, r1, #31
 8010b0a:	45f3      	cmp	fp, lr
 8010b0c:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8010b10:	9102      	str	r1, [sp, #8]
 8010b12:	9904      	ldr	r1, [sp, #16]
 8010b14:	eba1 0406 	sub.w	r4, r1, r6
 8010b18:	d108      	bne.n	8010b2c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8010b1a:	9b02      	ldr	r3, [sp, #8]
 8010b1c:	44a0      	add	r8, r4
 8010b1e:	449c      	add	ip, r3
 8010b20:	f8a7 8004 	strh.w	r8, [r7, #4]
 8010b24:	fb04 a40c 	mla	r4, r4, ip, sl
 8010b28:	80fc      	strh	r4, [r7, #6]
 8010b2a:	e461      	b.n	80103f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010b2c:	9905      	ldr	r1, [sp, #20]
 8010b2e:	ebb1 0109 	subs.w	r1, r1, r9
 8010b32:	bf51      	iteee	pl
 8010b34:	f1cc 0520 	rsbpl	r5, ip, #32
 8010b38:	fb04 f40c 	mulmi.w	r4, r4, ip
 8010b3c:	4249      	negmi	r1, r1
 8010b3e:	2500      	movmi	r5, #0
 8010b40:	bf5d      	ittte	pl
 8010b42:	436c      	mulpl	r4, r5
 8010b44:	2520      	movpl	r5, #32
 8010b46:	f04f 0901 	movpl.w	r9, #1
 8010b4a:	f04f 39ff 	movmi.w	r9, #4294967295
 8010b4e:	9501      	str	r5, [sp, #4]
 8010b50:	9b01      	ldr	r3, [sp, #4]
 8010b52:	fb94 f5f1 	sdiv	r5, r4, r1
 8010b56:	fb01 4415 	mls	r4, r1, r5, r4
 8010b5a:	449c      	add	ip, r3
 8010b5c:	eb0b 0309 	add.w	r3, fp, r9
 8010b60:	2c00      	cmp	r4, #0
 8010b62:	bfbc      	itt	lt
 8010b64:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8010b68:	1864      	addlt	r4, r4, r1
 8010b6a:	44a8      	add	r8, r5
 8010b6c:	fb05 ac0c 	mla	ip, r5, ip, sl
 8010b70:	f8a7 8004 	strh.w	r8, [r7, #4]
 8010b74:	f8a7 c006 	strh.w	ip, [r7, #6]
 8010b78:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010b7c:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8010b80:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8010b84:	ea58 0707 	orrs.w	r7, r8, r7
 8010b88:	d011      	beq.n	8010bae <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8010b8a:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8010b8e:	f1b8 0f00 	cmp.w	r8, #0
 8010b92:	db0c      	blt.n	8010bae <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8010b94:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010b96:	45b8      	cmp	r8, r7
 8010b98:	da09      	bge.n	8010bae <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8010b9a:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8010b9e:	45b8      	cmp	r8, r7
 8010ba0:	bf3c      	itt	cc
 8010ba2:	f10c 0708 	addcc.w	r7, ip, #8
 8010ba6:	6107      	strcc	r7, [r0, #16]
 8010ba8:	f108 0701 	add.w	r7, r8, #1
 8010bac:	6087      	str	r7, [r0, #8]
 8010bae:	6907      	ldr	r7, [r0, #16]
 8010bb0:	f04f 0c00 	mov.w	ip, #0
 8010bb4:	b212      	sxth	r2, r2
 8010bb6:	459e      	cmp	lr, r3
 8010bb8:	803b      	strh	r3, [r7, #0]
 8010bba:	442e      	add	r6, r5
 8010bbc:	807a      	strh	r2, [r7, #2]
 8010bbe:	f8a7 c004 	strh.w	ip, [r7, #4]
 8010bc2:	f8a7 c006 	strh.w	ip, [r7, #6]
 8010bc6:	d04b      	beq.n	8010c60 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8010bc8:	9f04      	ldr	r7, [sp, #16]
 8010bca:	1a64      	subs	r4, r4, r1
 8010bcc:	f04f 0a00 	mov.w	sl, #0
 8010bd0:	1bbf      	subs	r7, r7, r6
 8010bd2:	443d      	add	r5, r7
 8010bd4:	016d      	lsls	r5, r5, #5
 8010bd6:	fb95 f8f1 	sdiv	r8, r5, r1
 8010bda:	fb01 5518 	mls	r5, r1, r8, r5
 8010bde:	4565      	cmp	r5, ip
 8010be0:	bfbc      	itt	lt
 8010be2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8010be6:	186d      	addlt	r5, r5, r1
 8010be8:	f108 0701 	add.w	r7, r8, #1
 8010bec:	9703      	str	r7, [sp, #12]
 8010bee:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010bf2:	1964      	adds	r4, r4, r5
 8010bf4:	444b      	add	r3, r9
 8010bf6:	bf54      	ite	pl
 8010bf8:	9f03      	ldrpl	r7, [sp, #12]
 8010bfa:	4647      	movmi	r7, r8
 8010bfc:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8010c00:	bf58      	it	pl
 8010c02:	1a64      	subpl	r4, r4, r1
 8010c04:	443e      	add	r6, r7
 8010c06:	44bb      	add	fp, r7
 8010c08:	f8ac b004 	strh.w	fp, [ip, #4]
 8010c0c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010c10:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8010c14:	f8ac b006 	strh.w	fp, [ip, #6]
 8010c18:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010c1c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010c20:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8010c24:	ea5b 0707 	orrs.w	r7, fp, r7
 8010c28:	d011      	beq.n	8010c4e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010c2a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8010c2e:	f1bb 0f00 	cmp.w	fp, #0
 8010c32:	db0c      	blt.n	8010c4e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010c34:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010c36:	45bb      	cmp	fp, r7
 8010c38:	da09      	bge.n	8010c4e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010c3a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8010c3e:	45bb      	cmp	fp, r7
 8010c40:	bf3c      	itt	cc
 8010c42:	f10c 0708 	addcc.w	r7, ip, #8
 8010c46:	6107      	strcc	r7, [r0, #16]
 8010c48:	f10b 0701 	add.w	r7, fp, #1
 8010c4c:	6087      	str	r7, [r0, #8]
 8010c4e:	6907      	ldr	r7, [r0, #16]
 8010c50:	459e      	cmp	lr, r3
 8010c52:	803b      	strh	r3, [r7, #0]
 8010c54:	807a      	strh	r2, [r7, #2]
 8010c56:	f8a7 a004 	strh.w	sl, [r7, #4]
 8010c5a:	f8a7 a006 	strh.w	sl, [r7, #6]
 8010c5e:	d1c6      	bne.n	8010bee <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8010c60:	9b04      	ldr	r3, [sp, #16]
 8010c62:	1b9e      	subs	r6, r3, r6
 8010c64:	6903      	ldr	r3, [r0, #16]
 8010c66:	889a      	ldrh	r2, [r3, #4]
 8010c68:	4432      	add	r2, r6
 8010c6a:	809a      	strh	r2, [r3, #4]
 8010c6c:	9a02      	ldr	r2, [sp, #8]
 8010c6e:	f102 0c20 	add.w	ip, r2, #32
 8010c72:	9a01      	ldr	r2, [sp, #4]
 8010c74:	ebac 0c02 	sub.w	ip, ip, r2
 8010c78:	88da      	ldrh	r2, [r3, #6]
 8010c7a:	fb06 260c 	mla	r6, r6, ip, r2
 8010c7e:	80de      	strh	r6, [r3, #6]
 8010c80:	f7ff bbb6 	b.w	80103f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08010c84 <_ZN8touchgfx7Outline6lineToEii>:
 8010c84:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010c86:	079b      	lsls	r3, r3, #30
 8010c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c8a:	460e      	mov	r6, r1
 8010c8c:	4615      	mov	r5, r2
 8010c8e:	d511      	bpl.n	8010cb4 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8010c90:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8010c94:	ea86 0701 	eor.w	r7, r6, r1
 8010c98:	ea85 0302 	eor.w	r3, r5, r2
 8010c9c:	433b      	orrs	r3, r7
 8010c9e:	d009      	beq.n	8010cb4 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8010ca0:	4633      	mov	r3, r6
 8010ca2:	9500      	str	r5, [sp, #0]
 8010ca4:	f7ff fb4c 	bl	8010340 <_ZN8touchgfx7Outline10renderLineEiiii>
 8010ca8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010caa:	f043 0301 	orr.w	r3, r3, #1
 8010cae:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8010cb2:	6243      	str	r3, [r0, #36]	@ 0x24
 8010cb4:	b003      	add	sp, #12
 8010cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010cb8 <_ZN8touchgfx7Outline6moveToEii>:
 8010cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cba:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010cbc:	4615      	mov	r5, r2
 8010cbe:	4604      	mov	r4, r0
 8010cc0:	460e      	mov	r6, r1
 8010cc2:	079a      	lsls	r2, r3, #30
 8010cc4:	d401      	bmi.n	8010cca <_ZN8touchgfx7Outline6moveToEii+0x12>
 8010cc6:	f7ff fb07 	bl	80102d8 <_ZN8touchgfx7Outline5resetEv>
 8010cca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010ccc:	07db      	lsls	r3, r3, #31
 8010cce:	d504      	bpl.n	8010cda <_ZN8touchgfx7Outline6moveToEii+0x22>
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8010cd6:	f7ff ffd5 	bl	8010c84 <_ZN8touchgfx7Outline6lineToEii>
 8010cda:	6923      	ldr	r3, [r4, #16]
 8010cdc:	1170      	asrs	r0, r6, #5
 8010cde:	1169      	asrs	r1, r5, #5
 8010ce0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010ce4:	4290      	cmp	r0, r2
 8010ce6:	d103      	bne.n	8010cf0 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8010ce8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010cec:	4291      	cmp	r1, r2
 8010cee:	d01a      	beq.n	8010d26 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8010cf0:	88df      	ldrh	r7, [r3, #6]
 8010cf2:	889a      	ldrh	r2, [r3, #4]
 8010cf4:	433a      	orrs	r2, r7
 8010cf6:	d010      	beq.n	8010d1a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010cf8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010cfc:	2a00      	cmp	r2, #0
 8010cfe:	db0c      	blt.n	8010d1a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010d00:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8010d02:	42ba      	cmp	r2, r7
 8010d04:	da09      	bge.n	8010d1a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010d06:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8010d0a:	42ba      	cmp	r2, r7
 8010d0c:	f102 0201 	add.w	r2, r2, #1
 8010d10:	bf38      	it	cc
 8010d12:	3308      	addcc	r3, #8
 8010d14:	60a2      	str	r2, [r4, #8]
 8010d16:	bf38      	it	cc
 8010d18:	6123      	strcc	r3, [r4, #16]
 8010d1a:	6923      	ldr	r3, [r4, #16]
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	8018      	strh	r0, [r3, #0]
 8010d20:	8059      	strh	r1, [r3, #2]
 8010d22:	809a      	strh	r2, [r3, #4]
 8010d24:	80da      	strh	r2, [r3, #6]
 8010d26:	6166      	str	r6, [r4, #20]
 8010d28:	6225      	str	r5, [r4, #32]
 8010d2a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8010d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010d30 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8010d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d34:	b0d0      	sub	sp, #320	@ 0x140
 8010d36:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010d3a:	466c      	mov	r4, sp
 8010d3c:	4627      	mov	r7, r4
 8010d3e:	1a0d      	subs	r5, r1, r0
 8010d40:	f100 0308 	add.w	r3, r0, #8
 8010d44:	2d48      	cmp	r5, #72	@ 0x48
 8010d46:	f340 80d5 	ble.w	8010ef4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8010d4a:	112d      	asrs	r5, r5, #4
 8010d4c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8010d50:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010d54:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8010d58:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8010d5c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8010d60:	6816      	ldr	r6, [r2, #0]
 8010d62:	6006      	str	r6, [r0, #0]
 8010d64:	6856      	ldr	r6, [r2, #4]
 8010d66:	6046      	str	r6, [r0, #4]
 8010d68:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8010d6c:	f8a2 8002 	strh.w	r8, [r2, #2]
 8010d70:	f8a2 e004 	strh.w	lr, [r2, #4]
 8010d74:	f8a2 c006 	strh.w	ip, [r2, #6]
 8010d78:	f1a1 0208 	sub.w	r2, r1, #8
 8010d7c:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8010d80:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8010d84:	4565      	cmp	r5, ip
 8010d86:	db06      	blt.n	8010d96 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8010d88:	d119      	bne.n	8010dbe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8010d8a:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8010d8e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8010d92:	42ae      	cmp	r6, r5
 8010d94:	dd13      	ble.n	8010dbe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8010d96:	460e      	mov	r6, r1
 8010d98:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8010d9c:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8010da0:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8010da4:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8010da8:	601d      	str	r5, [r3, #0]
 8010daa:	6875      	ldr	r5, [r6, #4]
 8010dac:	605d      	str	r5, [r3, #4]
 8010dae:	f821 9c08 	strh.w	r9, [r1, #-8]
 8010db2:	f821 cc06 	strh.w	ip, [r1, #-6]
 8010db6:	f821 8c04 	strh.w	r8, [r1, #-4]
 8010dba:	f821 ec02 	strh.w	lr, [r1, #-2]
 8010dbe:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8010dc2:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8010dc6:	42ae      	cmp	r6, r5
 8010dc8:	db06      	blt.n	8010dd8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8010dca:	d116      	bne.n	8010dfa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8010dcc:	f9b0 c000 	ldrsh.w	ip, [r0]
 8010dd0:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8010dd4:	45ac      	cmp	ip, r5
 8010dd6:	da10      	bge.n	8010dfa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8010dd8:	681d      	ldr	r5, [r3, #0]
 8010dda:	f9b0 8000 	ldrsh.w	r8, [r0]
 8010dde:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8010de2:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8010de6:	6005      	str	r5, [r0, #0]
 8010de8:	685d      	ldr	r5, [r3, #4]
 8010dea:	f8a0 8008 	strh.w	r8, [r0, #8]
 8010dee:	6045      	str	r5, [r0, #4]
 8010df0:	8146      	strh	r6, [r0, #10]
 8010df2:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8010df6:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8010dfa:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8010dfe:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8010e02:	4565      	cmp	r5, ip
 8010e04:	db06      	blt.n	8010e14 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8010e06:	d119      	bne.n	8010e3c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010e08:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8010e0c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8010e10:	42ae      	cmp	r6, r5
 8010e12:	da13      	bge.n	8010e3c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010e14:	460e      	mov	r6, r1
 8010e16:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010e1a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8010e1e:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8010e22:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8010e26:	6005      	str	r5, [r0, #0]
 8010e28:	6875      	ldr	r5, [r6, #4]
 8010e2a:	6045      	str	r5, [r0, #4]
 8010e2c:	f821 9c08 	strh.w	r9, [r1, #-8]
 8010e30:	f821 cc06 	strh.w	ip, [r1, #-6]
 8010e34:	f821 8c04 	strh.w	r8, [r1, #-4]
 8010e38:	f821 ec02 	strh.w	lr, [r1, #-2]
 8010e3c:	3308      	adds	r3, #8
 8010e3e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8010e42:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8010e46:	45e6      	cmp	lr, ip
 8010e48:	dbf8      	blt.n	8010e3c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010e4a:	d105      	bne.n	8010e58 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8010e4c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010e50:	f9b0 5000 	ldrsh.w	r5, [r0]
 8010e54:	42ae      	cmp	r6, r5
 8010e56:	dbf1      	blt.n	8010e3c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010e58:	4615      	mov	r5, r2
 8010e5a:	3a08      	subs	r2, #8
 8010e5c:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8010e60:	45b4      	cmp	ip, r6
 8010e62:	dbf9      	blt.n	8010e58 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8010e64:	d105      	bne.n	8010e72 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8010e66:	f9b0 8000 	ldrsh.w	r8, [r0]
 8010e6a:	f9b2 6000 	ldrsh.w	r6, [r2]
 8010e6e:	45b0      	cmp	r8, r6
 8010e70:	dbf2      	blt.n	8010e58 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8010e72:	4293      	cmp	r3, r2
 8010e74:	f1a5 0608 	sub.w	r6, r5, #8
 8010e78:	d816      	bhi.n	8010ea8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8010e7a:	f8d6 c000 	ldr.w	ip, [r6]
 8010e7e:	f9b3 a000 	ldrsh.w	sl, [r3]
 8010e82:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8010e86:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8010e8a:	f8c3 c000 	str.w	ip, [r3]
 8010e8e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8010e92:	f8c3 c004 	str.w	ip, [r3, #4]
 8010e96:	f825 ac08 	strh.w	sl, [r5, #-8]
 8010e9a:	f825 ec06 	strh.w	lr, [r5, #-6]
 8010e9e:	f825 9c04 	strh.w	r9, [r5, #-4]
 8010ea2:	f825 8c02 	strh.w	r8, [r5, #-2]
 8010ea6:	e7c9      	b.n	8010e3c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010ea8:	f8d6 e000 	ldr.w	lr, [r6]
 8010eac:	f9b0 a000 	ldrsh.w	sl, [r0]
 8010eb0:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8010eb4:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8010eb8:	f8c0 e000 	str.w	lr, [r0]
 8010ebc:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8010ec0:	1a16      	subs	r6, r2, r0
 8010ec2:	f8c0 e004 	str.w	lr, [r0, #4]
 8010ec6:	f825 ac08 	strh.w	sl, [r5, #-8]
 8010eca:	f825 cc06 	strh.w	ip, [r5, #-6]
 8010ece:	f825 9c04 	strh.w	r9, [r5, #-4]
 8010ed2:	f825 8c02 	strh.w	r8, [r5, #-2]
 8010ed6:	1acd      	subs	r5, r1, r3
 8010ed8:	10ed      	asrs	r5, r5, #3
 8010eda:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8010ede:	bfb5      	itete	lt
 8010ee0:	e9c4 0200 	strdlt	r0, r2, [r4]
 8010ee4:	e9c4 3100 	strdge	r3, r1, [r4]
 8010ee8:	460a      	movlt	r2, r1
 8010eea:	4603      	movge	r3, r0
 8010eec:	3408      	adds	r4, #8
 8010eee:	4618      	mov	r0, r3
 8010ef0:	4611      	mov	r1, r2
 8010ef2:	e724      	b.n	8010d3e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8010ef4:	4299      	cmp	r1, r3
 8010ef6:	d927      	bls.n	8010f48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8010ef8:	f1a3 0210 	sub.w	r2, r3, #16
 8010efc:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8010f00:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8010f04:	45ac      	cmp	ip, r5
 8010f06:	db06      	blt.n	8010f16 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8010f08:	d11c      	bne.n	8010f44 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8010f0a:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8010f0e:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8010f12:	42ae      	cmp	r6, r5
 8010f14:	da16      	bge.n	8010f44 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8010f16:	4615      	mov	r5, r2
 8010f18:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8010f1c:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8010f20:	3a08      	subs	r2, #8
 8010f22:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8010f26:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8010f2a:	6196      	str	r6, [r2, #24]
 8010f2c:	42a8      	cmp	r0, r5
 8010f2e:	686e      	ldr	r6, [r5, #4]
 8010f30:	f8a2 9010 	strh.w	r9, [r2, #16]
 8010f34:	61d6      	str	r6, [r2, #28]
 8010f36:	f8a2 c012 	strh.w	ip, [r2, #18]
 8010f3a:	f8a2 8014 	strh.w	r8, [r2, #20]
 8010f3e:	f8a2 e016 	strh.w	lr, [r2, #22]
 8010f42:	d1db      	bne.n	8010efc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8010f44:	3308      	adds	r3, #8
 8010f46:	e7d5      	b.n	8010ef4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8010f48:	42bc      	cmp	r4, r7
 8010f4a:	d903      	bls.n	8010f54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8010f4c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8010f50:	3c08      	subs	r4, #8
 8010f52:	e6f4      	b.n	8010d3e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8010f54:	b050      	add	sp, #320	@ 0x140
 8010f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010f5a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8010f5a:	b510      	push	{r4, lr}
 8010f5c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010f5e:	4604      	mov	r4, r0
 8010f60:	07da      	lsls	r2, r3, #31
 8010f62:	d507      	bpl.n	8010f74 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8010f64:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8010f68:	f7ff fe8c 	bl	8010c84 <_ZN8touchgfx7Outline6lineToEii>
 8010f6c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010f6e:	f023 0301 	bic.w	r3, r3, #1
 8010f72:	6243      	str	r3, [r0, #36]	@ 0x24
 8010f74:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010f76:	079b      	lsls	r3, r3, #30
 8010f78:	d521      	bpl.n	8010fbe <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8010f7a:	6923      	ldr	r3, [r4, #16]
 8010f7c:	88d9      	ldrh	r1, [r3, #6]
 8010f7e:	889a      	ldrh	r2, [r3, #4]
 8010f80:	430a      	orrs	r2, r1
 8010f82:	d010      	beq.n	8010fa6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8010f84:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010f88:	2a00      	cmp	r2, #0
 8010f8a:	db0c      	blt.n	8010fa6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8010f8c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010f8e:	428a      	cmp	r2, r1
 8010f90:	da09      	bge.n	8010fa6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8010f92:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8010f96:	4291      	cmp	r1, r2
 8010f98:	f102 0201 	add.w	r2, r2, #1
 8010f9c:	bf88      	it	hi
 8010f9e:	3308      	addhi	r3, #8
 8010fa0:	60a2      	str	r2, [r4, #8]
 8010fa2:	bf88      	it	hi
 8010fa4:	6123      	strhi	r3, [r4, #16]
 8010fa6:	68a1      	ldr	r1, [r4, #8]
 8010fa8:	b129      	cbz	r1, 8010fb6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8010faa:	6863      	ldr	r3, [r4, #4]
 8010fac:	4299      	cmp	r1, r3
 8010fae:	d802      	bhi.n	8010fb6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8010fb0:	68e0      	ldr	r0, [r4, #12]
 8010fb2:	f7ff febd 	bl	8010d30 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8010fb6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010fb8:	f023 0302 	bic.w	r3, r3, #2
 8010fbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8010fbe:	68e0      	ldr	r0, [r4, #12]
 8010fc0:	bd10      	pop	{r4, pc}
	...

08010fc4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8010fc4:	4b01      	ldr	r3, [pc, #4]	@ (8010fcc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8010fc6:	6818      	ldr	r0, [r3, #0]
 8010fc8:	4770      	bx	lr
 8010fca:	bf00      	nop
 8010fcc:	24025128 	.word	0x24025128

08010fd0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8010fd0:	4b01      	ldr	r3, [pc, #4]	@ (8010fd8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8010fd2:	6818      	ldr	r0, [r3, #0]
 8010fd4:	4770      	bx	lr
 8010fd6:	bf00      	nop
 8010fd8:	2402512c 	.word	0x2402512c

08010fdc <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8010fdc:	b510      	push	{r4, lr}
 8010fde:	6803      	ldr	r3, [r0, #0]
 8010fe0:	460c      	mov	r4, r1
 8010fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fe4:	4798      	blx	r3
 8010fe6:	1b03      	subs	r3, r0, r4
 8010fe8:	4258      	negs	r0, r3
 8010fea:	4158      	adcs	r0, r3
 8010fec:	bd10      	pop	{r4, pc}
	...

08010ff0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8010ff0:	4b01      	ldr	r3, [pc, #4]	@ (8010ff8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8010ff2:	6019      	str	r1, [r3, #0]
 8010ff4:	4770      	bx	lr
 8010ff6:	bf00      	nop
 8010ff8:	24025130 	.word	0x24025130

08010ffc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8010ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011000:	4696      	mov	lr, r2
 8011002:	b097      	sub	sp, #92	@ 0x5c
 8011004:	4605      	mov	r5, r0
 8011006:	4614      	mov	r4, r2
 8011008:	460e      	mov	r6, r1
 801100a:	461f      	mov	r7, r3
 801100c:	f10d 0c1c 	add.w	ip, sp, #28
 8011010:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8011014:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8011018:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 801101c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011020:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011024:	f8de 3000 	ldr.w	r3, [lr]
 8011028:	f104 0e14 	add.w	lr, r4, #20
 801102c:	f8cc 3000 	str.w	r3, [ip]
 8011030:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8011034:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011038:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801103c:	f8de 3000 	ldr.w	r3, [lr]
 8011040:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8011044:	f8cc 3000 	str.w	r3, [ip]
 8011048:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801104c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011050:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011054:	f8de 3000 	ldr.w	r3, [lr]
 8011058:	4631      	mov	r1, r6
 801105a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801105c:	4628      	mov	r0, r5
 801105e:	f8cc 3000 	str.w	r3, [ip]
 8011062:	682b      	ldr	r3, [r5, #0]
 8011064:	9201      	str	r2, [sp, #4]
 8011066:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011068:	f8cd 8008 	str.w	r8, [sp, #8]
 801106c:	9200      	str	r2, [sp, #0]
 801106e:	aa07      	add	r2, sp, #28
 8011070:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011074:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8011078:	463b      	mov	r3, r7
 801107a:	47d8      	blx	fp
 801107c:	46a6      	mov	lr, r4
 801107e:	f10d 0c1c 	add.w	ip, sp, #28
 8011082:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011086:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801108a:	f8de 3000 	ldr.w	r3, [lr]
 801108e:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8011092:	343c      	adds	r4, #60	@ 0x3c
 8011094:	f8cc 3000 	str.w	r3, [ip]
 8011098:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801109c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80110a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110a4:	f8de 3000 	ldr.w	r3, [lr]
 80110a8:	f8cc 3000 	str.w	r3, [ip]
 80110ac:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80110b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80110b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110b6:	6823      	ldr	r3, [r4, #0]
 80110b8:	4631      	mov	r1, r6
 80110ba:	4628      	mov	r0, r5
 80110bc:	f8cc 3000 	str.w	r3, [ip]
 80110c0:	682b      	ldr	r3, [r5, #0]
 80110c2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80110c6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80110c8:	f8cd 8008 	str.w	r8, [sp, #8]
 80110cc:	9201      	str	r2, [sp, #4]
 80110ce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80110d0:	9200      	str	r2, [sp, #0]
 80110d2:	aa07      	add	r2, sp, #28
 80110d4:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80110d6:	463b      	mov	r3, r7
 80110d8:	47a0      	blx	r4
 80110da:	b017      	add	sp, #92	@ 0x5c
 80110dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80110e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110e4:	b08d      	sub	sp, #52	@ 0x34
 80110e6:	4688      	mov	r8, r1
 80110e8:	f8d3 c000 	ldr.w	ip, [r3]
 80110ec:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80110ee:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 80110f2:	680f      	ldr	r7, [r1, #0]
 80110f4:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 80110f8:	eba7 070c 	sub.w	r7, r7, ip
 80110fc:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8011100:	edd3 6a07 	vldr	s13, [r3, #28]
 8011104:	42bc      	cmp	r4, r7
 8011106:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011108:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 801110c:	bfa8      	it	ge
 801110e:	463c      	movge	r4, r7
 8011110:	f9b1 9000 	ldrsh.w	r9, [r1]
 8011114:	f9ba 1000 	ldrsh.w	r1, [sl]
 8011118:	ee07 4a90 	vmov	s15, r4
 801111c:	eb09 0e0c 	add.w	lr, r9, ip
 8011120:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8011124:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8011128:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 801112c:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8011130:	4571      	cmp	r1, lr
 8011132:	ee25 4a04 	vmul.f32	s8, s10, s8
 8011136:	ee65 4a24 	vmul.f32	s9, s10, s9
 801113a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801113e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011142:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8011146:	ee32 1a05 	vadd.f32	s2, s4, s10
 801114a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801114e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8011152:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011156:	ee22 2a07 	vmul.f32	s4, s4, s14
 801115a:	f340 808c 	ble.w	8011276 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801115e:	eba1 060e 	sub.w	r6, r1, lr
 8011162:	fb96 f5f4 	sdiv	r5, r6, r4
 8011166:	ee07 5a10 	vmov	s14, r5
 801116a:	2d00      	cmp	r5, #0
 801116c:	fb04 6615 	mls	r6, r4, r5, r6
 8011170:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011174:	eea7 0a04 	vfma.f32	s0, s14, s8
 8011178:	eee7 0a24 	vfma.f32	s1, s14, s9
 801117c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8011180:	dd12      	ble.n	80111a8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8011182:	ee70 6a44 	vsub.f32	s13, s0, s8
 8011186:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801118a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801118e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8011192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011196:	bf14      	ite	ne
 8011198:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801119c:	eeb0 7a67 	vmoveq.f32	s14, s15
 80111a0:	ee61 1a87 	vmul.f32	s3, s3, s14
 80111a4:	ee22 2a07 	vmul.f32	s4, s4, s14
 80111a8:	fb05 f204 	mul.w	r2, r5, r4
 80111ac:	1abf      	subs	r7, r7, r2
 80111ae:	4494      	add	ip, r2
 80111b0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80111b4:	4411      	add	r1, r2
 80111b6:	eb09 020c 	add.w	r2, r9, ip
 80111ba:	b209      	sxth	r1, r1
 80111bc:	443a      	add	r2, r7
 80111be:	428a      	cmp	r2, r1
 80111c0:	bfc4      	itt	gt
 80111c2:	eba1 0209 	subgt.w	r2, r1, r9
 80111c6:	eba2 070c 	subgt.w	r7, r2, ip
 80111ca:	2f00      	cmp	r7, #0
 80111cc:	dd50      	ble.n	8011270 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80111ce:	fb97 f1f4 	sdiv	r1, r7, r4
 80111d2:	fb04 7211 	mls	r2, r4, r1, r7
 80111d6:	b90a      	cbnz	r2, 80111dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80111d8:	3901      	subs	r1, #1
 80111da:	4622      	mov	r2, r4
 80111dc:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80111e0:	6840      	ldr	r0, [r0, #4]
 80111e2:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 80111e6:	44b6      	add	lr, r6
 80111e8:	f8d0 a000 	ldr.w	sl, [r0]
 80111ec:	2900      	cmp	r1, #0
 80111ee:	bfcc      	ite	gt
 80111f0:	46a1      	movgt	r9, r4
 80111f2:	4691      	movle	r9, r2
 80111f4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80111f6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80111f8:	fb04 e505 	mla	r5, r4, r5, lr
 80111fc:	eef0 6a42 	vmov.f32	s13, s4
 8011200:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8011204:	9008      	str	r0, [sp, #32]
 8011206:	eeb0 7a61 	vmov.f32	s14, s3
 801120a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801120c:	695b      	ldr	r3, [r3, #20]
 801120e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011212:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8011216:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801121a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801121c:	445b      	add	r3, fp
 801121e:	9307      	str	r3, [sp, #28]
 8011220:	ee16 3a90 	vmov	r3, s13
 8011224:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8011228:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801122c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8011230:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8011234:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011238:	ee17 7a90 	vmov	r7, s15
 801123c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8011240:	fb97 f7f4 	sdiv	r7, r7, r4
 8011244:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011248:	ee17 ca90 	vmov	ip, s15
 801124c:	fb9c fcf4 	sdiv	ip, ip, r4
 8011250:	fb0c 3306 	mla	r3, ip, r6, r3
 8011254:	9302      	str	r3, [sp, #8]
 8011256:	ee17 3a10 	vmov	r3, s14
 801125a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801125e:	fb07 3706 	mla	r7, r7, r6, r3
 8011262:	eba9 0306 	sub.w	r3, r9, r6
 8011266:	e9cd 4700 	strd	r4, r7, [sp]
 801126a:	f8da 4008 	ldr.w	r4, [sl, #8]
 801126e:	47a0      	blx	r4
 8011270:	b00d      	add	sp, #52	@ 0x34
 8011272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011276:	2500      	movs	r5, #0
 8011278:	462e      	mov	r6, r5
 801127a:	e799      	b.n	80111b0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801127c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801127c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011280:	b0db      	sub	sp, #364	@ 0x16c
 8011282:	461d      	mov	r5, r3
 8011284:	4614      	mov	r4, r2
 8011286:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801128a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801128c:	4629      	mov	r1, r5
 801128e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011290:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8011294:	9009      	str	r0, [sp, #36]	@ 0x24
 8011296:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011298:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 801129c:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 80112a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80112a2:	6803      	ldr	r3, [r0, #0]
 80112a4:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 80112a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80112aa:	47b8      	blx	r7
 80112ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112ae:	6058      	str	r0, [r3, #4]
 80112b0:	2800      	cmp	r0, #0
 80112b2:	f000 83a1 	beq.w	80119f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80112b6:	682b      	ldr	r3, [r5, #0]
 80112b8:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80112bc:	ed94 7a02 	vldr	s14, [r4, #8]
 80112c0:	9314      	str	r3, [sp, #80]	@ 0x50
 80112c2:	686b      	ldr	r3, [r5, #4]
 80112c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112c8:	9315      	str	r3, [sp, #84]	@ 0x54
 80112ca:	4bc1      	ldr	r3, [pc, #772]	@ (80115d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80112cc:	7819      	ldrb	r1, [r3, #0]
 80112ce:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80112d2:	2900      	cmp	r1, #0
 80112d4:	bf16      	itet	ne
 80112d6:	4619      	movne	r1, r3
 80112d8:	4611      	moveq	r1, r2
 80112da:	4613      	movne	r3, r2
 80112dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e0:	9116      	str	r1, [sp, #88]	@ 0x58
 80112e2:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 80112e6:	f240 8387 	bls.w	80119f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80112ea:	ed94 7a07 	vldr	s14, [r4, #28]
 80112ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112f6:	f240 837f 	bls.w	80119f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80112fa:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 80112fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011306:	f240 8377 	bls.w	80119f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801130a:	6822      	ldr	r2, [r4, #0]
 801130c:	4bb1      	ldr	r3, [pc, #708]	@ (80115d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801130e:	429a      	cmp	r2, r3
 8011310:	f2c0 8372 	blt.w	80119f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011314:	49b0      	ldr	r1, [pc, #704]	@ (80115d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8011316:	6963      	ldr	r3, [r4, #20]
 8011318:	428a      	cmp	r2, r1
 801131a:	f300 836d 	bgt.w	80119f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801131e:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8011322:	48ae      	ldr	r0, [pc, #696]	@ (80115dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8011324:	33ff      	adds	r3, #255	@ 0xff
 8011326:	4283      	cmp	r3, r0
 8011328:	f200 8366 	bhi.w	80119f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801132c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801132e:	4dac      	ldr	r5, [pc, #688]	@ (80115e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8011330:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8011334:	33ff      	adds	r3, #255	@ 0xff
 8011336:	42ab      	cmp	r3, r5
 8011338:	f200 835e 	bhi.w	80119f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801133c:	6862      	ldr	r2, [r4, #4]
 801133e:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8011342:	33ff      	adds	r3, #255	@ 0xff
 8011344:	4283      	cmp	r3, r0
 8011346:	f200 8357 	bhi.w	80119f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801134a:	69a1      	ldr	r1, [r4, #24]
 801134c:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8011350:	33ff      	adds	r3, #255	@ 0xff
 8011352:	4283      	cmp	r3, r0
 8011354:	f200 8350 	bhi.w	80119f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011358:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801135a:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 801135e:	30ff      	adds	r0, #255	@ 0xff
 8011360:	42a8      	cmp	r0, r5
 8011362:	f200 8349 	bhi.w	80119f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011366:	428a      	cmp	r2, r1
 8011368:	f280 8110 	bge.w	801158c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801136c:	429a      	cmp	r2, r3
 801136e:	f300 8119 	bgt.w	80115a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8011372:	4299      	cmp	r1, r3
 8011374:	f280 811d 	bge.w	80115b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8011378:	2502      	movs	r5, #2
 801137a:	2701      	movs	r7, #1
 801137c:	46a9      	mov	r9, r5
 801137e:	46b8      	mov	r8, r7
 8011380:	f04f 0a00 	mov.w	sl, #0
 8011384:	4621      	mov	r1, r4
 8011386:	a849      	add	r0, sp, #292	@ 0x124
 8011388:	f003 fd30 	bl	8014dec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801138c:	4622      	mov	r2, r4
 801138e:	4653      	mov	r3, sl
 8011390:	a949      	add	r1, sp, #292	@ 0x124
 8011392:	f8cd 9000 	str.w	r9, [sp]
 8011396:	a819      	add	r0, sp, #100	@ 0x64
 8011398:	f003 fe58 	bl	801504c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801139c:	4622      	mov	r2, r4
 801139e:	4653      	mov	r3, sl
 80113a0:	a949      	add	r1, sp, #292	@ 0x124
 80113a2:	f8cd 8000 	str.w	r8, [sp]
 80113a6:	a829      	add	r0, sp, #164	@ 0xa4
 80113a8:	f003 fe50 	bl	801504c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80113ac:	4643      	mov	r3, r8
 80113ae:	4622      	mov	r2, r4
 80113b0:	a949      	add	r1, sp, #292	@ 0x124
 80113b2:	f8cd 9000 	str.w	r9, [sp]
 80113b6:	a839      	add	r0, sp, #228	@ 0xe4
 80113b8:	f003 fe48 	bl	801504c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80113bc:	42af      	cmp	r7, r5
 80113be:	af12      	add	r7, sp, #72	@ 0x48
 80113c0:	bfb7      	itett	lt
 80113c2:	2300      	movlt	r3, #0
 80113c4:	2301      	movge	r3, #1
 80113c6:	ad29      	addlt	r5, sp, #164	@ 0xa4
 80113c8:	ac19      	addlt	r4, sp, #100	@ 0x64
 80113ca:	bfb1      	iteee	lt
 80113cc:	930e      	strlt	r3, [sp, #56]	@ 0x38
 80113ce:	ad19      	addge	r5, sp, #100	@ 0x64
 80113d0:	930e      	strge	r3, [sp, #56]	@ 0x38
 80113d2:	ac29      	addge	r4, sp, #164	@ 0xa4
 80113d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80113da:	e887 0003 	stmia.w	r7, {r0, r1}
 80113de:	b928      	cbnz	r0, 80113ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80113e0:	4b80      	ldr	r3, [pc, #512]	@ (80115e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80113e2:	6818      	ldr	r0, [r3, #0]
 80113e4:	6803      	ldr	r3, [r0, #0]
 80113e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113e8:	4798      	blx	r3
 80113ea:	6038      	str	r0, [r7, #0]
 80113ec:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80113ee:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80113f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80113f6:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80113f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80113fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80113fc:	6963      	ldr	r3, [r4, #20]
 80113fe:	440b      	add	r3, r1
 8011400:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8011404:	4408      	add	r0, r1
 8011406:	b200      	sxth	r0, r0
 8011408:	4283      	cmp	r3, r0
 801140a:	900d      	str	r0, [sp, #52]	@ 0x34
 801140c:	f280 80dd 	bge.w	80115ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8011410:	428b      	cmp	r3, r1
 8011412:	da08      	bge.n	8011426 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011414:	2a00      	cmp	r2, #0
 8011416:	dd06      	ble.n	8011426 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011418:	1acb      	subs	r3, r1, r3
 801141a:	429a      	cmp	r2, r3
 801141c:	f2c0 80e4 	blt.w	80115e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8011420:	2b00      	cmp	r3, #0
 8011422:	f300 80e2 	bgt.w	80115ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8011426:	6967      	ldr	r7, [r4, #20]
 8011428:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801142c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801142e:	443b      	add	r3, r7
 8011430:	461f      	mov	r7, r3
 8011432:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011434:	1bdf      	subs	r7, r3, r7
 8011436:	4297      	cmp	r7, r2
 8011438:	bfa8      	it	ge
 801143a:	4617      	movge	r7, r2
 801143c:	2f00      	cmp	r7, #0
 801143e:	f340 8166 	ble.w	801170e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8011442:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8011444:	6829      	ldr	r1, [r5, #0]
 8011446:	f9b3 2000 	ldrsh.w	r2, [r3]
 801144a:	f9bb 3000 	ldrsh.w	r3, [fp]
 801144e:	4411      	add	r1, r2
 8011450:	6820      	ldr	r0, [r4, #0]
 8011452:	4299      	cmp	r1, r3
 8011454:	dd1a      	ble.n	801148c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8011456:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801145a:	4402      	add	r2, r0
 801145c:	440b      	add	r3, r1
 801145e:	b21b      	sxth	r3, r3
 8011460:	429a      	cmp	r2, r3
 8011462:	dc13      	bgt.n	801148c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8011464:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011466:	a912      	add	r1, sp, #72	@ 0x48
 8011468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801146a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	9206      	str	r2, [sp, #24]
 8011470:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011472:	9500      	str	r5, [sp, #0]
 8011474:	9205      	str	r2, [sp, #20]
 8011476:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011478:	e9cd b203 	strd	fp, r2, [sp, #12]
 801147c:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801147e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8011482:	aa49      	add	r2, sp, #292	@ 0x124
 8011484:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8011488:	4623      	mov	r3, r4
 801148a:	47c8      	blx	r9
 801148c:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8011490:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8011494:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8011498:	ee37 7a27 	vadd.f32	s14, s14, s15
 801149c:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80114a0:	68a1      	ldr	r1, [r4, #8]
 80114a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114a6:	ed94 6a08 	vldr	s12, [r4, #32]
 80114aa:	edd4 6a07 	vldr	s13, [r4, #28]
 80114ae:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80114b2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80114b6:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80114ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 80114be:	edc4 6a07 	vstr	s13, [r4, #28]
 80114c2:	441a      	add	r2, r3
 80114c4:	6963      	ldr	r3, [r4, #20]
 80114c6:	3301      	adds	r3, #1
 80114c8:	6022      	str	r2, [r4, #0]
 80114ca:	6163      	str	r3, [r4, #20]
 80114cc:	69a3      	ldr	r3, [r4, #24]
 80114ce:	3b01      	subs	r3, #1
 80114d0:	61a3      	str	r3, [r4, #24]
 80114d2:	6923      	ldr	r3, [r4, #16]
 80114d4:	440b      	add	r3, r1
 80114d6:	68e1      	ldr	r1, [r4, #12]
 80114d8:	428b      	cmp	r3, r1
 80114da:	6123      	str	r3, [r4, #16]
 80114dc:	db15      	blt.n	801150a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80114de:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80114e2:	3201      	adds	r2, #1
 80114e4:	1a5b      	subs	r3, r3, r1
 80114e6:	ee76 6a26 	vadd.f32	s13, s12, s13
 80114ea:	6022      	str	r2, [r4, #0]
 80114ec:	6123      	str	r3, [r4, #16]
 80114ee:	edc4 6a07 	vstr	s13, [r4, #28]
 80114f2:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80114f6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80114fa:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80114fe:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8011502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011506:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801150a:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801150e:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8011512:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8011516:	ee37 7a27 	vadd.f32	s14, s14, s15
 801151a:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801151e:	68a9      	ldr	r1, [r5, #8]
 8011520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011524:	ed95 6a08 	vldr	s12, [r5, #32]
 8011528:	edd5 6a07 	vldr	s13, [r5, #28]
 801152c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8011530:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011534:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011538:	e9d5 2300 	ldrd	r2, r3, [r5]
 801153c:	edc5 6a07 	vstr	s13, [r5, #28]
 8011540:	441a      	add	r2, r3
 8011542:	696b      	ldr	r3, [r5, #20]
 8011544:	3301      	adds	r3, #1
 8011546:	602a      	str	r2, [r5, #0]
 8011548:	616b      	str	r3, [r5, #20]
 801154a:	69ab      	ldr	r3, [r5, #24]
 801154c:	3b01      	subs	r3, #1
 801154e:	61ab      	str	r3, [r5, #24]
 8011550:	692b      	ldr	r3, [r5, #16]
 8011552:	440b      	add	r3, r1
 8011554:	68e9      	ldr	r1, [r5, #12]
 8011556:	428b      	cmp	r3, r1
 8011558:	612b      	str	r3, [r5, #16]
 801155a:	db15      	blt.n	8011588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801155c:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8011560:	3201      	adds	r2, #1
 8011562:	1a5b      	subs	r3, r3, r1
 8011564:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011568:	602a      	str	r2, [r5, #0]
 801156a:	612b      	str	r3, [r5, #16]
 801156c:	edc5 6a07 	vstr	s13, [r5, #28]
 8011570:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8011574:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011578:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801157c:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8011580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011584:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011588:	3f01      	subs	r7, #1
 801158a:	e757      	b.n	801143c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801158c:	4299      	cmp	r1, r3
 801158e:	dc13      	bgt.n	80115b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8011590:	429a      	cmp	r2, r3
 8011592:	da14      	bge.n	80115be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8011594:	2502      	movs	r5, #2
 8011596:	2703      	movs	r7, #3
 8011598:	f04f 0800 	mov.w	r8, #0
 801159c:	46a9      	mov	r9, r5
 801159e:	f04f 0a01 	mov.w	sl, #1
 80115a2:	e6ef      	b.n	8011384 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80115a4:	2501      	movs	r5, #1
 80115a6:	2700      	movs	r7, #0
 80115a8:	46a9      	mov	r9, r5
 80115aa:	46b8      	mov	r8, r7
 80115ac:	f04f 0a02 	mov.w	sl, #2
 80115b0:	e6e8      	b.n	8011384 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80115b2:	2501      	movs	r5, #1
 80115b4:	2702      	movs	r7, #2
 80115b6:	e6e1      	b.n	801137c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80115b8:	2500      	movs	r5, #0
 80115ba:	2701      	movs	r7, #1
 80115bc:	e7f4      	b.n	80115a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80115be:	2702      	movs	r7, #2
 80115c0:	2503      	movs	r5, #3
 80115c2:	f04f 0900 	mov.w	r9, #0
 80115c6:	46b8      	mov	r8, r7
 80115c8:	e7e9      	b.n	801159e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80115ca:	4613      	mov	r3, r2
 80115cc:	e728      	b.n	8011420 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80115ce:	bf00      	nop
 80115d0:	24025118 	.word	0x24025118
 80115d4:	fffd8f01 	.word	0xfffd8f01
 80115d8:	00027100 	.word	0x00027100
 80115dc:	0004e1ff 	.word	0x0004e1ff
 80115e0:	0004e1fe 	.word	0x0004e1fe
 80115e4:	24025120 	.word	0x24025120
 80115e8:	4613      	mov	r3, r2
 80115ea:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80115ec:	469e      	mov	lr, r3
 80115ee:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80115f0:	469c      	mov	ip, r3
 80115f2:	9111      	str	r1, [sp, #68]	@ 0x44
 80115f4:	f04f 0900 	mov.w	r9, #0
 80115f8:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 80115fc:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8011600:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8011604:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8011608:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 801160c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8011610:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8011614:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8011618:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 801161c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8011620:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8011624:	f1bc 0f00 	cmp.w	ip, #0
 8011628:	d147      	bne.n	80116ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801162a:	eb03 0c07 	add.w	ip, r3, r7
 801162e:	1ad7      	subs	r7, r2, r3
 8011630:	f1b9 0f00 	cmp.w	r9, #0
 8011634:	d009      	beq.n	801164a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8011636:	9029      	str	r0, [sp, #164]	@ 0xa4
 8011638:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 801163c:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8011640:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8011644:	912d      	str	r1, [sp, #180]	@ 0xb4
 8011646:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 801164a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801164c:	f04f 0800 	mov.w	r8, #0
 8011650:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8011654:	9111      	str	r1, [sp, #68]	@ 0x44
 8011656:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801165a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801165e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8011662:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8011666:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801166a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801166e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8011672:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8011676:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801167a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801167e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8011682:	f1be 0f00 	cmp.w	lr, #0
 8011686:	d031      	beq.n	80116ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8011688:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801168a:	4450      	add	r0, sl
 801168c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011690:	4431      	add	r1, r6
 8011692:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011696:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801169a:	4549      	cmp	r1, r9
 801169c:	db08      	blt.n	80116b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801169e:	ee77 7a85 	vadd.f32	s15, s15, s10
 80116a2:	3001      	adds	r0, #1
 80116a4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80116a8:	eba1 0109 	sub.w	r1, r1, r9
 80116ac:	ee37 7a06 	vadd.f32	s14, s14, s12
 80116b0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80116b4:	f04f 0801 	mov.w	r8, #1
 80116b8:	e7e3      	b.n	8011682 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80116ba:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80116bc:	4450      	add	r0, sl
 80116be:	ee37 7a24 	vadd.f32	s14, s14, s9
 80116c2:	4431      	add	r1, r6
 80116c4:	ee77 7a84 	vadd.f32	s15, s15, s8
 80116c8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80116cc:	4541      	cmp	r1, r8
 80116ce:	db08      	blt.n	80116e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80116d0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80116d4:	3001      	adds	r0, #1
 80116d6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80116da:	eba1 0108 	sub.w	r1, r1, r8
 80116de:	ee77 7a86 	vadd.f32	s15, s15, s12
 80116e2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80116e6:	f04f 0901 	mov.w	r9, #1
 80116ea:	e79b      	b.n	8011624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80116ec:	449c      	add	ip, r3
 80116ee:	1aff      	subs	r7, r7, r3
 80116f0:	f1b8 0f00 	cmp.w	r8, #0
 80116f4:	d009      	beq.n	801170a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80116f6:	9019      	str	r0, [sp, #100]	@ 0x64
 80116f8:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80116fc:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8011700:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8011704:	911d      	str	r1, [sp, #116]	@ 0x74
 8011706:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801170a:	1ad2      	subs	r2, r2, r3
 801170c:	e68b      	b.n	8011426 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801170e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011710:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8011712:	2b00      	cmp	r3, #0
 8011714:	f000 80d1 	beq.w	80118ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8011718:	ad19      	add	r5, sp, #100	@ 0x64
 801171a:	ac39      	add	r4, sp, #228	@ 0xe4
 801171c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801171e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8011722:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011726:	930c      	str	r3, [sp, #48]	@ 0x30
 8011728:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801172a:	6963      	ldr	r3, [r4, #20]
 801172c:	440b      	add	r3, r1
 801172e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8011732:	4408      	add	r0, r1
 8011734:	b200      	sxth	r0, r0
 8011736:	4283      	cmp	r3, r0
 8011738:	900d      	str	r0, [sp, #52]	@ 0x34
 801173a:	f280 80c1 	bge.w	80118c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801173e:	428b      	cmp	r3, r1
 8011740:	da08      	bge.n	8011754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011742:	2a00      	cmp	r2, #0
 8011744:	dd06      	ble.n	8011754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011746:	1acb      	subs	r3, r1, r3
 8011748:	429a      	cmp	r2, r3
 801174a:	f2c0 80bb 	blt.w	80118c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801174e:	2b00      	cmp	r3, #0
 8011750:	f300 80b9 	bgt.w	80118c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8011754:	6967      	ldr	r7, [r4, #20]
 8011756:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801175a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801175c:	443b      	add	r3, r7
 801175e:	461f      	mov	r7, r3
 8011760:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011762:	1bdf      	subs	r7, r3, r7
 8011764:	4297      	cmp	r7, r2
 8011766:	bfa8      	it	ge
 8011768:	4617      	movge	r7, r2
 801176a:	2f00      	cmp	r7, #0
 801176c:	f340 813c 	ble.w	80119e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8011770:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8011772:	6829      	ldr	r1, [r5, #0]
 8011774:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011778:	f9bb 3000 	ldrsh.w	r3, [fp]
 801177c:	4411      	add	r1, r2
 801177e:	6820      	ldr	r0, [r4, #0]
 8011780:	4299      	cmp	r1, r3
 8011782:	dd1a      	ble.n	80117ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8011784:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8011788:	4402      	add	r2, r0
 801178a:	440b      	add	r3, r1
 801178c:	b21b      	sxth	r3, r3
 801178e:	429a      	cmp	r2, r3
 8011790:	dc13      	bgt.n	80117ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8011792:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011794:	a912      	add	r1, sp, #72	@ 0x48
 8011796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011798:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	9206      	str	r2, [sp, #24]
 801179e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80117a0:	9500      	str	r5, [sp, #0]
 80117a2:	9205      	str	r2, [sp, #20]
 80117a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80117a6:	e9cd b203 	strd	fp, r2, [sp, #12]
 80117aa:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80117ac:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80117b0:	aa49      	add	r2, sp, #292	@ 0x124
 80117b2:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80117b6:	4623      	mov	r3, r4
 80117b8:	47c8      	blx	r9
 80117ba:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80117be:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80117c2:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80117c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80117ca:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80117ce:	68a1      	ldr	r1, [r4, #8]
 80117d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80117d4:	ed94 6a08 	vldr	s12, [r4, #32]
 80117d8:	edd4 6a07 	vldr	s13, [r4, #28]
 80117dc:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80117e0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80117e4:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80117e8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80117ec:	edc4 6a07 	vstr	s13, [r4, #28]
 80117f0:	441a      	add	r2, r3
 80117f2:	6963      	ldr	r3, [r4, #20]
 80117f4:	3301      	adds	r3, #1
 80117f6:	6022      	str	r2, [r4, #0]
 80117f8:	6163      	str	r3, [r4, #20]
 80117fa:	69a3      	ldr	r3, [r4, #24]
 80117fc:	3b01      	subs	r3, #1
 80117fe:	61a3      	str	r3, [r4, #24]
 8011800:	6923      	ldr	r3, [r4, #16]
 8011802:	440b      	add	r3, r1
 8011804:	68e1      	ldr	r1, [r4, #12]
 8011806:	428b      	cmp	r3, r1
 8011808:	6123      	str	r3, [r4, #16]
 801180a:	db15      	blt.n	8011838 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801180c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8011810:	3201      	adds	r2, #1
 8011812:	1a5b      	subs	r3, r3, r1
 8011814:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011818:	6022      	str	r2, [r4, #0]
 801181a:	6123      	str	r3, [r4, #16]
 801181c:	edc4 6a07 	vstr	s13, [r4, #28]
 8011820:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8011824:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011828:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801182c:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8011830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011834:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8011838:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801183c:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8011840:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8011844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011848:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801184c:	68a9      	ldr	r1, [r5, #8]
 801184e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011852:	ed95 6a08 	vldr	s12, [r5, #32]
 8011856:	edd5 6a07 	vldr	s13, [r5, #28]
 801185a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801185e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011862:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011866:	e9d5 2300 	ldrd	r2, r3, [r5]
 801186a:	edc5 6a07 	vstr	s13, [r5, #28]
 801186e:	441a      	add	r2, r3
 8011870:	696b      	ldr	r3, [r5, #20]
 8011872:	3301      	adds	r3, #1
 8011874:	602a      	str	r2, [r5, #0]
 8011876:	616b      	str	r3, [r5, #20]
 8011878:	69ab      	ldr	r3, [r5, #24]
 801187a:	3b01      	subs	r3, #1
 801187c:	61ab      	str	r3, [r5, #24]
 801187e:	692b      	ldr	r3, [r5, #16]
 8011880:	440b      	add	r3, r1
 8011882:	68e9      	ldr	r1, [r5, #12]
 8011884:	428b      	cmp	r3, r1
 8011886:	612b      	str	r3, [r5, #16]
 8011888:	db15      	blt.n	80118b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801188a:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801188e:	3201      	adds	r2, #1
 8011890:	1a5b      	subs	r3, r3, r1
 8011892:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011896:	602a      	str	r2, [r5, #0]
 8011898:	612b      	str	r3, [r5, #16]
 801189a:	edc5 6a07 	vstr	s13, [r5, #28]
 801189e:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80118a2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80118a6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80118aa:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80118ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80118b2:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80118b6:	3f01      	subs	r7, #1
 80118b8:	e757      	b.n	801176a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80118ba:	ad39      	add	r5, sp, #228	@ 0xe4
 80118bc:	ac19      	add	r4, sp, #100	@ 0x64
 80118be:	e72d      	b.n	801171c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80118c0:	4613      	mov	r3, r2
 80118c2:	e744      	b.n	801174e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80118c4:	4613      	mov	r3, r2
 80118c6:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 80118c8:	469e      	mov	lr, r3
 80118ca:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 80118ce:	461f      	mov	r7, r3
 80118d0:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 80118d4:	f04f 0900 	mov.w	r9, #0
 80118d8:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 80118dc:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 80118e0:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 80118e4:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 80118e8:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 80118ec:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80118ee:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 80118f2:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 80118f6:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 80118fa:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 80118fe:	960e      	str	r6, [sp, #56]	@ 0x38
 8011900:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8011904:	2f00      	cmp	r7, #0
 8011906:	d146      	bne.n	8011996 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8011908:	449c      	add	ip, r3
 801190a:	1ad7      	subs	r7, r2, r3
 801190c:	f1b9 0f00 	cmp.w	r9, #0
 8011910:	d009      	beq.n	8011926 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8011912:	9039      	str	r0, [sp, #228]	@ 0xe4
 8011914:	913d      	str	r1, [sp, #244]	@ 0xf4
 8011916:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801191a:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801191e:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8011922:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8011926:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8011928:	f04f 0800 	mov.w	r8, #0
 801192c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8011930:	910e      	str	r1, [sp, #56]	@ 0x38
 8011932:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8011936:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801193a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801193e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8011942:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8011946:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801194a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801194e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8011952:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8011956:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801195a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801195e:	f1be 0f00 	cmp.w	lr, #0
 8011962:	d030      	beq.n	80119c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8011964:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8011966:	4450      	add	r0, sl
 8011968:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801196c:	4431      	add	r1, r6
 801196e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011972:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011976:	4549      	cmp	r1, r9
 8011978:	db08      	blt.n	801198c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801197a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801197e:	3001      	adds	r0, #1
 8011980:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011984:	eba1 0109 	sub.w	r1, r1, r9
 8011988:	ee37 7a06 	vadd.f32	s14, s14, s12
 801198c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011990:	f04f 0801 	mov.w	r8, #1
 8011994:	e7e3      	b.n	801195e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8011996:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8011998:	4450      	add	r0, sl
 801199a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801199e:	4431      	add	r1, r6
 80119a0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80119a4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80119a8:	4541      	cmp	r1, r8
 80119aa:	db08      	blt.n	80119be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80119ac:	ee76 6a85 	vadd.f32	s13, s13, s10
 80119b0:	3001      	adds	r0, #1
 80119b2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80119b6:	eba1 0108 	sub.w	r1, r1, r8
 80119ba:	ee77 7a86 	vadd.f32	s15, s15, s12
 80119be:	3f01      	subs	r7, #1
 80119c0:	f04f 0901 	mov.w	r9, #1
 80119c4:	e79e      	b.n	8011904 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80119c6:	449c      	add	ip, r3
 80119c8:	1aff      	subs	r7, r7, r3
 80119ca:	f1b8 0f00 	cmp.w	r8, #0
 80119ce:	d009      	beq.n	80119e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80119d0:	9019      	str	r0, [sp, #100]	@ 0x64
 80119d2:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80119d6:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80119da:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80119de:	911d      	str	r1, [sp, #116]	@ 0x74
 80119e0:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80119e4:	1ad2      	subs	r2, r2, r3
 80119e6:	e6b5      	b.n	8011754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80119e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	b923      	cbnz	r3, 80119f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80119ee:	4b04      	ldr	r3, [pc, #16]	@ (8011a00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80119f0:	6818      	ldr	r0, [r3, #0]
 80119f2:	6803      	ldr	r3, [r0, #0]
 80119f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119f6:	4798      	blx	r3
 80119f8:	b05b      	add	sp, #364	@ 0x16c
 80119fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119fe:	bf00      	nop
 8011a00:	24025120 	.word	0x24025120

08011a04 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8011a04:	2b03      	cmp	r3, #3
 8011a06:	d818      	bhi.n	8011a3a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8011a08:	e8df f003 	tbb	[pc, r3]
 8011a0c:	130d0602 	.word	0x130d0602
 8011a10:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011a14:	1850      	adds	r0, r2, r1
 8011a16:	4770      	bx	lr
 8011a18:	8803      	ldrh	r3, [r0, #0]
 8011a1a:	8880      	ldrh	r0, [r0, #4]
 8011a1c:	4418      	add	r0, r3
 8011a1e:	b200      	sxth	r0, r0
 8011a20:	1a80      	subs	r0, r0, r2
 8011a22:	3801      	subs	r0, #1
 8011a24:	4770      	bx	lr
 8011a26:	8803      	ldrh	r3, [r0, #0]
 8011a28:	8880      	ldrh	r0, [r0, #4]
 8011a2a:	4418      	add	r0, r3
 8011a2c:	b200      	sxth	r0, r0
 8011a2e:	1a40      	subs	r0, r0, r1
 8011a30:	e7f7      	b.n	8011a22 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8011a32:	f9b0 0000 	ldrsh.w	r0, [r0]
 8011a36:	4410      	add	r0, r2
 8011a38:	4770      	bx	lr
 8011a3a:	2000      	movs	r0, #0
 8011a3c:	4770      	bx	lr

08011a3e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8011a3e:	2b03      	cmp	r3, #3
 8011a40:	d817      	bhi.n	8011a72 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8011a42:	e8df f003 	tbb	[pc, r3]
 8011a46:	0602      	.short	0x0602
 8011a48:	1009      	.short	0x1009
 8011a4a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8011a4e:	1850      	adds	r0, r2, r1
 8011a50:	4770      	bx	lr
 8011a52:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011a56:	e7fa      	b.n	8011a4e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8011a58:	8843      	ldrh	r3, [r0, #2]
 8011a5a:	88c0      	ldrh	r0, [r0, #6]
 8011a5c:	4418      	add	r0, r3
 8011a5e:	b200      	sxth	r0, r0
 8011a60:	1a80      	subs	r0, r0, r2
 8011a62:	3801      	subs	r0, #1
 8011a64:	4770      	bx	lr
 8011a66:	8843      	ldrh	r3, [r0, #2]
 8011a68:	88c0      	ldrh	r0, [r0, #6]
 8011a6a:	4418      	add	r0, r3
 8011a6c:	b200      	sxth	r0, r0
 8011a6e:	1a40      	subs	r0, r0, r1
 8011a70:	e7f7      	b.n	8011a62 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8011a72:	2000      	movs	r0, #0
 8011a74:	4770      	bx	lr
	...

08011a78 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8011a78:	4b01      	ldr	r3, [pc, #4]	@ (8011a80 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	601a      	str	r2, [r3, #0]
 8011a7e:	4770      	bx	lr
 8011a80:	24025130 	.word	0x24025130

08011a84 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8011a84:	4603      	mov	r3, r0
 8011a86:	b1c8      	cbz	r0, 8011abc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8011a88:	0c02      	lsrs	r2, r0, #16
 8011a8a:	0412      	lsls	r2, r2, #16
 8011a8c:	b9a2      	cbnz	r2, 8011ab8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8011a8e:	0403      	lsls	r3, r0, #16
 8011a90:	2010      	movs	r0, #16
 8011a92:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8011a96:	bf04      	itt	eq
 8011a98:	021b      	lsleq	r3, r3, #8
 8011a9a:	3008      	addeq	r0, #8
 8011a9c:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8011aa0:	bf04      	itt	eq
 8011aa2:	011b      	lsleq	r3, r3, #4
 8011aa4:	3004      	addeq	r0, #4
 8011aa6:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8011aaa:	bf04      	itt	eq
 8011aac:	009b      	lsleq	r3, r3, #2
 8011aae:	3002      	addeq	r0, #2
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	db04      	blt.n	8011abe <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8011ab4:	3001      	adds	r0, #1
 8011ab6:	4770      	bx	lr
 8011ab8:	2000      	movs	r0, #0
 8011aba:	e7ea      	b.n	8011a92 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8011abc:	2020      	movs	r0, #32
 8011abe:	4770      	bx	lr

08011ac0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8011ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ac4:	b087      	sub	sp, #28
 8011ac6:	460d      	mov	r5, r1
 8011ac8:	4616      	mov	r6, r2
 8011aca:	4698      	mov	r8, r3
 8011acc:	4601      	mov	r1, r0
 8011ace:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8011ad2:	b120      	cbz	r0, 8011ade <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8011ad4:	b11a      	cbz	r2, 8011ade <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8011ad6:	2d1f      	cmp	r5, #31
 8011ad8:	d801      	bhi.n	8011ade <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8011ada:	2b1f      	cmp	r3, #31
 8011adc:	d904      	bls.n	8011ae8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8011ade:	2000      	movs	r0, #0
 8011ae0:	6038      	str	r0, [r7, #0]
 8011ae2:	b007      	add	sp, #28
 8011ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ae8:	b97d      	cbnz	r5, 8011b0a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8011aea:	b143      	cbz	r3, 8011afe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8011aec:	4602      	mov	r2, r0
 8011aee:	462b      	mov	r3, r5
 8011af0:	4641      	mov	r1, r8
 8011af2:	4630      	mov	r0, r6
 8011af4:	e9cd 4700 	strd	r4, r7, [sp]
 8011af8:	f7ff ffe2 	bl	8011ac0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011afc:	e7f1      	b.n	8011ae2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8011afe:	f04f 33ff 	mov.w	r3, #4294967295
 8011b02:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8011b06:	603b      	str	r3, [r7, #0]
 8011b08:	e7eb      	b.n	8011ae2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8011b0a:	fa32 fa05 	lsrs.w	sl, r2, r5
 8011b0e:	d106      	bne.n	8011b1e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8011b10:	4346      	muls	r6, r0
 8011b12:	fbb6 f0f4 	udiv	r0, r6, r4
 8011b16:	fb04 6610 	mls	r6, r4, r0, r6
 8011b1a:	603e      	str	r6, [r7, #0]
 8011b1c:	e7e1      	b.n	8011ae2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8011b1e:	2201      	movs	r2, #1
 8011b20:	fa00 fb05 	lsl.w	fp, r0, r5
 8011b24:	40aa      	lsls	r2, r5
 8011b26:	fbbb f9f4 	udiv	r9, fp, r4
 8011b2a:	3a01      	subs	r2, #1
 8011b2c:	fb0a f309 	mul.w	r3, sl, r9
 8011b30:	fb04 b919 	mls	r9, r4, r9, fp
 8011b34:	4016      	ands	r6, r2
 8011b36:	9303      	str	r3, [sp, #12]
 8011b38:	4630      	mov	r0, r6
 8011b3a:	f7ff ffa3 	bl	8011a84 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8011b3e:	462b      	mov	r3, r5
 8011b40:	460a      	mov	r2, r1
 8011b42:	4601      	mov	r1, r0
 8011b44:	4630      	mov	r0, r6
 8011b46:	e9cd 4700 	strd	r4, r7, [sp]
 8011b4a:	f7ff ffb9 	bl	8011ac0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011b4e:	4606      	mov	r6, r0
 8011b50:	4648      	mov	r0, r9
 8011b52:	eb05 0108 	add.w	r1, r5, r8
 8011b56:	f7ff ff95 	bl	8011a84 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8011b5a:	ab05      	add	r3, sp, #20
 8011b5c:	464a      	mov	r2, r9
 8011b5e:	e9cd 4300 	strd	r4, r3, [sp]
 8011b62:	4603      	mov	r3, r0
 8011b64:	4650      	mov	r0, sl
 8011b66:	f7ff ffab 	bl	8011ac0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011b6a:	6839      	ldr	r1, [r7, #0]
 8011b6c:	9a05      	ldr	r2, [sp, #20]
 8011b6e:	9b03      	ldr	r3, [sp, #12]
 8011b70:	4411      	add	r1, r2
 8011b72:	fbb1 f2f4 	udiv	r2, r1, r4
 8011b76:	18d3      	adds	r3, r2, r3
 8011b78:	fb04 1412 	mls	r4, r4, r2, r1
 8011b7c:	441e      	add	r6, r3
 8011b7e:	603c      	str	r4, [r7, #0]
 8011b80:	4430      	add	r0, r6
 8011b82:	e7ae      	b.n	8011ae2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08011b84 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8011b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b88:	b085      	sub	sp, #20
 8011b8a:	f1b0 0900 	subs.w	r9, r0, #0
 8011b8e:	461d      	mov	r5, r3
 8011b90:	4617      	mov	r7, r2
 8011b92:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8011b94:	bfbb      	ittet	lt
 8011b96:	f1c9 0900 	rsblt	r9, r9, #0
 8011b9a:	f04f 36ff 	movlt.w	r6, #4294967295
 8011b9e:	2601      	movge	r6, #1
 8011ba0:	6823      	ldrlt	r3, [r4, #0]
 8011ba2:	bfbc      	itt	lt
 8011ba4:	425b      	neglt	r3, r3
 8011ba6:	6023      	strlt	r3, [r4, #0]
 8011ba8:	2a00      	cmp	r2, #0
 8011baa:	da04      	bge.n	8011bb6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8011bac:	6823      	ldr	r3, [r4, #0]
 8011bae:	4257      	negs	r7, r2
 8011bb0:	4276      	negs	r6, r6
 8011bb2:	425b      	negs	r3, r3
 8011bb4:	6023      	str	r3, [r4, #0]
 8011bb6:	2d00      	cmp	r5, #0
 8011bb8:	4638      	mov	r0, r7
 8011bba:	bfba      	itte	lt
 8011bbc:	426d      	neglt	r5, r5
 8011bbe:	f04f 38ff 	movlt.w	r8, #4294967295
 8011bc2:	f04f 0801 	movge.w	r8, #1
 8011bc6:	f7ff ff5d 	bl	8011a84 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8011bca:	ab03      	add	r3, sp, #12
 8011bcc:	463a      	mov	r2, r7
 8011bce:	e9cd 5300 	strd	r5, r3, [sp]
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	4648      	mov	r0, r9
 8011bd6:	f7ff ff73 	bl	8011ac0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011bda:	6823      	ldr	r3, [r4, #0]
 8011bdc:	9a03      	ldr	r2, [sp, #12]
 8011bde:	4546      	cmp	r6, r8
 8011be0:	441a      	add	r2, r3
 8011be2:	fb92 f3f5 	sdiv	r3, r2, r5
 8011be6:	4418      	add	r0, r3
 8011be8:	fb05 2313 	mls	r3, r5, r3, r2
 8011bec:	bf18      	it	ne
 8011bee:	4240      	negne	r0, r0
 8011bf0:	1c72      	adds	r2, r6, #1
 8011bf2:	6023      	str	r3, [r4, #0]
 8011bf4:	d105      	bne.n	8011c02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	f1c3 0200 	rsb	r2, r3, #0
 8011bfc:	db0b      	blt.n	8011c16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8011bfe:	6022      	str	r2, [r4, #0]
 8011c00:	e006      	b.n	8011c10 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011c02:	2e01      	cmp	r6, #1
 8011c04:	d104      	bne.n	8011c10 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	da02      	bge.n	8011c10 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011c0a:	442b      	add	r3, r5
 8011c0c:	3801      	subs	r0, #1
 8011c0e:	6023      	str	r3, [r4, #0]
 8011c10:	b005      	add	sp, #20
 8011c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c16:	3801      	subs	r0, #1
 8011c18:	1b52      	subs	r2, r2, r5
 8011c1a:	e7f0      	b.n	8011bfe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08011c1c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8011c1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011c20:	4c1c      	ldr	r4, [pc, #112]	@ (8011c94 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8011c22:	4605      	mov	r5, r0
 8011c24:	6807      	ldr	r7, [r0, #0]
 8011c26:	69a3      	ldr	r3, [r4, #24]
 8011c28:	b92b      	cbnz	r3, 8011c36 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8011c2a:	6840      	ldr	r0, [r0, #4]
 8011c2c:	e9c5 7000 	strd	r7, r0, [r5]
 8011c30:	b004      	add	sp, #16
 8011c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c36:	f04f 0802 	mov.w	r8, #2
 8011c3a:	68a2      	ldr	r2, [r4, #8]
 8011c3c:	ae04      	add	r6, sp, #16
 8011c3e:	6820      	ldr	r0, [r4, #0]
 8011c40:	fb93 f1f8 	sdiv	r1, r3, r8
 8011c44:	440a      	add	r2, r1
 8011c46:	69e1      	ldr	r1, [r4, #28]
 8011c48:	f846 2d04 	str.w	r2, [r6, #-4]!
 8011c4c:	463a      	mov	r2, r7
 8011c4e:	9600      	str	r6, [sp, #0]
 8011c50:	f7ff ff98 	bl	8011b84 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011c54:	69a3      	ldr	r3, [r4, #24]
 8011c56:	4607      	mov	r7, r0
 8011c58:	686a      	ldr	r2, [r5, #4]
 8011c5a:	6a21      	ldr	r1, [r4, #32]
 8011c5c:	9600      	str	r6, [sp, #0]
 8011c5e:	6860      	ldr	r0, [r4, #4]
 8011c60:	f7ff ff90 	bl	8011b84 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011c64:	69a3      	ldr	r3, [r4, #24]
 8011c66:	6962      	ldr	r2, [r4, #20]
 8011c68:	4407      	add	r7, r0
 8011c6a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8011c6c:	9600      	str	r6, [sp, #0]
 8011c6e:	68e0      	ldr	r0, [r4, #12]
 8011c70:	fb93 f8f8 	sdiv	r8, r3, r8
 8011c74:	4442      	add	r2, r8
 8011c76:	9203      	str	r2, [sp, #12]
 8011c78:	682a      	ldr	r2, [r5, #0]
 8011c7a:	f7ff ff83 	bl	8011b84 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011c7e:	4680      	mov	r8, r0
 8011c80:	9600      	str	r6, [sp, #0]
 8011c82:	69a3      	ldr	r3, [r4, #24]
 8011c84:	686a      	ldr	r2, [r5, #4]
 8011c86:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011c88:	6920      	ldr	r0, [r4, #16]
 8011c8a:	f7ff ff7b 	bl	8011b84 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011c8e:	4440      	add	r0, r8
 8011c90:	e7cc      	b.n	8011c2c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8011c92:	bf00      	nop
 8011c94:	24025134 	.word	0x24025134

08011c98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8011c98:	4b07      	ldr	r3, [pc, #28]	@ (8011cb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8011c9a:	781b      	ldrb	r3, [r3, #0]
 8011c9c:	2b01      	cmp	r3, #1
 8011c9e:	d109      	bne.n	8011cb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8011ca0:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011ca4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011ca8:	8003      	strh	r3, [r0, #0]
 8011caa:	4b04      	ldr	r3, [pc, #16]	@ (8011cbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8011cac:	881b      	ldrh	r3, [r3, #0]
 8011cae:	3b01      	subs	r3, #1
 8011cb0:	1a9b      	subs	r3, r3, r2
 8011cb2:	800b      	strh	r3, [r1, #0]
 8011cb4:	4770      	bx	lr
 8011cb6:	bf00      	nop
 8011cb8:	24025118 	.word	0x24025118
 8011cbc:	24025114 	.word	0x24025114

08011cc0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8011cc0:	4b07      	ldr	r3, [pc, #28]	@ (8011ce0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8011cc2:	b510      	push	{r4, lr}
 8011cc4:	781b      	ldrb	r3, [r3, #0]
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	d108      	bne.n	8011cdc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8011cca:	4b06      	ldr	r3, [pc, #24]	@ (8011ce4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8011ccc:	880c      	ldrh	r4, [r1, #0]
 8011cce:	881b      	ldrh	r3, [r3, #0]
 8011cd0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011cd4:	3b01      	subs	r3, #1
 8011cd6:	1b1b      	subs	r3, r3, r4
 8011cd8:	8003      	strh	r3, [r0, #0]
 8011cda:	800a      	strh	r2, [r1, #0]
 8011cdc:	bd10      	pop	{r4, pc}
 8011cde:	bf00      	nop
 8011ce0:	24025118 	.word	0x24025118
 8011ce4:	24025114 	.word	0x24025114

08011ce8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8011ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8011d14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8011cea:	b510      	push	{r4, lr}
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	2b01      	cmp	r3, #1
 8011cf0:	d10e      	bne.n	8011d10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8011cf2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8011cf6:	8843      	ldrh	r3, [r0, #2]
 8011cf8:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011cfc:	18ca      	adds	r2, r1, r3
 8011cfe:	4b06      	ldr	r3, [pc, #24]	@ (8011d18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8011d00:	8044      	strh	r4, [r0, #2]
 8011d02:	881b      	ldrh	r3, [r3, #0]
 8011d04:	1a9b      	subs	r3, r3, r2
 8011d06:	8003      	strh	r3, [r0, #0]
 8011d08:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011d0c:	8081      	strh	r1, [r0, #4]
 8011d0e:	80c3      	strh	r3, [r0, #6]
 8011d10:	bd10      	pop	{r4, pc}
 8011d12:	bf00      	nop
 8011d14:	24025118 	.word	0x24025118
 8011d18:	24025114 	.word	0x24025114

08011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8011d1c:	4b08      	ldr	r3, [pc, #32]	@ (8011d40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	2b01      	cmp	r3, #1
 8011d22:	d10c      	bne.n	8011d3e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8011d24:	8803      	ldrh	r3, [r0, #0]
 8011d26:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8011d2a:	8842      	ldrh	r2, [r0, #2]
 8011d2c:	8002      	strh	r2, [r0, #0]
 8011d2e:	185a      	adds	r2, r3, r1
 8011d30:	4b04      	ldr	r3, [pc, #16]	@ (8011d44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8011d32:	881b      	ldrh	r3, [r3, #0]
 8011d34:	1a9b      	subs	r3, r3, r2
 8011d36:	8043      	strh	r3, [r0, #2]
 8011d38:	88c3      	ldrh	r3, [r0, #6]
 8011d3a:	80c1      	strh	r1, [r0, #6]
 8011d3c:	8083      	strh	r3, [r0, #4]
 8011d3e:	4770      	bx	lr
 8011d40:	24025118 	.word	0x24025118
 8011d44:	24025114 	.word	0x24025114

08011d48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8011d48:	4b07      	ldr	r3, [pc, #28]	@ (8011d68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8011d4a:	b510      	push	{r4, lr}
 8011d4c:	781b      	ldrb	r3, [r3, #0]
 8011d4e:	2b01      	cmp	r3, #1
 8011d50:	d108      	bne.n	8011d64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8011d52:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011d56:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011d5a:	8003      	strh	r3, [r0, #0]
 8011d5c:	8893      	ldrh	r3, [r2, #4]
 8011d5e:	3b01      	subs	r3, #1
 8011d60:	1b1b      	subs	r3, r3, r4
 8011d62:	800b      	strh	r3, [r1, #0]
 8011d64:	bd10      	pop	{r4, pc}
 8011d66:	bf00      	nop
 8011d68:	24025118 	.word	0x24025118

08011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8011d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8011d98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8011d6e:	460a      	mov	r2, r1
 8011d70:	b510      	push	{r4, lr}
 8011d72:	781b      	ldrb	r3, [r3, #0]
 8011d74:	2b01      	cmp	r3, #1
 8011d76:	d10d      	bne.n	8011d94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8011d78:	8881      	ldrh	r1, [r0, #4]
 8011d7a:	8803      	ldrh	r3, [r0, #0]
 8011d7c:	440b      	add	r3, r1
 8011d7e:	4601      	mov	r1, r0
 8011d80:	3b01      	subs	r3, #1
 8011d82:	f821 3b02 	strh.w	r3, [r1], #2
 8011d86:	f7ff ffdf 	bl	8011d48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8011d8a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011d8e:	88c2      	ldrh	r2, [r0, #6]
 8011d90:	80c3      	strh	r3, [r0, #6]
 8011d92:	8082      	strh	r2, [r0, #4]
 8011d94:	bd10      	pop	{r4, pc}
 8011d96:	bf00      	nop
 8011d98:	24025118 	.word	0x24025118

08011d9c <_ZN8touchgfx11Application13requestRedrawEv>:
 8011d9c:	4b06      	ldr	r3, [pc, #24]	@ (8011db8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8011d9e:	2100      	movs	r1, #0
 8011da0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011da4:	4b05      	ldr	r3, [pc, #20]	@ (8011dbc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8011da6:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8011daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011dae:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8011db2:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8011db6:	4770      	bx	lr
 8011db8:	24025114 	.word	0x24025114
 8011dbc:	24025116 	.word	0x24025116

08011dc0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8011dc0:	4b03      	ldr	r3, [pc, #12]	@ (8011dd0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8011dc2:	6818      	ldr	r0, [r3, #0]
 8011dc4:	b110      	cbz	r0, 8011dcc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8011dc6:	6803      	ldr	r3, [r0, #0]
 8011dc8:	699b      	ldr	r3, [r3, #24]
 8011dca:	4718      	bx	r3
 8011dcc:	4770      	bx	lr
 8011dce:	bf00      	nop
 8011dd0:	24025164 	.word	0x24025164

08011dd4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8011dd4:	4770      	bx	lr
	...

08011dd8 <_ZN8touchgfx11Application4drawEv>:
 8011dd8:	4b09      	ldr	r3, [pc, #36]	@ (8011e00 <_ZN8touchgfx11Application4drawEv+0x28>)
 8011dda:	b507      	push	{r0, r1, r2, lr}
 8011ddc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011de0:	2100      	movs	r1, #0
 8011de2:	4b08      	ldr	r3, [pc, #32]	@ (8011e04 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8011de4:	9100      	str	r1, [sp, #0]
 8011de6:	4669      	mov	r1, sp
 8011de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011dec:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011df0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011df4:	6803      	ldr	r3, [r0, #0]
 8011df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011df8:	4798      	blx	r3
 8011dfa:	b003      	add	sp, #12
 8011dfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e00:	24025114 	.word	0x24025114
 8011e04:	24025116 	.word	0x24025116

08011e08 <_ZN8touchgfx11Application10invalidateEv>:
 8011e08:	4b09      	ldr	r3, [pc, #36]	@ (8011e30 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8011e0a:	b082      	sub	sp, #8
 8011e0c:	2100      	movs	r1, #0
 8011e0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011e12:	4b08      	ldr	r3, [pc, #32]	@ (8011e34 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8011e14:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011e18:	aa02      	add	r2, sp, #8
 8011e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e1e:	9100      	str	r1, [sp, #0]
 8011e20:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011e24:	6803      	ldr	r3, [r0, #0]
 8011e26:	e912 0006 	ldmdb	r2, {r1, r2}
 8011e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e2c:	b002      	add	sp, #8
 8011e2e:	4718      	bx	r3
 8011e30:	24025114 	.word	0x24025114
 8011e34:	24025116 	.word	0x24025116

08011e38 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8011e38:	4b03      	ldr	r3, [pc, #12]	@ (8011e48 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8011e3a:	6818      	ldr	r0, [r3, #0]
 8011e3c:	b110      	cbz	r0, 8011e44 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8011e3e:	6803      	ldr	r3, [r0, #0]
 8011e40:	69db      	ldr	r3, [r3, #28]
 8011e42:	4718      	bx	r3
 8011e44:	4770      	bx	lr
 8011e46:	bf00      	nop
 8011e48:	24025164 	.word	0x24025164

08011e4c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8011e4c:	4b03      	ldr	r3, [pc, #12]	@ (8011e5c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8011e4e:	6818      	ldr	r0, [r3, #0]
 8011e50:	b110      	cbz	r0, 8011e58 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8011e52:	6803      	ldr	r3, [r0, #0]
 8011e54:	6a1b      	ldr	r3, [r3, #32]
 8011e56:	4718      	bx	r3
 8011e58:	4770      	bx	lr
 8011e5a:	bf00      	nop
 8011e5c:	24025164 	.word	0x24025164

08011e60 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8011e60:	2300      	movs	r3, #0
 8011e62:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8011e66:	4770      	bx	lr

08011e68 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8011e68:	4b03      	ldr	r3, [pc, #12]	@ (8011e78 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8011e6a:	6818      	ldr	r0, [r3, #0]
 8011e6c:	b110      	cbz	r0, 8011e74 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8011e6e:	6803      	ldr	r3, [r0, #0]
 8011e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e72:	4718      	bx	r3
 8011e74:	4770      	bx	lr
 8011e76:	bf00      	nop
 8011e78:	24025164 	.word	0x24025164

08011e7c <_ZN8touchgfx11ApplicationD1Ev>:
 8011e7c:	4770      	bx	lr

08011e7e <_ZN8touchgfx11ApplicationD0Ev>:
 8011e7e:	b510      	push	{r4, lr}
 8011e80:	4604      	mov	r4, r0
 8011e82:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8011e86:	f00e f917 	bl	80200b8 <_ZdlPvj>
 8011e8a:	4620      	mov	r0, r4
 8011e8c:	bd10      	pop	{r4, pc}

08011e8e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8011e8e:	b510      	push	{r4, lr}
 8011e90:	f9b1 4000 	ldrsh.w	r4, [r1]
 8011e94:	888a      	ldrh	r2, [r1, #4]
 8011e96:	f9b0 3000 	ldrsh.w	r3, [r0]
 8011e9a:	4422      	add	r2, r4
 8011e9c:	b212      	sxth	r2, r2
 8011e9e:	4293      	cmp	r3, r2
 8011ea0:	da15      	bge.n	8011ece <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8011ea2:	8882      	ldrh	r2, [r0, #4]
 8011ea4:	4413      	add	r3, r2
 8011ea6:	b21b      	sxth	r3, r3
 8011ea8:	429c      	cmp	r4, r3
 8011eaa:	da10      	bge.n	8011ece <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8011eac:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8011eb0:	88c9      	ldrh	r1, [r1, #6]
 8011eb2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011eb6:	4419      	add	r1, r3
 8011eb8:	b209      	sxth	r1, r1
 8011eba:	428a      	cmp	r2, r1
 8011ebc:	da07      	bge.n	8011ece <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8011ebe:	88c0      	ldrh	r0, [r0, #6]
 8011ec0:	4410      	add	r0, r2
 8011ec2:	b200      	sxth	r0, r0
 8011ec4:	4283      	cmp	r3, r0
 8011ec6:	bfac      	ite	ge
 8011ec8:	2000      	movge	r0, #0
 8011eca:	2001      	movlt	r0, #1
 8011ecc:	bd10      	pop	{r4, pc}
 8011ece:	2000      	movs	r0, #0
 8011ed0:	e7fc      	b.n	8011ecc <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08011ed2 <_ZN8touchgfx4Rect10restrictToEss>:
 8011ed2:	f9b0 3000 	ldrsh.w	r3, [r0]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	b510      	push	{r4, lr}
 8011eda:	da04      	bge.n	8011ee6 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8011edc:	8884      	ldrh	r4, [r0, #4]
 8011ede:	4423      	add	r3, r4
 8011ee0:	8083      	strh	r3, [r0, #4]
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	8003      	strh	r3, [r0, #0]
 8011ee6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011eea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011eee:	1b09      	subs	r1, r1, r4
 8011ef0:	428b      	cmp	r3, r1
 8011ef2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8011ef6:	bfc8      	it	gt
 8011ef8:	8081      	strhgt	r1, [r0, #4]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	da04      	bge.n	8011f08 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8011efe:	88c1      	ldrh	r1, [r0, #6]
 8011f00:	440b      	add	r3, r1
 8011f02:	80c3      	strh	r3, [r0, #6]
 8011f04:	2300      	movs	r3, #0
 8011f06:	8043      	strh	r3, [r0, #2]
 8011f08:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8011f0c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8011f10:	1a52      	subs	r2, r2, r1
 8011f12:	4293      	cmp	r3, r2
 8011f14:	bfc8      	it	gt
 8011f16:	80c2      	strhgt	r2, [r0, #6]
 8011f18:	bd10      	pop	{r4, pc}
	...

08011f1c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8011f1c:	4b10      	ldr	r3, [pc, #64]	@ (8011f60 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8011f1e:	b510      	push	{r4, lr}
 8011f20:	460c      	mov	r4, r1
 8011f22:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011f26:	4b0f      	ldr	r3, [pc, #60]	@ (8011f64 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8011f28:	4620      	mov	r0, r4
 8011f2a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011f2e:	f7ff ffd0 	bl	8011ed2 <_ZN8touchgfx4Rect10restrictToEss>
 8011f32:	4b0d      	ldr	r3, [pc, #52]	@ (8011f68 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8011f34:	6818      	ldr	r0, [r3, #0]
 8011f36:	b190      	cbz	r0, 8011f5e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8011f38:	6803      	ldr	r3, [r0, #0]
 8011f3a:	4621      	mov	r1, r4
 8011f3c:	689b      	ldr	r3, [r3, #8]
 8011f3e:	4798      	blx	r3
 8011f40:	4b0a      	ldr	r3, [pc, #40]	@ (8011f6c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8011f42:	6818      	ldr	r0, [r3, #0]
 8011f44:	b118      	cbz	r0, 8011f4e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8011f46:	6803      	ldr	r3, [r0, #0]
 8011f48:	4621      	mov	r1, r4
 8011f4a:	689b      	ldr	r3, [r3, #8]
 8011f4c:	4798      	blx	r3
 8011f4e:	4b08      	ldr	r3, [pc, #32]	@ (8011f70 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8011f50:	4621      	mov	r1, r4
 8011f52:	6818      	ldr	r0, [r3, #0]
 8011f54:	6803      	ldr	r3, [r0, #0]
 8011f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f5a:	69db      	ldr	r3, [r3, #28]
 8011f5c:	4718      	bx	r3
 8011f5e:	bd10      	pop	{r4, pc}
 8011f60:	24025116 	.word	0x24025116
 8011f64:	24025114 	.word	0x24025114
 8011f68:	24025164 	.word	0x24025164
 8011f6c:	24025160 	.word	0x24025160
 8011f70:	24025120 	.word	0x24025120

08011f74 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8011f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f76:	4606      	mov	r6, r0
 8011f78:	4608      	mov	r0, r1
 8011f7a:	460f      	mov	r7, r1
 8011f7c:	f7fb fbb1 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011f80:	b9e8      	cbnz	r0, 8011fbe <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011f82:	f9b7 5000 	ldrsh.w	r5, [r7]
 8011f86:	f9b6 4000 	ldrsh.w	r4, [r6]
 8011f8a:	42a5      	cmp	r5, r4
 8011f8c:	db17      	blt.n	8011fbe <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011f8e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011f92:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8011f96:	429a      	cmp	r2, r3
 8011f98:	db11      	blt.n	8011fbe <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011f9a:	88b9      	ldrh	r1, [r7, #4]
 8011f9c:	440d      	add	r5, r1
 8011f9e:	88b1      	ldrh	r1, [r6, #4]
 8011fa0:	440c      	add	r4, r1
 8011fa2:	b22d      	sxth	r5, r5
 8011fa4:	b224      	sxth	r4, r4
 8011fa6:	42a5      	cmp	r5, r4
 8011fa8:	dc09      	bgt.n	8011fbe <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011faa:	88f8      	ldrh	r0, [r7, #6]
 8011fac:	4410      	add	r0, r2
 8011fae:	88f2      	ldrh	r2, [r6, #6]
 8011fb0:	4413      	add	r3, r2
 8011fb2:	b200      	sxth	r0, r0
 8011fb4:	b21b      	sxth	r3, r3
 8011fb6:	4298      	cmp	r0, r3
 8011fb8:	bfcc      	ite	gt
 8011fba:	2000      	movgt	r0, #0
 8011fbc:	2001      	movle	r0, #1
 8011fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011fc0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8011fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	4608      	mov	r0, r1
 8011fc6:	460d      	mov	r5, r1
 8011fc8:	f7fb fb8b 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011fcc:	b978      	cbnz	r0, 8011fee <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8011fce:	4620      	mov	r0, r4
 8011fd0:	f7fb fb87 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011fd4:	f9b5 6000 	ldrsh.w	r6, [r5]
 8011fd8:	b150      	cbz	r0, 8011ff0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8011fda:	8026      	strh	r6, [r4, #0]
 8011fdc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8011fe0:	8063      	strh	r3, [r4, #2]
 8011fe2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8011fe6:	80a3      	strh	r3, [r4, #4]
 8011fe8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011fec:	80e3      	strh	r3, [r4, #6]
 8011fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ff0:	f9b4 1000 	ldrsh.w	r1, [r4]
 8011ff4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8011ff8:	42b1      	cmp	r1, r6
 8011ffa:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8011ffe:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8012002:	460f      	mov	r7, r1
 8012004:	88ed      	ldrh	r5, [r5, #6]
 8012006:	bfa8      	it	ge
 8012008:	4637      	movge	r7, r6
 801200a:	4293      	cmp	r3, r2
 801200c:	4618      	mov	r0, r3
 801200e:	4466      	add	r6, ip
 8012010:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012014:	bfa8      	it	ge
 8012016:	4610      	movge	r0, r2
 8012018:	442a      	add	r2, r5
 801201a:	88e5      	ldrh	r5, [r4, #6]
 801201c:	4461      	add	r1, ip
 801201e:	b236      	sxth	r6, r6
 8012020:	8027      	strh	r7, [r4, #0]
 8012022:	442b      	add	r3, r5
 8012024:	b209      	sxth	r1, r1
 8012026:	b212      	sxth	r2, r2
 8012028:	8060      	strh	r0, [r4, #2]
 801202a:	b21b      	sxth	r3, r3
 801202c:	428e      	cmp	r6, r1
 801202e:	bfac      	ite	ge
 8012030:	ebc7 0106 	rsbge	r1, r7, r6
 8012034:	ebc7 0101 	rsblt	r1, r7, r1
 8012038:	429a      	cmp	r2, r3
 801203a:	bfac      	ite	ge
 801203c:	ebc0 0202 	rsbge	r2, r0, r2
 8012040:	ebc0 0203 	rsblt	r2, r0, r3
 8012044:	80a1      	strh	r1, [r4, #4]
 8012046:	80e2      	strh	r2, [r4, #6]
 8012048:	e7d1      	b.n	8011fee <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801204c <_ZN8touchgfx11Application11getInstanceEv>:
 801204c:	4b01      	ldr	r3, [pc, #4]	@ (8012054 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801204e:	6818      	ldr	r0, [r3, #0]
 8012050:	4770      	bx	lr
 8012052:	bf00      	nop
 8012054:	24025174 	.word	0x24025174

08012058 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8012058:	2300      	movs	r3, #0
 801205a:	b510      	push	{r4, lr}
 801205c:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8012060:	4604      	mov	r4, r0
 8012062:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8012066:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801206a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801206e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8012072:	429a      	cmp	r2, r3
 8012074:	d90e      	bls.n	8012094 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8012076:	18e2      	adds	r2, r4, r3
 8012078:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801207c:	b122      	cbz	r2, 8012088 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801207e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8012082:	6803      	ldr	r3, [r0, #0]
 8012084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012086:	4798      	blx	r3
 8012088:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801208c:	3301      	adds	r3, #1
 801208e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8012092:	e7ea      	b.n	801206a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8012094:	bd10      	pop	{r4, pc}

08012096 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8012096:	2300      	movs	r3, #0
 8012098:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801209c:	30a4      	adds	r0, #164	@ 0xa4
 801209e:	f820 3c24 	strh.w	r3, [r0, #-36]
 80120a2:	f802 3b01 	strb.w	r3, [r2], #1
 80120a6:	4282      	cmp	r2, r0
 80120a8:	d1fb      	bne.n	80120a2 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80120aa:	4770      	bx	lr

080120ac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80120ac:	b570      	push	{r4, r5, r6, lr}
 80120ae:	4c0b      	ldr	r4, [pc, #44]	@ (80120dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80120b0:	4605      	mov	r5, r0
 80120b2:	460e      	mov	r6, r1
 80120b4:	6820      	ldr	r0, [r4, #0]
 80120b6:	b110      	cbz	r0, 80120be <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80120b8:	6803      	ldr	r3, [r0, #0]
 80120ba:	695b      	ldr	r3, [r3, #20]
 80120bc:	4798      	blx	r3
 80120be:	1d28      	adds	r0, r5, #4
 80120c0:	f7ff ffe9 	bl	8012096 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80120c4:	6026      	str	r6, [r4, #0]
 80120c6:	6833      	ldr	r3, [r6, #0]
 80120c8:	4630      	mov	r0, r6
 80120ca:	68db      	ldr	r3, [r3, #12]
 80120cc:	4798      	blx	r3
 80120ce:	682b      	ldr	r3, [r5, #0]
 80120d0:	4628      	mov	r0, r5
 80120d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80120d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120d8:	4718      	bx	r3
 80120da:	bf00      	nop
 80120dc:	24025164 	.word	0x24025164

080120e0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80120e0:	2300      	movs	r3, #0
 80120e2:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 80120e6:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 80120ea:	461a      	mov	r2, r3
 80120ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120ee:	461c      	mov	r4, r3
 80120f0:	461d      	mov	r5, r3
 80120f2:	459c      	cmp	ip, r3
 80120f4:	dd1a      	ble.n	801212c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80120f6:	18c6      	adds	r6, r0, r3
 80120f8:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 80120fc:	b16e      	cbz	r6, 801211a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80120fe:	429a      	cmp	r2, r3
 8012100:	d008      	beq.n	8012114 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8012102:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8012106:	fa1f fe82 	uxth.w	lr, r2
 801210a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801210e:	1887      	adds	r7, r0, r2
 8012110:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8012114:	3201      	adds	r2, #1
 8012116:	3301      	adds	r3, #1
 8012118:	e7eb      	b.n	80120f2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801211a:	4299      	cmp	r1, r3
 801211c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8012120:	bfa8      	it	ge
 8012122:	3501      	addge	r5, #1
 8012124:	429e      	cmp	r6, r3
 8012126:	bfc8      	it	gt
 8012128:	3401      	addgt	r4, #1
 801212a:	e7f4      	b.n	8012116 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801212c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8012130:	1b49      	subs	r1, r1, r5
 8012132:	1b1b      	subs	r3, r3, r4
 8012134:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8012138:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801213c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8012140:	4293      	cmp	r3, r2
 8012142:	dd03      	ble.n	801214c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8012144:	3b01      	subs	r3, #1
 8012146:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801214a:	e7f7      	b.n	801213c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08012150 <_ZN8touchgfx11Application15handleTickEventEv>:
 8012150:	b570      	push	{r4, r5, r6, lr}
 8012152:	4d16      	ldr	r5, [pc, #88]	@ (80121ac <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8012154:	4604      	mov	r4, r0
 8012156:	6828      	ldr	r0, [r5, #0]
 8012158:	b140      	cbz	r0, 801216c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801215a:	7a03      	ldrb	r3, [r0, #8]
 801215c:	b933      	cbnz	r3, 801216c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801215e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8012162:	6803      	ldr	r3, [r0, #0]
 8012164:	689b      	ldr	r3, [r3, #8]
 8012166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801216a:	4718      	bx	r3
 801216c:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8012170:	4e0f      	ldr	r6, [pc, #60]	@ (80121b0 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8012172:	b973      	cbnz	r3, 8012192 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012174:	b168      	cbz	r0, 8012192 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012176:	7a03      	ldrb	r3, [r0, #8]
 8012178:	b15b      	cbz	r3, 8012192 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801217a:	6830      	ldr	r0, [r6, #0]
 801217c:	b110      	cbz	r0, 8012184 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801217e:	6803      	ldr	r3, [r0, #0]
 8012180:	691b      	ldr	r3, [r3, #16]
 8012182:	4798      	blx	r3
 8012184:	6828      	ldr	r0, [r5, #0]
 8012186:	6803      	ldr	r3, [r0, #0]
 8012188:	68db      	ldr	r3, [r3, #12]
 801218a:	4798      	blx	r3
 801218c:	2301      	movs	r3, #1
 801218e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8012192:	3404      	adds	r4, #4
 8012194:	4620      	mov	r0, r4
 8012196:	f7ff ff5f 	bl	8012058 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801219a:	4620      	mov	r0, r4
 801219c:	f7ff ffa0 	bl	80120e0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80121a0:	6830      	ldr	r0, [r6, #0]
 80121a2:	b110      	cbz	r0, 80121aa <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80121a4:	6803      	ldr	r3, [r0, #0]
 80121a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121a8:	e7dd      	b.n	8012166 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80121aa:	bd70      	pop	{r4, r5, r6, pc}
 80121ac:	24025168 	.word	0x24025168
 80121b0:	24025164 	.word	0x24025164

080121b4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80121b4:	4603      	mov	r3, r0
 80121b6:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80121ba:	2200      	movs	r2, #0
 80121bc:	801a      	strh	r2, [r3, #0]
 80121be:	3308      	adds	r3, #8
 80121c0:	f823 2c06 	strh.w	r2, [r3, #-6]
 80121c4:	f823 2c04 	strh.w	r2, [r3, #-4]
 80121c8:	f823 2c02 	strh.w	r2, [r3, #-2]
 80121cc:	428b      	cmp	r3, r1
 80121ce:	d1f5      	bne.n	80121bc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80121d0:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80121d4:	4770      	bx	lr
	...

080121d8 <_ZN8touchgfx11ApplicationC1Ev>:
 80121d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121da:	4b1d      	ldr	r3, [pc, #116]	@ (8012250 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80121dc:	4606      	mov	r6, r0
 80121de:	4604      	mov	r4, r0
 80121e0:	2500      	movs	r5, #0
 80121e2:	f846 3b04 	str.w	r3, [r6], #4
 80121e6:	22a8      	movs	r2, #168	@ 0xa8
 80121e8:	2100      	movs	r1, #0
 80121ea:	4630      	mov	r0, r6
 80121ec:	f00e fd78 	bl	8020ce0 <memset>
 80121f0:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 80121f4:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80121f8:	4f16      	ldr	r7, [pc, #88]	@ (8012254 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80121fa:	f7ff ffdb 	bl	80121b4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80121fe:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8012202:	f7ff ffd7 	bl	80121b4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012206:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801220a:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801220e:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8012212:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8012216:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801221a:	490f      	ldr	r1, [pc, #60]	@ (8012258 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801221c:	480f      	ldr	r0, [pc, #60]	@ (801225c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801221e:	f00d f8bb 	bl	801f398 <CRC_Lock>
 8012222:	4b0f      	ldr	r3, [pc, #60]	@ (8012260 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8012224:	b158      	cbz	r0, 801223e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8012226:	801d      	strh	r5, [r3, #0]
 8012228:	2300      	movs	r3, #0
 801222a:	4a0e      	ldr	r2, [pc, #56]	@ (8012264 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801222c:	4630      	mov	r0, r6
 801222e:	6013      	str	r3, [r2, #0]
 8012230:	4a0d      	ldr	r2, [pc, #52]	@ (8012268 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8012232:	603b      	str	r3, [r7, #0]
 8012234:	6013      	str	r3, [r2, #0]
 8012236:	f7ff ff2e 	bl	8012096 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801223a:	4620      	mov	r0, r4
 801223c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801223e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8012242:	2002      	movs	r0, #2
 8012244:	801a      	strh	r2, [r3, #0]
 8012246:	6038      	str	r0, [r7, #0]
 8012248:	f001 ff42 	bl	80140d0 <_ZN8touchgfx6Screen4drawEv>
 801224c:	e7ec      	b.n	8012228 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801224e:	bf00      	nop
 8012250:	08024440 	.word	0x08024440
 8012254:	24025164 	.word	0x24025164
 8012258:	b5e8b5cd 	.word	0xb5e8b5cd
 801225c:	f407a5c2 	.word	0xf407a5c2
 8012260:	2400007c 	.word	0x2400007c
 8012264:	24025174 	.word	0x24025174
 8012268:	24025168 	.word	0x24025168

0801226c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801226c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8012270:	3b01      	subs	r3, #1
 8012272:	b29b      	uxth	r3, r3
 8012274:	428b      	cmp	r3, r1
 8012276:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801227a:	b510      	push	{r4, lr}
 801227c:	d908      	bls.n	8012290 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801227e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8012282:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8012286:	681a      	ldr	r2, [r3, #0]
 8012288:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801228c:	685a      	ldr	r2, [r3, #4]
 801228e:	6062      	str	r2, [r4, #4]
 8012290:	bd10      	pop	{r4, pc}
	...

08012294 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8012294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012298:	b08f      	sub	sp, #60	@ 0x3c
 801229a:	4b92      	ldr	r3, [pc, #584]	@ (80124e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 801229c:	4683      	mov	fp, r0
 801229e:	ac0a      	add	r4, sp, #40	@ 0x28
 80122a0:	e884 0006 	stmia.w	r4, {r1, r2}
 80122a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80122a8:	4620      	mov	r0, r4
 80122aa:	4b8f      	ldr	r3, [pc, #572]	@ (80124e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 80122ac:	f9b3 1000 	ldrsh.w	r1, [r3]
 80122b0:	f7ff fe0f 	bl	8011ed2 <_ZN8touchgfx4Rect10restrictToEss>
 80122b4:	4620      	mov	r0, r4
 80122b6:	f7fb fa14 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80122ba:	2800      	cmp	r0, #0
 80122bc:	d170      	bne.n	80123a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80122be:	4b8b      	ldr	r3, [pc, #556]	@ (80124ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80122c6:	2b02      	cmp	r3, #2
 80122c8:	d06a      	beq.n	80123a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80122ca:	9403      	str	r4, [sp, #12]
 80122cc:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 80122d0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80122d4:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80122d8:	9301      	str	r3, [sp, #4]
 80122da:	35a4      	adds	r5, #164	@ 0xa4
 80122dc:	b15c      	cbz	r4, 80122f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 80122de:	4629      	mov	r1, r5
 80122e0:	9803      	ldr	r0, [sp, #12]
 80122e2:	f7ff fe47 	bl	8011f74 <_ZNK8touchgfx4Rect8includesERKS0_>
 80122e6:	3c01      	subs	r4, #1
 80122e8:	b118      	cbz	r0, 80122f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 80122ea:	b2a1      	uxth	r1, r4
 80122ec:	9801      	ldr	r0, [sp, #4]
 80122ee:	f7ff ffbd 	bl	801226c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80122f2:	3d08      	subs	r5, #8
 80122f4:	e7f2      	b.n	80122dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 80122f6:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 80122fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80122fe:	f8cd a010 	str.w	sl, [sp, #16]
 8012302:	9302      	str	r3, [sp, #8]
 8012304:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012308:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801230c:	9306      	str	r3, [sp, #24]
 801230e:	445c      	add	r4, fp
 8012310:	2500      	movs	r5, #0
 8012312:	4626      	mov	r6, r4
 8012314:	f8cd a014 	str.w	sl, [sp, #20]
 8012318:	462f      	mov	r7, r5
 801231a:	9b05      	ldr	r3, [sp, #20]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d073      	beq.n	8012408 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 8012320:	9903      	ldr	r1, [sp, #12]
 8012322:	4630      	mov	r0, r6
 8012324:	f7ff fdb3 	bl	8011e8e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012328:	b350      	cbz	r0, 8012380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 801232a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801232e:	f9b6 c000 	ldrsh.w	ip, [r6]
 8012332:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8012336:	45e6      	cmp	lr, ip
 8012338:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801233c:	db33      	blt.n	80123a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 801233e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8012342:	88b3      	ldrh	r3, [r6, #4]
 8012344:	4472      	add	r2, lr
 8012346:	4463      	add	r3, ip
 8012348:	b212      	sxth	r2, r2
 801234a:	b21b      	sxth	r3, r3
 801234c:	429a      	cmp	r2, r3
 801234e:	dc2a      	bgt.n	80123a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 8012350:	fa1f f289 	uxth.w	r2, r9
 8012354:	88f3      	ldrh	r3, [r6, #6]
 8012356:	45c8      	cmp	r8, r9
 8012358:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801235c:	4413      	add	r3, r2
 801235e:	fa1f fc88 	uxth.w	ip, r8
 8012362:	b29b      	uxth	r3, r3
 8012364:	fa0f fe83 	sxth.w	lr, r3
 8012368:	db0f      	blt.n	801238a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 801236a:	eba3 030c 	sub.w	r3, r3, ip
 801236e:	1ac9      	subs	r1, r1, r3
 8012370:	b209      	sxth	r1, r1
 8012372:	2900      	cmp	r1, #0
 8012374:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012378:	dd12      	ble.n	80123a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801237a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801237e:	4605      	mov	r5, r0
 8012380:	9b05      	ldr	r3, [sp, #20]
 8012382:	3e08      	subs	r6, #8
 8012384:	3b01      	subs	r3, #1
 8012386:	9305      	str	r3, [sp, #20]
 8012388:	e7c7      	b.n	801231a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 801238a:	4461      	add	r1, ip
 801238c:	b209      	sxth	r1, r1
 801238e:	4571      	cmp	r1, lr
 8012390:	dc38      	bgt.n	8012404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8012392:	eba2 020c 	sub.w	r2, r2, ip
 8012396:	b212      	sxth	r2, r2
 8012398:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801239c:	2a00      	cmp	r2, #0
 801239e:	dcee      	bgt.n	801237e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80123a0:	b00f      	add	sp, #60	@ 0x3c
 80123a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123a6:	45c8      	cmp	r8, r9
 80123a8:	db2c      	blt.n	8012404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80123aa:	88f3      	ldrh	r3, [r6, #6]
 80123ac:	4499      	add	r9, r3
 80123ae:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 80123b2:	4498      	add	r8, r3
 80123b4:	fa0f f989 	sxth.w	r9, r9
 80123b8:	fa0f f888 	sxth.w	r8, r8
 80123bc:	45c1      	cmp	r9, r8
 80123be:	db21      	blt.n	8012404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80123c0:	fa1f f28c 	uxth.w	r2, ip
 80123c4:	88b3      	ldrh	r3, [r6, #4]
 80123c6:	45e6      	cmp	lr, ip
 80123c8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80123cc:	4413      	add	r3, r2
 80123ce:	fa1f f88e 	uxth.w	r8, lr
 80123d2:	b29b      	uxth	r3, r3
 80123d4:	fa0f f983 	sxth.w	r9, r3
 80123d8:	db0a      	blt.n	80123f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 80123da:	eba3 0308 	sub.w	r3, r3, r8
 80123de:	1ac9      	subs	r1, r1, r3
 80123e0:	b209      	sxth	r1, r1
 80123e2:	2900      	cmp	r1, #0
 80123e4:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 80123e8:	ddda      	ble.n	80123a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80123ea:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80123ee:	e7c6      	b.n	801237e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80123f0:	4441      	add	r1, r8
 80123f2:	b209      	sxth	r1, r1
 80123f4:	4549      	cmp	r1, r9
 80123f6:	dc05      	bgt.n	8012404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80123f8:	eba2 0208 	sub.w	r2, r2, r8
 80123fc:	b212      	sxth	r2, r2
 80123fe:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8012402:	e7cb      	b.n	801239c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 8012404:	4607      	mov	r7, r0
 8012406:	e7bb      	b.n	8012380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8012408:	2d00      	cmp	r5, #0
 801240a:	d181      	bne.n	8012310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 801240c:	2f00      	cmp	r7, #0
 801240e:	f000 81df 	beq.w	80127d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8012412:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8012416:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801241a:	b2b3      	uxth	r3, r6
 801241c:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8012420:	9305      	str	r3, [sp, #20]
 8012422:	9a05      	ldr	r2, [sp, #20]
 8012424:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8012428:	4413      	add	r3, r2
 801242a:	b2ba      	uxth	r2, r7
 801242c:	4492      	add	sl, r2
 801242e:	b29b      	uxth	r3, r3
 8012430:	fa1f fa8a 	uxth.w	sl, sl
 8012434:	fa0f f883 	sxth.w	r8, r3
 8012438:	fa0f f98a 	sxth.w	r9, sl
 801243c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8012440:	9b04      	ldr	r3, [sp, #16]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d054      	beq.n	80124f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 8012446:	9903      	ldr	r1, [sp, #12]
 8012448:	4620      	mov	r0, r4
 801244a:	f7ff fd20 	bl	8011e8e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801244e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012452:	b1c0      	cbz	r0, 8012486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8012454:	f9b4 e000 	ldrsh.w	lr, [r4]
 8012458:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801245c:	4576      	cmp	r6, lr
 801245e:	dc22      	bgt.n	80124a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8012460:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012464:	44f4      	add	ip, lr
 8012466:	fa0f fc8c 	sxth.w	ip, ip
 801246a:	45e0      	cmp	r8, ip
 801246c:	db1b      	blt.n	80124a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 801246e:	428f      	cmp	r7, r1
 8012470:	fa1f fc81 	uxth.w	ip, r1
 8012474:	88e1      	ldrh	r1, [r4, #6]
 8012476:	dc0d      	bgt.n	8012494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 8012478:	ebaa 0c0c 	sub.w	ip, sl, ip
 801247c:	f8a4 9002 	strh.w	r9, [r4, #2]
 8012480:	eba1 010c 	sub.w	r1, r1, ip
 8012484:	80e1      	strh	r1, [r4, #6]
 8012486:	4628      	mov	r0, r5
 8012488:	9904      	ldr	r1, [sp, #16]
 801248a:	3c08      	subs	r4, #8
 801248c:	4605      	mov	r5, r0
 801248e:	3901      	subs	r1, #1
 8012490:	9104      	str	r1, [sp, #16]
 8012492:	e7d3      	b.n	801243c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 8012494:	4461      	add	r1, ip
 8012496:	b209      	sxth	r1, r1
 8012498:	4549      	cmp	r1, r9
 801249a:	dcf5      	bgt.n	8012488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801249c:	eba2 0c0c 	sub.w	ip, r2, ip
 80124a0:	f8a4 c006 	strh.w	ip, [r4, #6]
 80124a4:	e7ef      	b.n	8012486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80124a6:	428f      	cmp	r7, r1
 80124a8:	dcee      	bgt.n	8012488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80124aa:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80124ae:	4461      	add	r1, ip
 80124b0:	b209      	sxth	r1, r1
 80124b2:	4589      	cmp	r9, r1
 80124b4:	dbe8      	blt.n	8012488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80124b6:	4576      	cmp	r6, lr
 80124b8:	fa1f fc8e 	uxth.w	ip, lr
 80124bc:	88a1      	ldrh	r1, [r4, #4]
 80124be:	dc07      	bgt.n	80124d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 80124c0:	eba3 0c0c 	sub.w	ip, r3, ip
 80124c4:	f8a4 8000 	strh.w	r8, [r4]
 80124c8:	eba1 010c 	sub.w	r1, r1, ip
 80124cc:	80a1      	strh	r1, [r4, #4]
 80124ce:	e7da      	b.n	8012486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80124d0:	4461      	add	r1, ip
 80124d2:	b209      	sxth	r1, r1
 80124d4:	4588      	cmp	r8, r1
 80124d6:	dbd7      	blt.n	8012488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80124d8:	9905      	ldr	r1, [sp, #20]
 80124da:	eba1 0c0c 	sub.w	ip, r1, ip
 80124de:	f8a4 c004 	strh.w	ip, [r4, #4]
 80124e2:	e7d0      	b.n	8012486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80124e4:	24025116 	.word	0x24025116
 80124e8:	24025114 	.word	0x24025114
 80124ec:	24025120 	.word	0x24025120
 80124f0:	2d00      	cmp	r5, #0
 80124f2:	f000 816d 	beq.w	80127d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 80124f6:	9b06      	ldr	r3, [sp, #24]
 80124f8:	445b      	add	r3, fp
 80124fa:	461c      	mov	r4, r3
 80124fc:	9b02      	ldr	r3, [sp, #8]
 80124fe:	3301      	adds	r3, #1
 8012500:	f000 8166 	beq.w	80127d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8012504:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8012508:	9803      	ldr	r0, [sp, #12]
 801250a:	4629      	mov	r1, r5
 801250c:	f7ff fd32 	bl	8011f74 <_ZNK8touchgfx4Rect8includesERKS0_>
 8012510:	b120      	cbz	r0, 801251c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 8012512:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8012516:	9801      	ldr	r0, [sp, #4]
 8012518:	f7ff fea8 	bl	801226c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801251c:	9903      	ldr	r1, [sp, #12]
 801251e:	4628      	mov	r0, r5
 8012520:	f7ff fcb5 	bl	8011e8e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012524:	2800      	cmp	r0, #0
 8012526:	f000 809c 	beq.w	8012662 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 801252a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801252e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8012532:	fa1f f189 	uxth.w	r1, r9
 8012536:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801253a:	9309      	str	r3, [sp, #36]	@ 0x24
 801253c:	eb01 0c03 	add.w	ip, r1, r3
 8012540:	b283      	uxth	r3, r0
 8012542:	4548      	cmp	r0, r9
 8012544:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8012548:	fa1f fa8c 	uxth.w	sl, ip
 801254c:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8012550:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8012554:	eb03 050c 	add.w	r5, r3, ip
 8012558:	b2ad      	uxth	r5, r5
 801255a:	9505      	str	r5, [sp, #20]
 801255c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8012560:	9504      	str	r5, [sp, #16]
 8012562:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8012566:	f340 8099 	ble.w	801269c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 801256a:	1a5b      	subs	r3, r3, r1
 801256c:	4596      	cmp	lr, r2
 801256e:	fa0f f08a 	sxth.w	r0, sl
 8012572:	b29b      	uxth	r3, r3
 8012574:	b21e      	sxth	r6, r3
 8012576:	dd2e      	ble.n	80125d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 8012578:	9f02      	ldr	r7, [sp, #8]
 801257a:	fa1f fe8e 	uxth.w	lr, lr
 801257e:	b292      	uxth	r2, r2
 8012580:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8012584:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8012588:	9f04      	ldr	r7, [sp, #16]
 801258a:	ebae 0102 	sub.w	r1, lr, r2
 801258e:	44a6      	add	lr, r4
 8012590:	1a3f      	subs	r7, r7, r0
 8012592:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8012596:	b289      	uxth	r1, r1
 8012598:	4402      	add	r2, r0
 801259a:	fa0f fe8e 	sxth.w	lr, lr
 801259e:	b20d      	sxth	r5, r1
 80125a0:	b212      	sxth	r2, r2
 80125a2:	436f      	muls	r7, r5
 80125a4:	ebae 0202 	sub.w	r2, lr, r2
 80125a8:	4372      	muls	r2, r6
 80125aa:	4297      	cmp	r7, r2
 80125ac:	db09      	blt.n	80125c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 80125ae:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 80125b2:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 80125b6:	449c      	add	ip, r3
 80125b8:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80125bc:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 80125c0:	e684      	b.n	80122cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80125c2:	4421      	add	r1, r4
 80125c4:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 80125c8:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 80125cc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80125d0:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80125d4:	e67a      	b.n	80122cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80125d6:	9f04      	ldr	r7, [sp, #16]
 80125d8:	42b8      	cmp	r0, r7
 80125da:	da27      	bge.n	801262c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 80125dc:	9902      	ldr	r1, [sp, #8]
 80125de:	1a3f      	subs	r7, r7, r0
 80125e0:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 80125e4:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80125e8:	eb05 010e 	add.w	r1, r5, lr
 80125ec:	fa1f f881 	uxth.w	r8, r1
 80125f0:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 80125f4:	4411      	add	r1, r2
 80125f6:	fa0f f988 	sxth.w	r9, r8
 80125fa:	eba2 020e 	sub.w	r2, r2, lr
 80125fe:	eba1 0108 	sub.w	r1, r1, r8
 8012602:	4372      	muls	r2, r6
 8012604:	b289      	uxth	r1, r1
 8012606:	fa0f f881 	sxth.w	r8, r1
 801260a:	fb08 f707 	mul.w	r7, r8, r7
 801260e:	42ba      	cmp	r2, r7
 8012610:	dc06      	bgt.n	8012620 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 8012612:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8012616:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801261a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801261e:	e7ca      	b.n	80125b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8012620:	4429      	add	r1, r5
 8012622:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8012626:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801262a:	e64f      	b.n	80122cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801262c:	9805      	ldr	r0, [sp, #20]
 801262e:	2d06      	cmp	r5, #6
 8012630:	ebaa 0000 	sub.w	r0, sl, r0
 8012634:	b280      	uxth	r0, r0
 8012636:	fa0f fe80 	sxth.w	lr, r0
 801263a:	d817      	bhi.n	801266c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 801263c:	9b04      	ldr	r3, [sp, #16]
 801263e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8012642:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8012646:	1c6b      	adds	r3, r5, #1
 8012648:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801264c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8012650:	9b01      	ldr	r3, [sp, #4]
 8012652:	9801      	ldr	r0, [sp, #4]
 8012654:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012658:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801265c:	805a      	strh	r2, [r3, #2]
 801265e:	809e      	strh	r6, [r3, #4]
 8012660:	80d9      	strh	r1, [r3, #6]
 8012662:	9b02      	ldr	r3, [sp, #8]
 8012664:	3c08      	subs	r4, #8
 8012666:	3b01      	subs	r3, #1
 8012668:	9302      	str	r3, [sp, #8]
 801266a:	e747      	b.n	80124fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 801266c:	9a02      	ldr	r2, [sp, #8]
 801266e:	45b6      	cmp	lr, r6
 8012670:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012674:	db0d      	blt.n	8012692 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 8012676:	449c      	add	ip, r3
 8012678:	445a      	add	r2, fp
 801267a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801267e:	fa1f fc8c 	uxth.w	ip, ip
 8012682:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8012686:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801268a:	448c      	add	ip, r1
 801268c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8012690:	e61c      	b.n	80122cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8012692:	445a      	add	r2, fp
 8012694:	4484      	add	ip, r0
 8012696:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801269a:	e78f      	b.n	80125bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 801269c:	fa1f f18e 	uxth.w	r1, lr
 80126a0:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 80126a4:	b293      	uxth	r3, r2
 80126a6:	4596      	cmp	lr, r2
 80126a8:	eb01 0806 	add.w	r8, r1, r6
 80126ac:	9306      	str	r3, [sp, #24]
 80126ae:	fa1f f888 	uxth.w	r8, r8
 80126b2:	9f06      	ldr	r7, [sp, #24]
 80126b4:	fa0f f388 	sxth.w	r3, r8
 80126b8:	9307      	str	r3, [sp, #28]
 80126ba:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80126be:	443b      	add	r3, r7
 80126c0:	b29b      	uxth	r3, r3
 80126c2:	9308      	str	r3, [sp, #32]
 80126c4:	da24      	bge.n	8012710 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 80126c6:	9905      	ldr	r1, [sp, #20]
 80126c8:	eba3 0308 	sub.w	r3, r3, r8
 80126cc:	eba2 020e 	sub.w	r2, r2, lr
 80126d0:	eba9 0000 	sub.w	r0, r9, r0
 80126d4:	ebaa 0401 	sub.w	r4, sl, r1
 80126d8:	b29b      	uxth	r3, r3
 80126da:	b2a4      	uxth	r4, r4
 80126dc:	b219      	sxth	r1, r3
 80126de:	b225      	sxth	r5, r4
 80126e0:	4348      	muls	r0, r1
 80126e2:	436a      	muls	r2, r5
 80126e4:	4282      	cmp	r2, r0
 80126e6:	9a02      	ldr	r2, [sp, #8]
 80126e8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80126ec:	445a      	add	r2, fp
 80126ee:	dc06      	bgt.n	80126fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 80126f0:	9b07      	ldr	r3, [sp, #28]
 80126f2:	44a4      	add	ip, r4
 80126f4:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 80126f8:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 80126fc:	e75e      	b.n	80125bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 80126fe:	9904      	ldr	r1, [sp, #16]
 8012700:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8012704:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8012708:	4433      	add	r3, r6
 801270a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801270e:	e5dd      	b.n	80122cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8012710:	9f06      	ldr	r7, [sp, #24]
 8012712:	9b04      	ldr	r3, [sp, #16]
 8012714:	1bc9      	subs	r1, r1, r7
 8012716:	fa0f f78a 	sxth.w	r7, sl
 801271a:	b289      	uxth	r1, r1
 801271c:	429f      	cmp	r7, r3
 801271e:	fa0f fe81 	sxth.w	lr, r1
 8012722:	dd23      	ble.n	801276c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 8012724:	9a05      	ldr	r2, [sp, #20]
 8012726:	eba9 0000 	sub.w	r0, r9, r0
 801272a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801272e:	ebaa 0202 	sub.w	r2, sl, r2
 8012732:	9d07      	ldr	r5, [sp, #28]
 8012734:	fb0e f000 	mul.w	r0, lr, r0
 8012738:	b292      	uxth	r2, r2
 801273a:	eba5 0a03 	sub.w	sl, r5, r3
 801273e:	9b02      	ldr	r3, [sp, #8]
 8012740:	b214      	sxth	r4, r2
 8012742:	00db      	lsls	r3, r3, #3
 8012744:	fb04 fa0a 	mul.w	sl, r4, sl
 8012748:	445b      	add	r3, fp
 801274a:	4550      	cmp	r0, sl
 801274c:	db03      	blt.n	8012756 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 801274e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8012752:	4494      	add	ip, r2
 8012754:	e732      	b.n	80125bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8012756:	9a04      	ldr	r2, [sp, #16]
 8012758:	4431      	add	r1, r6
 801275a:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801275e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8012762:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8012766:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801276a:	e75c      	b.n	8012626 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 801276c:	9b08      	ldr	r3, [sp, #32]
 801276e:	2d06      	cmp	r5, #6
 8012770:	eba3 0308 	sub.w	r3, r3, r8
 8012774:	b29b      	uxth	r3, r3
 8012776:	b218      	sxth	r0, r3
 8012778:	d813      	bhi.n	80127a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 801277a:	9b07      	ldr	r3, [sp, #28]
 801277c:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8012780:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8012784:	1c6b      	adds	r3, r5, #1
 8012786:	9901      	ldr	r1, [sp, #4]
 8012788:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801278c:	9b01      	ldr	r3, [sp, #4]
 801278e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8012792:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012796:	805a      	strh	r2, [r3, #2]
 8012798:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801279a:	f8a3 e006 	strh.w	lr, [r3, #6]
 801279e:	809a      	strh	r2, [r3, #4]
 80127a0:	e75f      	b.n	8012662 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 80127a2:	9c02      	ldr	r4, [sp, #8]
 80127a4:	4570      	cmp	r0, lr
 80127a6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80127aa:	db0d      	blt.n	80127c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 80127ac:	4431      	add	r1, r6
 80127ae:	9b06      	ldr	r3, [sp, #24]
 80127b0:	445c      	add	r4, fp
 80127b2:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80127b6:	b289      	uxth	r1, r1
 80127b8:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 80127bc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80127c0:	4419      	add	r1, r3
 80127c2:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 80127c6:	e581      	b.n	80122cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80127c8:	445c      	add	r4, fp
 80127ca:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 80127ce:	e79b      	b.n	8012708 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 80127d0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 80127d4:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 80127d8:	1e65      	subs	r5, r4, #1
 80127da:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80127de:	b2ad      	uxth	r5, r5
 80127e0:	42b5      	cmp	r5, r6
 80127e2:	d044      	beq.n	801286e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5da>
 80127e4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80127e8:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 80127ec:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 80127f0:	4282      	cmp	r2, r0
 80127f2:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 80127f6:	d11f      	bne.n	8012838 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 80127f8:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 80127fc:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8012800:	459c      	cmp	ip, r3
 8012802:	d119      	bne.n	8012838 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8012804:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8012808:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801280c:	19d8      	adds	r0, r3, r7
 801280e:	b200      	sxth	r0, r0
 8012810:	4288      	cmp	r0, r1
 8012812:	d109      	bne.n	8012828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8012814:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8012818:	4413      	add	r3, r2
 801281a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801281e:	4629      	mov	r1, r5
 8012820:	9801      	ldr	r0, [sp, #4]
 8012822:	f7ff fd23 	bl	801226c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012826:	e003      	b.n	8012830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8012828:	4411      	add	r1, r2
 801282a:	b209      	sxth	r1, r1
 801282c:	42b9      	cmp	r1, r7
 801282e:	d0f3      	beq.n	8012818 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8012830:	3d01      	subs	r5, #1
 8012832:	3c08      	subs	r4, #8
 8012834:	b2ad      	uxth	r5, r5
 8012836:	e7d3      	b.n	80127e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8012838:	42b9      	cmp	r1, r7
 801283a:	d1f9      	bne.n	8012830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 801283c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8012840:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8012844:	4299      	cmp	r1, r3
 8012846:	d1f3      	bne.n	8012830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8012848:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801284c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8012850:	181f      	adds	r7, r3, r0
 8012852:	b23f      	sxth	r7, r7
 8012854:	42ba      	cmp	r2, r7
 8012856:	d105      	bne.n	8012864 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d0>
 8012858:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801285c:	440b      	add	r3, r1
 801285e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8012862:	e7dc      	b.n	801281e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58a>
 8012864:	440a      	add	r2, r1
 8012866:	b212      	sxth	r2, r2
 8012868:	4290      	cmp	r0, r2
 801286a:	d1e1      	bne.n	8012830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 801286c:	e7f6      	b.n	801285c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c8>
 801286e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8012872:	2e07      	cmp	r6, #7
 8012874:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8012878:	d812      	bhi.n	80128a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60c>
 801287a:	1c75      	adds	r5, r6, #1
 801287c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8012880:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8012884:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8012888:	9d01      	ldr	r5, [sp, #4]
 801288a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801288e:	442c      	add	r4, r5
 8012890:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8012894:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8012898:	8061      	strh	r1, [r4, #2]
 801289a:	80a2      	strh	r2, [r4, #4]
 801289c:	80e3      	strh	r3, [r4, #6]
 801289e:	e57f      	b.n	80123a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80128a0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80128a4:	3e01      	subs	r6, #1
 80128a6:	445c      	add	r4, fp
 80128a8:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 80128ac:	f04f 37ff 	mov.w	r7, #4294967295
 80128b0:	2500      	movs	r5, #0
 80128b2:	9305      	str	r3, [sp, #20]
 80128b4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80128b8:	1e72      	subs	r2, r6, #1
 80128ba:	9302      	str	r3, [sp, #8]
 80128bc:	4691      	mov	r9, r2
 80128be:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80128c2:	9304      	str	r3, [sp, #16]
 80128c4:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 80128c8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80128cc:	6818      	ldr	r0, [r3, #0]
 80128ce:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80128d2:	9207      	str	r2, [sp, #28]
 80128d4:	bf16      	itet	ne
 80128d6:	9905      	ldrne	r1, [sp, #20]
 80128d8:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80128dc:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80128e0:	9306      	str	r3, [sp, #24]
 80128e2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80128e6:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80128ea:	fb18 f801 	smulbb	r8, r8, r1
 80128ee:	6859      	ldr	r1, [r3, #4]
 80128f0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80128f4:	4671      	mov	r1, lr
 80128f6:	a80c      	add	r0, sp, #48	@ 0x30
 80128f8:	f7ff fb62 	bl	8011fc0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80128fc:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8012900:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8012904:	f04f 0c08 	mov.w	ip, #8
 8012908:	9b04      	ldr	r3, [sp, #16]
 801290a:	9a02      	ldr	r2, [sp, #8]
 801290c:	fb10 f001 	smulbb	r0, r0, r1
 8012910:	fb02 8803 	mla	r8, r2, r3, r8
 8012914:	eba0 0108 	sub.w	r1, r0, r8
 8012918:	fb90 f0fc 	sdiv	r0, r0, ip
 801291c:	4288      	cmp	r0, r1
 801291e:	dc20      	bgt.n	8012962 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 8012920:	4551      	cmp	r1, sl
 8012922:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012926:	da03      	bge.n	8012930 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69c>
 8012928:	b1d9      	cbz	r1, 8012962 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 801292a:	468a      	mov	sl, r1
 801292c:	464f      	mov	r7, r9
 801292e:	4635      	mov	r5, r6
 8012930:	f109 39ff 	add.w	r9, r9, #4294967295
 8012934:	f119 0f02 	cmn.w	r9, #2
 8012938:	d1c6      	bne.n	80128c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 801293a:	4616      	mov	r6, r2
 801293c:	3201      	adds	r2, #1
 801293e:	f1a4 0408 	sub.w	r4, r4, #8
 8012942:	d1b7      	bne.n	80128b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8012944:	9b01      	ldr	r3, [sp, #4]
 8012946:	b2ac      	uxth	r4, r5
 8012948:	00ed      	lsls	r5, r5, #3
 801294a:	1958      	adds	r0, r3, r5
 801294c:	1c7b      	adds	r3, r7, #1
 801294e:	d10b      	bne.n	8012968 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d4>
 8012950:	4601      	mov	r1, r0
 8012952:	9803      	ldr	r0, [sp, #12]
 8012954:	f7ff fb34 	bl	8011fc0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012958:	4621      	mov	r1, r4
 801295a:	9801      	ldr	r0, [sp, #4]
 801295c:	f7ff fc86 	bl	801226c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012960:	e4b4      	b.n	80122cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8012962:	464f      	mov	r7, r9
 8012964:	4635      	mov	r5, r6
 8012966:	e7ed      	b.n	8012944 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b0>
 8012968:	9b01      	ldr	r3, [sp, #4]
 801296a:	00ff      	lsls	r7, r7, #3
 801296c:	445d      	add	r5, fp
 801296e:	19d9      	adds	r1, r3, r7
 8012970:	445f      	add	r7, fp
 8012972:	f7ff fb25 	bl	8011fc0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012976:	9b03      	ldr	r3, [sp, #12]
 8012978:	cb03      	ldmia	r3!, {r0, r1}
 801297a:	9b03      	ldr	r3, [sp, #12]
 801297c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8012980:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8012984:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8012988:	6869      	ldr	r1, [r5, #4]
 801298a:	c303      	stmia	r3!, {r0, r1}
 801298c:	e7e4      	b.n	8012958 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801298e:	bf00      	nop

08012990 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8012990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012994:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8012998:	b0a1      	sub	sp, #132	@ 0x84
 801299a:	4604      	mov	r4, r0
 801299c:	4630      	mov	r0, r6
 801299e:	f7fa fea0 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80129a2:	4605      	mov	r5, r0
 80129a4:	b948      	cbnz	r0, 80129ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 80129a6:	6823      	ldr	r3, [r4, #0]
 80129a8:	4620      	mov	r0, r4
 80129aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80129ac:	e896 0006 	ldmia.w	r6, {r1, r2}
 80129b0:	4798      	blx	r3
 80129b2:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 80129b6:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 80129ba:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d149      	bne.n	8012a56 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 80129c2:	4bb2      	ldr	r3, [pc, #712]	@ (8012c8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 80129ca:	1ebb      	subs	r3, r7, #2
 80129cc:	425f      	negs	r7, r3
 80129ce:	415f      	adcs	r7, r3
 80129d0:	4baf      	ldr	r3, [pc, #700]	@ (8012c90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d040      	beq.n	8012a5a <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 80129d8:	4dae      	ldr	r5, [pc, #696]	@ (8012c94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 80129da:	4628      	mov	r0, r5
 80129dc:	f7fa fe81 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80129e0:	4606      	mov	r6, r0
 80129e2:	2800      	cmp	r0, #0
 80129e4:	d139      	bne.n	8012a5a <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 80129e6:	4628      	mov	r0, r5
 80129e8:	f7ff f97e 	bl	8011ce8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80129ec:	6823      	ldr	r3, [r4, #0]
 80129ee:	6829      	ldr	r1, [r5, #0]
 80129f0:	4620      	mov	r0, r4
 80129f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80129f4:	686a      	ldr	r2, [r5, #4]
 80129f6:	4798      	blx	r3
 80129f8:	802e      	strh	r6, [r5, #0]
 80129fa:	806e      	strh	r6, [r5, #2]
 80129fc:	80ae      	strh	r6, [r5, #4]
 80129fe:	80ee      	strh	r6, [r5, #6]
 8012a00:	af0f      	add	r7, sp, #60	@ 0x3c
 8012a02:	4ea5      	ldr	r6, [pc, #660]	@ (8012c98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 8012a04:	4638      	mov	r0, r7
 8012a06:	f7ff fbd5 	bl	80121b4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012a0a:	8835      	ldrh	r5, [r6, #0]
 8012a0c:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 8012a10:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8012a14:	462b      	mov	r3, r5
 8012a16:	4563      	cmp	r3, ip
 8012a18:	d224      	bcs.n	8012a64 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 8012a1a:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8012a1e:	2907      	cmp	r1, #7
 8012a20:	d816      	bhi.n	8012a50 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8012a22:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8012a26:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8012a2a:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8012a2e:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 8012a32:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 8012a36:	1c4a      	adds	r2, r1, #1
 8012a38:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 8012a3c:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 8012a40:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 8012a44:	f8a2 a002 	strh.w	sl, [r2, #2]
 8012a48:	f8a2 8004 	strh.w	r8, [r2, #4]
 8012a4c:	f8a2 e006 	strh.w	lr, [r2, #6]
 8012a50:	3301      	adds	r3, #1
 8012a52:	b29b      	uxth	r3, r3
 8012a54:	e7df      	b.n	8012a16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 8012a56:	2701      	movs	r7, #1
 8012a58:	e7ba      	b.n	80129d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 8012a5a:	2f00      	cmp	r7, #0
 8012a5c:	d1d0      	bne.n	8012a00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 8012a5e:	b021      	add	sp, #132	@ 0x84
 8012a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a64:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8012a68:	42ab      	cmp	r3, r5
 8012a6a:	d90c      	bls.n	8012a86 <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 8012a6c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8012a70:	6822      	ldr	r2, [r4, #0]
 8012a72:	3501      	adds	r5, #1
 8012a74:	4620      	mov	r0, r4
 8012a76:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8012a78:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8012a7c:	b2ad      	uxth	r5, r5
 8012a7e:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8012a82:	47b8      	blx	r7
 8012a84:	e7ee      	b.n	8012a64 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 8012a86:	4d81      	ldr	r5, [pc, #516]	@ (8012c8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8012a88:	6828      	ldr	r0, [r5, #0]
 8012a8a:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8012a8e:	2b01      	cmp	r3, #1
 8012a90:	f040 813d 	bne.w	8012d0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x37e>
 8012a94:	4a81      	ldr	r2, [pc, #516]	@ (8012c9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 8012a96:	8833      	ldrh	r3, [r6, #0]
 8012a98:	7812      	ldrb	r2, [r2, #0]
 8012a9a:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 8012a9e:	2a01      	cmp	r2, #1
 8012aa0:	d014      	beq.n	8012acc <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8012aa2:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8012aa6:	f04f 0900 	mov.w	r9, #0
 8012aaa:	32ae      	adds	r2, #174	@ 0xae
 8012aac:	4283      	cmp	r3, r0
 8012aae:	f102 0208 	add.w	r2, r2, #8
 8012ab2:	f280 8083 	bge.w	8012bbc <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8012ab6:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 8012aba:	3301      	adds	r3, #1
 8012abc:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 8012ac0:	4439      	add	r1, r7
 8012ac2:	b209      	sxth	r1, r1
 8012ac4:	4589      	cmp	r9, r1
 8012ac6:	bfb8      	it	lt
 8012ac8:	4689      	movlt	r9, r1
 8012aca:	e7ef      	b.n	8012aac <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 8012acc:	4f74      	ldr	r7, [pc, #464]	@ (8012ca0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 8012ace:	883a      	ldrh	r2, [r7, #0]
 8012ad0:	4693      	mov	fp, r2
 8012ad2:	4283      	cmp	r3, r0
 8012ad4:	da08      	bge.n	8012ae8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 8012ad6:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8012ada:	3301      	adds	r3, #1
 8012adc:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 8012ae0:	458b      	cmp	fp, r1
 8012ae2:	bfa8      	it	ge
 8012ae4:	468b      	movge	fp, r1
 8012ae6:	e7f4      	b.n	8012ad2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 8012ae8:	2a0f      	cmp	r2, #15
 8012aea:	f04f 0300 	mov.w	r3, #0
 8012aee:	f8df 91b4 	ldr.w	r9, [pc, #436]	@ 8012ca4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 8012af2:	bf8c      	ite	hi
 8012af4:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 8012af8:	f04f 0801 	movls.w	r8, #1
 8012afc:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8012b00:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8012b04:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8012b08:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8012b0c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012b10:	6828      	ldr	r0, [r5, #0]
 8012b12:	455b      	cmp	r3, fp
 8012b14:	f340 80c8 	ble.w	8012ca8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8012b18:	6803      	ldr	r3, [r0, #0]
 8012b1a:	f8b7 a000 	ldrh.w	sl, [r7]
 8012b1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012b22:	4798      	blx	r3
 8012b24:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8012b28:	ebaa 0000 	sub.w	r0, sl, r0
 8012b2c:	682b      	ldr	r3, [r5, #0]
 8012b2e:	ebac 0e08 	sub.w	lr, ip, r8
 8012b32:	b280      	uxth	r0, r0
 8012b34:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 8012b38:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 8012b3c:	4570      	cmp	r0, lr
 8012b3e:	dd05      	ble.n	8012b4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 8012b40:	4558      	cmp	r0, fp
 8012b42:	dd03      	ble.n	8012b4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 8012b44:	b901      	cbnz	r1, 8012b48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8012b46:	b392      	cbz	r2, 8012bae <_ZN8touchgfx11Application15drawCachedAreasEv+0x21e>
 8012b48:	4658      	mov	r0, fp
 8012b4a:	e006      	b.n	8012b5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ca>
 8012b4c:	2900      	cmp	r1, #0
 8012b4e:	d1fb      	bne.n	8012b48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8012b50:	2a00      	cmp	r2, #0
 8012b52:	d1f9      	bne.n	8012b48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8012b54:	4558      	cmp	r0, fp
 8012b56:	bfb8      	it	lt
 8012b58:	4658      	movlt	r0, fp
 8012b5a:	f9b9 3000 	ldrsh.w	r3, [r9]
 8012b5e:	2200      	movs	r2, #0
 8012b60:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8012b64:	ebac 0000 	sub.w	r0, ip, r0
 8012b68:	f8b6 a000 	ldrh.w	sl, [r6]
 8012b6c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8012b70:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8012b74:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8012b78:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8012b7c:	4553      	cmp	r3, sl
 8012b7e:	ddc5      	ble.n	8012b0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8012b80:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8012b84:	ab0d      	add	r3, sp, #52	@ 0x34
 8012b86:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8012b8a:	6851      	ldr	r1, [r2, #4]
 8012b8c:	c303      	stmia	r3!, {r0, r1}
 8012b8e:	a80d      	add	r0, sp, #52	@ 0x34
 8012b90:	a90b      	add	r1, sp, #44	@ 0x2c
 8012b92:	f7fa fd63 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 8012b96:	a80d      	add	r0, sp, #52	@ 0x34
 8012b98:	f7fa fda3 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012b9c:	b920      	cbnz	r0, 8012ba8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x218>
 8012b9e:	6823      	ldr	r3, [r4, #0]
 8012ba0:	a90d      	add	r1, sp, #52	@ 0x34
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012ba6:	4798      	blx	r3
 8012ba8:	f10a 0a01 	add.w	sl, sl, #1
 8012bac:	e7e4      	b.n	8012b78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e8>
 8012bae:	681a      	ldr	r2, [r3, #0]
 8012bb0:	2101      	movs	r1, #1
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 8012bb8:	4790      	blx	r2
 8012bba:	e7a7      	b.n	8012b0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8012bbc:	4b39      	ldr	r3, [pc, #228]	@ (8012ca4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>)
 8012bbe:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8012ca0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 8012bc2:	881f      	ldrh	r7, [r3, #0]
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	2f0f      	cmp	r7, #15
 8012bc8:	bf8c      	ite	hi
 8012bca:	08ff      	lsrhi	r7, r7, #3
 8012bcc:	2701      	movls	r7, #1
 8012bce:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 8012bd2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8012bd6:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 8012bda:	6828      	ldr	r0, [r5, #0]
 8012bdc:	4413      	add	r3, r2
 8012bde:	b21b      	sxth	r3, r3
 8012be0:	454b      	cmp	r3, r9
 8012be2:	da61      	bge.n	8012ca8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8012be4:	6803      	ldr	r3, [r0, #0]
 8012be6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012bea:	4798      	blx	r3
 8012bec:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 8012bf0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8012bf4:	682a      	ldr	r2, [r5, #0]
 8012bf6:	4473      	add	r3, lr
 8012bf8:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 8012bfc:	b21b      	sxth	r3, r3
 8012bfe:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 8012c02:	eb03 0e07 	add.w	lr, r3, r7
 8012c06:	4570      	cmp	r0, lr
 8012c08:	da0d      	bge.n	8012c26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 8012c0a:	4548      	cmp	r0, r9
 8012c0c:	da0b      	bge.n	8012c26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 8012c0e:	f1bc 0f00 	cmp.w	ip, #0
 8012c12:	d138      	bne.n	8012c86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8012c14:	2900      	cmp	r1, #0
 8012c16:	d136      	bne.n	8012c86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8012c18:	6813      	ldr	r3, [r2, #0]
 8012c1a:	2101      	movs	r1, #1
 8012c1c:	4610      	mov	r0, r2
 8012c1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012c22:	4798      	blx	r3
 8012c24:	e7d5      	b.n	8012bd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 8012c26:	f1bc 0f00 	cmp.w	ip, #0
 8012c2a:	d12c      	bne.n	8012c86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8012c2c:	bb59      	cbnz	r1, 8012c86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8012c2e:	4548      	cmp	r0, r9
 8012c30:	bfa8      	it	ge
 8012c32:	4648      	movge	r0, r9
 8012c34:	f9b8 2000 	ldrsh.w	r2, [r8]
 8012c38:	2100      	movs	r1, #0
 8012c3a:	1ac0      	subs	r0, r0, r3
 8012c3c:	f8b6 a000 	ldrh.w	sl, [r6]
 8012c40:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8012c44:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8012c48:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8012c4c:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8012c50:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8012c54:	4553      	cmp	r3, sl
 8012c56:	ddbc      	ble.n	8012bd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 8012c58:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8012c5c:	ab0d      	add	r3, sp, #52	@ 0x34
 8012c5e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8012c62:	6851      	ldr	r1, [r2, #4]
 8012c64:	c303      	stmia	r3!, {r0, r1}
 8012c66:	a80d      	add	r0, sp, #52	@ 0x34
 8012c68:	a90b      	add	r1, sp, #44	@ 0x2c
 8012c6a:	f7fa fcf7 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 8012c6e:	a80d      	add	r0, sp, #52	@ 0x34
 8012c70:	f7fa fd37 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012c74:	b920      	cbnz	r0, 8012c80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f0>
 8012c76:	6823      	ldr	r3, [r4, #0]
 8012c78:	a90d      	add	r1, sp, #52	@ 0x34
 8012c7a:	4620      	mov	r0, r4
 8012c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012c7e:	4798      	blx	r3
 8012c80:	f10a 0a01 	add.w	sl, sl, #1
 8012c84:	e7e4      	b.n	8012c50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c0>
 8012c86:	4648      	mov	r0, r9
 8012c88:	e7d4      	b.n	8012c34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a4>
 8012c8a:	bf00      	nop
 8012c8c:	24025120 	.word	0x24025120
 8012c90:	24025160 	.word	0x24025160
 8012c94:	2402516c 	.word	0x2402516c
 8012c98:	2400007c 	.word	0x2400007c
 8012c9c:	24025118 	.word	0x24025118
 8012ca0:	24025114 	.word	0x24025114
 8012ca4:	24025116 	.word	0x24025116
 8012ca8:	6828      	ldr	r0, [r5, #0]
 8012caa:	6803      	ldr	r3, [r0, #0]
 8012cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cae:	4798      	blx	r3
 8012cb0:	4ba4      	ldr	r3, [pc, #656]	@ (8012f44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	f43f aed2 	beq.w	8012a5e <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8012cba:	2300      	movs	r3, #0
 8012cbc:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 8012cc0:	a80f      	add	r0, sp, #60	@ 0x3c
 8012cc2:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 8012cc6:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8012cca:	4b9f      	ldr	r3, [pc, #636]	@ (8012f48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 8012ccc:	881b      	ldrh	r3, [r3, #0]
 8012cce:	42b3      	cmp	r3, r6
 8012cd0:	f4bf aec5 	bcs.w	8012a5e <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8012cd4:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8012cd8:	2907      	cmp	r1, #7
 8012cda:	d815      	bhi.n	8012d08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x378>
 8012cdc:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8012ce0:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8012ce4:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8012ce8:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8012cec:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8012cf0:	1c4a      	adds	r2, r1, #1
 8012cf2:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8012cf6:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 8012cfa:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 8012cfe:	f8a2 e002 	strh.w	lr, [r2, #2]
 8012d02:	f8a2 c004 	strh.w	ip, [r2, #4]
 8012d06:	80d7      	strh	r7, [r2, #6]
 8012d08:	3301      	adds	r3, #1
 8012d0a:	b29b      	uxth	r3, r3
 8012d0c:	e7df      	b.n	8012cce <_ZN8touchgfx11Application15drawCachedAreasEv+0x33e>
 8012d0e:	2b02      	cmp	r3, #2
 8012d10:	f040 80ce 	bne.w	8012eb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8012d14:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8012d18:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 8012d1c:	9308      	str	r3, [sp, #32]
 8012d1e:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 8012d22:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012d26:	9307      	str	r3, [sp, #28]
 8012d28:	b2bf      	uxth	r7, r7
 8012d2a:	6803      	ldr	r3, [r0, #0]
 8012d2c:	fa0f f887 	sxth.w	r8, r7
 8012d30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012d34:	4798      	blx	r3
 8012d36:	4b85      	ldr	r3, [pc, #532]	@ (8012f4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 8012d38:	4682      	mov	sl, r0
 8012d3a:	2000      	movs	r0, #0
 8012d3c:	881b      	ldrh	r3, [r3, #0]
 8012d3e:	9302      	str	r3, [sp, #8]
 8012d40:	4b83      	ldr	r3, [pc, #524]	@ (8012f50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 8012d42:	881e      	ldrh	r6, [r3, #0]
 8012d44:	4b83      	ldr	r3, [pc, #524]	@ (8012f54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8012d46:	781b      	ldrb	r3, [r3, #0]
 8012d48:	2b01      	cmp	r3, #1
 8012d4a:	bf1e      	ittt	ne
 8012d4c:	9b02      	ldrne	r3, [sp, #8]
 8012d4e:	9602      	strne	r6, [sp, #8]
 8012d50:	461e      	movne	r6, r3
 8012d52:	f7ee fe0f 	bl	8001974 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8012d56:	fb96 fbfb 	sdiv	fp, r6, fp
 8012d5a:	fb0b f808 	mul.w	r8, fp, r8
 8012d5e:	45c2      	cmp	sl, r8
 8012d60:	da0c      	bge.n	8012d7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 8012d62:	6828      	ldr	r0, [r5, #0]
 8012d64:	210a      	movs	r1, #10
 8012d66:	6803      	ldr	r3, [r0, #0]
 8012d68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012d6c:	4798      	blx	r3
 8012d6e:	6828      	ldr	r0, [r5, #0]
 8012d70:	6803      	ldr	r3, [r0, #0]
 8012d72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012d76:	4798      	blx	r3
 8012d78:	4682      	mov	sl, r0
 8012d7a:	e7f0      	b.n	8012d5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 8012d7c:	2000      	movs	r0, #0
 8012d7e:	f04f 0800 	mov.w	r8, #0
 8012d82:	f7ee fe27 	bl	80019d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8012d86:	fa1f f38b 	uxth.w	r3, fp
 8012d8a:	4645      	mov	r5, r8
 8012d8c:	fb17 f703 	smulbb	r7, r7, r3
 8012d90:	9304      	str	r3, [sp, #16]
 8012d92:	b2bb      	uxth	r3, r7
 8012d94:	4f70      	ldr	r7, [pc, #448]	@ (8012f58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 8012d96:	9305      	str	r3, [sp, #20]
 8012d98:	0973      	lsrs	r3, r6, #5
 8012d9a:	9306      	str	r3, [sp, #24]
 8012d9c:	42b5      	cmp	r5, r6
 8012d9e:	d087      	beq.n	8012cb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8012da0:	6838      	ldr	r0, [r7, #0]
 8012da2:	6803      	ldr	r3, [r0, #0]
 8012da4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012da8:	4798      	blx	r3
 8012daa:	4582      	cmp	sl, r0
 8012dac:	4681      	mov	r9, r0
 8012dae:	d907      	bls.n	8012dc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 8012db0:	f1b8 0f00 	cmp.w	r8, #0
 8012db4:	d007      	beq.n	8012dc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 8012db6:	6838      	ldr	r0, [r7, #0]
 8012db8:	6803      	ldr	r3, [r0, #0]
 8012dba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8012dbe:	e776      	b.n	8012cae <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8012dc0:	f1b8 0f00 	cmp.w	r8, #0
 8012dc4:	d003      	beq.n	8012dce <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 8012dc6:	454d      	cmp	r5, r9
 8012dc8:	d3f5      	bcc.n	8012db6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 8012dca:	f04f 0801 	mov.w	r8, #1
 8012dce:	9a04      	ldr	r2, [sp, #16]
 8012dd0:	fb95 f3fb 	sdiv	r3, r5, fp
 8012dd4:	9303      	str	r3, [sp, #12]
 8012dd6:	3301      	adds	r3, #1
 8012dd8:	fb13 f302 	smulbb	r3, r3, r2
 8012ddc:	b299      	uxth	r1, r3
 8012dde:	f1b8 0f00 	cmp.w	r8, #0
 8012de2:	d04d      	beq.n	8012e80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f0>
 8012de4:	eb09 030b 	add.w	r3, r9, fp
 8012de8:	42b3      	cmp	r3, r6
 8012dea:	bfa8      	it	ge
 8012dec:	4633      	movge	r3, r6
 8012dee:	b29b      	uxth	r3, r3
 8012df0:	9807      	ldr	r0, [sp, #28]
 8012df2:	428b      	cmp	r3, r1
 8012df4:	bf94      	ite	ls
 8012df6:	ebc5 0203 	rsbls	r2, r5, r3
 8012dfa:	ebc5 0201 	rsbhi	r2, r5, r1
 8012dfe:	4282      	cmp	r2, r0
 8012e00:	bfa8      	it	ge
 8012e02:	4602      	movge	r2, r0
 8012e04:	9808      	ldr	r0, [sp, #32]
 8012e06:	fa1f fa82 	uxth.w	sl, r2
 8012e0a:	4582      	cmp	sl, r0
 8012e0c:	d205      	bcs.n	8012e1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 8012e0e:	fa15 f082 	uxtah	r0, r5, r2
 8012e12:	4286      	cmp	r6, r0
 8012e14:	d001      	beq.n	8012e1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 8012e16:	4299      	cmp	r1, r3
 8012e18:	d23f      	bcs.n	8012e9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x50a>
 8012e1a:	2001      	movs	r0, #1
 8012e1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8012e1e:	f7ee fda9 	bl	8001974 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8012e22:	6838      	ldr	r0, [r7, #0]
 8012e24:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8012e28:	6803      	ldr	r3, [r0, #0]
 8012e2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012e2e:	4798      	blx	r3
 8012e30:	4b48      	ldr	r3, [pc, #288]	@ (8012f54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8012e32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e34:	2000      	movs	r0, #0
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8012e3c:	b212      	sxth	r2, r2
 8012e3e:	2b01      	cmp	r3, #1
 8012e40:	d122      	bne.n	8012e88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f8>
 8012e42:	1b73      	subs	r3, r6, r5
 8012e44:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 8012e48:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8012e4c:	eba3 030a 	sub.w	r3, r3, sl
 8012e50:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 8012e54:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8012e58:	6823      	ldr	r3, [r4, #0]
 8012e5a:	a90d      	add	r1, sp, #52	@ 0x34
 8012e5c:	4620      	mov	r0, r4
 8012e5e:	4455      	add	r5, sl
 8012e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012e62:	4798      	blx	r3
 8012e64:	6838      	ldr	r0, [r7, #0]
 8012e66:	9b03      	ldr	r3, [sp, #12]
 8012e68:	b2ad      	uxth	r5, r5
 8012e6a:	4259      	negs	r1, r3
 8012e6c:	6803      	ldr	r3, [r0, #0]
 8012e6e:	b209      	sxth	r1, r1
 8012e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012e74:	4798      	blx	r3
 8012e76:	2001      	movs	r0, #1
 8012e78:	f7ee fdac 	bl	80019d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8012e7c:	46ca      	mov	sl, r9
 8012e7e:	e78d      	b.n	8012d9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 8012e80:	9b05      	ldr	r3, [sp, #20]
 8012e82:	eba9 0303 	sub.w	r3, r9, r3
 8012e86:	e7b2      	b.n	8012dee <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 8012e88:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8012e8c:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 8012e90:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 8012e94:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 8012e98:	e7de      	b.n	8012e58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4c8>
 8012e9a:	6838      	ldr	r0, [r7, #0]
 8012e9c:	6803      	ldr	r3, [r0, #0]
 8012e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ea0:	4798      	blx	r3
 8012ea2:	6838      	ldr	r0, [r7, #0]
 8012ea4:	9906      	ldr	r1, [sp, #24]
 8012ea6:	6803      	ldr	r3, [r0, #0]
 8012ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012eac:	4798      	blx	r3
 8012eae:	e7e5      	b.n	8012e7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ec>
 8012eb0:	2b03      	cmp	r3, #3
 8012eb2:	f040 8133 	bne.w	801311c <_ZN8touchgfx11Application15drawCachedAreasEv+0x78c>
 8012eb6:	4b27      	ldr	r3, [pc, #156]	@ (8012f54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8012eb8:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8012ebc:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	2b01      	cmp	r3, #1
 8012ec4:	f000 8095 	beq.w	8012ff2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8012ec8:	8832      	ldrh	r2, [r6, #0]
 8012eca:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8012ece:	3201      	adds	r2, #1
 8012ed0:	b292      	uxth	r2, r2
 8012ed2:	2900      	cmp	r1, #0
 8012ed4:	f43f aeec 	beq.w	8012cb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8012ed8:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 8012edc:	4694      	mov	ip, r2
 8012ede:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 8012ee2:	f04f 0800 	mov.w	r8, #0
 8012ee6:	441d      	add	r5, r3
 8012ee8:	b22d      	sxth	r5, r5
 8012eea:	fa1f f38c 	uxth.w	r3, ip
 8012eee:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8012ef2:	4299      	cmp	r1, r3
 8012ef4:	f240 80bc 	bls.w	8013070 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e0>
 8012ef8:	4427      	add	r7, r4
 8012efa:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8012efe:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8012f02:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8012f06:	4283      	cmp	r3, r0
 8012f08:	f340 809e 	ble.w	8013048 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b8>
 8012f0c:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 8012f10:	46e0      	mov	r8, ip
 8012f12:	4405      	add	r5, r0
 8012f14:	b22d      	sxth	r5, r5
 8012f16:	429d      	cmp	r5, r3
 8012f18:	bfa8      	it	ge
 8012f1a:	461d      	movge	r5, r3
 8012f1c:	f10c 0c01 	add.w	ip, ip, #1
 8012f20:	e7e3      	b.n	8012eea <_ZN8touchgfx11Application15drawCachedAreasEv+0x55a>
 8012f22:	d10a      	bne.n	8012f3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5aa>
 8012f24:	4562      	cmp	r2, ip
 8012f26:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 8012f2a:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 8012f2e:	bfb8      	it	lt
 8012f30:	4662      	movlt	r2, ip
 8012f32:	4288      	cmp	r0, r1
 8012f34:	bfb8      	it	lt
 8012f36:	4698      	movlt	r8, r3
 8012f38:	e084      	b.n	8013044 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 8012f3a:	428a      	cmp	r2, r1
 8012f3c:	bfb8      	it	lt
 8012f3e:	460a      	movlt	r2, r1
 8012f40:	e080      	b.n	8013044 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 8012f42:	bf00      	nop
 8012f44:	2402511e 	.word	0x2402511e
 8012f48:	2400007c 	.word	0x2400007c
 8012f4c:	24025116 	.word	0x24025116
 8012f50:	24025114 	.word	0x24025114
 8012f54:	24025118 	.word	0x24025118
 8012f58:	24025120 	.word	0x24025120
 8012f5c:	19e1      	adds	r1, r4, r7
 8012f5e:	ab0d      	add	r3, sp, #52	@ 0x34
 8012f60:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8012f64:	6849      	ldr	r1, [r1, #4]
 8012f66:	c303      	stmia	r3!, {r0, r1}
 8012f68:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 8012f6c:	a80d      	add	r0, sp, #52	@ 0x34
 8012f6e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8012f72:	454b      	cmp	r3, r9
 8012f74:	440b      	add	r3, r1
 8012f76:	bfb8      	it	lt
 8012f78:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 8012f7c:	1a9b      	subs	r3, r3, r2
 8012f7e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8012f82:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8012f86:	f7fe fec9 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012f8a:	a80d      	add	r0, sp, #52	@ 0x34
 8012f8c:	f7fa fba9 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012f90:	bb78      	cbnz	r0, 8012ff2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8012f92:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 8012f96:	4427      	add	r7, r4
 8012f98:	6828      	ldr	r0, [r5, #0]
 8012f9a:	45cc      	cmp	ip, r9
 8012f9c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8012fa0:	f8d0 e000 	ldr.w	lr, [r0]
 8012fa4:	bfd8      	it	le
 8012fa6:	fa1f fc8c 	uxthle.w	ip, ip
 8012faa:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8012fae:	bfc8      	it	gt
 8012fb0:	fa1f fc89 	uxthgt.w	ip, r9
 8012fb4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8012fb8:	f8cd c000 	str.w	ip, [sp]
 8012fbc:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 8012fc0:	47d8      	blx	fp
 8012fc2:	4683      	mov	fp, r0
 8012fc4:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8012fc8:	a80d      	add	r0, sp, #52	@ 0x34
 8012fca:	f7fe fe8d 	bl	8011ce8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8012fce:	6823      	ldr	r3, [r4, #0]
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	a90d      	add	r1, sp, #52	@ 0x34
 8012fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012fd6:	4798      	blx	r3
 8012fd8:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 8012fdc:	eba0 000b 	sub.w	r0, r0, fp
 8012fe0:	b200      	sxth	r0, r0
 8012fe2:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 8012fe6:	b920      	cbnz	r0, 8012ff2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8012fe8:	fa1f f188 	uxth.w	r1, r8
 8012fec:	4650      	mov	r0, sl
 8012fee:	f7ff f93d 	bl	801226c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012ff2:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8012ff6:	f1bb 0f00 	cmp.w	fp, #0
 8012ffa:	f43f ae59 	beq.w	8012cb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8012ffe:	8833      	ldrh	r3, [r6, #0]
 8013000:	f04f 0800 	mov.w	r8, #0
 8013004:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8013008:	3301      	adds	r3, #1
 801300a:	b29b      	uxth	r3, r3
 801300c:	b299      	uxth	r1, r3
 801300e:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8013012:	458b      	cmp	fp, r1
 8013014:	d9a2      	bls.n	8012f5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 8013016:	4427      	add	r7, r4
 8013018:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801301c:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 8013020:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 8013024:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8013028:	4408      	add	r0, r1
 801302a:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801302e:	4461      	add	r1, ip
 8013030:	b200      	sxth	r0, r0
 8013032:	b209      	sxth	r1, r1
 8013034:	4288      	cmp	r0, r1
 8013036:	f6bf af74 	bge.w	8012f22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x592>
 801303a:	4584      	cmp	ip, r0
 801303c:	4662      	mov	r2, ip
 801303e:	4698      	mov	r8, r3
 8013040:	bfb8      	it	lt
 8013042:	4602      	movlt	r2, r0
 8013044:	3301      	adds	r3, #1
 8013046:	e7e1      	b.n	801300c <_ZN8touchgfx11Application15drawCachedAreasEv+0x67c>
 8013048:	d10e      	bne.n	8013068 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d8>
 801304a:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801304e:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8013052:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8013056:	4473      	add	r3, lr
 8013058:	b21b      	sxth	r3, r3
 801305a:	429d      	cmp	r5, r3
 801305c:	bfa8      	it	ge
 801305e:	461d      	movge	r5, r3
 8013060:	4287      	cmp	r7, r0
 8013062:	bfb8      	it	lt
 8013064:	46e0      	movlt	r8, ip
 8013066:	e759      	b.n	8012f1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 8013068:	4285      	cmp	r5, r0
 801306a:	bfa8      	it	ge
 801306c:	4605      	movge	r5, r0
 801306e:	e755      	b.n	8012f1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 8013070:	eb0a 0007 	add.w	r0, sl, r7
 8013074:	4427      	add	r7, r4
 8013076:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801307a:	45cb      	cmp	fp, r9
 801307c:	bfbc      	itt	lt
 801307e:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 8013082:	445d      	addlt	r5, fp
 8013084:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013088:	bfb8      	it	lt
 801308a:	b22d      	sxthlt	r5, r5
 801308c:	f7fa fb29 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013090:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013094:	2800      	cmp	r0, #0
 8013096:	f47f af1c 	bne.w	8012ed2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x542>
 801309a:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801309e:	fa1f fb8b 	uxth.w	fp, fp
 80130a2:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 80130a6:	1aad      	subs	r5, r5, r2
 80130a8:	4829      	ldr	r0, [pc, #164]	@ (8013150 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7c0>)
 80130aa:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 80130ae:	454d      	cmp	r5, r9
 80130b0:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80130b4:	6800      	ldr	r0, [r0, #0]
 80130b6:	bfa8      	it	ge
 80130b8:	464d      	movge	r5, r9
 80130ba:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 80130be:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 80130c2:	b289      	uxth	r1, r1
 80130c4:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80130c8:	b2ad      	uxth	r5, r5
 80130ca:	f8d0 c000 	ldr.w	ip, [r0]
 80130ce:	b292      	uxth	r2, r2
 80130d0:	455d      	cmp	r5, fp
 80130d2:	bf94      	ite	ls
 80130d4:	9500      	strls	r5, [sp, #0]
 80130d6:	f8cd b000 	strhi.w	fp, [sp]
 80130da:	b29b      	uxth	r3, r3
 80130dc:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 80130e0:	47a8      	blx	r5
 80130e2:	6823      	ldr	r3, [r4, #0]
 80130e4:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 80130e8:	a90d      	add	r1, sp, #52	@ 0x34
 80130ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80130ec:	4620      	mov	r0, r4
 80130ee:	4798      	blx	r3
 80130f0:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 80130f4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80130f8:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 80130fc:	1a5b      	subs	r3, r3, r1
 80130fe:	440a      	add	r2, r1
 8013100:	b21b      	sxth	r3, r3
 8013102:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8013106:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801310a:	2b00      	cmp	r3, #0
 801310c:	f47f aedc 	bne.w	8012ec8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 8013110:	fa1f f188 	uxth.w	r1, r8
 8013114:	4650      	mov	r0, sl
 8013116:	f7ff f8a9 	bl	801226c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801311a:	e6d5      	b.n	8012ec8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 801311c:	8835      	ldrh	r5, [r6, #0]
 801311e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8013122:	42ab      	cmp	r3, r5
 8013124:	f67f adc4 	bls.w	8012cb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8013128:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801312c:	ab0d      	add	r3, sp, #52	@ 0x34
 801312e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8013132:	6851      	ldr	r1, [r2, #4]
 8013134:	c303      	stmia	r3!, {r0, r1}
 8013136:	a80d      	add	r0, sp, #52	@ 0x34
 8013138:	f7fa fad3 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801313c:	b920      	cbnz	r0, 8013148 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b8>
 801313e:	6823      	ldr	r3, [r4, #0]
 8013140:	a90d      	add	r1, sp, #52	@ 0x34
 8013142:	4620      	mov	r0, r4
 8013144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013146:	4798      	blx	r3
 8013148:	3501      	adds	r5, #1
 801314a:	b2ad      	uxth	r5, r5
 801314c:	e7e7      	b.n	801311e <_ZN8touchgfx11Application15drawCachedAreasEv+0x78e>
 801314e:	bf00      	nop
 8013150:	24025120 	.word	0x24025120

08013154 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8013154:	4b03      	ldr	r3, [pc, #12]	@ (8013164 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8013156:	2200      	movs	r2, #0
 8013158:	801a      	strh	r2, [r3, #0]
 801315a:	805a      	strh	r2, [r3, #2]
 801315c:	809a      	strh	r2, [r3, #4]
 801315e:	80da      	strh	r2, [r3, #6]
 8013160:	4770      	bx	lr
 8013162:	bf00      	nop
 8013164:	2402516c 	.word	0x2402516c

08013168 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8013168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801316c:	b09d      	sub	sp, #116	@ 0x74
 801316e:	4606      	mov	r6, r0
 8013170:	4614      	mov	r4, r2
 8013172:	468a      	mov	sl, r1
 8013174:	a803      	add	r0, sp, #12
 8013176:	461d      	mov	r5, r3
 8013178:	f001 f924 	bl	80143c4 <_ZN8touchgfx12TextProviderC1Ev>
 801317c:	6833      	ldr	r3, [r6, #0]
 801317e:	4630      	mov	r0, r6
 8013180:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8013184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013186:	4798      	blx	r3
 8013188:	6833      	ldr	r3, [r6, #0]
 801318a:	4607      	mov	r7, r0
 801318c:	4630      	mov	r0, r6
 801318e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013190:	4798      	blx	r3
 8013192:	462a      	mov	r2, r5
 8013194:	2500      	movs	r5, #0
 8013196:	4621      	mov	r1, r4
 8013198:	9000      	str	r0, [sp, #0]
 801319a:	463b      	mov	r3, r7
 801319c:	462c      	mov	r4, r5
 801319e:	46a9      	mov	r9, r5
 80131a0:	46a8      	mov	r8, r5
 80131a2:	a803      	add	r0, sp, #12
 80131a4:	f001 f961 	bl	801446a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80131a8:	2300      	movs	r3, #0
 80131aa:	9302      	str	r3, [sp, #8]
 80131ac:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80131b0:	429c      	cmp	r4, r3
 80131b2:	d002      	beq.n	80131ba <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80131b4:	455c      	cmp	r4, fp
 80131b6:	bf18      	it	ne
 80131b8:	4625      	movne	r5, r4
 80131ba:	ab02      	add	r3, sp, #8
 80131bc:	4632      	mov	r2, r6
 80131be:	4651      	mov	r1, sl
 80131c0:	a803      	add	r0, sp, #12
 80131c2:	f001 fc75 	bl	8014ab0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80131c6:	4604      	mov	r4, r0
 80131c8:	b108      	cbz	r0, 80131ce <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80131ca:	280a      	cmp	r0, #10
 80131cc:	d10a      	bne.n	80131e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80131ce:	45c1      	cmp	r9, r8
 80131d0:	bf38      	it	cc
 80131d2:	46c1      	movcc	r9, r8
 80131d4:	f04f 0800 	mov.w	r8, #0
 80131d8:	2c00      	cmp	r4, #0
 80131da:	d1e5      	bne.n	80131a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80131dc:	4648      	mov	r0, r9
 80131de:	b01d      	add	sp, #116	@ 0x74
 80131e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131e4:	9a02      	ldr	r2, [sp, #8]
 80131e6:	2a00      	cmp	r2, #0
 80131e8:	d0de      	beq.n	80131a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80131ea:	7b57      	ldrb	r7, [r2, #13]
 80131ec:	4629      	mov	r1, r5
 80131ee:	6833      	ldr	r3, [r6, #0]
 80131f0:	007f      	lsls	r7, r7, #1
 80131f2:	8894      	ldrh	r4, [r2, #4]
 80131f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80131f6:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 80131fa:	7a97      	ldrb	r7, [r2, #10]
 80131fc:	4307      	orrs	r7, r0
 80131fe:	4630      	mov	r0, r6
 8013200:	4798      	blx	r3
 8013202:	4438      	add	r0, r7
 8013204:	4480      	add	r8, r0
 8013206:	fa1f f888 	uxth.w	r8, r8
 801320a:	e7e5      	b.n	80131d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801320c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801320c:	b508      	push	{r3, lr}
 801320e:	6803      	ldr	r3, [r0, #0]
 8013210:	68db      	ldr	r3, [r3, #12]
 8013212:	4798      	blx	r3
 8013214:	b128      	cbz	r0, 8013222 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8013216:	7b43      	ldrb	r3, [r0, #13]
 8013218:	7a80      	ldrb	r0, [r0, #10]
 801321a:	005b      	lsls	r3, r3, #1
 801321c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013220:	4318      	orrs	r0, r3
 8013222:	bd08      	pop	{r3, pc}

08013224 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8013224:	b40e      	push	{r1, r2, r3}
 8013226:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013228:	b09e      	sub	sp, #120	@ 0x78
 801322a:	4605      	mov	r5, r0
 801322c:	ab23      	add	r3, sp, #140	@ 0x8c
 801322e:	a805      	add	r0, sp, #20
 8013230:	f853 4b04 	ldr.w	r4, [r3], #4
 8013234:	9303      	str	r3, [sp, #12]
 8013236:	f001 f8c5 	bl	80143c4 <_ZN8touchgfx12TextProviderC1Ev>
 801323a:	682b      	ldr	r3, [r5, #0]
 801323c:	4628      	mov	r0, r5
 801323e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013240:	4798      	blx	r3
 8013242:	682b      	ldr	r3, [r5, #0]
 8013244:	4606      	mov	r6, r0
 8013246:	4628      	mov	r0, r5
 8013248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801324a:	4798      	blx	r3
 801324c:	4633      	mov	r3, r6
 801324e:	4621      	mov	r1, r4
 8013250:	ae1e      	add	r6, sp, #120	@ 0x78
 8013252:	2400      	movs	r4, #0
 8013254:	9000      	str	r0, [sp, #0]
 8013256:	9a03      	ldr	r2, [sp, #12]
 8013258:	a805      	add	r0, sp, #20
 801325a:	f001 f906 	bl	801446a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801325e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8013262:	462a      	mov	r2, r5
 8013264:	4633      	mov	r3, r6
 8013266:	4621      	mov	r1, r4
 8013268:	a805      	add	r0, sp, #20
 801326a:	f001 fc21 	bl	8014ab0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801326e:	b300      	cbz	r0, 80132b2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8013270:	280a      	cmp	r0, #10
 8013272:	d01a      	beq.n	80132aa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8013274:	9f04      	ldr	r7, [sp, #16]
 8013276:	b1c7      	cbz	r7, 80132aa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8013278:	7b78      	ldrb	r0, [r7, #13]
 801327a:	7a3b      	ldrb	r3, [r7, #8]
 801327c:	00c1      	lsls	r1, r0, #3
 801327e:	88ea      	ldrh	r2, [r5, #6]
 8013280:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8013284:	4319      	orrs	r1, r3
 8013286:	0643      	lsls	r3, r0, #25
 8013288:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801328c:	bf48      	it	mi
 801328e:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8013292:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8013296:	bf48      	it	mi
 8013298:	b219      	sxthmi	r1, r3
 801329a:	79fb      	ldrb	r3, [r7, #7]
 801329c:	4303      	orrs	r3, r0
 801329e:	4413      	add	r3, r2
 80132a0:	1a5b      	subs	r3, r3, r1
 80132a2:	b21b      	sxth	r3, r3
 80132a4:	429c      	cmp	r4, r3
 80132a6:	bfb8      	it	lt
 80132a8:	461c      	movlt	r4, r3
 80132aa:	4633      	mov	r3, r6
 80132ac:	462a      	mov	r2, r5
 80132ae:	2100      	movs	r1, #0
 80132b0:	e7da      	b.n	8013268 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80132b2:	b2a0      	uxth	r0, r4
 80132b4:	b01e      	add	sp, #120	@ 0x78
 80132b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80132ba:	b003      	add	sp, #12
 80132bc:	4770      	bx	lr

080132be <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80132be:	7a43      	ldrb	r3, [r0, #9]
 80132c0:	8880      	ldrh	r0, [r0, #4]
 80132c2:	4418      	add	r0, r3
 80132c4:	b280      	uxth	r0, r0
 80132c6:	4770      	bx	lr

080132c8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80132c8:	6803      	ldr	r3, [r0, #0]
 80132ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80132cc:	4718      	bx	r3

080132ce <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80132ce:	b40e      	push	{r1, r2, r3}
 80132d0:	b570      	push	{r4, r5, r6, lr}
 80132d2:	b09d      	sub	sp, #116	@ 0x74
 80132d4:	4604      	mov	r4, r0
 80132d6:	ab21      	add	r3, sp, #132	@ 0x84
 80132d8:	a803      	add	r0, sp, #12
 80132da:	f853 5b04 	ldr.w	r5, [r3], #4
 80132de:	9302      	str	r3, [sp, #8]
 80132e0:	f001 f870 	bl	80143c4 <_ZN8touchgfx12TextProviderC1Ev>
 80132e4:	6823      	ldr	r3, [r4, #0]
 80132e6:	4620      	mov	r0, r4
 80132e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80132ea:	4798      	blx	r3
 80132ec:	6823      	ldr	r3, [r4, #0]
 80132ee:	4606      	mov	r6, r0
 80132f0:	4620      	mov	r0, r4
 80132f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80132f4:	2401      	movs	r4, #1
 80132f6:	4798      	blx	r3
 80132f8:	4633      	mov	r3, r6
 80132fa:	9000      	str	r0, [sp, #0]
 80132fc:	4629      	mov	r1, r5
 80132fe:	9a02      	ldr	r2, [sp, #8]
 8013300:	a803      	add	r0, sp, #12
 8013302:	f001 f8b2 	bl	801446a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013306:	a803      	add	r0, sp, #12
 8013308:	f001 fc52 	bl	8014bb0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801330c:	b2a3      	uxth	r3, r4
 801330e:	b138      	cbz	r0, 8013320 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8013310:	280a      	cmp	r0, #10
 8013312:	a803      	add	r0, sp, #12
 8013314:	bf04      	itt	eq
 8013316:	3301      	addeq	r3, #1
 8013318:	b21c      	sxtheq	r4, r3
 801331a:	f001 fc49 	bl	8014bb0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801331e:	e7f5      	b.n	801330c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8013320:	4618      	mov	r0, r3
 8013322:	b01d      	add	sp, #116	@ 0x74
 8013324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013328:	b003      	add	sp, #12
 801332a:	4770      	bx	lr

0801332c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801332c:	b40e      	push	{r1, r2, r3}
 801332e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013330:	b09e      	sub	sp, #120	@ 0x78
 8013332:	4604      	mov	r4, r0
 8013334:	ab23      	add	r3, sp, #140	@ 0x8c
 8013336:	a805      	add	r0, sp, #20
 8013338:	f853 5b04 	ldr.w	r5, [r3], #4
 801333c:	9303      	str	r3, [sp, #12]
 801333e:	f001 f841 	bl	80143c4 <_ZN8touchgfx12TextProviderC1Ev>
 8013342:	6823      	ldr	r3, [r4, #0]
 8013344:	4620      	mov	r0, r4
 8013346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013348:	4798      	blx	r3
 801334a:	6823      	ldr	r3, [r4, #0]
 801334c:	4606      	mov	r6, r0
 801334e:	4620      	mov	r0, r4
 8013350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013352:	4798      	blx	r3
 8013354:	4633      	mov	r3, r6
 8013356:	4629      	mov	r1, r5
 8013358:	9000      	str	r0, [sp, #0]
 801335a:	9a03      	ldr	r2, [sp, #12]
 801335c:	a805      	add	r0, sp, #20
 801335e:	f001 f884 	bl	801446a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013362:	ad1e      	add	r5, sp, #120	@ 0x78
 8013364:	2100      	movs	r1, #0
 8013366:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801336a:	4622      	mov	r2, r4
 801336c:	a805      	add	r0, sp, #20
 801336e:	f845 1d68 	str.w	r1, [r5, #-104]!
 8013372:	462b      	mov	r3, r5
 8013374:	f001 fb9c 	bl	8014ab0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013378:	b1d8      	cbz	r0, 80133b2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801337a:	280a      	cmp	r0, #10
 801337c:	d012      	beq.n	80133a4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801337e:	9804      	ldr	r0, [sp, #16]
 8013380:	b180      	cbz	r0, 80133a4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8013382:	7b47      	ldrb	r7, [r0, #13]
 8013384:	88e2      	ldrh	r2, [r4, #6]
 8013386:	00fb      	lsls	r3, r7, #3
 8013388:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801338c:	7a03      	ldrb	r3, [r0, #8]
 801338e:	430b      	orrs	r3, r1
 8013390:	0679      	lsls	r1, r7, #25
 8013392:	bf44      	itt	mi
 8013394:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8013398:	b21b      	sxthmi	r3, r3
 801339a:	1ad3      	subs	r3, r2, r3
 801339c:	b21b      	sxth	r3, r3
 801339e:	429e      	cmp	r6, r3
 80133a0:	bfa8      	it	ge
 80133a2:	461e      	movge	r6, r3
 80133a4:	462b      	mov	r3, r5
 80133a6:	4622      	mov	r2, r4
 80133a8:	2100      	movs	r1, #0
 80133aa:	a805      	add	r0, sp, #20
 80133ac:	f001 fb80 	bl	8014ab0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80133b0:	e7e2      	b.n	8013378 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80133b2:	4630      	mov	r0, r6
 80133b4:	b01e      	add	sp, #120	@ 0x78
 80133b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80133ba:	b003      	add	sp, #12
 80133bc:	4770      	bx	lr

080133be <_ZNK8touchgfx8Drawable10invalidateEv>:
 80133be:	b513      	push	{r0, r1, r4, lr}
 80133c0:	6803      	ldr	r3, [r0, #0]
 80133c2:	2400      	movs	r4, #0
 80133c4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80133c8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80133cc:	f8ad 1004 	strh.w	r1, [sp, #4]
 80133d0:	4669      	mov	r1, sp
 80133d2:	691b      	ldr	r3, [r3, #16]
 80133d4:	9400      	str	r4, [sp, #0]
 80133d6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80133da:	4798      	blx	r3
 80133dc:	b002      	add	sp, #8
 80133de:	bd10      	pop	{r4, pc}

080133e0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80133e0:	b538      	push	{r3, r4, r5, lr}
 80133e2:	680b      	ldr	r3, [r1, #0]
 80133e4:	460c      	mov	r4, r1
 80133e6:	4605      	mov	r5, r0
 80133e8:	68db      	ldr	r3, [r3, #12]
 80133ea:	4798      	blx	r3
 80133ec:	6823      	ldr	r3, [r4, #0]
 80133ee:	4620      	mov	r0, r4
 80133f0:	4629      	mov	r1, r5
 80133f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133f4:	4798      	blx	r3
 80133f6:	4628      	mov	r0, r5
 80133f8:	bd38      	pop	{r3, r4, r5, pc}

080133fa <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80133fa:	b410      	push	{r4}
 80133fc:	880a      	ldrh	r2, [r1, #0]
 80133fe:	8884      	ldrh	r4, [r0, #4]
 8013400:	4422      	add	r2, r4
 8013402:	800a      	strh	r2, [r1, #0]
 8013404:	884a      	ldrh	r2, [r1, #2]
 8013406:	88c4      	ldrh	r4, [r0, #6]
 8013408:	4422      	add	r2, r4
 801340a:	804a      	strh	r2, [r1, #2]
 801340c:	6940      	ldr	r0, [r0, #20]
 801340e:	b120      	cbz	r0, 801341a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8013410:	6803      	ldr	r3, [r0, #0]
 8013412:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013418:	4718      	bx	r3
 801341a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801341e:	4770      	bx	lr

08013420 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8013420:	b570      	push	{r4, r5, r6, lr}
 8013422:	8882      	ldrh	r2, [r0, #4]
 8013424:	460c      	mov	r4, r1
 8013426:	880b      	ldrh	r3, [r1, #0]
 8013428:	4605      	mov	r5, r0
 801342a:	4413      	add	r3, r2
 801342c:	800b      	strh	r3, [r1, #0]
 801342e:	884b      	ldrh	r3, [r1, #2]
 8013430:	88c2      	ldrh	r2, [r0, #6]
 8013432:	4413      	add	r3, r2
 8013434:	804b      	strh	r3, [r1, #2]
 8013436:	1d01      	adds	r1, r0, #4
 8013438:	4620      	mov	r0, r4
 801343a:	f7fa f90f 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 801343e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013442:	2b00      	cmp	r3, #0
 8013444:	dd0b      	ble.n	801345e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013446:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801344a:	2b00      	cmp	r3, #0
 801344c:	dd07      	ble.n	801345e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801344e:	6968      	ldr	r0, [r5, #20]
 8013450:	b128      	cbz	r0, 801345e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013452:	6803      	ldr	r3, [r0, #0]
 8013454:	4621      	mov	r1, r4
 8013456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801345c:	4718      	bx	r3
 801345e:	bd70      	pop	{r4, r5, r6, pc}

08013460 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8013460:	b570      	push	{r4, r5, r6, lr}
 8013462:	8882      	ldrh	r2, [r0, #4]
 8013464:	460c      	mov	r4, r1
 8013466:	880b      	ldrh	r3, [r1, #0]
 8013468:	4605      	mov	r5, r0
 801346a:	4413      	add	r3, r2
 801346c:	800b      	strh	r3, [r1, #0]
 801346e:	884b      	ldrh	r3, [r1, #2]
 8013470:	88c2      	ldrh	r2, [r0, #6]
 8013472:	4413      	add	r3, r2
 8013474:	804b      	strh	r3, [r1, #2]
 8013476:	1d01      	adds	r1, r0, #4
 8013478:	4620      	mov	r0, r4
 801347a:	f7fa f8ef 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 801347e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013482:	2b00      	cmp	r3, #0
 8013484:	dd19      	ble.n	80134ba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8013486:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801348a:	2b00      	cmp	r3, #0
 801348c:	dd15      	ble.n	80134ba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801348e:	6968      	ldr	r0, [r5, #20]
 8013490:	b128      	cbz	r0, 801349e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8013492:	6803      	ldr	r3, [r0, #0]
 8013494:	4621      	mov	r1, r4
 8013496:	691b      	ldr	r3, [r3, #16]
 8013498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801349c:	4718      	bx	r3
 801349e:	4b07      	ldr	r3, [pc, #28]	@ (80134bc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	3304      	adds	r3, #4
 80134a4:	429d      	cmp	r5, r3
 80134a6:	d108      	bne.n	80134ba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80134a8:	f7fe fdd0 	bl	801204c <_ZN8touchgfx11Application11getInstanceEv>
 80134ac:	6803      	ldr	r3, [r0, #0]
 80134ae:	6821      	ldr	r1, [r4, #0]
 80134b0:	6862      	ldr	r2, [r4, #4]
 80134b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134b8:	4718      	bx	r3
 80134ba:	bd70      	pop	{r4, r5, r6, pc}
 80134bc:	24025164 	.word	0x24025164

080134c0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80134c0:	b570      	push	{r4, r5, r6, lr}
 80134c2:	4604      	mov	r4, r0
 80134c4:	4616      	mov	r6, r2
 80134c6:	460d      	mov	r5, r1
 80134c8:	b901      	cbnz	r1, 80134cc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80134ca:	b192      	cbz	r2, 80134f2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80134cc:	6823      	ldr	r3, [r4, #0]
 80134ce:	4620      	mov	r0, r4
 80134d0:	699b      	ldr	r3, [r3, #24]
 80134d2:	4798      	blx	r3
 80134d4:	88e2      	ldrh	r2, [r4, #6]
 80134d6:	88a1      	ldrh	r1, [r4, #4]
 80134d8:	4620      	mov	r0, r4
 80134da:	4432      	add	r2, r6
 80134dc:	4429      	add	r1, r5
 80134de:	b212      	sxth	r2, r2
 80134e0:	b209      	sxth	r1, r1
 80134e2:	f7f0 fcb0 	bl	8003e46 <_ZN8touchgfx8Drawable5setXYEss>
 80134e6:	6823      	ldr	r3, [r4, #0]
 80134e8:	4620      	mov	r0, r4
 80134ea:	699b      	ldr	r3, [r3, #24]
 80134ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134f0:	4718      	bx	r3
 80134f2:	bd70      	pop	{r4, r5, r6, pc}

080134f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80134f4:	b510      	push	{r4, lr}
 80134f6:	2300      	movs	r3, #0
 80134f8:	4604      	mov	r4, r0
 80134fa:	4608      	mov	r0, r1
 80134fc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8013500:	8023      	strh	r3, [r4, #0]
 8013502:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013506:	8063      	strh	r3, [r4, #2]
 8013508:	6803      	ldr	r3, [r0, #0]
 801350a:	80a1      	strh	r1, [r4, #4]
 801350c:	4621      	mov	r1, r4
 801350e:	80e2      	strh	r2, [r4, #6]
 8013510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013512:	4798      	blx	r3
 8013514:	4620      	mov	r0, r4
 8013516:	bd10      	pop	{r4, pc}

08013518 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8013518:	4770      	bx	lr

0801351a <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 801351a:	b510      	push	{r4, lr}
 801351c:	4604      	mov	r4, r0
 801351e:	211c      	movs	r1, #28
 8013520:	f00c fdca 	bl	80200b8 <_ZdlPvj>
 8013524:	4620      	mov	r0, r4
 8013526:	bd10      	pop	{r4, pc}

08013528 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8013528:	4a04      	ldr	r2, [pc, #16]	@ (801353c <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801352a:	6002      	str	r2, [r0, #0]
 801352c:	2200      	movs	r2, #0
 801352e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8013532:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013536:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801353a:	4770      	bx	lr
 801353c:	08024494 	.word	0x08024494

08013540 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 8013540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013544:	4604      	mov	r4, r0
 8013546:	b087      	sub	sp, #28
 8013548:	8b45      	ldrh	r5, [r0, #26]
 801354a:	f8b2 c000 	ldrh.w	ip, [r2]
 801354e:	9105      	str	r1, [sp, #20]
 8013550:	1c68      	adds	r0, r5, #1
 8013552:	68e1      	ldr	r1, [r4, #12]
 8013554:	9203      	str	r2, [sp, #12]
 8013556:	b280      	uxth	r0, r0
 8013558:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801355c:	f01c 0501 	ands.w	r5, ip, #1
 8013560:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013564:	9502      	str	r5, [sp, #8]
 8013566:	d07d      	beq.n	8013664 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x124>
 8013568:	ee07 2a90 	vmov	s15, r2
 801356c:	8360      	strh	r0, [r4, #26]
 801356e:	f04f 0e00 	mov.w	lr, #0
 8013572:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013576:	ee06 ea10 	vmov	s12, lr
 801357a:	edc1 6a00 	vstr	s13, [r1]
 801357e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013582:	8b61      	ldrh	r1, [r4, #26]
 8013584:	ee07 2a10 	vmov	s14, r2
 8013588:	68e2      	ldr	r2, [r4, #12]
 801358a:	1c48      	adds	r0, r1, #1
 801358c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013590:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8013594:	8360      	strh	r0, [r4, #26]
 8013596:	ed82 7a00 	vstr	s14, [r2]
 801359a:	8b21      	ldrh	r1, [r4, #24]
 801359c:	2501      	movs	r5, #1
 801359e:	68a2      	ldr	r2, [r4, #8]
 80135a0:	3304      	adds	r3, #4
 80135a2:	1c48      	adds	r0, r1, #1
 80135a4:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80135a8:	9300      	str	r3, [sp, #0]
 80135aa:	46aa      	mov	sl, r5
 80135ac:	8320      	strh	r0, [r4, #24]
 80135ae:	462e      	mov	r6, r5
 80135b0:	5455      	strb	r5, [r2, r1]
 80135b2:	2200      	movs	r2, #0
 80135b4:	ee07 2a90 	vmov	s15, r2
 80135b8:	4613      	mov	r3, r2
 80135ba:	4611      	mov	r1, r2
 80135bc:	9201      	str	r2, [sp, #4]
 80135be:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 80135c2:	9805      	ldr	r0, [sp, #20]
 80135c4:	f108 0701 	add.w	r7, r8, #1
 80135c8:	f8d4 b008 	ldr.w	fp, [r4, #8]
 80135cc:	42a8      	cmp	r0, r5
 80135ce:	b2bf      	uxth	r7, r7
 80135d0:	eb0b 0908 	add.w	r9, fp, r8
 80135d4:	f340 80db 	ble.w	801378e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x24e>
 80135d8:	fa4c f906 	asr.w	r9, ip, r6
 80135dc:	f009 0901 	and.w	r9, r9, #1
 80135e0:	fa5f f389 	uxtb.w	r3, r9
 80135e4:	9304      	str	r3, [sp, #16]
 80135e6:	9b00      	ldr	r3, [sp, #0]
 80135e8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80135ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80135f0:	f1b9 0f00 	cmp.w	r9, #0
 80135f4:	d07d      	beq.n	80136f2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1b2>
 80135f6:	ee05 1a10 	vmov	s10, r1
 80135fa:	8327      	strh	r7, [r4, #24]
 80135fc:	eef8 4ac5 	vcvt.f32.s32	s9, s10
 8013600:	ee05 3a10 	vmov	s10, r3
 8013604:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013608:	f1ba 0f00 	cmp.w	sl, #0
 801360c:	d050      	beq.n	80136b0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x170>
 801360e:	f04f 0002 	mov.w	r0, #2
 8013612:	f80b 0008 	strb.w	r0, [fp, r8]
 8013616:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801361a:	68e7      	ldr	r7, [r4, #12]
 801361c:	f108 0901 	add.w	r9, r8, #1
 8013620:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013624:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013628:	edc7 4a00 	vstr	s9, [r7]
 801362c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013630:	68e7      	ldr	r7, [r4, #12]
 8013632:	f108 0901 	add.w	r9, r8, #1
 8013636:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801363a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801363e:	ed87 5a00 	vstr	s10, [r7]
 8013642:	3601      	adds	r6, #1
 8013644:	2e10      	cmp	r6, #16
 8013646:	d106      	bne.n	8013656 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x116>
 8013648:	9e01      	ldr	r6, [sp, #4]
 801364a:	9803      	ldr	r0, [sp, #12]
 801364c:	3601      	adds	r6, #1
 801364e:	9601      	str	r6, [sp, #4]
 8013650:	f830 c016 	ldrh.w	ip, [r0, r6, lsl #1]
 8013654:	2600      	movs	r6, #0
 8013656:	9800      	ldr	r0, [sp, #0]
 8013658:	3501      	adds	r5, #1
 801365a:	f8dd a010 	ldr.w	sl, [sp, #16]
 801365e:	3004      	adds	r0, #4
 8013660:	9000      	str	r0, [sp, #0]
 8013662:	e7ac      	b.n	80135be <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x7e>
 8013664:	ee06 2a10 	vmov	s12, r2
 8013668:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801366c:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8013670:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013674:	ee16 5a10 	vmov	r5, s12
 8013678:	442a      	add	r2, r5
 801367a:	ee06 2a90 	vmov	s13, r2
 801367e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8013682:	8360      	strh	r0, [r4, #26]
 8013684:	4472      	add	r2, lr
 8013686:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801368a:	ee07 2a10 	vmov	s14, r2
 801368e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013692:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013696:	edc1 6a00 	vstr	s13, [r1]
 801369a:	8b61      	ldrh	r1, [r4, #26]
 801369c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80136a0:	68e2      	ldr	r2, [r4, #12]
 80136a2:	1c48      	adds	r0, r1, #1
 80136a4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80136a8:	8360      	strh	r0, [r4, #26]
 80136aa:	ed82 7a00 	vstr	s14, [r2]
 80136ae:	e774      	b.n	801359a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x5a>
 80136b0:	f04f 0005 	mov.w	r0, #5
 80136b4:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 80136b8:	f80b 0008 	strb.w	r0, [fp, r8]
 80136bc:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80136c0:	68e7      	ldr	r7, [r4, #12]
 80136c2:	f108 0901 	add.w	r9, r8, #1
 80136c6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80136ca:	f8a4 901a 	strh.w	r9, [r4, #26]
 80136ce:	ed87 4a00 	vstr	s8, [r7]
 80136d2:	ee04 2a10 	vmov	s8, r2
 80136d6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80136da:	68e7      	ldr	r7, [r4, #12]
 80136dc:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80136e0:	f108 0901 	add.w	r9, r8, #1
 80136e4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80136e8:	f8a4 901a 	strh.w	r9, [r4, #26]
 80136ec:	ed87 4a00 	vstr	s8, [r7]
 80136f0:	e791      	b.n	8013616 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xd6>
 80136f2:	f1ba 0f00 	cmp.w	sl, #0
 80136f6:	d146      	bne.n	8013786 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x246>
 80136f8:	f04f 0005 	mov.w	r0, #5
 80136fc:	8327      	strh	r7, [r4, #24]
 80136fe:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8013702:	f80b 0008 	strb.w	r0, [fp, r8]
 8013706:	ee17 0a90 	vmov	r0, s15
 801370a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801370e:	68e7      	ldr	r7, [r4, #12]
 8013710:	4408      	add	r0, r1
 8013712:	f108 0901 	add.w	r9, r8, #1
 8013716:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801371a:	ee07 0a90 	vmov	s15, r0
 801371e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013722:	ed87 5a00 	vstr	s10, [r7]
 8013726:	ee05 2a10 	vmov	s10, r2
 801372a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801372e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013732:	68e7      	ldr	r7, [r4, #12]
 8013734:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013738:	f108 0901 	add.w	r9, r8, #1
 801373c:	441a      	add	r2, r3
 801373e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013742:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013746:	f8a4 901a 	strh.w	r9, [r4, #26]
 801374a:	ed87 5a00 	vstr	s10, [r7]
 801374e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013752:	68e7      	ldr	r7, [r4, #12]
 8013754:	f108 0901 	add.w	r9, r8, #1
 8013758:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801375c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013760:	edc7 7a00 	vstr	s15, [r7]
 8013764:	ee07 2a90 	vmov	s15, r2
 8013768:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801376c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013770:	68e7      	ldr	r7, [r4, #12]
 8013772:	f108 0901 	add.w	r9, r8, #1
 8013776:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801377a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801377e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013782:	edc7 7a00 	vstr	s15, [r7]
 8013786:	461a      	mov	r2, r3
 8013788:	ee07 1a90 	vmov	s15, r1
 801378c:	e759      	b.n	8013642 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 801378e:	f1ba 0f00 	cmp.w	sl, #0
 8013792:	d045      	beq.n	8013820 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 8013794:	ee05 1a90 	vmov	s11, r1
 8013798:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801379c:	eef4 5a66 	vcmp.f32	s11, s13
 80137a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137a4:	d108      	bne.n	80137b8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x278>
 80137a6:	ee05 3a90 	vmov	s11, r3
 80137aa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80137ae:	eef4 5a47 	vcmp.f32	s11, s14
 80137b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137b6:	d033      	beq.n	8013820 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 80137b8:	9b02      	ldr	r3, [sp, #8]
 80137ba:	8327      	strh	r7, [r4, #24]
 80137bc:	b1b3      	cbz	r3, 80137ec <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2ac>
 80137be:	2302      	movs	r3, #2
 80137c0:	f889 3000 	strb.w	r3, [r9]
 80137c4:	8b62      	ldrh	r2, [r4, #26]
 80137c6:	68e3      	ldr	r3, [r4, #12]
 80137c8:	1c51      	adds	r1, r2, #1
 80137ca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80137ce:	8361      	strh	r1, [r4, #26]
 80137d0:	edc3 6a00 	vstr	s13, [r3]
 80137d4:	8b62      	ldrh	r2, [r4, #26]
 80137d6:	68e3      	ldr	r3, [r4, #12]
 80137d8:	1c51      	adds	r1, r2, #1
 80137da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80137de:	8361      	strh	r1, [r4, #26]
 80137e0:	ed83 7a00 	vstr	s14, [r3]
 80137e4:	9800      	ldr	r0, [sp, #0]
 80137e6:	b007      	add	sp, #28
 80137e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137ec:	2305      	movs	r3, #5
 80137ee:	f889 3000 	strb.w	r3, [r9]
 80137f2:	8b62      	ldrh	r2, [r4, #26]
 80137f4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80137f8:	68e3      	ldr	r3, [r4, #12]
 80137fa:	ee07 ea90 	vmov	s15, lr
 80137fe:	1c51      	adds	r1, r2, #1
 8013800:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013808:	8361      	strh	r1, [r4, #26]
 801380a:	ed83 6a00 	vstr	s12, [r3]
 801380e:	8b62      	ldrh	r2, [r4, #26]
 8013810:	68e3      	ldr	r3, [r4, #12]
 8013812:	1c51      	adds	r1, r2, #1
 8013814:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013818:	8361      	strh	r1, [r4, #26]
 801381a:	edc3 7a00 	vstr	s15, [r3]
 801381e:	e7d1      	b.n	80137c4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 8013820:	ee05 2a90 	vmov	s11, r2
 8013824:	2305      	movs	r3, #5
 8013826:	9902      	ldr	r1, [sp, #8]
 8013828:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801382c:	8327      	strh	r7, [r4, #24]
 801382e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013832:	f889 3000 	strb.w	r3, [r9]
 8013836:	b181      	cbz	r1, 801385a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x31a>
 8013838:	8b62      	ldrh	r2, [r4, #26]
 801383a:	68e3      	ldr	r3, [r4, #12]
 801383c:	1c51      	adds	r1, r2, #1
 801383e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013842:	8361      	strh	r1, [r4, #26]
 8013844:	ed83 5a00 	vstr	s10, [r3]
 8013848:	8b62      	ldrh	r2, [r4, #26]
 801384a:	68e3      	ldr	r3, [r4, #12]
 801384c:	1c51      	adds	r1, r2, #1
 801384e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013852:	8361      	strh	r1, [r4, #26]
 8013854:	edc3 5a00 	vstr	s11, [r3]
 8013858:	e7b4      	b.n	80137c4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 801385a:	8b65      	ldrh	r5, [r4, #26]
 801385c:	ee17 0a90 	vmov	r0, s15
 8013860:	68e1      	ldr	r1, [r4, #12]
 8013862:	4472      	add	r2, lr
 8013864:	1c6e      	adds	r6, r5, #1
 8013866:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801386a:	8366      	strh	r6, [r4, #26]
 801386c:	ed81 5a00 	vstr	s10, [r1]
 8013870:	8b65      	ldrh	r5, [r4, #26]
 8013872:	68e1      	ldr	r1, [r4, #12]
 8013874:	1c6e      	adds	r6, r5, #1
 8013876:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801387a:	8366      	strh	r6, [r4, #26]
 801387c:	edc1 5a00 	vstr	s11, [r1]
 8013880:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8013884:	8b65      	ldrh	r5, [r4, #26]
 8013886:	68e1      	ldr	r1, [r4, #12]
 8013888:	1c6e      	adds	r6, r5, #1
 801388a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801388e:	ee16 5a10 	vmov	r5, s12
 8013892:	8366      	strh	r6, [r4, #26]
 8013894:	4428      	add	r0, r5
 8013896:	ee07 0a90 	vmov	s15, r0
 801389a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801389e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80138a2:	edc1 7a00 	vstr	s15, [r1]
 80138a6:	ee07 2a90 	vmov	s15, r2
 80138aa:	8b61      	ldrh	r1, [r4, #26]
 80138ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138b0:	68e5      	ldr	r5, [r4, #12]
 80138b2:	1c4e      	adds	r6, r1, #1
 80138b4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80138b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80138bc:	8366      	strh	r6, [r4, #26]
 80138be:	edc1 7a00 	vstr	s15, [r1]
 80138c2:	8b22      	ldrh	r2, [r4, #24]
 80138c4:	68a1      	ldr	r1, [r4, #8]
 80138c6:	1c55      	adds	r5, r2, #1
 80138c8:	8325      	strh	r5, [r4, #24]
 80138ca:	548b      	strb	r3, [r1, r2]
 80138cc:	e791      	b.n	80137f2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2b2>
	...

080138d0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 80138d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138d4:	4604      	mov	r4, r0
 80138d6:	b08e      	sub	sp, #56	@ 0x38
 80138d8:	4699      	mov	r9, r3
 80138da:	4688      	mov	r8, r1
 80138dc:	4615      	mov	r5, r2
 80138de:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80138e0:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 80138e4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80138e6:	f7ef ff81 	bl	80037ec <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 80138ea:	6060      	str	r0, [r4, #4]
 80138ec:	f1b9 0f00 	cmp.w	r9, #0
 80138f0:	f000 80e8 	beq.w	8013ac4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 80138f4:	2800      	cmp	r0, #0
 80138f6:	f000 80e5 	beq.w	8013ac4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 80138fa:	a805      	add	r0, sp, #20
 80138fc:	f000 f8f9 	bl	8013af2 <_ZN8touchgfx9Matrix3x3C1Ev>
 8013900:	6833      	ldr	r3, [r6, #0]
 8013902:	4630      	mov	r0, r6
 8013904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013906:	4798      	blx	r3
 8013908:	a805      	add	r0, sp, #20
 801390a:	eef0 0a40 	vmov.f32	s1, s0
 801390e:	f000 f8f4 	bl	8013afa <_ZN8touchgfx9Matrix3x35scaleEff>
 8013912:	6860      	ldr	r0, [r4, #4]
 8013914:	f1ba 0f03 	cmp.w	sl, #3
 8013918:	d83b      	bhi.n	8013992 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801391a:	e8df f00a 	tbb	[pc, sl]
 801391e:	1002      	.short	0x1002
 8013920:	9f71      	.short	0x9f71
 8013922:	6803      	ldr	r3, [r0, #0]
 8013924:	462a      	mov	r2, r5
 8013926:	4641      	mov	r1, r8
 8013928:	689b      	ldr	r3, [r3, #8]
 801392a:	4798      	blx	r3
 801392c:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8013930:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8013934:	ee07 7a90 	vmov	s15, r7
 8013938:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801393c:	e026      	b.n	801398c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801393e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8013942:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8013946:	8869      	ldrh	r1, [r5, #2]
 8013948:	1a9b      	subs	r3, r3, r2
 801394a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801394e:	aa03      	add	r2, sp, #12
 8013950:	1a5b      	subs	r3, r3, r1
 8013952:	4641      	mov	r1, r8
 8013954:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013958:	882b      	ldrh	r3, [r5, #0]
 801395a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801395e:	88ab      	ldrh	r3, [r5, #4]
 8013960:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013964:	6803      	ldr	r3, [r0, #0]
 8013966:	689b      	ldr	r3, [r3, #8]
 8013968:	4798      	blx	r3
 801396a:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8013acc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801396e:	a805      	add	r0, sp, #20
 8013970:	f000 f8e8 	bl	8013b44 <_ZN8touchgfx9Matrix3x36rotateEf>
 8013974:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8013978:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801397a:	ee07 7a90 	vmov	s15, r7
 801397e:	1a9b      	subs	r3, r3, r2
 8013980:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8013984:	ee00 3a10 	vmov	s0, r3
 8013988:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801398c:	a805      	add	r0, sp, #20
 801398e:	f000 f927 	bl	8013be0 <_ZN8touchgfx9Matrix3x39translateEff>
 8013992:	6860      	ldr	r0, [r4, #4]
 8013994:	a905      	add	r1, sp, #20
 8013996:	2500      	movs	r5, #0
 8013998:	f109 0602 	add.w	r6, r9, #2
 801399c:	6803      	ldr	r3, [r0, #0]
 801399e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80139a0:	4798      	blx	r3
 80139a2:	6860      	ldr	r0, [r4, #4]
 80139a4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80139a6:	6803      	ldr	r3, [r0, #0]
 80139a8:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 80139ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139ae:	4798      	blx	r3
 80139b0:	6860      	ldr	r0, [r4, #4]
 80139b2:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 80139b6:	6803      	ldr	r3, [r0, #0]
 80139b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139ba:	4798      	blx	r3
 80139bc:	6860      	ldr	r0, [r4, #4]
 80139be:	2101      	movs	r1, #1
 80139c0:	6803      	ldr	r3, [r0, #0]
 80139c2:	68db      	ldr	r3, [r3, #12]
 80139c4:	4798      	blx	r3
 80139c6:	f8b9 7000 	ldrh.w	r7, [r9]
 80139ca:	f104 0310 	add.w	r3, r4, #16
 80139ce:	61a5      	str	r5, [r4, #24]
 80139d0:	f104 0208 	add.w	r2, r4, #8
 80139d4:	f104 0114 	add.w	r1, r4, #20
 80139d8:	f104 000c 	add.w	r0, r4, #12
 80139dc:	f7f0 fc64 	bl	80042a8 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 80139e0:	42af      	cmp	r7, r5
 80139e2:	dd60      	ble.n	8013aa6 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 80139e4:	8831      	ldrh	r1, [r6, #0]
 80139e6:	1cb2      	adds	r2, r6, #2
 80139e8:	4620      	mov	r0, r4
 80139ea:	3501      	adds	r5, #1
 80139ec:	f101 030f 	add.w	r3, r1, #15
 80139f0:	f3c3 1307 	ubfx	r3, r3, #4, #8
 80139f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80139f8:	f7ff fda2 	bl	8013540 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 80139fc:	4606      	mov	r6, r0
 80139fe:	e7ef      	b.n	80139e0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8013a00:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013a04:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8013a08:	8829      	ldrh	r1, [r5, #0]
 8013a0a:	1a9b      	subs	r3, r3, r2
 8013a0c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013a10:	aa03      	add	r2, sp, #12
 8013a12:	1a5b      	subs	r3, r3, r1
 8013a14:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013a18:	886d      	ldrh	r5, [r5, #2]
 8013a1a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013a1e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013a22:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013a26:	1a5b      	subs	r3, r3, r1
 8013a28:	4641      	mov	r1, r8
 8013a2a:	1b5b      	subs	r3, r3, r5
 8013a2c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013a30:	6803      	ldr	r3, [r0, #0]
 8013a32:	689b      	ldr	r3, [r3, #8]
 8013a34:	4798      	blx	r3
 8013a36:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8013ad0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 8013a3a:	a805      	add	r0, sp, #20
 8013a3c:	f000 f882 	bl	8013b44 <_ZN8touchgfx9Matrix3x36rotateEf>
 8013a40:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8013a44:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013a46:	1a9b      	subs	r3, r3, r2
 8013a48:	ee00 3a90 	vmov	s1, r3
 8013a4c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8013a50:	1bdb      	subs	r3, r3, r7
 8013a52:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8013a56:	ee00 3a10 	vmov	s0, r3
 8013a5a:	e795      	b.n	8013988 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8013a5c:	886b      	ldrh	r3, [r5, #2]
 8013a5e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013a62:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013a66:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013a6a:	8829      	ldrh	r1, [r5, #0]
 8013a6c:	1a9b      	subs	r3, r3, r2
 8013a6e:	f8ad 2012 	strh.w	r2, [sp, #18]
 8013a72:	aa03      	add	r2, sp, #12
 8013a74:	1a5b      	subs	r3, r3, r1
 8013a76:	4641      	mov	r1, r8
 8013a78:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013a7c:	88eb      	ldrh	r3, [r5, #6]
 8013a7e:	f8ad 3010 	strh.w	r3, [sp, #16]
 8013a82:	6803      	ldr	r3, [r0, #0]
 8013a84:	689b      	ldr	r3, [r3, #8]
 8013a86:	4798      	blx	r3
 8013a88:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8013ad4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8013a8c:	a805      	add	r0, sp, #20
 8013a8e:	f000 f859 	bl	8013b44 <_ZN8touchgfx9Matrix3x36rotateEf>
 8013a92:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8013a96:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8013a9a:	1bdb      	subs	r3, r3, r7
 8013a9c:	ee00 3a90 	vmov	s1, r3
 8013aa0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8013aa4:	e748      	b.n	8013938 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 8013aa6:	6860      	ldr	r0, [r4, #4]
 8013aa8:	2100      	movs	r1, #0
 8013aaa:	8b22      	ldrh	r2, [r4, #24]
 8013aac:	6803      	ldr	r3, [r0, #0]
 8013aae:	9101      	str	r1, [sp, #4]
 8013ab0:	8b61      	ldrh	r1, [r4, #26]
 8013ab2:	9100      	str	r1, [sp, #0]
 8013ab4:	6a1d      	ldr	r5, [r3, #32]
 8013ab6:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8013aba:	47a8      	blx	r5
 8013abc:	6860      	ldr	r0, [r4, #4]
 8013abe:	6803      	ldr	r3, [r0, #0]
 8013ac0:	69db      	ldr	r3, [r3, #28]
 8013ac2:	4798      	blx	r3
 8013ac4:	b00e      	add	sp, #56	@ 0x38
 8013ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013aca:	bf00      	nop
 8013acc:	42b40000 	.word	0x42b40000
 8013ad0:	43340000 	.word	0x43340000
 8013ad4:	43870000 	.word	0x43870000

08013ad8 <_ZN8touchgfx9Matrix3x35resetEv>:
 8013ad8:	2300      	movs	r3, #0
 8013ada:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8013ade:	6043      	str	r3, [r0, #4]
 8013ae0:	6002      	str	r2, [r0, #0]
 8013ae2:	6083      	str	r3, [r0, #8]
 8013ae4:	60c3      	str	r3, [r0, #12]
 8013ae6:	6102      	str	r2, [r0, #16]
 8013ae8:	6143      	str	r3, [r0, #20]
 8013aea:	6183      	str	r3, [r0, #24]
 8013aec:	61c3      	str	r3, [r0, #28]
 8013aee:	6202      	str	r2, [r0, #32]
 8013af0:	4770      	bx	lr

08013af2 <_ZN8touchgfx9Matrix3x3C1Ev>:
 8013af2:	b508      	push	{r3, lr}
 8013af4:	f7ff fff0 	bl	8013ad8 <_ZN8touchgfx9Matrix3x35resetEv>
 8013af8:	bd08      	pop	{r3, pc}

08013afa <_ZN8touchgfx9Matrix3x35scaleEff>:
 8013afa:	edd0 7a00 	vldr	s15, [r0]
 8013afe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013b02:	edc0 7a00 	vstr	s15, [r0]
 8013b06:	edd0 7a01 	vldr	s15, [r0, #4]
 8013b0a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013b0e:	edc0 7a01 	vstr	s15, [r0, #4]
 8013b12:	edd0 7a02 	vldr	s15, [r0, #8]
 8013b16:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013b1a:	edd0 7a03 	vldr	s15, [r0, #12]
 8013b1e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8013b22:	ed80 0a02 	vstr	s0, [r0, #8]
 8013b26:	edc0 7a03 	vstr	s15, [r0, #12]
 8013b2a:	edd0 7a04 	vldr	s15, [r0, #16]
 8013b2e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8013b32:	edc0 7a04 	vstr	s15, [r0, #16]
 8013b36:	edd0 7a05 	vldr	s15, [r0, #20]
 8013b3a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8013b3e:	edc0 0a05 	vstr	s1, [r0, #20]
 8013b42:	4770      	bx	lr

08013b44 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8013b44:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8013bd8 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8013b48:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013b4c:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8013bdc <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8013b50:	b510      	push	{r4, lr}
 8013b52:	ed2d 8b02 	vpush	{d8}
 8013b56:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8013b5a:	4604      	mov	r4, r0
 8013b5c:	eeb0 0a68 	vmov.f32	s0, s17
 8013b60:	f00c fbe2 	bl	8020328 <cosf>
 8013b64:	eeb0 8a40 	vmov.f32	s16, s0
 8013b68:	eeb0 0a68 	vmov.f32	s0, s17
 8013b6c:	f00c fb18 	bl	80201a0 <sinf>
 8013b70:	edd4 6a03 	vldr	s13, [r4, #12]
 8013b74:	edd4 4a00 	vldr	s9, [r4]
 8013b78:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8013b7c:	ed94 7a04 	vldr	s14, [r4, #16]
 8013b80:	ed94 5a01 	vldr	s10, [r4, #4]
 8013b84:	ee66 6a88 	vmul.f32	s13, s13, s16
 8013b88:	edd4 5a02 	vldr	s11, [r4, #8]
 8013b8c:	eee8 7a24 	vfma.f32	s15, s16, s9
 8013b90:	eee0 6a24 	vfma.f32	s13, s0, s9
 8013b94:	edc4 7a00 	vstr	s15, [r4]
 8013b98:	ee60 7a47 	vnmul.f32	s15, s0, s14
 8013b9c:	ee27 7a08 	vmul.f32	s14, s14, s16
 8013ba0:	edc4 6a03 	vstr	s13, [r4, #12]
 8013ba4:	eee8 7a05 	vfma.f32	s15, s16, s10
 8013ba8:	eea0 7a05 	vfma.f32	s14, s0, s10
 8013bac:	edc4 7a01 	vstr	s15, [r4, #4]
 8013bb0:	edd4 7a05 	vldr	s15, [r4, #20]
 8013bb4:	ed84 7a04 	vstr	s14, [r4, #16]
 8013bb8:	ee20 6a67 	vnmul.f32	s12, s0, s15
 8013bbc:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013bc0:	eea8 6a25 	vfma.f32	s12, s16, s11
 8013bc4:	eee0 7a25 	vfma.f32	s15, s0, s11
 8013bc8:	ecbd 8b02 	vpop	{d8}
 8013bcc:	ed84 6a02 	vstr	s12, [r4, #8]
 8013bd0:	edc4 7a05 	vstr	s15, [r4, #20]
 8013bd4:	bd10      	pop	{r4, pc}
 8013bd6:	bf00      	nop
 8013bd8:	40490fdb 	.word	0x40490fdb
 8013bdc:	43340000 	.word	0x43340000

08013be0 <_ZN8touchgfx9Matrix3x39translateEff>:
 8013be0:	ed90 6a06 	vldr	s12, [r0, #24]
 8013be4:	edd0 7a00 	vldr	s15, [r0]
 8013be8:	edd0 6a07 	vldr	s13, [r0, #28]
 8013bec:	eee6 7a00 	vfma.f32	s15, s12, s0
 8013bf0:	ed90 7a08 	vldr	s14, [r0, #32]
 8013bf4:	edc0 7a00 	vstr	s15, [r0]
 8013bf8:	edd0 7a01 	vldr	s15, [r0, #4]
 8013bfc:	eee6 7a80 	vfma.f32	s15, s13, s0
 8013c00:	edc0 7a01 	vstr	s15, [r0, #4]
 8013c04:	edd0 7a02 	vldr	s15, [r0, #8]
 8013c08:	eee7 7a00 	vfma.f32	s15, s14, s0
 8013c0c:	edc0 7a02 	vstr	s15, [r0, #8]
 8013c10:	edd0 7a03 	vldr	s15, [r0, #12]
 8013c14:	eee6 7a20 	vfma.f32	s15, s12, s1
 8013c18:	edc0 7a03 	vstr	s15, [r0, #12]
 8013c1c:	edd0 7a04 	vldr	s15, [r0, #16]
 8013c20:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8013c24:	edc0 7a04 	vstr	s15, [r0, #16]
 8013c28:	edd0 7a05 	vldr	s15, [r0, #20]
 8013c2c:	eee7 7a20 	vfma.f32	s15, s14, s1
 8013c30:	edc0 7a05 	vstr	s15, [r0, #20]
 8013c34:	4770      	bx	lr

08013c36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8013c36:	edd0 6a01 	vldr	s13, [r0, #4]
 8013c3a:	b084      	sub	sp, #16
 8013c3c:	edd0 7a04 	vldr	s15, [r0, #16]
 8013c40:	ed90 7a03 	vldr	s14, [r0, #12]
 8013c44:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8013c48:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8013c4c:	edd0 6a00 	vldr	s13, [r0]
 8013c50:	eee7 7a00 	vfma.f32	s15, s14, s0
 8013c54:	ed90 7a05 	vldr	s14, [r0, #20]
 8013c58:	eee6 0a80 	vfma.f32	s1, s13, s0
 8013c5c:	ed90 0a02 	vldr	s0, [r0, #8]
 8013c60:	ee30 0a80 	vadd.f32	s0, s1, s0
 8013c64:	ee77 0a87 	vadd.f32	s1, s15, s14
 8013c68:	b004      	add	sp, #16
 8013c6a:	4770      	bx	lr

08013c6c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8013c6c:	b530      	push	{r4, r5, lr}
 8013c6e:	8083      	strh	r3, [r0, #4]
 8013c70:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013c74:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8013c78:	80c3      	strh	r3, [r0, #6]
 8013c7a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013c7e:	6141      	str	r1, [r0, #20]
 8013c80:	7203      	strb	r3, [r0, #8]
 8013c82:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8013c86:	8302      	strh	r2, [r0, #24]
 8013c88:	7243      	strb	r3, [r0, #9]
 8013c8a:	7a83      	ldrb	r3, [r0, #10]
 8013c8c:	f365 0306 	bfi	r3, r5, #0, #7
 8013c90:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8013c94:	f365 13c7 	bfi	r3, r5, #7, #1
 8013c98:	7283      	strb	r3, [r0, #10]
 8013c9a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8013c9e:	72c3      	strb	r3, [r0, #11]
 8013ca0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013ca4:	7303      	strb	r3, [r0, #12]
 8013ca6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8013caa:	81c3      	strh	r3, [r0, #14]
 8013cac:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8013cb0:	8203      	strh	r3, [r0, #16]
 8013cb2:	4b01      	ldr	r3, [pc, #4]	@ (8013cb8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8013cb4:	6003      	str	r3, [r0, #0]
 8013cb6:	bd30      	pop	{r4, r5, pc}
 8013cb8:	080244a8 	.word	0x080244a8

08013cbc <_ZNK8touchgfx9ConstFont4findEt>:
 8013cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cbe:	6944      	ldr	r4, [r0, #20]
 8013cc0:	b3bc      	cbz	r4, 8013d32 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013cc2:	88a3      	ldrh	r3, [r4, #4]
 8013cc4:	8b02      	ldrh	r2, [r0, #24]
 8013cc6:	1acb      	subs	r3, r1, r3
 8013cc8:	f102 32ff 	add.w	r2, r2, #4294967295
 8013ccc:	d431      	bmi.n	8013d32 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013cce:	4293      	cmp	r3, r2
 8013cd0:	dd0c      	ble.n	8013cec <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8013cd2:	230e      	movs	r3, #14
 8013cd4:	fb03 4302 	mla	r3, r3, r2, r4
 8013cd8:	889b      	ldrh	r3, [r3, #4]
 8013cda:	1a5b      	subs	r3, r3, r1
 8013cdc:	1ad3      	subs	r3, r2, r3
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	db27      	blt.n	8013d32 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	bfbc      	itt	lt
 8013ce6:	2302      	movlt	r3, #2
 8013ce8:	fb92 f3f3 	sdivlt	r3, r2, r3
 8013cec:	2500      	movs	r5, #0
 8013cee:	260e      	movs	r6, #14
 8013cf0:	4295      	cmp	r5, r2
 8013cf2:	dc1e      	bgt.n	8013d32 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013cf4:	fb06 4003 	mla	r0, r6, r3, r4
 8013cf8:	8887      	ldrh	r7, [r0, #4]
 8013cfa:	42b9      	cmp	r1, r7
 8013cfc:	d01a      	beq.n	8013d34 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8013cfe:	d20d      	bcs.n	8013d1c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8013d00:	1e5a      	subs	r2, r3, #1
 8013d02:	4295      	cmp	r5, r2
 8013d04:	dc15      	bgt.n	8013d32 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013d06:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8013d0a:	1a5b      	subs	r3, r3, r1
 8013d0c:	1ad3      	subs	r3, r2, r3
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	db0f      	blt.n	8013d32 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013d12:	429d      	cmp	r5, r3
 8013d14:	ddec      	ble.n	8013cf0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013d16:	1953      	adds	r3, r2, r5
 8013d18:	105b      	asrs	r3, r3, #1
 8013d1a:	e7e9      	b.n	8013cf0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013d1c:	1c5d      	adds	r5, r3, #1
 8013d1e:	42aa      	cmp	r2, r5
 8013d20:	db07      	blt.n	8013d32 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013d22:	8a43      	ldrh	r3, [r0, #18]
 8013d24:	1acb      	subs	r3, r1, r3
 8013d26:	442b      	add	r3, r5
 8013d28:	429d      	cmp	r5, r3
 8013d2a:	dc02      	bgt.n	8013d32 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	dadf      	bge.n	8013cf0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013d30:	e7f1      	b.n	8013d16 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8013d32:	2000      	movs	r0, #0
 8013d34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013d36 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8013d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d38:	4604      	mov	r4, r0
 8013d3a:	4617      	mov	r7, r2
 8013d3c:	461e      	mov	r6, r3
 8013d3e:	b911      	cbnz	r1, 8013d46 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8013d40:	2500      	movs	r5, #0
 8013d42:	4628      	mov	r0, r5
 8013d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d46:	290a      	cmp	r1, #10
 8013d48:	d0fa      	beq.n	8013d40 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013d4a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8013d4e:	4291      	cmp	r1, r2
 8013d50:	d0f6      	beq.n	8013d40 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013d52:	f242 020b 	movw	r2, #8203	@ 0x200b
 8013d56:	4291      	cmp	r1, r2
 8013d58:	d0f2      	beq.n	8013d40 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013d5a:	f7ff ffaf 	bl	8013cbc <_ZNK8touchgfx9ConstFont4findEt>
 8013d5e:	4605      	mov	r5, r0
 8013d60:	b950      	cbnz	r0, 8013d78 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8013d62:	6823      	ldr	r3, [r4, #0]
 8013d64:	4620      	mov	r0, r4
 8013d66:	691b      	ldr	r3, [r3, #16]
 8013d68:	4798      	blx	r3
 8013d6a:	4601      	mov	r1, r0
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	f7ff ffa5 	bl	8013cbc <_ZNK8touchgfx9ConstFont4findEt>
 8013d72:	4605      	mov	r5, r0
 8013d74:	2800      	cmp	r0, #0
 8013d76:	d0e3      	beq.n	8013d40 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013d78:	6823      	ldr	r3, [r4, #0]
 8013d7a:	4629      	mov	r1, r5
 8013d7c:	4620      	mov	r0, r4
 8013d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013d80:	4798      	blx	r3
 8013d82:	6038      	str	r0, [r7, #0]
 8013d84:	6823      	ldr	r3, [r4, #0]
 8013d86:	4620      	mov	r0, r4
 8013d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013d8a:	4798      	blx	r3
 8013d8c:	7030      	strb	r0, [r6, #0]
 8013d8e:	e7d8      	b.n	8013d42 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08013d90 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8013d90:	2000      	movs	r0, #0
 8013d92:	4770      	bx	lr

08013d94 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8013d94:	2001      	movs	r0, #1
 8013d96:	4770      	bx	lr

08013d98 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8013d98:	2002      	movs	r0, #2
 8013d9a:	4770      	bx	lr

08013d9c <_ZN8touchgfx6ScreenD1Ev>:
 8013d9c:	4770      	bx	lr

08013d9e <_ZN8touchgfx12GestureEventD1Ev>:
 8013d9e:	4770      	bx	lr

08013da0 <_ZN8touchgfx9DragEventD1Ev>:
 8013da0:	4770      	bx	lr

08013da2 <_ZN8touchgfx10ClickEventD1Ev>:
 8013da2:	4770      	bx	lr

08013da4 <_ZN8touchgfx10ClickEventD0Ev>:
 8013da4:	b510      	push	{r4, lr}
 8013da6:	4604      	mov	r4, r0
 8013da8:	210c      	movs	r1, #12
 8013daa:	f00c f985 	bl	80200b8 <_ZdlPvj>
 8013dae:	4620      	mov	r0, r4
 8013db0:	bd10      	pop	{r4, pc}

08013db2 <_ZN8touchgfx9DragEventD0Ev>:
 8013db2:	b510      	push	{r4, lr}
 8013db4:	4604      	mov	r4, r0
 8013db6:	2110      	movs	r1, #16
 8013db8:	f00c f97e 	bl	80200b8 <_ZdlPvj>
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	bd10      	pop	{r4, pc}

08013dc0 <_ZN8touchgfx12GestureEventD0Ev>:
 8013dc0:	b510      	push	{r4, lr}
 8013dc2:	4604      	mov	r4, r0
 8013dc4:	210c      	movs	r1, #12
 8013dc6:	f00c f977 	bl	80200b8 <_ZdlPvj>
 8013dca:	4620      	mov	r0, r4
 8013dcc:	bd10      	pop	{r4, pc}

08013dce <_ZN8touchgfx6ScreenD0Ev>:
 8013dce:	b510      	push	{r4, lr}
 8013dd0:	4604      	mov	r4, r0
 8013dd2:	213c      	movs	r1, #60	@ 0x3c
 8013dd4:	f00c f970 	bl	80200b8 <_ZdlPvj>
 8013dd8:	4620      	mov	r0, r4
 8013dda:	bd10      	pop	{r4, pc}

08013ddc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8013ddc:	b530      	push	{r4, r5, lr}
 8013dde:	460d      	mov	r5, r1
 8013de0:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8013de2:	b087      	sub	sp, #28
 8013de4:	4604      	mov	r4, r0
 8013de6:	b301      	cbz	r1, 8013e2a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8013de8:	a801      	add	r0, sp, #4
 8013dea:	f7ff fb83 	bl	80134f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013dee:	892a      	ldrh	r2, [r5, #8]
 8013df0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013df4:	7928      	ldrb	r0, [r5, #4]
 8013df6:	1ad2      	subs	r2, r2, r3
 8013df8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8013dfa:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013dfe:	441a      	add	r2, r3
 8013e00:	896b      	ldrh	r3, [r5, #10]
 8013e02:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8013e06:	f88d 0010 	strb.w	r0, [sp, #16]
 8013e0a:	1b5b      	subs	r3, r3, r5
 8013e0c:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8013e0e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013e10:	442b      	add	r3, r5
 8013e12:	4d07      	ldr	r5, [pc, #28]	@ (8013e30 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8013e14:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013e18:	a903      	add	r1, sp, #12
 8013e1a:	9503      	str	r5, [sp, #12]
 8013e1c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013e20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013e24:	6803      	ldr	r3, [r0, #0]
 8013e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013e28:	4798      	blx	r3
 8013e2a:	b007      	add	sp, #28
 8013e2c:	bd30      	pop	{r4, r5, pc}
 8013e2e:	bf00      	nop
 8013e30:	08024538 	.word	0x08024538

08013e34 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8013e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e38:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013e3a:	b08a      	sub	sp, #40	@ 0x28
 8013e3c:	4604      	mov	r4, r0
 8013e3e:	460d      	mov	r5, r1
 8013e40:	b113      	cbz	r3, 8013e48 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8013e42:	790b      	ldrb	r3, [r1, #4]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d044      	beq.n	8013ed2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013e48:	f104 0804 	add.w	r8, r4, #4
 8013e4c:	a803      	add	r0, sp, #12
 8013e4e:	4641      	mov	r1, r8
 8013e50:	f7ff fb50 	bl	80134f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013e54:	792b      	ldrb	r3, [r5, #4]
 8013e56:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8013e5a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8013e5e:	b983      	cbnz	r3, 8013e82 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8013e60:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8013e64:	892a      	ldrh	r2, [r5, #8]
 8013e66:	88e9      	ldrh	r1, [r5, #6]
 8013e68:	4640      	mov	r0, r8
 8013e6a:	1b92      	subs	r2, r2, r6
 8013e6c:	9301      	str	r3, [sp, #4]
 8013e6e:	1bc9      	subs	r1, r1, r7
 8013e70:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8013e74:	b212      	sxth	r2, r2
 8013e76:	9300      	str	r3, [sp, #0]
 8013e78:	b209      	sxth	r1, r1
 8013e7a:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8013e7e:	f7f9 fb0b 	bl	800d498 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8013e82:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013e84:	b329      	cbz	r1, 8013ed2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013e86:	a805      	add	r0, sp, #20
 8013e88:	f7ff fb34 	bl	80134f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013e8c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013e90:	792b      	ldrb	r3, [r5, #4]
 8013e92:	a907      	add	r1, sp, #28
 8013e94:	1abf      	subs	r7, r7, r2
 8013e96:	88ea      	ldrh	r2, [r5, #6]
 8013e98:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013e9a:	4417      	add	r7, r2
 8013e9c:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8013e9e:	f88d 3020 	strb.w	r3, [sp, #32]
 8013ea2:	4417      	add	r7, r2
 8013ea4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8013ea8:	1ab6      	subs	r6, r6, r2
 8013eaa:	892a      	ldrh	r2, [r5, #8]
 8013eac:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8013eb0:	4416      	add	r6, r2
 8013eb2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8013eb4:	4416      	add	r6, r2
 8013eb6:	4a08      	ldr	r2, [pc, #32]	@ (8013ed8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8013eb8:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8013ebc:	2600      	movs	r6, #0
 8013ebe:	9207      	str	r2, [sp, #28]
 8013ec0:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8013ec4:	6803      	ldr	r3, [r0, #0]
 8013ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ec8:	4798      	blx	r3
 8013eca:	792b      	ldrb	r3, [r5, #4]
 8013ecc:	b10b      	cbz	r3, 8013ed2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013ece:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8013ed2:	b00a      	add	sp, #40	@ 0x28
 8013ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ed8:	08024510 	.word	0x08024510

08013edc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8013edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ee0:	460c      	mov	r4, r1
 8013ee2:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8013ee4:	b088      	sub	sp, #32
 8013ee6:	4605      	mov	r5, r0
 8013ee8:	2900      	cmp	r1, #0
 8013eea:	d06d      	beq.n	8013fc8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8013eec:	4668      	mov	r0, sp
 8013eee:	f7ff fb01 	bl	80134f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013ef2:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8013ef4:	88e3      	ldrh	r3, [r4, #6]
 8013ef6:	f9bd 8000 	ldrsh.w	r8, [sp]
 8013efa:	440b      	add	r3, r1
 8013efc:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8013f00:	b21b      	sxth	r3, r3
 8013f02:	4543      	cmp	r3, r8
 8013f04:	db31      	blt.n	8013f6a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013f06:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8013f0a:	44c4      	add	ip, r8
 8013f0c:	fa0f fc8c 	sxth.w	ip, ip
 8013f10:	4563      	cmp	r3, ip
 8013f12:	da2a      	bge.n	8013f6a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013f14:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8013f16:	8926      	ldrh	r6, [r4, #8]
 8013f18:	4416      	add	r6, r2
 8013f1a:	b236      	sxth	r6, r6
 8013f1c:	42be      	cmp	r6, r7
 8013f1e:	db24      	blt.n	8013f6a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013f20:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8013f24:	4438      	add	r0, r7
 8013f26:	b200      	sxth	r0, r0
 8013f28:	4286      	cmp	r6, r0
 8013f2a:	da1e      	bge.n	8013f6a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013f2c:	8963      	ldrh	r3, [r4, #10]
 8013f2e:	4419      	add	r1, r3
 8013f30:	b209      	sxth	r1, r1
 8013f32:	4541      	cmp	r1, r8
 8013f34:	db08      	blt.n	8013f48 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013f36:	4561      	cmp	r1, ip
 8013f38:	da06      	bge.n	8013f48 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013f3a:	89a3      	ldrh	r3, [r4, #12]
 8013f3c:	441a      	add	r2, r3
 8013f3e:	b212      	sxth	r2, r2
 8013f40:	42ba      	cmp	r2, r7
 8013f42:	db01      	blt.n	8013f48 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013f44:	4282      	cmp	r2, r0
 8013f46:	db10      	blt.n	8013f6a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013f48:	4b21      	ldr	r3, [pc, #132]	@ (8013fd0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8013f4a:	a904      	add	r1, sp, #16
 8013f4c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8013f4e:	9304      	str	r3, [sp, #16]
 8013f50:	2302      	movs	r3, #2
 8013f52:	f88d 3014 	strb.w	r3, [sp, #20]
 8013f56:	2300      	movs	r3, #0
 8013f58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013f5c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013f60:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013f64:	6803      	ldr	r3, [r0, #0]
 8013f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f68:	4798      	blx	r3
 8013f6a:	1d29      	adds	r1, r5, #4
 8013f6c:	a802      	add	r0, sp, #8
 8013f6e:	f7ff fac1 	bl	80134f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f72:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013f76:	88e0      	ldrh	r0, [r4, #6]
 8013f78:	eba3 0808 	sub.w	r8, r3, r8
 8013f7c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013f80:	7921      	ldrb	r1, [r4, #4]
 8013f82:	fa1f f888 	uxth.w	r8, r8
 8013f86:	1bdf      	subs	r7, r3, r7
 8013f88:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8013f8c:	b2bb      	uxth	r3, r7
 8013f8e:	4440      	add	r0, r8
 8013f90:	8922      	ldrh	r2, [r4, #8]
 8013f92:	8967      	ldrh	r7, [r4, #10]
 8013f94:	4460      	add	r0, ip
 8013f96:	89a4      	ldrh	r4, [r4, #12]
 8013f98:	441a      	add	r2, r3
 8013f9a:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8013f9c:	44b8      	add	r8, r7
 8013f9e:	4423      	add	r3, r4
 8013fa0:	f8ad 0016 	strh.w	r0, [sp, #22]
 8013fa4:	4432      	add	r2, r6
 8013fa6:	44e0      	add	r8, ip
 8013fa8:	4433      	add	r3, r6
 8013faa:	4c0a      	ldr	r4, [pc, #40]	@ (8013fd4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8013fac:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8013fae:	f88d 1014 	strb.w	r1, [sp, #20]
 8013fb2:	a904      	add	r1, sp, #16
 8013fb4:	9404      	str	r4, [sp, #16]
 8013fb6:	f8ad 2018 	strh.w	r2, [sp, #24]
 8013fba:	f8ad 801a 	strh.w	r8, [sp, #26]
 8013fbe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013fc2:	6803      	ldr	r3, [r0, #0]
 8013fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013fc6:	4798      	blx	r3
 8013fc8:	b008      	add	sp, #32
 8013fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fce:	bf00      	nop
 8013fd0:	08024510 	.word	0x08024510
 8013fd4:	08024524 	.word	0x08024524

08013fd8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8013fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013fda:	4604      	mov	r4, r0
 8013fdc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8013fe0:	3201      	adds	r2, #1
 8013fe2:	d112      	bne.n	801400a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8013fe4:	2500      	movs	r5, #0
 8013fe6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8013fea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013fee:	6803      	ldr	r3, [r0, #0]
 8013ff0:	9500      	str	r5, [sp, #0]
 8013ff2:	466d      	mov	r5, sp
 8013ff4:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013ff8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013ffc:	4629      	mov	r1, r5
 8013ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014000:	4798      	blx	r3
 8014002:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014006:	e884 0003 	stmia.w	r4, {r0, r1}
 801400a:	4620      	mov	r0, r4
 801400c:	b003      	add	sp, #12
 801400e:	bd30      	pop	{r4, r5, pc}

08014010 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8014010:	b513      	push	{r0, r1, r4, lr}
 8014012:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8014016:	4604      	mov	r4, r0
 8014018:	3301      	adds	r3, #1
 801401a:	d109      	bne.n	8014030 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801401c:	4601      	mov	r1, r0
 801401e:	4668      	mov	r0, sp
 8014020:	f7ff fa68 	bl	80134f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014024:	f8bd 3000 	ldrh.w	r3, [sp]
 8014028:	8423      	strh	r3, [r4, #32]
 801402a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801402e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8014030:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8014034:	b002      	add	sp, #8
 8014036:	bd10      	pop	{r4, pc}

08014038 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8014038:	b513      	push	{r0, r1, r4, lr}
 801403a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801403e:	4604      	mov	r4, r0
 8014040:	3301      	adds	r3, #1
 8014042:	d109      	bne.n	8014058 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8014044:	4601      	mov	r1, r0
 8014046:	4668      	mov	r0, sp
 8014048:	f7ff fa54 	bl	80134f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801404c:	f8bd 3000 	ldrh.w	r3, [sp]
 8014050:	8423      	strh	r3, [r4, #32]
 8014052:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014056:	8463      	strh	r3, [r4, #34]	@ 0x22
 8014058:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801405c:	b002      	add	sp, #8
 801405e:	bd10      	pop	{r4, pc}

08014060 <_ZN8touchgfx6ScreenC1Ev>:
 8014060:	b570      	push	{r4, r5, r6, lr}
 8014062:	4b17      	ldr	r3, [pc, #92]	@ (80140c0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8014064:	4605      	mov	r5, r0
 8014066:	4a17      	ldr	r2, [pc, #92]	@ (80140c4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8014068:	2101      	movs	r1, #1
 801406a:	f845 3b04 	str.w	r3, [r5], #4
 801406e:	2300      	movs	r3, #0
 8014070:	6042      	str	r2, [r0, #4]
 8014072:	4604      	mov	r4, r0
 8014074:	8103      	strh	r3, [r0, #8]
 8014076:	8143      	strh	r3, [r0, #10]
 8014078:	8183      	strh	r3, [r0, #12]
 801407a:	81c3      	strh	r3, [r0, #14]
 801407c:	8203      	strh	r3, [r0, #16]
 801407e:	8243      	strh	r3, [r0, #18]
 8014080:	8283      	strh	r3, [r0, #20]
 8014082:	82c3      	strh	r3, [r0, #22]
 8014084:	6203      	str	r3, [r0, #32]
 8014086:	8483      	strh	r3, [r0, #36]	@ 0x24
 8014088:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801408a:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801408e:	6343      	str	r3, [r0, #52]	@ 0x34
 8014090:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8014094:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014098:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801409c:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 80140a0:	4b09      	ldr	r3, [pc, #36]	@ (80140c8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80140a2:	4628      	mov	r0, r5
 80140a4:	f9b3 6000 	ldrsh.w	r6, [r3]
 80140a8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80140aa:	4a08      	ldr	r2, [pc, #32]	@ (80140cc <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80140ac:	f9b2 1000 	ldrsh.w	r1, [r2]
 80140b0:	4798      	blx	r3
 80140b2:	6863      	ldr	r3, [r4, #4]
 80140b4:	4628      	mov	r0, r5
 80140b6:	4631      	mov	r1, r6
 80140b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80140ba:	4798      	blx	r3
 80140bc:	4620      	mov	r0, r4
 80140be:	bd70      	pop	{r4, r5, r6, pc}
 80140c0:	0802454c 	.word	0x0802454c
 80140c4:	080240f8 	.word	0x080240f8
 80140c8:	24025116 	.word	0x24025116
 80140cc:	24025114 	.word	0x24025114

080140d0 <_ZN8touchgfx6Screen4drawEv>:
 80140d0:	4b09      	ldr	r3, [pc, #36]	@ (80140f8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80140d2:	b507      	push	{r0, r1, r2, lr}
 80140d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80140d8:	2100      	movs	r1, #0
 80140da:	4b08      	ldr	r3, [pc, #32]	@ (80140fc <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80140dc:	9100      	str	r1, [sp, #0]
 80140de:	4669      	mov	r1, sp
 80140e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140e4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80140e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80140ec:	6803      	ldr	r3, [r0, #0]
 80140ee:	689b      	ldr	r3, [r3, #8]
 80140f0:	4798      	blx	r3
 80140f2:	b003      	add	sp, #12
 80140f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80140f8:	24025114 	.word	0x24025114
 80140fc:	24025116 	.word	0x24025116

08014100 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8014100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014104:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8014108:	b089      	sub	sp, #36	@ 0x24
 801410a:	4680      	mov	r8, r0
 801410c:	460c      	mov	r4, r1
 801410e:	2b00      	cmp	r3, #0
 8014110:	4615      	mov	r5, r2
 8014112:	dd0e      	ble.n	8014132 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014114:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014118:	2b00      	cmp	r3, #0
 801411a:	dd0a      	ble.n	8014132 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801411c:	4628      	mov	r0, r5
 801411e:	f7ff ff5b 	bl	8013fd8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014122:	4621      	mov	r1, r4
 8014124:	f7fd feb3 	bl	8011e8e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014128:	69eb      	ldr	r3, [r5, #28]
 801412a:	b928      	cbnz	r0, 8014138 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801412c:	461d      	mov	r5, r3
 801412e:	2b00      	cmp	r3, #0
 8014130:	d1f4      	bne.n	801411c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8014132:	b009      	add	sp, #36	@ 0x24
 8014134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014138:	ae04      	add	r6, sp, #16
 801413a:	2b00      	cmp	r3, #0
 801413c:	f000 80b5 	beq.w	80142aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014140:	682b      	ldr	r3, [r5, #0]
 8014142:	4629      	mov	r1, r5
 8014144:	a802      	add	r0, sp, #8
 8014146:	68db      	ldr	r3, [r3, #12]
 8014148:	4798      	blx	r3
 801414a:	4628      	mov	r0, r5
 801414c:	f7ff ff60 	bl	8014010 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014150:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8014154:	4407      	add	r7, r0
 8014156:	4628      	mov	r0, r5
 8014158:	f7ff ff6e 	bl	8014038 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801415c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014160:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8014164:	b23f      	sxth	r7, r7
 8014166:	4418      	add	r0, r3
 8014168:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801416c:	4621      	mov	r1, r4
 801416e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014172:	f8ad 0012 	strh.w	r0, [sp, #18]
 8014176:	4630      	mov	r0, r6
 8014178:	f8ad 3016 	strh.w	r3, [sp, #22]
 801417c:	f8ad 7010 	strh.w	r7, [sp, #16]
 8014180:	f7f9 fa6c 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 8014184:	4628      	mov	r0, r5
 8014186:	f7ff ff27 	bl	8013fd8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801418a:	ab06      	add	r3, sp, #24
 801418c:	4602      	mov	r2, r0
 801418e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014192:	e883 0003 	stmia.w	r3, {r0, r1}
 8014196:	4611      	mov	r1, r2
 8014198:	4618      	mov	r0, r3
 801419a:	f7f9 fa5f 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 801419e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80141a2:	f9b4 1000 	ldrsh.w	r1, [r4]
 80141a6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80141aa:	4299      	cmp	r1, r3
 80141ac:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80141b0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80141b4:	d10b      	bne.n	80141ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80141b6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80141ba:	4552      	cmp	r2, sl
 80141bc:	d107      	bne.n	80141ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80141be:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80141c2:	455a      	cmp	r2, fp
 80141c4:	d103      	bne.n	80141ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80141c6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80141ca:	454a      	cmp	r2, r9
 80141cc:	d06d      	beq.n	80142aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80141ce:	f1bb 0f00 	cmp.w	fp, #0
 80141d2:	dd65      	ble.n	80142a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80141d4:	f1b9 0f00 	cmp.w	r9, #0
 80141d8:	dd62      	ble.n	80142a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80141da:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80141de:	fa1f f08a 	uxth.w	r0, sl
 80141e2:	4552      	cmp	r2, sl
 80141e4:	9000      	str	r0, [sp, #0]
 80141e6:	da12      	bge.n	801420e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80141e8:	9301      	str	r3, [sp, #4]
 80141ea:	9b00      	ldr	r3, [sp, #0]
 80141ec:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80141f0:	f8ad 2012 	strh.w	r2, [sp, #18]
 80141f4:	1a9a      	subs	r2, r3, r2
 80141f6:	f8ad 1010 	strh.w	r1, [sp, #16]
 80141fa:	4631      	mov	r1, r6
 80141fc:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014200:	4640      	mov	r0, r8
 8014202:	f8ad 2016 	strh.w	r2, [sp, #22]
 8014206:	69ea      	ldr	r2, [r5, #28]
 8014208:	f7ff ff7a 	bl	8014100 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801420c:	9b01      	ldr	r3, [sp, #4]
 801420e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014212:	b29f      	uxth	r7, r3
 8014214:	429a      	cmp	r2, r3
 8014216:	da0d      	bge.n	8014234 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8014218:	f8ad 2010 	strh.w	r2, [sp, #16]
 801421c:	1aba      	subs	r2, r7, r2
 801421e:	f8ad a012 	strh.w	sl, [sp, #18]
 8014222:	4631      	mov	r1, r6
 8014224:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014228:	4640      	mov	r0, r8
 801422a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801422e:	69ea      	ldr	r2, [r5, #28]
 8014230:	f7ff ff66 	bl	8014100 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014234:	8822      	ldrh	r2, [r4, #0]
 8014236:	445f      	add	r7, fp
 8014238:	88a3      	ldrh	r3, [r4, #4]
 801423a:	b2bf      	uxth	r7, r7
 801423c:	4413      	add	r3, r2
 801423e:	b23a      	sxth	r2, r7
 8014240:	b29b      	uxth	r3, r3
 8014242:	b219      	sxth	r1, r3
 8014244:	4291      	cmp	r1, r2
 8014246:	dd0d      	ble.n	8014264 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8014248:	1bdb      	subs	r3, r3, r7
 801424a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801424e:	f8ad a012 	strh.w	sl, [sp, #18]
 8014252:	4631      	mov	r1, r6
 8014254:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014258:	4640      	mov	r0, r8
 801425a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801425e:	69ea      	ldr	r2, [r5, #28]
 8014260:	f7ff ff4e 	bl	8014100 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014264:	88e2      	ldrh	r2, [r4, #6]
 8014266:	8863      	ldrh	r3, [r4, #2]
 8014268:	4413      	add	r3, r2
 801426a:	9a00      	ldr	r2, [sp, #0]
 801426c:	444a      	add	r2, r9
 801426e:	b29b      	uxth	r3, r3
 8014270:	fa1f f982 	uxth.w	r9, r2
 8014274:	b219      	sxth	r1, r3
 8014276:	fa0f f289 	sxth.w	r2, r9
 801427a:	428a      	cmp	r2, r1
 801427c:	da15      	bge.n	80142aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801427e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014282:	eba3 0309 	sub.w	r3, r3, r9
 8014286:	f9b4 0000 	ldrsh.w	r0, [r4]
 801428a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801428e:	4631      	mov	r1, r6
 8014290:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014294:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014298:	f8ad 3016 	strh.w	r3, [sp, #22]
 801429c:	69ea      	ldr	r2, [r5, #28]
 801429e:	e001      	b.n	80142a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80142a0:	69ea      	ldr	r2, [r5, #28]
 80142a2:	4621      	mov	r1, r4
 80142a4:	4640      	mov	r0, r8
 80142a6:	f7ff ff2b 	bl	8014100 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80142aa:	4628      	mov	r0, r5
 80142ac:	f7ff fe94 	bl	8013fd8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80142b0:	6861      	ldr	r1, [r4, #4]
 80142b2:	4602      	mov	r2, r0
 80142b4:	4633      	mov	r3, r6
 80142b6:	6820      	ldr	r0, [r4, #0]
 80142b8:	c303      	stmia	r3!, {r0, r1}
 80142ba:	4611      	mov	r1, r2
 80142bc:	4630      	mov	r0, r6
 80142be:	f7f9 f9cd 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 80142c2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	f77f af33 	ble.w	8014132 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80142cc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	f77f af2e 	ble.w	8014132 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80142d6:	4628      	mov	r0, r5
 80142d8:	f7ff fe9a 	bl	8014010 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80142dc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80142e0:	1a18      	subs	r0, r3, r0
 80142e2:	f8ad 0010 	strh.w	r0, [sp, #16]
 80142e6:	4628      	mov	r0, r5
 80142e8:	f7ff fea6 	bl	8014038 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80142ec:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80142f0:	4631      	mov	r1, r6
 80142f2:	1a18      	subs	r0, r3, r0
 80142f4:	f8ad 0012 	strh.w	r0, [sp, #18]
 80142f8:	4628      	mov	r0, r5
 80142fa:	682b      	ldr	r3, [r5, #0]
 80142fc:	689b      	ldr	r3, [r3, #8]
 80142fe:	4798      	blx	r3
 8014300:	e717      	b.n	8014132 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08014302 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8014302:	b570      	push	{r4, r5, r6, lr}
 8014304:	1d06      	adds	r6, r0, #4
 8014306:	b086      	sub	sp, #24
 8014308:	460c      	mov	r4, r1
 801430a:	2300      	movs	r3, #0
 801430c:	4631      	mov	r1, r6
 801430e:	4605      	mov	r5, r0
 8014310:	a802      	add	r0, sp, #8
 8014312:	9301      	str	r3, [sp, #4]
 8014314:	f7ff f8ee 	bl	80134f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014318:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801431c:	8822      	ldrh	r2, [r4, #0]
 801431e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8014322:	1ad2      	subs	r2, r2, r3
 8014324:	8863      	ldrh	r3, [r4, #2]
 8014326:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801432a:	1a5b      	subs	r3, r3, r1
 801432c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8014330:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014334:	aa01      	add	r2, sp, #4
 8014336:	f8ad 0014 	strh.w	r0, [sp, #20]
 801433a:	4630      	mov	r0, r6
 801433c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8014340:	a904      	add	r1, sp, #16
 8014342:	f8ad 3012 	strh.w	r3, [sp, #18]
 8014346:	f7f9 fa61 	bl	800d80c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801434a:	9a01      	ldr	r2, [sp, #4]
 801434c:	b11a      	cbz	r2, 8014356 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801434e:	4621      	mov	r1, r4
 8014350:	4628      	mov	r0, r5
 8014352:	f7ff fed5 	bl	8014100 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014356:	b006      	add	sp, #24
 8014358:	bd70      	pop	{r4, r5, r6, pc}

0801435a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801435a:	4602      	mov	r2, r0
 801435c:	b530      	push	{r4, r5, lr}
 801435e:	4604      	mov	r4, r0
 8014360:	b085      	sub	sp, #20
 8014362:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8014366:	460d      	mov	r5, r1
 8014368:	466b      	mov	r3, sp
 801436a:	6851      	ldr	r1, [r2, #4]
 801436c:	c303      	stmia	r3!, {r0, r1}
 801436e:	4629      	mov	r1, r5
 8014370:	4668      	mov	r0, sp
 8014372:	f7f9 f973 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 8014376:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801437a:	b12b      	cbz	r3, 8014388 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801437c:	4669      	mov	r1, sp
 801437e:	4620      	mov	r0, r4
 8014380:	f7ff ffbf 	bl	8014302 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8014384:	b005      	add	sp, #20
 8014386:	bd30      	pop	{r4, r5, pc}
 8014388:	3404      	adds	r4, #4
 801438a:	a802      	add	r0, sp, #8
 801438c:	4621      	mov	r1, r4
 801438e:	f7ff f8b1 	bl	80134f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014392:	f8bd 3000 	ldrh.w	r3, [sp]
 8014396:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801439a:	4669      	mov	r1, sp
 801439c:	4620      	mov	r0, r4
 801439e:	1a9b      	subs	r3, r3, r2
 80143a0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80143a4:	f8ad 3000 	strh.w	r3, [sp]
 80143a8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80143ac:	1a9b      	subs	r3, r3, r2
 80143ae:	f8ad 3002 	strh.w	r3, [sp, #2]
 80143b2:	f7f9 f9f2 	bl	800d79a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80143b6:	e7e5      	b.n	8014384 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080143b8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80143b8:	460b      	mov	r3, r1
 80143ba:	680a      	ldr	r2, [r1, #0]
 80143bc:	1d01      	adds	r1, r0, #4
 80143be:	6992      	ldr	r2, [r2, #24]
 80143c0:	4618      	mov	r0, r3
 80143c2:	4710      	bx	r2

080143c4 <_ZN8touchgfx12TextProviderC1Ev>:
 80143c4:	b538      	push	{r3, r4, r5, lr}
 80143c6:	2500      	movs	r5, #0
 80143c8:	2302      	movs	r3, #2
 80143ca:	4604      	mov	r4, r0
 80143cc:	220e      	movs	r2, #14
 80143ce:	7403      	strb	r3, [r0, #16]
 80143d0:	4629      	mov	r1, r5
 80143d2:	6145      	str	r5, [r0, #20]
 80143d4:	7605      	strb	r5, [r0, #24]
 80143d6:	83c5      	strh	r5, [r0, #30]
 80143d8:	8405      	strh	r5, [r0, #32]
 80143da:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80143dc:	8705      	strh	r5, [r0, #56]	@ 0x38
 80143de:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 80143e0:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 80143e4:	e9c0 5500 	strd	r5, r5, [r0]
 80143e8:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 80143ec:	304c      	adds	r0, #76	@ 0x4c
 80143ee:	f00c fc77 	bl	8020ce0 <memset>
 80143f2:	2301      	movs	r3, #1
 80143f4:	4620      	mov	r0, r4
 80143f6:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 80143fa:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80143fe:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8014402:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8014406:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801440a:	f7ef fefb 	bl	8004204 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801440e:	4620      	mov	r0, r4
 8014410:	bd38      	pop	{r3, r4, r5, pc}

08014412 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8014412:	b530      	push	{r4, r5, lr}
 8014414:	2500      	movs	r5, #0
 8014416:	2401      	movs	r4, #1
 8014418:	6843      	ldr	r3, [r0, #4]
 801441a:	b913      	cbnz	r3, 8014422 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801441c:	6803      	ldr	r3, [r0, #0]
 801441e:	b313      	cbz	r3, 8014466 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014420:	6043      	str	r3, [r0, #4]
 8014422:	7e03      	ldrb	r3, [r0, #24]
 8014424:	b143      	cbz	r3, 8014438 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8014426:	6943      	ldr	r3, [r0, #20]
 8014428:	b12b      	cbz	r3, 8014436 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801442a:	881a      	ldrh	r2, [r3, #0]
 801442c:	b11a      	cbz	r2, 8014436 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801442e:	1c9a      	adds	r2, r3, #2
 8014430:	6142      	str	r2, [r0, #20]
 8014432:	8818      	ldrh	r0, [r3, #0]
 8014434:	bd30      	pop	{r4, r5, pc}
 8014436:	7605      	strb	r5, [r0, #24]
 8014438:	6843      	ldr	r3, [r0, #4]
 801443a:	8819      	ldrh	r1, [r3, #0]
 801443c:	b199      	cbz	r1, 8014466 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801443e:	1c9a      	adds	r2, r3, #2
 8014440:	2902      	cmp	r1, #2
 8014442:	6042      	str	r2, [r0, #4]
 8014444:	d1f5      	bne.n	8014432 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8014446:	7c03      	ldrb	r3, [r0, #16]
 8014448:	2b01      	cmp	r3, #1
 801444a:	d8e5      	bhi.n	8014418 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801444c:	1c5a      	adds	r2, r3, #1
 801444e:	3302      	adds	r3, #2
 8014450:	7402      	strb	r2, [r0, #16]
 8014452:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8014456:	6143      	str	r3, [r0, #20]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d0dd      	beq.n	8014418 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801445c:	881b      	ldrh	r3, [r3, #0]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d0da      	beq.n	8014418 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014462:	7604      	strb	r4, [r0, #24]
 8014464:	e7d8      	b.n	8014418 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014466:	2000      	movs	r0, #0
 8014468:	e7e4      	b.n	8014434 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801446a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801446a:	6001      	str	r1, [r0, #0]
 801446c:	2100      	movs	r1, #0
 801446e:	b430      	push	{r4, r5}
 8014470:	6041      	str	r1, [r0, #4]
 8014472:	6815      	ldr	r5, [r2, #0]
 8014474:	6085      	str	r5, [r0, #8]
 8014476:	6852      	ldr	r2, [r2, #4]
 8014478:	6443      	str	r3, [r0, #68]	@ 0x44
 801447a:	9b02      	ldr	r3, [sp, #8]
 801447c:	60c2      	str	r2, [r0, #12]
 801447e:	7401      	strb	r1, [r0, #16]
 8014480:	6141      	str	r1, [r0, #20]
 8014482:	7601      	strb	r1, [r0, #24]
 8014484:	8701      	strh	r1, [r0, #56]	@ 0x38
 8014486:	8401      	strh	r1, [r0, #32]
 8014488:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801448c:	6483      	str	r3, [r0, #72]	@ 0x48
 801448e:	bc30      	pop	{r4, r5}
 8014490:	f7ef beb8 	b.w	8004204 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08014494 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8014494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014496:	4605      	mov	r5, r0
 8014498:	4608      	mov	r0, r1
 801449a:	b1f1      	cbz	r1, 80144da <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801449c:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 80144a0:	460b      	mov	r3, r1
 80144a2:	f101 0708 	add.w	r7, r1, #8
 80144a6:	4622      	mov	r2, r4
 80144a8:	6818      	ldr	r0, [r3, #0]
 80144aa:	3308      	adds	r3, #8
 80144ac:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80144b0:	4626      	mov	r6, r4
 80144b2:	42bb      	cmp	r3, r7
 80144b4:	c603      	stmia	r6!, {r0, r1}
 80144b6:	4634      	mov	r4, r6
 80144b8:	d1f6      	bne.n	80144a8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80144ba:	6818      	ldr	r0, [r3, #0]
 80144bc:	6030      	str	r0, [r6, #0]
 80144be:	4610      	mov	r0, r2
 80144c0:	889b      	ldrh	r3, [r3, #4]
 80144c2:	80b3      	strh	r3, [r6, #4]
 80144c4:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80144c8:	015b      	lsls	r3, r3, #5
 80144ca:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80144ce:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 80144d2:	430b      	orrs	r3, r1
 80144d4:	425b      	negs	r3, r3
 80144d6:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 80144da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080144dc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80144dc:	b538      	push	{r3, r4, r5, lr}
 80144de:	460c      	mov	r4, r1
 80144e0:	6811      	ldr	r1, [r2, #0]
 80144e2:	4610      	mov	r0, r2
 80144e4:	68cd      	ldr	r5, [r1, #12]
 80144e6:	4619      	mov	r1, r3
 80144e8:	47a8      	blx	r5
 80144ea:	2800      	cmp	r0, #0
 80144ec:	bf08      	it	eq
 80144ee:	4620      	moveq	r0, r4
 80144f0:	bd38      	pop	{r3, r4, r5, pc}
	...

080144f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80144f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144f8:	468c      	mov	ip, r1
 80144fa:	4605      	mov	r5, r0
 80144fc:	4614      	mov	r4, r2
 80144fe:	b942      	cbnz	r2, 8014512 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8014500:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8014504:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8014508:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 801450c:	4620      	mov	r0, r4
 801450e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014512:	7b50      	ldrb	r0, [r2, #13]
 8014514:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8014518:	8893      	ldrh	r3, [r2, #4]
 801451a:	0106      	lsls	r6, r0, #4
 801451c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8014520:	79e6      	ldrb	r6, [r4, #7]
 8014522:	4316      	orrs	r6, r2
 8014524:	185a      	adds	r2, r3, r1
 8014526:	b291      	uxth	r1, r2
 8014528:	b2b7      	uxth	r7, r6
 801452a:	291d      	cmp	r1, #29
 801452c:	d87f      	bhi.n	801462e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801452e:	2201      	movs	r2, #1
 8014530:	10f6      	asrs	r6, r6, #3
 8014532:	408a      	lsls	r2, r1
 8014534:	498b      	ldr	r1, [pc, #556]	@ (8014764 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 8014536:	420a      	tst	r2, r1
 8014538:	d12e      	bne.n	8014598 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801453a:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801453e:	d076      	beq.n	801462e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8014540:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8014544:	4623      	mov	r3, r4
 8014546:	f104 0e08 	add.w	lr, r4, #8
 801454a:	4614      	mov	r4, r2
 801454c:	6818      	ldr	r0, [r3, #0]
 801454e:	3308      	adds	r3, #8
 8014550:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8014554:	4694      	mov	ip, r2
 8014556:	4573      	cmp	r3, lr
 8014558:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801455c:	4662      	mov	r2, ip
 801455e:	d1f5      	bne.n	801454c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8014560:	6818      	ldr	r0, [r3, #0]
 8014562:	f8cc 0000 	str.w	r0, [ip]
 8014566:	889b      	ldrh	r3, [r3, #4]
 8014568:	f8ac 3004 	strh.w	r3, [ip, #4]
 801456c:	b2b3      	uxth	r3, r6
 801456e:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 8014572:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 8014576:	1aca      	subs	r2, r1, r3
 8014578:	1bcf      	subs	r7, r1, r7
 801457a:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801457e:	b292      	uxth	r2, r2
 8014580:	1afb      	subs	r3, r7, r3
 8014582:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 8014586:	10d2      	asrs	r2, r2, #3
 8014588:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801458c:	4302      	orrs	r2, r0
 801458e:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 8014592:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 8014596:	e7b9      	b.n	801450c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8014598:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801459c:	4623      	mov	r3, r4
 801459e:	f104 0808 	add.w	r8, r4, #8
 80145a2:	4614      	mov	r4, r2
 80145a4:	6818      	ldr	r0, [r3, #0]
 80145a6:	3308      	adds	r3, #8
 80145a8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80145ac:	4696      	mov	lr, r2
 80145ae:	4543      	cmp	r3, r8
 80145b0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80145b4:	4672      	mov	r2, lr
 80145b6:	d1f5      	bne.n	80145a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 80145b8:	6818      	ldr	r0, [r3, #0]
 80145ba:	f8ce 0000 	str.w	r0, [lr]
 80145be:	889b      	ldrh	r3, [r3, #4]
 80145c0:	f8ae 3004 	strh.w	r3, [lr, #4]
 80145c4:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 80145c6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80145ca:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 80145cc:	f640 6333 	movw	r3, #3635	@ 0xe33
 80145d0:	4299      	cmp	r1, r3
 80145d2:	d111      	bne.n	80145f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 80145d4:	f8dc 3000 	ldr.w	r3, [ip]
 80145d8:	4660      	mov	r0, ip
 80145da:	68db      	ldr	r3, [r3, #12]
 80145dc:	4798      	blx	r3
 80145de:	7b41      	ldrb	r1, [r0, #13]
 80145e0:	00cb      	lsls	r3, r1, #3
 80145e2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80145e6:	7a03      	ldrb	r3, [r0, #8]
 80145e8:	4313      	orrs	r3, r2
 80145ea:	064a      	lsls	r2, r1, #25
 80145ec:	bf44      	itt	mi
 80145ee:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80145f2:	b21b      	sxthmi	r3, r3
 80145f4:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 80145f8:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 80145fc:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8014600:	443b      	add	r3, r7
 8014602:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8014606:	4433      	add	r3, r6
 8014608:	b29b      	uxth	r3, r3
 801460a:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801460e:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8014612:	10db      	asrs	r3, r3, #3
 8014614:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014618:	4313      	orrs	r3, r2
 801461a:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801461e:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8014622:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8014626:	1a9b      	subs	r3, r3, r2
 8014628:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801462c:	e76e      	b.n	801450c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801462e:	f023 0204 	bic.w	r2, r3, #4
 8014632:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8014636:	428a      	cmp	r2, r1
 8014638:	d003      	beq.n	8014642 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801463a:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801463e:	4293      	cmp	r3, r2
 8014640:	d138      	bne.n	80146b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 8014642:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 8014646:	4622      	mov	r2, r4
 8014648:	f104 0808 	add.w	r8, r4, #8
 801464c:	4634      	mov	r4, r6
 801464e:	6810      	ldr	r0, [r2, #0]
 8014650:	3208      	adds	r2, #8
 8014652:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8014656:	46b6      	mov	lr, r6
 8014658:	4542      	cmp	r2, r8
 801465a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801465e:	4676      	mov	r6, lr
 8014660:	d1f5      	bne.n	801464e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 8014662:	6810      	ldr	r0, [r2, #0]
 8014664:	3b01      	subs	r3, #1
 8014666:	4621      	mov	r1, r4
 8014668:	f8ce 0000 	str.w	r0, [lr]
 801466c:	b29b      	uxth	r3, r3
 801466e:	8892      	ldrh	r2, [r2, #4]
 8014670:	4628      	mov	r0, r5
 8014672:	f8ae 2004 	strh.w	r2, [lr, #4]
 8014676:	4662      	mov	r2, ip
 8014678:	f7ff ff30 	bl	80144dc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801467c:	7b41      	ldrb	r1, [r0, #13]
 801467e:	00cb      	lsls	r3, r1, #3
 8014680:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014684:	7a03      	ldrb	r3, [r0, #8]
 8014686:	0648      	lsls	r0, r1, #25
 8014688:	ea43 0302 	orr.w	r3, r3, r2
 801468c:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8014690:	bf44      	itt	mi
 8014692:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014696:	b21b      	sxthmi	r3, r3
 8014698:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801469c:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80146a0:	005b      	lsls	r3, r3, #1
 80146a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80146a6:	4313      	orrs	r3, r2
 80146a8:	115a      	asrs	r2, r3, #5
 80146aa:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80146ae:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 80146b2:	e047      	b.n	8014744 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 80146b4:	00c2      	lsls	r2, r0, #3
 80146b6:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 80146ba:	7a22      	ldrb	r2, [r4, #8]
 80146bc:	430a      	orrs	r2, r1
 80146be:	0641      	lsls	r1, r0, #25
 80146c0:	f640 6109 	movw	r1, #3593	@ 0xe09
 80146c4:	bf44      	itt	mi
 80146c6:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 80146ca:	b212      	sxthmi	r2, r2
 80146cc:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 80146d0:	f023 0210 	bic.w	r2, r3, #16
 80146d4:	428a      	cmp	r2, r1
 80146d6:	d003      	beq.n	80146e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 80146d8:	f640 6213 	movw	r2, #3603	@ 0xe13
 80146dc:	4293      	cmp	r3, r2
 80146de:	d13e      	bne.n	801475e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 80146e0:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80146e4:	f104 0808 	add.w	r8, r4, #8
 80146e8:	4696      	mov	lr, r2
 80146ea:	6820      	ldr	r0, [r4, #0]
 80146ec:	3408      	adds	r4, #8
 80146ee:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80146f2:	4616      	mov	r6, r2
 80146f4:	4544      	cmp	r4, r8
 80146f6:	c603      	stmia	r6!, {r0, r1}
 80146f8:	4632      	mov	r2, r6
 80146fa:	d1f6      	bne.n	80146ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 80146fc:	6820      	ldr	r0, [r4, #0]
 80146fe:	6030      	str	r0, [r6, #0]
 8014700:	4628      	mov	r0, r5
 8014702:	88a1      	ldrh	r1, [r4, #4]
 8014704:	4674      	mov	r4, lr
 8014706:	80b1      	strh	r1, [r6, #4]
 8014708:	4671      	mov	r1, lr
 801470a:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 801470e:	0076      	lsls	r6, r6, #1
 8014710:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8014714:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8014718:	4316      	orrs	r6, r2
 801471a:	f640 6213 	movw	r2, #3603	@ 0xe13
 801471e:	4293      	cmp	r3, r2
 8014720:	4662      	mov	r2, ip
 8014722:	bf16      	itet	ne
 8014724:	f103 33ff 	addne.w	r3, r3, #4294967295
 8014728:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801472c:	b29b      	uxthne	r3, r3
 801472e:	f7ff fed5 	bl	80144dc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014732:	7b43      	ldrb	r3, [r0, #13]
 8014734:	7a82      	ldrb	r2, [r0, #10]
 8014736:	005b      	lsls	r3, r3, #1
 8014738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801473c:	4313      	orrs	r3, r2
 801473e:	1af6      	subs	r6, r6, r3
 8014740:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 8014744:	7b61      	ldrb	r1, [r4, #13]
 8014746:	00cb      	lsls	r3, r1, #3
 8014748:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801474c:	7a23      	ldrb	r3, [r4, #8]
 801474e:	4313      	orrs	r3, r2
 8014750:	064a      	lsls	r2, r1, #25
 8014752:	bf44      	itt	mi
 8014754:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014758:	b21b      	sxthmi	r3, r3
 801475a:	1bdb      	subs	r3, r3, r7
 801475c:	e719      	b.n	8014592 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801475e:	2300      	movs	r3, #0
 8014760:	e7a5      	b.n	80146ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8014762:	bf00      	nop
 8014764:	3fc00079 	.word	0x3fc00079

08014768 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8014768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801476c:	4604      	mov	r4, r0
 801476e:	b942      	cbnz	r2, 8014782 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8014770:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014774:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8014778:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801477c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8014780:	e047      	b.n	8014812 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8014782:	7b51      	ldrb	r1, [r2, #13]
 8014784:	8893      	ldrh	r3, [r2, #4]
 8014786:	010d      	lsls	r5, r1, #4
 8014788:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801478c:	79d5      	ldrb	r5, [r2, #7]
 801478e:	4305      	orrs	r5, r0
 8014790:	2d04      	cmp	r5, #4
 8014792:	bfcc      	ite	gt
 8014794:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8014798:	f04f 0e01 	movle.w	lr, #1
 801479c:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 80147a0:	f200 80ab 	bhi.w	80148fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80147a4:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 80147a8:	4283      	cmp	r3, r0
 80147aa:	d216      	bcs.n	80147da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80147ac:	f240 605b 	movw	r0, #1627	@ 0x65b
 80147b0:	4283      	cmp	r3, r0
 80147b2:	d859      	bhi.n	8014868 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80147b4:	f240 6057 	movw	r0, #1623	@ 0x657
 80147b8:	4283      	cmp	r3, r0
 80147ba:	d20e      	bcs.n	80147da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80147bc:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80147c0:	d24a      	bcs.n	8014858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80147c2:	f240 604e 	movw	r0, #1614	@ 0x64e
 80147c6:	4283      	cmp	r3, r0
 80147c8:	d207      	bcs.n	80147da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80147ca:	f240 601a 	movw	r0, #1562	@ 0x61a
 80147ce:	4283      	cmp	r3, r0
 80147d0:	d02a      	beq.n	8014828 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80147d2:	d821      	bhi.n	8014818 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80147d4:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 80147d8:	d35b      	bcc.n	8014892 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80147da:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 80147de:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80147e2:	f040 80d0 	bne.w	8014986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80147e6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 80147ea:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80147ee:	f040 80ca 	bne.w	8014986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80147f2:	00cb      	lsls	r3, r1, #3
 80147f4:	0649      	lsls	r1, r1, #25
 80147f6:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80147fa:	7a13      	ldrb	r3, [r2, #8]
 80147fc:	ea43 0300 	orr.w	r3, r3, r0
 8014800:	bf44      	itt	mi
 8014802:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014806:	b21b      	sxthmi	r3, r3
 8014808:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801480c:	1b5d      	subs	r5, r3, r5
 801480e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8014812:	4610      	mov	r0, r2
 8014814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014818:	f240 604b 	movw	r0, #1611	@ 0x64b
 801481c:	4283      	cmp	r3, r0
 801481e:	d338      	bcc.n	8014892 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014820:	f240 604c 	movw	r0, #1612	@ 0x64c
 8014824:	4283      	cmp	r3, r0
 8014826:	d9d8      	bls.n	80147da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014828:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801482c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8014830:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014834:	f040 80f3 	bne.w	8014a1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8014838:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801483c:	f040 80ef 	bne.w	8014a1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8014840:	00cb      	lsls	r3, r1, #3
 8014842:	064e      	lsls	r6, r1, #25
 8014844:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8014848:	7a13      	ldrb	r3, [r2, #8]
 801484a:	ea43 0300 	orr.w	r3, r3, r0
 801484e:	bf44      	itt	mi
 8014850:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014854:	b21b      	sxthmi	r3, r3
 8014856:	e7d9      	b.n	801480c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8014858:	f240 6054 	movw	r0, #1620	@ 0x654
 801485c:	4283      	cmp	r3, r0
 801485e:	d8e3      	bhi.n	8014828 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014860:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8014864:	d9e0      	bls.n	8014828 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014866:	e7b8      	b.n	80147da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014868:	f240 6074 	movw	r0, #1652	@ 0x674
 801486c:	4283      	cmp	r3, r0
 801486e:	d0b4      	beq.n	80147da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014870:	d82d      	bhi.n	80148ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8014872:	f240 605e 	movw	r0, #1630	@ 0x65e
 8014876:	4283      	cmp	r3, r0
 8014878:	d804      	bhi.n	8014884 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801487a:	f240 605d 	movw	r0, #1629	@ 0x65d
 801487e:	4283      	cmp	r3, r0
 8014880:	d3d2      	bcc.n	8014828 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014882:	e7aa      	b.n	80147da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014884:	f240 605f 	movw	r0, #1631	@ 0x65f
 8014888:	4283      	cmp	r3, r0
 801488a:	d0cd      	beq.n	8014828 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801488c:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8014890:	d0a3      	beq.n	80147da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014892:	00cb      	lsls	r3, r1, #3
 8014894:	0649      	lsls	r1, r1, #25
 8014896:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801489a:	7a13      	ldrb	r3, [r2, #8]
 801489c:	ea43 0300 	orr.w	r3, r3, r0
 80148a0:	bf44      	itt	mi
 80148a2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80148a6:	b21b      	sxthmi	r3, r3
 80148a8:	1b5d      	subs	r5, r3, r5
 80148aa:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80148ae:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80148b2:	7b53      	ldrb	r3, [r2, #13]
 80148b4:	015b      	lsls	r3, r3, #5
 80148b6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80148ba:	7993      	ldrb	r3, [r2, #6]
 80148bc:	430b      	orrs	r3, r1
 80148be:	2105      	movs	r1, #5
 80148c0:	005b      	lsls	r3, r3, #1
 80148c2:	fb93 f3f1 	sdiv	r3, r3, r1
 80148c6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80148ca:	440b      	add	r3, r1
 80148cc:	e756      	b.n	801477c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80148ce:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 80148d2:	4283      	cmp	r3, r0
 80148d4:	d809      	bhi.n	80148ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80148d6:	f240 60df 	movw	r0, #1759	@ 0x6df
 80148da:	4283      	cmp	r3, r0
 80148dc:	f4bf af7d 	bcs.w	80147da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80148e0:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 80148e4:	2b05      	cmp	r3, #5
 80148e6:	d8d4      	bhi.n	8014892 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80148e8:	e777      	b.n	80147da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80148ea:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 80148ee:	4283      	cmp	r3, r0
 80148f0:	d09a      	beq.n	8014828 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80148f2:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 80148f6:	4283      	cmp	r3, r0
 80148f8:	e7ca      	b.n	8014890 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80148fa:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 80148fe:	d22b      	bcs.n	8014958 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8014900:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8014904:	4283      	cmp	r3, r0
 8014906:	d28f      	bcs.n	8014828 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014908:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801490c:	4283      	cmp	r3, r0
 801490e:	d816      	bhi.n	801493e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8014910:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8014914:	4283      	cmp	r3, r0
 8014916:	f4bf af60 	bcs.w	80147da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801491a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801491e:	4283      	cmp	r3, r0
 8014920:	d80a      	bhi.n	8014938 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8014922:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8014926:	4283      	cmp	r3, r0
 8014928:	f4bf af57 	bcs.w	80147da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801492c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8014930:	4283      	cmp	r3, r0
 8014932:	f43f af79 	beq.w	8014828 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014936:	e7ac      	b.n	8014892 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014938:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801493c:	e7f8      	b.n	8014930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801493e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8014942:	4283      	cmp	r3, r0
 8014944:	d802      	bhi.n	801494c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8014946:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801494a:	e798      	b.n	801487e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801494c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8014950:	4283      	cmp	r3, r0
 8014952:	f47f af42 	bne.w	80147da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014956:	e767      	b.n	8014828 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014958:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801495c:	4283      	cmp	r3, r0
 801495e:	f43f af63 	beq.w	8014828 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014962:	d802      	bhi.n	801496a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8014964:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8014968:	e7f2      	b.n	8014950 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801496a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801496e:	4283      	cmp	r3, r0
 8014970:	d805      	bhi.n	801497e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8014972:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8014976:	4283      	cmp	r3, r0
 8014978:	f4ff af2f 	bcc.w	80147da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801497c:	e754      	b.n	8014828 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801497e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8014982:	4283      	cmp	r3, r0
 8014984:	e7af      	b.n	80148e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8014986:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801498a:	4617      	mov	r7, r2
 801498c:	f102 0808 	add.w	r8, r2, #8
 8014990:	4666      	mov	r6, ip
 8014992:	6838      	ldr	r0, [r7, #0]
 8014994:	3708      	adds	r7, #8
 8014996:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801499a:	46e6      	mov	lr, ip
 801499c:	4547      	cmp	r7, r8
 801499e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80149a2:	46f4      	mov	ip, lr
 80149a4:	d1f5      	bne.n	8014992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80149a6:	6838      	ldr	r0, [r7, #0]
 80149a8:	f8ce 0000 	str.w	r0, [lr]
 80149ac:	88b9      	ldrh	r1, [r7, #4]
 80149ae:	f8ae 1004 	strh.w	r1, [lr, #4]
 80149b2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80149b6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80149ba:	d009      	beq.n	80149d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80149bc:	7b51      	ldrb	r1, [r2, #13]
 80149be:	7992      	ldrb	r2, [r2, #6]
 80149c0:	0149      	lsls	r1, r1, #5
 80149c2:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80149c6:	4311      	orrs	r1, r2
 80149c8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80149cc:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80149d0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80149d4:	b2ad      	uxth	r5, r5
 80149d6:	d00d      	beq.n	80149f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80149d8:	442b      	add	r3, r5
 80149da:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80149de:	b29b      	uxth	r3, r3
 80149e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80149e4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80149e8:	10db      	asrs	r3, r3, #3
 80149ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80149ee:	4313      	orrs	r3, r2
 80149f0:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80149f4:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80149f8:	00cb      	lsls	r3, r1, #3
 80149fa:	064f      	lsls	r7, r1, #25
 80149fc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014a00:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8014a04:	ea43 0302 	orr.w	r3, r3, r2
 8014a08:	bf44      	itt	mi
 8014a0a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014a0e:	b21b      	sxthmi	r3, r3
 8014a10:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014a14:	1b5b      	subs	r3, r3, r5
 8014a16:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8014a1a:	4632      	mov	r2, r6
 8014a1c:	e6f9      	b.n	8014812 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8014a1e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8014a22:	4617      	mov	r7, r2
 8014a24:	f102 0908 	add.w	r9, r2, #8
 8014a28:	4666      	mov	r6, ip
 8014a2a:	6838      	ldr	r0, [r7, #0]
 8014a2c:	3708      	adds	r7, #8
 8014a2e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8014a32:	46e0      	mov	r8, ip
 8014a34:	454f      	cmp	r7, r9
 8014a36:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8014a3a:	46c4      	mov	ip, r8
 8014a3c:	d1f5      	bne.n	8014a2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8014a3e:	6838      	ldr	r0, [r7, #0]
 8014a40:	f8c8 0000 	str.w	r0, [r8]
 8014a44:	88b9      	ldrh	r1, [r7, #4]
 8014a46:	f8a8 1004 	strh.w	r1, [r8, #4]
 8014a4a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8014a4e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014a52:	d009      	beq.n	8014a68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8014a54:	7b51      	ldrb	r1, [r2, #13]
 8014a56:	7992      	ldrb	r2, [r2, #6]
 8014a58:	0149      	lsls	r1, r1, #5
 8014a5a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8014a5e:	4311      	orrs	r1, r2
 8014a60:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014a64:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8014a68:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8014a6c:	d00e      	beq.n	8014a8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8014a6e:	eba3 030e 	sub.w	r3, r3, lr
 8014a72:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8014a76:	b29b      	uxth	r3, r3
 8014a78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8014a7c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8014a80:	10db      	asrs	r3, r3, #3
 8014a82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014a86:	4313      	orrs	r3, r2
 8014a88:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8014a8c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8014a90:	00cb      	lsls	r3, r1, #3
 8014a92:	0648      	lsls	r0, r1, #25
 8014a94:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014a98:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8014a9c:	ea43 0302 	orr.w	r3, r3, r2
 8014aa0:	bf44      	itt	mi
 8014aa2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014aa6:	b21b      	sxthmi	r3, r3
 8014aa8:	1b5d      	subs	r5, r3, r5
 8014aaa:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8014aae:	e7b4      	b.n	8014a1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08014ab0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8014ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ab4:	461e      	mov	r6, r3
 8014ab6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8014ab8:	4604      	mov	r4, r0
 8014aba:	4617      	mov	r7, r2
 8014abc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014ac0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8014ac4:	f7ef fb5c 	bl	8004180 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014ac8:	4605      	mov	r5, r0
 8014aca:	b918      	cbnz	r0, 8014ad4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8014acc:	6030      	str	r0, [r6, #0]
 8014ace:	4628      	mov	r0, r5
 8014ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ad4:	683b      	ldr	r3, [r7, #0]
 8014ad6:	4601      	mov	r1, r0
 8014ad8:	4638      	mov	r0, r7
 8014ada:	68db      	ldr	r3, [r3, #12]
 8014adc:	4798      	blx	r3
 8014ade:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8014ae2:	4602      	mov	r2, r0
 8014ae4:	6030      	str	r0, [r6, #0]
 8014ae6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014aea:	d213      	bcs.n	8014b14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8014aec:	4643      	mov	r3, r8
 8014aee:	4639      	mov	r1, r7
 8014af0:	4620      	mov	r0, r4
 8014af2:	f7ff fe39 	bl	8014768 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8014af6:	6030      	str	r0, [r6, #0]
 8014af8:	6833      	ldr	r3, [r6, #0]
 8014afa:	b143      	cbz	r3, 8014b0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8014afc:	7b5a      	ldrb	r2, [r3, #13]
 8014afe:	7a9b      	ldrb	r3, [r3, #10]
 8014b00:	0052      	lsls	r2, r2, #1
 8014b02:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8014b06:	4313      	orrs	r3, r2
 8014b08:	bf0c      	ite	eq
 8014b0a:	2301      	moveq	r3, #1
 8014b0c:	2300      	movne	r3, #0
 8014b0e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8014b12:	e7dc      	b.n	8014ace <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8014b14:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8014b18:	b29b      	uxth	r3, r3
 8014b1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8014b1c:	d804      	bhi.n	8014b28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8014b1e:	4639      	mov	r1, r7
 8014b20:	4620      	mov	r0, r4
 8014b22:	f7ff fce7 	bl	80144f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8014b26:	e7e6      	b.n	8014af6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8014b28:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d0e3      	beq.n	8014af8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014b30:	f640 1302 	movw	r3, #2306	@ 0x902
 8014b34:	429d      	cmp	r5, r3
 8014b36:	d1df      	bne.n	8014af8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014b38:	4601      	mov	r1, r0
 8014b3a:	4620      	mov	r0, r4
 8014b3c:	f7ff fcaa 	bl	8014494 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8014b40:	e7d9      	b.n	8014af6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08014b42 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8014b42:	b510      	push	{r4, lr}
 8014b44:	4604      	mov	r4, r0
 8014b46:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8014b4a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8014b4c:	b1e1      	cbz	r1, 8014b88 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8014b4e:	2b0a      	cmp	r3, #10
 8014b50:	d02d      	beq.n	8014bae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8014b52:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8014b54:	3901      	subs	r1, #1
 8014b56:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8014b5a:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8014b5c:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8014b60:	1c51      	adds	r1, r2, #1
 8014b62:	b289      	uxth	r1, r1
 8014b64:	2901      	cmp	r1, #1
 8014b66:	bf8a      	itet	hi
 8014b68:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014b6c:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8014b6e:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8014b70:	1c5a      	adds	r2, r3, #1
 8014b72:	8722      	strh	r2, [r4, #56]	@ 0x38
 8014b74:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8014b76:	4413      	add	r3, r2
 8014b78:	b29b      	uxth	r3, r3
 8014b7a:	2b09      	cmp	r3, #9
 8014b7c:	bf88      	it	hi
 8014b7e:	3b0a      	subhi	r3, #10
 8014b80:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014b84:	8458      	strh	r0, [r3, #34]	@ 0x22
 8014b86:	e7de      	b.n	8014b46 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8014b88:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8014b8a:	2b0a      	cmp	r3, #10
 8014b8c:	d00f      	beq.n	8014bae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8014b8e:	4620      	mov	r0, r4
 8014b90:	f7ff fc3f 	bl	8014412 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8014b94:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8014b96:	1c5a      	adds	r2, r3, #1
 8014b98:	8722      	strh	r2, [r4, #56]	@ 0x38
 8014b9a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8014b9c:	4413      	add	r3, r2
 8014b9e:	b29b      	uxth	r3, r3
 8014ba0:	2b09      	cmp	r3, #9
 8014ba2:	bf88      	it	hi
 8014ba4:	3b0a      	subhi	r3, #10
 8014ba6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014baa:	8458      	strh	r0, [r3, #34]	@ 0x22
 8014bac:	e7ec      	b.n	8014b88 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8014bae:	bd10      	pop	{r4, pc}

08014bb0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8014bb0:	b538      	push	{r3, r4, r5, lr}
 8014bb2:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8014bb4:	4604      	mov	r4, r0
 8014bb6:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8014bba:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8014bbc:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8014bbe:	3a01      	subs	r2, #1
 8014bc0:	8702      	strh	r2, [r0, #56]	@ 0x38
 8014bc2:	1c5a      	adds	r2, r3, #1
 8014bc4:	b292      	uxth	r2, r2
 8014bc6:	2a09      	cmp	r2, #9
 8014bc8:	bf8a      	itet	hi
 8014bca:	3b09      	subhi	r3, #9
 8014bcc:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8014bce:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8014bd0:	f7ff ffb7 	bl	8014b42 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8014bd4:	8c23      	ldrh	r3, [r4, #32]
 8014bd6:	2b01      	cmp	r3, #1
 8014bd8:	bf9c      	itt	ls
 8014bda:	3301      	addls	r3, #1
 8014bdc:	8423      	strhls	r3, [r4, #32]
 8014bde:	8be3      	ldrh	r3, [r4, #30]
 8014be0:	b90b      	cbnz	r3, 8014be6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8014be2:	2302      	movs	r3, #2
 8014be4:	83e3      	strh	r3, [r4, #30]
 8014be6:	8be3      	ldrh	r3, [r4, #30]
 8014be8:	4628      	mov	r0, r5
 8014bea:	3b01      	subs	r3, #1
 8014bec:	b29b      	uxth	r3, r3
 8014bee:	83e3      	strh	r3, [r4, #30]
 8014bf0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014bf4:	8365      	strh	r5, [r4, #26]
 8014bf6:	bd38      	pop	{r3, r4, r5, pc}

08014bf8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8014bf8:	428a      	cmp	r2, r1
 8014bfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bfe:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8014c00:	d932      	bls.n	8014c68 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8014c02:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8014c04:	1a54      	subs	r4, r2, r1
 8014c06:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8014c0a:	19ee      	adds	r6, r5, r7
 8014c0c:	fa1f fe84 	uxth.w	lr, r4
 8014c10:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8014c14:	3e01      	subs	r6, #1
 8014c16:	b2b4      	uxth	r4, r6
 8014c18:	eba4 090e 	sub.w	r9, r4, lr
 8014c1c:	fa1f f989 	uxth.w	r9, r9
 8014c20:	2c09      	cmp	r4, #9
 8014c22:	4626      	mov	r6, r4
 8014c24:	bf88      	it	hi
 8014c26:	f1a4 060a 	subhi.w	r6, r4, #10
 8014c2a:	f1bc 0f00 	cmp.w	ip, #0
 8014c2e:	f104 34ff 	add.w	r4, r4, #4294967295
 8014c32:	bf08      	it	eq
 8014c34:	f04f 0c02 	moveq.w	ip, #2
 8014c38:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8014c3c:	b2a4      	uxth	r4, r4
 8014c3e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014c42:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8014c46:	454c      	cmp	r4, r9
 8014c48:	fa1f fc8c 	uxth.w	ip, ip
 8014c4c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8014c50:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8014c54:	d1e4      	bne.n	8014c20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8014c56:	eba5 050e 	sub.w	r5, r5, lr
 8014c5a:	eb0e 0408 	add.w	r4, lr, r8
 8014c5e:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8014c62:	8705      	strh	r5, [r0, #56]	@ 0x38
 8014c64:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8014c68:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8014c6a:	250a      	movs	r5, #10
 8014c6c:	1a64      	subs	r4, r4, r1
 8014c6e:	4439      	add	r1, r7
 8014c70:	b289      	uxth	r1, r1
 8014c72:	8704      	strh	r4, [r0, #56]	@ 0x38
 8014c74:	2909      	cmp	r1, #9
 8014c76:	bf88      	it	hi
 8014c78:	390a      	subhi	r1, #10
 8014c7a:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8014c7c:	b18a      	cbz	r2, 8014ca2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8014c7e:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8014c80:	3a01      	subs	r2, #1
 8014c82:	3101      	adds	r1, #1
 8014c84:	b292      	uxth	r2, r2
 8014c86:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8014c8a:	8701      	strh	r1, [r0, #56]	@ 0x38
 8014c8c:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8014c8e:	b901      	cbnz	r1, 8014c92 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8014c90:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8014c92:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8014c94:	3901      	subs	r1, #1
 8014c96:	b289      	uxth	r1, r1
 8014c98:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8014c9a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8014c9e:	844c      	strh	r4, [r1, #34]	@ 0x22
 8014ca0:	e7ec      	b.n	8014c7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8014ca2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ca6:	f7ff bf4c 	b.w	8014b42 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08014caa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8014caa:	b570      	push	{r4, r5, r6, lr}
 8014cac:	2500      	movs	r5, #0
 8014cae:	4295      	cmp	r5, r2
 8014cb0:	d011      	beq.n	8014cd6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8014cb2:	8bc4      	ldrh	r4, [r0, #30]
 8014cb4:	f831 6b02 	ldrh.w	r6, [r1], #2
 8014cb8:	4414      	add	r4, r2
 8014cba:	3c01      	subs	r4, #1
 8014cbc:	1b64      	subs	r4, r4, r5
 8014cbe:	b2a4      	uxth	r4, r4
 8014cc0:	2c01      	cmp	r4, #1
 8014cc2:	bf88      	it	hi
 8014cc4:	3c02      	subhi	r4, #2
 8014cc6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8014cca:	8b64      	ldrh	r4, [r4, #26]
 8014ccc:	42b4      	cmp	r4, r6
 8014cce:	d117      	bne.n	8014d00 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8014cd0:	3501      	adds	r5, #1
 8014cd2:	b2ad      	uxth	r5, r5
 8014cd4:	e7eb      	b.n	8014cae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8014cd6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014cda:	2400      	movs	r4, #0
 8014cdc:	4413      	add	r3, r2
 8014cde:	b2a2      	uxth	r2, r4
 8014ce0:	429a      	cmp	r2, r3
 8014ce2:	da0f      	bge.n	8014d04 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8014ce4:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8014ce6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8014cea:	3401      	adds	r4, #1
 8014cec:	4432      	add	r2, r6
 8014cee:	b292      	uxth	r2, r2
 8014cf0:	2a09      	cmp	r2, #9
 8014cf2:	bf88      	it	hi
 8014cf4:	3a0a      	subhi	r2, #10
 8014cf6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8014cfa:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8014cfc:	42aa      	cmp	r2, r5
 8014cfe:	d0ee      	beq.n	8014cde <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8014d00:	2000      	movs	r0, #0
 8014d02:	bd70      	pop	{r4, r5, r6, pc}
 8014d04:	2001      	movs	r0, #1
 8014d06:	e7fc      	b.n	8014d02 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08014d08 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8014d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d0c:	4605      	mov	r5, r0
 8014d0e:	4616      	mov	r6, r2
 8014d10:	1c8c      	adds	r4, r1, #2
 8014d12:	8809      	ldrh	r1, [r1, #0]
 8014d14:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8014d18:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8014d1c:	42b3      	cmp	r3, r6
 8014d1e:	d124      	bne.n	8014d6a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8014d20:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8014d24:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8014d28:	f001 070f 	and.w	r7, r1, #15
 8014d2c:	4652      	mov	r2, sl
 8014d2e:	f8cd 8000 	str.w	r8, [sp]
 8014d32:	464b      	mov	r3, r9
 8014d34:	4621      	mov	r1, r4
 8014d36:	4628      	mov	r0, r5
 8014d38:	f7ff ffb7 	bl	8014caa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8014d3c:	4683      	mov	fp, r0
 8014d3e:	b168      	cbz	r0, 8014d5c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8014d40:	eb0a 0109 	add.w	r1, sl, r9
 8014d44:	463a      	mov	r2, r7
 8014d46:	4628      	mov	r0, r5
 8014d48:	4441      	add	r1, r8
 8014d4a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8014d4e:	4649      	mov	r1, r9
 8014d50:	f7ff ff52 	bl	8014bf8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8014d54:	4658      	mov	r0, fp
 8014d56:	b003      	add	sp, #12
 8014d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d5c:	eb07 010a 	add.w	r1, r7, sl
 8014d60:	4449      	add	r1, r9
 8014d62:	4441      	add	r1, r8
 8014d64:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8014d68:	e7d2      	b.n	8014d10 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8014d6a:	f04f 0b00 	mov.w	fp, #0
 8014d6e:	e7f1      	b.n	8014d54 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08014d70 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8014d70:	b570      	push	{r4, r5, r6, lr}
 8014d72:	8810      	ldrh	r0, [r2, #0]
 8014d74:	4298      	cmp	r0, r3
 8014d76:	d817      	bhi.n	8014da8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014d78:	1e48      	subs	r0, r1, #1
 8014d7a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8014d7e:	4298      	cmp	r0, r3
 8014d80:	d312      	bcc.n	8014da8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014d82:	2400      	movs	r4, #0
 8014d84:	428c      	cmp	r4, r1
 8014d86:	d20f      	bcs.n	8014da8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014d88:	1860      	adds	r0, r4, r1
 8014d8a:	1040      	asrs	r0, r0, #1
 8014d8c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8014d90:	0085      	lsls	r5, r0, #2
 8014d92:	42b3      	cmp	r3, r6
 8014d94:	d902      	bls.n	8014d9c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8014d96:	3001      	adds	r0, #1
 8014d98:	b284      	uxth	r4, r0
 8014d9a:	e7f3      	b.n	8014d84 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014d9c:	d201      	bcs.n	8014da2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8014d9e:	b281      	uxth	r1, r0
 8014da0:	e7f0      	b.n	8014d84 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014da2:	442a      	add	r2, r5
 8014da4:	8850      	ldrh	r0, [r2, #2]
 8014da6:	bd70      	pop	{r4, r5, r6, pc}
 8014da8:	2000      	movs	r0, #0
 8014daa:	e7fc      	b.n	8014da6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08014dac <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8014dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014db0:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8014db2:	4604      	mov	r4, r0
 8014db4:	260b      	movs	r6, #11
 8014db6:	886f      	ldrh	r7, [r5, #2]
 8014db8:	087f      	lsrs	r7, r7, #1
 8014dba:	3e01      	subs	r6, #1
 8014dbc:	d013      	beq.n	8014de6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8014dbe:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8014dc0:	462a      	mov	r2, r5
 8014dc2:	4639      	mov	r1, r7
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014dca:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8014dce:	4643      	mov	r3, r8
 8014dd0:	f7ff ffce 	bl	8014d70 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8014dd4:	b138      	cbz	r0, 8014de6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8014dd6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8014dda:	4642      	mov	r2, r8
 8014ddc:	4620      	mov	r0, r4
 8014dde:	f7ff ff93 	bl	8014d08 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8014de2:	2800      	cmp	r0, #0
 8014de4:	d1e9      	bne.n	8014dba <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8014de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08014dec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8014dec:	b570      	push	{r4, r5, r6, lr}
 8014dee:	694a      	ldr	r2, [r1, #20]
 8014df0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8014df2:	684b      	ldr	r3, [r1, #4]
 8014df4:	1b54      	subs	r4, r2, r5
 8014df6:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8014df8:	f000 8106 	beq.w	8015008 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8014dfc:	1b9b      	subs	r3, r3, r6
 8014dfe:	d003      	beq.n	8014e08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8014e00:	4363      	muls	r3, r4
 8014e02:	2210      	movs	r2, #16
 8014e04:	fb93 f3f2 	sdiv	r3, r3, r2
 8014e08:	680c      	ldr	r4, [r1, #0]
 8014e0a:	698a      	ldr	r2, [r1, #24]
 8014e0c:	1b65      	subs	r5, r4, r5
 8014e0e:	f000 80fd 	beq.w	801500c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8014e12:	1b92      	subs	r2, r2, r6
 8014e14:	d003      	beq.n	8014e1e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8014e16:	436a      	muls	r2, r5
 8014e18:	2410      	movs	r4, #16
 8014e1a:	fb92 f2f4 	sdiv	r2, r2, r4
 8014e1e:	1a9b      	subs	r3, r3, r2
 8014e20:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8015048 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8014e24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014e28:	460a      	mov	r2, r1
 8014e2a:	ee07 3a90 	vmov	s15, r3
 8014e2e:	f100 040c 	add.w	r4, r0, #12
 8014e32:	4603      	mov	r3, r0
 8014e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014e38:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014e3c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8014e40:	eeb1 6a43 	vneg.f32	s12, s6
 8014e44:	edd2 7a02 	vldr	s15, [r2, #8]
 8014e48:	3214      	adds	r2, #20
 8014e4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014e4e:	ece3 6a01 	vstmia	r3!, {s13}
 8014e52:	429c      	cmp	r4, r3
 8014e54:	ed52 7a02 	vldr	s15, [r2, #-8]
 8014e58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014e5c:	edc3 7a02 	vstr	s15, [r3, #8]
 8014e60:	ed52 7a01 	vldr	s15, [r2, #-4]
 8014e64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014e68:	edc3 7a05 	vstr	s15, [r3, #20]
 8014e6c:	d1ea      	bne.n	8014e44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8014e6e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8014e70:	698b      	ldr	r3, [r1, #24]
 8014e72:	edd0 4a02 	vldr	s9, [r0, #8]
 8014e76:	1a9b      	subs	r3, r3, r2
 8014e78:	edd0 3a00 	vldr	s7, [r0]
 8014e7c:	edd0 6a01 	vldr	s13, [r0, #4]
 8014e80:	ee07 3a90 	vmov	s15, r3
 8014e84:	684b      	ldr	r3, [r1, #4]
 8014e86:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8014e8a:	ed90 5a05 	vldr	s10, [r0, #20]
 8014e8e:	1a9b      	subs	r3, r3, r2
 8014e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014e94:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8014e98:	ed90 2a03 	vldr	s4, [r0, #12]
 8014e9c:	ee07 3a10 	vmov	s14, r3
 8014ea0:	edd0 5a04 	vldr	s11, [r0, #16]
 8014ea4:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014ea8:	ed90 1a07 	vldr	s2, [r0, #28]
 8014eac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014eb0:	edd0 2a06 	vldr	s5, [r0, #24]
 8014eb4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8014eb8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8014ebc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014ec0:	ee32 5a45 	vsub.f32	s10, s4, s10
 8014ec4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014ec8:	ee67 7a83 	vmul.f32	s15, s15, s6
 8014ecc:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8014ed0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8014ed2:	694a      	ldr	r2, [r1, #20]
 8014ed4:	1b13      	subs	r3, r2, r4
 8014ed6:	ee07 3a10 	vmov	s14, r3
 8014eda:	680b      	ldr	r3, [r1, #0]
 8014edc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014ee0:	1b1b      	subs	r3, r3, r4
 8014ee2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014ee6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8014eea:	ee07 3a10 	vmov	s14, r3
 8014eee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014ef2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014ef6:	eee6 4a87 	vfma.f32	s9, s13, s14
 8014efa:	ee64 4a86 	vmul.f32	s9, s9, s12
 8014efe:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8014f02:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8014f04:	698b      	ldr	r3, [r1, #24]
 8014f06:	1a9b      	subs	r3, r3, r2
 8014f08:	ee06 3a90 	vmov	s13, r3
 8014f0c:	684b      	ldr	r3, [r1, #4]
 8014f0e:	1a9b      	subs	r3, r3, r2
 8014f10:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014f14:	ee07 3a10 	vmov	s14, r3
 8014f18:	ee66 6a84 	vmul.f32	s13, s13, s8
 8014f1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014f20:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8014f24:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014f28:	eee5 6a87 	vfma.f32	s13, s11, s14
 8014f2c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8014f30:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8014f34:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8014f36:	694a      	ldr	r2, [r1, #20]
 8014f38:	1b13      	subs	r3, r2, r4
 8014f3a:	ee07 3a10 	vmov	s14, r3
 8014f3e:	680b      	ldr	r3, [r1, #0]
 8014f40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014f44:	1b1b      	subs	r3, r3, r4
 8014f46:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014f4a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8014f4e:	ee07 3a10 	vmov	s14, r3
 8014f52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014f56:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014f5a:	eea5 5a87 	vfma.f32	s10, s11, s14
 8014f5e:	edd0 5a08 	vldr	s11, [r0, #32]
 8014f62:	ee31 1a65 	vsub.f32	s2, s2, s11
 8014f66:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8014f6a:	ee25 5a06 	vmul.f32	s10, s10, s12
 8014f6e:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8014f72:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8014f74:	698b      	ldr	r3, [r1, #24]
 8014f76:	1a9b      	subs	r3, r3, r2
 8014f78:	ee07 3a10 	vmov	s14, r3
 8014f7c:	684b      	ldr	r3, [r1, #4]
 8014f7e:	1a9b      	subs	r3, r3, r2
 8014f80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014f84:	ee01 3a90 	vmov	s3, r3
 8014f88:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014f8c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014f90:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8014f94:	ee61 1a84 	vmul.f32	s3, s3, s8
 8014f98:	eea1 7a21 	vfma.f32	s14, s2, s3
 8014f9c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8014fa0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8014fa4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8014fa6:	694a      	ldr	r2, [r1, #20]
 8014fa8:	1b13      	subs	r3, r2, r4
 8014faa:	ee03 3a10 	vmov	s6, r3
 8014fae:	680b      	ldr	r3, [r1, #0]
 8014fb0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8014fb4:	1b1b      	subs	r3, r3, r4
 8014fb6:	ee23 3a04 	vmul.f32	s6, s6, s8
 8014fba:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8014fbe:	ee03 3a10 	vmov	s6, r3
 8014fc2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8014fc6:	ee23 4a04 	vmul.f32	s8, s6, s8
 8014fca:	eee1 5a04 	vfma.f32	s11, s2, s8
 8014fce:	ee25 6a86 	vmul.f32	s12, s11, s12
 8014fd2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8014fd6:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8014fda:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8014fde:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8014fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fe6:	dd13      	ble.n	8015010 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8014fe8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014fec:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8014ff0:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8014ff2:	eee3 7a87 	vfma.f32	s15, s7, s14
 8014ff6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ffe:	dd15      	ble.n	801502c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8015000:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015004:	6403      	str	r3, [r0, #64]	@ 0x40
 8015006:	bd70      	pop	{r4, r5, r6, pc}
 8015008:	4623      	mov	r3, r4
 801500a:	e6fd      	b.n	8014e08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801500c:	462a      	mov	r2, r5
 801500e:	e706      	b.n	8014e1e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8015010:	d502      	bpl.n	8015018 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8015012:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8015016:	e7e9      	b.n	8014fec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8015018:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801501c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8015020:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8015024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015028:	dade      	bge.n	8014fe8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801502a:	e7f2      	b.n	8015012 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801502c:	d502      	bpl.n	8015034 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801502e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8015032:	e7e7      	b.n	8015004 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8015034:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8015038:	eee3 4a86 	vfma.f32	s9, s7, s12
 801503c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8015040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015044:	dadc      	bge.n	8015000 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8015046:	e7f2      	b.n	801502e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8015048:	3d800000 	.word	0x3d800000

0801504c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801504c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015050:	2714      	movs	r7, #20
 8015052:	435f      	muls	r7, r3
 8015054:	eb02 0c07 	add.w	ip, r2, r7
 8015058:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801505c:	f115 0e0f 	adds.w	lr, r5, #15
 8015060:	f100 80a2 	bmi.w	80151a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8015064:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8015068:	9c08      	ldr	r4, [sp, #32]
 801506a:	2614      	movs	r6, #20
 801506c:	f8c0 e014 	str.w	lr, [r0, #20]
 8015070:	4366      	muls	r6, r4
 8015072:	eb02 0806 	add.w	r8, r2, r6
 8015076:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801507a:	f115 040f 	adds.w	r4, r5, #15
 801507e:	f100 809f 	bmi.w	80151c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8015082:	1124      	asrs	r4, r4, #4
 8015084:	eba4 040e 	sub.w	r4, r4, lr
 8015088:	6184      	str	r4, [r0, #24]
 801508a:	2c00      	cmp	r4, #0
 801508c:	f000 808a 	beq.w	80151a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8015090:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8015094:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015098:	5995      	ldr	r5, [r2, r6]
 801509a:	eba4 0809 	sub.w	r8, r4, r9
 801509e:	59d4      	ldr	r4, [r2, r7]
 80150a0:	eba5 0a04 	sub.w	sl, r5, r4
 80150a4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80150a8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80150ac:	fb0e fe05 	mul.w	lr, lr, r5
 80150b0:	fb0a ee19 	mls	lr, sl, r9, lr
 80150b4:	fb08 e404 	mla	r4, r8, r4, lr
 80150b8:	3c01      	subs	r4, #1
 80150ba:	19a4      	adds	r4, r4, r6
 80150bc:	f100 808c 	bmi.w	80151d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80150c0:	fb94 fef6 	sdiv	lr, r4, r6
 80150c4:	fb06 441e 	mls	r4, r6, lr, r4
 80150c8:	f8c0 e000 	str.w	lr, [r0]
 80150cc:	6104      	str	r4, [r0, #16]
 80150ce:	2d00      	cmp	r5, #0
 80150d0:	f2c0 8095 	blt.w	80151fe <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80150d4:	fb95 f4f6 	sdiv	r4, r5, r6
 80150d8:	fb06 5514 	mls	r5, r6, r4, r5
 80150dc:	6044      	str	r4, [r0, #4]
 80150de:	6085      	str	r5, [r0, #8]
 80150e0:	60c6      	str	r6, [r0, #12]
 80150e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80150e6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80150ea:	6945      	ldr	r5, [r0, #20]
 80150ec:	59d2      	ldr	r2, [r2, r7]
 80150ee:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80150f2:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8015220 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80150f6:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80150fa:	ee07 4a10 	vmov	s14, r4
 80150fe:	6804      	ldr	r4, [r0, #0]
 8015100:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8015104:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015108:	ee07 2a90 	vmov	s15, r2
 801510c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015114:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015118:	edd3 6a00 	vldr	s13, [r3]
 801511c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015120:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8015124:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015128:	edc0 6a07 	vstr	s13, [r0, #28]
 801512c:	edd0 6a01 	vldr	s13, [r0, #4]
 8015130:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8015134:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015138:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801513c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015140:	ed80 6a08 	vstr	s12, [r0, #32]
 8015144:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8015146:	6242      	str	r2, [r0, #36]	@ 0x24
 8015148:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801514c:	ed93 6a03 	vldr	s12, [r3, #12]
 8015150:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015154:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8015158:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801515c:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8015160:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8015164:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8015168:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801516c:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8015170:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8015172:	6302      	str	r2, [r0, #48]	@ 0x30
 8015174:	ed93 6a06 	vldr	s12, [r3, #24]
 8015178:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801517c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015180:	eeb0 7a46 	vmov.f32	s14, s12
 8015184:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8015188:	eea6 7a27 	vfma.f32	s14, s12, s15
 801518c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8015190:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8015194:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8015198:	eee6 7a87 	vfma.f32	s15, s13, s14
 801519c:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 80151a0:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80151a2:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80151a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151a8:	2410      	movs	r4, #16
 80151aa:	f1c5 0501 	rsb	r5, r5, #1
 80151ae:	fb9e fef4 	sdiv	lr, lr, r4
 80151b2:	f015 050f 	ands.w	r5, r5, #15
 80151b6:	bf18      	it	ne
 80151b8:	2501      	movne	r5, #1
 80151ba:	ebae 0e05 	sub.w	lr, lr, r5
 80151be:	e753      	b.n	8015068 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80151c0:	f04f 0910 	mov.w	r9, #16
 80151c4:	f1c5 0501 	rsb	r5, r5, #1
 80151c8:	fb94 f4f9 	sdiv	r4, r4, r9
 80151cc:	f015 050f 	ands.w	r5, r5, #15
 80151d0:	bf18      	it	ne
 80151d2:	2501      	movne	r5, #1
 80151d4:	1b64      	subs	r4, r4, r5
 80151d6:	e755      	b.n	8015084 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80151d8:	4264      	negs	r4, r4
 80151da:	fb94 fef6 	sdiv	lr, r4, r6
 80151de:	f1ce 0800 	rsb	r8, lr, #0
 80151e2:	fb06 441e 	mls	r4, r6, lr, r4
 80151e6:	f8c0 8000 	str.w	r8, [r0]
 80151ea:	6104      	str	r4, [r0, #16]
 80151ec:	2c00      	cmp	r4, #0
 80151ee:	f43f af6e 	beq.w	80150ce <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80151f2:	ea6f 0e0e 	mvn.w	lr, lr
 80151f6:	1b34      	subs	r4, r6, r4
 80151f8:	f8c0 e000 	str.w	lr, [r0]
 80151fc:	e766      	b.n	80150cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 80151fe:	426d      	negs	r5, r5
 8015200:	fb95 f4f6 	sdiv	r4, r5, r6
 8015204:	f1c4 0e00 	rsb	lr, r4, #0
 8015208:	fb06 5514 	mls	r5, r6, r4, r5
 801520c:	f8c0 e004 	str.w	lr, [r0, #4]
 8015210:	6085      	str	r5, [r0, #8]
 8015212:	2d00      	cmp	r5, #0
 8015214:	f43f af64 	beq.w	80150e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8015218:	43e4      	mvns	r4, r4
 801521a:	1b75      	subs	r5, r6, r5
 801521c:	6044      	str	r4, [r0, #4]
 801521e:	e75e      	b.n	80150de <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8015220:	3d800000 	.word	0x3d800000

08015224 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8015224:	4b01      	ldr	r3, [pc, #4]	@ (801522c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8015226:	6018      	str	r0, [r3, #0]
 8015228:	4770      	bx	lr
 801522a:	bf00      	nop
 801522c:	24025188 	.word	0x24025188

08015230 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8015230:	4b06      	ldr	r3, [pc, #24]	@ (801524c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8015232:	881a      	ldrh	r2, [r3, #0]
 8015234:	4282      	cmp	r2, r0
 8015236:	d807      	bhi.n	8015248 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8015238:	4b05      	ldr	r3, [pc, #20]	@ (8015250 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801523a:	881b      	ldrh	r3, [r3, #0]
 801523c:	4413      	add	r3, r2
 801523e:	4298      	cmp	r0, r3
 8015240:	bfac      	ite	ge
 8015242:	2000      	movge	r0, #0
 8015244:	2001      	movlt	r0, #1
 8015246:	4770      	bx	lr
 8015248:	2000      	movs	r0, #0
 801524a:	4770      	bx	lr
 801524c:	240251a8 	.word	0x240251a8
 8015250:	240251ac 	.word	0x240251ac

08015254 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8015254:	b508      	push	{r3, lr}
 8015256:	4601      	mov	r1, r0
 8015258:	f7ff ffea 	bl	8015230 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801525c:	b118      	cbz	r0, 8015266 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801525e:	4b02      	ldr	r3, [pc, #8]	@ (8015268 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8015266:	bd08      	pop	{r3, pc}
 8015268:	2402518c 	.word	0x2402518c

0801526c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801526c:	b538      	push	{r3, r4, r5, lr}
 801526e:	4604      	mov	r4, r0
 8015270:	f7ff ffde 	bl	8015230 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8015274:	b1d8      	cbz	r0, 80152ae <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8015276:	4b0f      	ldr	r3, [pc, #60]	@ (80152b4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 8015278:	881b      	ldrh	r3, [r3, #0]
 801527a:	1ae4      	subs	r4, r4, r3
 801527c:	230e      	movs	r3, #14
 801527e:	4363      	muls	r3, r4
 8015280:	4c0d      	ldr	r4, [pc, #52]	@ (80152b8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 8015282:	6825      	ldr	r5, [r4, #0]
 8015284:	18ea      	adds	r2, r5, r3
 8015286:	7b12      	ldrb	r2, [r2, #12]
 8015288:	f012 0220 	ands.w	r2, r2, #32
 801528c:	d010      	beq.n	80152b0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801528e:	f9b1 2000 	ldrsh.w	r2, [r1]
 8015292:	52ea      	strh	r2, [r5, r3]
 8015294:	6822      	ldr	r2, [r4, #0]
 8015296:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801529a:	441a      	add	r2, r3
 801529c:	8055      	strh	r5, [r2, #2]
 801529e:	6822      	ldr	r2, [r4, #0]
 80152a0:	4413      	add	r3, r2
 80152a2:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 80152a6:	809a      	strh	r2, [r3, #4]
 80152a8:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80152ac:	80da      	strh	r2, [r3, #6]
 80152ae:	bd38      	pop	{r3, r4, r5, pc}
 80152b0:	4610      	mov	r0, r2
 80152b2:	e7fc      	b.n	80152ae <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 80152b4:	240251a8 	.word	0x240251a8
 80152b8:	24025190 	.word	0x24025190

080152bc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 80152bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80152c0:	4606      	mov	r6, r0
 80152c2:	460c      	mov	r4, r1
 80152c4:	f7ff ffb4 	bl	8015230 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80152c8:	b918      	cbnz	r0, 80152d2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 80152ca:	2000      	movs	r0, #0
 80152cc:	b002      	add	sp, #8
 80152ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152d2:	4608      	mov	r0, r1
 80152d4:	f7f8 fa05 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80152d8:	2800      	cmp	r0, #0
 80152da:	d1f6      	bne.n	80152ca <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80152dc:	4b3f      	ldr	r3, [pc, #252]	@ (80153dc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 80152de:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 80153e0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 80152e2:	881d      	ldrh	r5, [r3, #0]
 80152e4:	f8d9 a000 	ldr.w	sl, [r9]
 80152e8:	46c8      	mov	r8, r9
 80152ea:	1b73      	subs	r3, r6, r5
 80152ec:	250e      	movs	r5, #14
 80152ee:	435d      	muls	r5, r3
 80152f0:	eb0a 0705 	add.w	r7, sl, r5
 80152f4:	7b3b      	ldrb	r3, [r7, #12]
 80152f6:	f013 0f20 	tst.w	r3, #32
 80152fa:	d0e6      	beq.n	80152ca <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80152fc:	4621      	mov	r1, r4
 80152fe:	4638      	mov	r0, r7
 8015300:	f7fc fe38 	bl	8011f74 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015304:	2800      	cmp	r0, #0
 8015306:	d1e1      	bne.n	80152cc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8015308:	4639      	mov	r1, r7
 801530a:	4620      	mov	r0, r4
 801530c:	f7fc fe32 	bl	8011f74 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015310:	b108      	cbz	r0, 8015316 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8015312:	4621      	mov	r1, r4
 8015314:	e020      	b.n	8015358 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8015316:	f9b4 2000 	ldrsh.w	r2, [r4]
 801531a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801531e:	429a      	cmp	r2, r3
 8015320:	d11e      	bne.n	8015360 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8015322:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8015326:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801532a:	429a      	cmp	r2, r3
 801532c:	d118      	bne.n	8015360 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801532e:	6820      	ldr	r0, [r4, #0]
 8015330:	466b      	mov	r3, sp
 8015332:	6861      	ldr	r1, [r4, #4]
 8015334:	c303      	stmia	r3!, {r0, r1}
 8015336:	4639      	mov	r1, r7
 8015338:	4668      	mov	r0, sp
 801533a:	f7fc fe41 	bl	8011fc0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801533e:	f8d9 3000 	ldr.w	r3, [r9]
 8015342:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015346:	442b      	add	r3, r5
 8015348:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801534c:	4413      	add	r3, r2
 801534e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8015352:	4293      	cmp	r3, r2
 8015354:	dc04      	bgt.n	8015360 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8015356:	4669      	mov	r1, sp
 8015358:	4630      	mov	r0, r6
 801535a:	f7ff ff87 	bl	801526c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801535e:	e7b5      	b.n	80152cc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8015360:	f8d8 3000 	ldr.w	r3, [r8]
 8015364:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015368:	442b      	add	r3, r5
 801536a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801536e:	4291      	cmp	r1, r2
 8015370:	d119      	bne.n	80153a6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8015372:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8015376:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801537a:	4291      	cmp	r1, r2
 801537c:	d113      	bne.n	80153a6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801537e:	6820      	ldr	r0, [r4, #0]
 8015380:	466a      	mov	r2, sp
 8015382:	6861      	ldr	r1, [r4, #4]
 8015384:	c203      	stmia	r2!, {r0, r1}
 8015386:	4619      	mov	r1, r3
 8015388:	4668      	mov	r0, sp
 801538a:	f7fc fe19 	bl	8011fc0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801538e:	f8d8 3000 	ldr.w	r3, [r8]
 8015392:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8015396:	442b      	add	r3, r5
 8015398:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801539c:	4413      	add	r3, r2
 801539e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80153a2:	4293      	cmp	r3, r2
 80153a4:	ddd7      	ble.n	8015356 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 80153a6:	4620      	mov	r0, r4
 80153a8:	f7f8 f99b 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80153ac:	b990      	cbnz	r0, 80153d4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 80153ae:	88a7      	ldrh	r7, [r4, #4]
 80153b0:	88e3      	ldrh	r3, [r4, #6]
 80153b2:	fb17 f703 	smulbb	r7, r7, r3
 80153b6:	f8d8 3000 	ldr.w	r3, [r8]
 80153ba:	441d      	add	r5, r3
 80153bc:	4628      	mov	r0, r5
 80153be:	f7f8 f990 	bl	800d6e2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80153c2:	b948      	cbnz	r0, 80153d8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 80153c4:	88ab      	ldrh	r3, [r5, #4]
 80153c6:	88ea      	ldrh	r2, [r5, #6]
 80153c8:	fb13 f302 	smulbb	r3, r3, r2
 80153cc:	42bb      	cmp	r3, r7
 80153ce:	f6bf af7c 	bge.w	80152ca <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80153d2:	e79e      	b.n	8015312 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 80153d4:	2700      	movs	r7, #0
 80153d6:	e7ee      	b.n	80153b6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 80153d8:	2300      	movs	r3, #0
 80153da:	e7f7      	b.n	80153cc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 80153dc:	240251a8 	.word	0x240251a8
 80153e0:	24025190 	.word	0x24025190

080153e4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80153e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153e6:	4c24      	ldr	r4, [pc, #144]	@ (8015478 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80153e8:	6823      	ldr	r3, [r4, #0]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d042      	beq.n	8015474 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80153ee:	4a23      	ldr	r2, [pc, #140]	@ (801547c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80153f0:	4d23      	ldr	r5, [pc, #140]	@ (8015480 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80153f2:	8811      	ldrh	r1, [r2, #0]
 80153f4:	f8b5 c000 	ldrh.w	ip, [r5]
 80153f8:	4822      	ldr	r0, [pc, #136]	@ (8015484 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80153fa:	4461      	add	r1, ip
 80153fc:	1c4a      	adds	r2, r1, #1
 80153fe:	008f      	lsls	r7, r1, #2
 8015400:	f022 0201 	bic.w	r2, r2, #1
 8015404:	19de      	adds	r6, r3, r7
 8015406:	0412      	lsls	r2, r2, #16
 8015408:	6006      	str	r6, [r0, #0]
 801540a:	4e1f      	ldr	r6, [pc, #124]	@ (8015488 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801540c:	0c12      	lsrs	r2, r2, #16
 801540e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8015412:	19da      	adds	r2, r3, r7
 8015414:	6032      	str	r2, [r6, #0]
 8015416:	220e      	movs	r2, #14
 8015418:	fb02 f20c 	mul.w	r2, r2, ip
 801541c:	3203      	adds	r2, #3
 801541e:	f022 0203 	bic.w	r2, r2, #3
 8015422:	443a      	add	r2, r7
 8015424:	4f19      	ldr	r7, [pc, #100]	@ (801548c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8015426:	4413      	add	r3, r2
 8015428:	603b      	str	r3, [r7, #0]
 801542a:	2300      	movs	r3, #0
 801542c:	4f18      	ldr	r7, [pc, #96]	@ (8015490 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801542e:	469c      	mov	ip, r3
 8015430:	803b      	strh	r3, [r7, #0]
 8015432:	4f18      	ldr	r7, [pc, #96]	@ (8015494 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8015434:	683f      	ldr	r7, [r7, #0]
 8015436:	1aba      	subs	r2, r7, r2
 8015438:	4f17      	ldr	r7, [pc, #92]	@ (8015498 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801543a:	603a      	str	r2, [r7, #0]
 801543c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8015440:	4a16      	ldr	r2, [pc, #88]	@ (801549c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8015442:	8013      	strh	r3, [r2, #0]
 8015444:	428b      	cmp	r3, r1
 8015446:	d10d      	bne.n	8015464 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8015448:	882d      	ldrh	r5, [r5, #0]
 801544a:	2300      	movs	r3, #0
 801544c:	6830      	ldr	r0, [r6, #0]
 801544e:	240e      	movs	r4, #14
 8015450:	429d      	cmp	r5, r3
 8015452:	d90f      	bls.n	8015474 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8015454:	fb04 0203 	mla	r2, r4, r3, r0
 8015458:	3301      	adds	r3, #1
 801545a:	7b11      	ldrb	r1, [r2, #12]
 801545c:	f36f 1145 	bfc	r1, #5, #1
 8015460:	7311      	strb	r1, [r2, #12]
 8015462:	e7f5      	b.n	8015450 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8015464:	6822      	ldr	r2, [r4, #0]
 8015466:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801546a:	6802      	ldr	r2, [r0, #0]
 801546c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8015470:	3301      	adds	r3, #1
 8015472:	e7e7      	b.n	8015444 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8015474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015476:	bf00      	nop
 8015478:	2402518c 	.word	0x2402518c
 801547c:	240251a8 	.word	0x240251a8
 8015480:	240251ac 	.word	0x240251ac
 8015484:	240251a0 	.word	0x240251a0
 8015488:	24025190 	.word	0x24025190
 801548c:	24025198 	.word	0x24025198
 8015490:	240251aa 	.word	0x240251aa
 8015494:	24025194 	.word	0x24025194
 8015498:	240251a4 	.word	0x240251a4
 801549c:	2402519c 	.word	0x2402519c

080154a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80154a0:	4b06      	ldr	r3, [pc, #24]	@ (80154bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	b943      	cbnz	r3, 80154b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80154a6:	b139      	cbz	r1, 80154b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80154a8:	4b05      	ldr	r3, [pc, #20]	@ (80154c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80154aa:	801a      	strh	r2, [r3, #0]
 80154ac:	4b05      	ldr	r3, [pc, #20]	@ (80154c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80154ae:	6019      	str	r1, [r3, #0]
 80154b0:	4b05      	ldr	r3, [pc, #20]	@ (80154c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80154b2:	6018      	str	r0, [r3, #0]
 80154b4:	f7ff bf96 	b.w	80153e4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80154b8:	4770      	bx	lr
 80154ba:	bf00      	nop
 80154bc:	24025198 	.word	0x24025198
 80154c0:	240251ac 	.word	0x240251ac
 80154c4:	24025194 	.word	0x24025194
 80154c8:	2402518c 	.word	0x2402518c

080154cc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80154cc:	b470      	push	{r4, r5, r6}
 80154ce:	4c07      	ldr	r4, [pc, #28]	@ (80154ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80154d0:	4605      	mov	r5, r0
 80154d2:	4610      	mov	r0, r2
 80154d4:	9a03      	ldr	r2, [sp, #12]
 80154d6:	6826      	ldr	r6, [r4, #0]
 80154d8:	b936      	cbnz	r6, 80154e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80154da:	6025      	str	r5, [r4, #0]
 80154dc:	4c04      	ldr	r4, [pc, #16]	@ (80154f0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80154de:	8021      	strh	r1, [r4, #0]
 80154e0:	4619      	mov	r1, r3
 80154e2:	bc70      	pop	{r4, r5, r6}
 80154e4:	f7ff bfdc 	b.w	80154a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80154e8:	bc70      	pop	{r4, r5, r6}
 80154ea:	4770      	bx	lr
 80154ec:	240251b0 	.word	0x240251b0
 80154f0:	240251a8 	.word	0x240251a8

080154f4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80154f4:	4a12      	ldr	r2, [pc, #72]	@ (8015540 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80154f6:	8803      	ldrh	r3, [r0, #0]
 80154f8:	8812      	ldrh	r2, [r2, #0]
 80154fa:	4293      	cmp	r3, r2
 80154fc:	d207      	bcs.n	801550e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80154fe:	4a11      	ldr	r2, [pc, #68]	@ (8015544 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8015500:	2114      	movs	r1, #20
 8015502:	6812      	ldr	r2, [r2, #0]
 8015504:	fb01 2303 	mla	r3, r1, r3, r2
 8015508:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801550c:	4770      	bx	lr
 801550e:	490e      	ldr	r1, [pc, #56]	@ (8015548 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8015510:	8809      	ldrh	r1, [r1, #0]
 8015512:	4411      	add	r1, r2
 8015514:	428b      	cmp	r3, r1
 8015516:	da04      	bge.n	8015522 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8015518:	1a9b      	subs	r3, r3, r2
 801551a:	4a0c      	ldr	r2, [pc, #48]	@ (801554c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801551c:	210e      	movs	r1, #14
 801551e:	6812      	ldr	r2, [r2, #0]
 8015520:	e7f0      	b.n	8015504 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8015522:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015526:	4293      	cmp	r3, r2
 8015528:	d108      	bne.n	801553c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801552a:	4b09      	ldr	r3, [pc, #36]	@ (8015550 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801552c:	781b      	ldrb	r3, [r3, #0]
 801552e:	b91b      	cbnz	r3, 8015538 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8015530:	4b08      	ldr	r3, [pc, #32]	@ (8015554 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8015532:	f9b3 0000 	ldrsh.w	r0, [r3]
 8015536:	4770      	bx	lr
 8015538:	4b07      	ldr	r3, [pc, #28]	@ (8015558 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801553a:	e7fa      	b.n	8015532 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801553c:	2000      	movs	r0, #0
 801553e:	4770      	bx	lr
 8015540:	240251a8 	.word	0x240251a8
 8015544:	240251b0 	.word	0x240251b0
 8015548:	240251ac 	.word	0x240251ac
 801554c:	24025190 	.word	0x24025190
 8015550:	24025118 	.word	0x24025118
 8015554:	2402511a 	.word	0x2402511a
 8015558:	2402511c 	.word	0x2402511c

0801555c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801555c:	4a12      	ldr	r2, [pc, #72]	@ (80155a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801555e:	8803      	ldrh	r3, [r0, #0]
 8015560:	8812      	ldrh	r2, [r2, #0]
 8015562:	4293      	cmp	r3, r2
 8015564:	d207      	bcs.n	8015576 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8015566:	4a11      	ldr	r2, [pc, #68]	@ (80155ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8015568:	2114      	movs	r1, #20
 801556a:	6812      	ldr	r2, [r2, #0]
 801556c:	fb01 2303 	mla	r3, r1, r3, r2
 8015570:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8015574:	4770      	bx	lr
 8015576:	490e      	ldr	r1, [pc, #56]	@ (80155b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8015578:	8809      	ldrh	r1, [r1, #0]
 801557a:	4411      	add	r1, r2
 801557c:	428b      	cmp	r3, r1
 801557e:	da04      	bge.n	801558a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8015580:	1a9b      	subs	r3, r3, r2
 8015582:	4a0c      	ldr	r2, [pc, #48]	@ (80155b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8015584:	210e      	movs	r1, #14
 8015586:	6812      	ldr	r2, [r2, #0]
 8015588:	e7f0      	b.n	801556c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801558a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801558e:	4293      	cmp	r3, r2
 8015590:	d108      	bne.n	80155a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8015592:	4b09      	ldr	r3, [pc, #36]	@ (80155b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8015594:	781b      	ldrb	r3, [r3, #0]
 8015596:	b91b      	cbnz	r3, 80155a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8015598:	4b08      	ldr	r3, [pc, #32]	@ (80155bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801559a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801559e:	4770      	bx	lr
 80155a0:	4b07      	ldr	r3, [pc, #28]	@ (80155c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80155a2:	e7fa      	b.n	801559a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80155a4:	2000      	movs	r0, #0
 80155a6:	4770      	bx	lr
 80155a8:	240251a8 	.word	0x240251a8
 80155ac:	240251b0 	.word	0x240251b0
 80155b0:	240251ac 	.word	0x240251ac
 80155b4:	24025190 	.word	0x24025190
 80155b8:	24025118 	.word	0x24025118
 80155bc:	2402511c 	.word	0x2402511c
 80155c0:	2402511a 	.word	0x2402511a

080155c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80155c4:	4a22      	ldr	r2, [pc, #136]	@ (8015650 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80155c6:	b530      	push	{r4, r5, lr}
 80155c8:	880b      	ldrh	r3, [r1, #0]
 80155ca:	8812      	ldrh	r2, [r2, #0]
 80155cc:	4293      	cmp	r3, r2
 80155ce:	d213      	bcs.n	80155f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80155d0:	4a20      	ldr	r2, [pc, #128]	@ (8015654 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80155d2:	2114      	movs	r1, #20
 80155d4:	6812      	ldr	r2, [r2, #0]
 80155d6:	fb01 2303 	mla	r3, r1, r3, r2
 80155da:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80155de:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80155e2:	8a1a      	ldrh	r2, [r3, #16]
 80155e4:	8a5b      	ldrh	r3, [r3, #18]
 80155e6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80155ea:	8004      	strh	r4, [r0, #0]
 80155ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80155f0:	8041      	strh	r1, [r0, #2]
 80155f2:	8082      	strh	r2, [r0, #4]
 80155f4:	80c3      	strh	r3, [r0, #6]
 80155f6:	e024      	b.n	8015642 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 80155f8:	4917      	ldr	r1, [pc, #92]	@ (8015658 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80155fa:	8809      	ldrh	r1, [r1, #0]
 80155fc:	4411      	add	r1, r2
 80155fe:	428b      	cmp	r3, r1
 8015600:	da10      	bge.n	8015624 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8015602:	1a9b      	subs	r3, r3, r2
 8015604:	220e      	movs	r2, #14
 8015606:	4353      	muls	r3, r2
 8015608:	4a14      	ldr	r2, [pc, #80]	@ (801565c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801560a:	6811      	ldr	r1, [r2, #0]
 801560c:	18ca      	adds	r2, r1, r3
 801560e:	5ecd      	ldrsh	r5, [r1, r3]
 8015610:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8015614:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8015618:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801561c:	8005      	strh	r5, [r0, #0]
 801561e:	8044      	strh	r4, [r0, #2]
 8015620:	8081      	strh	r1, [r0, #4]
 8015622:	e7e7      	b.n	80155f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8015624:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015628:	4293      	cmp	r3, r2
 801562a:	d10b      	bne.n	8015644 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801562c:	4b0c      	ldr	r3, [pc, #48]	@ (8015660 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801562e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015632:	4b0c      	ldr	r3, [pc, #48]	@ (8015664 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8015634:	8081      	strh	r1, [r0, #4]
 8015636:	f9b3 2000 	ldrsh.w	r2, [r3]
 801563a:	2300      	movs	r3, #0
 801563c:	80c2      	strh	r2, [r0, #6]
 801563e:	8003      	strh	r3, [r0, #0]
 8015640:	8043      	strh	r3, [r0, #2]
 8015642:	bd30      	pop	{r4, r5, pc}
 8015644:	2300      	movs	r3, #0
 8015646:	8003      	strh	r3, [r0, #0]
 8015648:	8043      	strh	r3, [r0, #2]
 801564a:	8083      	strh	r3, [r0, #4]
 801564c:	e7d2      	b.n	80155f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801564e:	bf00      	nop
 8015650:	240251a8 	.word	0x240251a8
 8015654:	240251b0 	.word	0x240251b0
 8015658:	240251ac 	.word	0x240251ac
 801565c:	24025190 	.word	0x24025190
 8015660:	24025114 	.word	0x24025114
 8015664:	24025116 	.word	0x24025116

08015668 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8015668:	4a12      	ldr	r2, [pc, #72]	@ (80156b4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801566a:	8803      	ldrh	r3, [r0, #0]
 801566c:	8811      	ldrh	r1, [r2, #0]
 801566e:	428b      	cmp	r3, r1
 8015670:	d20b      	bcs.n	801568a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8015672:	4a11      	ldr	r2, [pc, #68]	@ (80156b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8015674:	6812      	ldr	r2, [r2, #0]
 8015676:	b112      	cbz	r2, 801567e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8015678:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801567c:	b9c0      	cbnz	r0, 80156b0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801567e:	4a0f      	ldr	r2, [pc, #60]	@ (80156bc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8015680:	6811      	ldr	r1, [r2, #0]
 8015682:	2214      	movs	r2, #20
 8015684:	4353      	muls	r3, r2
 8015686:	58c8      	ldr	r0, [r1, r3]
 8015688:	4770      	bx	lr
 801568a:	4a0d      	ldr	r2, [pc, #52]	@ (80156c0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801568c:	8812      	ldrh	r2, [r2, #0]
 801568e:	440a      	add	r2, r1
 8015690:	4293      	cmp	r3, r2
 8015692:	da04      	bge.n	801569e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8015694:	4a08      	ldr	r2, [pc, #32]	@ (80156b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8015696:	6812      	ldr	r2, [r2, #0]
 8015698:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801569c:	4770      	bx	lr
 801569e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80156a2:	4293      	cmp	r3, r2
 80156a4:	d103      	bne.n	80156ae <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80156a6:	4b07      	ldr	r3, [pc, #28]	@ (80156c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80156ac:	4770      	bx	lr
 80156ae:	2000      	movs	r0, #0
 80156b0:	4770      	bx	lr
 80156b2:	bf00      	nop
 80156b4:	240251a8 	.word	0x240251a8
 80156b8:	2402518c 	.word	0x2402518c
 80156bc:	240251b0 	.word	0x240251b0
 80156c0:	240251ac 	.word	0x240251ac
 80156c4:	24025120 	.word	0x24025120

080156c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80156c8:	4b24      	ldr	r3, [pc, #144]	@ (801575c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80156ca:	8802      	ldrh	r2, [r0, #0]
 80156cc:	8818      	ldrh	r0, [r3, #0]
 80156ce:	4282      	cmp	r2, r0
 80156d0:	d221      	bcs.n	8015716 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80156d2:	4b23      	ldr	r3, [pc, #140]	@ (8015760 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80156d4:	6819      	ldr	r1, [r3, #0]
 80156d6:	2314      	movs	r3, #20
 80156d8:	fb03 1302 	mla	r3, r3, r2, r1
 80156dc:	6858      	ldr	r0, [r3, #4]
 80156de:	2800      	cmp	r0, #0
 80156e0:	d03a      	beq.n	8015758 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80156e2:	4920      	ldr	r1, [pc, #128]	@ (8015764 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80156e4:	6809      	ldr	r1, [r1, #0]
 80156e6:	2900      	cmp	r1, #0
 80156e8:	d036      	beq.n	8015758 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80156ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80156ee:	2900      	cmp	r1, #0
 80156f0:	d032      	beq.n	8015758 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80156f2:	891a      	ldrh	r2, [r3, #8]
 80156f4:	8958      	ldrh	r0, [r3, #10]
 80156f6:	4350      	muls	r0, r2
 80156f8:	7c5a      	ldrb	r2, [r3, #17]
 80156fa:	7cdb      	ldrb	r3, [r3, #19]
 80156fc:	0952      	lsrs	r2, r2, #5
 80156fe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8015702:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8015706:	2b0b      	cmp	r3, #11
 8015708:	bf18      	it	ne
 801570a:	0040      	lslne	r0, r0, #1
 801570c:	3003      	adds	r0, #3
 801570e:	f020 0003 	bic.w	r0, r0, #3
 8015712:	4408      	add	r0, r1
 8015714:	4770      	bx	lr
 8015716:	4b14      	ldr	r3, [pc, #80]	@ (8015768 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8015718:	881b      	ldrh	r3, [r3, #0]
 801571a:	4403      	add	r3, r0
 801571c:	429a      	cmp	r2, r3
 801571e:	da1a      	bge.n	8015756 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8015720:	4b12      	ldr	r3, [pc, #72]	@ (801576c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8015722:	1a10      	subs	r0, r2, r0
 8015724:	210e      	movs	r1, #14
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	fb01 3000 	mla	r0, r1, r0, r3
 801572c:	7b03      	ldrb	r3, [r0, #12]
 801572e:	f003 031f 	and.w	r3, r3, #31
 8015732:	2b0b      	cmp	r3, #11
 8015734:	d10b      	bne.n	801574e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8015736:	8903      	ldrh	r3, [r0, #8]
 8015738:	8940      	ldrh	r0, [r0, #10]
 801573a:	4358      	muls	r0, r3
 801573c:	4b09      	ldr	r3, [pc, #36]	@ (8015764 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801573e:	3003      	adds	r0, #3
 8015740:	6819      	ldr	r1, [r3, #0]
 8015742:	f020 0303 	bic.w	r3, r0, #3
 8015746:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801574a:	4418      	add	r0, r3
 801574c:	4770      	bx	lr
 801574e:	2b0d      	cmp	r3, #13
 8015750:	d101      	bne.n	8015756 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8015752:	300d      	adds	r0, #13
 8015754:	4770      	bx	lr
 8015756:	2000      	movs	r0, #0
 8015758:	4770      	bx	lr
 801575a:	bf00      	nop
 801575c:	240251a8 	.word	0x240251a8
 8015760:	240251b0 	.word	0x240251b0
 8015764:	2402518c 	.word	0x2402518c
 8015768:	240251ac 	.word	0x240251ac
 801576c:	24025190 	.word	0x24025190

08015770 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8015770:	4b1f      	ldr	r3, [pc, #124]	@ (80157f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 8015772:	b510      	push	{r4, lr}
 8015774:	8802      	ldrh	r2, [r0, #0]
 8015776:	881b      	ldrh	r3, [r3, #0]
 8015778:	429a      	cmp	r2, r3
 801577a:	d21a      	bcs.n	80157b2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801577c:	4b1d      	ldr	r3, [pc, #116]	@ (80157f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801577e:	2114      	movs	r1, #20
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	fb01 3102 	mla	r1, r1, r2, r3
 8015786:	7c4b      	ldrb	r3, [r1, #17]
 8015788:	0958      	lsrs	r0, r3, #5
 801578a:	7ccb      	ldrb	r3, [r1, #19]
 801578c:	491a      	ldr	r1, [pc, #104]	@ (80157f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801578e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8015792:	6809      	ldr	r1, [r1, #0]
 8015794:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8015798:	b2d8      	uxtb	r0, r3
 801579a:	b149      	cbz	r1, 80157b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801579c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80157a0:	b132      	cbz	r2, 80157b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80157a2:	2b0e      	cmp	r3, #14
 80157a4:	d021      	beq.n	80157ea <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 80157a6:	280f      	cmp	r0, #15
 80157a8:	d01d      	beq.n	80157e6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 80157aa:	2810      	cmp	r0, #16
 80157ac:	bf08      	it	eq
 80157ae:	2002      	moveq	r0, #2
 80157b0:	bd10      	pop	{r4, pc}
 80157b2:	4912      	ldr	r1, [pc, #72]	@ (80157fc <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 80157b4:	8809      	ldrh	r1, [r1, #0]
 80157b6:	4419      	add	r1, r3
 80157b8:	428a      	cmp	r2, r1
 80157ba:	da09      	bge.n	80157d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 80157bc:	1ad3      	subs	r3, r2, r3
 80157be:	4a10      	ldr	r2, [pc, #64]	@ (8015800 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 80157c0:	210e      	movs	r1, #14
 80157c2:	6812      	ldr	r2, [r2, #0]
 80157c4:	fb01 2303 	mla	r3, r1, r3, r2
 80157c8:	7b18      	ldrb	r0, [r3, #12]
 80157ca:	f000 001f 	and.w	r0, r0, #31
 80157ce:	e7ef      	b.n	80157b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80157d0:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80157d4:	429a      	cmp	r2, r3
 80157d6:	d108      	bne.n	80157ea <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 80157d8:	f7ee fa4a 	bl	8003c70 <_ZN8touchgfx3HAL3lcdEv>
 80157dc:	6803      	ldr	r3, [r0, #0]
 80157de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157e4:	4718      	bx	r3
 80157e6:	2001      	movs	r0, #1
 80157e8:	e7e2      	b.n	80157b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80157ea:	2000      	movs	r0, #0
 80157ec:	e7e0      	b.n	80157b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80157ee:	bf00      	nop
 80157f0:	240251a8 	.word	0x240251a8
 80157f4:	240251b0 	.word	0x240251b0
 80157f8:	2402518c 	.word	0x2402518c
 80157fc:	240251ac 	.word	0x240251ac
 8015800:	24025190 	.word	0x24025190

08015804 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8015804:	2018      	movs	r0, #24
 8015806:	4770      	bx	lr

08015808 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8015808:	2001      	movs	r0, #1
 801580a:	4770      	bx	lr

0801580c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801580c:	4b02      	ldr	r3, [pc, #8]	@ (8015818 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801580e:	8818      	ldrh	r0, [r3, #0]
 8015810:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015814:	b280      	uxth	r0, r0
 8015816:	4770      	bx	lr
 8015818:	2402511a 	.word	0x2402511a

0801581c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801581c:	2bff      	cmp	r3, #255	@ 0xff
 801581e:	d04c      	beq.n	80158ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8015820:	2a2c      	cmp	r2, #44	@ 0x2c
 8015822:	d030      	beq.n	8015886 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 8015824:	d80f      	bhi.n	8015846 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8015826:	2a08      	cmp	r2, #8
 8015828:	d043      	beq.n	80158b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801582a:	d805      	bhi.n	8015838 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801582c:	2a04      	cmp	r2, #4
 801582e:	d03e      	beq.n	80158ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8015830:	2a05      	cmp	r2, #5
 8015832:	d03a      	beq.n	80158aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8015834:	2300      	movs	r3, #0
 8015836:	e024      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015838:	2a0a      	cmp	r2, #10
 801583a:	d03a      	beq.n	80158b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801583c:	d301      	bcc.n	8015842 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801583e:	2a0b      	cmp	r2, #11
 8015840:	d1f8      	bne.n	8015834 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015842:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8015844:	e01d      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015846:	2a30      	cmp	r2, #48	@ 0x30
 8015848:	d035      	beq.n	80158b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801584a:	d80a      	bhi.n	8015862 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 801584c:	2a2e      	cmp	r2, #46	@ 0x2e
 801584e:	684b      	ldr	r3, [r1, #4]
 8015850:	d023      	beq.n	801589a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015852:	d90d      	bls.n	8015870 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 8015854:	781a      	ldrb	r2, [r3, #0]
 8015856:	785b      	ldrb	r3, [r3, #1]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d1eb      	bne.n	8015834 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801585c:	b98a      	cbnz	r2, 8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801585e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015860:	e00f      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015862:	2a32      	cmp	r2, #50	@ 0x32
 8015864:	d027      	beq.n	80158b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8015866:	d301      	bcc.n	801586c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8015868:	2a33      	cmp	r2, #51	@ 0x33
 801586a:	d1e3      	bne.n	8015834 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801586c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801586e:	e008      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015870:	781a      	ldrb	r2, [r3, #0]
 8015872:	785b      	ldrb	r3, [r3, #1]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d1dd      	bne.n	8015834 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015878:	2a00      	cmp	r2, #0
 801587a:	d0f0      	beq.n	801585e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801587c:	2a01      	cmp	r2, #1
 801587e:	d1d9      	bne.n	8015834 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015880:	6943      	ldr	r3, [r0, #20]
 8015882:	4618      	mov	r0, r3
 8015884:	4770      	bx	lr
 8015886:	684b      	ldr	r3, [r1, #4]
 8015888:	781a      	ldrb	r2, [r3, #0]
 801588a:	785b      	ldrb	r3, [r3, #1]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d1d1      	bne.n	8015834 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015890:	b14a      	cbz	r2, 80158a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8015892:	2a01      	cmp	r2, #1
 8015894:	bf08      	it	eq
 8015896:	68c3      	ldreq	r3, [r0, #12]
 8015898:	e7f3      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801589a:	781a      	ldrb	r2, [r3, #0]
 801589c:	785b      	ldrb	r3, [r3, #1]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d1c8      	bne.n	8015834 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80158a2:	2a00      	cmp	r2, #0
 80158a4:	d1ed      	bne.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80158a6:	69c3      	ldr	r3, [r0, #28]
 80158a8:	e7eb      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80158aa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80158ac:	e7e9      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80158ae:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80158b0:	e7e7      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80158b2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80158b4:	e7e5      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80158b6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80158b8:	e7e3      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80158ba:	2a2c      	cmp	r2, #44	@ 0x2c
 80158bc:	d030      	beq.n	8015920 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 80158be:	d80f      	bhi.n	80158e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 80158c0:	2a08      	cmp	r2, #8
 80158c2:	d042      	beq.n	801594a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 80158c4:	d805      	bhi.n	80158d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 80158c6:	2a04      	cmp	r2, #4
 80158c8:	d03d      	beq.n	8015946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 80158ca:	2a05      	cmp	r2, #5
 80158cc:	d1b2      	bne.n	8015834 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80158ce:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80158d0:	e7d7      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80158d2:	2a0a      	cmp	r2, #10
 80158d4:	d039      	beq.n	801594a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 80158d6:	d301      	bcc.n	80158dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 80158d8:	2a0b      	cmp	r2, #11
 80158da:	d1ab      	bne.n	8015834 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80158dc:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80158de:	e7d0      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80158e0:	2a30      	cmp	r2, #48	@ 0x30
 80158e2:	d034      	beq.n	801594e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80158e4:	d80b      	bhi.n	80158fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 80158e6:	2a2e      	cmp	r2, #46	@ 0x2e
 80158e8:	684b      	ldr	r3, [r1, #4]
 80158ea:	d023      	beq.n	8015934 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 80158ec:	d90e      	bls.n	801590c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 80158ee:	781a      	ldrb	r2, [r3, #0]
 80158f0:	785b      	ldrb	r3, [r3, #1]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d19e      	bne.n	8015834 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80158f6:	2a00      	cmp	r2, #0
 80158f8:	d1c3      	bne.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80158fa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80158fc:	e7c1      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80158fe:	2a32      	cmp	r2, #50	@ 0x32
 8015900:	d025      	beq.n	801594e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8015902:	d301      	bcc.n	8015908 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8015904:	2a33      	cmp	r2, #51	@ 0x33
 8015906:	d195      	bne.n	8015834 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015908:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801590a:	e7ba      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801590c:	781a      	ldrb	r2, [r3, #0]
 801590e:	785b      	ldrb	r3, [r3, #1]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d18f      	bne.n	8015834 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015914:	2a00      	cmp	r2, #0
 8015916:	d0f0      	beq.n	80158fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 8015918:	2a01      	cmp	r2, #1
 801591a:	d18b      	bne.n	8015834 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801591c:	6983      	ldr	r3, [r0, #24]
 801591e:	e7b0      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015920:	684b      	ldr	r3, [r1, #4]
 8015922:	781a      	ldrb	r2, [r3, #0]
 8015924:	785b      	ldrb	r3, [r3, #1]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d184      	bne.n	8015834 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801592a:	b152      	cbz	r2, 8015942 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801592c:	2a01      	cmp	r2, #1
 801592e:	bf08      	it	eq
 8015930:	6903      	ldreq	r3, [r0, #16]
 8015932:	e7a6      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015934:	781a      	ldrb	r2, [r3, #0]
 8015936:	785b      	ldrb	r3, [r3, #1]
 8015938:	2b00      	cmp	r3, #0
 801593a:	f47f af7b 	bne.w	8015834 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801593e:	2a00      	cmp	r2, #0
 8015940:	d19f      	bne.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015942:	6a03      	ldr	r3, [r0, #32]
 8015944:	e79d      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015946:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015948:	e79b      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801594a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801594c:	e799      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801594e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8015950:	e797      	b.n	8015882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

08015952 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015952:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015956:	b085      	sub	sp, #20
 8015958:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801595a:	9203      	str	r2, [sp, #12]
 801595c:	6870      	ldr	r0, [r6, #4]
 801595e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8015962:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8015966:	9101      	str	r1, [sp, #4]
 8015968:	fa1f f885 	uxth.w	r8, r5
 801596c:	43ed      	mvns	r5, r5
 801596e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8015972:	b2ed      	uxtb	r5, r5
 8015974:	fb00 2404 	mla	r4, r0, r4, r2
 8015978:	6832      	ldr	r2, [r6, #0]
 801597a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801597e:	4414      	add	r4, r2
 8015980:	f8dc 2000 	ldr.w	r2, [ip]
 8015984:	9202      	str	r2, [sp, #8]
 8015986:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801598a:	f102 0e04 	add.w	lr, r2, #4
 801598e:	9a01      	ldr	r2, [sp, #4]
 8015990:	2a00      	cmp	r2, #0
 8015992:	dc03      	bgt.n	801599c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015994:	9a03      	ldr	r2, [sp, #12]
 8015996:	2a00      	cmp	r2, #0
 8015998:	f340 8116 	ble.w	8015bc8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801599c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801599e:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80159a2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80159a6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80159a8:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80159ac:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	dd0e      	ble.n	80159d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80159b4:	1406      	asrs	r6, r0, #16
 80159b6:	d405      	bmi.n	80159c4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80159b8:	4556      	cmp	r6, sl
 80159ba:	da03      	bge.n	80159c4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80159bc:	1416      	asrs	r6, r2, #16
 80159be:	d401      	bmi.n	80159c4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80159c0:	454e      	cmp	r6, r9
 80159c2:	db07      	blt.n	80159d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80159c4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80159c6:	3b01      	subs	r3, #1
 80159c8:	3403      	adds	r4, #3
 80159ca:	4430      	add	r0, r6
 80159cc:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80159ce:	4432      	add	r2, r6
 80159d0:	e7ee      	b.n	80159b0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80159d2:	d063      	beq.n	8015a9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80159d4:	1e5e      	subs	r6, r3, #1
 80159d6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80159d8:	fb07 0706 	mla	r7, r7, r6, r0
 80159dc:	143f      	asrs	r7, r7, #16
 80159de:	d454      	bmi.n	8015a8a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80159e0:	4557      	cmp	r7, sl
 80159e2:	da52      	bge.n	8015a8a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80159e4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80159e6:	fb07 2606 	mla	r6, r7, r6, r2
 80159ea:	1436      	asrs	r6, r6, #16
 80159ec:	d44d      	bmi.n	8015a8a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80159ee:	454e      	cmp	r6, r9
 80159f0:	da4b      	bge.n	8015a8a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80159f2:	1ce6      	adds	r6, r4, #3
 80159f4:	4699      	mov	r9, r3
 80159f6:	f1b9 0f00 	cmp.w	r9, #0
 80159fa:	f106 0603 	add.w	r6, r6, #3
 80159fe:	dd48      	ble.n	8015a92 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8015a00:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8015a04:	1417      	asrs	r7, r2, #16
 8015a06:	9902      	ldr	r1, [sp, #8]
 8015a08:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8015a0c:	f109 39ff 	add.w	r9, r9, #4294967295
 8015a10:	fb0b 1707 	mla	r7, fp, r7, r1
 8015a14:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8015a18:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015a1a:	f817 700a 	ldrb.w	r7, [r7, sl]
 8015a1e:	fb1b fb05 	smulbb	fp, fp, r5
 8015a22:	4408      	add	r0, r1
 8015a24:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015a26:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015a2a:	440a      	add	r2, r1
 8015a2c:	eb0e 0a07 	add.w	sl, lr, r7
 8015a30:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8015a34:	fb07 b708 	mla	r7, r7, r8, fp
 8015a38:	b2bf      	uxth	r7, r7
 8015a3a:	f107 0b01 	add.w	fp, r7, #1
 8015a3e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015a42:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8015a46:	fb1b fb05 	smulbb	fp, fp, r5
 8015a4a:	123f      	asrs	r7, r7, #8
 8015a4c:	f806 7c06 	strb.w	r7, [r6, #-6]
 8015a50:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8015a54:	fb07 b708 	mla	r7, r7, r8, fp
 8015a58:	b2bf      	uxth	r7, r7
 8015a5a:	f107 0b01 	add.w	fp, r7, #1
 8015a5e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015a62:	123f      	asrs	r7, r7, #8
 8015a64:	f806 7c05 	strb.w	r7, [r6, #-5]
 8015a68:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8015a6c:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8015a70:	fb1a fa05 	smulbb	sl, sl, r5
 8015a74:	fb07 a708 	mla	r7, r7, r8, sl
 8015a78:	b2bf      	uxth	r7, r7
 8015a7a:	f107 0a01 	add.w	sl, r7, #1
 8015a7e:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8015a82:	123f      	asrs	r7, r7, #8
 8015a84:	f806 7c04 	strb.w	r7, [r6, #-4]
 8015a88:	e7b5      	b.n	80159f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8015a8a:	2700      	movs	r7, #0
 8015a8c:	1bde      	subs	r6, r3, r7
 8015a8e:	2e00      	cmp	r6, #0
 8015a90:	dc42      	bgt.n	8015b18 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8015a92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015a96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015a9a:	441c      	add	r4, r3
 8015a9c:	9b01      	ldr	r3, [sp, #4]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	f340 8092 	ble.w	8015bc8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015aa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015aa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015aaa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015aae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015ab2:	eef0 6a62 	vmov.f32	s13, s5
 8015ab6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015aba:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015abe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015ac2:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 8015ac6:	eef0 6a43 	vmov.f32	s13, s6
 8015aca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015ace:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 8015ad2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015ad6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015ada:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015ade:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015ae2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015ae6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015aea:	ee12 2a90 	vmov	r2, s5
 8015aee:	eef0 2a47 	vmov.f32	s5, s14
 8015af2:	fb92 f3f3 	sdiv	r3, r2, r3
 8015af6:	ee13 2a10 	vmov	r2, s6
 8015afa:	9311      	str	r3, [sp, #68]	@ 0x44
 8015afc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015afe:	eeb0 3a67 	vmov.f32	s6, s15
 8015b02:	fb92 f3f3 	sdiv	r3, r2, r3
 8015b06:	9312      	str	r3, [sp, #72]	@ 0x48
 8015b08:	9b01      	ldr	r3, [sp, #4]
 8015b0a:	9a03      	ldr	r2, [sp, #12]
 8015b0c:	3b01      	subs	r3, #1
 8015b0e:	9301      	str	r3, [sp, #4]
 8015b10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b12:	bf08      	it	eq
 8015b14:	4613      	moveq	r3, r2
 8015b16:	e73a      	b.n	801598e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015b18:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8015b1c:	d44e      	bmi.n	8015bbc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015b1e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015b22:	4556      	cmp	r6, sl
 8015b24:	dd4a      	ble.n	8015bbc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015b26:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8015b2a:	d447      	bmi.n	8015bbc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015b2c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8015b30:	4559      	cmp	r1, fp
 8015b32:	dd43      	ble.n	8015bbc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015b34:	fa0f f986 	sxth.w	r9, r6
 8015b38:	9902      	ldr	r1, [sp, #8]
 8015b3a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015b3e:	fb0b 1909 	mla	r9, fp, r9, r1
 8015b42:	f814 b006 	ldrb.w	fp, [r4, r6]
 8015b46:	f819 900a 	ldrb.w	r9, [r9, sl]
 8015b4a:	fb1b fb05 	smulbb	fp, fp, r5
 8015b4e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015b52:	eb0e 0a09 	add.w	sl, lr, r9
 8015b56:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8015b5a:	fb09 b908 	mla	r9, r9, r8, fp
 8015b5e:	fa1f f989 	uxth.w	r9, r9
 8015b62:	f109 0b01 	add.w	fp, r9, #1
 8015b66:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015b6a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015b6e:	f804 9006 	strb.w	r9, [r4, r6]
 8015b72:	4426      	add	r6, r4
 8015b74:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015b78:	f896 b001 	ldrb.w	fp, [r6, #1]
 8015b7c:	fb1b fb05 	smulbb	fp, fp, r5
 8015b80:	fb09 b908 	mla	r9, r9, r8, fp
 8015b84:	fa1f f989 	uxth.w	r9, r9
 8015b88:	f109 0b01 	add.w	fp, r9, #1
 8015b8c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015b90:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015b94:	f886 9001 	strb.w	r9, [r6, #1]
 8015b98:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015b9c:	f896 a002 	ldrb.w	sl, [r6, #2]
 8015ba0:	fb1a fa05 	smulbb	sl, sl, r5
 8015ba4:	fb09 a908 	mla	r9, r9, r8, sl
 8015ba8:	fa1f f989 	uxth.w	r9, r9
 8015bac:	f109 0a01 	add.w	sl, r9, #1
 8015bb0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8015bb4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015bb8:	f886 9002 	strb.w	r9, [r6, #2]
 8015bbc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015bbe:	3701      	adds	r7, #1
 8015bc0:	4408      	add	r0, r1
 8015bc2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015bc4:	440a      	add	r2, r1
 8015bc6:	e761      	b.n	8015a8c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8015bc8:	b005      	add	sp, #20
 8015bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015bce <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015bce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bd2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8015bd4:	4693      	mov	fp, r2
 8015bd6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8015bd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015bdc:	6868      	ldr	r0, [r5, #4]
 8015bde:	6877      	ldr	r7, [r6, #4]
 8015be0:	9100      	str	r1, [sp, #0]
 8015be2:	3704      	adds	r7, #4
 8015be4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8015be8:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 8015bec:	fb00 2404 	mla	r4, r0, r4, r2
 8015bf0:	682a      	ldr	r2, [r5, #0]
 8015bf2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015bf6:	4414      	add	r4, r2
 8015bf8:	6832      	ldr	r2, [r6, #0]
 8015bfa:	9201      	str	r2, [sp, #4]
 8015bfc:	9a00      	ldr	r2, [sp, #0]
 8015bfe:	2a00      	cmp	r2, #0
 8015c00:	dc03      	bgt.n	8015c0a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015c02:	f1bb 0f00 	cmp.w	fp, #0
 8015c06:	f340 80bc 	ble.w	8015d82 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015c0a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015c0c:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8015c10:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8015c14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015c16:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8015c1a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	dd0c      	ble.n	8015c3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015c22:	1405      	asrs	r5, r0, #16
 8015c24:	d405      	bmi.n	8015c32 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015c26:	4555      	cmp	r5, sl
 8015c28:	da03      	bge.n	8015c32 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015c2a:	1415      	asrs	r5, r2, #16
 8015c2c:	d401      	bmi.n	8015c32 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015c2e:	454d      	cmp	r5, r9
 8015c30:	db05      	blt.n	8015c3e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015c32:	4440      	add	r0, r8
 8015c34:	4472      	add	r2, lr
 8015c36:	3b01      	subs	r3, #1
 8015c38:	3403      	adds	r4, #3
 8015c3a:	e7f0      	b.n	8015c1e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8015c3c:	d03f      	beq.n	8015cbe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8015c3e:	1e5d      	subs	r5, r3, #1
 8015c40:	fb08 0c05 	mla	ip, r8, r5, r0
 8015c44:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8015c48:	d42e      	bmi.n	8015ca8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015c4a:	45d4      	cmp	ip, sl
 8015c4c:	da2c      	bge.n	8015ca8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015c4e:	fb0e 2505 	mla	r5, lr, r5, r2
 8015c52:	142d      	asrs	r5, r5, #16
 8015c54:	d428      	bmi.n	8015ca8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015c56:	454d      	cmp	r5, r9
 8015c58:	da26      	bge.n	8015ca8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015c5a:	1ce5      	adds	r5, r4, #3
 8015c5c:	469c      	mov	ip, r3
 8015c5e:	f1bc 0f00 	cmp.w	ip, #0
 8015c62:	f105 0503 	add.w	r5, r5, #3
 8015c66:	dd25      	ble.n	8015cb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8015c68:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8015c6c:	ea4f 4922 	mov.w	r9, r2, asr #16
 8015c70:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015c74:	4472      	add	r2, lr
 8015c76:	468a      	mov	sl, r1
 8015c78:	9901      	ldr	r1, [sp, #4]
 8015c7a:	fb0a 1909 	mla	r9, sl, r9, r1
 8015c7e:	1401      	asrs	r1, r0, #16
 8015c80:	4440      	add	r0, r8
 8015c82:	f819 9001 	ldrb.w	r9, [r9, r1]
 8015c86:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015c8a:	eb07 0a09 	add.w	sl, r7, r9
 8015c8e:	f817 9009 	ldrb.w	r9, [r7, r9]
 8015c92:	f805 9c06 	strb.w	r9, [r5, #-6]
 8015c96:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015c9a:	f805 9c05 	strb.w	r9, [r5, #-5]
 8015c9e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015ca2:	f805 9c04 	strb.w	r9, [r5, #-4]
 8015ca6:	e7da      	b.n	8015c5e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015ca8:	2500      	movs	r5, #0
 8015caa:	eba3 0c05 	sub.w	ip, r3, r5
 8015cae:	f1bc 0f00 	cmp.w	ip, #0
 8015cb2:	dc3b      	bgt.n	8015d2c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8015cb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015cb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015cbc:	441c      	add	r4, r3
 8015cbe:	9b00      	ldr	r3, [sp, #0]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	dd5e      	ble.n	8015d82 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015cc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015cc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015cca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015cce:	eeb0 6a62 	vmov.f32	s12, s5
 8015cd2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015cd6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015cda:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015cde:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8015ce2:	eeb0 6a43 	vmov.f32	s12, s6
 8015ce6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015cea:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8015cee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015cf2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015cf6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015cfa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015cfe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015d02:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015d06:	ee12 2a90 	vmov	r2, s5
 8015d0a:	eef0 2a47 	vmov.f32	s5, s14
 8015d0e:	fb92 f8f3 	sdiv	r8, r2, r3
 8015d12:	ee13 2a10 	vmov	r2, s6
 8015d16:	eeb0 3a67 	vmov.f32	s6, s15
 8015d1a:	fb92 fef3 	sdiv	lr, r2, r3
 8015d1e:	9b00      	ldr	r3, [sp, #0]
 8015d20:	3b01      	subs	r3, #1
 8015d22:	9300      	str	r3, [sp, #0]
 8015d24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d26:	bf08      	it	eq
 8015d28:	465b      	moveq	r3, fp
 8015d2a:	e767      	b.n	8015bfc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8015d2c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015d30:	d423      	bmi.n	8015d7a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015d32:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8015d36:	45cc      	cmp	ip, r9
 8015d38:	dd1f      	ble.n	8015d7a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015d3a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8015d3e:	d41c      	bmi.n	8015d7a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015d40:	68f1      	ldr	r1, [r6, #12]
 8015d42:	4551      	cmp	r1, sl
 8015d44:	dd19      	ble.n	8015d7a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015d46:	fa0f fc8c 	sxth.w	ip, ip
 8015d4a:	9901      	ldr	r1, [sp, #4]
 8015d4c:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8015d50:	f81c c009 	ldrb.w	ip, [ip, r9]
 8015d54:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8015d58:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8015d5c:	eb07 090c 	add.w	r9, r7, ip
 8015d60:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8015d64:	f804 a00c 	strb.w	sl, [r4, ip]
 8015d68:	44a4      	add	ip, r4
 8015d6a:	f899 a001 	ldrb.w	sl, [r9, #1]
 8015d6e:	f88c a001 	strb.w	sl, [ip, #1]
 8015d72:	f899 9002 	ldrb.w	r9, [r9, #2]
 8015d76:	f88c 9002 	strb.w	r9, [ip, #2]
 8015d7a:	4440      	add	r0, r8
 8015d7c:	4472      	add	r2, lr
 8015d7e:	3501      	adds	r5, #1
 8015d80:	e793      	b.n	8015caa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8015d82:	b003      	add	sp, #12
 8015d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d88 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d8c:	b085      	sub	sp, #20
 8015d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015d92:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8015d94:	9202      	str	r2, [sp, #8]
 8015d96:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8015d9a:	6860      	ldr	r0, [r4, #4]
 8015d9c:	9203      	str	r2, [sp, #12]
 8015d9e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8015da2:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8015da6:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8015daa:	fb00 2505 	mla	r5, r0, r5, r2
 8015dae:	6822      	ldr	r2, [r4, #0]
 8015db0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015db4:	4415      	add	r5, r2
 8015db6:	f8dc 2000 	ldr.w	r2, [ip]
 8015dba:	9200      	str	r2, [sp, #0]
 8015dbc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015dc0:	3204      	adds	r2, #4
 8015dc2:	9201      	str	r2, [sp, #4]
 8015dc4:	2900      	cmp	r1, #0
 8015dc6:	dc03      	bgt.n	8015dd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015dc8:	9a02      	ldr	r2, [sp, #8]
 8015dca:	2a00      	cmp	r2, #0
 8015dcc:	f340 8127 	ble.w	801601e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8015dd0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015dd2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015dd6:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8015dda:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015ddc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015de0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	dd0d      	ble.n	8015e04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015de8:	1422      	asrs	r2, r4, #16
 8015dea:	d405      	bmi.n	8015df8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015dec:	4542      	cmp	r2, r8
 8015dee:	da03      	bge.n	8015df8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015df0:	1402      	asrs	r2, r0, #16
 8015df2:	d401      	bmi.n	8015df8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015df4:	42ba      	cmp	r2, r7
 8015df6:	db06      	blt.n	8015e06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015df8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015dfa:	4474      	add	r4, lr
 8015dfc:	3b01      	subs	r3, #1
 8015dfe:	3503      	adds	r5, #3
 8015e00:	4410      	add	r0, r2
 8015e02:	e7ef      	b.n	8015de4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015e04:	d075      	beq.n	8015ef2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8015e06:	1e5a      	subs	r2, r3, #1
 8015e08:	fb0e 4602 	mla	r6, lr, r2, r4
 8015e0c:	1436      	asrs	r6, r6, #16
 8015e0e:	d465      	bmi.n	8015edc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015e10:	4546      	cmp	r6, r8
 8015e12:	da63      	bge.n	8015edc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015e14:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8015e16:	fb06 0202 	mla	r2, r6, r2, r0
 8015e1a:	1412      	asrs	r2, r2, #16
 8015e1c:	d45e      	bmi.n	8015edc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015e1e:	42ba      	cmp	r2, r7
 8015e20:	da5c      	bge.n	8015edc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015e22:	1cef      	adds	r7, r5, #3
 8015e24:	4699      	mov	r9, r3
 8015e26:	f1b9 0f00 	cmp.w	r9, #0
 8015e2a:	dd5d      	ble.n	8015ee8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8015e2c:	1402      	asrs	r2, r0, #16
 8015e2e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015e32:	1426      	asrs	r6, r4, #16
 8015e34:	4692      	mov	sl, r2
 8015e36:	9a00      	ldr	r2, [sp, #0]
 8015e38:	fb08 220a 	mla	r2, r8, sl, r2
 8015e3c:	5d92      	ldrb	r2, [r2, r6]
 8015e3e:	9e01      	ldr	r6, [sp, #4]
 8015e40:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8015e44:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8015e48:	d041      	beq.n	8015ece <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8015e4a:	9a03      	ldr	r2, [sp, #12]
 8015e4c:	fa5f fb86 	uxtb.w	fp, r6
 8015e50:	fb02 f808 	mul.w	r8, r2, r8
 8015e54:	f108 0201 	add.w	r2, r8, #1
 8015e58:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8015e5c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8015e60:	1212      	asrs	r2, r2, #8
 8015e62:	fa1f fa82 	uxth.w	sl, r2
 8015e66:	43d2      	mvns	r2, r2
 8015e68:	fb1b fb0a 	smulbb	fp, fp, sl
 8015e6c:	b2d2      	uxtb	r2, r2
 8015e6e:	fb08 b802 	mla	r8, r8, r2, fp
 8015e72:	fa1f f888 	uxth.w	r8, r8
 8015e76:	f108 0b01 	add.w	fp, r8, #1
 8015e7a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015e7e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8015e82:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8015e86:	fb1b fb0a 	smulbb	fp, fp, sl
 8015e8a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015e8e:	fb16 fa0a 	smulbb	sl, r6, sl
 8015e92:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8015e96:	f807 8c03 	strb.w	r8, [r7, #-3]
 8015e9a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8015e9e:	fb06 aa02 	mla	sl, r6, r2, sl
 8015ea2:	fb08 b802 	mla	r8, r8, r2, fp
 8015ea6:	fa1f fa8a 	uxth.w	sl, sl
 8015eaa:	fa1f f888 	uxth.w	r8, r8
 8015eae:	f10a 0601 	add.w	r6, sl, #1
 8015eb2:	f108 0b01 	add.w	fp, r8, #1
 8015eb6:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8015eba:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015ebe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015ec2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015ec6:	f807 ac01 	strb.w	sl, [r7, #-1]
 8015eca:	f807 8c02 	strb.w	r8, [r7, #-2]
 8015ece:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015ed0:	4474      	add	r4, lr
 8015ed2:	3703      	adds	r7, #3
 8015ed4:	f109 39ff 	add.w	r9, r9, #4294967295
 8015ed8:	4410      	add	r0, r2
 8015eda:	e7a4      	b.n	8015e26 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8015edc:	f04f 0800 	mov.w	r8, #0
 8015ee0:	eba3 0208 	sub.w	r2, r3, r8
 8015ee4:	2a00      	cmp	r2, #0
 8015ee6:	dc3b      	bgt.n	8015f60 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8015ee8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015eec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015ef0:	441d      	add	r5, r3
 8015ef2:	2900      	cmp	r1, #0
 8015ef4:	f340 8093 	ble.w	801601e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8015ef8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015efc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015efe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015f02:	3901      	subs	r1, #1
 8015f04:	eeb0 6a62 	vmov.f32	s12, s5
 8015f08:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015f0c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015f10:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015f14:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8015f18:	eeb0 6a43 	vmov.f32	s12, s6
 8015f1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015f20:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8015f24:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015f28:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015f2c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015f30:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015f34:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015f38:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015f3c:	ee12 2a90 	vmov	r2, s5
 8015f40:	eef0 2a47 	vmov.f32	s5, s14
 8015f44:	fb92 fef3 	sdiv	lr, r2, r3
 8015f48:	ee13 2a10 	vmov	r2, s6
 8015f4c:	eeb0 3a67 	vmov.f32	s6, s15
 8015f50:	fb92 f3f3 	sdiv	r3, r2, r3
 8015f54:	9a02      	ldr	r2, [sp, #8]
 8015f56:	9312      	str	r3, [sp, #72]	@ 0x48
 8015f58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f5a:	bf08      	it	eq
 8015f5c:	4613      	moveq	r3, r2
 8015f5e:	e731      	b.n	8015dc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015f60:	1427      	asrs	r7, r4, #16
 8015f62:	d456      	bmi.n	8016012 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015f64:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015f68:	42be      	cmp	r6, r7
 8015f6a:	dd52      	ble.n	8016012 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015f6c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015f70:	d44f      	bmi.n	8016012 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015f72:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8015f76:	454a      	cmp	r2, r9
 8015f78:	dd4b      	ble.n	8016012 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015f7a:	9a00      	ldr	r2, [sp, #0]
 8015f7c:	b236      	sxth	r6, r6
 8015f7e:	fb09 2606 	mla	r6, r9, r6, r2
 8015f82:	5df2      	ldrb	r2, [r6, r7]
 8015f84:	9e01      	ldr	r6, [sp, #4]
 8015f86:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8015f8a:	0e3a      	lsrs	r2, r7, #24
 8015f8c:	d041      	beq.n	8016012 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015f8e:	9e03      	ldr	r6, [sp, #12]
 8015f90:	fa5f fb87 	uxtb.w	fp, r7
 8015f94:	4372      	muls	r2, r6
 8015f96:	1c56      	adds	r6, r2, #1
 8015f98:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8015f9c:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8015fa0:	1212      	asrs	r2, r2, #8
 8015fa2:	f815 9006 	ldrb.w	r9, [r5, r6]
 8015fa6:	fa1f fa82 	uxth.w	sl, r2
 8015faa:	43d2      	mvns	r2, r2
 8015fac:	fb1b fb0a 	smulbb	fp, fp, sl
 8015fb0:	b2d2      	uxtb	r2, r2
 8015fb2:	fb09 b902 	mla	r9, r9, r2, fp
 8015fb6:	fa1f f989 	uxth.w	r9, r9
 8015fba:	f109 0b01 	add.w	fp, r9, #1
 8015fbe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015fc2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8015fc6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8015fca:	fb1b fb0a 	smulbb	fp, fp, sl
 8015fce:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015fd2:	fb17 fa0a 	smulbb	sl, r7, sl
 8015fd6:	f805 9006 	strb.w	r9, [r5, r6]
 8015fda:	442e      	add	r6, r5
 8015fdc:	78b7      	ldrb	r7, [r6, #2]
 8015fde:	f896 9001 	ldrb.w	r9, [r6, #1]
 8015fe2:	fb07 aa02 	mla	sl, r7, r2, sl
 8015fe6:	fb09 b902 	mla	r9, r9, r2, fp
 8015fea:	fa1f fa8a 	uxth.w	sl, sl
 8015fee:	fa1f f989 	uxth.w	r9, r9
 8015ff2:	f10a 0701 	add.w	r7, sl, #1
 8015ff6:	f109 0b01 	add.w	fp, r9, #1
 8015ffa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015ffe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016002:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016006:	ea4f 2929 	mov.w	r9, r9, asr #8
 801600a:	f886 a002 	strb.w	sl, [r6, #2]
 801600e:	f886 9001 	strb.w	r9, [r6, #1]
 8016012:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016014:	4474      	add	r4, lr
 8016016:	f108 0801 	add.w	r8, r8, #1
 801601a:	4410      	add	r0, r2
 801601c:	e760      	b.n	8015ee0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801601e:	b005      	add	sp, #20
 8016020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016024 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016028:	b085      	sub	sp, #20
 801602a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801602e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8016030:	9203      	str	r2, [sp, #12]
 8016032:	6868      	ldr	r0, [r5, #4]
 8016034:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8016038:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801603c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8016040:	fb00 2404 	mla	r4, r0, r4, r2
 8016044:	682a      	ldr	r2, [r5, #0]
 8016046:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801604a:	4414      	add	r4, r2
 801604c:	f8dc 2000 	ldr.w	r2, [ip]
 8016050:	9201      	str	r2, [sp, #4]
 8016052:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8016056:	3204      	adds	r2, #4
 8016058:	9202      	str	r2, [sp, #8]
 801605a:	2900      	cmp	r1, #0
 801605c:	dc03      	bgt.n	8016066 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801605e:	9a03      	ldr	r2, [sp, #12]
 8016060:	2a00      	cmp	r2, #0
 8016062:	f340 8137 	ble.w	80162d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016066:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016068:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801606c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016070:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016072:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016076:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801607a:	2b00      	cmp	r3, #0
 801607c:	dd0d      	ble.n	801609a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801607e:	1405      	asrs	r5, r0, #16
 8016080:	d405      	bmi.n	801608e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016082:	4545      	cmp	r5, r8
 8016084:	da03      	bge.n	801608e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016086:	1415      	asrs	r5, r2, #16
 8016088:	d401      	bmi.n	801608e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801608a:	42bd      	cmp	r5, r7
 801608c:	db06      	blt.n	801609c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801608e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8016090:	4470      	add	r0, lr
 8016092:	3b01      	subs	r3, #1
 8016094:	3403      	adds	r4, #3
 8016096:	442a      	add	r2, r5
 8016098:	e7ef      	b.n	801607a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801609a:	d070      	beq.n	801617e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801609c:	1e5d      	subs	r5, r3, #1
 801609e:	fb0e 0605 	mla	r6, lr, r5, r0
 80160a2:	1436      	asrs	r6, r6, #16
 80160a4:	d462      	bmi.n	801616c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80160a6:	4546      	cmp	r6, r8
 80160a8:	da60      	bge.n	801616c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80160aa:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80160ac:	fb06 2505 	mla	r5, r6, r5, r2
 80160b0:	142d      	asrs	r5, r5, #16
 80160b2:	d45b      	bmi.n	801616c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80160b4:	42bd      	cmp	r5, r7
 80160b6:	da59      	bge.n	801616c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80160b8:	1ce5      	adds	r5, r4, #3
 80160ba:	469a      	mov	sl, r3
 80160bc:	f1ba 0f00 	cmp.w	sl, #0
 80160c0:	dd58      	ble.n	8016174 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80160c2:	1416      	asrs	r6, r2, #16
 80160c4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80160c8:	1407      	asrs	r7, r0, #16
 80160ca:	46b1      	mov	r9, r6
 80160cc:	9e01      	ldr	r6, [sp, #4]
 80160ce:	fb08 6609 	mla	r6, r8, r9, r6
 80160d2:	5df6      	ldrb	r6, [r6, r7]
 80160d4:	9f02      	ldr	r7, [sp, #8]
 80160d6:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 80160da:	0e37      	lsrs	r7, r6, #24
 80160dc:	2fff      	cmp	r7, #255	@ 0xff
 80160de:	f000 80f0 	beq.w	80162c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80160e2:	fa5f f887 	uxtb.w	r8, r7
 80160e6:	b3d7      	cbz	r7, 801615e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80160e8:	fa1f f788 	uxth.w	r7, r8
 80160ec:	ea6f 0808 	mvn.w	r8, r8
 80160f0:	fa5f fb86 	uxtb.w	fp, r6
 80160f4:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 80160f8:	fa5f f888 	uxtb.w	r8, r8
 80160fc:	fb1b fb07 	smulbb	fp, fp, r7
 8016100:	fb09 b908 	mla	r9, r9, r8, fp
 8016104:	fa1f f989 	uxth.w	r9, r9
 8016108:	f109 0b01 	add.w	fp, r9, #1
 801610c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016110:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8016114:	fb1b fb08 	smulbb	fp, fp, r8
 8016118:	ea4f 2929 	mov.w	r9, r9, asr #8
 801611c:	f805 9c03 	strb.w	r9, [r5, #-3]
 8016120:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8016124:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016128:	fb09 b907 	mla	r9, r9, r7, fp
 801612c:	fa1f f989 	uxth.w	r9, r9
 8016130:	f109 0b01 	add.w	fp, r9, #1
 8016134:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016138:	ea4f 2929 	mov.w	r9, r9, asr #8
 801613c:	f805 9c02 	strb.w	r9, [r5, #-2]
 8016140:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8016144:	fb19 f808 	smulbb	r8, r9, r8
 8016148:	fb06 8607 	mla	r6, r6, r7, r8
 801614c:	b2b6      	uxth	r6, r6
 801614e:	f106 0801 	add.w	r8, r6, #1
 8016152:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8016156:	ea4f 2828 	mov.w	r8, r8, asr #8
 801615a:	f805 8c01 	strb.w	r8, [r5, #-1]
 801615e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8016160:	4470      	add	r0, lr
 8016162:	3503      	adds	r5, #3
 8016164:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016168:	4432      	add	r2, r6
 801616a:	e7a7      	b.n	80160bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801616c:	2600      	movs	r6, #0
 801616e:	1b9d      	subs	r5, r3, r6
 8016170:	2d00      	cmp	r5, #0
 8016172:	dc3b      	bgt.n	80161ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8016174:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016178:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801617c:	441c      	add	r4, r3
 801617e:	2900      	cmp	r1, #0
 8016180:	f340 80a8 	ble.w	80162d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016184:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016188:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801618a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801618e:	3901      	subs	r1, #1
 8016190:	eeb0 6a62 	vmov.f32	s12, s5
 8016194:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016198:	ee31 1a05 	vadd.f32	s2, s2, s10
 801619c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80161a0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80161a4:	eeb0 6a43 	vmov.f32	s12, s6
 80161a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80161ac:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80161b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80161b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80161b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80161bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80161c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80161c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80161c8:	ee12 2a90 	vmov	r2, s5
 80161cc:	eef0 2a47 	vmov.f32	s5, s14
 80161d0:	fb92 fef3 	sdiv	lr, r2, r3
 80161d4:	ee13 2a10 	vmov	r2, s6
 80161d8:	eeb0 3a67 	vmov.f32	s6, s15
 80161dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80161e0:	9a03      	ldr	r2, [sp, #12]
 80161e2:	9312      	str	r3, [sp, #72]	@ 0x48
 80161e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80161e6:	bf08      	it	eq
 80161e8:	4613      	moveq	r3, r2
 80161ea:	e736      	b.n	801605a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80161ec:	ea5f 4820 	movs.w	r8, r0, asr #16
 80161f0:	d457      	bmi.n	80162a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80161f2:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80161f6:	4547      	cmp	r7, r8
 80161f8:	dd53      	ble.n	80162a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80161fa:	ea5f 4922 	movs.w	r9, r2, asr #16
 80161fe:	d450      	bmi.n	80162a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016200:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8016204:	454d      	cmp	r5, r9
 8016206:	dd4c      	ble.n	80162a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016208:	9d01      	ldr	r5, [sp, #4]
 801620a:	b23f      	sxth	r7, r7
 801620c:	fb09 5707 	mla	r7, r9, r7, r5
 8016210:	f817 5008 	ldrb.w	r5, [r7, r8]
 8016214:	9f02      	ldr	r7, [sp, #8]
 8016216:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801621a:	0e2f      	lsrs	r7, r5, #24
 801621c:	2fff      	cmp	r7, #255	@ 0xff
 801621e:	d045      	beq.n	80162ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8016220:	fa5f f987 	uxtb.w	r9, r7
 8016224:	b3ef      	cbz	r7, 80162a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016226:	fa1f f889 	uxth.w	r8, r9
 801622a:	ea6f 0909 	mvn.w	r9, r9
 801622e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8016232:	fa5f fb85 	uxtb.w	fp, r5
 8016236:	f814 a007 	ldrb.w	sl, [r4, r7]
 801623a:	fa5f f989 	uxtb.w	r9, r9
 801623e:	fb1b fb08 	smulbb	fp, fp, r8
 8016242:	fb0a ba09 	mla	sl, sl, r9, fp
 8016246:	fa1f fa8a 	uxth.w	sl, sl
 801624a:	f10a 0b01 	add.w	fp, sl, #1
 801624e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8016252:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016256:	f804 a007 	strb.w	sl, [r4, r7]
 801625a:	4427      	add	r7, r4
 801625c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8016260:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8016264:	f897 b001 	ldrb.w	fp, [r7, #1]
 8016268:	fb1b fb09 	smulbb	fp, fp, r9
 801626c:	fb0a ba08 	mla	sl, sl, r8, fp
 8016270:	fa1f fa8a 	uxth.w	sl, sl
 8016274:	f10a 0b01 	add.w	fp, sl, #1
 8016278:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801627c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016280:	f887 a001 	strb.w	sl, [r7, #1]
 8016284:	f897 a002 	ldrb.w	sl, [r7, #2]
 8016288:	fb1a f909 	smulbb	r9, sl, r9
 801628c:	fb05 9508 	mla	r5, r5, r8, r9
 8016290:	b2ad      	uxth	r5, r5
 8016292:	f105 0901 	add.w	r9, r5, #1
 8016296:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801629a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801629e:	f887 9002 	strb.w	r9, [r7, #2]
 80162a2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80162a4:	4470      	add	r0, lr
 80162a6:	3601      	adds	r6, #1
 80162a8:	442a      	add	r2, r5
 80162aa:	e760      	b.n	801616e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80162ac:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80162b0:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80162b4:	55e5      	strb	r5, [r4, r7]
 80162b6:	4427      	add	r7, r4
 80162b8:	0c2d      	lsrs	r5, r5, #16
 80162ba:	f887 8001 	strb.w	r8, [r7, #1]
 80162be:	70bd      	strb	r5, [r7, #2]
 80162c0:	e7ef      	b.n	80162a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80162c2:	0a37      	lsrs	r7, r6, #8
 80162c4:	f805 6c03 	strb.w	r6, [r5, #-3]
 80162c8:	0c36      	lsrs	r6, r6, #16
 80162ca:	f805 7c02 	strb.w	r7, [r5, #-2]
 80162ce:	f805 6c01 	strb.w	r6, [r5, #-1]
 80162d2:	e744      	b.n	801615e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80162d4:	b005      	add	sp, #20
 80162d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080162da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80162da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162de:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80162e0:	9201      	str	r2, [sp, #4]
 80162e2:	6870      	ldr	r0, [r6, #4]
 80162e4:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 80162e8:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 80162ec:	fa1f fe85 	uxth.w	lr, r5
 80162f0:	43ed      	mvns	r5, r5
 80162f2:	f8dc 8000 	ldr.w	r8, [ip]
 80162f6:	b2ed      	uxtb	r5, r5
 80162f8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80162fc:	fb00 2404 	mla	r4, r0, r4, r2
 8016300:	6832      	ldr	r2, [r6, #0]
 8016302:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016306:	4414      	add	r4, r2
 8016308:	2900      	cmp	r1, #0
 801630a:	dc03      	bgt.n	8016314 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801630c:	9a01      	ldr	r2, [sp, #4]
 801630e:	2a00      	cmp	r2, #0
 8016310:	f340 810d 	ble.w	801652e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8016314:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016316:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801631a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801631e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016320:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8016324:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016328:	2b00      	cmp	r3, #0
 801632a:	dd0e      	ble.n	801634a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801632c:	1406      	asrs	r6, r0, #16
 801632e:	d405      	bmi.n	801633c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8016330:	4556      	cmp	r6, sl
 8016332:	da03      	bge.n	801633c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8016334:	1416      	asrs	r6, r2, #16
 8016336:	d401      	bmi.n	801633c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8016338:	454e      	cmp	r6, r9
 801633a:	db07      	blt.n	801634c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801633c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801633e:	3b01      	subs	r3, #1
 8016340:	3403      	adds	r4, #3
 8016342:	4430      	add	r0, r6
 8016344:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8016346:	4432      	add	r2, r6
 8016348:	e7ee      	b.n	8016328 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801634a:	d060      	beq.n	801640e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801634c:	1e5e      	subs	r6, r3, #1
 801634e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8016350:	fb07 0706 	mla	r7, r7, r6, r0
 8016354:	143f      	asrs	r7, r7, #16
 8016356:	d451      	bmi.n	80163fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016358:	4557      	cmp	r7, sl
 801635a:	da4f      	bge.n	80163fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801635c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801635e:	fb07 2606 	mla	r6, r7, r6, r2
 8016362:	1436      	asrs	r6, r6, #16
 8016364:	d44a      	bmi.n	80163fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016366:	454e      	cmp	r6, r9
 8016368:	da48      	bge.n	80163fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801636a:	1ce6      	adds	r6, r4, #3
 801636c:	4699      	mov	r9, r3
 801636e:	f1b9 0f00 	cmp.w	r9, #0
 8016372:	f106 0603 	add.w	r6, r6, #3
 8016376:	dd45      	ble.n	8016404 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8016378:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801637c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8016380:	1417      	asrs	r7, r2, #16
 8016382:	f109 39ff 	add.w	r9, r9, #4294967295
 8016386:	fb0b a707 	mla	r7, fp, r7, sl
 801638a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801638e:	fb1b fb05 	smulbb	fp, fp, r5
 8016392:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016396:	eb08 0a07 	add.w	sl, r8, r7
 801639a:	f818 7007 	ldrb.w	r7, [r8, r7]
 801639e:	fb07 b70e 	mla	r7, r7, lr, fp
 80163a2:	b2bf      	uxth	r7, r7
 80163a4:	f107 0b01 	add.w	fp, r7, #1
 80163a8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80163ac:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80163b0:	fb1b fb05 	smulbb	fp, fp, r5
 80163b4:	123f      	asrs	r7, r7, #8
 80163b6:	f806 7c06 	strb.w	r7, [r6, #-6]
 80163ba:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80163be:	fb07 b70e 	mla	r7, r7, lr, fp
 80163c2:	b2bf      	uxth	r7, r7
 80163c4:	f107 0b01 	add.w	fp, r7, #1
 80163c8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80163cc:	123f      	asrs	r7, r7, #8
 80163ce:	f806 7c05 	strb.w	r7, [r6, #-5]
 80163d2:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80163d6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80163da:	fb1a fa05 	smulbb	sl, sl, r5
 80163de:	fb07 a70e 	mla	r7, r7, lr, sl
 80163e2:	b2bf      	uxth	r7, r7
 80163e4:	f107 0a01 	add.w	sl, r7, #1
 80163e8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80163ec:	123f      	asrs	r7, r7, #8
 80163ee:	f806 7c04 	strb.w	r7, [r6, #-4]
 80163f2:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80163f4:	4438      	add	r0, r7
 80163f6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80163f8:	443a      	add	r2, r7
 80163fa:	e7b8      	b.n	801636e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80163fc:	2700      	movs	r7, #0
 80163fe:	1bde      	subs	r6, r3, r7
 8016400:	2e00      	cmp	r6, #0
 8016402:	dc3f      	bgt.n	8016484 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8016404:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016408:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801640c:	441c      	add	r4, r3
 801640e:	2900      	cmp	r1, #0
 8016410:	f340 808d 	ble.w	801652e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8016414:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016418:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801641a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801641e:	3901      	subs	r1, #1
 8016420:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016424:	eef0 6a62 	vmov.f32	s13, s5
 8016428:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801642c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016430:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016434:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 8016438:	eef0 6a43 	vmov.f32	s13, s6
 801643c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016440:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 8016444:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016448:	ee61 7a27 	vmul.f32	s15, s2, s15
 801644c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016450:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016454:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016458:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801645c:	ee12 2a90 	vmov	r2, s5
 8016460:	eef0 2a47 	vmov.f32	s5, s14
 8016464:	fb92 f3f3 	sdiv	r3, r2, r3
 8016468:	ee13 2a10 	vmov	r2, s6
 801646c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801646e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016470:	eeb0 3a67 	vmov.f32	s6, s15
 8016474:	fb92 f3f3 	sdiv	r3, r2, r3
 8016478:	9a01      	ldr	r2, [sp, #4]
 801647a:	9310      	str	r3, [sp, #64]	@ 0x40
 801647c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801647e:	bf08      	it	eq
 8016480:	4613      	moveq	r3, r2
 8016482:	e741      	b.n	8016308 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8016484:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016488:	d44b      	bmi.n	8016522 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801648a:	f8dc b008 	ldr.w	fp, [ip, #8]
 801648e:	45cb      	cmp	fp, r9
 8016490:	dd47      	ble.n	8016522 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016492:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016496:	d444      	bmi.n	8016522 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016498:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801649c:	4556      	cmp	r6, sl
 801649e:	dd40      	ble.n	8016522 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80164a0:	fa0f f68b 	sxth.w	r6, fp
 80164a4:	fb0a 9906 	mla	r9, sl, r6, r9
 80164a8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80164ac:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80164b0:	f814 b006 	ldrb.w	fp, [r4, r6]
 80164b4:	fb1b fb05 	smulbb	fp, fp, r5
 80164b8:	eb08 0a09 	add.w	sl, r8, r9
 80164bc:	f818 9009 	ldrb.w	r9, [r8, r9]
 80164c0:	fb09 b90e 	mla	r9, r9, lr, fp
 80164c4:	fa1f f989 	uxth.w	r9, r9
 80164c8:	f109 0b01 	add.w	fp, r9, #1
 80164cc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80164d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80164d4:	f804 9006 	strb.w	r9, [r4, r6]
 80164d8:	4426      	add	r6, r4
 80164da:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80164de:	f896 b001 	ldrb.w	fp, [r6, #1]
 80164e2:	fb1b fb05 	smulbb	fp, fp, r5
 80164e6:	fb09 b90e 	mla	r9, r9, lr, fp
 80164ea:	fa1f f989 	uxth.w	r9, r9
 80164ee:	f109 0b01 	add.w	fp, r9, #1
 80164f2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80164f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80164fa:	f886 9001 	strb.w	r9, [r6, #1]
 80164fe:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016502:	f896 a002 	ldrb.w	sl, [r6, #2]
 8016506:	fb1a fa05 	smulbb	sl, sl, r5
 801650a:	fb09 a90e 	mla	r9, r9, lr, sl
 801650e:	fa1f f989 	uxth.w	r9, r9
 8016512:	f109 0a01 	add.w	sl, r9, #1
 8016516:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801651a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801651e:	f886 9002 	strb.w	r9, [r6, #2]
 8016522:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8016524:	3701      	adds	r7, #1
 8016526:	4430      	add	r0, r6
 8016528:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801652a:	4432      	add	r2, r6
 801652c:	e767      	b.n	80163fe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801652e:	b003      	add	sp, #12
 8016530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016534 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016538:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801653a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801653e:	9201      	str	r2, [sp, #4]
 8016540:	6868      	ldr	r0, [r5, #4]
 8016542:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8016544:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8016548:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801654c:	fb00 2404 	mla	r4, r0, r4, r2
 8016550:	682a      	ldr	r2, [r5, #0]
 8016552:	f8d7 8000 	ldr.w	r8, [r7]
 8016556:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801655a:	4414      	add	r4, r2
 801655c:	2900      	cmp	r1, #0
 801655e:	dc03      	bgt.n	8016568 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016560:	9a01      	ldr	r2, [sp, #4]
 8016562:	2a00      	cmp	r2, #0
 8016564:	f340 80af 	ble.w	80166c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016568:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801656a:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801656e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016572:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016574:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8016578:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801657c:	2b00      	cmp	r3, #0
 801657e:	dd0c      	ble.n	801659a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8016580:	1405      	asrs	r5, r0, #16
 8016582:	d405      	bmi.n	8016590 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016584:	4555      	cmp	r5, sl
 8016586:	da03      	bge.n	8016590 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016588:	1415      	asrs	r5, r2, #16
 801658a:	d401      	bmi.n	8016590 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801658c:	454d      	cmp	r5, r9
 801658e:	db05      	blt.n	801659c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016590:	4470      	add	r0, lr
 8016592:	4462      	add	r2, ip
 8016594:	3b01      	subs	r3, #1
 8016596:	3403      	adds	r4, #3
 8016598:	e7f0      	b.n	801657c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801659a:	d038      	beq.n	801660e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801659c:	1e5d      	subs	r5, r3, #1
 801659e:	fb0e 0605 	mla	r6, lr, r5, r0
 80165a2:	1436      	asrs	r6, r6, #16
 80165a4:	d42a      	bmi.n	80165fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80165a6:	4556      	cmp	r6, sl
 80165a8:	da28      	bge.n	80165fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80165aa:	fb0c 2505 	mla	r5, ip, r5, r2
 80165ae:	142d      	asrs	r5, r5, #16
 80165b0:	d424      	bmi.n	80165fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80165b2:	454d      	cmp	r5, r9
 80165b4:	da22      	bge.n	80165fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80165b6:	1ce6      	adds	r6, r4, #3
 80165b8:	4699      	mov	r9, r3
 80165ba:	f1b9 0f00 	cmp.w	r9, #0
 80165be:	f106 0603 	add.w	r6, r6, #3
 80165c2:	dd1f      	ble.n	8016604 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 80165c4:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 80165c8:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80165cc:	1415      	asrs	r5, r2, #16
 80165ce:	4470      	add	r0, lr
 80165d0:	4462      	add	r2, ip
 80165d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80165d6:	fb0b a505 	mla	r5, fp, r5, sl
 80165da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80165de:	eb08 0a05 	add.w	sl, r8, r5
 80165e2:	f818 5005 	ldrb.w	r5, [r8, r5]
 80165e6:	f806 5c06 	strb.w	r5, [r6, #-6]
 80165ea:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80165ee:	f806 5c05 	strb.w	r5, [r6, #-5]
 80165f2:	f89a 5002 	ldrb.w	r5, [sl, #2]
 80165f6:	f806 5c04 	strb.w	r5, [r6, #-4]
 80165fa:	e7de      	b.n	80165ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80165fc:	2600      	movs	r6, #0
 80165fe:	1b9d      	subs	r5, r3, r6
 8016600:	2d00      	cmp	r5, #0
 8016602:	dc38      	bgt.n	8016676 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016604:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016608:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801660c:	441c      	add	r4, r3
 801660e:	2900      	cmp	r1, #0
 8016610:	dd59      	ble.n	80166c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016612:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016616:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016618:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801661c:	3901      	subs	r1, #1
 801661e:	eeb0 6a62 	vmov.f32	s12, s5
 8016622:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016626:	ee31 1a05 	vadd.f32	s2, s2, s10
 801662a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801662e:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8016632:	eeb0 6a43 	vmov.f32	s12, s6
 8016636:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801663a:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801663e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016642:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016646:	ee77 2a62 	vsub.f32	s5, s14, s5
 801664a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801664e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016652:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016656:	ee12 2a90 	vmov	r2, s5
 801665a:	eef0 2a47 	vmov.f32	s5, s14
 801665e:	fb92 fef3 	sdiv	lr, r2, r3
 8016662:	ee13 2a10 	vmov	r2, s6
 8016666:	eeb0 3a67 	vmov.f32	s6, s15
 801666a:	fb92 fcf3 	sdiv	ip, r2, r3
 801666e:	9a01      	ldr	r2, [sp, #4]
 8016670:	bf08      	it	eq
 8016672:	4613      	moveq	r3, r2
 8016674:	e772      	b.n	801655c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016676:	ea5f 4920 	movs.w	r9, r0, asr #16
 801667a:	d420      	bmi.n	80166be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801667c:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8016680:	45cb      	cmp	fp, r9
 8016682:	dd1c      	ble.n	80166be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016684:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016688:	d419      	bmi.n	80166be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801668a:	68fd      	ldr	r5, [r7, #12]
 801668c:	4555      	cmp	r5, sl
 801668e:	dd16      	ble.n	80166be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016690:	fa0f f58b 	sxth.w	r5, fp
 8016694:	fb0a 9505 	mla	r5, sl, r5, r9
 8016698:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801669c:	f818 9005 	ldrb.w	r9, [r8, r5]
 80166a0:	eb08 0b05 	add.w	fp, r8, r5
 80166a4:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 80166a8:	f804 9005 	strb.w	r9, [r4, r5]
 80166ac:	4425      	add	r5, r4
 80166ae:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80166b2:	f885 9001 	strb.w	r9, [r5, #1]
 80166b6:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80166ba:	f885 9002 	strb.w	r9, [r5, #2]
 80166be:	4470      	add	r0, lr
 80166c0:	4462      	add	r2, ip
 80166c2:	3601      	adds	r6, #1
 80166c4:	e79b      	b.n	80165fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80166c6:	b003      	add	sp, #12
 80166c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080166cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80166cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166d0:	b085      	sub	sp, #20
 80166d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80166d6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80166d8:	9202      	str	r2, [sp, #8]
 80166da:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 80166de:	6860      	ldr	r0, [r4, #4]
 80166e0:	9203      	str	r2, [sp, #12]
 80166e2:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80166e6:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 80166ea:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 80166ee:	fb00 2505 	mla	r5, r0, r5, r2
 80166f2:	6822      	ldr	r2, [r4, #0]
 80166f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80166f8:	4415      	add	r5, r2
 80166fa:	f8dc 2000 	ldr.w	r2, [ip]
 80166fe:	9201      	str	r2, [sp, #4]
 8016700:	2900      	cmp	r1, #0
 8016702:	dc03      	bgt.n	801670c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8016704:	9a02      	ldr	r2, [sp, #8]
 8016706:	2a00      	cmp	r2, #0
 8016708:	f340 8122 	ble.w	8016950 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801670c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801670e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016712:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8016716:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016718:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801671c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016720:	2b00      	cmp	r3, #0
 8016722:	dd0d      	ble.n	8016740 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8016724:	1422      	asrs	r2, r4, #16
 8016726:	d405      	bmi.n	8016734 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016728:	4542      	cmp	r2, r8
 801672a:	da03      	bge.n	8016734 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801672c:	1402      	asrs	r2, r0, #16
 801672e:	d401      	bmi.n	8016734 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016730:	42ba      	cmp	r2, r7
 8016732:	db06      	blt.n	8016742 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016734:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016736:	4474      	add	r4, lr
 8016738:	3b01      	subs	r3, #1
 801673a:	3503      	adds	r5, #3
 801673c:	4410      	add	r0, r2
 801673e:	e7ef      	b.n	8016720 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8016740:	d072      	beq.n	8016828 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8016742:	1e5a      	subs	r2, r3, #1
 8016744:	fb0e 4602 	mla	r6, lr, r2, r4
 8016748:	1436      	asrs	r6, r6, #16
 801674a:	d462      	bmi.n	8016812 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801674c:	4546      	cmp	r6, r8
 801674e:	da60      	bge.n	8016812 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016750:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8016752:	fb06 0202 	mla	r2, r6, r2, r0
 8016756:	1412      	asrs	r2, r2, #16
 8016758:	d45b      	bmi.n	8016812 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801675a:	42ba      	cmp	r2, r7
 801675c:	da59      	bge.n	8016812 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801675e:	1cef      	adds	r7, r5, #3
 8016760:	4699      	mov	r9, r3
 8016762:	f1b9 0f00 	cmp.w	r9, #0
 8016766:	dd5a      	ble.n	801681e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016768:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801676c:	1426      	asrs	r6, r4, #16
 801676e:	1402      	asrs	r2, r0, #16
 8016770:	fb08 6202 	mla	r2, r8, r2, r6
 8016774:	9e01      	ldr	r6, [sp, #4]
 8016776:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801677a:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801677e:	d041      	beq.n	8016804 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016780:	9a03      	ldr	r2, [sp, #12]
 8016782:	fa5f fb86 	uxtb.w	fp, r6
 8016786:	fb02 f808 	mul.w	r8, r2, r8
 801678a:	f108 0201 	add.w	r2, r8, #1
 801678e:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8016792:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8016796:	1212      	asrs	r2, r2, #8
 8016798:	fa1f fa82 	uxth.w	sl, r2
 801679c:	43d2      	mvns	r2, r2
 801679e:	fb1b fb0a 	smulbb	fp, fp, sl
 80167a2:	b2d2      	uxtb	r2, r2
 80167a4:	fb08 b802 	mla	r8, r8, r2, fp
 80167a8:	fa1f f888 	uxth.w	r8, r8
 80167ac:	f108 0b01 	add.w	fp, r8, #1
 80167b0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80167b4:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80167b8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80167bc:	fb1b fb0a 	smulbb	fp, fp, sl
 80167c0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80167c4:	fb16 fa0a 	smulbb	sl, r6, sl
 80167c8:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80167cc:	f807 8c03 	strb.w	r8, [r7, #-3]
 80167d0:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80167d4:	fb06 aa02 	mla	sl, r6, r2, sl
 80167d8:	fb08 b802 	mla	r8, r8, r2, fp
 80167dc:	fa1f fa8a 	uxth.w	sl, sl
 80167e0:	fa1f f888 	uxth.w	r8, r8
 80167e4:	f10a 0601 	add.w	r6, sl, #1
 80167e8:	f108 0b01 	add.w	fp, r8, #1
 80167ec:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80167f0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80167f4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80167f8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80167fc:	f807 ac01 	strb.w	sl, [r7, #-1]
 8016800:	f807 8c02 	strb.w	r8, [r7, #-2]
 8016804:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016806:	4474      	add	r4, lr
 8016808:	3703      	adds	r7, #3
 801680a:	f109 39ff 	add.w	r9, r9, #4294967295
 801680e:	4410      	add	r0, r2
 8016810:	e7a7      	b.n	8016762 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016812:	f04f 0800 	mov.w	r8, #0
 8016816:	eba3 0208 	sub.w	r2, r3, r8
 801681a:	2a00      	cmp	r2, #0
 801681c:	dc3b      	bgt.n	8016896 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801681e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016822:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016826:	441d      	add	r5, r3
 8016828:	2900      	cmp	r1, #0
 801682a:	f340 8091 	ble.w	8016950 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801682e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016834:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016838:	3901      	subs	r1, #1
 801683a:	eeb0 6a62 	vmov.f32	s12, s5
 801683e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016842:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016846:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801684a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801684e:	eeb0 6a43 	vmov.f32	s12, s6
 8016852:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016856:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801685a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801685e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016862:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016866:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801686a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801686e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016872:	ee12 2a90 	vmov	r2, s5
 8016876:	eef0 2a47 	vmov.f32	s5, s14
 801687a:	fb92 fef3 	sdiv	lr, r2, r3
 801687e:	ee13 2a10 	vmov	r2, s6
 8016882:	eeb0 3a67 	vmov.f32	s6, s15
 8016886:	fb92 f3f3 	sdiv	r3, r2, r3
 801688a:	9a02      	ldr	r2, [sp, #8]
 801688c:	9312      	str	r3, [sp, #72]	@ 0x48
 801688e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016890:	bf08      	it	eq
 8016892:	4613      	moveq	r3, r2
 8016894:	e734      	b.n	8016700 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016896:	1427      	asrs	r7, r4, #16
 8016898:	d454      	bmi.n	8016944 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801689a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801689e:	42be      	cmp	r6, r7
 80168a0:	dd50      	ble.n	8016944 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80168a2:	ea5f 4920 	movs.w	r9, r0, asr #16
 80168a6:	d44d      	bmi.n	8016944 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80168a8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80168ac:	454a      	cmp	r2, r9
 80168ae:	dd49      	ble.n	8016944 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80168b0:	b236      	sxth	r6, r6
 80168b2:	9a01      	ldr	r2, [sp, #4]
 80168b4:	fb09 7606 	mla	r6, r9, r6, r7
 80168b8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80168bc:	0e3a      	lsrs	r2, r7, #24
 80168be:	d041      	beq.n	8016944 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80168c0:	9e03      	ldr	r6, [sp, #12]
 80168c2:	fa5f fb87 	uxtb.w	fp, r7
 80168c6:	4372      	muls	r2, r6
 80168c8:	1c56      	adds	r6, r2, #1
 80168ca:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80168ce:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80168d2:	1212      	asrs	r2, r2, #8
 80168d4:	f815 9006 	ldrb.w	r9, [r5, r6]
 80168d8:	fa1f fa82 	uxth.w	sl, r2
 80168dc:	43d2      	mvns	r2, r2
 80168de:	fb1b fb0a 	smulbb	fp, fp, sl
 80168e2:	b2d2      	uxtb	r2, r2
 80168e4:	fb09 b902 	mla	r9, r9, r2, fp
 80168e8:	fa1f f989 	uxth.w	r9, r9
 80168ec:	f109 0b01 	add.w	fp, r9, #1
 80168f0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80168f4:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80168f8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80168fc:	fb1b fb0a 	smulbb	fp, fp, sl
 8016900:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016904:	fb17 fa0a 	smulbb	sl, r7, sl
 8016908:	f805 9006 	strb.w	r9, [r5, r6]
 801690c:	442e      	add	r6, r5
 801690e:	78b7      	ldrb	r7, [r6, #2]
 8016910:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016914:	fb07 aa02 	mla	sl, r7, r2, sl
 8016918:	fb09 b902 	mla	r9, r9, r2, fp
 801691c:	fa1f fa8a 	uxth.w	sl, sl
 8016920:	fa1f f989 	uxth.w	r9, r9
 8016924:	f10a 0701 	add.w	r7, sl, #1
 8016928:	f109 0b01 	add.w	fp, r9, #1
 801692c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016930:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016934:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016938:	ea4f 2929 	mov.w	r9, r9, asr #8
 801693c:	f886 a002 	strb.w	sl, [r6, #2]
 8016940:	f886 9001 	strb.w	r9, [r6, #1]
 8016944:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016946:	4474      	add	r4, lr
 8016948:	f108 0801 	add.w	r8, r8, #1
 801694c:	4410      	add	r0, r2
 801694e:	e762      	b.n	8016816 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016950:	b005      	add	sp, #20
 8016952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016956 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801695a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801695c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016960:	9201      	str	r2, [sp, #4]
 8016962:	6860      	ldr	r0, [r4, #4]
 8016964:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8016968:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 801696c:	fb00 2505 	mla	r5, r0, r5, r2
 8016970:	6822      	ldr	r2, [r4, #0]
 8016972:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016976:	4415      	add	r5, r2
 8016978:	f8dc 2000 	ldr.w	r2, [ip]
 801697c:	9200      	str	r2, [sp, #0]
 801697e:	2900      	cmp	r1, #0
 8016980:	dc03      	bgt.n	801698a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016982:	9a01      	ldr	r2, [sp, #4]
 8016984:	2a00      	cmp	r2, #0
 8016986:	f340 812b 	ble.w	8016be0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801698a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801698c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016990:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8016994:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016996:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801699a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801699e:	2b00      	cmp	r3, #0
 80169a0:	dd0e      	ble.n	80169c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80169a2:	1422      	asrs	r2, r4, #16
 80169a4:	d405      	bmi.n	80169b2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80169a6:	4572      	cmp	r2, lr
 80169a8:	da03      	bge.n	80169b2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80169aa:	1402      	asrs	r2, r0, #16
 80169ac:	d401      	bmi.n	80169b2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80169ae:	42ba      	cmp	r2, r7
 80169b0:	db07      	blt.n	80169c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80169b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80169b4:	3b01      	subs	r3, #1
 80169b6:	3503      	adds	r5, #3
 80169b8:	4414      	add	r4, r2
 80169ba:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80169bc:	4410      	add	r0, r2
 80169be:	e7ee      	b.n	801699e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80169c0:	d06f      	beq.n	8016aa2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80169c2:	1e5a      	subs	r2, r3, #1
 80169c4:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80169c6:	fb06 4602 	mla	r6, r6, r2, r4
 80169ca:	1436      	asrs	r6, r6, #16
 80169cc:	d45e      	bmi.n	8016a8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80169ce:	4576      	cmp	r6, lr
 80169d0:	da5c      	bge.n	8016a8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80169d2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80169d4:	fb06 0202 	mla	r2, r6, r2, r0
 80169d8:	1412      	asrs	r2, r2, #16
 80169da:	d457      	bmi.n	8016a8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80169dc:	42ba      	cmp	r2, r7
 80169de:	da55      	bge.n	8016a8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80169e0:	1cee      	adds	r6, r5, #3
 80169e2:	469a      	mov	sl, r3
 80169e4:	f1ba 0f00 	cmp.w	sl, #0
 80169e8:	dd56      	ble.n	8016a98 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80169ea:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80169ee:	1427      	asrs	r7, r4, #16
 80169f0:	1402      	asrs	r2, r0, #16
 80169f2:	fb0e 7202 	mla	r2, lr, r2, r7
 80169f6:	9f00      	ldr	r7, [sp, #0]
 80169f8:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 80169fc:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8016a00:	d03c      	beq.n	8016a7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016a02:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8016a06:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016a0a:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016a0e:	fa5f f28e 	uxtb.w	r2, lr
 8016a12:	b2ff      	uxtb	r7, r7
 8016a14:	f000 80dd 	beq.w	8016bd2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8016a18:	fa1f f882 	uxth.w	r8, r2
 8016a1c:	43d2      	mvns	r2, r2
 8016a1e:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8016a22:	fb17 f708 	smulbb	r7, r7, r8
 8016a26:	b2d2      	uxtb	r2, r2
 8016a28:	fb19 f908 	smulbb	r9, r9, r8
 8016a2c:	fb0e 7702 	mla	r7, lr, r2, r7
 8016a30:	fb1b f808 	smulbb	r8, fp, r8
 8016a34:	b2bf      	uxth	r7, r7
 8016a36:	f107 0e01 	add.w	lr, r7, #1
 8016a3a:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8016a3e:	123f      	asrs	r7, r7, #8
 8016a40:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016a44:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8016a48:	fb07 9902 	mla	r9, r7, r2, r9
 8016a4c:	fa1f f989 	uxth.w	r9, r9
 8016a50:	f109 0701 	add.w	r7, r9, #1
 8016a54:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8016a58:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016a5c:	fb07 8802 	mla	r8, r7, r2, r8
 8016a60:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016a64:	fa1f f888 	uxth.w	r8, r8
 8016a68:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016a6c:	f108 0201 	add.w	r2, r8, #1
 8016a70:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8016a74:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016a78:	f806 8c01 	strb.w	r8, [r6, #-1]
 8016a7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016a7e:	3603      	adds	r6, #3
 8016a80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016a84:	4414      	add	r4, r2
 8016a86:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016a88:	4410      	add	r0, r2
 8016a8a:	e7ab      	b.n	80169e4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8016a8c:	f04f 0e00 	mov.w	lr, #0
 8016a90:	eba3 020e 	sub.w	r2, r3, lr
 8016a94:	2a00      	cmp	r2, #0
 8016a96:	dc3d      	bgt.n	8016b14 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8016a98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016a9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016aa0:	441d      	add	r5, r3
 8016aa2:	2900      	cmp	r1, #0
 8016aa4:	f340 809c 	ble.w	8016be0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016aa8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016aac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016aae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016ab2:	3901      	subs	r1, #1
 8016ab4:	eeb0 6a62 	vmov.f32	s12, s5
 8016ab8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016abc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016ac0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016ac4:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8016ac8:	eeb0 6a43 	vmov.f32	s12, s6
 8016acc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016ad0:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8016ad4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016ad8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016adc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016ae0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016ae4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016ae8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016aec:	ee12 2a90 	vmov	r2, s5
 8016af0:	eef0 2a47 	vmov.f32	s5, s14
 8016af4:	fb92 f3f3 	sdiv	r3, r2, r3
 8016af8:	ee13 2a10 	vmov	r2, s6
 8016afc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016afe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016b00:	eeb0 3a67 	vmov.f32	s6, s15
 8016b04:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b08:	9a01      	ldr	r2, [sp, #4]
 8016b0a:	9310      	str	r3, [sp, #64]	@ 0x40
 8016b0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016b0e:	bf08      	it	eq
 8016b10:	4613      	moveq	r3, r2
 8016b12:	e734      	b.n	801697e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016b14:	1427      	asrs	r7, r4, #16
 8016b16:	d44d      	bmi.n	8016bb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016b18:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016b1c:	42be      	cmp	r6, r7
 8016b1e:	dd49      	ble.n	8016bb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016b20:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016b24:	d446      	bmi.n	8016bb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016b26:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016b2a:	4542      	cmp	r2, r8
 8016b2c:	dd42      	ble.n	8016bb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016b2e:	b236      	sxth	r6, r6
 8016b30:	9a00      	ldr	r2, [sp, #0]
 8016b32:	fb08 7606 	mla	r6, r8, r6, r7
 8016b36:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016b3a:	0e3a      	lsrs	r2, r7, #24
 8016b3c:	d03a      	beq.n	8016bb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016b3e:	2aff      	cmp	r2, #255	@ 0xff
 8016b40:	b2d6      	uxtb	r6, r2
 8016b42:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016b46:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8016b4a:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8016b4e:	b2ff      	uxtb	r7, r7
 8016b50:	d037      	beq.n	8016bc2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8016b52:	fa1f f986 	uxth.w	r9, r6
 8016b56:	4472      	add	r2, lr
 8016b58:	43f6      	mvns	r6, r6
 8016b5a:	f815 8002 	ldrb.w	r8, [r5, r2]
 8016b5e:	fb17 f709 	smulbb	r7, r7, r9
 8016b62:	fb1a fa09 	smulbb	sl, sl, r9
 8016b66:	b2f6      	uxtb	r6, r6
 8016b68:	fb1b f909 	smulbb	r9, fp, r9
 8016b6c:	fb08 7706 	mla	r7, r8, r6, r7
 8016b70:	b2bf      	uxth	r7, r7
 8016b72:	f107 0801 	add.w	r8, r7, #1
 8016b76:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8016b7a:	123f      	asrs	r7, r7, #8
 8016b7c:	54af      	strb	r7, [r5, r2]
 8016b7e:	442a      	add	r2, r5
 8016b80:	7857      	ldrb	r7, [r2, #1]
 8016b82:	fb07 aa06 	mla	sl, r7, r6, sl
 8016b86:	fa1f fa8a 	uxth.w	sl, sl
 8016b8a:	f10a 0701 	add.w	r7, sl, #1
 8016b8e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016b92:	7897      	ldrb	r7, [r2, #2]
 8016b94:	fb07 9906 	mla	r9, r7, r6, r9
 8016b98:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016b9c:	fa1f f989 	uxth.w	r9, r9
 8016ba0:	f882 a001 	strb.w	sl, [r2, #1]
 8016ba4:	f109 0601 	add.w	r6, r9, #1
 8016ba8:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8016bac:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016bb0:	f882 9002 	strb.w	r9, [r2, #2]
 8016bb4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016bb6:	f10e 0e01 	add.w	lr, lr, #1
 8016bba:	4414      	add	r4, r2
 8016bbc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016bbe:	4410      	add	r0, r2
 8016bc0:	e766      	b.n	8016a90 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016bc2:	4472      	add	r2, lr
 8016bc4:	54af      	strb	r7, [r5, r2]
 8016bc6:	442a      	add	r2, r5
 8016bc8:	f882 a001 	strb.w	sl, [r2, #1]
 8016bcc:	f882 b002 	strb.w	fp, [r2, #2]
 8016bd0:	e7f0      	b.n	8016bb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016bd2:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016bd6:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016bda:	f806 bc01 	strb.w	fp, [r6, #-1]
 8016bde:	e74d      	b.n	8016a7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016be0:	b003      	add	sp, #12
 8016be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016be8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bec:	b087      	sub	sp, #28
 8016bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016bf2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8016bf4:	9204      	str	r2, [sp, #16]
 8016bf6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8016bfa:	6860      	ldr	r0, [r4, #4]
 8016bfc:	9205      	str	r2, [sp, #20]
 8016bfe:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8016c02:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8016c06:	9101      	str	r1, [sp, #4]
 8016c08:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8016c0c:	fb00 2505 	mla	r5, r0, r5, r2
 8016c10:	6822      	ldr	r2, [r4, #0]
 8016c12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016c16:	4415      	add	r5, r2
 8016c18:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016c1c:	3201      	adds	r2, #1
 8016c1e:	f022 0201 	bic.w	r2, r2, #1
 8016c22:	9202      	str	r2, [sp, #8]
 8016c24:	f8dc 2000 	ldr.w	r2, [ip]
 8016c28:	9203      	str	r2, [sp, #12]
 8016c2a:	9a01      	ldr	r2, [sp, #4]
 8016c2c:	2a00      	cmp	r2, #0
 8016c2e:	dc03      	bgt.n	8016c38 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8016c30:	9a04      	ldr	r2, [sp, #16]
 8016c32:	2a00      	cmp	r2, #0
 8016c34:	f340 8135 	ble.w	8016ea2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016c38:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016c3a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016c3e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8016c42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016c44:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016c48:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	dd0d      	ble.n	8016c6c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016c50:	1422      	asrs	r2, r4, #16
 8016c52:	d405      	bmi.n	8016c60 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016c54:	4542      	cmp	r2, r8
 8016c56:	da03      	bge.n	8016c60 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016c58:	1402      	asrs	r2, r0, #16
 8016c5a:	d401      	bmi.n	8016c60 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016c5c:	42ba      	cmp	r2, r7
 8016c5e:	db06      	blt.n	8016c6e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016c60:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016c62:	4474      	add	r4, lr
 8016c64:	3b01      	subs	r3, #1
 8016c66:	3503      	adds	r5, #3
 8016c68:	4410      	add	r0, r2
 8016c6a:	e7ef      	b.n	8016c4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016c6c:	d077      	beq.n	8016d5e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8016c6e:	1e5a      	subs	r2, r3, #1
 8016c70:	fb0e 4602 	mla	r6, lr, r2, r4
 8016c74:	1436      	asrs	r6, r6, #16
 8016c76:	d469      	bmi.n	8016d4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016c78:	4546      	cmp	r6, r8
 8016c7a:	da67      	bge.n	8016d4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016c7c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8016c7e:	fb06 0202 	mla	r2, r6, r2, r0
 8016c82:	1412      	asrs	r2, r2, #16
 8016c84:	d462      	bmi.n	8016d4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016c86:	42ba      	cmp	r2, r7
 8016c88:	da60      	bge.n	8016d4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016c8a:	1cee      	adds	r6, r5, #3
 8016c8c:	4699      	mov	r9, r3
 8016c8e:	f1b9 0f00 	cmp.w	r9, #0
 8016c92:	dd5f      	ble.n	8016d54 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8016c94:	1422      	asrs	r2, r4, #16
 8016c96:	9902      	ldr	r1, [sp, #8]
 8016c98:	1407      	asrs	r7, r0, #16
 8016c9a:	fb01 2707 	mla	r7, r1, r7, r2
 8016c9e:	9903      	ldr	r1, [sp, #12]
 8016ca0:	087a      	lsrs	r2, r7, #1
 8016ca2:	5c8a      	ldrb	r2, [r1, r2]
 8016ca4:	07f9      	lsls	r1, r7, #31
 8016ca6:	bf54      	ite	pl
 8016ca8:	f002 020f 	andpl.w	r2, r2, #15
 8016cac:	1112      	asrmi	r2, r2, #4
 8016cae:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016cb2:	b2d2      	uxtb	r2, r2
 8016cb4:	2a00      	cmp	r2, #0
 8016cb6:	d042      	beq.n	8016d3e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8016cb8:	497b      	ldr	r1, [pc, #492]	@ (8016ea8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8016cba:	680f      	ldr	r7, [r1, #0]
 8016cbc:	9905      	ldr	r1, [sp, #20]
 8016cbe:	fa5f fb87 	uxtb.w	fp, r7
 8016cc2:	434a      	muls	r2, r1
 8016cc4:	f102 0801 	add.w	r8, r2, #1
 8016cc8:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8016ccc:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8016cd0:	1212      	asrs	r2, r2, #8
 8016cd2:	fa1f fa82 	uxth.w	sl, r2
 8016cd6:	43d2      	mvns	r2, r2
 8016cd8:	fb1b fb0a 	smulbb	fp, fp, sl
 8016cdc:	b2d2      	uxtb	r2, r2
 8016cde:	fb08 b802 	mla	r8, r8, r2, fp
 8016ce2:	fa1f f888 	uxth.w	r8, r8
 8016ce6:	f108 0b01 	add.w	fp, r8, #1
 8016cea:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016cee:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016cf2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016cf6:	fb1b fb0a 	smulbb	fp, fp, sl
 8016cfa:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016cfe:	fb17 fa0a 	smulbb	sl, r7, sl
 8016d02:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016d06:	f806 8c03 	strb.w	r8, [r6, #-3]
 8016d0a:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8016d0e:	fb07 aa02 	mla	sl, r7, r2, sl
 8016d12:	fb08 b802 	mla	r8, r8, r2, fp
 8016d16:	fa1f fa8a 	uxth.w	sl, sl
 8016d1a:	fa1f f888 	uxth.w	r8, r8
 8016d1e:	f10a 0701 	add.w	r7, sl, #1
 8016d22:	f108 0b01 	add.w	fp, r8, #1
 8016d26:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016d2a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016d2e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016d32:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016d36:	f806 ac01 	strb.w	sl, [r6, #-1]
 8016d3a:	f806 8c02 	strb.w	r8, [r6, #-2]
 8016d3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016d40:	4474      	add	r4, lr
 8016d42:	3603      	adds	r6, #3
 8016d44:	f109 39ff 	add.w	r9, r9, #4294967295
 8016d48:	4410      	add	r0, r2
 8016d4a:	e7a0      	b.n	8016c8e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016d4c:	2700      	movs	r7, #0
 8016d4e:	1bda      	subs	r2, r3, r7
 8016d50:	2a00      	cmp	r2, #0
 8016d52:	dc3e      	bgt.n	8016dd2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8016d54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016d58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016d5c:	441d      	add	r5, r3
 8016d5e:	9b01      	ldr	r3, [sp, #4]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	f340 809e 	ble.w	8016ea2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016d66:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016d6a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016d6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016d70:	eeb0 6a62 	vmov.f32	s12, s5
 8016d74:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016d78:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016d7c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016d80:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8016d84:	eeb0 6a43 	vmov.f32	s12, s6
 8016d88:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016d8c:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8016d90:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016d94:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016d98:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016d9c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016da0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016da4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016da8:	ee12 2a90 	vmov	r2, s5
 8016dac:	eef0 2a47 	vmov.f32	s5, s14
 8016db0:	fb92 fef3 	sdiv	lr, r2, r3
 8016db4:	ee13 2a10 	vmov	r2, s6
 8016db8:	eeb0 3a67 	vmov.f32	s6, s15
 8016dbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8016dc0:	9314      	str	r3, [sp, #80]	@ 0x50
 8016dc2:	9b01      	ldr	r3, [sp, #4]
 8016dc4:	9a04      	ldr	r2, [sp, #16]
 8016dc6:	3b01      	subs	r3, #1
 8016dc8:	9301      	str	r3, [sp, #4]
 8016dca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016dcc:	bf08      	it	eq
 8016dce:	4613      	moveq	r3, r2
 8016dd0:	e72b      	b.n	8016c2a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8016dd2:	1426      	asrs	r6, r4, #16
 8016dd4:	d460      	bmi.n	8016e98 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016dd6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016dda:	42b2      	cmp	r2, r6
 8016ddc:	dd5c      	ble.n	8016e98 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016dde:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016de2:	d459      	bmi.n	8016e98 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016de4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016de8:	4542      	cmp	r2, r8
 8016dea:	dd55      	ble.n	8016e98 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016dec:	9a02      	ldr	r2, [sp, #8]
 8016dee:	9903      	ldr	r1, [sp, #12]
 8016df0:	fb08 6602 	mla	r6, r8, r2, r6
 8016df4:	0872      	lsrs	r2, r6, #1
 8016df6:	07f6      	lsls	r6, r6, #31
 8016df8:	5c8a      	ldrb	r2, [r1, r2]
 8016dfa:	bf54      	ite	pl
 8016dfc:	f002 020f 	andpl.w	r2, r2, #15
 8016e00:	1112      	asrmi	r2, r2, #4
 8016e02:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016e06:	b2d2      	uxtb	r2, r2
 8016e08:	2a00      	cmp	r2, #0
 8016e0a:	d045      	beq.n	8016e98 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016e0c:	4926      	ldr	r1, [pc, #152]	@ (8016ea8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8016e0e:	f8d1 8000 	ldr.w	r8, [r1]
 8016e12:	9905      	ldr	r1, [sp, #20]
 8016e14:	fa5f fb88 	uxtb.w	fp, r8
 8016e18:	434a      	muls	r2, r1
 8016e1a:	1c56      	adds	r6, r2, #1
 8016e1c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016e20:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016e24:	1212      	asrs	r2, r2, #8
 8016e26:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016e2a:	fa1f fa82 	uxth.w	sl, r2
 8016e2e:	43d2      	mvns	r2, r2
 8016e30:	fb1b fb0a 	smulbb	fp, fp, sl
 8016e34:	b2d2      	uxtb	r2, r2
 8016e36:	fb09 b902 	mla	r9, r9, r2, fp
 8016e3a:	fa1f f989 	uxth.w	r9, r9
 8016e3e:	f109 0b01 	add.w	fp, r9, #1
 8016e42:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016e46:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8016e4a:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8016e4e:	fb1b fb0a 	smulbb	fp, fp, sl
 8016e52:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016e56:	fb18 fa0a 	smulbb	sl, r8, sl
 8016e5a:	f805 9006 	strb.w	r9, [r5, r6]
 8016e5e:	442e      	add	r6, r5
 8016e60:	f896 8002 	ldrb.w	r8, [r6, #2]
 8016e64:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016e68:	fb08 aa02 	mla	sl, r8, r2, sl
 8016e6c:	fb09 b902 	mla	r9, r9, r2, fp
 8016e70:	fa1f fa8a 	uxth.w	sl, sl
 8016e74:	fa1f f989 	uxth.w	r9, r9
 8016e78:	f10a 0801 	add.w	r8, sl, #1
 8016e7c:	f109 0b01 	add.w	fp, r9, #1
 8016e80:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8016e84:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016e88:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016e8c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016e90:	f886 a002 	strb.w	sl, [r6, #2]
 8016e94:	f886 9001 	strb.w	r9, [r6, #1]
 8016e98:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016e9a:	4474      	add	r4, lr
 8016e9c:	3701      	adds	r7, #1
 8016e9e:	4410      	add	r0, r2
 8016ea0:	e755      	b.n	8016d4e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8016ea2:	b007      	add	sp, #28
 8016ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ea8:	24025130 	.word	0x24025130

08016eac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eb0:	b085      	sub	sp, #20
 8016eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016eb6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8016eb8:	9203      	str	r2, [sp, #12]
 8016eba:	6860      	ldr	r0, [r4, #4]
 8016ebc:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8016ec0:	9100      	str	r1, [sp, #0]
 8016ec2:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 8016ec6:	fb00 2606 	mla	r6, r0, r6, r2
 8016eca:	6822      	ldr	r2, [r4, #0]
 8016ecc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016ed0:	4416      	add	r6, r2
 8016ed2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016ed6:	3201      	adds	r2, #1
 8016ed8:	f022 0201 	bic.w	r2, r2, #1
 8016edc:	9201      	str	r2, [sp, #4]
 8016ede:	f8dc 2000 	ldr.w	r2, [ip]
 8016ee2:	9202      	str	r2, [sp, #8]
 8016ee4:	9a00      	ldr	r2, [sp, #0]
 8016ee6:	2a00      	cmp	r2, #0
 8016ee8:	dc03      	bgt.n	8016ef2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8016eea:	9a03      	ldr	r2, [sp, #12]
 8016eec:	2a00      	cmp	r2, #0
 8016eee:	f340 8140 	ble.w	8017172 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8016ef2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016ef4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016ef8:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 8016efc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016efe:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016f02:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	dd0e      	ble.n	8016f28 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016f0a:	142a      	asrs	r2, r5, #16
 8016f0c:	d405      	bmi.n	8016f1a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016f0e:	4572      	cmp	r2, lr
 8016f10:	da03      	bge.n	8016f1a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016f12:	1422      	asrs	r2, r4, #16
 8016f14:	d401      	bmi.n	8016f1a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016f16:	42ba      	cmp	r2, r7
 8016f18:	db07      	blt.n	8016f2a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016f1a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016f1c:	3b01      	subs	r3, #1
 8016f1e:	3603      	adds	r6, #3
 8016f20:	4415      	add	r5, r2
 8016f22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016f24:	4414      	add	r4, r2
 8016f26:	e7ee      	b.n	8016f06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8016f28:	d072      	beq.n	8017010 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016f2a:	1e5a      	subs	r2, r3, #1
 8016f2c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016f2e:	fb00 5002 	mla	r0, r0, r2, r5
 8016f32:	1400      	asrs	r0, r0, #16
 8016f34:	d463      	bmi.n	8016ffe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016f36:	4570      	cmp	r0, lr
 8016f38:	da61      	bge.n	8016ffe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016f3a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016f3c:	fb00 4202 	mla	r2, r0, r2, r4
 8016f40:	1412      	asrs	r2, r2, #16
 8016f42:	d45c      	bmi.n	8016ffe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016f44:	42ba      	cmp	r2, r7
 8016f46:	da5a      	bge.n	8016ffe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016f48:	1cf0      	adds	r0, r6, #3
 8016f4a:	469a      	mov	sl, r3
 8016f4c:	f1ba 0f00 	cmp.w	sl, #0
 8016f50:	dd59      	ble.n	8017006 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8016f52:	142a      	asrs	r2, r5, #16
 8016f54:	9901      	ldr	r1, [sp, #4]
 8016f56:	1427      	asrs	r7, r4, #16
 8016f58:	fb01 2707 	mla	r7, r1, r7, r2
 8016f5c:	9902      	ldr	r1, [sp, #8]
 8016f5e:	087a      	lsrs	r2, r7, #1
 8016f60:	5c8a      	ldrb	r2, [r1, r2]
 8016f62:	07f9      	lsls	r1, r7, #31
 8016f64:	bf54      	ite	pl
 8016f66:	f002 020f 	andpl.w	r2, r2, #15
 8016f6a:	1112      	asrmi	r2, r2, #4
 8016f6c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016f70:	b2d2      	uxtb	r2, r2
 8016f72:	2a00      	cmp	r2, #0
 8016f74:	d03b      	beq.n	8016fee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016f76:	4980      	ldr	r1, [pc, #512]	@ (8017178 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8016f78:	2aff      	cmp	r2, #255	@ 0xff
 8016f7a:	680f      	ldr	r7, [r1, #0]
 8016f7c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016f80:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016f84:	b2ff      	uxtb	r7, r7
 8016f86:	f000 80ed 	beq.w	8017164 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8016f8a:	fa1f f882 	uxth.w	r8, r2
 8016f8e:	43d2      	mvns	r2, r2
 8016f90:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8016f94:	fb17 f708 	smulbb	r7, r7, r8
 8016f98:	b2d2      	uxtb	r2, r2
 8016f9a:	fb19 f908 	smulbb	r9, r9, r8
 8016f9e:	fb0e 7702 	mla	r7, lr, r2, r7
 8016fa2:	fb1b f808 	smulbb	r8, fp, r8
 8016fa6:	b2bf      	uxth	r7, r7
 8016fa8:	f107 0e01 	add.w	lr, r7, #1
 8016fac:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8016fb0:	123f      	asrs	r7, r7, #8
 8016fb2:	f800 7c03 	strb.w	r7, [r0, #-3]
 8016fb6:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8016fba:	fb07 9902 	mla	r9, r7, r2, r9
 8016fbe:	fa1f f989 	uxth.w	r9, r9
 8016fc2:	f109 0701 	add.w	r7, r9, #1
 8016fc6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8016fca:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8016fce:	fb07 8802 	mla	r8, r7, r2, r8
 8016fd2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016fd6:	fa1f f888 	uxth.w	r8, r8
 8016fda:	f800 9c02 	strb.w	r9, [r0, #-2]
 8016fde:	f108 0201 	add.w	r2, r8, #1
 8016fe2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8016fe6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016fea:	f800 8c01 	strb.w	r8, [r0, #-1]
 8016fee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016ff0:	3003      	adds	r0, #3
 8016ff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016ff6:	4415      	add	r5, r2
 8016ff8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016ffa:	4414      	add	r4, r2
 8016ffc:	e7a6      	b.n	8016f4c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8016ffe:	2700      	movs	r7, #0
 8017000:	1bda      	subs	r2, r3, r7
 8017002:	2a00      	cmp	r2, #0
 8017004:	dc40      	bgt.n	8017088 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8017006:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801700a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801700e:	441e      	add	r6, r3
 8017010:	9b00      	ldr	r3, [sp, #0]
 8017012:	2b00      	cmp	r3, #0
 8017014:	f340 80ad 	ble.w	8017172 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8017018:	ee30 0a04 	vadd.f32	s0, s0, s8
 801701c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801701e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017022:	eeb0 6a62 	vmov.f32	s12, s5
 8017026:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801702a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801702e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017032:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8017036:	eeb0 6a43 	vmov.f32	s12, s6
 801703a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801703e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8017042:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017046:	ee61 7a27 	vmul.f32	s15, s2, s15
 801704a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801704e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017052:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017056:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801705a:	ee12 2a90 	vmov	r2, s5
 801705e:	eef0 2a47 	vmov.f32	s5, s14
 8017062:	fb92 f3f3 	sdiv	r3, r2, r3
 8017066:	ee13 2a10 	vmov	r2, s6
 801706a:	9311      	str	r3, [sp, #68]	@ 0x44
 801706c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801706e:	eeb0 3a67 	vmov.f32	s6, s15
 8017072:	fb92 f3f3 	sdiv	r3, r2, r3
 8017076:	9312      	str	r3, [sp, #72]	@ 0x48
 8017078:	9b00      	ldr	r3, [sp, #0]
 801707a:	9a03      	ldr	r2, [sp, #12]
 801707c:	3b01      	subs	r3, #1
 801707e:	9300      	str	r3, [sp, #0]
 8017080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017082:	bf08      	it	eq
 8017084:	4613      	moveq	r3, r2
 8017086:	e72d      	b.n	8016ee4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8017088:	1428      	asrs	r0, r5, #16
 801708a:	d45c      	bmi.n	8017146 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801708c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017090:	4282      	cmp	r2, r0
 8017092:	dd58      	ble.n	8017146 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017094:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8017098:	d455      	bmi.n	8017146 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801709a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801709e:	4572      	cmp	r2, lr
 80170a0:	dd51      	ble.n	8017146 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80170a2:	9a01      	ldr	r2, [sp, #4]
 80170a4:	9902      	ldr	r1, [sp, #8]
 80170a6:	fb0e 0002 	mla	r0, lr, r2, r0
 80170aa:	0842      	lsrs	r2, r0, #1
 80170ac:	07c0      	lsls	r0, r0, #31
 80170ae:	5c8a      	ldrb	r2, [r1, r2]
 80170b0:	bf54      	ite	pl
 80170b2:	f002 020f 	andpl.w	r2, r2, #15
 80170b6:	1112      	asrmi	r2, r2, #4
 80170b8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80170bc:	b2d2      	uxtb	r2, r2
 80170be:	2a00      	cmp	r2, #0
 80170c0:	d041      	beq.n	8017146 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80170c2:	492d      	ldr	r1, [pc, #180]	@ (8017178 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80170c4:	2aff      	cmp	r2, #255	@ 0xff
 80170c6:	6808      	ldr	r0, [r1, #0]
 80170c8:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 80170cc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80170d0:	fa5f fe80 	uxtb.w	lr, r0
 80170d4:	ea4f 0047 	mov.w	r0, r7, lsl #1
 80170d8:	d03b      	beq.n	8017152 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80170da:	fa1f f982 	uxth.w	r9, r2
 80170de:	4438      	add	r0, r7
 80170e0:	43d2      	mvns	r2, r2
 80170e2:	f816 8000 	ldrb.w	r8, [r6, r0]
 80170e6:	fb1e fe09 	smulbb	lr, lr, r9
 80170ea:	fb1a fa09 	smulbb	sl, sl, r9
 80170ee:	b2d2      	uxtb	r2, r2
 80170f0:	fb1b f909 	smulbb	r9, fp, r9
 80170f4:	fb08 ee02 	mla	lr, r8, r2, lr
 80170f8:	fa1f fe8e 	uxth.w	lr, lr
 80170fc:	f10e 0801 	add.w	r8, lr, #1
 8017100:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8017104:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017108:	f806 e000 	strb.w	lr, [r6, r0]
 801710c:	4430      	add	r0, r6
 801710e:	f890 e001 	ldrb.w	lr, [r0, #1]
 8017112:	fb0e aa02 	mla	sl, lr, r2, sl
 8017116:	fa1f fa8a 	uxth.w	sl, sl
 801711a:	f10a 0e01 	add.w	lr, sl, #1
 801711e:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8017122:	f890 e002 	ldrb.w	lr, [r0, #2]
 8017126:	fb0e 9902 	mla	r9, lr, r2, r9
 801712a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801712e:	fa1f f989 	uxth.w	r9, r9
 8017132:	f880 a001 	strb.w	sl, [r0, #1]
 8017136:	f109 0201 	add.w	r2, r9, #1
 801713a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801713e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017142:	f880 9002 	strb.w	r9, [r0, #2]
 8017146:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017148:	3701      	adds	r7, #1
 801714a:	4415      	add	r5, r2
 801714c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801714e:	4414      	add	r4, r2
 8017150:	e756      	b.n	8017000 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017152:	4438      	add	r0, r7
 8017154:	f806 e000 	strb.w	lr, [r6, r0]
 8017158:	4430      	add	r0, r6
 801715a:	f880 a001 	strb.w	sl, [r0, #1]
 801715e:	f880 b002 	strb.w	fp, [r0, #2]
 8017162:	e7f0      	b.n	8017146 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017164:	f800 7c03 	strb.w	r7, [r0, #-3]
 8017168:	f800 9c02 	strb.w	r9, [r0, #-2]
 801716c:	f800 bc01 	strb.w	fp, [r0, #-1]
 8017170:	e73d      	b.n	8016fee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8017172:	b005      	add	sp, #20
 8017174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017178:	24025130 	.word	0x24025130

0801717c <_ZN8touchgfx8LCD24bppD1Ev>:
 801717c:	4770      	bx	lr

0801717e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 801717e:	4770      	bx	lr

08017180 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8017180:	4770      	bx	lr

08017182 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8017182:	4770      	bx	lr

08017184 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8017184:	4770      	bx	lr

08017186 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8017186:	4770      	bx	lr

08017188 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8017188:	4770      	bx	lr

0801718a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801718a:	4770      	bx	lr

0801718c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801718c:	4770      	bx	lr

0801718e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801718e:	4770      	bx	lr

08017190 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017190:	4770      	bx	lr

08017192 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017192:	4770      	bx	lr

08017194 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017194:	4770      	bx	lr

08017196 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8017196:	4770      	bx	lr

08017198 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8017198:	4770      	bx	lr

0801719a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801719a:	4770      	bx	lr

0801719c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801719c:	4770      	bx	lr

0801719e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801719e:	4770      	bx	lr

080171a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80171a0:	4770      	bx	lr

080171a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80171a2:	4770      	bx	lr

080171a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80171a4:	4770      	bx	lr

080171a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80171a6:	4770      	bx	lr

080171a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80171a8:	4770      	bx	lr

080171aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80171aa:	4770      	bx	lr

080171ac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80171ac:	4770      	bx	lr
	...

080171b0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80171b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171b2:	4606      	mov	r6, r0
 80171b4:	b087      	sub	sp, #28
 80171b6:	4615      	mov	r5, r2
 80171b8:	461f      	mov	r7, r3
 80171ba:	b353      	cbz	r3, 8017212 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80171bc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	dd26      	ble.n	8017212 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80171c4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	dd22      	ble.n	8017212 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80171cc:	6808      	ldr	r0, [r1, #0]
 80171ce:	aa04      	add	r2, sp, #16
 80171d0:	6849      	ldr	r1, [r1, #4]
 80171d2:	4c1b      	ldr	r4, [pc, #108]	@ (8017240 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80171d4:	c203      	stmia	r2!, {r0, r1}
 80171d6:	a804      	add	r0, sp, #16
 80171d8:	f7fa fda0 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80171dc:	6820      	ldr	r0, [r4, #0]
 80171de:	6803      	ldr	r3, [r0, #0]
 80171e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80171e2:	4798      	blx	r3
 80171e4:	2fff      	cmp	r7, #255	@ 0xff
 80171e6:	d016      	beq.n	8017216 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80171e8:	f010 0f08 	tst.w	r0, #8
 80171ec:	6820      	ldr	r0, [r4, #0]
 80171ee:	d015      	beq.n	801721c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 80171f0:	2400      	movs	r4, #0
 80171f2:	6801      	ldr	r1, [r0, #0]
 80171f4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80171f8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80171fc:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8017200:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8017204:	9401      	str	r4, [sp, #4]
 8017206:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801720a:	9400      	str	r4, [sp, #0]
 801720c:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 801720e:	4629      	mov	r1, r5
 8017210:	47a0      	blx	r4
 8017212:	b007      	add	sp, #28
 8017214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017216:	f010 0f02 	tst.w	r0, #2
 801721a:	e7e7      	b.n	80171ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801721c:	6803      	ldr	r3, [r0, #0]
 801721e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017220:	4798      	blx	r3
 8017222:	4b08      	ldr	r3, [pc, #32]	@ (8017244 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8017224:	4601      	mov	r1, r0
 8017226:	4630      	mov	r0, r6
 8017228:	881a      	ldrh	r2, [r3, #0]
 801722a:	6833      	ldr	r3, [r6, #0]
 801722c:	e9cd 5700 	strd	r5, r7, [sp]
 8017230:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8017232:	ab04      	add	r3, sp, #16
 8017234:	47a8      	blx	r5
 8017236:	6820      	ldr	r0, [r4, #0]
 8017238:	6803      	ldr	r3, [r0, #0]
 801723a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801723c:	4798      	blx	r3
 801723e:	e7e8      	b.n	8017212 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017240:	24025120 	.word	0x24025120
 8017244:	2402511a 	.word	0x2402511a

08017248 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8017248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801724c:	b08b      	sub	sp, #44	@ 0x2c
 801724e:	460d      	mov	r5, r1
 8017250:	4616      	mov	r6, r2
 8017252:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 8017256:	f1b8 0f00 	cmp.w	r8, #0
 801725a:	d047      	beq.n	80172ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801725c:	6810      	ldr	r0, [r2, #0]
 801725e:	ac06      	add	r4, sp, #24
 8017260:	6851      	ldr	r1, [r2, #4]
 8017262:	4f51      	ldr	r7, [pc, #324]	@ (80173a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8017264:	c403      	stmia	r4!, {r0, r1}
 8017266:	6818      	ldr	r0, [r3, #0]
 8017268:	ac08      	add	r4, sp, #32
 801726a:	6859      	ldr	r1, [r3, #4]
 801726c:	c403      	stmia	r4!, {r0, r1}
 801726e:	a806      	add	r0, sp, #24
 8017270:	f7fa fd54 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017274:	4631      	mov	r1, r6
 8017276:	a808      	add	r0, sp, #32
 8017278:	f7fa fd78 	bl	8011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801727c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017280:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8017284:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017288:	6838      	ldr	r0, [r7, #0]
 801728a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801728e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8017292:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 8017296:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801729a:	440d      	add	r5, r1
 801729c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80172a0:	440a      	add	r2, r1
 80172a2:	f8ad 2020 	strh.w	r2, [sp, #32]
 80172a6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80172aa:	4413      	add	r3, r2
 80172ac:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80172b0:	6803      	ldr	r3, [r0, #0]
 80172b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80172b4:	4798      	blx	r3
 80172b6:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80172ba:	d01a      	beq.n	80172f2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 80172bc:	f010 0f04 	tst.w	r0, #4
 80172c0:	6838      	ldr	r0, [r7, #0]
 80172c2:	d019      	beq.n	80172f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80172c4:	2100      	movs	r1, #0
 80172c6:	6807      	ldr	r7, [r0, #0]
 80172c8:	b2a4      	uxth	r4, r4
 80172ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80172ce:	b2b6      	uxth	r6, r6
 80172d0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80172d4:	9401      	str	r4, [sp, #4]
 80172d6:	9600      	str	r6, [sp, #0]
 80172d8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80172dc:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80172e0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80172e4:	9102      	str	r1, [sp, #8]
 80172e6:	4629      	mov	r1, r5
 80172e8:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 80172ea:	47a0      	blx	r4
 80172ec:	b00b      	add	sp, #44	@ 0x2c
 80172ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172f2:	f010 0f01 	tst.w	r0, #1
 80172f6:	e7e3      	b.n	80172c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 80172f8:	6803      	ldr	r3, [r0, #0]
 80172fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80172fc:	4798      	blx	r3
 80172fe:	4a2b      	ldr	r2, [pc, #172]	@ (80173ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8017300:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8017304:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8017308:	8813      	ldrh	r3, [r2, #0]
 801730a:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801730e:	fb03 f404 	mul.w	r4, r3, r4
 8017312:	fb03 c101 	mla	r1, r3, r1, ip
 8017316:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801731a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801731e:	4408      	add	r0, r1
 8017320:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8017324:	4404      	add	r4, r0
 8017326:	d02e      	beq.n	8017386 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8017328:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801732c:	1b9b      	subs	r3, r3, r6
 801732e:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8017332:	1b96      	subs	r6, r2, r6
 8017334:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017338:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801733c:	42a0      	cmp	r0, r4
 801733e:	d22d      	bcs.n	801739c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8017340:	eb00 0e01 	add.w	lr, r0, r1
 8017344:	4570      	cmp	r0, lr
 8017346:	d210      	bcs.n	801736a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8017348:	f890 9000 	ldrb.w	r9, [r0]
 801734c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8017350:	fb19 f90c 	smulbb	r9, r9, ip
 8017354:	fb02 9208 	mla	r2, r2, r8, r9
 8017358:	b292      	uxth	r2, r2
 801735a:	f102 0901 	add.w	r9, r2, #1
 801735e:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8017362:	1212      	asrs	r2, r2, #8
 8017364:	f800 2b01 	strb.w	r2, [r0], #1
 8017368:	e7ec      	b.n	8017344 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801736a:	4418      	add	r0, r3
 801736c:	4435      	add	r5, r6
 801736e:	e7e5      	b.n	801733c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8017370:	8813      	ldrh	r3, [r2, #0]
 8017372:	1b9b      	subs	r3, r3, r6
 8017374:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017378:	4418      	add	r0, r3
 801737a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801737e:	1b9b      	subs	r3, r3, r6
 8017380:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017384:	441d      	add	r5, r3
 8017386:	42a0      	cmp	r0, r4
 8017388:	d208      	bcs.n	801739c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801738a:	eb00 0c01 	add.w	ip, r0, r1
 801738e:	4560      	cmp	r0, ip
 8017390:	d2ee      	bcs.n	8017370 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8017392:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017396:	f800 3b01 	strb.w	r3, [r0], #1
 801739a:	e7f8      	b.n	801738e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801739c:	6838      	ldr	r0, [r7, #0]
 801739e:	6803      	ldr	r3, [r0, #0]
 80173a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80173a2:	4798      	blx	r3
 80173a4:	e7a2      	b.n	80172ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80173a6:	bf00      	nop
 80173a8:	24025120 	.word	0x24025120
 80173ac:	2402511a 	.word	0x2402511a

080173b0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80173b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173b2:	2300      	movs	r3, #0
 80173b4:	b085      	sub	sp, #20
 80173b6:	9300      	str	r3, [sp, #0]
 80173b8:	4b41      	ldr	r3, [pc, #260]	@ (80174c0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 80173ba:	781b      	ldrb	r3, [r3, #0]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d136      	bne.n	801742e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 80173c0:	4a40      	ldr	r2, [pc, #256]	@ (80174c4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80173c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80173c6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d131      	bne.n	8017432 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 80173ce:	4b3e      	ldr	r3, [pc, #248]	@ (80174c8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80173d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173d4:	ac02      	add	r4, sp, #8
 80173d6:	6808      	ldr	r0, [r1, #0]
 80173d8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80173dc:	ab02      	add	r3, sp, #8
 80173de:	6849      	ldr	r1, [r1, #4]
 80173e0:	4d3a      	ldr	r5, [pc, #232]	@ (80174cc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 80173e2:	c303      	stmia	r3!, {r0, r1}
 80173e4:	4669      	mov	r1, sp
 80173e6:	4620      	mov	r0, r4
 80173e8:	f7fa fcc0 	bl	8011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80173ec:	4668      	mov	r0, sp
 80173ee:	f7fa fc95 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80173f2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80173f6:	f8bd 2000 	ldrh.w	r2, [sp]
 80173fa:	462e      	mov	r6, r5
 80173fc:	6828      	ldr	r0, [r5, #0]
 80173fe:	4413      	add	r3, r2
 8017400:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017404:	f8ad 3008 	strh.w	r3, [sp, #8]
 8017408:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801740c:	4413      	add	r3, r2
 801740e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8017412:	6803      	ldr	r3, [r0, #0]
 8017414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017416:	4798      	blx	r3
 8017418:	f010 0f01 	tst.w	r0, #1
 801741c:	d00b      	beq.n	8017436 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801741e:	6828      	ldr	r0, [r5, #0]
 8017420:	6803      	ldr	r3, [r0, #0]
 8017422:	e894 0006 	ldmia.w	r4, {r1, r2}
 8017426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017428:	4798      	blx	r3
 801742a:	b005      	add	sp, #20
 801742c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801742e:	4a26      	ldr	r2, [pc, #152]	@ (80174c8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8017430:	e7c7      	b.n	80173c2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8017432:	4b24      	ldr	r3, [pc, #144]	@ (80174c4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8017434:	e7cc      	b.n	80173d0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8017436:	6830      	ldr	r0, [r6, #0]
 8017438:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801743c:	6803      	ldr	r3, [r0, #0]
 801743e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8017442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017444:	4798      	blx	r3
 8017446:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801744a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801744e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8017452:	fb14 3402 	smlabb	r4, r4, r2, r3
 8017456:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801745a:	4404      	add	r4, r0
 801745c:	6830      	ldr	r0, [r6, #0]
 801745e:	6803      	ldr	r3, [r0, #0]
 8017460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017462:	4798      	blx	r3
 8017464:	4917      	ldr	r1, [pc, #92]	@ (80174c4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8017466:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801746a:	880b      	ldrh	r3, [r1, #0]
 801746c:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8017470:	fb03 c202 	mla	r2, r3, r2, ip
 8017474:	437b      	muls	r3, r7
 8017476:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801747a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801747e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017482:	4410      	add	r0, r2
 8017484:	18c2      	adds	r2, r0, r3
 8017486:	4290      	cmp	r0, r2
 8017488:	d214      	bcs.n	80174b4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801748a:	eb00 0c07 	add.w	ip, r0, r7
 801748e:	4560      	cmp	r0, ip
 8017490:	d204      	bcs.n	801749c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8017492:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017496:	f800 3b01 	strb.w	r3, [r0], #1
 801749a:	e7f8      	b.n	801748e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801749c:	880b      	ldrh	r3, [r1, #0]
 801749e:	1b5b      	subs	r3, r3, r5
 80174a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80174a4:	4418      	add	r0, r3
 80174a6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80174aa:	1b5b      	subs	r3, r3, r5
 80174ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80174b0:	441c      	add	r4, r3
 80174b2:	e7e8      	b.n	8017486 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 80174b4:	6830      	ldr	r0, [r6, #0]
 80174b6:	6803      	ldr	r3, [r0, #0]
 80174b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80174ba:	4798      	blx	r3
 80174bc:	e7b5      	b.n	801742a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80174be:	bf00      	nop
 80174c0:	24025118 	.word	0x24025118
 80174c4:	2402511a 	.word	0x2402511a
 80174c8:	2402511c 	.word	0x2402511c
 80174cc:	24025120 	.word	0x24025120

080174d0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80174d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174d4:	b08f      	sub	sp, #60	@ 0x3c
 80174d6:	461c      	mov	r4, r3
 80174d8:	9203      	str	r2, [sp, #12]
 80174da:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80174de:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80174e0:	6820      	ldr	r0, [r4, #0]
 80174e2:	9100      	str	r1, [sp, #0]
 80174e4:	9204      	str	r2, [sp, #16]
 80174e6:	aa0a      	add	r2, sp, #40	@ 0x28
 80174e8:	6861      	ldr	r1, [r4, #4]
 80174ea:	c203      	stmia	r2!, {r0, r1}
 80174ec:	6818      	ldr	r0, [r3, #0]
 80174ee:	aa0c      	add	r2, sp, #48	@ 0x30
 80174f0:	6859      	ldr	r1, [r3, #4]
 80174f2:	c203      	stmia	r2!, {r0, r1}
 80174f4:	a80a      	add	r0, sp, #40	@ 0x28
 80174f6:	f7fa fc11 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80174fa:	4621      	mov	r1, r4
 80174fc:	a80c      	add	r0, sp, #48	@ 0x30
 80174fe:	f7fa fc35 	bl	8011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017502:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8017506:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801750a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801750e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8017512:	bfdb      	ittet	le
 8017514:	b2b3      	uxthle	r3, r6
 8017516:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801751a:	2301      	movgt	r3, #1
 801751c:	fb92 f3f3 	sdivle	r3, r2, r3
 8017520:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8017524:	441d      	add	r5, r3
 8017526:	fb92 f1f3 	sdiv	r1, r2, r3
 801752a:	fa1f fc81 	uxth.w	ip, r1
 801752e:	3d01      	subs	r5, #1
 8017530:	fb0c 2413 	mls	r4, ip, r3, r2
 8017534:	4661      	mov	r1, ip
 8017536:	fb14 f406 	smulbb	r4, r4, r6
 801753a:	4404      	add	r4, r0
 801753c:	fb95 f5f3 	sdiv	r5, r5, r3
 8017540:	b2a4      	uxth	r4, r4
 8017542:	b131      	cbz	r1, 8017552 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 8017544:	9b03      	ldr	r3, [sp, #12]
 8017546:	9900      	ldr	r1, [sp, #0]
 8017548:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801754c:	ba1b      	rev	r3, r3
 801754e:	4419      	add	r1, r3
 8017550:	9100      	str	r1, [sp, #0]
 8017552:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8017556:	b2ad      	uxth	r5, r5
 8017558:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801755c:	4418      	add	r0, r3
 801755e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8017562:	00ad      	lsls	r5, r5, #2
 8017564:	441a      	add	r2, r3
 8017566:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801756a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801756e:	9301      	str	r3, [sp, #4]
 8017570:	4b79      	ldr	r3, [pc, #484]	@ (8017758 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8017572:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8017576:	6818      	ldr	r0, [r3, #0]
 8017578:	6803      	ldr	r3, [r0, #0]
 801757a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801757c:	4798      	blx	r3
 801757e:	4a77      	ldr	r2, [pc, #476]	@ (801775c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 8017580:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8017584:	2c00      	cmp	r4, #0
 8017586:	8813      	ldrh	r3, [r2, #0]
 8017588:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801758c:	9209      	str	r2, [sp, #36]	@ 0x24
 801758e:	fb03 c101 	mla	r1, r3, r1, ip
 8017592:	fb06 f303 	mul.w	r3, r6, r3
 8017596:	bf18      	it	ne
 8017598:	2600      	movne	r6, #0
 801759a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801759e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80175a2:	4408      	add	r0, r1
 80175a4:	4403      	add	r3, r0
 80175a6:	9306      	str	r3, [sp, #24]
 80175a8:	f105 0304 	add.w	r3, r5, #4
 80175ac:	9305      	str	r3, [sp, #20]
 80175ae:	9b01      	ldr	r3, [sp, #4]
 80175b0:	bf08      	it	eq
 80175b2:	461e      	moveq	r6, r3
 80175b4:	2300      	movs	r3, #0
 80175b6:	b2b6      	uxth	r6, r6
 80175b8:	9302      	str	r3, [sp, #8]
 80175ba:	9a06      	ldr	r2, [sp, #24]
 80175bc:	4290      	cmp	r0, r2
 80175be:	f080 80c2 	bcs.w	8017746 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 80175c2:	b963      	cbnz	r3, 80175de <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 80175c4:	9b00      	ldr	r3, [sp, #0]
 80175c6:	781a      	ldrb	r2, [r3, #0]
 80175c8:	0993      	lsrs	r3, r2, #6
 80175ca:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80175ce:	9202      	str	r2, [sp, #8]
 80175d0:	1e5a      	subs	r2, r3, #1
 80175d2:	2a02      	cmp	r2, #2
 80175d4:	d815      	bhi.n	8017602 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 80175d6:	9a00      	ldr	r2, [sp, #0]
 80175d8:	b29b      	uxth	r3, r3
 80175da:	3201      	adds	r2, #1
 80175dc:	9200      	str	r2, [sp, #0]
 80175de:	b1b4      	cbz	r4, 801760e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 80175e0:	429c      	cmp	r4, r3
 80175e2:	bf91      	iteee	ls
 80175e4:	1b1c      	subls	r4, r3, r4
 80175e6:	1ae4      	subhi	r4, r4, r3
 80175e8:	4635      	movhi	r5, r6
 80175ea:	f04f 0e00 	movhi.w	lr, #0
 80175ee:	bf9b      	ittet	ls
 80175f0:	fa1f fe84 	uxthls.w	lr, r4
 80175f4:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 80175f8:	b2a4      	uxthhi	r4, r4
 80175fa:	2400      	movls	r4, #0
 80175fc:	4673      	mov	r3, lr
 80175fe:	462e      	mov	r6, r5
 8017600:	e7db      	b.n	80175ba <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8017602:	9a00      	ldr	r2, [sp, #0]
 8017604:	9b00      	ldr	r3, [sp, #0]
 8017606:	3202      	adds	r2, #2
 8017608:	785b      	ldrb	r3, [r3, #1]
 801760a:	9200      	str	r2, [sp, #0]
 801760c:	e7e7      	b.n	80175de <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801760e:	2204      	movs	r2, #4
 8017610:	9905      	ldr	r1, [sp, #20]
 8017612:	429e      	cmp	r6, r3
 8017614:	4615      	mov	r5, r2
 8017616:	9a02      	ldr	r2, [sp, #8]
 8017618:	bf94      	ite	ls
 801761a:	eba3 0e06 	subls.w	lr, r3, r6
 801761e:	46a6      	movhi	lr, r4
 8017620:	fb15 1202 	smlabb	r2, r5, r2, r1
 8017624:	9903      	ldr	r1, [sp, #12]
 8017626:	bf8c      	ite	hi
 8017628:	1af5      	subhi	r5, r6, r3
 801762a:	fa1f fe8e 	uxthls.w	lr, lr
 801762e:	f851 c002 	ldr.w	ip, [r1, r2]
 8017632:	bf9a      	itte	ls
 8017634:	4625      	movls	r5, r4
 8017636:	4632      	movls	r2, r6
 8017638:	b2ad      	uxthhi	r5, r5
 801763a:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801763e:	bf88      	it	hi
 8017640:	461a      	movhi	r2, r3
 8017642:	b179      	cbz	r1, 8017664 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8017644:	29ff      	cmp	r1, #255	@ 0xff
 8017646:	fa5f f98c 	uxtb.w	r9, ip
 801764a:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801764e:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8017652:	d126      	bne.n	80176a2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8017654:	9f04      	ldr	r7, [sp, #16]
 8017656:	2fff      	cmp	r7, #255	@ 0xff
 8017658:	d123      	bne.n	80176a2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801765a:	4682      	mov	sl, r0
 801765c:	4611      	mov	r1, r2
 801765e:	f10a 0a03 	add.w	sl, sl, #3
 8017662:	b9a9      	cbnz	r1, 8017690 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 8017664:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017668:	429e      	cmp	r6, r3
 801766a:	4410      	add	r0, r2
 801766c:	d8c6      	bhi.n	80175fc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801766e:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8017672:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8017676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017678:	1b64      	subs	r4, r4, r5
 801767a:	9a01      	ldr	r2, [sp, #4]
 801767c:	881b      	ldrh	r3, [r3, #0]
 801767e:	b2a4      	uxth	r4, r4
 8017680:	1a9b      	subs	r3, r3, r2
 8017682:	2c00      	cmp	r4, #0
 8017684:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017688:	bf18      	it	ne
 801768a:	2500      	movne	r5, #0
 801768c:	4418      	add	r0, r3
 801768e:	e7b5      	b.n	80175fc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8017690:	3901      	subs	r1, #1
 8017692:	f80a 9c03 	strb.w	r9, [sl, #-3]
 8017696:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801769a:	f80a cc01 	strb.w	ip, [sl, #-1]
 801769e:	b289      	uxth	r1, r1
 80176a0:	e7dd      	b.n	801765e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 80176a2:	9f04      	ldr	r7, [sp, #16]
 80176a4:	fb07 fa01 	mul.w	sl, r7, r1
 80176a8:	f10a 0101 	add.w	r1, sl, #1
 80176ac:	eb01 212a 	add.w	r1, r1, sl, asr #8
 80176b0:	1209      	asrs	r1, r1, #8
 80176b2:	ea6f 0a01 	mvn.w	sl, r1
 80176b6:	b289      	uxth	r1, r1
 80176b8:	fb19 f901 	smulbb	r9, r9, r1
 80176bc:	fa5f fa8a 	uxtb.w	sl, sl
 80176c0:	fb18 f801 	smulbb	r8, r8, r1
 80176c4:	fb1c f101 	smulbb	r1, ip, r1
 80176c8:	fa1f f789 	uxth.w	r7, r9
 80176cc:	4684      	mov	ip, r0
 80176ce:	4691      	mov	r9, r2
 80176d0:	9707      	str	r7, [sp, #28]
 80176d2:	b289      	uxth	r1, r1
 80176d4:	fa1f f788 	uxth.w	r7, r8
 80176d8:	9708      	str	r7, [sp, #32]
 80176da:	f10c 0c03 	add.w	ip, ip, #3
 80176de:	f1b9 0f00 	cmp.w	r9, #0
 80176e2:	d0bf      	beq.n	8017664 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 80176e4:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 80176e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80176ec:	9f07      	ldr	r7, [sp, #28]
 80176ee:	fa1f f989 	uxth.w	r9, r9
 80176f2:	fb08 780a 	mla	r8, r8, sl, r7
 80176f6:	9f08      	ldr	r7, [sp, #32]
 80176f8:	fa1f f888 	uxth.w	r8, r8
 80176fc:	f108 0b01 	add.w	fp, r8, #1
 8017700:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017704:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017708:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801770c:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8017710:	fb08 780a 	mla	r8, r8, sl, r7
 8017714:	fa1f f888 	uxth.w	r8, r8
 8017718:	f108 0b01 	add.w	fp, r8, #1
 801771c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017720:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017724:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8017728:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801772c:	fb08 180a 	mla	r8, r8, sl, r1
 8017730:	fa1f f888 	uxth.w	r8, r8
 8017734:	f108 0b01 	add.w	fp, r8, #1
 8017738:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801773c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017740:	f80c 8c01 	strb.w	r8, [ip, #-1]
 8017744:	e7c9      	b.n	80176da <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8017746:	4b04      	ldr	r3, [pc, #16]	@ (8017758 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8017748:	6818      	ldr	r0, [r3, #0]
 801774a:	6803      	ldr	r3, [r0, #0]
 801774c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801774e:	4798      	blx	r3
 8017750:	b00f      	add	sp, #60	@ 0x3c
 8017752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017756:	bf00      	nop
 8017758:	24025120 	.word	0x24025120
 801775c:	2402511a 	.word	0x2402511a

08017760 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8017760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017764:	b089      	sub	sp, #36	@ 0x24
 8017766:	4607      	mov	r7, r0
 8017768:	4689      	mov	r9, r1
 801776a:	4692      	mov	sl, r2
 801776c:	ac08      	add	r4, sp, #32
 801776e:	461e      	mov	r6, r3
 8017770:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8017774:	4620      	mov	r0, r4
 8017776:	f7fd ff77 	bl	8015668 <_ZNK8touchgfx6Bitmap7getDataEv>
 801777a:	683b      	ldr	r3, [r7, #0]
 801777c:	4605      	mov	r5, r0
 801777e:	4620      	mov	r0, r4
 8017780:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8017784:	f7fd feb6 	bl	80154f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017788:	4683      	mov	fp, r0
 801778a:	4620      	mov	r0, r4
 801778c:	f7fd fee6 	bl	801555c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017790:	4653      	mov	r3, sl
 8017792:	464a      	mov	r2, r9
 8017794:	4639      	mov	r1, r7
 8017796:	9500      	str	r5, [sp, #0]
 8017798:	e9cd b001 	strd	fp, r0, [sp, #4]
 801779c:	a806      	add	r0, sp, #24
 801779e:	47c0      	blx	r8
 80177a0:	a906      	add	r1, sp, #24
 80177a2:	4630      	mov	r0, r6
 80177a4:	f7fd fd8a 	bl	80152bc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 80177a8:	4628      	mov	r0, r5
 80177aa:	b009      	add	sp, #36	@ 0x24
 80177ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080177b0 <_ZN8touchgfx8LCD24bppD0Ev>:
 80177b0:	b510      	push	{r4, lr}
 80177b2:	4604      	mov	r4, r0
 80177b4:	216c      	movs	r1, #108	@ 0x6c
 80177b6:	f008 fc7f 	bl	80200b8 <_ZdlPvj>
 80177ba:	4620      	mov	r0, r4
 80177bc:	bd10      	pop	{r4, pc}

080177be <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 80177be:	b510      	push	{r4, lr}
 80177c0:	4604      	mov	r4, r0
 80177c2:	2104      	movs	r1, #4
 80177c4:	f008 fc78 	bl	80200b8 <_ZdlPvj>
 80177c8:	4620      	mov	r0, r4
 80177ca:	bd10      	pop	{r4, pc}

080177cc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 80177cc:	b510      	push	{r4, lr}
 80177ce:	4604      	mov	r4, r0
 80177d0:	2104      	movs	r1, #4
 80177d2:	f008 fc71 	bl	80200b8 <_ZdlPvj>
 80177d6:	4620      	mov	r0, r4
 80177d8:	bd10      	pop	{r4, pc}

080177da <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 80177da:	b510      	push	{r4, lr}
 80177dc:	4604      	mov	r4, r0
 80177de:	f640 0144 	movw	r1, #2116	@ 0x844
 80177e2:	f008 fc69 	bl	80200b8 <_ZdlPvj>
 80177e6:	4620      	mov	r0, r4
 80177e8:	bd10      	pop	{r4, pc}

080177ea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 80177ea:	b510      	push	{r4, lr}
 80177ec:	4604      	mov	r4, r0
 80177ee:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80177f2:	f008 fc61 	bl	80200b8 <_ZdlPvj>
 80177f6:	4620      	mov	r0, r4
 80177f8:	bd10      	pop	{r4, pc}

080177fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80177fa:	b510      	push	{r4, lr}
 80177fc:	4604      	mov	r4, r0
 80177fe:	2104      	movs	r1, #4
 8017800:	f008 fc5a 	bl	80200b8 <_ZdlPvj>
 8017804:	4620      	mov	r0, r4
 8017806:	bd10      	pop	{r4, pc}

08017808 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8017808:	b510      	push	{r4, lr}
 801780a:	4604      	mov	r4, r0
 801780c:	2104      	movs	r1, #4
 801780e:	f008 fc53 	bl	80200b8 <_ZdlPvj>
 8017812:	4620      	mov	r0, r4
 8017814:	bd10      	pop	{r4, pc}

08017816 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8017816:	b510      	push	{r4, lr}
 8017818:	4604      	mov	r4, r0
 801781a:	2104      	movs	r1, #4
 801781c:	f008 fc4c 	bl	80200b8 <_ZdlPvj>
 8017820:	4620      	mov	r0, r4
 8017822:	bd10      	pop	{r4, pc}

08017824 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8017824:	b510      	push	{r4, lr}
 8017826:	4604      	mov	r4, r0
 8017828:	2104      	movs	r1, #4
 801782a:	f008 fc45 	bl	80200b8 <_ZdlPvj>
 801782e:	4620      	mov	r0, r4
 8017830:	bd10      	pop	{r4, pc}

08017832 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017832:	b510      	push	{r4, lr}
 8017834:	4604      	mov	r4, r0
 8017836:	2104      	movs	r1, #4
 8017838:	f008 fc3e 	bl	80200b8 <_ZdlPvj>
 801783c:	4620      	mov	r0, r4
 801783e:	bd10      	pop	{r4, pc}

08017840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017840:	b510      	push	{r4, lr}
 8017842:	4604      	mov	r4, r0
 8017844:	2104      	movs	r1, #4
 8017846:	f008 fc37 	bl	80200b8 <_ZdlPvj>
 801784a:	4620      	mov	r0, r4
 801784c:	bd10      	pop	{r4, pc}

0801784e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801784e:	b510      	push	{r4, lr}
 8017850:	4604      	mov	r4, r0
 8017852:	2104      	movs	r1, #4
 8017854:	f008 fc30 	bl	80200b8 <_ZdlPvj>
 8017858:	4620      	mov	r0, r4
 801785a:	bd10      	pop	{r4, pc}

0801785c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801785c:	b510      	push	{r4, lr}
 801785e:	4604      	mov	r4, r0
 8017860:	2104      	movs	r1, #4
 8017862:	f008 fc29 	bl	80200b8 <_ZdlPvj>
 8017866:	4620      	mov	r0, r4
 8017868:	bd10      	pop	{r4, pc}

0801786a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801786a:	b510      	push	{r4, lr}
 801786c:	4604      	mov	r4, r0
 801786e:	2104      	movs	r1, #4
 8017870:	f008 fc22 	bl	80200b8 <_ZdlPvj>
 8017874:	4620      	mov	r0, r4
 8017876:	bd10      	pop	{r4, pc}

08017878 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8017878:	b510      	push	{r4, lr}
 801787a:	4604      	mov	r4, r0
 801787c:	2104      	movs	r1, #4
 801787e:	f008 fc1b 	bl	80200b8 <_ZdlPvj>
 8017882:	4620      	mov	r0, r4
 8017884:	bd10      	pop	{r4, pc}

08017886 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8017886:	b510      	push	{r4, lr}
 8017888:	4604      	mov	r4, r0
 801788a:	2104      	movs	r1, #4
 801788c:	f008 fc14 	bl	80200b8 <_ZdlPvj>
 8017890:	4620      	mov	r0, r4
 8017892:	bd10      	pop	{r4, pc}

08017894 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8017894:	b510      	push	{r4, lr}
 8017896:	4604      	mov	r4, r0
 8017898:	2104      	movs	r1, #4
 801789a:	f008 fc0d 	bl	80200b8 <_ZdlPvj>
 801789e:	4620      	mov	r0, r4
 80178a0:	bd10      	pop	{r4, pc}

080178a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80178a2:	b510      	push	{r4, lr}
 80178a4:	4604      	mov	r4, r0
 80178a6:	2104      	movs	r1, #4
 80178a8:	f008 fc06 	bl	80200b8 <_ZdlPvj>
 80178ac:	4620      	mov	r0, r4
 80178ae:	bd10      	pop	{r4, pc}

080178b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80178b0:	b510      	push	{r4, lr}
 80178b2:	4604      	mov	r4, r0
 80178b4:	2104      	movs	r1, #4
 80178b6:	f008 fbff 	bl	80200b8 <_ZdlPvj>
 80178ba:	4620      	mov	r0, r4
 80178bc:	bd10      	pop	{r4, pc}

080178be <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80178be:	b510      	push	{r4, lr}
 80178c0:	4604      	mov	r4, r0
 80178c2:	2104      	movs	r1, #4
 80178c4:	f008 fbf8 	bl	80200b8 <_ZdlPvj>
 80178c8:	4620      	mov	r0, r4
 80178ca:	bd10      	pop	{r4, pc}

080178cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80178cc:	b510      	push	{r4, lr}
 80178ce:	4604      	mov	r4, r0
 80178d0:	2104      	movs	r1, #4
 80178d2:	f008 fbf1 	bl	80200b8 <_ZdlPvj>
 80178d6:	4620      	mov	r0, r4
 80178d8:	bd10      	pop	{r4, pc}

080178da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80178da:	b510      	push	{r4, lr}
 80178dc:	4604      	mov	r4, r0
 80178de:	2104      	movs	r1, #4
 80178e0:	f008 fbea 	bl	80200b8 <_ZdlPvj>
 80178e4:	4620      	mov	r0, r4
 80178e6:	bd10      	pop	{r4, pc}

080178e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80178e8:	b510      	push	{r4, lr}
 80178ea:	4604      	mov	r4, r0
 80178ec:	2104      	movs	r1, #4
 80178ee:	f008 fbe3 	bl	80200b8 <_ZdlPvj>
 80178f2:	4620      	mov	r0, r4
 80178f4:	bd10      	pop	{r4, pc}

080178f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80178f6:	b510      	push	{r4, lr}
 80178f8:	4604      	mov	r4, r0
 80178fa:	2104      	movs	r1, #4
 80178fc:	f008 fbdc 	bl	80200b8 <_ZdlPvj>
 8017900:	4620      	mov	r0, r4
 8017902:	bd10      	pop	{r4, pc}

08017904 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8017904:	b510      	push	{r4, lr}
 8017906:	4604      	mov	r4, r0
 8017908:	2104      	movs	r1, #4
 801790a:	f008 fbd5 	bl	80200b8 <_ZdlPvj>
 801790e:	4620      	mov	r0, r4
 8017910:	bd10      	pop	{r4, pc}
	...

08017914 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8017914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017918:	b08f      	sub	sp, #60	@ 0x3c
 801791a:	461c      	mov	r4, r3
 801791c:	460e      	mov	r6, r1
 801791e:	9206      	str	r2, [sp, #24]
 8017920:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8017924:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017926:	9202      	str	r2, [sp, #8]
 8017928:	2a00      	cmp	r2, #0
 801792a:	f000 8128 	beq.w	8017b7e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801792e:	6820      	ldr	r0, [r4, #0]
 8017930:	aa0a      	add	r2, sp, #40	@ 0x28
 8017932:	6861      	ldr	r1, [r4, #4]
 8017934:	c203      	stmia	r2!, {r0, r1}
 8017936:	6818      	ldr	r0, [r3, #0]
 8017938:	aa0c      	add	r2, sp, #48	@ 0x30
 801793a:	6859      	ldr	r1, [r3, #4]
 801793c:	c203      	stmia	r2!, {r0, r1}
 801793e:	a80a      	add	r0, sp, #40	@ 0x28
 8017940:	f7fa f9ec 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017944:	4621      	mov	r1, r4
 8017946:	a80c      	add	r0, sp, #48	@ 0x30
 8017948:	f7fa fa10 	bl	8011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801794c:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 8017950:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8017954:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 8017958:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801795c:	bfdb      	ittet	le
 801795e:	b2bb      	uxthle	r3, r7
 8017960:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8017964:	2301      	movgt	r3, #1
 8017966:	fb92 f3f3 	sdivle	r3, r2, r3
 801796a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801796e:	441d      	add	r5, r3
 8017970:	fb92 f1f3 	sdiv	r1, r2, r3
 8017974:	fa1f fc81 	uxth.w	ip, r1
 8017978:	3d01      	subs	r5, #1
 801797a:	fb0c 2413 	mls	r4, ip, r3, r2
 801797e:	4661      	mov	r1, ip
 8017980:	fb14 f407 	smulbb	r4, r4, r7
 8017984:	4404      	add	r4, r0
 8017986:	fb95 f5f3 	sdiv	r5, r5, r3
 801798a:	b2a4      	uxth	r4, r4
 801798c:	b121      	cbz	r1, 8017998 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801798e:	9b06      	ldr	r3, [sp, #24]
 8017990:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8017994:	ba1b      	rev	r3, r3
 8017996:	441e      	add	r6, r3
 8017998:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801799c:	b2ad      	uxth	r5, r5
 801799e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 80179a2:	4418      	add	r0, r3
 80179a4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80179a8:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 80179ac:	00ad      	lsls	r5, r5, #2
 80179ae:	441a      	add	r2, r3
 80179b0:	4b74      	ldr	r3, [pc, #464]	@ (8017b84 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 80179b2:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 80179b6:	6818      	ldr	r0, [r3, #0]
 80179b8:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80179bc:	6803      	ldr	r3, [r0, #0]
 80179be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80179c0:	4798      	blx	r3
 80179c2:	4a71      	ldr	r2, [pc, #452]	@ (8017b88 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 80179c4:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80179c8:	2c00      	cmp	r4, #0
 80179ca:	8813      	ldrh	r3, [r2, #0]
 80179cc:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80179d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80179d2:	fb03 c101 	mla	r1, r3, r1, ip
 80179d6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80179da:	fb03 f307 	mul.w	r3, r3, r7
 80179de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80179e2:	9204      	str	r2, [sp, #16]
 80179e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80179e8:	9a02      	ldr	r2, [sp, #8]
 80179ea:	4408      	add	r0, r1
 80179ec:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 80179f0:	4403      	add	r3, r0
 80179f2:	b292      	uxth	r2, r2
 80179f4:	9307      	str	r3, [sp, #28]
 80179f6:	f105 0304 	add.w	r3, r5, #4
 80179fa:	bf0c      	ite	eq
 80179fc:	4645      	moveq	r5, r8
 80179fe:	2500      	movne	r5, #0
 8017a00:	9308      	str	r3, [sp, #32]
 8017a02:	2300      	movs	r3, #0
 8017a04:	b2ad      	uxth	r5, r5
 8017a06:	9205      	str	r2, [sp, #20]
 8017a08:	9303      	str	r3, [sp, #12]
 8017a0a:	9a07      	ldr	r2, [sp, #28]
 8017a0c:	4282      	cmp	r2, r0
 8017a0e:	f240 80b1 	bls.w	8017b74 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 8017a12:	b95b      	cbnz	r3, 8017a2c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 8017a14:	7832      	ldrb	r2, [r6, #0]
 8017a16:	0993      	lsrs	r3, r2, #6
 8017a18:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8017a1c:	9203      	str	r2, [sp, #12]
 8017a1e:	1e5a      	subs	r2, r3, #1
 8017a20:	2a02      	cmp	r2, #2
 8017a22:	bf8d      	iteet	hi
 8017a24:	7873      	ldrbhi	r3, [r6, #1]
 8017a26:	3601      	addls	r6, #1
 8017a28:	b29b      	uxthls	r3, r3
 8017a2a:	3602      	addhi	r6, #2
 8017a2c:	b184      	cbz	r4, 8017a50 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 8017a2e:	429c      	cmp	r4, r3
 8017a30:	bf91      	iteee	ls
 8017a32:	1b1c      	subls	r4, r3, r4
 8017a34:	1ae4      	subhi	r4, r4, r3
 8017a36:	4629      	movhi	r1, r5
 8017a38:	f04f 0e00 	movhi.w	lr, #0
 8017a3c:	bf9b      	ittet	ls
 8017a3e:	fa1f fe84 	uxthls.w	lr, r4
 8017a42:	2400      	movls	r4, #0
 8017a44:	b2a4      	uxthhi	r4, r4
 8017a46:	fa1f f188 	uxthls.w	r1, r8
 8017a4a:	4673      	mov	r3, lr
 8017a4c:	460d      	mov	r5, r1
 8017a4e:	e7dc      	b.n	8017a0a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8017a50:	2203      	movs	r2, #3
 8017a52:	9908      	ldr	r1, [sp, #32]
 8017a54:	42ab      	cmp	r3, r5
 8017a56:	4617      	mov	r7, r2
 8017a58:	9a03      	ldr	r2, [sp, #12]
 8017a5a:	bf24      	itt	cs
 8017a5c:	eba3 0e05 	subcs.w	lr, r3, r5
 8017a60:	9501      	strcs	r5, [sp, #4]
 8017a62:	fb17 1702 	smlabb	r7, r7, r2, r1
 8017a66:	9a06      	ldr	r2, [sp, #24]
 8017a68:	bf34      	ite	cc
 8017a6a:	1ae9      	subcc	r1, r5, r3
 8017a6c:	fa1f fe8e 	uxthcs.w	lr, lr
 8017a70:	4417      	add	r7, r2
 8017a72:	9a02      	ldr	r2, [sp, #8]
 8017a74:	bf2f      	iteee	cs
 8017a76:	4621      	movcs	r1, r4
 8017a78:	b289      	uxthcc	r1, r1
 8017a7a:	9301      	strcc	r3, [sp, #4]
 8017a7c:	46a6      	movcc	lr, r4
 8017a7e:	2aff      	cmp	r2, #255	@ 0xff
 8017a80:	d11e      	bne.n	8017ac0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 8017a82:	4681      	mov	r9, r0
 8017a84:	f8dd c004 	ldr.w	ip, [sp, #4]
 8017a88:	f109 0903 	add.w	r9, r9, #3
 8017a8c:	f1bc 0f00 	cmp.w	ip, #0
 8017a90:	d15f      	bne.n	8017b52 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 8017a92:	9a01      	ldr	r2, [sp, #4]
 8017a94:	42ab      	cmp	r3, r5
 8017a96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017a9a:	4410      	add	r0, r2
 8017a9c:	d3d5      	bcc.n	8017a4a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8017a9e:	fa1f f188 	uxth.w	r1, r8
 8017aa2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8017aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017aa8:	1a64      	subs	r4, r4, r1
 8017aaa:	881b      	ldrh	r3, [r3, #0]
 8017aac:	b2a4      	uxth	r4, r4
 8017aae:	eba3 0308 	sub.w	r3, r3, r8
 8017ab2:	2c00      	cmp	r4, #0
 8017ab4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017ab8:	bf18      	it	ne
 8017aba:	2100      	movne	r1, #0
 8017abc:	4418      	add	r0, r3
 8017abe:	e7c4      	b.n	8017a4a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8017ac0:	4684      	mov	ip, r0
 8017ac2:	f8dd a004 	ldr.w	sl, [sp, #4]
 8017ac6:	f10c 0c03 	add.w	ip, ip, #3
 8017aca:	f1ba 0f00 	cmp.w	sl, #0
 8017ace:	d0e0      	beq.n	8017a92 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8017ad0:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8017ad4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017ad8:	9a05      	ldr	r2, [sp, #20]
 8017ada:	f897 9000 	ldrb.w	r9, [r7]
 8017ade:	fa1f fa8a 	uxth.w	sl, sl
 8017ae2:	fb1b fb02 	smulbb	fp, fp, r2
 8017ae6:	9a04      	ldr	r2, [sp, #16]
 8017ae8:	fb09 b902 	mla	r9, r9, r2, fp
 8017aec:	9a05      	ldr	r2, [sp, #20]
 8017aee:	fa1f f989 	uxth.w	r9, r9
 8017af2:	f109 0b01 	add.w	fp, r9, #1
 8017af6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017afa:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8017afe:	fb1b fb02 	smulbb	fp, fp, r2
 8017b02:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017b06:	9a04      	ldr	r2, [sp, #16]
 8017b08:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8017b0c:	f897 9001 	ldrb.w	r9, [r7, #1]
 8017b10:	fb09 b902 	mla	r9, r9, r2, fp
 8017b14:	9a05      	ldr	r2, [sp, #20]
 8017b16:	fa1f f989 	uxth.w	r9, r9
 8017b1a:	f109 0b01 	add.w	fp, r9, #1
 8017b1e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017b22:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 8017b26:	fb1b fb02 	smulbb	fp, fp, r2
 8017b2a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017b2e:	9a04      	ldr	r2, [sp, #16]
 8017b30:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8017b34:	f897 9002 	ldrb.w	r9, [r7, #2]
 8017b38:	fb09 b902 	mla	r9, r9, r2, fp
 8017b3c:	fa1f f989 	uxth.w	r9, r9
 8017b40:	f109 0b01 	add.w	fp, r9, #1
 8017b44:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017b48:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017b4c:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8017b50:	e7b9      	b.n	8017ac6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 8017b52:	f897 a000 	ldrb.w	sl, [r7]
 8017b56:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017b5a:	f809 ac03 	strb.w	sl, [r9, #-3]
 8017b5e:	fa1f fc8c 	uxth.w	ip, ip
 8017b62:	f897 a001 	ldrb.w	sl, [r7, #1]
 8017b66:	f809 ac02 	strb.w	sl, [r9, #-2]
 8017b6a:	f897 a002 	ldrb.w	sl, [r7, #2]
 8017b6e:	f809 ac01 	strb.w	sl, [r9, #-1]
 8017b72:	e789      	b.n	8017a88 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8017b74:	4b03      	ldr	r3, [pc, #12]	@ (8017b84 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8017b76:	6818      	ldr	r0, [r3, #0]
 8017b78:	6803      	ldr	r3, [r0, #0]
 8017b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b7c:	4798      	blx	r3
 8017b7e:	b00f      	add	sp, #60	@ 0x3c
 8017b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b84:	24025120 	.word	0x24025120
 8017b88:	2402511a 	.word	0x2402511a

08017b8c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8017b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b90:	b09b      	sub	sp, #108	@ 0x6c
 8017b92:	461d      	mov	r5, r3
 8017b94:	4604      	mov	r4, r0
 8017b96:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8017b98:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 8017b9c:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8017ba0:	9208      	str	r2, [sp, #32]
 8017ba2:	2a00      	cmp	r2, #0
 8017ba4:	f000 81f3 	beq.w	8017f8e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8017ba8:	6828      	ldr	r0, [r5, #0]
 8017baa:	aa16      	add	r2, sp, #88	@ 0x58
 8017bac:	6869      	ldr	r1, [r5, #4]
 8017bae:	c203      	stmia	r2!, {r0, r1}
 8017bb0:	6818      	ldr	r0, [r3, #0]
 8017bb2:	aa18      	add	r2, sp, #96	@ 0x60
 8017bb4:	6859      	ldr	r1, [r3, #4]
 8017bb6:	c203      	stmia	r2!, {r0, r1}
 8017bb8:	a816      	add	r0, sp, #88	@ 0x58
 8017bba:	f7fa f8af 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017bbe:	4629      	mov	r1, r5
 8017bc0:	a818      	add	r0, sp, #96	@ 0x60
 8017bc2:	f7fa f8d3 	bl	8011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017bc6:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 8017bca:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 8017bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017bd2:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 8017bd6:	bfdb      	ittet	le
 8017bd8:	b29a      	uxthle	r2, r3
 8017bda:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8017bde:	f04f 0a01 	movgt.w	sl, #1
 8017be2:	fb91 faf2 	sdivle	sl, r1, r2
 8017be6:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 8017bea:	4456      	add	r6, sl
 8017bec:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 8017bf0:	3e01      	subs	r6, #1
 8017bf2:	fb92 f0fa 	sdiv	r0, r2, sl
 8017bf6:	b280      	uxth	r0, r0
 8017bf8:	fb00 281a 	mls	r8, r0, sl, r2
 8017bfc:	900e      	str	r0, [sp, #56]	@ 0x38
 8017bfe:	fb18 f803 	smulbb	r8, r8, r3
 8017c02:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 8017c06:	4488      	add	r8, r1
 8017c08:	4419      	add	r1, r3
 8017c0a:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 8017c0e:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 8017c12:	fa1f f888 	uxth.w	r8, r8
 8017c16:	441a      	add	r2, r3
 8017c18:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8017c1c:	9303      	str	r3, [sp, #12]
 8017c1e:	4b9c      	ldr	r3, [pc, #624]	@ (8017e90 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8017c20:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 8017c24:	6818      	ldr	r0, [r3, #0]
 8017c26:	6803      	ldr	r3, [r0, #0]
 8017c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c2a:	4798      	blx	r3
 8017c2c:	4b99      	ldr	r3, [pc, #612]	@ (8017e94 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 8017c2e:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 8017c32:	f1b8 0f00 	cmp.w	r8, #0
 8017c36:	881a      	ldrh	r2, [r3, #0]
 8017c38:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 8017c3c:	fb02 f505 	mul.w	r5, r2, r5
 8017c40:	fb02 7101 	mla	r1, r2, r1, r7
 8017c44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017c48:	9314      	str	r3, [sp, #80]	@ 0x50
 8017c4a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017c4e:	9b08      	ldr	r3, [sp, #32]
 8017c50:	fb96 f6fa 	sdiv	r6, r6, sl
 8017c54:	4408      	add	r0, r1
 8017c56:	f106 0601 	add.w	r6, r6, #1
 8017c5a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8017c5e:	f04f 0100 	mov.w	r1, #0
 8017c62:	eb00 0205 	add.w	r2, r0, r5
 8017c66:	b2b6      	uxth	r6, r6
 8017c68:	b29b      	uxth	r3, r3
 8017c6a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017c6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8017c6e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017c70:	930d      	str	r3, [sp, #52]	@ 0x34
 8017c72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017c76:	4b88      	ldr	r3, [pc, #544]	@ (8017e98 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 8017c78:	f106 0204 	add.w	r2, r6, #4
 8017c7c:	eba3 0304 	sub.w	r3, r3, r4
 8017c80:	9205      	str	r2, [sp, #20]
 8017c82:	9a03      	ldr	r2, [sp, #12]
 8017c84:	bf18      	it	ne
 8017c86:	2200      	movne	r2, #0
 8017c88:	9315      	str	r3, [sp, #84]	@ 0x54
 8017c8a:	b292      	uxth	r2, r2
 8017c8c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017c90:	fa11 f383 	uxtah	r3, r1, r3
 8017c94:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017c96:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017c9a:	3304      	adds	r3, #4
 8017c9c:	9306      	str	r3, [sp, #24]
 8017c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ca0:	4283      	cmp	r3, r0
 8017ca2:	f240 816f 	bls.w	8017f84 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 8017ca6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8017caa:	f04f 0900 	mov.w	r9, #0
 8017cae:	9d06      	ldr	r5, [sp, #24]
 8017cb0:	fbb8 f3f3 	udiv	r3, r8, r3
 8017cb4:	ebaa 0303 	sub.w	r3, sl, r3
 8017cb8:	782d      	ldrb	r5, [r5, #0]
 8017cba:	b29b      	uxth	r3, r3
 8017cbc:	950f      	str	r5, [sp, #60]	@ 0x3c
 8017cbe:	3501      	adds	r5, #1
 8017cc0:	9312      	str	r3, [sp, #72]	@ 0x48
 8017cc2:	9b06      	ldr	r3, [sp, #24]
 8017cc4:	9504      	str	r5, [sp, #16]
 8017cc6:	7859      	ldrb	r1, [r3, #1]
 8017cc8:	789b      	ldrb	r3, [r3, #2]
 8017cca:	021b      	lsls	r3, r3, #8
 8017ccc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8017cd0:	9906      	ldr	r1, [sp, #24]
 8017cd2:	78c9      	ldrb	r1, [r1, #3]
 8017cd4:	430b      	orrs	r3, r1
 8017cd6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8017cd8:	4419      	add	r1, r3
 8017cda:	1c4d      	adds	r5, r1, #1
 8017cdc:	7849      	ldrb	r1, [r1, #1]
 8017cde:	9502      	str	r5, [sp, #8]
 8017ce0:	0209      	lsls	r1, r1, #8
 8017ce2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8017ce4:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 8017ce8:	5ceb      	ldrb	r3, [r5, r3]
 8017cea:	4319      	orrs	r1, r3
 8017cec:	b28b      	uxth	r3, r1
 8017cee:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8017cf2:	930a      	str	r3, [sp, #40]	@ 0x28
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	9307      	str	r3, [sp, #28]
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	e9cd 3300 	strd	r3, r3, [sp]
 8017cfe:	469c      	mov	ip, r3
 8017d00:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017d04:	930c      	str	r3, [sp, #48]	@ 0x30
 8017d06:	f1b8 0f00 	cmp.w	r8, #0
 8017d0a:	f000 8082 	beq.w	8017e12 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 8017d0e:	45c4      	cmp	ip, r8
 8017d10:	d270      	bcs.n	8017df4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 8017d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d14:	eba8 080c 	sub.w	r8, r8, ip
 8017d18:	4611      	mov	r1, r2
 8017d1a:	4283      	cmp	r3, r0
 8017d1c:	fa1f f888 	uxth.w	r8, r8
 8017d20:	d802      	bhi.n	8017d28 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8017d22:	e074      	b.n	8017e0e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d15f      	bne.n	8017de8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8017d28:	9b02      	ldr	r3, [sp, #8]
 8017d2a:	9a01      	ldr	r2, [sp, #4]
 8017d2c:	785b      	ldrb	r3, [r3, #1]
 8017d2e:	f1c2 0207 	rsb	r2, r2, #7
 8017d32:	9d01      	ldr	r5, [sp, #4]
 8017d34:	4093      	lsls	r3, r2
 8017d36:	005b      	lsls	r3, r3, #1
 8017d38:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8017d3c:	9b02      	ldr	r3, [sp, #8]
 8017d3e:	781b      	ldrb	r3, [r3, #0]
 8017d40:	412b      	asrs	r3, r5
 8017d42:	b2db      	uxtb	r3, r3
 8017d44:	4313      	orrs	r3, r2
 8017d46:	462a      	mov	r2, r5
 8017d48:	3201      	adds	r2, #1
 8017d4a:	b29e      	uxth	r6, r3
 8017d4c:	b2d2      	uxtb	r2, r2
 8017d4e:	2a08      	cmp	r2, #8
 8017d50:	9201      	str	r2, [sp, #4]
 8017d52:	9a02      	ldr	r2, [sp, #8]
 8017d54:	bf09      	itett	eq
 8017d56:	3202      	addeq	r2, #2
 8017d58:	3201      	addne	r2, #1
 8017d5a:	9202      	streq	r2, [sp, #8]
 8017d5c:	2200      	moveq	r2, #0
 8017d5e:	bf14      	ite	ne
 8017d60:	9202      	strne	r2, [sp, #8]
 8017d62:	9201      	streq	r2, [sp, #4]
 8017d64:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017d66:	42b2      	cmp	r2, r6
 8017d68:	d309      	bcc.n	8017d7e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8017d6a:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8017d6e:	2301      	movs	r3, #1
 8017d70:	9a04      	ldr	r2, [sp, #16]
 8017d72:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8017d76:	d30e      	bcc.n	8017d96 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8017d78:	9300      	str	r3, [sp, #0]
 8017d7a:	2500      	movs	r5, #0
 8017d7c:	e035      	b.n	8017dea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8017d7e:	9b04      	ldr	r3, [sp, #16]
 8017d80:	429e      	cmp	r6, r3
 8017d82:	d318      	bcc.n	8017db6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8017d84:	9b00      	ldr	r3, [sp, #0]
 8017d86:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8017d8a:	18e3      	adds	r3, r4, r3
 8017d8c:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8017d90:	9b00      	ldr	r3, [sp, #0]
 8017d92:	3301      	adds	r3, #1
 8017d94:	b29b      	uxth	r3, r3
 8017d96:	9a04      	ldr	r2, [sp, #16]
 8017d98:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 8017d9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017da0:	9f00      	ldr	r7, [sp, #0]
 8017da2:	7115      	strb	r5, [r2, #4]
 8017da4:	3701      	adds	r7, #1
 8017da6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8017da8:	7157      	strb	r7, [r2, #5]
 8017daa:	80d5      	strh	r5, [r2, #6]
 8017dac:	9a04      	ldr	r2, [sp, #16]
 8017dae:	3201      	adds	r2, #1
 8017db0:	b292      	uxth	r2, r2
 8017db2:	9204      	str	r2, [sp, #16]
 8017db4:	e7e0      	b.n	8017d78 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8017db6:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8017dba:	4632      	mov	r2, r6
 8017dbc:	795b      	ldrb	r3, [r3, #5]
 8017dbe:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 8017dc2:	4425      	add	r5, r4
 8017dc4:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8017dc6:	eb07 0c05 	add.w	ip, r7, r5
 8017dca:	f1bc 0f00 	cmp.w	ip, #0
 8017dce:	dd07      	ble.n	8017de0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 8017dd0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017dd4:	f892 c004 	ldrb.w	ip, [r2, #4]
 8017dd8:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8017ddc:	88d2      	ldrh	r2, [r2, #6]
 8017dde:	e7f1      	b.n	8017dc4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8017de0:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8017de4:	b29b      	uxth	r3, r3
 8017de6:	e7c3      	b.n	8017d70 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8017de8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8017dea:	460a      	mov	r2, r1
 8017dec:	960a      	str	r6, [sp, #40]	@ 0x28
 8017dee:	46a9      	mov	r9, r5
 8017df0:	469c      	mov	ip, r3
 8017df2:	e788      	b.n	8017d06 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8017df4:	ebac 0308 	sub.w	r3, ip, r8
 8017df8:	eb09 0508 	add.w	r5, r9, r8
 8017dfc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8017e00:	b29b      	uxth	r3, r3
 8017e02:	b2ad      	uxth	r5, r5
 8017e04:	f04f 0800 	mov.w	r8, #0
 8017e08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e0a:	4282      	cmp	r2, r0
 8017e0c:	d88a      	bhi.n	8017d24 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 8017e0e:	460a      	mov	r2, r1
 8017e10:	e745      	b.n	8017c9e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 8017e12:	4594      	cmp	ip, r2
 8017e14:	9d08      	ldr	r5, [sp, #32]
 8017e16:	4686      	mov	lr, r0
 8017e18:	bf27      	ittee	cs
 8017e1a:	ebac 0302 	subcs.w	r3, ip, r2
 8017e1e:	4616      	movcs	r6, r2
 8017e20:	eba2 010c 	subcc.w	r1, r2, ip
 8017e24:	4666      	movcc	r6, ip
 8017e26:	bf27      	ittee	cs
 8017e28:	b29b      	uxthcs	r3, r3
 8017e2a:	4641      	movcs	r1, r8
 8017e2c:	b289      	uxthcc	r1, r1
 8017e2e:	4643      	movcc	r3, r8
 8017e30:	2dff      	cmp	r5, #255	@ 0xff
 8017e32:	eb09 0506 	add.w	r5, r9, r6
 8017e36:	b2ad      	uxth	r5, r5
 8017e38:	d130      	bne.n	8017e9c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8017e3a:	45a9      	cmp	r9, r5
 8017e3c:	f10e 0e03 	add.w	lr, lr, #3
 8017e40:	d17a      	bne.n	8017f38 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8017e42:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017e46:	4594      	cmp	ip, r2
 8017e48:	4430      	add	r0, r6
 8017e4a:	d3db      	bcc.n	8017e04 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8017e4c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017e4e:	9903      	ldr	r1, [sp, #12]
 8017e50:	8812      	ldrh	r2, [r2, #0]
 8017e52:	1a52      	subs	r2, r2, r1
 8017e54:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017e56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017e5a:	4410      	add	r0, r2
 8017e5c:	9a07      	ldr	r2, [sp, #28]
 8017e5e:	3201      	adds	r2, #1
 8017e60:	428a      	cmp	r2, r1
 8017e62:	9207      	str	r2, [sp, #28]
 8017e64:	f040 8081 	bne.w	8017f6a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 8017e68:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 8017e6c:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8017e70:	9b03      	ldr	r3, [sp, #12]
 8017e72:	eba8 080c 	sub.w	r8, r8, ip
 8017e76:	fa1f f888 	uxth.w	r8, r8
 8017e7a:	f1b8 0f00 	cmp.w	r8, #0
 8017e7e:	bf08      	it	eq
 8017e80:	461a      	moveq	r2, r3
 8017e82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017e84:	bf18      	it	ne
 8017e86:	2200      	movne	r2, #0
 8017e88:	3301      	adds	r3, #1
 8017e8a:	b292      	uxth	r2, r2
 8017e8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017e8e:	e6fd      	b.n	8017c8c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8017e90:	24025120 	.word	0x24025120
 8017e94:	2402511a 	.word	0x2402511a
 8017e98:	fffff7fb 	.word	0xfffff7fb
 8017e9c:	45a9      	cmp	r9, r5
 8017e9e:	f10e 0e03 	add.w	lr, lr, #3
 8017ea2:	d0ce      	beq.n	8017e42 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8017ea4:	f109 0701 	add.w	r7, r9, #1
 8017ea8:	44a1      	add	r9, r4
 8017eaa:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 8017eae:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8017eb2:	9713      	str	r7, [sp, #76]	@ 0x4c
 8017eb4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017eb8:	9f05      	ldr	r7, [sp, #20]
 8017eba:	eb07 0908 	add.w	r9, r7, r8
 8017ebe:	f817 8008 	ldrb.w	r8, [r7, r8]
 8017ec2:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8017ec4:	fb1b fb07 	smulbb	fp, fp, r7
 8017ec8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8017eca:	fb08 b807 	mla	r8, r8, r7, fp
 8017ece:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8017ed0:	fa1f f888 	uxth.w	r8, r8
 8017ed4:	f108 0b01 	add.w	fp, r8, #1
 8017ed8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017edc:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 8017ee0:	fb1b fb07 	smulbb	fp, fp, r7
 8017ee4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017ee8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8017eea:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8017eee:	f899 8001 	ldrb.w	r8, [r9, #1]
 8017ef2:	fb08 b807 	mla	r8, r8, r7, fp
 8017ef6:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8017ef8:	fa1f f888 	uxth.w	r8, r8
 8017efc:	f108 0b01 	add.w	fp, r8, #1
 8017f00:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017f04:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017f08:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8017f0c:	f899 8002 	ldrb.w	r8, [r9, #2]
 8017f10:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 8017f14:	fb19 f907 	smulbb	r9, r9, r7
 8017f18:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8017f1a:	fb08 9807 	mla	r8, r8, r7, r9
 8017f1e:	fa1f f888 	uxth.w	r8, r8
 8017f22:	f108 0901 	add.w	r9, r8, #1
 8017f26:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8017f2a:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 8017f2e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017f32:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8017f36:	e7b1      	b.n	8017e9c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8017f38:	f109 0b01 	add.w	fp, r9, #1
 8017f3c:	44a1      	add	r9, r4
 8017f3e:	9f05      	ldr	r7, [sp, #20]
 8017f40:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8017f44:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017f48:	eb07 0908 	add.w	r9, r7, r8
 8017f4c:	f817 8008 	ldrb.w	r8, [r7, r8]
 8017f50:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8017f54:	f899 8001 	ldrb.w	r8, [r9, #1]
 8017f58:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8017f5c:	f899 8002 	ldrb.w	r8, [r9, #2]
 8017f60:	fa1f f98b 	uxth.w	r9, fp
 8017f64:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8017f68:	e767      	b.n	8017e3a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 8017f6a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8017f6e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8017f72:	eba8 0801 	sub.w	r8, r8, r1
 8017f76:	fa1f f888 	uxth.w	r8, r8
 8017f7a:	f1b8 0f00 	cmp.w	r8, #0
 8017f7e:	bf18      	it	ne
 8017f80:	2100      	movne	r1, #0
 8017f82:	e741      	b.n	8017e08 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8017f84:	4b03      	ldr	r3, [pc, #12]	@ (8017f94 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 8017f86:	6818      	ldr	r0, [r3, #0]
 8017f88:	6803      	ldr	r3, [r0, #0]
 8017f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017f8c:	4798      	blx	r3
 8017f8e:	b01b      	add	sp, #108	@ 0x6c
 8017f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f94:	24025120 	.word	0x24025120

08017f98 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8017f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f9c:	b09d      	sub	sp, #116	@ 0x74
 8017f9e:	461d      	mov	r5, r3
 8017fa0:	4604      	mov	r4, r0
 8017fa2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8017fa4:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 8017fa8:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8017fac:	920c      	str	r2, [sp, #48]	@ 0x30
 8017fae:	2a00      	cmp	r2, #0
 8017fb0:	f000 81de 	beq.w	8018370 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8017fb4:	6828      	ldr	r0, [r5, #0]
 8017fb6:	aa18      	add	r2, sp, #96	@ 0x60
 8017fb8:	6869      	ldr	r1, [r5, #4]
 8017fba:	c203      	stmia	r2!, {r0, r1}
 8017fbc:	6818      	ldr	r0, [r3, #0]
 8017fbe:	aa1a      	add	r2, sp, #104	@ 0x68
 8017fc0:	6859      	ldr	r1, [r3, #4]
 8017fc2:	c203      	stmia	r2!, {r0, r1}
 8017fc4:	a818      	add	r0, sp, #96	@ 0x60
 8017fc6:	f7f9 fea9 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017fca:	4629      	mov	r1, r5
 8017fcc:	a81a      	add	r0, sp, #104	@ 0x68
 8017fce:	f7f9 fecd 	bl	8011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017fd2:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8017fd6:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 8017fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017fde:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8017fe2:	bfdb      	ittet	le
 8017fe4:	b29a      	uxthle	r2, r3
 8017fe6:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8017fea:	2201      	movgt	r2, #1
 8017fec:	fb91 f2f2 	sdivle	r2, r1, r2
 8017ff0:	9201      	str	r2, [sp, #4]
 8017ff2:	9801      	ldr	r0, [sp, #4]
 8017ff4:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8017ff8:	9901      	ldr	r1, [sp, #4]
 8017ffa:	fb92 f0f0 	sdiv	r0, r2, r0
 8017ffe:	b280      	uxth	r0, r0
 8018000:	440f      	add	r7, r1
 8018002:	900d      	str	r0, [sp, #52]	@ 0x34
 8018004:	3f01      	subs	r7, #1
 8018006:	9801      	ldr	r0, [sp, #4]
 8018008:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801800a:	fb05 2510 	mls	r5, r5, r0, r2
 801800e:	fb97 f7f1 	sdiv	r7, r7, r1
 8018012:	fb15 f503 	smulbb	r5, r5, r3
 8018016:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801801a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801801e:	3701      	adds	r7, #1
 8018020:	440d      	add	r5, r1
 8018022:	4419      	add	r1, r3
 8018024:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8018028:	b2bf      	uxth	r7, r7
 801802a:	441a      	add	r2, r3
 801802c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8018030:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8018034:	00bf      	lsls	r7, r7, #2
 8018036:	9304      	str	r3, [sp, #16]
 8018038:	b2ad      	uxth	r5, r5
 801803a:	4bb0      	ldr	r3, [pc, #704]	@ (80182fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801803c:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8018040:	6818      	ldr	r0, [r3, #0]
 8018042:	6803      	ldr	r3, [r0, #0]
 8018044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018046:	4798      	blx	r3
 8018048:	4bad      	ldr	r3, [pc, #692]	@ (8018300 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801804a:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801804e:	2d00      	cmp	r5, #0
 8018050:	881a      	ldrh	r2, [r3, #0]
 8018052:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 8018056:	fb02 f606 	mul.w	r6, r2, r6
 801805a:	fb02 c101 	mla	r1, r2, r1, ip
 801805e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018062:	9316      	str	r3, [sp, #88]	@ 0x58
 8018064:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018068:	4ba6      	ldr	r3, [pc, #664]	@ (8018304 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801806a:	eb00 0801 	add.w	r8, r0, r1
 801806e:	bf18      	it	ne
 8018070:	2100      	movne	r1, #0
 8018072:	eba3 0304 	sub.w	r3, r3, r4
 8018076:	eb08 0206 	add.w	r2, r8, r6
 801807a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801807c:	9208      	str	r2, [sp, #32]
 801807e:	f107 0204 	add.w	r2, r7, #4
 8018082:	9211      	str	r2, [sp, #68]	@ 0x44
 8018084:	9a04      	ldr	r2, [sp, #16]
 8018086:	bf08      	it	eq
 8018088:	4611      	moveq	r1, r2
 801808a:	2200      	movs	r2, #0
 801808c:	b289      	uxth	r1, r1
 801808e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018090:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018092:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018094:	fa12 f383 	uxtah	r3, r2, r3
 8018098:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801809a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801809e:	3304      	adds	r3, #4
 80180a0:	9306      	str	r3, [sp, #24]
 80180a2:	9b08      	ldr	r3, [sp, #32]
 80180a4:	4543      	cmp	r3, r8
 80180a6:	f240 815e 	bls.w	8018366 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 80180aa:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80180ae:	f04f 0b01 	mov.w	fp, #1
 80180b2:	9a01      	ldr	r2, [sp, #4]
 80180b4:	9806      	ldr	r0, [sp, #24]
 80180b6:	465e      	mov	r6, fp
 80180b8:	f8cd b008 	str.w	fp, [sp, #8]
 80180bc:	7800      	ldrb	r0, [r0, #0]
 80180be:	fbb5 f3f3 	udiv	r3, r5, r3
 80180c2:	1ad3      	subs	r3, r2, r3
 80180c4:	900e      	str	r0, [sp, #56]	@ 0x38
 80180c6:	3001      	adds	r0, #1
 80180c8:	b29b      	uxth	r3, r3
 80180ca:	9005      	str	r0, [sp, #20]
 80180cc:	9312      	str	r3, [sp, #72]	@ 0x48
 80180ce:	9b06      	ldr	r3, [sp, #24]
 80180d0:	785a      	ldrb	r2, [r3, #1]
 80180d2:	789b      	ldrb	r3, [r3, #2]
 80180d4:	021b      	lsls	r3, r3, #8
 80180d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80180da:	9a06      	ldr	r2, [sp, #24]
 80180dc:	78d2      	ldrb	r2, [r2, #3]
 80180de:	4313      	orrs	r3, r2
 80180e0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80180e2:	441a      	add	r2, r3
 80180e4:	1c50      	adds	r0, r2, #1
 80180e6:	7852      	ldrb	r2, [r2, #1]
 80180e8:	9003      	str	r0, [sp, #12]
 80180ea:	0212      	lsls	r2, r2, #8
 80180ec:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80180ee:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80180f2:	5cc3      	ldrb	r3, [r0, r3]
 80180f4:	431a      	orrs	r2, r3
 80180f6:	b293      	uxth	r3, r2
 80180f8:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80180fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80180fe:	2300      	movs	r3, #0
 8018100:	461a      	mov	r2, r3
 8018102:	9307      	str	r3, [sp, #28]
 8018104:	2d00      	cmp	r5, #0
 8018106:	d07c      	beq.n	8018202 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8018108:	42ae      	cmp	r6, r5
 801810a:	d26c      	bcs.n	80181e6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801810c:	9b08      	ldr	r3, [sp, #32]
 801810e:	1bad      	subs	r5, r5, r6
 8018110:	4608      	mov	r0, r1
 8018112:	4543      	cmp	r3, r8
 8018114:	b2ad      	uxth	r5, r5
 8018116:	d802      	bhi.n	801811e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 8018118:	e071      	b.n	80181fe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801811a:	2b00      	cmp	r3, #0
 801811c:	d15d      	bne.n	80181da <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801811e:	9b03      	ldr	r3, [sp, #12]
 8018120:	9a02      	ldr	r2, [sp, #8]
 8018122:	785b      	ldrb	r3, [r3, #1]
 8018124:	f1c2 0207 	rsb	r2, r2, #7
 8018128:	9902      	ldr	r1, [sp, #8]
 801812a:	4093      	lsls	r3, r2
 801812c:	005b      	lsls	r3, r3, #1
 801812e:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8018132:	9b03      	ldr	r3, [sp, #12]
 8018134:	781b      	ldrb	r3, [r3, #0]
 8018136:	410b      	asrs	r3, r1
 8018138:	3101      	adds	r1, #1
 801813a:	b2c9      	uxtb	r1, r1
 801813c:	b2db      	uxtb	r3, r3
 801813e:	2908      	cmp	r1, #8
 8018140:	9102      	str	r1, [sp, #8]
 8018142:	9903      	ldr	r1, [sp, #12]
 8018144:	ea43 0302 	orr.w	r3, r3, r2
 8018148:	bf0c      	ite	eq
 801814a:	3102      	addeq	r1, #2
 801814c:	3101      	addne	r1, #1
 801814e:	b29a      	uxth	r2, r3
 8018150:	bf05      	ittet	eq
 8018152:	9103      	streq	r1, [sp, #12]
 8018154:	2100      	moveq	r1, #0
 8018156:	9103      	strne	r1, [sp, #12]
 8018158:	9102      	streq	r1, [sp, #8]
 801815a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801815c:	4291      	cmp	r1, r2
 801815e:	d30a      	bcc.n	8018176 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 8018160:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8018164:	2301      	movs	r3, #1
 8018166:	9905      	ldr	r1, [sp, #20]
 8018168:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801816c:	d30f      	bcc.n	801818e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801816e:	469b      	mov	fp, r3
 8018170:	f04f 0c00 	mov.w	ip, #0
 8018174:	e032      	b.n	80181dc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 8018176:	9b05      	ldr	r3, [sp, #20]
 8018178:	429a      	cmp	r2, r3
 801817a:	d318      	bcc.n	80181ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801817c:	eb04 030b 	add.w	r3, r4, fp
 8018180:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8018184:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8018188:	f10b 0301 	add.w	r3, fp, #1
 801818c:	b29b      	uxth	r3, r3
 801818e:	9905      	ldr	r1, [sp, #20]
 8018190:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8018194:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8018198:	710e      	strb	r6, [r1, #4]
 801819a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801819c:	80ce      	strh	r6, [r1, #6]
 801819e:	f10b 0601 	add.w	r6, fp, #1
 80181a2:	714e      	strb	r6, [r1, #5]
 80181a4:	9905      	ldr	r1, [sp, #20]
 80181a6:	3101      	adds	r1, #1
 80181a8:	b289      	uxth	r1, r1
 80181aa:	9105      	str	r1, [sp, #20]
 80181ac:	e7df      	b.n	801816e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 80181ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80181b2:	4611      	mov	r1, r2
 80181b4:	795b      	ldrb	r3, [r3, #5]
 80181b6:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 80181ba:	4426      	add	r6, r4
 80181bc:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80181be:	4437      	add	r7, r6
 80181c0:	2f00      	cmp	r7, #0
 80181c2:	dd06      	ble.n	80181d2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 80181c4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80181c8:	790f      	ldrb	r7, [r1, #4]
 80181ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80181ce:	88c9      	ldrh	r1, [r1, #6]
 80181d0:	e7f4      	b.n	80181bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 80181d2:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80181d6:	b29b      	uxth	r3, r3
 80181d8:	e7c5      	b.n	8018166 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 80181da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80181dc:	920a      	str	r2, [sp, #40]	@ 0x28
 80181de:	4601      	mov	r1, r0
 80181e0:	4662      	mov	r2, ip
 80181e2:	461e      	mov	r6, r3
 80181e4:	e78e      	b.n	8018104 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 80181e6:	1b73      	subs	r3, r6, r5
 80181e8:	eb02 0c05 	add.w	ip, r2, r5
 80181ec:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80181f0:	b29b      	uxth	r3, r3
 80181f2:	fa1f fc8c 	uxth.w	ip, ip
 80181f6:	2500      	movs	r5, #0
 80181f8:	9a08      	ldr	r2, [sp, #32]
 80181fa:	4542      	cmp	r2, r8
 80181fc:	d88d      	bhi.n	801811a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 80181fe:	4601      	mov	r1, r0
 8018200:	e74f      	b.n	80180a2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 8018202:	428e      	cmp	r6, r1
 8018204:	bf2b      	itete	cs
 8018206:	468e      	movcs	lr, r1
 8018208:	46b6      	movcc	lr, r6
 801820a:	1a73      	subcs	r3, r6, r1
 801820c:	1b88      	subcc	r0, r1, r6
 801820e:	eb02 0c0e 	add.w	ip, r2, lr
 8018212:	bf2b      	itete	cs
 8018214:	4628      	movcs	r0, r5
 8018216:	462b      	movcc	r3, r5
 8018218:	b29b      	uxthcs	r3, r3
 801821a:	b280      	uxthcc	r0, r0
 801821c:	f108 0503 	add.w	r5, r8, #3
 8018220:	fa1f fc8c 	uxth.w	ip, ip
 8018224:	4562      	cmp	r2, ip
 8018226:	d06f      	beq.n	8018308 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8018228:	1c57      	adds	r7, r2, #1
 801822a:	4422      	add	r2, r4
 801822c:	b2bf      	uxth	r7, r7
 801822e:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8018232:	9713      	str	r7, [sp, #76]	@ 0x4c
 8018234:	2704      	movs	r7, #4
 8018236:	46b9      	mov	r9, r7
 8018238:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801823a:	fb19 7202 	smlabb	r2, r9, r2, r7
 801823e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018240:	58bf      	ldr	r7, [r7, r2]
 8018242:	0e3a      	lsrs	r2, r7, #24
 8018244:	9209      	str	r2, [sp, #36]	@ 0x24
 8018246:	d016      	beq.n	8018276 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8018248:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801824c:	fa5f fa87 	uxtb.w	sl, r7
 8018250:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8018254:	fa5f f289 	uxtb.w	r2, r9
 8018258:	9214      	str	r2, [sp, #80]	@ 0x50
 801825a:	b2fa      	uxtb	r2, r7
 801825c:	9215      	str	r2, [sp, #84]	@ 0x54
 801825e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018260:	2aff      	cmp	r2, #255	@ 0xff
 8018262:	d10b      	bne.n	801827c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8018264:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018266:	2aff      	cmp	r2, #255	@ 0xff
 8018268:	d108      	bne.n	801827c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801826a:	f805 ac03 	strb.w	sl, [r5, #-3]
 801826e:	f805 9c02 	strb.w	r9, [r5, #-2]
 8018272:	f805 7c01 	strb.w	r7, [r5, #-1]
 8018276:	3503      	adds	r5, #3
 8018278:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801827a:	e7d3      	b.n	8018224 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801827c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801827e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018280:	437a      	muls	r2, r7
 8018282:	1c57      	adds	r7, r2, #1
 8018284:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8018288:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801828c:	1212      	asrs	r2, r2, #8
 801828e:	fa1f f982 	uxth.w	r9, r2
 8018292:	43d2      	mvns	r2, r2
 8018294:	fb1a fa09 	smulbb	sl, sl, r9
 8018298:	b2d2      	uxtb	r2, r2
 801829a:	fb07 a702 	mla	r7, r7, r2, sl
 801829e:	9209      	str	r2, [sp, #36]	@ 0x24
 80182a0:	b2bf      	uxth	r7, r7
 80182a2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80182a4:	f107 0a01 	add.w	sl, r7, #1
 80182a8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80182ac:	fb12 fa09 	smulbb	sl, r2, r9
 80182b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80182b2:	123f      	asrs	r7, r7, #8
 80182b4:	f805 7c03 	strb.w	r7, [r5, #-3]
 80182b8:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 80182bc:	fb07 aa02 	mla	sl, r7, r2, sl
 80182c0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80182c2:	fb12 f909 	smulbb	r9, r2, r9
 80182c6:	fa1f fa8a 	uxth.w	sl, sl
 80182ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80182cc:	f10a 0701 	add.w	r7, sl, #1
 80182d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80182d4:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 80182d8:	fb07 9902 	mla	r9, r7, r2, r9
 80182dc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80182e0:	fa1f f989 	uxth.w	r9, r9
 80182e4:	f805 ac02 	strb.w	sl, [r5, #-2]
 80182e8:	f109 0201 	add.w	r2, r9, #1
 80182ec:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80182f0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80182f4:	f805 9c01 	strb.w	r9, [r5, #-1]
 80182f8:	e7bd      	b.n	8018276 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 80182fa:	bf00      	nop
 80182fc:	24025120 	.word	0x24025120
 8018300:	2402511a 	.word	0x2402511a
 8018304:	fffff7fb 	.word	0xfffff7fb
 8018308:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801830c:	428e      	cmp	r6, r1
 801830e:	44f0      	add	r8, lr
 8018310:	f4ff af71 	bcc.w	80181f6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8018314:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8018316:	9904      	ldr	r1, [sp, #16]
 8018318:	8812      	ldrh	r2, [r2, #0]
 801831a:	1a52      	subs	r2, r2, r1
 801831c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801831e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018322:	4490      	add	r8, r2
 8018324:	9a07      	ldr	r2, [sp, #28]
 8018326:	3201      	adds	r2, #1
 8018328:	428a      	cmp	r2, r1
 801832a:	9207      	str	r2, [sp, #28]
 801832c:	d111      	bne.n	8018352 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801832e:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8018332:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 8018336:	9b04      	ldr	r3, [sp, #16]
 8018338:	eba5 050c 	sub.w	r5, r5, ip
 801833c:	b2ad      	uxth	r5, r5
 801833e:	2d00      	cmp	r5, #0
 8018340:	bf08      	it	eq
 8018342:	4619      	moveq	r1, r3
 8018344:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018346:	bf18      	it	ne
 8018348:	2100      	movne	r1, #0
 801834a:	3301      	adds	r3, #1
 801834c:	b289      	uxth	r1, r1
 801834e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018350:	e69e      	b.n	8018090 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 8018352:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8018356:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801835a:	1a2d      	subs	r5, r5, r0
 801835c:	b2ad      	uxth	r5, r5
 801835e:	2d00      	cmp	r5, #0
 8018360:	bf18      	it	ne
 8018362:	2000      	movne	r0, #0
 8018364:	e748      	b.n	80181f8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 8018366:	4b04      	ldr	r3, [pc, #16]	@ (8018378 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 8018368:	6818      	ldr	r0, [r3, #0]
 801836a:	6803      	ldr	r3, [r0, #0]
 801836c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801836e:	4798      	blx	r3
 8018370:	b01d      	add	sp, #116	@ 0x74
 8018372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018376:	bf00      	nop
 8018378:	24025120 	.word	0x24025120

0801837c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801837c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018380:	b08f      	sub	sp, #60	@ 0x3c
 8018382:	4616      	mov	r6, r2
 8018384:	4681      	mov	r9, r0
 8018386:	460d      	mov	r5, r1
 8018388:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801838c:	9205      	str	r2, [sp, #20]
 801838e:	2a00      	cmp	r2, #0
 8018390:	f000 82a8 	beq.w	80188e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 8018394:	6830      	ldr	r0, [r6, #0]
 8018396:	ac0a      	add	r4, sp, #40	@ 0x28
 8018398:	6871      	ldr	r1, [r6, #4]
 801839a:	c403      	stmia	r4!, {r0, r1}
 801839c:	6818      	ldr	r0, [r3, #0]
 801839e:	ac0c      	add	r4, sp, #48	@ 0x30
 80183a0:	6859      	ldr	r1, [r3, #4]
 80183a2:	c403      	stmia	r4!, {r0, r1}
 80183a4:	a80a      	add	r0, sp, #40	@ 0x28
 80183a6:	f7f9 fcb9 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80183aa:	4631      	mov	r1, r6
 80183ac:	a80c      	add	r0, sp, #48	@ 0x30
 80183ae:	f7f9 fcdd 	bl	8011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80183b2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80183b6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80183ba:	bfdb      	ittet	le
 80183bc:	b293      	uxthle	r3, r2
 80183be:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80183c2:	2301      	movgt	r3, #1
 80183c4:	fb91 f3f3 	sdivle	r3, r1, r3
 80183c8:	9300      	str	r3, [sp, #0]
 80183ca:	f105 0308 	add.w	r3, r5, #8
 80183ce:	9900      	ldr	r1, [sp, #0]
 80183d0:	9306      	str	r3, [sp, #24]
 80183d2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80183d6:	440b      	add	r3, r1
 80183d8:	3b01      	subs	r3, #1
 80183da:	fb93 f3f1 	sdiv	r3, r3, r1
 80183de:	3b01      	subs	r3, #1
 80183e0:	9906      	ldr	r1, [sp, #24]
 80183e2:	b29b      	uxth	r3, r3
 80183e4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80183e8:	9900      	ldr	r1, [sp, #0]
 80183ea:	9307      	str	r3, [sp, #28]
 80183ec:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80183f0:	fb93 f0f1 	sdiv	r0, r3, r1
 80183f4:	b284      	uxth	r4, r0
 80183f6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80183fa:	b280      	uxth	r0, r0
 80183fc:	9402      	str	r4, [sp, #8]
 80183fe:	9d02      	ldr	r5, [sp, #8]
 8018400:	9c00      	ldr	r4, [sp, #0]
 8018402:	fb05 3514 	mls	r5, r5, r4, r3
 8018406:	fb15 f502 	smulbb	r5, r5, r2
 801840a:	440d      	add	r5, r1
 801840c:	b2ad      	uxth	r5, r5
 801840e:	2800      	cmp	r0, #0
 8018410:	d071      	beq.n	80184f6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 8018412:	1e42      	subs	r2, r0, #1
 8018414:	9806      	ldr	r0, [sp, #24]
 8018416:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801841a:	9a07      	ldr	r2, [sp, #28]
 801841c:	fa98 f888 	rev.w	r8, r8
 8018420:	4490      	add	r8, r2
 8018422:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8018426:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801842a:	4411      	add	r1, r2
 801842c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8018430:	f8df b348 	ldr.w	fp, [pc, #840]	@ 801877c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8018434:	4413      	add	r3, r2
 8018436:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801843a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801843e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8018442:	9301      	str	r3, [sp, #4]
 8018444:	4bcb      	ldr	r3, [pc, #812]	@ (8018774 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 8018446:	6818      	ldr	r0, [r3, #0]
 8018448:	6803      	ldr	r3, [r0, #0]
 801844a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801844c:	4798      	blx	r3
 801844e:	4bca      	ldr	r3, [pc, #808]	@ (8018778 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 8018450:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8018454:	881b      	ldrh	r3, [r3, #0]
 8018456:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 801845a:	fb03 2707 	mla	r7, r3, r7, r2
 801845e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018462:	4363      	muls	r3, r4
 8018464:	2400      	movs	r4, #0
 8018466:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801846a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801846e:	4621      	mov	r1, r4
 8018470:	4407      	add	r7, r0
 8018472:	18fb      	adds	r3, r7, r3
 8018474:	9309      	str	r3, [sp, #36]	@ 0x24
 8018476:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801847a:	fb95 f3f3 	sdiv	r3, r5, r3
 801847e:	9304      	str	r3, [sp, #16]
 8018480:	f109 0304 	add.w	r3, r9, #4
 8018484:	4618      	mov	r0, r3
 8018486:	9308      	str	r3, [sp, #32]
 8018488:	f008 fc2a 	bl	8020ce0 <memset>
 801848c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801848e:	42bb      	cmp	r3, r7
 8018490:	f240 8223 	bls.w	80188da <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 8018494:	2003      	movs	r0, #3
 8018496:	f04f 0c07 	mov.w	ip, #7
 801849a:	f04f 0e0b 	mov.w	lr, #11
 801849e:	2d00      	cmp	r5, #0
 80184a0:	f000 813c 	beq.w	801871c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 80184a4:	f898 3000 	ldrb.w	r3, [r8]
 80184a8:	b2db      	uxtb	r3, r3
 80184aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80184ac:	d126      	bne.n	80184fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 80184ae:	f898 1001 	ldrb.w	r1, [r8, #1]
 80184b2:	f108 0604 	add.w	r6, r8, #4
 80184b6:	f898 2002 	ldrb.w	r2, [r8, #2]
 80184ba:	3d01      	subs	r5, #1
 80184bc:	b2c9      	uxtb	r1, r1
 80184be:	f898 8003 	ldrb.w	r8, [r8, #3]
 80184c2:	b2d2      	uxtb	r2, r2
 80184c4:	f361 0407 	bfi	r4, r1, #0, #8
 80184c8:	fa5f f888 	uxtb.w	r8, r8
 80184cc:	b2ad      	uxth	r5, r5
 80184ce:	f362 240f 	bfi	r4, r2, #8, #8
 80184d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80184d6:	fb10 2208 	smlabb	r2, r0, r8, r2
 80184da:	f368 4417 	bfi	r4, r8, #16, #8
 80184de:	fb1c 2201 	smlabb	r2, ip, r1, r2
 80184e2:	0e23      	lsrs	r3, r4, #24
 80184e4:	fb1e 2303 	smlabb	r3, lr, r3, r2
 80184e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80184ec:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80184f0:	605c      	str	r4, [r3, #4]
 80184f2:	46b0      	mov	r8, r6
 80184f4:	e7d3      	b.n	801849e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 80184f6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80184fa:	e792      	b.n	8018422 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 80184fc:	2bff      	cmp	r3, #255	@ 0xff
 80184fe:	d127      	bne.n	8018550 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 8018500:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018504:	f108 0605 	add.w	r6, r8, #5
 8018508:	f898 3002 	ldrb.w	r3, [r8, #2]
 801850c:	3d01      	subs	r5, #1
 801850e:	b2d2      	uxtb	r2, r2
 8018510:	f898 1003 	ldrb.w	r1, [r8, #3]
 8018514:	b2db      	uxtb	r3, r3
 8018516:	f898 8004 	ldrb.w	r8, [r8, #4]
 801851a:	f362 0407 	bfi	r4, r2, #0, #8
 801851e:	b2c9      	uxtb	r1, r1
 8018520:	fa5f f888 	uxtb.w	r8, r8
 8018524:	f363 240f 	bfi	r4, r3, #8, #8
 8018528:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801852c:	b2ad      	uxth	r5, r5
 801852e:	fb10 3301 	smlabb	r3, r0, r1, r3
 8018532:	f361 4417 	bfi	r4, r1, #16, #8
 8018536:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801853a:	f368 641f 	bfi	r4, r8, #24, #8
 801853e:	fb1e 3808 	smlabb	r8, lr, r8, r3
 8018542:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 8018546:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801854a:	f8c8 4004 	str.w	r4, [r8, #4]
 801854e:	e7d0      	b.n	80184f2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8018550:	119a      	asrs	r2, r3, #6
 8018552:	f108 0601 	add.w	r6, r8, #1
 8018556:	d107      	bne.n	8018568 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 8018558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801855c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8018560:	685c      	ldr	r4, [r3, #4]
 8018562:	3d01      	subs	r5, #1
 8018564:	b2ad      	uxth	r5, r5
 8018566:	e7c4      	b.n	80184f2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8018568:	2a01      	cmp	r2, #1
 801856a:	d129      	bne.n	80185c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 801856c:	f003 0203 	and.w	r2, r3, #3
 8018570:	1ea1      	subs	r1, r4, #2
 8018572:	4411      	add	r1, r2
 8018574:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8018578:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801857c:	b2c9      	uxtb	r1, r1
 801857e:	3a02      	subs	r2, #2
 8018580:	3b02      	subs	r3, #2
 8018582:	f361 0407 	bfi	r4, r1, #0, #8
 8018586:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801858a:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801858e:	f362 240f 	bfi	r4, r2, #8, #8
 8018592:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8018596:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801859a:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801859e:	fb10 2203 	smlabb	r2, r0, r3, r2
 80185a2:	f363 4417 	bfi	r4, r3, #16, #8
 80185a6:	fb1c 2201 	smlabb	r2, ip, r1, r2
 80185aa:	ea4f 6814 	mov.w	r8, r4, lsr #24
 80185ae:	fb1e 2808 	smlabb	r8, lr, r8, r2
 80185b2:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 80185b6:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 80185ba:	f8c8 4004 	str.w	r4, [r8, #4]
 80185be:	e7d0      	b.n	8018562 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 80185c0:	2a02      	cmp	r2, #2
 80185c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80185c6:	d12e      	bne.n	8018626 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 80185c8:	f898 2001 	ldrb.w	r2, [r8, #1]
 80185cc:	f1a3 0a20 	sub.w	sl, r3, #32
 80185d0:	f108 0602 	add.w	r6, r8, #2
 80185d4:	b2d2      	uxtb	r2, r2
 80185d6:	f002 010f 	and.w	r1, r2, #15
 80185da:	1112      	asrs	r2, r2, #4
 80185dc:	3908      	subs	r1, #8
 80185de:	3a08      	subs	r2, #8
 80185e0:	4451      	add	r1, sl
 80185e2:	4492      	add	sl, r2
 80185e4:	4421      	add	r1, r4
 80185e6:	b2c9      	uxtb	r1, r1
 80185e8:	f361 0407 	bfi	r4, r1, #0, #8
 80185ec:	f3c4 2807 	ubfx	r8, r4, #8, #8
 80185f0:	f1a8 0820 	sub.w	r8, r8, #32
 80185f4:	4443      	add	r3, r8
 80185f6:	b2db      	uxtb	r3, r3
 80185f8:	f363 240f 	bfi	r4, r3, #8, #8
 80185fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018600:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 8018604:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 8018608:	fb10 330a 	smlabb	r3, r0, sl, r3
 801860c:	f36a 4417 	bfi	r4, sl, #16, #8
 8018610:	fb1c 3301 	smlabb	r3, ip, r1, r3
 8018614:	0e22      	lsrs	r2, r4, #24
 8018616:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801861a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801861e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8018622:	6054      	str	r4, [r2, #4]
 8018624:	e79d      	b.n	8018562 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 8018626:	3301      	adds	r3, #1
 8018628:	42ab      	cmp	r3, r5
 801862a:	dd59      	ble.n	80186e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 801862c:	1b5d      	subs	r5, r3, r5
 801862e:	2d00      	cmp	r5, #0
 8018630:	dc58      	bgt.n	80186e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 8018632:	f8dd a004 	ldr.w	sl, [sp, #4]
 8018636:	f04f 0800 	mov.w	r8, #0
 801863a:	f1ba 0f00 	cmp.w	sl, #0
 801863e:	f340 8108 	ble.w	8018852 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 8018642:	1c73      	adds	r3, r6, #1
 8018644:	9303      	str	r3, [sp, #12]
 8018646:	7833      	ldrb	r3, [r6, #0]
 8018648:	b2db      	uxtb	r3, r3
 801864a:	2bfe      	cmp	r3, #254	@ 0xfe
 801864c:	d16a      	bne.n	8018724 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 801864e:	7871      	ldrb	r1, [r6, #1]
 8018650:	1d33      	adds	r3, r6, #4
 8018652:	78b2      	ldrb	r2, [r6, #2]
 8018654:	b2c9      	uxtb	r1, r1
 8018656:	78f0      	ldrb	r0, [r6, #3]
 8018658:	b2d2      	uxtb	r2, r2
 801865a:	9303      	str	r3, [sp, #12]
 801865c:	f361 0407 	bfi	r4, r1, #0, #8
 8018660:	b2c0      	uxtb	r0, r0
 8018662:	2303      	movs	r3, #3
 8018664:	f362 240f 	bfi	r4, r2, #8, #8
 8018668:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801866c:	fb13 2200 	smlabb	r2, r3, r0, r2
 8018670:	f360 4417 	bfi	r4, r0, #16, #8
 8018674:	2307      	movs	r3, #7
 8018676:	0e25      	lsrs	r5, r4, #24
 8018678:	fb13 2101 	smlabb	r1, r3, r1, r2
 801867c:	230b      	movs	r3, #11
 801867e:	fb13 1305 	smlabb	r3, r3, r5, r1
 8018682:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018686:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801868a:	605c      	str	r4, [r3, #4]
 801868c:	2501      	movs	r5, #1
 801868e:	462e      	mov	r6, r5
 8018690:	eb06 0308 	add.w	r3, r6, r8
 8018694:	ebaa 0a06 	sub.w	sl, sl, r6
 8018698:	1bad      	subs	r5, r5, r6
 801869a:	2b40      	cmp	r3, #64	@ 0x40
 801869c:	dd16      	ble.n	80186cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801869e:	4658      	mov	r0, fp
 80186a0:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80186a4:	f7ea fc3a 	bl	8002f1c <_ZN8touchgfx5paint9flushLineEPmi>
 80186a8:	4659      	mov	r1, fp
 80186aa:	9b05      	ldr	r3, [sp, #20]
 80186ac:	4642      	mov	r2, r8
 80186ae:	4638      	mov	r0, r7
 80186b0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80186b4:	f7ea fc9a 	bl	8002fec <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 80186b8:	4b30      	ldr	r3, [pc, #192]	@ (801877c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 80186ba:	4447      	add	r7, r8
 80186bc:	f04f 0800 	mov.w	r8, #0
 80186c0:	459b      	cmp	fp, r3
 80186c2:	bf0c      	ite	eq
 80186c4:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 8018780 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 80186c8:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 801877c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 80186cc:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 80186d0:	4633      	mov	r3, r6
 80186d2:	3b01      	subs	r3, #1
 80186d4:	f842 4b04 	str.w	r4, [r2], #4
 80186d8:	d1fb      	bne.n	80186d2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 80186da:	44b0      	add	r8, r6
 80186dc:	9e03      	ldr	r6, [sp, #12]
 80186de:	e7ac      	b.n	801863a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 80186e0:	1aed      	subs	r5, r5, r3
 80186e2:	e73f      	b.n	8018564 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 80186e4:	9b01      	ldr	r3, [sp, #4]
 80186e6:	42ab      	cmp	r3, r5
 80186e8:	bfa8      	it	ge
 80186ea:	462b      	movge	r3, r5
 80186ec:	4698      	mov	r8, r3
 80186ee:	9b01      	ldr	r3, [sp, #4]
 80186f0:	eba3 0a08 	sub.w	sl, r3, r8
 80186f4:	0e23      	lsrs	r3, r4, #24
 80186f6:	eba5 0508 	sub.w	r5, r5, r8
 80186fa:	d00b      	beq.n	8018714 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 80186fc:	9a05      	ldr	r2, [sp, #20]
 80186fe:	4641      	mov	r1, r8
 8018700:	4638      	mov	r0, r7
 8018702:	4353      	muls	r3, r2
 8018704:	1c5a      	adds	r2, r3, #1
 8018706:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801870a:	4622      	mov	r2, r4
 801870c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018710:	f7ea fc1e 	bl	8002f50 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8018714:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018718:	4447      	add	r7, r8
 801871a:	e78c      	b.n	8018636 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801871c:	f8dd a004 	ldr.w	sl, [sp, #4]
 8018720:	4646      	mov	r6, r8
 8018722:	e788      	b.n	8018636 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 8018724:	2bff      	cmp	r3, #255	@ 0xff
 8018726:	d11d      	bne.n	8018764 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 8018728:	7870      	ldrb	r0, [r6, #1]
 801872a:	1d73      	adds	r3, r6, #5
 801872c:	78b2      	ldrb	r2, [r6, #2]
 801872e:	b2c0      	uxtb	r0, r0
 8018730:	78f5      	ldrb	r5, [r6, #3]
 8018732:	b2d2      	uxtb	r2, r2
 8018734:	9303      	str	r3, [sp, #12]
 8018736:	f360 0407 	bfi	r4, r0, #0, #8
 801873a:	7933      	ldrb	r3, [r6, #4]
 801873c:	b2ed      	uxtb	r5, r5
 801873e:	b2d9      	uxtb	r1, r3
 8018740:	f362 240f 	bfi	r4, r2, #8, #8
 8018744:	2303      	movs	r3, #3
 8018746:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801874a:	f365 4417 	bfi	r4, r5, #16, #8
 801874e:	fb13 2205 	smlabb	r2, r3, r5, r2
 8018752:	2307      	movs	r3, #7
 8018754:	f361 641f 	bfi	r4, r1, #24, #8
 8018758:	fb13 2000 	smlabb	r0, r3, r0, r2
 801875c:	230b      	movs	r3, #11
 801875e:	fb13 0301 	smlabb	r3, r3, r1, r0
 8018762:	e78e      	b.n	8018682 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 8018764:	119d      	asrs	r5, r3, #6
 8018766:	d10d      	bne.n	8018784 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 8018768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801876c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8018770:	685c      	ldr	r4, [r3, #4]
 8018772:	e78b      	b.n	801868c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 8018774:	24025120 	.word	0x24025120
 8018778:	2402511a 	.word	0x2402511a
 801877c:	24009740 	.word	0x24009740
 8018780:	24009840 	.word	0x24009840
 8018784:	2d01      	cmp	r5, #1
 8018786:	d12a      	bne.n	80187de <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 8018788:	f003 0203 	and.w	r2, r3, #3
 801878c:	1ea1      	subs	r1, r4, #2
 801878e:	2603      	movs	r6, #3
 8018790:	4411      	add	r1, r2
 8018792:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8018796:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801879a:	b2c9      	uxtb	r1, r1
 801879c:	3a02      	subs	r2, #2
 801879e:	3b02      	subs	r3, #2
 80187a0:	f361 0407 	bfi	r4, r1, #0, #8
 80187a4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80187a8:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80187ac:	f362 240f 	bfi	r4, r2, #8, #8
 80187b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80187b4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80187b8:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80187bc:	fb16 2203 	smlabb	r2, r6, r3, r2
 80187c0:	f363 4417 	bfi	r4, r3, #16, #8
 80187c4:	2307      	movs	r3, #7
 80187c6:	0e20      	lsrs	r0, r4, #24
 80187c8:	fb13 2101 	smlabb	r1, r3, r1, r2
 80187cc:	230b      	movs	r3, #11
 80187ce:	fb13 1300 	smlabb	r3, r3, r0, r1
 80187d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80187d6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80187da:	605c      	str	r4, [r3, #4]
 80187dc:	e757      	b.n	801868e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 80187de:	2d02      	cmp	r5, #2
 80187e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80187e4:	d12f      	bne.n	8018846 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 80187e6:	1cb2      	adds	r2, r6, #2
 80187e8:	f1a3 0020 	sub.w	r0, r3, #32
 80187ec:	9203      	str	r2, [sp, #12]
 80187ee:	7872      	ldrb	r2, [r6, #1]
 80187f0:	b2d2      	uxtb	r2, r2
 80187f2:	f002 010f 	and.w	r1, r2, #15
 80187f6:	1112      	asrs	r2, r2, #4
 80187f8:	3908      	subs	r1, #8
 80187fa:	3a08      	subs	r2, #8
 80187fc:	4401      	add	r1, r0
 80187fe:	4402      	add	r2, r0
 8018800:	4421      	add	r1, r4
 8018802:	b2c9      	uxtb	r1, r1
 8018804:	f361 0407 	bfi	r4, r1, #0, #8
 8018808:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801880c:	3d20      	subs	r5, #32
 801880e:	442b      	add	r3, r5
 8018810:	2503      	movs	r5, #3
 8018812:	b2db      	uxtb	r3, r3
 8018814:	f363 240f 	bfi	r4, r3, #8, #8
 8018818:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801881c:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8018820:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8018824:	fb15 3302 	smlabb	r3, r5, r2, r3
 8018828:	f362 4417 	bfi	r4, r2, #16, #8
 801882c:	2207      	movs	r2, #7
 801882e:	0e20      	lsrs	r0, r4, #24
 8018830:	fb12 3201 	smlabb	r2, r2, r1, r3
 8018834:	210b      	movs	r1, #11
 8018836:	fb11 2100 	smlabb	r1, r1, r0, r2
 801883a:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801883e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8018842:	604c      	str	r4, [r1, #4]
 8018844:	e722      	b.n	801868c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 8018846:	1c5d      	adds	r5, r3, #1
 8018848:	4656      	mov	r6, sl
 801884a:	45aa      	cmp	sl, r5
 801884c:	bfa8      	it	ge
 801884e:	462e      	movge	r6, r5
 8018850:	e71e      	b.n	8018690 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 8018852:	f1b8 0f00 	cmp.w	r8, #0
 8018856:	d00d      	beq.n	8018874 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 8018858:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801885c:	4658      	mov	r0, fp
 801885e:	f7ea fb5d 	bl	8002f1c <_ZN8touchgfx5paint9flushLineEPmi>
 8018862:	4642      	mov	r2, r8
 8018864:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018868:	4638      	mov	r0, r7
 801886a:	9b05      	ldr	r3, [sp, #20]
 801886c:	4659      	mov	r1, fp
 801886e:	4447      	add	r7, r8
 8018870:	f7ea fbbc 	bl	8002fec <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 8018874:	4b1d      	ldr	r3, [pc, #116]	@ (80188ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 8018876:	9a01      	ldr	r2, [sp, #4]
 8018878:	881b      	ldrh	r3, [r3, #0]
 801887a:	1a9b      	subs	r3, r3, r2
 801887c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018880:	441f      	add	r7, r3
 8018882:	9b04      	ldr	r3, [sp, #16]
 8018884:	3301      	adds	r3, #1
 8018886:	9304      	str	r3, [sp, #16]
 8018888:	9a04      	ldr	r2, [sp, #16]
 801888a:	9b00      	ldr	r3, [sp, #0]
 801888c:	4293      	cmp	r3, r2
 801888e:	d11d      	bne.n	80188cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 8018890:	9b02      	ldr	r3, [sp, #8]
 8018892:	2400      	movs	r4, #0
 8018894:	9a02      	ldr	r2, [sp, #8]
 8018896:	f103 0801 	add.w	r8, r3, #1
 801889a:	9b06      	ldr	r3, [sp, #24]
 801889c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 80188a0:	4621      	mov	r1, r4
 80188a2:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80188a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80188aa:	9b07      	ldr	r3, [sp, #28]
 80188ac:	ba36      	rev	r6, r6
 80188ae:	9808      	ldr	r0, [sp, #32]
 80188b0:	441e      	add	r6, r3
 80188b2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80188b6:	1aed      	subs	r5, r5, r3
 80188b8:	f008 fa12 	bl	8020ce0 <memset>
 80188bc:	f8cd 8008 	str.w	r8, [sp, #8]
 80188c0:	b2ad      	uxth	r5, r5
 80188c2:	9404      	str	r4, [sp, #16]
 80188c4:	f7ea fb20 	bl	8002f08 <_ZN8touchgfx5paint8tearDownEv>
 80188c8:	46b0      	mov	r8, r6
 80188ca:	e5df      	b.n	801848c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 80188cc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80188d0:	9a01      	ldr	r2, [sp, #4]
 80188d2:	1a9b      	subs	r3, r3, r2
 80188d4:	1b5d      	subs	r5, r3, r5
 80188d6:	b2ad      	uxth	r5, r5
 80188d8:	e7f4      	b.n	80188c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 80188da:	4b05      	ldr	r3, [pc, #20]	@ (80188f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 80188dc:	6818      	ldr	r0, [r3, #0]
 80188de:	6803      	ldr	r3, [r0, #0]
 80188e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80188e2:	4798      	blx	r3
 80188e4:	b00f      	add	sp, #60	@ 0x3c
 80188e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188ea:	bf00      	nop
 80188ec:	2402511a 	.word	0x2402511a
 80188f0:	24025120 	.word	0x24025120

080188f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 80188f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188f8:	b093      	sub	sp, #76	@ 0x4c
 80188fa:	460d      	mov	r5, r1
 80188fc:	4616      	mov	r6, r2
 80188fe:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 8018902:	9000      	str	r0, [sp, #0]
 8018904:	f1bb 0f00 	cmp.w	fp, #0
 8018908:	f000 82ac 	beq.w	8018e64 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 801890c:	6810      	ldr	r0, [r2, #0]
 801890e:	ac0e      	add	r4, sp, #56	@ 0x38
 8018910:	6851      	ldr	r1, [r2, #4]
 8018912:	c403      	stmia	r4!, {r0, r1}
 8018914:	6818      	ldr	r0, [r3, #0]
 8018916:	ac10      	add	r4, sp, #64	@ 0x40
 8018918:	6859      	ldr	r1, [r3, #4]
 801891a:	c403      	stmia	r4!, {r0, r1}
 801891c:	a80e      	add	r0, sp, #56	@ 0x38
 801891e:	f7f9 f9fd 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018922:	4631      	mov	r1, r6
 8018924:	a810      	add	r0, sp, #64	@ 0x40
 8018926:	f7f9 fa21 	bl	8011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801892a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801892e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8018932:	bfdb      	ittet	le
 8018934:	b293      	uxthle	r3, r2
 8018936:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801893a:	2301      	movgt	r3, #1
 801893c:	fb91 f3f3 	sdivle	r3, r1, r3
 8018940:	9301      	str	r3, [sp, #4]
 8018942:	f105 0308 	add.w	r3, r5, #8
 8018946:	9901      	ldr	r1, [sp, #4]
 8018948:	9305      	str	r3, [sp, #20]
 801894a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801894e:	440b      	add	r3, r1
 8018950:	3b01      	subs	r3, #1
 8018952:	fb93 f3f1 	sdiv	r3, r3, r1
 8018956:	3b01      	subs	r3, #1
 8018958:	9905      	ldr	r1, [sp, #20]
 801895a:	b29b      	uxth	r3, r3
 801895c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018960:	9901      	ldr	r1, [sp, #4]
 8018962:	9306      	str	r3, [sp, #24]
 8018964:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8018968:	fb93 f0f1 	sdiv	r0, r3, r1
 801896c:	b284      	uxth	r4, r0
 801896e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8018972:	9403      	str	r4, [sp, #12]
 8018974:	9d03      	ldr	r5, [sp, #12]
 8018976:	9c01      	ldr	r4, [sp, #4]
 8018978:	fb05 3714 	mls	r7, r5, r4, r3
 801897c:	fb17 f702 	smulbb	r7, r7, r2
 8018980:	440f      	add	r7, r1
 8018982:	b2bf      	uxth	r7, r7
 8018984:	2d00      	cmp	r5, #0
 8018986:	d06b      	beq.n	8018a60 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 8018988:	1e6a      	subs	r2, r5, #1
 801898a:	9805      	ldr	r0, [sp, #20]
 801898c:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 8018990:	9a06      	ldr	r2, [sp, #24]
 8018992:	fa99 f989 	rev.w	r9, r9
 8018996:	4491      	add	r9, r2
 8018998:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801899c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80189a0:	4411      	add	r1, r2
 80189a2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80189a6:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 8018d04 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 80189aa:	4413      	add	r3, r2
 80189ac:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80189b0:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80189b4:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 80189b8:	9302      	str	r3, [sp, #8]
 80189ba:	4bd0      	ldr	r3, [pc, #832]	@ (8018cfc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 80189bc:	6818      	ldr	r0, [r3, #0]
 80189be:	6803      	ldr	r3, [r0, #0]
 80189c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189c2:	4798      	blx	r3
 80189c4:	4bce      	ldr	r3, [pc, #824]	@ (8018d00 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 80189c6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 80189ca:	881b      	ldrh	r3, [r3, #0]
 80189cc:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 80189d0:	fb03 2404 	mla	r4, r3, r4, r2
 80189d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80189d8:	436b      	muls	r3, r5
 80189da:	2500      	movs	r5, #0
 80189dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80189e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80189e4:	4629      	mov	r1, r5
 80189e6:	4404      	add	r4, r0
 80189e8:	18e3      	adds	r3, r4, r3
 80189ea:	930d      	str	r3, [sp, #52]	@ 0x34
 80189ec:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80189f0:	fb97 f3f3 	sdiv	r3, r7, r3
 80189f4:	9304      	str	r3, [sp, #16]
 80189f6:	9b00      	ldr	r3, [sp, #0]
 80189f8:	3304      	adds	r3, #4
 80189fa:	4618      	mov	r0, r3
 80189fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80189fe:	f008 f96f 	bl	8020ce0 <memset>
 8018a02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018a04:	42a3      	cmp	r3, r4
 8018a06:	f240 8228 	bls.w	8018e5a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 8018a0a:	2003      	movs	r0, #3
 8018a0c:	2607      	movs	r6, #7
 8018a0e:	2f00      	cmp	r7, #0
 8018a10:	f000 80cb 	beq.w	8018baa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 8018a14:	f899 3000 	ldrb.w	r3, [r9]
 8018a18:	b2db      	uxtb	r3, r3
 8018a1a:	2bfe      	cmp	r3, #254	@ 0xfe
 8018a1c:	d123      	bne.n	8018a66 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 8018a1e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8018a22:	3f01      	subs	r7, #1
 8018a24:	f899 2002 	ldrb.w	r2, [r9, #2]
 8018a28:	f109 0804 	add.w	r8, r9, #4
 8018a2c:	b2db      	uxtb	r3, r3
 8018a2e:	f899 1003 	ldrb.w	r1, [r9, #3]
 8018a32:	b2d2      	uxtb	r2, r2
 8018a34:	f363 0507 	bfi	r5, r3, #0, #8
 8018a38:	b2c9      	uxtb	r1, r1
 8018a3a:	b2bf      	uxth	r7, r7
 8018a3c:	f362 250f 	bfi	r5, r2, #8, #8
 8018a40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8018a44:	fb10 2201 	smlabb	r2, r0, r1, r2
 8018a48:	f361 4517 	bfi	r5, r1, #16, #8
 8018a4c:	fb16 2303 	smlabb	r3, r6, r3, r2
 8018a50:	9a00      	ldr	r2, [sp, #0]
 8018a52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018a56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018a5a:	605d      	str	r5, [r3, #4]
 8018a5c:	46c1      	mov	r9, r8
 8018a5e:	e7d6      	b.n	8018a0e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 8018a60:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8018a64:	e798      	b.n	8018998 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 8018a66:	119a      	asrs	r2, r3, #6
 8018a68:	f109 0801 	add.w	r8, r9, #1
 8018a6c:	d108      	bne.n	8018a80 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 8018a6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018a72:	9a00      	ldr	r2, [sp, #0]
 8018a74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018a78:	685d      	ldr	r5, [r3, #4]
 8018a7a:	3f01      	subs	r7, #1
 8018a7c:	b2bf      	uxth	r7, r7
 8018a7e:	e7ed      	b.n	8018a5c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 8018a80:	2a01      	cmp	r2, #1
 8018a82:	d125      	bne.n	8018ad0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 8018a84:	f003 0103 	and.w	r1, r3, #3
 8018a88:	1eaa      	subs	r2, r5, #2
 8018a8a:	440a      	add	r2, r1
 8018a8c:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8018a90:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8018a94:	b2d2      	uxtb	r2, r2
 8018a96:	3902      	subs	r1, #2
 8018a98:	3b02      	subs	r3, #2
 8018a9a:	f362 0507 	bfi	r5, r2, #0, #8
 8018a9e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8018aa2:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8018aa6:	f361 250f 	bfi	r5, r1, #8, #8
 8018aaa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8018aae:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8018ab2:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8018ab6:	fb10 1103 	smlabb	r1, r0, r3, r1
 8018aba:	f363 4517 	bfi	r5, r3, #16, #8
 8018abe:	9b00      	ldr	r3, [sp, #0]
 8018ac0:	fb16 1202 	smlabb	r2, r6, r2, r1
 8018ac4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8018ac8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8018acc:	6055      	str	r5, [r2, #4]
 8018ace:	e7d4      	b.n	8018a7a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8018ad0:	2a02      	cmp	r2, #2
 8018ad2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018ad6:	d12c      	bne.n	8018b32 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 8018ad8:	f899 2001 	ldrb.w	r2, [r9, #1]
 8018adc:	f1a3 0c20 	sub.w	ip, r3, #32
 8018ae0:	f109 0802 	add.w	r8, r9, #2
 8018ae4:	b2d2      	uxtb	r2, r2
 8018ae6:	f002 010f 	and.w	r1, r2, #15
 8018aea:	1112      	asrs	r2, r2, #4
 8018aec:	3908      	subs	r1, #8
 8018aee:	3a08      	subs	r2, #8
 8018af0:	4461      	add	r1, ip
 8018af2:	4494      	add	ip, r2
 8018af4:	4429      	add	r1, r5
 8018af6:	b2c9      	uxtb	r1, r1
 8018af8:	f361 0507 	bfi	r5, r1, #0, #8
 8018afc:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8018b00:	f1ae 0e20 	sub.w	lr, lr, #32
 8018b04:	4473      	add	r3, lr
 8018b06:	b2db      	uxtb	r3, r3
 8018b08:	f363 250f 	bfi	r5, r3, #8, #8
 8018b0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018b10:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 8018b14:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 8018b18:	fb10 330c 	smlabb	r3, r0, ip, r3
 8018b1c:	f36c 4517 	bfi	r5, ip, #16, #8
 8018b20:	fb16 3101 	smlabb	r1, r6, r1, r3
 8018b24:	9b00      	ldr	r3, [sp, #0]
 8018b26:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8018b2a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8018b2e:	604d      	str	r5, [r1, #4]
 8018b30:	e7a3      	b.n	8018a7a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8018b32:	3301      	adds	r3, #1
 8018b34:	42bb      	cmp	r3, r7
 8018b36:	dd23      	ble.n	8018b80 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 8018b38:	eba3 0907 	sub.w	r9, r3, r7
 8018b3c:	f1b9 0f00 	cmp.w	r9, #0
 8018b40:	dc20      	bgt.n	8018b84 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 8018b42:	9e02      	ldr	r6, [sp, #8]
 8018b44:	2700      	movs	r7, #0
 8018b46:	2e00      	cmp	r6, #0
 8018b48:	f340 8142 	ble.w	8018dd0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 8018b4c:	f108 0301 	add.w	r3, r8, #1
 8018b50:	9307      	str	r3, [sp, #28]
 8018b52:	f898 3000 	ldrb.w	r3, [r8]
 8018b56:	b2db      	uxtb	r3, r3
 8018b58:	119a      	asrs	r2, r3, #6
 8018b5a:	d12a      	bne.n	8018bb2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 8018b5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018b60:	9a00      	ldr	r2, [sp, #0]
 8018b62:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018b66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018b6a:	685d      	ldr	r5, [r3, #4]
 8018b6c:	f040 811f 	bne.w	8018dae <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8018b70:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8018b74:	7025      	strb	r5, [r4, #0]
 8018b76:	7063      	strb	r3, [r4, #1]
 8018b78:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8018b7c:	70a3      	strb	r3, [r4, #2]
 8018b7e:	e04e      	b.n	8018c1e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8018b80:	1aff      	subs	r7, r7, r3
 8018b82:	e77b      	b.n	8018a7c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 8018b84:	9b02      	ldr	r3, [sp, #8]
 8018b86:	4620      	mov	r0, r4
 8018b88:	462a      	mov	r2, r5
 8018b8a:	454b      	cmp	r3, r9
 8018b8c:	bfa8      	it	ge
 8018b8e:	464b      	movge	r3, r9
 8018b90:	461f      	mov	r7, r3
 8018b92:	9b02      	ldr	r3, [sp, #8]
 8018b94:	4639      	mov	r1, r7
 8018b96:	1bde      	subs	r6, r3, r7
 8018b98:	eba9 0907 	sub.w	r9, r9, r7
 8018b9c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018ba0:	465b      	mov	r3, fp
 8018ba2:	f7ea f9d5 	bl	8002f50 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8018ba6:	443c      	add	r4, r7
 8018ba8:	e7cc      	b.n	8018b44 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8018baa:	46c8      	mov	r8, r9
 8018bac:	9e02      	ldr	r6, [sp, #8]
 8018bae:	46b9      	mov	r9, r7
 8018bb0:	e7c8      	b.n	8018b44 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8018bb2:	2a01      	cmp	r2, #1
 8018bb4:	d136      	bne.n	8018c24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 8018bb6:	f003 0103 	and.w	r1, r3, #3
 8018bba:	1ea8      	subs	r0, r5, #2
 8018bbc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018bc0:	4408      	add	r0, r1
 8018bc2:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8018bc6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8018bca:	b2c0      	uxtb	r0, r0
 8018bcc:	f1a1 0102 	sub.w	r1, r1, #2
 8018bd0:	f1a3 0302 	sub.w	r3, r3, #2
 8018bd4:	f360 0507 	bfi	r5, r0, #0, #8
 8018bd8:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8018bdc:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8018be0:	f361 250f 	bfi	r5, r1, #8, #8
 8018be4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8018be8:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8018bec:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8018bf0:	f04f 0303 	mov.w	r3, #3
 8018bf4:	fb13 ce08 	smlabb	lr, r3, r8, ip
 8018bf8:	f04f 0c07 	mov.w	ip, #7
 8018bfc:	9b00      	ldr	r3, [sp, #0]
 8018bfe:	f368 4517 	bfi	r5, r8, #16, #8
 8018c02:	fb1c ec00 	smlabb	ip, ip, r0, lr
 8018c06:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 8018c0a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8018c0e:	f8cc 5004 	str.w	r5, [ip, #4]
 8018c12:	f040 80cd 	bne.w	8018db0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8018c16:	7020      	strb	r0, [r4, #0]
 8018c18:	7061      	strb	r1, [r4, #1]
 8018c1a:	f884 8002 	strb.w	r8, [r4, #2]
 8018c1e:	3e01      	subs	r6, #1
 8018c20:	3403      	adds	r4, #3
 8018c22:	e0c1      	b.n	8018da8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8018c24:	2a02      	cmp	r2, #2
 8018c26:	d13d      	bne.n	8018ca4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 8018c28:	f898 1001 	ldrb.w	r1, [r8, #1]
 8018c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018c30:	f108 0202 	add.w	r2, r8, #2
 8018c34:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018c38:	b2c9      	uxtb	r1, r1
 8018c3a:	f1a3 0c20 	sub.w	ip, r3, #32
 8018c3e:	9207      	str	r2, [sp, #28]
 8018c40:	f001 000f 	and.w	r0, r1, #15
 8018c44:	f1a0 0008 	sub.w	r0, r0, #8
 8018c48:	4460      	add	r0, ip
 8018c4a:	4428      	add	r0, r5
 8018c4c:	b2c0      	uxtb	r0, r0
 8018c4e:	f360 0507 	bfi	r5, r0, #0, #8
 8018c52:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8018c56:	f1a2 0220 	sub.w	r2, r2, #32
 8018c5a:	4413      	add	r3, r2
 8018c5c:	ea4f 1221 	mov.w	r2, r1, asr #4
 8018c60:	b2db      	uxtb	r3, r3
 8018c62:	f1a2 0208 	sub.w	r2, r2, #8
 8018c66:	f363 250f 	bfi	r5, r3, #8, #8
 8018c6a:	4462      	add	r2, ip
 8018c6c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8018c70:	f04f 0c03 	mov.w	ip, #3
 8018c74:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 8018c78:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8018c7c:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 8018c80:	f04f 0107 	mov.w	r1, #7
 8018c84:	f362 4517 	bfi	r5, r2, #16, #8
 8018c88:	fb11 c100 	smlabb	r1, r1, r0, ip
 8018c8c:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 8018c90:	9900      	ldr	r1, [sp, #0]
 8018c92:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8018c96:	604d      	str	r5, [r1, #4]
 8018c98:	f040 8089 	bne.w	8018dae <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8018c9c:	7020      	strb	r0, [r4, #0]
 8018c9e:	7063      	strb	r3, [r4, #1]
 8018ca0:	70a2      	strb	r2, [r4, #2]
 8018ca2:	e7bc      	b.n	8018c1e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8018ca4:	2bfe      	cmp	r3, #254	@ 0xfe
 8018ca6:	d12f      	bne.n	8018d08 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 8018ca8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018cac:	f108 0304 	add.w	r3, r8, #4
 8018cb0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8018cb4:	f04f 0c03 	mov.w	ip, #3
 8018cb8:	f898 1003 	ldrb.w	r1, [r8, #3]
 8018cbc:	b2c0      	uxtb	r0, r0
 8018cbe:	b2d2      	uxtb	r2, r2
 8018cc0:	9307      	str	r3, [sp, #28]
 8018cc2:	b2c9      	uxtb	r1, r1
 8018cc4:	f360 0507 	bfi	r5, r0, #0, #8
 8018cc8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8018ccc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018cd0:	f362 250f 	bfi	r5, r2, #8, #8
 8018cd4:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 8018cd8:	f04f 0307 	mov.w	r3, #7
 8018cdc:	f361 4517 	bfi	r5, r1, #16, #8
 8018ce0:	fb13 c300 	smlabb	r3, r3, r0, ip
 8018ce4:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 8018ce8:	9b00      	ldr	r3, [sp, #0]
 8018cea:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8018cee:	605d      	str	r5, [r3, #4]
 8018cf0:	d15d      	bne.n	8018dae <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8018cf2:	7020      	strb	r0, [r4, #0]
 8018cf4:	7062      	strb	r2, [r4, #1]
 8018cf6:	70a1      	strb	r1, [r4, #2]
 8018cf8:	e791      	b.n	8018c1e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8018cfa:	bf00      	nop
 8018cfc:	24025120 	.word	0x24025120
 8018d00:	2402511a 	.word	0x2402511a
 8018d04:	24009740 	.word	0x24009740
 8018d08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018d0c:	1c5a      	adds	r2, r3, #1
 8018d0e:	b94b      	cbnz	r3, 8018d24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 8018d10:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018d14:	d14c      	bne.n	8018db0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8018d16:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8018d1a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8018d1e:	7025      	strb	r5, [r4, #0]
 8018d20:	7062      	strb	r2, [r4, #1]
 8018d22:	e72b      	b.n	8018b7c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 8018d24:	4296      	cmp	r6, r2
 8018d26:	46b0      	mov	r8, r6
 8018d28:	bfa8      	it	ge
 8018d2a:	4690      	movge	r8, r2
 8018d2c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8018d30:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018d34:	eba6 0608 	sub.w	r6, r6, r8
 8018d38:	eba2 0908 	sub.w	r9, r2, r8
 8018d3c:	9308      	str	r3, [sp, #32]
 8018d3e:	b2eb      	uxtb	r3, r5
 8018d40:	930c      	str	r3, [sp, #48]	@ 0x30
 8018d42:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8018d46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018d48:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8018d4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8018d4e:	9b08      	ldr	r3, [sp, #32]
 8018d50:	d030      	beq.n	8018db4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 8018d52:	18fb      	adds	r3, r7, r3
 8018d54:	2bc0      	cmp	r3, #192	@ 0xc0
 8018d56:	dd15      	ble.n	8018d84 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 8018d58:	4650      	mov	r0, sl
 8018d5a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8018d5e:	f7ea f8dd 	bl	8002f1c <_ZN8touchgfx5paint9flushLineEPmi>
 8018d62:	2203      	movs	r2, #3
 8018d64:	4651      	mov	r1, sl
 8018d66:	465b      	mov	r3, fp
 8018d68:	4620      	mov	r0, r4
 8018d6a:	443c      	add	r4, r7
 8018d6c:	fb97 f2f2 	sdiv	r2, r7, r2
 8018d70:	f7ea f918 	bl	8002fa4 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8018d74:	4b3d      	ldr	r3, [pc, #244]	@ (8018e6c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 8018d76:	2700      	movs	r7, #0
 8018d78:	459a      	cmp	sl, r3
 8018d7a:	bf0c      	ite	eq
 8018d7c:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 8018e78 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 8018d80:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 8018e6c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 8018d84:	eb0a 0307 	add.w	r3, sl, r7
 8018d88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018d8a:	f1b8 0801 	subs.w	r8, r8, #1
 8018d8e:	f103 0303 	add.w	r3, r3, #3
 8018d92:	f803 2c03 	strb.w	r2, [r3, #-3]
 8018d96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018d98:	f803 2c02 	strb.w	r2, [r3, #-2]
 8018d9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018d9e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8018da2:	d1f1      	bne.n	8018d88 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 8018da4:	9b08      	ldr	r3, [sp, #32]
 8018da6:	441f      	add	r7, r3
 8018da8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018dac:	e6cb      	b.n	8018b46 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 8018dae:	2201      	movs	r2, #1
 8018db0:	4690      	mov	r8, r2
 8018db2:	e7bb      	b.n	8018d2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 8018db4:	4423      	add	r3, r4
 8018db6:	42a3      	cmp	r3, r4
 8018db8:	d9f6      	bls.n	8018da8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8018dba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018dbc:	3403      	adds	r4, #3
 8018dbe:	f804 2c03 	strb.w	r2, [r4, #-3]
 8018dc2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018dc4:	f804 2c02 	strb.w	r2, [r4, #-2]
 8018dc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018dca:	f804 2c01 	strb.w	r2, [r4, #-1]
 8018dce:	e7f2      	b.n	8018db6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 8018dd0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018dd4:	d00e      	beq.n	8018df4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8018dd6:	b16f      	cbz	r7, 8018df4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8018dd8:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8018ddc:	4650      	mov	r0, sl
 8018dde:	f7ea f89d 	bl	8002f1c <_ZN8touchgfx5paint9flushLineEPmi>
 8018de2:	2203      	movs	r2, #3
 8018de4:	4620      	mov	r0, r4
 8018de6:	443c      	add	r4, r7
 8018de8:	465b      	mov	r3, fp
 8018dea:	4651      	mov	r1, sl
 8018dec:	fb97 f2f2 	sdiv	r2, r7, r2
 8018df0:	f7ea f8d8 	bl	8002fa4 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8018df4:	4b1e      	ldr	r3, [pc, #120]	@ (8018e70 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 8018df6:	9a02      	ldr	r2, [sp, #8]
 8018df8:	881b      	ldrh	r3, [r3, #0]
 8018dfa:	1a9b      	subs	r3, r3, r2
 8018dfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018e00:	441c      	add	r4, r3
 8018e02:	9b04      	ldr	r3, [sp, #16]
 8018e04:	3301      	adds	r3, #1
 8018e06:	9304      	str	r3, [sp, #16]
 8018e08:	9a04      	ldr	r2, [sp, #16]
 8018e0a:	9b01      	ldr	r3, [sp, #4]
 8018e0c:	4293      	cmp	r3, r2
 8018e0e:	d11c      	bne.n	8018e4a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 8018e10:	9b03      	ldr	r3, [sp, #12]
 8018e12:	2500      	movs	r5, #0
 8018e14:	9a03      	ldr	r2, [sp, #12]
 8018e16:	1c5e      	adds	r6, r3, #1
 8018e18:	9b05      	ldr	r3, [sp, #20]
 8018e1a:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 8018e1e:	4629      	mov	r1, r5
 8018e20:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8018e24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018e28:	9b06      	ldr	r3, [sp, #24]
 8018e2a:	fa98 f888 	rev.w	r8, r8
 8018e2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018e30:	4498      	add	r8, r3
 8018e32:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8018e36:	1aff      	subs	r7, r7, r3
 8018e38:	f007 ff52 	bl	8020ce0 <memset>
 8018e3c:	b2bf      	uxth	r7, r7
 8018e3e:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8018e42:	f7ea f861 	bl	8002f08 <_ZN8touchgfx5paint8tearDownEv>
 8018e46:	46c1      	mov	r9, r8
 8018e48:	e5db      	b.n	8018a02 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 8018e4a:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 8018e4e:	9b02      	ldr	r3, [sp, #8]
 8018e50:	1aff      	subs	r7, r7, r3
 8018e52:	eba7 0709 	sub.w	r7, r7, r9
 8018e56:	b2bf      	uxth	r7, r7
 8018e58:	e7f3      	b.n	8018e42 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 8018e5a:	4b06      	ldr	r3, [pc, #24]	@ (8018e74 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 8018e5c:	6818      	ldr	r0, [r3, #0]
 8018e5e:	6803      	ldr	r3, [r0, #0]
 8018e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018e62:	4798      	blx	r3
 8018e64:	b013      	add	sp, #76	@ 0x4c
 8018e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e6a:	bf00      	nop
 8018e6c:	24009740 	.word	0x24009740
 8018e70:	2402511a 	.word	0x2402511a
 8018e74:	24025120 	.word	0x24025120
 8018e78:	24009840 	.word	0x24009840

08018e7c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8018e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e80:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018e84:	9c06      	ldr	r4, [sp, #24]
 8018e86:	2800      	cmp	r0, #0
 8018e88:	d06e      	beq.n	8018f68 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018e8a:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8018e8e:	2d00      	cmp	r5, #0
 8018e90:	dd6a      	ble.n	8018f68 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018e92:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8018e96:	f1bc 0f00 	cmp.w	ip, #0
 8018e9a:	dd65      	ble.n	8018f68 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018e9c:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8018ea0:	28ff      	cmp	r0, #255	@ 0xff
 8018ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018ea6:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8018eaa:	fb02 3306 	mla	r3, r2, r6, r3
 8018eae:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8018eb2:	b2e4      	uxtb	r4, r4
 8018eb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018eb8:	4419      	add	r1, r3
 8018eba:	fb02 f30c 	mul.w	r3, r2, ip
 8018ebe:	eba2 0205 	sub.w	r2, r2, r5
 8018ec2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018ec6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018eca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018ece:	440b      	add	r3, r1
 8018ed0:	d03e      	beq.n	8018f50 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8018ed2:	fa1f fc80 	uxth.w	ip, r0
 8018ed6:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 8018eda:	fb06 f60c 	mul.w	r6, r6, ip
 8018ede:	b280      	uxth	r0, r0
 8018ee0:	fb07 f70c 	mul.w	r7, r7, ip
 8018ee4:	fb04 f40c 	mul.w	r4, r4, ip
 8018ee8:	4299      	cmp	r1, r3
 8018eea:	d23d      	bcs.n	8018f68 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018eec:	eb01 0c05 	add.w	ip, r1, r5
 8018ef0:	458c      	cmp	ip, r1
 8018ef2:	f101 0e03 	add.w	lr, r1, #3
 8018ef6:	d928      	bls.n	8018f4a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8018ef8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8018efc:	fb11 f100 	smulbb	r1, r1, r0
 8018f00:	4421      	add	r1, r4
 8018f02:	b289      	uxth	r1, r1
 8018f04:	f101 0801 	add.w	r8, r1, #1
 8018f08:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8018f0c:	1209      	asrs	r1, r1, #8
 8018f0e:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8018f12:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8018f16:	fb11 f100 	smulbb	r1, r1, r0
 8018f1a:	4439      	add	r1, r7
 8018f1c:	b289      	uxth	r1, r1
 8018f1e:	f101 0801 	add.w	r8, r1, #1
 8018f22:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8018f26:	1209      	asrs	r1, r1, #8
 8018f28:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8018f2c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8018f30:	fb11 f100 	smulbb	r1, r1, r0
 8018f34:	4431      	add	r1, r6
 8018f36:	b289      	uxth	r1, r1
 8018f38:	f101 0801 	add.w	r8, r1, #1
 8018f3c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8018f40:	1209      	asrs	r1, r1, #8
 8018f42:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8018f46:	4671      	mov	r1, lr
 8018f48:	e7d2      	b.n	8018ef0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8018f4a:	4411      	add	r1, r2
 8018f4c:	e7cc      	b.n	8018ee8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8018f4e:	4411      	add	r1, r2
 8018f50:	4299      	cmp	r1, r3
 8018f52:	d209      	bcs.n	8018f68 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018f54:	1948      	adds	r0, r1, r5
 8018f56:	4281      	cmp	r1, r0
 8018f58:	d2f9      	bcs.n	8018f4e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8018f5a:	700c      	strb	r4, [r1, #0]
 8018f5c:	3103      	adds	r1, #3
 8018f5e:	f801 7c02 	strb.w	r7, [r1, #-2]
 8018f62:	f801 6c01 	strb.w	r6, [r1, #-1]
 8018f66:	e7f6      	b.n	8018f56 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8018f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018f6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8018f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f70:	b093      	sub	sp, #76	@ 0x4c
 8018f72:	4699      	mov	r9, r3
 8018f74:	4617      	mov	r7, r2
 8018f76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018f7a:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 8018f7e:	4604      	mov	r4, r0
 8018f80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018f84:	a80c      	add	r0, sp, #48	@ 0x30
 8018f86:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 8018f8a:	460d      	mov	r5, r1
 8018f8c:	4649      	mov	r1, r9
 8018f8e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8018f92:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8018f96:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 8018f9a:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 8018f9e:	f7f4 fb5d 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 8018fa2:	4639      	mov	r1, r7
 8018fa4:	a80c      	add	r0, sp, #48	@ 0x30
 8018fa6:	f7f4 fb59 	bl	800d65c <_ZN8touchgfx4RectaNERKS0_>
 8018faa:	4b78      	ldr	r3, [pc, #480]	@ (801918c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8018fac:	8818      	ldrh	r0, [r3, #0]
 8018fae:	4b78      	ldr	r3, [pc, #480]	@ (8019190 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8018fb0:	b202      	sxth	r2, r0
 8018fb2:	8819      	ldrh	r1, [r3, #0]
 8018fb4:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8018fb8:	b20f      	sxth	r7, r1
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	da07      	bge.n	8018fce <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8018fbe:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 8018fc2:	4463      	add	r3, ip
 8018fc4:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8018fc8:	2300      	movs	r3, #0
 8018fca:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8018fce:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8018fd2:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 8018fd6:	1ad2      	subs	r2, r2, r3
 8018fd8:	4594      	cmp	ip, r2
 8018fda:	bfc4      	itt	gt
 8018fdc:	1ac2      	subgt	r2, r0, r3
 8018fde:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 8018fe2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8018fe6:	2a00      	cmp	r2, #0
 8018fe8:	da07      	bge.n	8018ffa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8018fea:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 8018fee:	4462      	add	r2, ip
 8018ff0:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8018ffa:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8018ffe:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 8019002:	1abf      	subs	r7, r7, r2
 8019004:	45bc      	cmp	ip, r7
 8019006:	f8df c190 	ldr.w	ip, [pc, #400]	@ 8019198 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801900a:	bfc8      	it	gt
 801900c:	1a8f      	subgt	r7, r1, r2
 801900e:	f89c c000 	ldrb.w	ip, [ip]
 8019012:	bfc8      	it	gt
 8019014:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 8019018:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801901c:	f1bc 0f00 	cmp.w	ip, #0
 8019020:	d176      	bne.n	8019110 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8019022:	4287      	cmp	r7, r0
 8019024:	bf14      	ite	ne
 8019026:	2100      	movne	r1, #0
 8019028:	2101      	moveq	r1, #1
 801902a:	2f00      	cmp	r7, #0
 801902c:	9107      	str	r1, [sp, #28]
 801902e:	dd73      	ble.n	8019118 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8019030:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 8019034:	2900      	cmp	r1, #0
 8019036:	9104      	str	r1, [sp, #16]
 8019038:	dd6e      	ble.n	8019118 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801903a:	f8b9 1000 	ldrh.w	r1, [r9]
 801903e:	a80e      	add	r0, sp, #56	@ 0x38
 8019040:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 8019044:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8019048:	1a5b      	subs	r3, r3, r1
 801904a:	a910      	add	r1, sp, #64	@ 0x40
 801904c:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8019050:	b21b      	sxth	r3, r3
 8019052:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 8019056:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801919c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801905a:	9305      	str	r3, [sp, #20]
 801905c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8019060:	1ad2      	subs	r2, r2, r3
 8019062:	b213      	sxth	r3, r2
 8019064:	9306      	str	r3, [sp, #24]
 8019066:	9b05      	ldr	r3, [sp, #20]
 8019068:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801906c:	9b06      	ldr	r3, [sp, #24]
 801906e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8019072:	9b04      	ldr	r3, [sp, #16]
 8019074:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 8019078:	2300      	movs	r3, #0
 801907a:	9310      	str	r3, [sp, #64]	@ 0x40
 801907c:	f7f8 fe76 	bl	8011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019080:	4640      	mov	r0, r8
 8019082:	f7f8 fe4b 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019086:	a810      	add	r0, sp, #64	@ 0x40
 8019088:	f7f8 fe48 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801908c:	4b41      	ldr	r3, [pc, #260]	@ (8019194 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801908e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8019092:	4628      	mov	r0, r5
 8019094:	881b      	ldrh	r3, [r3, #0]
 8019096:	9308      	str	r3, [sp, #32]
 8019098:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801909c:	b21b      	sxth	r3, r3
 801909e:	9303      	str	r3, [sp, #12]
 80190a0:	682b      	ldr	r3, [r5, #0]
 80190a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80190a4:	4798      	blx	r3
 80190a6:	9a03      	ldr	r2, [sp, #12]
 80190a8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 80190ac:	4681      	mov	r9, r0
 80190ae:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80190b2:	fb13 f302 	smulbb	r3, r3, r2
 80190b6:	2203      	movs	r2, #3
 80190b8:	f8da 0000 	ldr.w	r0, [sl]
 80190bc:	fb15 3302 	smlabb	r3, r5, r2, r3
 80190c0:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 80190c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80190c4:	441d      	add	r5, r3
 80190c6:	6803      	ldr	r3, [r0, #0]
 80190c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80190ca:	4798      	blx	r3
 80190cc:	9009      	str	r0, [sp, #36]	@ 0x24
 80190ce:	f8da 0000 	ldr.w	r0, [sl]
 80190d2:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80190d6:	6803      	ldr	r3, [r0, #0]
 80190d8:	910a      	str	r1, [sp, #40]	@ 0x28
 80190da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80190dc:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 80190e0:	4798      	blx	r3
 80190e2:	f010 0f01 	tst.w	r0, #1
 80190e6:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 80190ea:	d01e      	beq.n	801912a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 80190ec:	f8da 0000 	ldr.w	r0, [sl]
 80190f0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80190f4:	6803      	ldr	r3, [r0, #0]
 80190f6:	9200      	str	r2, [sp, #0]
 80190f8:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 80190fa:	462b      	mov	r3, r5
 80190fc:	e898 0006 	ldmia.w	r8, {r1, r2}
 8019100:	47b0      	blx	r6
 8019102:	9b05      	ldr	r3, [sp, #20]
 8019104:	80a7      	strh	r7, [r4, #4]
 8019106:	8023      	strh	r3, [r4, #0]
 8019108:	9b06      	ldr	r3, [sp, #24]
 801910a:	8063      	strh	r3, [r4, #2]
 801910c:	9b04      	ldr	r3, [sp, #16]
 801910e:	e007      	b.n	8019120 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8019110:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 8019114:	4288      	cmp	r0, r1
 8019116:	e785      	b.n	8019024 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8019118:	2300      	movs	r3, #0
 801911a:	8023      	strh	r3, [r4, #0]
 801911c:	8063      	strh	r3, [r4, #2]
 801911e:	80a3      	strh	r3, [r4, #4]
 8019120:	4620      	mov	r0, r4
 8019122:	80e3      	strh	r3, [r4, #6]
 8019124:	b013      	add	sp, #76	@ 0x4c
 8019126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801912a:	fb09 f606 	mul.w	r6, r9, r6
 801912e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019130:	fb11 6602 	smlabb	r6, r1, r2, r6
 8019134:	9a07      	ldr	r2, [sp, #28]
 8019136:	4433      	add	r3, r6
 8019138:	461e      	mov	r6, r3
 801913a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801913e:	b16a      	cbz	r2, 801915c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8019140:	9a08      	ldr	r2, [sp, #32]
 8019142:	4593      	cmp	fp, r2
 8019144:	d10a      	bne.n	801915c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8019146:	f8da 0000 	ldr.w	r0, [sl]
 801914a:	fb09 f303 	mul.w	r3, r9, r3
 801914e:	4629      	mov	r1, r5
 8019150:	6802      	ldr	r2, [r0, #0]
 8019152:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 8019156:	4632      	mov	r2, r6
 8019158:	47d0      	blx	sl
 801915a:	e7d2      	b.n	8019102 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801915c:	9a03      	ldr	r2, [sp, #12]
 801915e:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801919c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8019162:	fb02 5803 	mla	r8, r2, r3, r5
 8019166:	4545      	cmp	r5, r8
 8019168:	d2cb      	bcs.n	8019102 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801916a:	f8db 0000 	ldr.w	r0, [fp]
 801916e:	4629      	mov	r1, r5
 8019170:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8019174:	6802      	ldr	r2, [r0, #0]
 8019176:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801917a:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801917e:	4632      	mov	r2, r6
 8019180:	47d0      	blx	sl
 8019182:	9b03      	ldr	r3, [sp, #12]
 8019184:	444e      	add	r6, r9
 8019186:	441d      	add	r5, r3
 8019188:	e7ed      	b.n	8019166 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801918a:	bf00      	nop
 801918c:	24025114 	.word	0x24025114
 8019190:	24025116 	.word	0x24025116
 8019194:	2402511a 	.word	0x2402511a
 8019198:	24025118 	.word	0x24025118
 801919c:	24025120 	.word	0x24025120

080191a0 <_ZN8touchgfx8LCD24bppC1Ev>:
 80191a0:	2200      	movs	r2, #0
 80191a2:	490e      	ldr	r1, [pc, #56]	@ (80191dc <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 80191a4:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80191a8:	6001      	str	r1, [r0, #0]
 80191aa:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80191ae:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80191b2:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80191b6:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 80191ba:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80191be:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 80191c2:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 80191c6:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 80191ca:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 80191ce:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 80191d2:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 80191d6:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 80191da:	4770      	bx	lr
 80191dc:	08024770 	.word	0x08024770

080191e0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80191e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191e4:	b091      	sub	sp, #68	@ 0x44
 80191e6:	4607      	mov	r7, r0
 80191e8:	4688      	mov	r8, r1
 80191ea:	6810      	ldr	r0, [r2, #0]
 80191ec:	6851      	ldr	r1, [r2, #4]
 80191ee:	ac0c      	add	r4, sp, #48	@ 0x30
 80191f0:	4616      	mov	r6, r2
 80191f2:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 80191f6:	4d64      	ldr	r5, [pc, #400]	@ (8019388 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80191f8:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801938c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80191fc:	c403      	stmia	r4!, {r0, r1}
 80191fe:	6818      	ldr	r0, [r3, #0]
 8019200:	ac0e      	add	r4, sp, #56	@ 0x38
 8019202:	6859      	ldr	r1, [r3, #4]
 8019204:	c403      	stmia	r4!, {r0, r1}
 8019206:	a80c      	add	r0, sp, #48	@ 0x30
 8019208:	f7f8 fd88 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801920c:	4631      	mov	r1, r6
 801920e:	a80e      	add	r0, sp, #56	@ 0x38
 8019210:	f7f8 fdac 	bl	8011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019214:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8019218:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801921c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8019220:	6828      	ldr	r0, [r5, #0]
 8019222:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019226:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801922a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801922e:	440f      	add	r7, r1
 8019230:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8019234:	440a      	add	r2, r1
 8019236:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801923a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801923e:	4413      	add	r3, r2
 8019240:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8019244:	6803      	ldr	r3, [r0, #0]
 8019246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019248:	4798      	blx	r3
 801924a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801924e:	6828      	ldr	r0, [r5, #0]
 8019250:	d01f      	beq.n	8019292 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8019252:	2201      	movs	r2, #1
 8019254:	2500      	movs	r5, #0
 8019256:	6801      	ldr	r1, [r0, #0]
 8019258:	b2a4      	uxth	r4, r4
 801925a:	b2b6      	uxth	r6, r6
 801925c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8019260:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8019264:	250b      	movs	r5, #11
 8019266:	9507      	str	r5, [sp, #28]
 8019268:	f8ba 5000 	ldrh.w	r5, [sl]
 801926c:	f8cd 9010 	str.w	r9, [sp, #16]
 8019270:	9602      	str	r6, [sp, #8]
 8019272:	9401      	str	r4, [sp, #4]
 8019274:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8019278:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801927c:	9203      	str	r2, [sp, #12]
 801927e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8019282:	9200      	str	r2, [sp, #0]
 8019284:	4642      	mov	r2, r8
 8019286:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 8019288:	4639      	mov	r1, r7
 801928a:	47a0      	blx	r4
 801928c:	b011      	add	sp, #68	@ 0x44
 801928e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019292:	6803      	ldr	r3, [r0, #0]
 8019294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019296:	4798      	blx	r3
 8019298:	f8ba 5000 	ldrh.w	r5, [sl]
 801929c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80192a0:	f04f 0e04 	mov.w	lr, #4
 80192a4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80192a8:	436e      	muls	r6, r5
 80192aa:	fb05 2303 	mla	r3, r5, r3, r2
 80192ae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80192b2:	1b2d      	subs	r5, r5, r4
 80192b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80192b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80192bc:	4418      	add	r0, r3
 80192be:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80192c2:	1982      	adds	r2, r0, r6
 80192c4:	1b1b      	subs	r3, r3, r4
 80192c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80192ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80192cc:	4290      	cmp	r0, r2
 80192ce:	d254      	bcs.n	801937a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 80192d0:	eb00 0a04 	add.w	sl, r0, r4
 80192d4:	4550      	cmp	r0, sl
 80192d6:	d24c      	bcs.n	8019372 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 80192d8:	f817 1b01 	ldrb.w	r1, [r7], #1
 80192dc:	fb1e e101 	smlabb	r1, lr, r1, lr
 80192e0:	eb08 0c01 	add.w	ip, r8, r1
 80192e4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80192e8:	b173      	cbz	r3, 8019308 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80192ea:	2bff      	cmp	r3, #255	@ 0xff
 80192ec:	f818 b001 	ldrb.w	fp, [r8, r1]
 80192f0:	d10c      	bne.n	801930c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80192f2:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80192f6:	d109      	bne.n	801930c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80192f8:	f880 b000 	strb.w	fp, [r0]
 80192fc:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8019300:	7043      	strb	r3, [r0, #1]
 8019302:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8019306:	7083      	strb	r3, [r0, #2]
 8019308:	3003      	adds	r0, #3
 801930a:	e7e3      	b.n	80192d4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801930c:	fb09 f103 	mul.w	r1, r9, r3
 8019310:	1c4b      	adds	r3, r1, #1
 8019312:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8019316:	7801      	ldrb	r1, [r0, #0]
 8019318:	121b      	asrs	r3, r3, #8
 801931a:	b29e      	uxth	r6, r3
 801931c:	43db      	mvns	r3, r3
 801931e:	fb1b fb06 	smulbb	fp, fp, r6
 8019322:	b2db      	uxtb	r3, r3
 8019324:	fb01 b103 	mla	r1, r1, r3, fp
 8019328:	b289      	uxth	r1, r1
 801932a:	f101 0b01 	add.w	fp, r1, #1
 801932e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8019332:	f890 b001 	ldrb.w	fp, [r0, #1]
 8019336:	fb1b fb03 	smulbb	fp, fp, r3
 801933a:	1209      	asrs	r1, r1, #8
 801933c:	7001      	strb	r1, [r0, #0]
 801933e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8019342:	fb01 b106 	mla	r1, r1, r6, fp
 8019346:	b289      	uxth	r1, r1
 8019348:	f101 0b01 	add.w	fp, r1, #1
 801934c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8019350:	1209      	asrs	r1, r1, #8
 8019352:	7041      	strb	r1, [r0, #1]
 8019354:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8019358:	f890 c002 	ldrb.w	ip, [r0, #2]
 801935c:	fb1c f303 	smulbb	r3, ip, r3
 8019360:	fb01 3606 	mla	r6, r1, r6, r3
 8019364:	b2b6      	uxth	r6, r6
 8019366:	1c73      	adds	r3, r6, #1
 8019368:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801936c:	1236      	asrs	r6, r6, #8
 801936e:	7086      	strb	r6, [r0, #2]
 8019370:	e7ca      	b.n	8019308 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8019372:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019374:	4428      	add	r0, r5
 8019376:	441f      	add	r7, r3
 8019378:	e7a8      	b.n	80192cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801937a:	4b03      	ldr	r3, [pc, #12]	@ (8019388 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801937c:	6818      	ldr	r0, [r3, #0]
 801937e:	6803      	ldr	r3, [r0, #0]
 8019380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019382:	4798      	blx	r3
 8019384:	e782      	b.n	801928c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8019386:	bf00      	nop
 8019388:	24025120 	.word	0x24025120
 801938c:	2402511a 	.word	0x2402511a

08019390 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8019390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019394:	b091      	sub	sp, #68	@ 0x44
 8019396:	4680      	mov	r8, r0
 8019398:	460e      	mov	r6, r1
 801939a:	6810      	ldr	r0, [r2, #0]
 801939c:	6851      	ldr	r1, [r2, #4]
 801939e:	ad0c      	add	r5, sp, #48	@ 0x30
 80193a0:	4614      	mov	r4, r2
 80193a2:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 80193a6:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8019540 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 80193aa:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8019544 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80193ae:	c503      	stmia	r5!, {r0, r1}
 80193b0:	6818      	ldr	r0, [r3, #0]
 80193b2:	ad0e      	add	r5, sp, #56	@ 0x38
 80193b4:	6859      	ldr	r1, [r3, #4]
 80193b6:	c503      	stmia	r5!, {r0, r1}
 80193b8:	a80c      	add	r0, sp, #48	@ 0x30
 80193ba:	f7f8 fcaf 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80193be:	4621      	mov	r1, r4
 80193c0:	a80e      	add	r0, sp, #56	@ 0x38
 80193c2:	f7f8 fcd3 	bl	8011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80193c6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80193ca:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80193ce:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80193d2:	f8d9 0000 	ldr.w	r0, [r9]
 80193d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80193da:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 80193de:	eb08 0401 	add.w	r4, r8, r1
 80193e2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80193e6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 80193ea:	440a      	add	r2, r1
 80193ec:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80193f0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80193f4:	4413      	add	r3, r2
 80193f6:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80193fa:	6803      	ldr	r3, [r0, #0]
 80193fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80193fe:	4798      	blx	r3
 8019400:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8019404:	f8d9 0000 	ldr.w	r0, [r9]
 8019408:	d022      	beq.n	8019450 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801940a:	2200      	movs	r2, #0
 801940c:	f04f 0c01 	mov.w	ip, #1
 8019410:	6801      	ldr	r1, [r0, #0]
 8019412:	b2ad      	uxth	r5, r5
 8019414:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8019418:	e9cd c208 	strd	ip, r2, [sp, #32]
 801941c:	f04f 0c0b 	mov.w	ip, #11
 8019420:	f8cd c01c 	str.w	ip, [sp, #28]
 8019424:	f8ba c000 	ldrh.w	ip, [sl]
 8019428:	9704      	str	r7, [sp, #16]
 801942a:	9502      	str	r5, [sp, #8]
 801942c:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8019430:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8019434:	9203      	str	r2, [sp, #12]
 8019436:	fa1f f288 	uxth.w	r2, r8
 801943a:	9201      	str	r2, [sp, #4]
 801943c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8019440:	9200      	str	r2, [sp, #0]
 8019442:	4632      	mov	r2, r6
 8019444:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 8019446:	4621      	mov	r1, r4
 8019448:	47a8      	blx	r5
 801944a:	b011      	add	sp, #68	@ 0x44
 801944c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019450:	6803      	ldr	r3, [r0, #0]
 8019452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019454:	4798      	blx	r3
 8019456:	f8ba 2000 	ldrh.w	r2, [sl]
 801945a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801945e:	f04f 0e03 	mov.w	lr, #3
 8019462:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8019466:	4355      	muls	r5, r2
 8019468:	fa1f fc87 	uxth.w	ip, r7
 801946c:	fb02 1303 	mla	r3, r2, r3, r1
 8019470:	eba2 0208 	sub.w	r2, r2, r8
 8019474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019478:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801947c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019480:	4418      	add	r0, r3
 8019482:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019484:	1943      	adds	r3, r0, r5
 8019486:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801948a:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801948e:	eba2 0208 	sub.w	r2, r2, r8
 8019492:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019496:	b2ad      	uxth	r5, r5
 8019498:	4298      	cmp	r0, r3
 801949a:	d24a      	bcs.n	8019532 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801949c:	eb00 0908 	add.w	r9, r0, r8
 80194a0:	4621      	mov	r1, r4
 80194a2:	4548      	cmp	r0, r9
 80194a4:	460c      	mov	r4, r1
 80194a6:	d240      	bcs.n	801952a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80194a8:	f04f 0a04 	mov.w	sl, #4
 80194ac:	7824      	ldrb	r4, [r4, #0]
 80194ae:	2fff      	cmp	r7, #255	@ 0xff
 80194b0:	f101 0101 	add.w	r1, r1, #1
 80194b4:	fb1e a404 	smlabb	r4, lr, r4, sl
 80194b8:	eb06 0a04 	add.w	sl, r6, r4
 80194bc:	f816 b004 	ldrb.w	fp, [r6, r4]
 80194c0:	d02b      	beq.n	801951a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 80194c2:	7804      	ldrb	r4, [r0, #0]
 80194c4:	fb14 f405 	smulbb	r4, r4, r5
 80194c8:	fb0b 440c 	mla	r4, fp, ip, r4
 80194cc:	b2a4      	uxth	r4, r4
 80194ce:	f104 0b01 	add.w	fp, r4, #1
 80194d2:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80194d6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80194da:	fb1b fb05 	smulbb	fp, fp, r5
 80194de:	1224      	asrs	r4, r4, #8
 80194e0:	7004      	strb	r4, [r0, #0]
 80194e2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80194e6:	fb04 b40c 	mla	r4, r4, ip, fp
 80194ea:	b2a4      	uxth	r4, r4
 80194ec:	f104 0b01 	add.w	fp, r4, #1
 80194f0:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80194f4:	1224      	asrs	r4, r4, #8
 80194f6:	7044      	strb	r4, [r0, #1]
 80194f8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 80194fc:	f890 a002 	ldrb.w	sl, [r0, #2]
 8019500:	fb1a fa05 	smulbb	sl, sl, r5
 8019504:	fb04 a40c 	mla	r4, r4, ip, sl
 8019508:	b2a4      	uxth	r4, r4
 801950a:	f104 0a01 	add.w	sl, r4, #1
 801950e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8019512:	1224      	asrs	r4, r4, #8
 8019514:	7084      	strb	r4, [r0, #2]
 8019516:	3003      	adds	r0, #3
 8019518:	e7c3      	b.n	80194a2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801951a:	f880 b000 	strb.w	fp, [r0]
 801951e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8019522:	7044      	strb	r4, [r0, #1]
 8019524:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8019528:	e7f4      	b.n	8019514 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801952a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801952c:	4420      	add	r0, r4
 801952e:	188c      	adds	r4, r1, r2
 8019530:	e7b2      	b.n	8019498 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8019532:	4b03      	ldr	r3, [pc, #12]	@ (8019540 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8019534:	6818      	ldr	r0, [r3, #0]
 8019536:	6803      	ldr	r3, [r0, #0]
 8019538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801953a:	4798      	blx	r3
 801953c:	e785      	b.n	801944a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801953e:	bf00      	nop
 8019540:	24025120 	.word	0x24025120
 8019544:	2402511a 	.word	0x2402511a

08019548 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8019548:	b4f0      	push	{r4, r5, r6, r7}
 801954a:	460c      	mov	r4, r1
 801954c:	4611      	mov	r1, r2
 801954e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019552:	461a      	mov	r2, r3
 8019554:	780f      	ldrb	r7, [r1, #0]
 8019556:	9b04      	ldr	r3, [sp, #16]
 8019558:	784e      	ldrb	r6, [r1, #1]
 801955a:	b11f      	cbz	r7, 8019564 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801955c:	2f01      	cmp	r7, #1
 801955e:	d01d      	beq.n	801959c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8019560:	bcf0      	pop	{r4, r5, r6, r7}
 8019562:	4770      	bx	lr
 8019564:	2e03      	cmp	r6, #3
 8019566:	d8fb      	bhi.n	8019560 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8019568:	e8df f006 	tbb	[pc, r6]
 801956c:	16140702 	.word	0x16140702
 8019570:	9504      	str	r5, [sp, #16]
 8019572:	4620      	mov	r0, r4
 8019574:	bcf0      	pop	{r4, r5, r6, r7}
 8019576:	f7ff be33 	b.w	80191e0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801957a:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801957c:	2800      	cmp	r0, #0
 801957e:	d0ef      	beq.n	8019560 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8019580:	6806      	ldr	r6, [r0, #0]
 8019582:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8019586:	68f5      	ldr	r5, [r6, #12]
 8019588:	4613      	mov	r3, r2
 801958a:	46ac      	mov	ip, r5
 801958c:	460a      	mov	r2, r1
 801958e:	4621      	mov	r1, r4
 8019590:	bcf0      	pop	{r4, r5, r6, r7}
 8019592:	4760      	bx	ip
 8019594:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8019596:	e7f1      	b.n	801957c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8019598:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801959a:	e7ef      	b.n	801957c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801959c:	2e03      	cmp	r6, #3
 801959e:	d8df      	bhi.n	8019560 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80195a0:	e8df f006 	tbb	[pc, r6]
 80195a4:	110f0702 	.word	0x110f0702
 80195a8:	9504      	str	r5, [sp, #16]
 80195aa:	4620      	mov	r0, r4
 80195ac:	bcf0      	pop	{r4, r5, r6, r7}
 80195ae:	f7ff beef 	b.w	8019390 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80195b2:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80195b4:	2800      	cmp	r0, #0
 80195b6:	d0d3      	beq.n	8019560 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80195b8:	6806      	ldr	r6, [r0, #0]
 80195ba:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80195be:	68b5      	ldr	r5, [r6, #8]
 80195c0:	e7e2      	b.n	8019588 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80195c2:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 80195c4:	e7f6      	b.n	80195b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 80195c6:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 80195c8:	e7f4      	b.n	80195b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

080195cc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 80195cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80195d0:	4605      	mov	r5, r0
 80195d2:	b08f      	sub	sp, #60	@ 0x3c
 80195d4:	460c      	mov	r4, r1
 80195d6:	461f      	mov	r7, r3
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d052      	beq.n	8019682 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80195dc:	6808      	ldr	r0, [r1, #0]
 80195de:	ab0a      	add	r3, sp, #40	@ 0x28
 80195e0:	6849      	ldr	r1, [r1, #4]
 80195e2:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 80197ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 80195e6:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 80197b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 80195ea:	c303      	stmia	r3!, {r0, r1}
 80195ec:	6810      	ldr	r0, [r2, #0]
 80195ee:	ab0c      	add	r3, sp, #48	@ 0x30
 80195f0:	6851      	ldr	r1, [r2, #4]
 80195f2:	c303      	stmia	r3!, {r0, r1}
 80195f4:	a80a      	add	r0, sp, #40	@ 0x28
 80195f6:	f7f8 fb91 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80195fa:	4621      	mov	r1, r4
 80195fc:	a80c      	add	r0, sp, #48	@ 0x30
 80195fe:	f7f8 fbb5 	bl	8011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019602:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8019606:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801960a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801960e:	f8d8 0000 	ldr.w	r0, [r8]
 8019612:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019616:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801961a:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801961e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8019622:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8019626:	440a      	add	r2, r1
 8019628:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801962c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8019630:	4413      	add	r3, r2
 8019632:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8019636:	6803      	ldr	r3, [r0, #0]
 8019638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801963a:	4798      	blx	r3
 801963c:	2fff      	cmp	r7, #255	@ 0xff
 801963e:	d023      	beq.n	8019688 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8019640:	f010 0f04 	tst.w	r0, #4
 8019644:	f8d8 0000 	ldr.w	r0, [r8]
 8019648:	d021      	beq.n	801968e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801964a:	2100      	movs	r1, #0
 801964c:	f04f 0e01 	mov.w	lr, #1
 8019650:	f8d0 c000 	ldr.w	ip, [r0]
 8019654:	b2a4      	uxth	r4, r4
 8019656:	9106      	str	r1, [sp, #24]
 8019658:	b2b6      	uxth	r6, r6
 801965a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801965e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8019662:	e9cd e107 	strd	lr, r1, [sp, #28]
 8019666:	f8b9 e000 	ldrh.w	lr, [r9]
 801966a:	9703      	str	r7, [sp, #12]
 801966c:	9401      	str	r4, [sp, #4]
 801966e:	9600      	str	r6, [sp, #0]
 8019670:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8019674:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8019678:	9102      	str	r1, [sp, #8]
 801967a:	4629      	mov	r1, r5
 801967c:	f8dc 4044 	ldr.w	r4, [ip, #68]	@ 0x44
 8019680:	47a0      	blx	r4
 8019682:	b00f      	add	sp, #60	@ 0x3c
 8019684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019688:	f010 0f01 	tst.w	r0, #1
 801968c:	e7da      	b.n	8019644 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801968e:	6803      	ldr	r3, [r0, #0]
 8019690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019692:	4798      	blx	r3
 8019694:	f8b9 1000 	ldrh.w	r1, [r9]
 8019698:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801969c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80196a0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80196a4:	434c      	muls	r4, r1
 80196a6:	2fff      	cmp	r7, #255	@ 0xff
 80196a8:	fb01 2303 	mla	r3, r1, r3, r2
 80196ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80196b0:	eba1 0106 	sub.w	r1, r1, r6
 80196b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80196b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80196bc:	4418      	add	r0, r3
 80196be:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80196c2:	eba3 0606 	sub.w	r6, r3, r6
 80196c6:	4404      	add	r4, r0
 80196c8:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80196cc:	d04a      	beq.n	8019764 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 80196ce:	43fa      	mvns	r2, r7
 80196d0:	b2bb      	uxth	r3, r7
 80196d2:	b2d7      	uxtb	r7, r2
 80196d4:	42a0      	cmp	r0, r4
 80196d6:	d263      	bcs.n	80197a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80196d8:	eb00 0e0c 	add.w	lr, r0, ip
 80196dc:	4586      	cmp	lr, r0
 80196de:	f100 0803 	add.w	r8, r0, #3
 80196e2:	d93a      	bls.n	801975a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80196e4:	f835 2b02 	ldrh.w	r2, [r5], #2
 80196e8:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80196ec:	00d0      	lsls	r0, r2, #3
 80196ee:	fb19 f907 	smulbb	r9, r9, r7
 80196f2:	b2c0      	uxtb	r0, r0
 80196f4:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80196f8:	fb00 9003 	mla	r0, r0, r3, r9
 80196fc:	b280      	uxth	r0, r0
 80196fe:	f100 0901 	add.w	r9, r0, #1
 8019702:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8019706:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801970a:	fb19 f907 	smulbb	r9, r9, r7
 801970e:	1200      	asrs	r0, r0, #8
 8019710:	f808 0c03 	strb.w	r0, [r8, #-3]
 8019714:	10d0      	asrs	r0, r2, #3
 8019716:	1212      	asrs	r2, r2, #8
 8019718:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801971c:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8019720:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8019724:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019728:	fb00 9003 	mla	r0, r0, r3, r9
 801972c:	b280      	uxth	r0, r0
 801972e:	f100 0901 	add.w	r9, r0, #1
 8019732:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8019736:	1200      	asrs	r0, r0, #8
 8019738:	f808 0c02 	strb.w	r0, [r8, #-2]
 801973c:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8019740:	fb10 f007 	smulbb	r0, r0, r7
 8019744:	fb02 0203 	mla	r2, r2, r3, r0
 8019748:	b292      	uxth	r2, r2
 801974a:	1c50      	adds	r0, r2, #1
 801974c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019750:	4640      	mov	r0, r8
 8019752:	1212      	asrs	r2, r2, #8
 8019754:	f808 2c01 	strb.w	r2, [r8, #-1]
 8019758:	e7c0      	b.n	80196dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801975a:	4408      	add	r0, r1
 801975c:	4435      	add	r5, r6
 801975e:	e7b9      	b.n	80196d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8019760:	4408      	add	r0, r1
 8019762:	4435      	add	r5, r6
 8019764:	42a0      	cmp	r0, r4
 8019766:	d21b      	bcs.n	80197a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8019768:	eb00 070c 	add.w	r7, r0, ip
 801976c:	42b8      	cmp	r0, r7
 801976e:	d2f7      	bcs.n	8019760 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8019770:	f835 3b02 	ldrh.w	r3, [r5], #2
 8019774:	3003      	adds	r0, #3
 8019776:	00da      	lsls	r2, r3, #3
 8019778:	b2d2      	uxtb	r2, r2
 801977a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801977e:	f800 2c03 	strb.w	r2, [r0, #-3]
 8019782:	10da      	asrs	r2, r3, #3
 8019784:	121b      	asrs	r3, r3, #8
 8019786:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801978a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801978e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8019792:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8019796:	f800 2c02 	strb.w	r2, [r0, #-2]
 801979a:	f800 3c01 	strb.w	r3, [r0, #-1]
 801979e:	e7e5      	b.n	801976c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 80197a0:	4b02      	ldr	r3, [pc, #8]	@ (80197ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 80197a2:	6818      	ldr	r0, [r3, #0]
 80197a4:	6803      	ldr	r3, [r0, #0]
 80197a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80197a8:	4798      	blx	r3
 80197aa:	e76a      	b.n	8019682 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80197ac:	24025120 	.word	0x24025120
 80197b0:	2402511a 	.word	0x2402511a

080197b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80197b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197b8:	b08a      	sub	sp, #40	@ 0x28
 80197ba:	460d      	mov	r5, r1
 80197bc:	4604      	mov	r4, r0
 80197be:	461e      	mov	r6, r3
 80197c0:	6808      	ldr	r0, [r1, #0]
 80197c2:	ab06      	add	r3, sp, #24
 80197c4:	6849      	ldr	r1, [r1, #4]
 80197c6:	4f5d      	ldr	r7, [pc, #372]	@ (801993c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80197c8:	c303      	stmia	r3!, {r0, r1}
 80197ca:	6810      	ldr	r0, [r2, #0]
 80197cc:	ab08      	add	r3, sp, #32
 80197ce:	6851      	ldr	r1, [r2, #4]
 80197d0:	c303      	stmia	r3!, {r0, r1}
 80197d2:	a806      	add	r0, sp, #24
 80197d4:	f7f8 faa2 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80197d8:	4629      	mov	r1, r5
 80197da:	a808      	add	r0, sp, #32
 80197dc:	f7f8 fac6 	bl	8011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80197e0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80197e4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80197e8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80197ec:	6838      	ldr	r0, [r7, #0]
 80197ee:	fb11 2103 	smlabb	r1, r1, r3, r2
 80197f2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80197f6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 80197fa:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80197fe:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8019802:	440a      	add	r2, r1
 8019804:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019808:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801980c:	4413      	add	r3, r2
 801980e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8019812:	6803      	ldr	r3, [r0, #0]
 8019814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019816:	4798      	blx	r3
 8019818:	2eff      	cmp	r6, #255	@ 0xff
 801981a:	d119      	bne.n	8019850 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801981c:	f010 0f20 	tst.w	r0, #32
 8019820:	6838      	ldr	r0, [r7, #0]
 8019822:	d018      	beq.n	8019856 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8019824:	b2ad      	uxth	r5, r5
 8019826:	2700      	movs	r7, #0
 8019828:	6801      	ldr	r1, [r0, #0]
 801982a:	9501      	str	r5, [sp, #4]
 801982c:	fa1f f588 	uxth.w	r5, r8
 8019830:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8019834:	9500      	str	r5, [sp, #0]
 8019836:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801983a:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801983e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8019842:	9602      	str	r6, [sp, #8]
 8019844:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8019846:	4621      	mov	r1, r4
 8019848:	47a8      	blx	r5
 801984a:	b00a      	add	sp, #40	@ 0x28
 801984c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019850:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8019854:	e7e4      	b.n	8019820 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8019856:	6803      	ldr	r3, [r0, #0]
 8019858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801985a:	4798      	blx	r3
 801985c:	4b38      	ldr	r3, [pc, #224]	@ (8019940 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801985e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019862:	f8b3 c000 	ldrh.w	ip, [r3]
 8019866:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801986a:	fb0c f505 	mul.w	r5, ip, r5
 801986e:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8019872:	fb0c 2303 	mla	r3, ip, r3, r2
 8019876:	ebac 0c08 	sub.w	ip, ip, r8
 801987a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801987e:	ebae 0e08 	sub.w	lr, lr, r8
 8019882:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019886:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801988a:	4418      	add	r0, r3
 801988c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8019890:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8019894:	4405      	add	r5, r0
 8019896:	42a8      	cmp	r0, r5
 8019898:	d24a      	bcs.n	8019930 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801989a:	eb00 0803 	add.w	r8, r0, r3
 801989e:	4540      	cmp	r0, r8
 80198a0:	d243      	bcs.n	801992a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 80198a2:	78e2      	ldrb	r2, [r4, #3]
 80198a4:	b15a      	cbz	r2, 80198be <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80198a6:	2aff      	cmp	r2, #255	@ 0xff
 80198a8:	f894 9000 	ldrb.w	r9, [r4]
 80198ac:	d10a      	bne.n	80198c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80198ae:	2eff      	cmp	r6, #255	@ 0xff
 80198b0:	d108      	bne.n	80198c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80198b2:	f880 9000 	strb.w	r9, [r0]
 80198b6:	7862      	ldrb	r2, [r4, #1]
 80198b8:	7042      	strb	r2, [r0, #1]
 80198ba:	78a2      	ldrb	r2, [r4, #2]
 80198bc:	7082      	strb	r2, [r0, #2]
 80198be:	3003      	adds	r0, #3
 80198c0:	3404      	adds	r4, #4
 80198c2:	e7ec      	b.n	801989e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80198c4:	4372      	muls	r2, r6
 80198c6:	1c51      	adds	r1, r2, #1
 80198c8:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80198cc:	1209      	asrs	r1, r1, #8
 80198ce:	fa1f fa81 	uxth.w	sl, r1
 80198d2:	43c9      	mvns	r1, r1
 80198d4:	fb19 f90a 	smulbb	r9, r9, sl
 80198d8:	b2ca      	uxtb	r2, r1
 80198da:	7801      	ldrb	r1, [r0, #0]
 80198dc:	fb01 9902 	mla	r9, r1, r2, r9
 80198e0:	fa1f f989 	uxth.w	r9, r9
 80198e4:	f109 0101 	add.w	r1, r9, #1
 80198e8:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80198ec:	ea4f 2929 	mov.w	r9, r9, asr #8
 80198f0:	f880 9000 	strb.w	r9, [r0]
 80198f4:	f890 9001 	ldrb.w	r9, [r0, #1]
 80198f8:	7861      	ldrb	r1, [r4, #1]
 80198fa:	fb19 f902 	smulbb	r9, r9, r2
 80198fe:	fb01 910a 	mla	r1, r1, sl, r9
 8019902:	b289      	uxth	r1, r1
 8019904:	f101 0901 	add.w	r9, r1, #1
 8019908:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801990c:	1209      	asrs	r1, r1, #8
 801990e:	7041      	strb	r1, [r0, #1]
 8019910:	7881      	ldrb	r1, [r0, #2]
 8019912:	f894 9002 	ldrb.w	r9, [r4, #2]
 8019916:	fb11 f202 	smulbb	r2, r1, r2
 801991a:	fb09 220a 	mla	r2, r9, sl, r2
 801991e:	b292      	uxth	r2, r2
 8019920:	1c51      	adds	r1, r2, #1
 8019922:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019926:	1212      	asrs	r2, r2, #8
 8019928:	e7c8      	b.n	80198bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801992a:	4460      	add	r0, ip
 801992c:	4474      	add	r4, lr
 801992e:	e7b2      	b.n	8019896 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8019930:	6838      	ldr	r0, [r7, #0]
 8019932:	6803      	ldr	r3, [r0, #0]
 8019934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019936:	4798      	blx	r3
 8019938:	e787      	b.n	801984a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801993a:	bf00      	nop
 801993c:	24025120 	.word	0x24025120
 8019940:	2402511a 	.word	0x2402511a

08019944 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8019944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019948:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801994c:	4607      	mov	r7, r0
 801994e:	460c      	mov	r4, r1
 8019950:	4692      	mov	sl, r2
 8019952:	4699      	mov	r9, r3
 8019954:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019956:	b335      	cbz	r5, 80199a6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019958:	4608      	mov	r0, r1
 801995a:	f7fb fdcb 	bl	80154f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801995e:	4680      	mov	r8, r0
 8019960:	4620      	mov	r0, r4
 8019962:	f7fb fdfb 	bl	801555c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019966:	f8ad 000e 	strh.w	r0, [sp, #14]
 801996a:	4620      	mov	r0, r4
 801996c:	f8ad a008 	strh.w	sl, [sp, #8]
 8019970:	f8ad 900a 	strh.w	r9, [sp, #10]
 8019974:	f8ad 800c 	strh.w	r8, [sp, #12]
 8019978:	f7fb fefa 	bl	8015770 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801997c:	2810      	cmp	r0, #16
 801997e:	d812      	bhi.n	80199a6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019980:	e8df f000 	tbb	[pc, r0]
 8019984:	11092d24 	.word	0x11092d24
 8019988:	11111111 	.word	0x11111111
 801998c:	14111111 	.word	0x14111111
 8019990:	4c111111 	.word	0x4c111111
 8019994:	3c          	.byte	0x3c
 8019995:	00          	.byte	0x00
 8019996:	4620      	mov	r0, r4
 8019998:	f7fb fe66 	bl	8015668 <_ZNK8touchgfx6Bitmap7getDataEv>
 801999c:	462b      	mov	r3, r5
 801999e:	4632      	mov	r2, r6
 80199a0:	a902      	add	r1, sp, #8
 80199a2:	f7ff ff07 	bl	80197b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80199a6:	b004      	add	sp, #16
 80199a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199ac:	4620      	mov	r0, r4
 80199ae:	f7fb fe5b 	bl	8015668 <_ZNK8touchgfx6Bitmap7getDataEv>
 80199b2:	4680      	mov	r8, r0
 80199b4:	4620      	mov	r0, r4
 80199b6:	f7fb fe87 	bl	80156c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80199ba:	ab02      	add	r3, sp, #8
 80199bc:	4602      	mov	r2, r0
 80199be:	4641      	mov	r1, r8
 80199c0:	4638      	mov	r0, r7
 80199c2:	e9cd 6500 	strd	r6, r5, [sp]
 80199c6:	f7ff fdbf 	bl	8019548 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80199ca:	e7ec      	b.n	80199a6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80199cc:	4620      	mov	r0, r4
 80199ce:	f7fb fe4b 	bl	8015668 <_ZNK8touchgfx6Bitmap7getDataEv>
 80199d2:	462b      	mov	r3, r5
 80199d4:	4632      	mov	r2, r6
 80199d6:	a902      	add	r1, sp, #8
 80199d8:	f7ff fdf8 	bl	80195cc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80199dc:	e7e3      	b.n	80199a6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80199de:	683b      	ldr	r3, [r7, #0]
 80199e0:	4620      	mov	r0, r4
 80199e2:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80199e6:	f7fb fe3f 	bl	8015668 <_ZNK8touchgfx6Bitmap7getDataEv>
 80199ea:	2300      	movs	r3, #0
 80199ec:	4601      	mov	r1, r0
 80199ee:	aa02      	add	r2, sp, #8
 80199f0:	4638      	mov	r0, r7
 80199f2:	e9cd 5300 	strd	r5, r3, [sp]
 80199f6:	4633      	mov	r3, r6
 80199f8:	47c0      	blx	r8
 80199fa:	e7d4      	b.n	80199a6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80199fc:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 80199fe:	2f00      	cmp	r7, #0
 8019a00:	d0d1      	beq.n	80199a6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019a02:	683b      	ldr	r3, [r7, #0]
 8019a04:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8019a08:	4620      	mov	r0, r4
 8019a0a:	f7fb fe2d 	bl	8015668 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019a0e:	9500      	str	r5, [sp, #0]
 8019a10:	4601      	mov	r1, r0
 8019a12:	4633      	mov	r3, r6
 8019a14:	aa02      	add	r2, sp, #8
 8019a16:	4638      	mov	r0, r7
 8019a18:	47c0      	blx	r8
 8019a1a:	e7c4      	b.n	80199a6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019a1c:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 8019a1e:	2f00      	cmp	r7, #0
 8019a20:	d0c1      	beq.n	80199a6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019a22:	683b      	ldr	r3, [r7, #0]
 8019a24:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8019a28:	e7ee      	b.n	8019a08 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

08019a2a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8019a2a:	b4f0      	push	{r4, r5, r6, r7}
 8019a2c:	4616      	mov	r6, r2
 8019a2e:	461c      	mov	r4, r3
 8019a30:	460d      	mov	r5, r1
 8019a32:	9a04      	ldr	r2, [sp, #16]
 8019a34:	2e01      	cmp	r6, #1
 8019a36:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019a3a:	d00e      	beq.n	8019a5a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8019a3c:	d303      	bcc.n	8019a46 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8019a3e:	2e02      	cmp	r6, #2
 8019a40:	d006      	beq.n	8019a50 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8019a42:	bcf0      	pop	{r4, r5, r6, r7}
 8019a44:	4770      	bx	lr
 8019a46:	4621      	mov	r1, r4
 8019a48:	4628      	mov	r0, r5
 8019a4a:	bcf0      	pop	{r4, r5, r6, r7}
 8019a4c:	f7ff bdbe 	b.w	80195cc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8019a50:	4621      	mov	r1, r4
 8019a52:	4628      	mov	r0, r5
 8019a54:	bcf0      	pop	{r4, r5, r6, r7}
 8019a56:	f7ff bead 	b.w	80197b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019a5a:	6805      	ldr	r5, [r0, #0]
 8019a5c:	2600      	movs	r6, #0
 8019a5e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8019a62:	68ed      	ldr	r5, [r5, #12]
 8019a64:	4613      	mov	r3, r2
 8019a66:	4622      	mov	r2, r4
 8019a68:	46ac      	mov	ip, r5
 8019a6a:	bcf0      	pop	{r4, r5, r6, r7}
 8019a6c:	4760      	bx	ip
	...

08019a70 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8019a70:	b160      	cbz	r0, 8019a8c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8019a72:	2903      	cmp	r1, #3
 8019a74:	d818      	bhi.n	8019aa8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8019a76:	e8df f001 	tbb	[pc, r1]
 8019a7a:	1902      	.short	0x1902
 8019a7c:	1b06      	.short	0x1b06
 8019a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8019ab8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8019a80:	8818      	ldrh	r0, [r3, #0]
 8019a82:	4240      	negs	r0, r0
 8019a84:	4770      	bx	lr
 8019a86:	4b0c      	ldr	r3, [pc, #48]	@ (8019ab8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8019a88:	8818      	ldrh	r0, [r3, #0]
 8019a8a:	4770      	bx	lr
 8019a8c:	2903      	cmp	r1, #3
 8019a8e:	d80b      	bhi.n	8019aa8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8019a90:	a301      	add	r3, pc, #4	@ (adr r3, 8019a98 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8019a92:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8019a96:	bf00      	nop
 8019a98:	08019aad 	.word	0x08019aad
 8019a9c:	08019a87 	.word	0x08019a87
 8019aa0:	08019ab1 	.word	0x08019ab1
 8019aa4:	08019a7f 	.word	0x08019a7f
 8019aa8:	2000      	movs	r0, #0
 8019aaa:	4770      	bx	lr
 8019aac:	2001      	movs	r0, #1
 8019aae:	4770      	bx	lr
 8019ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8019ab4:	4770      	bx	lr
 8019ab6:	bf00      	nop
 8019ab8:	2402511a 	.word	0x2402511a

08019abc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8019abc:	b160      	cbz	r0, 8019ad8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8019abe:	2903      	cmp	r1, #3
 8019ac0:	d818      	bhi.n	8019af4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8019ac2:	e8df f001 	tbb	[pc, r1]
 8019ac6:	0219      	.short	0x0219
 8019ac8:	051b      	.short	0x051b
 8019aca:	4b0e      	ldr	r3, [pc, #56]	@ (8019b04 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8019acc:	8818      	ldrh	r0, [r3, #0]
 8019ace:	4770      	bx	lr
 8019ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8019b04 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8019ad2:	8818      	ldrh	r0, [r3, #0]
 8019ad4:	4240      	negs	r0, r0
 8019ad6:	4770      	bx	lr
 8019ad8:	2903      	cmp	r1, #3
 8019ada:	d80b      	bhi.n	8019af4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8019adc:	a301      	add	r3, pc, #4	@ (adr r3, 8019ae4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8019ade:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8019ae2:	bf00      	nop
 8019ae4:	08019acb 	.word	0x08019acb
 8019ae8:	08019afd 	.word	0x08019afd
 8019aec:	08019ad1 	.word	0x08019ad1
 8019af0:	08019af9 	.word	0x08019af9
 8019af4:	2000      	movs	r0, #0
 8019af6:	4770      	bx	lr
 8019af8:	2001      	movs	r0, #1
 8019afa:	4770      	bx	lr
 8019afc:	f04f 30ff 	mov.w	r0, #4294967295
 8019b00:	4770      	bx	lr
 8019b02:	bf00      	nop
 8019b04:	2402511a 	.word	0x2402511a

08019b08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8019b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b0c:	b097      	sub	sp, #92	@ 0x5c
 8019b0e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019b10:	a912      	add	r1, sp, #72	@ 0x48
 8019b12:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 8019b16:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 8019b1a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 8019b1e:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 8019b22:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 8019b26:	e881 000c 	stmia.w	r1, {r2, r3}
 8019b2a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 8019b2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019b30:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8019b34:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 8019b38:	9311      	str	r3, [sp, #68]	@ 0x44
 8019b3a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8019b3e:	798d      	ldrb	r5, [r1, #6]
 8019b40:	930c      	str	r3, [sp, #48]	@ 0x30
 8019b42:	7b4b      	ldrb	r3, [r1, #13]
 8019b44:	0158      	lsls	r0, r3, #5
 8019b46:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8019b4a:	4328      	orrs	r0, r5
 8019b4c:	9009      	str	r0, [sp, #36]	@ 0x24
 8019b4e:	f000 817c 	beq.w	8019e4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019b52:	011b      	lsls	r3, r3, #4
 8019b54:	79c8      	ldrb	r0, [r1, #7]
 8019b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019b5a:	4303      	orrs	r3, r0
 8019b5c:	930e      	str	r3, [sp, #56]	@ 0x38
 8019b5e:	f000 8174 	beq.w	8019e4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019b62:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8019b66:	b29b      	uxth	r3, r3
 8019b68:	2f00      	cmp	r7, #0
 8019b6a:	f000 8116 	beq.w	8019d9a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8019b6e:	1aff      	subs	r7, r7, r3
 8019b70:	b2bf      	uxth	r7, r7
 8019b72:	043b      	lsls	r3, r7, #16
 8019b74:	d502      	bpl.n	8019b7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8019b76:	1bf6      	subs	r6, r6, r7
 8019b78:	2700      	movs	r7, #0
 8019b7a:	b236      	sxth	r6, r6
 8019b7c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8019b80:	a812      	add	r0, sp, #72	@ 0x48
 8019b82:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8019b86:	428e      	cmp	r6, r1
 8019b88:	b28b      	uxth	r3, r1
 8019b8a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8019b8e:	bfbf      	itttt	lt
 8019b90:	18ff      	addlt	r7, r7, r3
 8019b92:	1bbe      	sublt	r6, r7, r6
 8019b94:	b2b7      	uxthlt	r7, r6
 8019b96:	460e      	movlt	r6, r1
 8019b98:	8891      	ldrh	r1, [r2, #4]
 8019b9a:	440b      	add	r3, r1
 8019b9c:	4631      	mov	r1, r6
 8019b9e:	b21b      	sxth	r3, r3
 8019ba0:	9310      	str	r3, [sp, #64]	@ 0x40
 8019ba2:	88d3      	ldrh	r3, [r2, #6]
 8019ba4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019ba6:	449a      	add	sl, r3
 8019ba8:	fa0f f38a 	sxth.w	r3, sl
 8019bac:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8019bb0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019bb2:	4bb5      	ldr	r3, [pc, #724]	@ (8019e88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8019bb4:	f893 b000 	ldrb.w	fp, [r3]
 8019bb8:	f10b 3cff 	add.w	ip, fp, #4294967295
 8019bbc:	f1dc 0300 	rsbs	r3, ip, #0
 8019bc0:	eb43 030c 	adc.w	r3, r3, ip
 8019bc4:	930d      	str	r3, [sp, #52]	@ 0x34
 8019bc6:	464b      	mov	r3, r9
 8019bc8:	f7f7 ff1c 	bl	8011a04 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8019bcc:	4631      	mov	r1, r6
 8019bce:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 8019bd2:	464b      	mov	r3, r9
 8019bd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019bd6:	a812      	add	r0, sp, #72	@ 0x48
 8019bd8:	f7f7 ff31 	bl	8011a3e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8019bdc:	a916      	add	r1, sp, #88	@ 0x58
 8019bde:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8019be2:	a815      	add	r0, sp, #84	@ 0x54
 8019be4:	f7f8 f858 	bl	8011c98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8019be8:	f1b9 0f00 	cmp.w	r9, #0
 8019bec:	f040 80d8 	bne.w	8019da0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8019bf0:	f1bb 0f01 	cmp.w	fp, #1
 8019bf4:	f040 80dc 	bne.w	8019db0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8019bf8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019bfa:	b153      	cbz	r3, 8019c12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8019bfc:	2508      	movs	r5, #8
 8019bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019c00:	fb95 f3f8 	sdiv	r3, r5, r8
 8019c04:	1e5d      	subs	r5, r3, #1
 8019c06:	4415      	add	r5, r2
 8019c08:	fb95 f5f3 	sdiv	r5, r5, r3
 8019c0c:	fb15 f503 	smulbb	r5, r5, r3
 8019c10:	b2ad      	uxth	r5, r5
 8019c12:	b907      	cbnz	r7, 8019c16 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8019c14:	b16c      	cbz	r4, 8019c32 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8019c16:	fb04 7305 	mla	r3, r4, r5, r7
 8019c1a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8019c1c:	ebaa 0a04 	sub.w	sl, sl, r4
 8019c20:	fb08 f303 	mul.w	r3, r8, r3
 8019c24:	fa1f fa8a 	uxth.w	sl, sl
 8019c28:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8019c2c:	f003 0407 	and.w	r4, r3, #7
 8019c30:	9226      	str	r2, [sp, #152]	@ 0x98
 8019c32:	4649      	mov	r1, r9
 8019c34:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019c36:	f7ff ff1b 	bl	8019a70 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8019c3a:	4683      	mov	fp, r0
 8019c3c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019c3e:	f7ff ff3d 	bl	8019abc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8019c42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019c44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019c46:	4681      	mov	r9, r0
 8019c48:	1a9b      	subs	r3, r3, r2
 8019c4a:	459a      	cmp	sl, r3
 8019c4c:	bfa8      	it	ge
 8019c4e:	469a      	movge	sl, r3
 8019c50:	f1ba 0f00 	cmp.w	sl, #0
 8019c54:	f340 80f9 	ble.w	8019e4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019c58:	1bf6      	subs	r6, r6, r7
 8019c5a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019c5c:	1b9e      	subs	r6, r3, r6
 8019c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c60:	429e      	cmp	r6, r3
 8019c62:	bfd4      	ite	le
 8019c64:	ebc7 0706 	rsble	r7, r7, r6
 8019c68:	ebc7 0703 	rsbgt	r7, r7, r3
 8019c6c:	2f00      	cmp	r7, #0
 8019c6e:	f340 80ec 	ble.w	8019e4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019c72:	1bed      	subs	r5, r5, r7
 8019c74:	fb08 f305 	mul.w	r3, r8, r5
 8019c78:	930d      	str	r3, [sp, #52]	@ 0x34
 8019c7a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8019c7c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8019c80:	930e      	str	r3, [sp, #56]	@ 0x38
 8019c82:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8019c84:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019c88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019c8a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8019c8c:	b2db      	uxtb	r3, r3
 8019c8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8019c90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	f040 80de 	bne.w	8019e54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8019c98:	4b7c      	ldr	r3, [pc, #496]	@ (8019e8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8019c9a:	6818      	ldr	r0, [r3, #0]
 8019c9c:	6803      	ldr	r3, [r0, #0]
 8019c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019ca0:	4798      	blx	r3
 8019ca2:	2301      	movs	r3, #1
 8019ca4:	4a7a      	ldr	r2, [pc, #488]	@ (8019e90 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8019ca6:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8019caa:	fb07 9b1b 	mls	fp, r7, fp, r9
 8019cae:	fa03 f308 	lsl.w	r3, r3, r8
 8019cb2:	8811      	ldrh	r1, [r2, #0]
 8019cb4:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 8019cb8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8019cbc:	3b01      	subs	r3, #1
 8019cbe:	fb06 bb07 	mla	fp, r6, r7, fp
 8019cc2:	b2db      	uxtb	r3, r3
 8019cc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8019cc6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8019cca:	fb01 2303 	mla	r3, r1, r3, r2
 8019cce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019cd2:	18c3      	adds	r3, r0, r3
 8019cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8019cd6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8019cd8:	781a      	ldrb	r2, [r3, #0]
 8019cda:	4122      	asrs	r2, r4
 8019cdc:	b2d2      	uxtb	r2, r2
 8019cde:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8019ce2:	f0c0 80d7 	bcc.w	8019e94 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8019ce6:	46be      	mov	lr, r7
 8019ce8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019cea:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8019cee:	f0c0 80ba 	bcc.w	8019e66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8019cf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019cf4:	4013      	ands	r3, r2
 8019cf6:	d041      	beq.n	8019d7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8019cf8:	20ff      	movs	r0, #255	@ 0xff
 8019cfa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8019cfc:	fb90 f5f5 	sdiv	r5, r0, r5
 8019d00:	436b      	muls	r3, r5
 8019d02:	2bfe      	cmp	r3, #254	@ 0xfe
 8019d04:	dd03      	ble.n	8019d0e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8019d06:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019d08:	4285      	cmp	r5, r0
 8019d0a:	f000 80a5 	beq.w	8019e58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8019d0e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019d10:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8019d12:	fb15 f303 	smulbb	r3, r5, r3
 8019d16:	b29b      	uxth	r3, r3
 8019d18:	1c5d      	adds	r5, r3, #1
 8019d1a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8019d1e:	780d      	ldrb	r5, [r1, #0]
 8019d20:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019d24:	fa1f fc83 	uxth.w	ip, r3
 8019d28:	43db      	mvns	r3, r3
 8019d2a:	fb10 f90c 	smulbb	r9, r0, ip
 8019d2e:	b2db      	uxtb	r3, r3
 8019d30:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8019d32:	fb05 9503 	mla	r5, r5, r3, r9
 8019d36:	b2ad      	uxth	r5, r5
 8019d38:	f105 0901 	add.w	r9, r5, #1
 8019d3c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8019d40:	fb10 f90c 	smulbb	r9, r0, ip
 8019d44:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8019d46:	122d      	asrs	r5, r5, #8
 8019d48:	fb10 fc0c 	smulbb	ip, r0, ip
 8019d4c:	700d      	strb	r5, [r1, #0]
 8019d4e:	784d      	ldrb	r5, [r1, #1]
 8019d50:	fb05 9503 	mla	r5, r5, r3, r9
 8019d54:	b2ad      	uxth	r5, r5
 8019d56:	f105 0901 	add.w	r9, r5, #1
 8019d5a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8019d5e:	122d      	asrs	r5, r5, #8
 8019d60:	704d      	strb	r5, [r1, #1]
 8019d62:	788d      	ldrb	r5, [r1, #2]
 8019d64:	fb05 cc03 	mla	ip, r5, r3, ip
 8019d68:	fa1f fc8c 	uxth.w	ip, ip
 8019d6c:	f10c 0301 	add.w	r3, ip, #1
 8019d70:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8019d74:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019d78:	f881 c002 	strb.w	ip, [r1, #2]
 8019d7c:	4444      	add	r4, r8
 8019d7e:	4431      	add	r1, r6
 8019d80:	b2a4      	uxth	r4, r4
 8019d82:	2c07      	cmp	r4, #7
 8019d84:	bf89      	itett	hi
 8019d86:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 8019d88:	fa42 f208 	asrls.w	r2, r2, r8
 8019d8c:	2400      	movhi	r4, #0
 8019d8e:	785a      	ldrbhi	r2, [r3, #1]
 8019d90:	bf8a      	itet	hi
 8019d92:	3301      	addhi	r3, #1
 8019d94:	b2d2      	uxtbls	r2, r2
 8019d96:	9326      	strhi	r3, [sp, #152]	@ 0x98
 8019d98:	e7a7      	b.n	8019cea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8019d9a:	441e      	add	r6, r3
 8019d9c:	b236      	sxth	r6, r6
 8019d9e:	e6ed      	b.n	8019b7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8019da0:	f1b9 0f01 	cmp.w	r9, #1
 8019da4:	f47f af28 	bne.w	8019bf8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019da8:	f1bb 0f01 	cmp.w	fp, #1
 8019dac:	f47f af24 	bne.w	8019bf8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019db0:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8019e8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8019db4:	f8db 0000 	ldr.w	r0, [fp]
 8019db8:	6803      	ldr	r3, [r0, #0]
 8019dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019dbc:	4798      	blx	r3
 8019dbe:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8019dc2:	465a      	mov	r2, fp
 8019dc4:	d006      	beq.n	8019dd4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8019dc6:	f1b8 0f04 	cmp.w	r8, #4
 8019dca:	d141      	bne.n	8019e50 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8019dcc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019dce:	3300      	adds	r3, #0
 8019dd0:	bf18      	it	ne
 8019dd2:	2301      	movne	r3, #1
 8019dd4:	0580      	lsls	r0, r0, #22
 8019dd6:	d566      	bpl.n	8019ea6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8019dd8:	f1b8 0f08 	cmp.w	r8, #8
 8019ddc:	d163      	bne.n	8019ea6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	bf0c      	ite	eq
 8019de2:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8019de6:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8019dea:	2f00      	cmp	r7, #0
 8019dec:	f47f af04 	bne.w	8019bf8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019df0:	2c00      	cmp	r4, #0
 8019df2:	f47f af01 	bne.w	8019bf8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019df8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8019dfa:	18f3      	adds	r3, r6, r3
 8019dfc:	4283      	cmp	r3, r0
 8019dfe:	f73f aefb 	bgt.w	8019bf8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019e02:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019e04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019e06:	4403      	add	r3, r0
 8019e08:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8019e0a:	4283      	cmp	r3, r0
 8019e0c:	f73f aef4 	bgt.w	8019bf8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019e10:	f1b8 0f08 	cmp.w	r8, #8
 8019e14:	6810      	ldr	r0, [r2, #0]
 8019e16:	f04f 0600 	mov.w	r6, #0
 8019e1a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 8019e1e:	bf18      	it	ne
 8019e20:	3501      	addne	r5, #1
 8019e22:	6804      	ldr	r4, [r0, #0]
 8019e24:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 8019e28:	bf18      	it	ne
 8019e2a:	f025 0501 	bicne.w	r5, r5, #1
 8019e2e:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8019e32:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019e34:	bf18      	it	ne
 8019e36:	b2ad      	uxthne	r5, r5
 8019e38:	9104      	str	r1, [sp, #16]
 8019e3a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8019e3c:	e9cd 5a00 	strd	r5, sl, [sp]
 8019e40:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8019e44:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8019e46:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 8019e48:	47a0      	blx	r4
 8019e4a:	b017      	add	sp, #92	@ 0x5c
 8019e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e50:	2300      	movs	r3, #0
 8019e52:	e7bf      	b.n	8019dd4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8019e54:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8019e56:	e724      	b.n	8019ca2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8019e58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019e5a:	700b      	strb	r3, [r1, #0]
 8019e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019e5e:	704b      	strb	r3, [r1, #1]
 8019e60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019e62:	708b      	strb	r3, [r1, #2]
 8019e64:	e78a      	b.n	8019d7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8019e66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019e68:	b153      	cbz	r3, 8019e80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8019e6a:	441c      	add	r4, r3
 8019e6c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8019e6e:	b2a4      	uxth	r4, r4
 8019e70:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8019e74:	f004 0407 	and.w	r4, r4, #7
 8019e78:	781a      	ldrb	r2, [r3, #0]
 8019e7a:	9326      	str	r3, [sp, #152]	@ 0x98
 8019e7c:	4122      	asrs	r2, r4
 8019e7e:	b2d2      	uxtb	r2, r2
 8019e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019e82:	445b      	add	r3, fp
 8019e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8019e86:	e72a      	b.n	8019cde <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8019e88:	24025118 	.word	0x24025118
 8019e8c:	24025120 	.word	0x24025120
 8019e90:	2402511a 	.word	0x2402511a
 8019e94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d1d7      	bne.n	8019e4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019e9a:	4b06      	ldr	r3, [pc, #24]	@ (8019eb4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8019e9c:	6818      	ldr	r0, [r3, #0]
 8019e9e:	6803      	ldr	r3, [r0, #0]
 8019ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019ea2:	4798      	blx	r3
 8019ea4:	e7d1      	b.n	8019e4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	f43f aea6 	beq.w	8019bf8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019eac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019eb0:	e79b      	b.n	8019dea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8019eb2:	bf00      	nop
 8019eb4:	24025120 	.word	0x24025120

08019eb8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8019eb8:	b538      	push	{r3, r4, r5, lr}
 8019eba:	4c15      	ldr	r4, [pc, #84]	@ (8019f10 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8019ebc:	4605      	mov	r5, r0
 8019ebe:	7823      	ldrb	r3, [r4, #0]
 8019ec0:	f3bf 8f5b 	dmb	ish
 8019ec4:	07da      	lsls	r2, r3, #31
 8019ec6:	d40b      	bmi.n	8019ee0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8019ec8:	4620      	mov	r0, r4
 8019eca:	f006 f8f7 	bl	80200bc <__cxa_guard_acquire>
 8019ece:	b138      	cbz	r0, 8019ee0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8019ed0:	4620      	mov	r0, r4
 8019ed2:	f006 f8ff 	bl	80200d4 <__cxa_guard_release>
 8019ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8019f14 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8019ed8:	490f      	ldr	r1, [pc, #60]	@ (8019f18 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8019eda:	4810      	ldr	r0, [pc, #64]	@ (8019f1c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8019edc:	f006 f8e7 	bl	80200ae <__aeabi_atexit>
 8019ee0:	4c0f      	ldr	r4, [pc, #60]	@ (8019f20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8019ee2:	7823      	ldrb	r3, [r4, #0]
 8019ee4:	f3bf 8f5b 	dmb	ish
 8019ee8:	07db      	lsls	r3, r3, #31
 8019eea:	d40b      	bmi.n	8019f04 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8019eec:	4620      	mov	r0, r4
 8019eee:	f006 f8e5 	bl	80200bc <__cxa_guard_acquire>
 8019ef2:	b138      	cbz	r0, 8019f04 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8019ef4:	4620      	mov	r0, r4
 8019ef6:	f006 f8ed 	bl	80200d4 <__cxa_guard_release>
 8019efa:	4a06      	ldr	r2, [pc, #24]	@ (8019f14 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8019efc:	4909      	ldr	r1, [pc, #36]	@ (8019f24 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8019efe:	480a      	ldr	r0, [pc, #40]	@ (8019f28 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8019f00:	f006 f8d5 	bl	80200ae <__aeabi_atexit>
 8019f04:	4b05      	ldr	r3, [pc, #20]	@ (8019f1c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8019f06:	616b      	str	r3, [r5, #20]
 8019f08:	4b07      	ldr	r3, [pc, #28]	@ (8019f28 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8019f0a:	61ab      	str	r3, [r5, #24]
 8019f0c:	bd38      	pop	{r3, r4, r5, pc}
 8019f0e:	bf00      	nop
 8019f10:	24025204 	.word	0x24025204
 8019f14:	24000000 	.word	0x24000000
 8019f18:	080171a9 	.word	0x080171a9
 8019f1c:	240000c8 	.word	0x240000c8
 8019f20:	24025208 	.word	0x24025208
 8019f24:	080171a7 	.word	0x080171a7
 8019f28:	240000cc 	.word	0x240000cc

08019f2c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8019f2c:	b538      	push	{r3, r4, r5, lr}
 8019f2e:	4c15      	ldr	r4, [pc, #84]	@ (8019f84 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8019f30:	4605      	mov	r5, r0
 8019f32:	7823      	ldrb	r3, [r4, #0]
 8019f34:	f3bf 8f5b 	dmb	ish
 8019f38:	07da      	lsls	r2, r3, #31
 8019f3a:	d40b      	bmi.n	8019f54 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8019f3c:	4620      	mov	r0, r4
 8019f3e:	f006 f8bd 	bl	80200bc <__cxa_guard_acquire>
 8019f42:	b138      	cbz	r0, 8019f54 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8019f44:	4620      	mov	r0, r4
 8019f46:	f006 f8c5 	bl	80200d4 <__cxa_guard_release>
 8019f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8019f88 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8019f4c:	490f      	ldr	r1, [pc, #60]	@ (8019f8c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8019f4e:	4810      	ldr	r0, [pc, #64]	@ (8019f90 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8019f50:	f006 f8ad 	bl	80200ae <__aeabi_atexit>
 8019f54:	4c0f      	ldr	r4, [pc, #60]	@ (8019f94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8019f56:	7823      	ldrb	r3, [r4, #0]
 8019f58:	f3bf 8f5b 	dmb	ish
 8019f5c:	07db      	lsls	r3, r3, #31
 8019f5e:	d40b      	bmi.n	8019f78 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8019f60:	4620      	mov	r0, r4
 8019f62:	f006 f8ab 	bl	80200bc <__cxa_guard_acquire>
 8019f66:	b138      	cbz	r0, 8019f78 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8019f68:	4620      	mov	r0, r4
 8019f6a:	f006 f8b3 	bl	80200d4 <__cxa_guard_release>
 8019f6e:	4a06      	ldr	r2, [pc, #24]	@ (8019f88 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8019f70:	4909      	ldr	r1, [pc, #36]	@ (8019f98 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8019f72:	480a      	ldr	r0, [pc, #40]	@ (8019f9c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8019f74:	f006 f89b 	bl	80200ae <__aeabi_atexit>
 8019f78:	4b05      	ldr	r3, [pc, #20]	@ (8019f90 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8019f7a:	60eb      	str	r3, [r5, #12]
 8019f7c:	4b07      	ldr	r3, [pc, #28]	@ (8019f9c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8019f7e:	612b      	str	r3, [r5, #16]
 8019f80:	bd38      	pop	{r3, r4, r5, pc}
 8019f82:	bf00      	nop
 8019f84:	240251e4 	.word	0x240251e4
 8019f88:	24000000 	.word	0x24000000
 8019f8c:	080171ad 	.word	0x080171ad
 8019f90:	240000a8 	.word	0x240000a8
 8019f94:	240251e8 	.word	0x240251e8
 8019f98:	080171ab 	.word	0x080171ab
 8019f9c:	240000ac 	.word	0x240000ac

08019fa0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8019fa0:	b510      	push	{r4, lr}
 8019fa2:	4604      	mov	r4, r0
 8019fa4:	f7ff ff88 	bl	8019eb8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8019fa8:	4620      	mov	r0, r4
 8019faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019fae:	f7ff bfbd 	b.w	8019f2c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08019fb4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8019fb4:	b538      	push	{r3, r4, r5, lr}
 8019fb6:	4c15      	ldr	r4, [pc, #84]	@ (801a00c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8019fb8:	4605      	mov	r5, r0
 8019fba:	7823      	ldrb	r3, [r4, #0]
 8019fbc:	f3bf 8f5b 	dmb	ish
 8019fc0:	07da      	lsls	r2, r3, #31
 8019fc2:	d40b      	bmi.n	8019fdc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8019fc4:	4620      	mov	r0, r4
 8019fc6:	f006 f879 	bl	80200bc <__cxa_guard_acquire>
 8019fca:	b138      	cbz	r0, 8019fdc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8019fcc:	4620      	mov	r0, r4
 8019fce:	f006 f881 	bl	80200d4 <__cxa_guard_release>
 8019fd2:	4a0f      	ldr	r2, [pc, #60]	@ (801a010 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8019fd4:	490f      	ldr	r1, [pc, #60]	@ (801a014 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8019fd6:	4810      	ldr	r0, [pc, #64]	@ (801a018 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8019fd8:	f006 f869 	bl	80200ae <__aeabi_atexit>
 8019fdc:	4c0f      	ldr	r4, [pc, #60]	@ (801a01c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8019fde:	7823      	ldrb	r3, [r4, #0]
 8019fe0:	f3bf 8f5b 	dmb	ish
 8019fe4:	07db      	lsls	r3, r3, #31
 8019fe6:	d40b      	bmi.n	801a000 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8019fe8:	4620      	mov	r0, r4
 8019fea:	f006 f867 	bl	80200bc <__cxa_guard_acquire>
 8019fee:	b138      	cbz	r0, 801a000 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8019ff0:	4620      	mov	r0, r4
 8019ff2:	f006 f86f 	bl	80200d4 <__cxa_guard_release>
 8019ff6:	4a06      	ldr	r2, [pc, #24]	@ (801a010 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8019ff8:	4909      	ldr	r1, [pc, #36]	@ (801a020 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8019ffa:	480a      	ldr	r0, [pc, #40]	@ (801a024 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8019ffc:	f006 f857 	bl	80200ae <__aeabi_atexit>
 801a000:	4b05      	ldr	r3, [pc, #20]	@ (801a018 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801a002:	626b      	str	r3, [r5, #36]	@ 0x24
 801a004:	4b07      	ldr	r3, [pc, #28]	@ (801a024 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801a006:	62ab      	str	r3, [r5, #40]	@ 0x28
 801a008:	bd38      	pop	{r3, r4, r5, pc}
 801a00a:	bf00      	nop
 801a00c:	2402520c 	.word	0x2402520c
 801a010:	24000000 	.word	0x24000000
 801a014:	080171a1 	.word	0x080171a1
 801a018:	240000d0 	.word	0x240000d0
 801a01c:	24025210 	.word	0x24025210
 801a020:	0801719f 	.word	0x0801719f
 801a024:	240000d4 	.word	0x240000d4

0801a028 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801a028:	b538      	push	{r3, r4, r5, lr}
 801a02a:	4c15      	ldr	r4, [pc, #84]	@ (801a080 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801a02c:	4605      	mov	r5, r0
 801a02e:	7823      	ldrb	r3, [r4, #0]
 801a030:	f3bf 8f5b 	dmb	ish
 801a034:	07da      	lsls	r2, r3, #31
 801a036:	d40b      	bmi.n	801a050 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801a038:	4620      	mov	r0, r4
 801a03a:	f006 f83f 	bl	80200bc <__cxa_guard_acquire>
 801a03e:	b138      	cbz	r0, 801a050 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801a040:	4620      	mov	r0, r4
 801a042:	f006 f847 	bl	80200d4 <__cxa_guard_release>
 801a046:	4a0f      	ldr	r2, [pc, #60]	@ (801a084 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801a048:	490f      	ldr	r1, [pc, #60]	@ (801a088 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801a04a:	4810      	ldr	r0, [pc, #64]	@ (801a08c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801a04c:	f006 f82f 	bl	80200ae <__aeabi_atexit>
 801a050:	4c0f      	ldr	r4, [pc, #60]	@ (801a090 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801a052:	7823      	ldrb	r3, [r4, #0]
 801a054:	f3bf 8f5b 	dmb	ish
 801a058:	07db      	lsls	r3, r3, #31
 801a05a:	d40b      	bmi.n	801a074 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801a05c:	4620      	mov	r0, r4
 801a05e:	f006 f82d 	bl	80200bc <__cxa_guard_acquire>
 801a062:	b138      	cbz	r0, 801a074 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801a064:	4620      	mov	r0, r4
 801a066:	f006 f835 	bl	80200d4 <__cxa_guard_release>
 801a06a:	4a06      	ldr	r2, [pc, #24]	@ (801a084 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801a06c:	4909      	ldr	r1, [pc, #36]	@ (801a094 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801a06e:	480a      	ldr	r0, [pc, #40]	@ (801a098 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801a070:	f006 f81d 	bl	80200ae <__aeabi_atexit>
 801a074:	4b05      	ldr	r3, [pc, #20]	@ (801a08c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801a076:	61eb      	str	r3, [r5, #28]
 801a078:	4b07      	ldr	r3, [pc, #28]	@ (801a098 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801a07a:	622b      	str	r3, [r5, #32]
 801a07c:	bd38      	pop	{r3, r4, r5, pc}
 801a07e:	bf00      	nop
 801a080:	240251ec 	.word	0x240251ec
 801a084:	24000000 	.word	0x24000000
 801a088:	080171a5 	.word	0x080171a5
 801a08c:	240000b0 	.word	0x240000b0
 801a090:	240251f0 	.word	0x240251f0
 801a094:	080171a3 	.word	0x080171a3
 801a098:	240000b4 	.word	0x240000b4

0801a09c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801a09c:	b510      	push	{r4, lr}
 801a09e:	4604      	mov	r4, r0
 801a0a0:	f7ff ff88 	bl	8019fb4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801a0a4:	4620      	mov	r0, r4
 801a0a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0aa:	f7ff bfbd 	b.w	801a028 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801a0b0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801a0b0:	b538      	push	{r3, r4, r5, lr}
 801a0b2:	4c15      	ldr	r4, [pc, #84]	@ (801a108 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801a0b4:	4605      	mov	r5, r0
 801a0b6:	7823      	ldrb	r3, [r4, #0]
 801a0b8:	f3bf 8f5b 	dmb	ish
 801a0bc:	07da      	lsls	r2, r3, #31
 801a0be:	d40b      	bmi.n	801a0d8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801a0c0:	4620      	mov	r0, r4
 801a0c2:	f005 fffb 	bl	80200bc <__cxa_guard_acquire>
 801a0c6:	b138      	cbz	r0, 801a0d8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801a0c8:	4620      	mov	r0, r4
 801a0ca:	f006 f803 	bl	80200d4 <__cxa_guard_release>
 801a0ce:	4a0f      	ldr	r2, [pc, #60]	@ (801a10c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801a0d0:	490f      	ldr	r1, [pc, #60]	@ (801a110 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801a0d2:	4810      	ldr	r0, [pc, #64]	@ (801a114 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801a0d4:	f005 ffeb 	bl	80200ae <__aeabi_atexit>
 801a0d8:	4c0f      	ldr	r4, [pc, #60]	@ (801a118 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801a0da:	7823      	ldrb	r3, [r4, #0]
 801a0dc:	f3bf 8f5b 	dmb	ish
 801a0e0:	07db      	lsls	r3, r3, #31
 801a0e2:	d40b      	bmi.n	801a0fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801a0e4:	4620      	mov	r0, r4
 801a0e6:	f005 ffe9 	bl	80200bc <__cxa_guard_acquire>
 801a0ea:	b138      	cbz	r0, 801a0fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801a0ec:	4620      	mov	r0, r4
 801a0ee:	f005 fff1 	bl	80200d4 <__cxa_guard_release>
 801a0f2:	4a06      	ldr	r2, [pc, #24]	@ (801a10c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801a0f4:	4909      	ldr	r1, [pc, #36]	@ (801a11c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801a0f6:	480a      	ldr	r0, [pc, #40]	@ (801a120 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801a0f8:	f005 ffd9 	bl	80200ae <__aeabi_atexit>
 801a0fc:	4b05      	ldr	r3, [pc, #20]	@ (801a114 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801a0fe:	636b      	str	r3, [r5, #52]	@ 0x34
 801a100:	4b07      	ldr	r3, [pc, #28]	@ (801a120 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801a102:	63ab      	str	r3, [r5, #56]	@ 0x38
 801a104:	bd38      	pop	{r3, r4, r5, pc}
 801a106:	bf00      	nop
 801a108:	240251f4 	.word	0x240251f4
 801a10c:	24000000 	.word	0x24000000
 801a110:	08017199 	.word	0x08017199
 801a114:	240000b8 	.word	0x240000b8
 801a118:	240251f8 	.word	0x240251f8
 801a11c:	08017197 	.word	0x08017197
 801a120:	240000bc 	.word	0x240000bc

0801a124 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801a124:	b538      	push	{r3, r4, r5, lr}
 801a126:	4c15      	ldr	r4, [pc, #84]	@ (801a17c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801a128:	4605      	mov	r5, r0
 801a12a:	7823      	ldrb	r3, [r4, #0]
 801a12c:	f3bf 8f5b 	dmb	ish
 801a130:	07da      	lsls	r2, r3, #31
 801a132:	d40b      	bmi.n	801a14c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801a134:	4620      	mov	r0, r4
 801a136:	f005 ffc1 	bl	80200bc <__cxa_guard_acquire>
 801a13a:	b138      	cbz	r0, 801a14c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801a13c:	4620      	mov	r0, r4
 801a13e:	f005 ffc9 	bl	80200d4 <__cxa_guard_release>
 801a142:	4a0f      	ldr	r2, [pc, #60]	@ (801a180 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801a144:	490f      	ldr	r1, [pc, #60]	@ (801a184 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801a146:	4810      	ldr	r0, [pc, #64]	@ (801a188 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801a148:	f005 ffb1 	bl	80200ae <__aeabi_atexit>
 801a14c:	4c0f      	ldr	r4, [pc, #60]	@ (801a18c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801a14e:	7823      	ldrb	r3, [r4, #0]
 801a150:	f3bf 8f5b 	dmb	ish
 801a154:	07db      	lsls	r3, r3, #31
 801a156:	d40b      	bmi.n	801a170 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801a158:	4620      	mov	r0, r4
 801a15a:	f005 ffaf 	bl	80200bc <__cxa_guard_acquire>
 801a15e:	b138      	cbz	r0, 801a170 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801a160:	4620      	mov	r0, r4
 801a162:	f005 ffb7 	bl	80200d4 <__cxa_guard_release>
 801a166:	4a06      	ldr	r2, [pc, #24]	@ (801a180 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801a168:	4909      	ldr	r1, [pc, #36]	@ (801a190 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801a16a:	480a      	ldr	r0, [pc, #40]	@ (801a194 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801a16c:	f005 ff9f 	bl	80200ae <__aeabi_atexit>
 801a170:	4b05      	ldr	r3, [pc, #20]	@ (801a188 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801a172:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801a174:	4b07      	ldr	r3, [pc, #28]	@ (801a194 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801a176:	632b      	str	r3, [r5, #48]	@ 0x30
 801a178:	bd38      	pop	{r3, r4, r5, pc}
 801a17a:	bf00      	nop
 801a17c:	240251cc 	.word	0x240251cc
 801a180:	24000000 	.word	0x24000000
 801a184:	0801719d 	.word	0x0801719d
 801a188:	24000090 	.word	0x24000090
 801a18c:	240251d0 	.word	0x240251d0
 801a190:	0801719b 	.word	0x0801719b
 801a194:	24000094 	.word	0x24000094

0801a198 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801a198:	b510      	push	{r4, lr}
 801a19a:	4604      	mov	r4, r0
 801a19c:	f7ff ff88 	bl	801a0b0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801a1a0:	4620      	mov	r0, r4
 801a1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a1a6:	f7ff bfbd 	b.w	801a124 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801a1ac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801a1ac:	b538      	push	{r3, r4, r5, lr}
 801a1ae:	4c15      	ldr	r4, [pc, #84]	@ (801a204 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801a1b0:	4605      	mov	r5, r0
 801a1b2:	7823      	ldrb	r3, [r4, #0]
 801a1b4:	f3bf 8f5b 	dmb	ish
 801a1b8:	07da      	lsls	r2, r3, #31
 801a1ba:	d40b      	bmi.n	801a1d4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801a1bc:	4620      	mov	r0, r4
 801a1be:	f005 ff7d 	bl	80200bc <__cxa_guard_acquire>
 801a1c2:	b138      	cbz	r0, 801a1d4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801a1c4:	4620      	mov	r0, r4
 801a1c6:	f005 ff85 	bl	80200d4 <__cxa_guard_release>
 801a1ca:	4a0f      	ldr	r2, [pc, #60]	@ (801a208 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801a1cc:	490f      	ldr	r1, [pc, #60]	@ (801a20c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801a1ce:	4810      	ldr	r0, [pc, #64]	@ (801a210 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801a1d0:	f005 ff6d 	bl	80200ae <__aeabi_atexit>
 801a1d4:	4c0f      	ldr	r4, [pc, #60]	@ (801a214 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801a1d6:	7823      	ldrb	r3, [r4, #0]
 801a1d8:	f3bf 8f5b 	dmb	ish
 801a1dc:	07db      	lsls	r3, r3, #31
 801a1de:	d40b      	bmi.n	801a1f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801a1e0:	4620      	mov	r0, r4
 801a1e2:	f005 ff6b 	bl	80200bc <__cxa_guard_acquire>
 801a1e6:	b138      	cbz	r0, 801a1f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801a1e8:	4620      	mov	r0, r4
 801a1ea:	f005 ff73 	bl	80200d4 <__cxa_guard_release>
 801a1ee:	4a06      	ldr	r2, [pc, #24]	@ (801a208 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801a1f0:	4909      	ldr	r1, [pc, #36]	@ (801a218 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801a1f2:	480a      	ldr	r0, [pc, #40]	@ (801a21c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801a1f4:	f005 ff5b 	bl	80200ae <__aeabi_atexit>
 801a1f8:	4b05      	ldr	r3, [pc, #20]	@ (801a210 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801a1fa:	646b      	str	r3, [r5, #68]	@ 0x44
 801a1fc:	4b07      	ldr	r3, [pc, #28]	@ (801a21c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801a1fe:	64ab      	str	r3, [r5, #72]	@ 0x48
 801a200:	bd38      	pop	{r3, r4, r5, pc}
 801a202:	bf00      	nop
 801a204:	240251fc 	.word	0x240251fc
 801a208:	24000000 	.word	0x24000000
 801a20c:	08017191 	.word	0x08017191
 801a210:	240000c0 	.word	0x240000c0
 801a214:	24025200 	.word	0x24025200
 801a218:	0801718f 	.word	0x0801718f
 801a21c:	240000c4 	.word	0x240000c4

0801a220 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801a220:	b538      	push	{r3, r4, r5, lr}
 801a222:	4c15      	ldr	r4, [pc, #84]	@ (801a278 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801a224:	4605      	mov	r5, r0
 801a226:	7823      	ldrb	r3, [r4, #0]
 801a228:	f3bf 8f5b 	dmb	ish
 801a22c:	07da      	lsls	r2, r3, #31
 801a22e:	d40b      	bmi.n	801a248 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801a230:	4620      	mov	r0, r4
 801a232:	f005 ff43 	bl	80200bc <__cxa_guard_acquire>
 801a236:	b138      	cbz	r0, 801a248 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801a238:	4620      	mov	r0, r4
 801a23a:	f005 ff4b 	bl	80200d4 <__cxa_guard_release>
 801a23e:	4a0f      	ldr	r2, [pc, #60]	@ (801a27c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801a240:	490f      	ldr	r1, [pc, #60]	@ (801a280 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801a242:	4810      	ldr	r0, [pc, #64]	@ (801a284 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801a244:	f005 ff33 	bl	80200ae <__aeabi_atexit>
 801a248:	4c0f      	ldr	r4, [pc, #60]	@ (801a288 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801a24a:	7823      	ldrb	r3, [r4, #0]
 801a24c:	f3bf 8f5b 	dmb	ish
 801a250:	07db      	lsls	r3, r3, #31
 801a252:	d40b      	bmi.n	801a26c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801a254:	4620      	mov	r0, r4
 801a256:	f005 ff31 	bl	80200bc <__cxa_guard_acquire>
 801a25a:	b138      	cbz	r0, 801a26c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801a25c:	4620      	mov	r0, r4
 801a25e:	f005 ff39 	bl	80200d4 <__cxa_guard_release>
 801a262:	4a06      	ldr	r2, [pc, #24]	@ (801a27c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801a264:	4909      	ldr	r1, [pc, #36]	@ (801a28c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801a266:	480a      	ldr	r0, [pc, #40]	@ (801a290 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801a268:	f005 ff21 	bl	80200ae <__aeabi_atexit>
 801a26c:	4b05      	ldr	r3, [pc, #20]	@ (801a284 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801a26e:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801a270:	4b07      	ldr	r3, [pc, #28]	@ (801a290 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801a272:	642b      	str	r3, [r5, #64]	@ 0x40
 801a274:	bd38      	pop	{r3, r4, r5, pc}
 801a276:	bf00      	nop
 801a278:	240251dc 	.word	0x240251dc
 801a27c:	24000000 	.word	0x24000000
 801a280:	08017195 	.word	0x08017195
 801a284:	240000a0 	.word	0x240000a0
 801a288:	240251e0 	.word	0x240251e0
 801a28c:	08017193 	.word	0x08017193
 801a290:	240000a4 	.word	0x240000a4

0801a294 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801a294:	b510      	push	{r4, lr}
 801a296:	4604      	mov	r4, r0
 801a298:	f7ff ff88 	bl	801a1ac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801a29c:	4620      	mov	r0, r4
 801a29e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2a2:	f7ff bfbd 	b.w	801a220 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801a2a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801a2a8:	b538      	push	{r3, r4, r5, lr}
 801a2aa:	4c15      	ldr	r4, [pc, #84]	@ (801a300 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801a2ac:	4605      	mov	r5, r0
 801a2ae:	7823      	ldrb	r3, [r4, #0]
 801a2b0:	f3bf 8f5b 	dmb	ish
 801a2b4:	07da      	lsls	r2, r3, #31
 801a2b6:	d40b      	bmi.n	801a2d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801a2b8:	4620      	mov	r0, r4
 801a2ba:	f005 feff 	bl	80200bc <__cxa_guard_acquire>
 801a2be:	b138      	cbz	r0, 801a2d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801a2c0:	4620      	mov	r0, r4
 801a2c2:	f005 ff07 	bl	80200d4 <__cxa_guard_release>
 801a2c6:	4a0f      	ldr	r2, [pc, #60]	@ (801a304 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801a2c8:	490f      	ldr	r1, [pc, #60]	@ (801a308 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801a2ca:	4810      	ldr	r0, [pc, #64]	@ (801a30c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801a2cc:	f005 feef 	bl	80200ae <__aeabi_atexit>
 801a2d0:	4c0f      	ldr	r4, [pc, #60]	@ (801a310 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801a2d2:	7823      	ldrb	r3, [r4, #0]
 801a2d4:	f3bf 8f5b 	dmb	ish
 801a2d8:	07db      	lsls	r3, r3, #31
 801a2da:	d40b      	bmi.n	801a2f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801a2dc:	4620      	mov	r0, r4
 801a2de:	f005 feed 	bl	80200bc <__cxa_guard_acquire>
 801a2e2:	b138      	cbz	r0, 801a2f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801a2e4:	4620      	mov	r0, r4
 801a2e6:	f005 fef5 	bl	80200d4 <__cxa_guard_release>
 801a2ea:	4a06      	ldr	r2, [pc, #24]	@ (801a304 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801a2ec:	4909      	ldr	r1, [pc, #36]	@ (801a314 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801a2ee:	480a      	ldr	r0, [pc, #40]	@ (801a318 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801a2f0:	f005 fedd 	bl	80200ae <__aeabi_atexit>
 801a2f4:	4b05      	ldr	r3, [pc, #20]	@ (801a30c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801a2f6:	656b      	str	r3, [r5, #84]	@ 0x54
 801a2f8:	4b07      	ldr	r3, [pc, #28]	@ (801a318 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801a2fa:	65ab      	str	r3, [r5, #88]	@ 0x58
 801a2fc:	bd38      	pop	{r3, r4, r5, pc}
 801a2fe:	bf00      	nop
 801a300:	240251d4 	.word	0x240251d4
 801a304:	24000000 	.word	0x24000000
 801a308:	08017189 	.word	0x08017189
 801a30c:	24000098 	.word	0x24000098
 801a310:	240251d8 	.word	0x240251d8
 801a314:	08017187 	.word	0x08017187
 801a318:	2400009c 	.word	0x2400009c

0801a31c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801a31c:	b538      	push	{r3, r4, r5, lr}
 801a31e:	4c15      	ldr	r4, [pc, #84]	@ (801a374 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801a320:	4605      	mov	r5, r0
 801a322:	7823      	ldrb	r3, [r4, #0]
 801a324:	f3bf 8f5b 	dmb	ish
 801a328:	07da      	lsls	r2, r3, #31
 801a32a:	d40b      	bmi.n	801a344 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801a32c:	4620      	mov	r0, r4
 801a32e:	f005 fec5 	bl	80200bc <__cxa_guard_acquire>
 801a332:	b138      	cbz	r0, 801a344 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801a334:	4620      	mov	r0, r4
 801a336:	f005 fecd 	bl	80200d4 <__cxa_guard_release>
 801a33a:	4a0f      	ldr	r2, [pc, #60]	@ (801a378 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801a33c:	490f      	ldr	r1, [pc, #60]	@ (801a37c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801a33e:	4810      	ldr	r0, [pc, #64]	@ (801a380 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801a340:	f005 feb5 	bl	80200ae <__aeabi_atexit>
 801a344:	4c0f      	ldr	r4, [pc, #60]	@ (801a384 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801a346:	7823      	ldrb	r3, [r4, #0]
 801a348:	f3bf 8f5b 	dmb	ish
 801a34c:	07db      	lsls	r3, r3, #31
 801a34e:	d40b      	bmi.n	801a368 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801a350:	4620      	mov	r0, r4
 801a352:	f005 feb3 	bl	80200bc <__cxa_guard_acquire>
 801a356:	b138      	cbz	r0, 801a368 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801a358:	4620      	mov	r0, r4
 801a35a:	f005 febb 	bl	80200d4 <__cxa_guard_release>
 801a35e:	4a06      	ldr	r2, [pc, #24]	@ (801a378 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801a360:	4909      	ldr	r1, [pc, #36]	@ (801a388 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801a362:	480a      	ldr	r0, [pc, #40]	@ (801a38c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801a364:	f005 fea3 	bl	80200ae <__aeabi_atexit>
 801a368:	4b05      	ldr	r3, [pc, #20]	@ (801a380 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801a36a:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801a36c:	4b07      	ldr	r3, [pc, #28]	@ (801a38c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801a36e:	652b      	str	r3, [r5, #80]	@ 0x50
 801a370:	bd38      	pop	{r3, r4, r5, pc}
 801a372:	bf00      	nop
 801a374:	240251c4 	.word	0x240251c4
 801a378:	24000000 	.word	0x24000000
 801a37c:	0801718d 	.word	0x0801718d
 801a380:	24000088 	.word	0x24000088
 801a384:	240251c8 	.word	0x240251c8
 801a388:	0801718b 	.word	0x0801718b
 801a38c:	2400008c 	.word	0x2400008c

0801a390 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801a390:	b510      	push	{r4, lr}
 801a392:	4604      	mov	r4, r0
 801a394:	f7ff ff88 	bl	801a2a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801a398:	4620      	mov	r0, r4
 801a39a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a39e:	f7ff bfbd 	b.w	801a31c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801a3a2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801a3a2:	b510      	push	{r4, lr}
 801a3a4:	4604      	mov	r4, r0
 801a3a6:	f7ff fff3 	bl	801a390 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801a3aa:	4620      	mov	r0, r4
 801a3ac:	f7ff ff72 	bl	801a294 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801a3b0:	4620      	mov	r0, r4
 801a3b2:	f7ff fe73 	bl	801a09c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801a3b6:	4620      	mov	r0, r4
 801a3b8:	f7ff fdf2 	bl	8019fa0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801a3bc:	4620      	mov	r0, r4
 801a3be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a3c2:	f7ff bee9 	b.w	801a198 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801a3c8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801a3c8:	b538      	push	{r3, r4, r5, lr}
 801a3ca:	4c0b      	ldr	r4, [pc, #44]	@ (801a3f8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801a3cc:	4605      	mov	r5, r0
 801a3ce:	7823      	ldrb	r3, [r4, #0]
 801a3d0:	f3bf 8f5b 	dmb	ish
 801a3d4:	07db      	lsls	r3, r3, #31
 801a3d6:	d40b      	bmi.n	801a3f0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801a3d8:	4620      	mov	r0, r4
 801a3da:	f005 fe6f 	bl	80200bc <__cxa_guard_acquire>
 801a3de:	b138      	cbz	r0, 801a3f0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801a3e0:	4620      	mov	r0, r4
 801a3e2:	f005 fe77 	bl	80200d4 <__cxa_guard_release>
 801a3e6:	4a05      	ldr	r2, [pc, #20]	@ (801a3fc <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801a3e8:	4905      	ldr	r1, [pc, #20]	@ (801a400 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801a3ea:	4806      	ldr	r0, [pc, #24]	@ (801a404 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801a3ec:	f005 fe5f 	bl	80200ae <__aeabi_atexit>
 801a3f0:	4b04      	ldr	r3, [pc, #16]	@ (801a404 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801a3f2:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801a3f4:	bd38      	pop	{r3, r4, r5, pc}
 801a3f6:	bf00      	nop
 801a3f8:	240251b8 	.word	0x240251b8
 801a3fc:	24000000 	.word	0x24000000
 801a400:	08017185 	.word	0x08017185
 801a404:	24000080 	.word	0x24000080

0801a408 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801a408:	b538      	push	{r3, r4, r5, lr}
 801a40a:	4c0b      	ldr	r4, [pc, #44]	@ (801a438 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801a40c:	4605      	mov	r5, r0
 801a40e:	7823      	ldrb	r3, [r4, #0]
 801a410:	f3bf 8f5b 	dmb	ish
 801a414:	07db      	lsls	r3, r3, #31
 801a416:	d40b      	bmi.n	801a430 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801a418:	4620      	mov	r0, r4
 801a41a:	f005 fe4f 	bl	80200bc <__cxa_guard_acquire>
 801a41e:	b138      	cbz	r0, 801a430 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801a420:	4620      	mov	r0, r4
 801a422:	f005 fe57 	bl	80200d4 <__cxa_guard_release>
 801a426:	4a05      	ldr	r2, [pc, #20]	@ (801a43c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801a428:	4905      	ldr	r1, [pc, #20]	@ (801a440 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801a42a:	4806      	ldr	r0, [pc, #24]	@ (801a444 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801a42c:	f005 fe3f 	bl	80200ae <__aeabi_atexit>
 801a430:	4b04      	ldr	r3, [pc, #16]	@ (801a444 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801a432:	662b      	str	r3, [r5, #96]	@ 0x60
 801a434:	bd38      	pop	{r3, r4, r5, pc}
 801a436:	bf00      	nop
 801a438:	240251bc 	.word	0x240251bc
 801a43c:	24000000 	.word	0x24000000
 801a440:	08017183 	.word	0x08017183
 801a444:	24000084 	.word	0x24000084

0801a448 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801a448:	b570      	push	{r4, r5, r6, lr}
 801a44a:	4d0c      	ldr	r5, [pc, #48]	@ (801a47c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801a44c:	4606      	mov	r6, r0
 801a44e:	4c0c      	ldr	r4, [pc, #48]	@ (801a480 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801a450:	782b      	ldrb	r3, [r5, #0]
 801a452:	f3bf 8f5b 	dmb	ish
 801a456:	f013 0f01 	tst.w	r3, #1
 801a45a:	d10d      	bne.n	801a478 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801a45c:	4628      	mov	r0, r5
 801a45e:	f005 fe2d 	bl	80200bc <__cxa_guard_acquire>
 801a462:	b148      	cbz	r0, 801a478 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801a464:	4b07      	ldr	r3, [pc, #28]	@ (801a484 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801a466:	4628      	mov	r0, r5
 801a468:	6023      	str	r3, [r4, #0]
 801a46a:	f005 fe33 	bl	80200d4 <__cxa_guard_release>
 801a46e:	4a06      	ldr	r2, [pc, #24]	@ (801a488 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801a470:	4620      	mov	r0, r4
 801a472:	4906      	ldr	r1, [pc, #24]	@ (801a48c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801a474:	f005 fe1b 	bl	80200ae <__aeabi_atexit>
 801a478:	6674      	str	r4, [r6, #100]	@ 0x64
 801a47a:	bd70      	pop	{r4, r5, r6, pc}
 801a47c:	240251c0 	.word	0x240251c0
 801a480:	24025318 	.word	0x24025318
 801a484:	080245b0 	.word	0x080245b0
 801a488:	24000000 	.word	0x24000000
 801a48c:	08017181 	.word	0x08017181

0801a490 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801a490:	b510      	push	{r4, lr}
 801a492:	4604      	mov	r4, r0
 801a494:	f7ff ff98 	bl	801a3c8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801a498:	4620      	mov	r0, r4
 801a49a:	f7ff ffb5 	bl	801a408 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801a49e:	4620      	mov	r0, r4
 801a4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4a4:	f7ff bfd0 	b.w	801a448 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801a4a8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801a4a8:	b570      	push	{r4, r5, r6, lr}
 801a4aa:	4d0c      	ldr	r5, [pc, #48]	@ (801a4dc <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801a4ac:	4606      	mov	r6, r0
 801a4ae:	4c0c      	ldr	r4, [pc, #48]	@ (801a4e0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801a4b0:	782b      	ldrb	r3, [r5, #0]
 801a4b2:	f3bf 8f5b 	dmb	ish
 801a4b6:	f013 0f01 	tst.w	r3, #1
 801a4ba:	d10d      	bne.n	801a4d8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801a4bc:	4628      	mov	r0, r5
 801a4be:	f005 fdfd 	bl	80200bc <__cxa_guard_acquire>
 801a4c2:	b148      	cbz	r0, 801a4d8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801a4c4:	4b07      	ldr	r3, [pc, #28]	@ (801a4e4 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801a4c6:	4628      	mov	r0, r5
 801a4c8:	6023      	str	r3, [r4, #0]
 801a4ca:	f005 fe03 	bl	80200d4 <__cxa_guard_release>
 801a4ce:	4a06      	ldr	r2, [pc, #24]	@ (801a4e8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801a4d0:	4620      	mov	r0, r4
 801a4d2:	4906      	ldr	r1, [pc, #24]	@ (801a4ec <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801a4d4:	f005 fdeb 	bl	80200ae <__aeabi_atexit>
 801a4d8:	66b4      	str	r4, [r6, #104]	@ 0x68
 801a4da:	bd70      	pop	{r4, r5, r6, pc}
 801a4dc:	240251b4 	.word	0x240251b4
 801a4e0:	24025214 	.word	0x24025214
 801a4e4:	080245c8 	.word	0x080245c8
 801a4e8:	24000000 	.word	0x24000000
 801a4ec:	0801717f 	.word	0x0801717f

0801a4f0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801a4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4f4:	b087      	sub	sp, #28
 801a4f6:	788d      	ldrb	r5, [r1, #2]
 801a4f8:	f891 9000 	ldrb.w	r9, [r1]
 801a4fc:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801a500:	9501      	str	r5, [sp, #4]
 801a502:	784d      	ldrb	r5, [r1, #1]
 801a504:	9203      	str	r2, [sp, #12]
 801a506:	9502      	str	r5, [sp, #8]
 801a508:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801a50c:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801a510:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801a514:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801a518:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801a51c:	fb06 0708 	mla	r7, r6, r8, r0
 801a520:	2e00      	cmp	r6, #0
 801a522:	eb02 0a07 	add.w	sl, r2, r7
 801a526:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801a52a:	9d01      	ldr	r5, [sp, #4]
 801a52c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801a530:	ea45 0509 	orr.w	r5, r5, r9
 801a534:	9505      	str	r5, [sp, #20]
 801a536:	f2c0 80b2 	blt.w	801a69e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801a53a:	45b3      	cmp	fp, r6
 801a53c:	f340 80af 	ble.w	801a69e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801a540:	2800      	cmp	r0, #0
 801a542:	f2c0 80aa 	blt.w	801a69a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801a546:	4580      	cmp	r8, r0
 801a548:	f340 80a7 	ble.w	801a69a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801a54c:	9a03      	ldr	r2, [sp, #12]
 801a54e:	5dd7      	ldrb	r7, [r2, r7]
 801a550:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a554:	441f      	add	r7, r3
 801a556:	1c42      	adds	r2, r0, #1
 801a558:	f100 80a4 	bmi.w	801a6a4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801a55c:	4590      	cmp	r8, r2
 801a55e:	f340 80a1 	ble.w	801a6a4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801a562:	2c00      	cmp	r4, #0
 801a564:	f000 809e 	beq.w	801a6a4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801a568:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801a56c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a570:	441d      	add	r5, r3
 801a572:	3601      	adds	r6, #1
 801a574:	f100 809a 	bmi.w	801a6ac <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801a578:	45b3      	cmp	fp, r6
 801a57a:	f340 8097 	ble.w	801a6ac <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801a57e:	f1bc 0f00 	cmp.w	ip, #0
 801a582:	f000 8093 	beq.w	801a6ac <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801a586:	2800      	cmp	r0, #0
 801a588:	f2c0 808e 	blt.w	801a6a8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801a58c:	4580      	cmp	r8, r0
 801a58e:	f340 808b 	ble.w	801a6a8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801a592:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801a596:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a59a:	441e      	add	r6, r3
 801a59c:	3001      	adds	r0, #1
 801a59e:	f100 8088 	bmi.w	801a6b2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801a5a2:	4580      	cmp	r8, r0
 801a5a4:	f340 8085 	ble.w	801a6b2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801a5a8:	2c00      	cmp	r4, #0
 801a5aa:	f000 8082 	beq.w	801a6b2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801a5ae:	44d0      	add	r8, sl
 801a5b0:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a5b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a5b8:	4413      	add	r3, r2
 801a5ba:	b2a4      	uxth	r4, r4
 801a5bc:	f895 a000 	ldrb.w	sl, [r5]
 801a5c0:	fa1f fc8c 	uxth.w	ip, ip
 801a5c4:	fb04 fb0c 	mul.w	fp, r4, ip
 801a5c8:	0124      	lsls	r4, r4, #4
 801a5ca:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801a5ce:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801a5d2:	eba4 040b 	sub.w	r4, r4, fp
 801a5d6:	fa1f f08c 	uxth.w	r0, ip
 801a5da:	b2a2      	uxth	r2, r4
 801a5dc:	783c      	ldrb	r4, [r7, #0]
 801a5de:	eba8 0800 	sub.w	r8, r8, r0
 801a5e2:	fa1f fc8e 	uxth.w	ip, lr
 801a5e6:	fb02 fa0a 	mul.w	sl, r2, sl
 801a5ea:	ea6f 0e0e 	mvn.w	lr, lr
 801a5ee:	fa1f f888 	uxth.w	r8, r8
 801a5f2:	fa5f fe8e 	uxtb.w	lr, lr
 801a5f6:	fb08 aa04 	mla	sl, r8, r4, sl
 801a5fa:	7834      	ldrb	r4, [r6, #0]
 801a5fc:	fb19 f90e 	smulbb	r9, r9, lr
 801a600:	fb00 aa04 	mla	sl, r0, r4, sl
 801a604:	781c      	ldrb	r4, [r3, #0]
 801a606:	fb0b a404 	mla	r4, fp, r4, sl
 801a60a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801a60e:	fb04 990c 	mla	r9, r4, ip, r9
 801a612:	fa1f f989 	uxth.w	r9, r9
 801a616:	f109 0401 	add.w	r4, r9, #1
 801a61a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801a61e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a622:	f881 9000 	strb.w	r9, [r1]
 801a626:	f895 9001 	ldrb.w	r9, [r5, #1]
 801a62a:	787c      	ldrb	r4, [r7, #1]
 801a62c:	fb02 f909 	mul.w	r9, r2, r9
 801a630:	fb08 9904 	mla	r9, r8, r4, r9
 801a634:	7874      	ldrb	r4, [r6, #1]
 801a636:	fb00 9904 	mla	r9, r0, r4, r9
 801a63a:	785c      	ldrb	r4, [r3, #1]
 801a63c:	fb0b 9404 	mla	r4, fp, r4, r9
 801a640:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801a644:	9c02      	ldr	r4, [sp, #8]
 801a646:	fb14 f90e 	smulbb	r9, r4, lr
 801a64a:	fb0a 940c 	mla	r4, sl, ip, r9
 801a64e:	b2a4      	uxth	r4, r4
 801a650:	f104 0901 	add.w	r9, r4, #1
 801a654:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801a658:	1224      	asrs	r4, r4, #8
 801a65a:	704c      	strb	r4, [r1, #1]
 801a65c:	78ad      	ldrb	r5, [r5, #2]
 801a65e:	78bc      	ldrb	r4, [r7, #2]
 801a660:	436a      	muls	r2, r5
 801a662:	789b      	ldrb	r3, [r3, #2]
 801a664:	fb08 2204 	mla	r2, r8, r4, r2
 801a668:	78b4      	ldrb	r4, [r6, #2]
 801a66a:	fb00 2004 	mla	r0, r0, r4, r2
 801a66e:	fb0b 0b03 	mla	fp, fp, r3, r0
 801a672:	9b01      	ldr	r3, [sp, #4]
 801a674:	fb13 fe0e 	smulbb	lr, r3, lr
 801a678:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801a67c:	fb0b ec0c 	mla	ip, fp, ip, lr
 801a680:	fa1f fc8c 	uxth.w	ip, ip
 801a684:	f10c 0e01 	add.w	lr, ip, #1
 801a688:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801a68c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a690:	f881 c002 	strb.w	ip, [r1, #2]
 801a694:	b007      	add	sp, #28
 801a696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a69a:	af05      	add	r7, sp, #20
 801a69c:	e75b      	b.n	801a556 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801a69e:	ad05      	add	r5, sp, #20
 801a6a0:	462f      	mov	r7, r5
 801a6a2:	e766      	b.n	801a572 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801a6a4:	ad05      	add	r5, sp, #20
 801a6a6:	e764      	b.n	801a572 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801a6a8:	ae05      	add	r6, sp, #20
 801a6aa:	e777      	b.n	801a59c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801a6ac:	ab05      	add	r3, sp, #20
 801a6ae:	461e      	mov	r6, r3
 801a6b0:	e783      	b.n	801a5ba <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801a6b2:	ab05      	add	r3, sp, #20
 801a6b4:	e781      	b.n	801a5ba <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801a6b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a6b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6ba:	b093      	sub	sp, #76	@ 0x4c
 801a6bc:	9210      	str	r2, [sp, #64]	@ 0x40
 801a6be:	9309      	str	r3, [sp, #36]	@ 0x24
 801a6c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a6c2:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801a6c6:	9011      	str	r0, [sp, #68]	@ 0x44
 801a6c8:	930e      	str	r3, [sp, #56]	@ 0x38
 801a6ca:	6850      	ldr	r0, [r2, #4]
 801a6cc:	910d      	str	r1, [sp, #52]	@ 0x34
 801a6ce:	6812      	ldr	r2, [r2, #0]
 801a6d0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801a6d4:	fb00 1303 	mla	r3, r0, r3, r1
 801a6d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a6dc:	18d3      	adds	r3, r2, r3
 801a6de:	930a      	str	r3, [sp, #40]	@ 0x28
 801a6e0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	930c      	str	r3, [sp, #48]	@ 0x30
 801a6e6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a6e8:	685c      	ldr	r4, [r3, #4]
 801a6ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a6ec:	3404      	adds	r4, #4
 801a6ee:	43db      	mvns	r3, r3
 801a6f0:	b2db      	uxtb	r3, r3
 801a6f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a6f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	dc03      	bgt.n	801a702 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801a6fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	f340 8250 	ble.w	801aba2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801a702:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a704:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a708:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a70c:	1e48      	subs	r0, r1, #1
 801a70e:	1e55      	subs	r5, r2, #1
 801a710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a712:	2b00      	cmp	r3, #0
 801a714:	f340 80ee 	ble.w	801a8f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a718:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801a71a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a71c:	1436      	asrs	r6, r6, #16
 801a71e:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a722:	d406      	bmi.n	801a732 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a724:	4286      	cmp	r6, r0
 801a726:	da04      	bge.n	801a732 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a728:	2b00      	cmp	r3, #0
 801a72a:	db02      	blt.n	801a732 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a72c:	42ab      	cmp	r3, r5
 801a72e:	f2c0 80e2 	blt.w	801a8f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801a732:	3601      	adds	r6, #1
 801a734:	f100 80cf 	bmi.w	801a8d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a738:	42b1      	cmp	r1, r6
 801a73a:	f2c0 80cc 	blt.w	801a8d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a73e:	3301      	adds	r3, #1
 801a740:	f100 80c9 	bmi.w	801a8d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a744:	429a      	cmp	r2, r3
 801a746:	f2c0 80c6 	blt.w	801a8d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a74a:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801a74e:	f1bb 0f00 	cmp.w	fp, #0
 801a752:	f340 80f1 	ble.w	801a938 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801a756:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a758:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801a75a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801a75c:	141d      	asrs	r5, r3, #16
 801a75e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a760:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801a764:	68c7      	ldr	r7, [r0, #12]
 801a766:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801a768:	1418      	asrs	r0, r3, #16
 801a76a:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801a76e:	6892      	ldr	r2, [r2, #8]
 801a770:	f100 8137 	bmi.w	801a9e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a774:	f102 3cff 	add.w	ip, r2, #4294967295
 801a778:	4560      	cmp	r0, ip
 801a77a:	f280 8132 	bge.w	801a9e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a77e:	2d00      	cmp	r5, #0
 801a780:	f2c0 812f 	blt.w	801a9e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a784:	f107 3cff 	add.w	ip, r7, #4294967295
 801a788:	4565      	cmp	r5, ip
 801a78a:	f280 812a 	bge.w	801a9e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a78e:	b212      	sxth	r2, r2
 801a790:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801a792:	fb05 0002 	mla	r0, r5, r2, r0
 801a796:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801a798:	f817 c000 	ldrb.w	ip, [r7, r0]
 801a79c:	4405      	add	r5, r0
 801a79e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a7a2:	eb04 0e0c 	add.w	lr, r4, ip
 801a7a6:	f1b8 0f00 	cmp.w	r8, #0
 801a7aa:	f000 810c 	beq.w	801a9c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801a7ae:	786f      	ldrb	r7, [r5, #1]
 801a7b0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a7b4:	4427      	add	r7, r4
 801a7b6:	2900      	cmp	r1, #0
 801a7b8:	f000 810d 	beq.w	801a9d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801a7bc:	18a8      	adds	r0, r5, r2
 801a7be:	5caa      	ldrb	r2, [r5, r2]
 801a7c0:	7840      	ldrb	r0, [r0, #1]
 801a7c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a7c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a7ca:	4422      	add	r2, r4
 801a7cc:	4420      	add	r0, r4
 801a7ce:	fa1f f388 	uxth.w	r3, r8
 801a7d2:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801a7d6:	b289      	uxth	r1, r1
 801a7d8:	f897 c000 	ldrb.w	ip, [r7]
 801a7dc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801a7e0:	fb03 f901 	mul.w	r9, r3, r1
 801a7e4:	011b      	lsls	r3, r3, #4
 801a7e6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a7ea:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801a7ee:	eba3 0309 	sub.w	r3, r3, r9
 801a7f2:	b289      	uxth	r1, r1
 801a7f4:	b29b      	uxth	r3, r3
 801a7f6:	eba8 0801 	sub.w	r8, r8, r1
 801a7fa:	fb03 fc0c 	mul.w	ip, r3, ip
 801a7fe:	fa1f f888 	uxth.w	r8, r8
 801a802:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a804:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a806:	fb08 cc0a 	mla	ip, r8, sl, ip
 801a80a:	f892 a000 	ldrb.w	sl, [r2]
 801a80e:	fb01 cc0a 	mla	ip, r1, sl, ip
 801a812:	f890 a000 	ldrb.w	sl, [r0]
 801a816:	fb09 cc0a 	mla	ip, r9, sl, ip
 801a81a:	f896 a000 	ldrb.w	sl, [r6]
 801a81e:	fb1a fa03 	smulbb	sl, sl, r3
 801a822:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801a826:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a828:	fb0c ac05 	mla	ip, ip, r5, sl
 801a82c:	fa1f fc8c 	uxth.w	ip, ip
 801a830:	f10c 0a01 	add.w	sl, ip, #1
 801a834:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801a838:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a83c:	f886 a000 	strb.w	sl, [r6]
 801a840:	f897 c001 	ldrb.w	ip, [r7, #1]
 801a844:	f89e a001 	ldrb.w	sl, [lr, #1]
 801a848:	fb03 fc0c 	mul.w	ip, r3, ip
 801a84c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a84e:	fb08 cc0a 	mla	ip, r8, sl, ip
 801a852:	f892 a001 	ldrb.w	sl, [r2, #1]
 801a856:	fb01 cc0a 	mla	ip, r1, sl, ip
 801a85a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801a85e:	fb09 cc0a 	mla	ip, r9, sl, ip
 801a862:	f896 a001 	ldrb.w	sl, [r6, #1]
 801a866:	fb1a fa03 	smulbb	sl, sl, r3
 801a86a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801a86e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a870:	fb0c ac05 	mla	ip, ip, r5, sl
 801a874:	fa1f fc8c 	uxth.w	ip, ip
 801a878:	f10c 0a01 	add.w	sl, ip, #1
 801a87c:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801a880:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a884:	f886 c001 	strb.w	ip, [r6, #1]
 801a888:	78bf      	ldrb	r7, [r7, #2]
 801a88a:	f89e c002 	ldrb.w	ip, [lr, #2]
 801a88e:	437b      	muls	r3, r7
 801a890:	fb08 330c 	mla	r3, r8, ip, r3
 801a894:	f892 c002 	ldrb.w	ip, [r2, #2]
 801a898:	7882      	ldrb	r2, [r0, #2]
 801a89a:	fb01 310c 	mla	r1, r1, ip, r3
 801a89e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a8a0:	fb09 1902 	mla	r9, r9, r2, r1
 801a8a4:	78b1      	ldrb	r1, [r6, #2]
 801a8a6:	fb11 f103 	smulbb	r1, r1, r3
 801a8aa:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801a8ae:	fb09 1505 	mla	r5, r9, r5, r1
 801a8b2:	b2ad      	uxth	r5, r5
 801a8b4:	1c6b      	adds	r3, r5, #1
 801a8b6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801a8ba:	122d      	asrs	r5, r5, #8
 801a8bc:	70b5      	strb	r5, [r6, #2]
 801a8be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a8c0:	3603      	adds	r6, #3
 801a8c2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801a8c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a8c8:	4413      	add	r3, r2
 801a8ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a8cc:	931d      	str	r3, [sp, #116]	@ 0x74
 801a8ce:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a8d0:	4413      	add	r3, r2
 801a8d2:	931e      	str	r3, [sp, #120]	@ 0x78
 801a8d4:	e73b      	b.n	801a74e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a8d6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a8d8:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801a8da:	4433      	add	r3, r6
 801a8dc:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801a8de:	931d      	str	r3, [sp, #116]	@ 0x74
 801a8e0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a8e2:	4433      	add	r3, r6
 801a8e4:	931e      	str	r3, [sp, #120]	@ 0x78
 801a8e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a8e8:	3b01      	subs	r3, #1
 801a8ea:	9309      	str	r3, [sp, #36]	@ 0x24
 801a8ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a8ee:	3303      	adds	r3, #3
 801a8f0:	930a      	str	r3, [sp, #40]	@ 0x28
 801a8f2:	e70d      	b.n	801a710 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a8f4:	d028      	beq.n	801a948 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801a8f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a8f8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801a8fa:	3b01      	subs	r3, #1
 801a8fc:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801a8fe:	fb00 5003 	mla	r0, r0, r3, r5
 801a902:	1400      	asrs	r0, r0, #16
 801a904:	f53f af21 	bmi.w	801a74a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a908:	3901      	subs	r1, #1
 801a90a:	4288      	cmp	r0, r1
 801a90c:	f6bf af1d 	bge.w	801a74a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a910:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801a912:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801a914:	fb01 0303 	mla	r3, r1, r3, r0
 801a918:	141b      	asrs	r3, r3, #16
 801a91a:	f53f af16 	bmi.w	801a74a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a91e:	3a01      	subs	r2, #1
 801a920:	4293      	cmp	r3, r2
 801a922:	f6bf af12 	bge.w	801a74a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a926:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a928:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801a92c:	1cdf      	adds	r7, r3, #3
 801a92e:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801a932:	f1b9 0f00 	cmp.w	r9, #0
 801a936:	dc73      	bgt.n	801aa20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801a938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a93a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a93c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a940:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a944:	441a      	add	r2, r3
 801a946:	920a      	str	r2, [sp, #40]	@ 0x28
 801a948:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	f340 8129 	ble.w	801aba2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801a950:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a954:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a956:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a95a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a95e:	eef0 6a62 	vmov.f32	s13, s5
 801a962:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a966:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a96a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a96e:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801a972:	eef0 6a43 	vmov.f32	s13, s6
 801a976:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a97a:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801a97e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a982:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a986:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a98a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a98e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a992:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a996:	ee12 2a90 	vmov	r2, s5
 801a99a:	eef0 2a47 	vmov.f32	s5, s14
 801a99e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9a2:	ee13 2a10 	vmov	r2, s6
 801a9a6:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a9a8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a9aa:	eeb0 3a67 	vmov.f32	s6, s15
 801a9ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9b2:	9320      	str	r3, [sp, #128]	@ 0x80
 801a9b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a9b6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a9b8:	3b01      	subs	r3, #1
 801a9ba:	930d      	str	r3, [sp, #52]	@ 0x34
 801a9bc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a9be:	bf08      	it	eq
 801a9c0:	4613      	moveq	r3, r2
 801a9c2:	9309      	str	r3, [sp, #36]	@ 0x24
 801a9c4:	e696      	b.n	801a6f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a9c6:	b149      	cbz	r1, 801a9dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801a9c8:	5caa      	ldrb	r2, [r5, r2]
 801a9ca:	4670      	mov	r0, lr
 801a9cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a9d0:	4422      	add	r2, r4
 801a9d2:	4677      	mov	r7, lr
 801a9d4:	e6fb      	b.n	801a7ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801a9d6:	4670      	mov	r0, lr
 801a9d8:	4672      	mov	r2, lr
 801a9da:	e6f8      	b.n	801a7ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801a9dc:	4670      	mov	r0, lr
 801a9de:	4672      	mov	r2, lr
 801a9e0:	e7f7      	b.n	801a9d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801a9e2:	f110 0c01 	adds.w	ip, r0, #1
 801a9e6:	f53f af6a 	bmi.w	801a8be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a9ea:	4562      	cmp	r2, ip
 801a9ec:	f6ff af67 	blt.w	801a8be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a9f0:	f115 0c01 	adds.w	ip, r5, #1
 801a9f4:	f53f af63 	bmi.w	801a8be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a9f8:	4567      	cmp	r7, ip
 801a9fa:	f6ff af60 	blt.w	801a8be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a9fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aa00:	b23f      	sxth	r7, r7
 801aa02:	b212      	sxth	r2, r2
 801aa04:	9002      	str	r0, [sp, #8]
 801aa06:	9701      	str	r7, [sp, #4]
 801aa08:	9200      	str	r2, [sp, #0]
 801aa0a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801aa0c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801aa0e:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801aa12:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801aa16:	4623      	mov	r3, r4
 801aa18:	4631      	mov	r1, r6
 801aa1a:	f7ff fd69 	bl	801a4f0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801aa1e:	e74e      	b.n	801a8be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801aa20:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801aa22:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801aa24:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801aa28:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801aa2a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801aa2c:	1400      	asrs	r0, r0, #16
 801aa2e:	142d      	asrs	r5, r5, #16
 801aa30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801aa32:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801aa36:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801aa3a:	fb02 5000 	mla	r0, r2, r0, r5
 801aa3e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801aa40:	f815 e000 	ldrb.w	lr, [r5, r0]
 801aa44:	eb05 0c00 	add.w	ip, r5, r0
 801aa48:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801aa4c:	eb04 060e 	add.w	r6, r4, lr
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	f000 8097 	beq.w	801ab84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801aa56:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801aa5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aa5e:	4425      	add	r5, r4
 801aa60:	2900      	cmp	r1, #0
 801aa62:	f000 8098 	beq.w	801ab96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801aa66:	eb0c 0002 	add.w	r0, ip, r2
 801aa6a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801aa6e:	7840      	ldrb	r0, [r0, #1]
 801aa70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801aa74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aa78:	4422      	add	r2, r4
 801aa7a:	4420      	add	r0, r4
 801aa7c:	b29b      	uxth	r3, r3
 801aa7e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801aa82:	b289      	uxth	r1, r1
 801aa84:	f895 e000 	ldrb.w	lr, [r5]
 801aa88:	3703      	adds	r7, #3
 801aa8a:	f109 39ff 	add.w	r9, r9, #4294967295
 801aa8e:	fb03 f801 	mul.w	r8, r3, r1
 801aa92:	011b      	lsls	r3, r3, #4
 801aa94:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801aa98:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801aa9c:	eba3 0308 	sub.w	r3, r3, r8
 801aaa0:	b289      	uxth	r1, r1
 801aaa2:	b29b      	uxth	r3, r3
 801aaa4:	ebac 0c01 	sub.w	ip, ip, r1
 801aaa8:	fb03 fe0e 	mul.w	lr, r3, lr
 801aaac:	fa1f fc8c 	uxth.w	ip, ip
 801aab0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801aab2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aab4:	fb0c ee0b 	mla	lr, ip, fp, lr
 801aab8:	f892 b000 	ldrb.w	fp, [r2]
 801aabc:	fb01 ee0b 	mla	lr, r1, fp, lr
 801aac0:	f890 b000 	ldrb.w	fp, [r0]
 801aac4:	fb08 ee0b 	mla	lr, r8, fp, lr
 801aac8:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801aacc:	fb1b fb03 	smulbb	fp, fp, r3
 801aad0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801aad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aad6:	fb0e be0a 	mla	lr, lr, sl, fp
 801aada:	fa1f fe8e 	uxth.w	lr, lr
 801aade:	f10e 0b01 	add.w	fp, lr, #1
 801aae2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801aae6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801aaea:	f807 ec06 	strb.w	lr, [r7, #-6]
 801aaee:	f895 e001 	ldrb.w	lr, [r5, #1]
 801aaf2:	f896 b001 	ldrb.w	fp, [r6, #1]
 801aaf6:	fb03 fe0e 	mul.w	lr, r3, lr
 801aafa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aafc:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ab00:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ab04:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ab08:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ab0c:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ab10:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801ab14:	fb1b fb03 	smulbb	fp, fp, r3
 801ab18:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ab1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ab1e:	fb0e be0a 	mla	lr, lr, sl, fp
 801ab22:	fa1f fe8e 	uxth.w	lr, lr
 801ab26:	f10e 0b01 	add.w	fp, lr, #1
 801ab2a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ab2e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ab32:	f807 ec05 	strb.w	lr, [r7, #-5]
 801ab36:	78ad      	ldrb	r5, [r5, #2]
 801ab38:	78b6      	ldrb	r6, [r6, #2]
 801ab3a:	436b      	muls	r3, r5
 801ab3c:	7895      	ldrb	r5, [r2, #2]
 801ab3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ab40:	fb0c 3306 	mla	r3, ip, r6, r3
 801ab44:	fb01 3305 	mla	r3, r1, r5, r3
 801ab48:	7885      	ldrb	r5, [r0, #2]
 801ab4a:	fb08 3805 	mla	r8, r8, r5, r3
 801ab4e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801ab52:	fb13 f302 	smulbb	r3, r3, r2
 801ab56:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ab5a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801ab5c:	fb08 380a 	mla	r8, r8, sl, r3
 801ab60:	fa1f f888 	uxth.w	r8, r8
 801ab64:	f108 0301 	add.w	r3, r8, #1
 801ab68:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801ab6c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ab6e:	4413      	add	r3, r2
 801ab70:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ab72:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ab76:	931d      	str	r3, [sp, #116]	@ 0x74
 801ab78:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ab7a:	f807 8c04 	strb.w	r8, [r7, #-4]
 801ab7e:	4413      	add	r3, r2
 801ab80:	931e      	str	r3, [sp, #120]	@ 0x78
 801ab82:	e6d6      	b.n	801a932 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ab84:	b151      	cbz	r1, 801ab9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801ab86:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ab8a:	4630      	mov	r0, r6
 801ab8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ab90:	4422      	add	r2, r4
 801ab92:	4635      	mov	r5, r6
 801ab94:	e772      	b.n	801aa7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801ab96:	4630      	mov	r0, r6
 801ab98:	4632      	mov	r2, r6
 801ab9a:	e76f      	b.n	801aa7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801ab9c:	4630      	mov	r0, r6
 801ab9e:	4632      	mov	r2, r6
 801aba0:	e7f7      	b.n	801ab92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801aba2:	b013      	add	sp, #76	@ 0x4c
 801aba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aba8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801aba8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801abac:	784c      	ldrb	r4, [r1, #1]
 801abae:	f891 a002 	ldrb.w	sl, [r1, #2]
 801abb2:	0224      	lsls	r4, r4, #8
 801abb4:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801abb8:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801abbc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801abc0:	f891 a000 	ldrb.w	sl, [r1]
 801abc4:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801abc8:	ea44 040a 	orr.w	r4, r4, sl
 801abcc:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801abd0:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801abd4:	9401      	str	r4, [sp, #4]
 801abd6:	fb05 c70e 	mla	r7, r5, lr, ip
 801abda:	2d00      	cmp	r5, #0
 801abdc:	eb02 0807 	add.w	r8, r2, r7
 801abe0:	db72      	blt.n	801acc8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801abe2:	45a9      	cmp	r9, r5
 801abe4:	dd70      	ble.n	801acc8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801abe6:	f1bc 0f00 	cmp.w	ip, #0
 801abea:	db6b      	blt.n	801acc4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801abec:	45e6      	cmp	lr, ip
 801abee:	dd69      	ble.n	801acc4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801abf0:	5dd7      	ldrb	r7, [r2, r7]
 801abf2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801abf6:	441f      	add	r7, r3
 801abf8:	f11c 0201 	adds.w	r2, ip, #1
 801abfc:	d467      	bmi.n	801acce <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801abfe:	4596      	cmp	lr, r2
 801ac00:	dd65      	ble.n	801acce <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801ac02:	2800      	cmp	r0, #0
 801ac04:	d063      	beq.n	801acce <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801ac06:	f898 4001 	ldrb.w	r4, [r8, #1]
 801ac0a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ac0e:	441c      	add	r4, r3
 801ac10:	3501      	adds	r5, #1
 801ac12:	d460      	bmi.n	801acd6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801ac14:	45a9      	cmp	r9, r5
 801ac16:	dd5e      	ble.n	801acd6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801ac18:	2e00      	cmp	r6, #0
 801ac1a:	d05c      	beq.n	801acd6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801ac1c:	f1bc 0f00 	cmp.w	ip, #0
 801ac20:	db57      	blt.n	801acd2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801ac22:	45e6      	cmp	lr, ip
 801ac24:	dd55      	ble.n	801acd2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801ac26:	f818 500e 	ldrb.w	r5, [r8, lr]
 801ac2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ac2e:	441d      	add	r5, r3
 801ac30:	f11c 0201 	adds.w	r2, ip, #1
 801ac34:	d452      	bmi.n	801acdc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801ac36:	4596      	cmp	lr, r2
 801ac38:	dd50      	ble.n	801acdc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801ac3a:	2800      	cmp	r0, #0
 801ac3c:	d04e      	beq.n	801acdc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801ac3e:	44c6      	add	lr, r8
 801ac40:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801ac44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ac48:	4413      	add	r3, r2
 801ac4a:	b280      	uxth	r0, r0
 801ac4c:	f897 8000 	ldrb.w	r8, [r7]
 801ac50:	b2b2      	uxth	r2, r6
 801ac52:	fb00 f602 	mul.w	r6, r0, r2
 801ac56:	0100      	lsls	r0, r0, #4
 801ac58:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801ac5c:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801ac60:	1b80      	subs	r0, r0, r6
 801ac62:	fa1f fc82 	uxth.w	ip, r2
 801ac66:	b282      	uxth	r2, r0
 801ac68:	7820      	ldrb	r0, [r4, #0]
 801ac6a:	ebae 0e0c 	sub.w	lr, lr, ip
 801ac6e:	4350      	muls	r0, r2
 801ac70:	fa1f fe8e 	uxth.w	lr, lr
 801ac74:	fb0e 0808 	mla	r8, lr, r8, r0
 801ac78:	7828      	ldrb	r0, [r5, #0]
 801ac7a:	fb0c 8800 	mla	r8, ip, r0, r8
 801ac7e:	7818      	ldrb	r0, [r3, #0]
 801ac80:	fb06 8000 	mla	r0, r6, r0, r8
 801ac84:	1200      	asrs	r0, r0, #8
 801ac86:	7008      	strb	r0, [r1, #0]
 801ac88:	7860      	ldrb	r0, [r4, #1]
 801ac8a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ac8e:	4350      	muls	r0, r2
 801ac90:	fb0e 0808 	mla	r8, lr, r8, r0
 801ac94:	7868      	ldrb	r0, [r5, #1]
 801ac96:	fb0c 8800 	mla	r8, ip, r0, r8
 801ac9a:	7858      	ldrb	r0, [r3, #1]
 801ac9c:	fb06 8000 	mla	r0, r6, r0, r8
 801aca0:	1200      	asrs	r0, r0, #8
 801aca2:	7048      	strb	r0, [r1, #1]
 801aca4:	78a0      	ldrb	r0, [r4, #2]
 801aca6:	78bf      	ldrb	r7, [r7, #2]
 801aca8:	4350      	muls	r0, r2
 801acaa:	78aa      	ldrb	r2, [r5, #2]
 801acac:	fb0e 0007 	mla	r0, lr, r7, r0
 801acb0:	fb0c 0c02 	mla	ip, ip, r2, r0
 801acb4:	789a      	ldrb	r2, [r3, #2]
 801acb6:	fb06 c202 	mla	r2, r6, r2, ip
 801acba:	1212      	asrs	r2, r2, #8
 801acbc:	708a      	strb	r2, [r1, #2]
 801acbe:	b002      	add	sp, #8
 801acc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acc4:	af01      	add	r7, sp, #4
 801acc6:	e797      	b.n	801abf8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801acc8:	ac01      	add	r4, sp, #4
 801acca:	4627      	mov	r7, r4
 801accc:	e7a0      	b.n	801ac10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801acce:	ac01      	add	r4, sp, #4
 801acd0:	e79e      	b.n	801ac10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801acd2:	ad01      	add	r5, sp, #4
 801acd4:	e7ac      	b.n	801ac30 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801acd6:	ab01      	add	r3, sp, #4
 801acd8:	461d      	mov	r5, r3
 801acda:	e7b6      	b.n	801ac4a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801acdc:	ab01      	add	r3, sp, #4
 801acde:	e7b4      	b.n	801ac4a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801ace0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ace0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ace4:	b08d      	sub	sp, #52	@ 0x34
 801ace6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801acea:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801acee:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801acf0:	900b      	str	r0, [sp, #44]	@ 0x2c
 801acf2:	9306      	str	r3, [sp, #24]
 801acf4:	6850      	ldr	r0, [r2, #4]
 801acf6:	6812      	ldr	r2, [r2, #0]
 801acf8:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801acfa:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801acfe:	fb00 1303 	mla	r3, r0, r3, r1
 801ad02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ad06:	18d3      	adds	r3, r2, r3
 801ad08:	9307      	str	r3, [sp, #28]
 801ad0a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	9308      	str	r3, [sp, #32]
 801ad10:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ad12:	685d      	ldr	r5, [r3, #4]
 801ad14:	3504      	adds	r5, #4
 801ad16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	dc03      	bgt.n	801ad24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ad1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	f340 81e6 	ble.w	801b0f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801ad24:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ad26:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ad2a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ad2e:	1e48      	subs	r0, r1, #1
 801ad30:	1e56      	subs	r6, r2, #1
 801ad32:	9b06      	ldr	r3, [sp, #24]
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	f340 80bd 	ble.w	801aeb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801ad3a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ad3c:	1427      	asrs	r7, r4, #16
 801ad3e:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ad42:	d406      	bmi.n	801ad52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ad44:	4287      	cmp	r7, r0
 801ad46:	da04      	bge.n	801ad52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	db02      	blt.n	801ad52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ad4c:	42b3      	cmp	r3, r6
 801ad4e:	f2c0 80b2 	blt.w	801aeb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801ad52:	3701      	adds	r7, #1
 801ad54:	f100 80a1 	bmi.w	801ae9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ad58:	42b9      	cmp	r1, r7
 801ad5a:	f2c0 809e 	blt.w	801ae9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ad5e:	3301      	adds	r3, #1
 801ad60:	f100 809b 	bmi.w	801ae9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ad64:	429a      	cmp	r2, r3
 801ad66:	f2c0 8098 	blt.w	801ae9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ad6a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801ad6e:	f1bb 0f00 	cmp.w	fp, #0
 801ad72:	f340 80bf 	ble.w	801aef4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ad76:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ad78:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801ad7a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ad7c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ad80:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801ad84:	1420      	asrs	r0, r4, #16
 801ad86:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ad88:	ea4f 4723 	mov.w	r7, r3, asr #16
 801ad8c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801ad90:	6892      	ldr	r2, [r2, #8]
 801ad92:	f100 8103 	bmi.w	801af9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ad96:	f102 3eff 	add.w	lr, r2, #4294967295
 801ad9a:	4570      	cmp	r0, lr
 801ad9c:	f280 80fe 	bge.w	801af9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ada0:	2f00      	cmp	r7, #0
 801ada2:	f2c0 80fb 	blt.w	801af9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ada6:	f10c 3eff 	add.w	lr, ip, #4294967295
 801adaa:	4577      	cmp	r7, lr
 801adac:	f280 80f6 	bge.w	801af9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801adb0:	b212      	sxth	r2, r2
 801adb2:	fb07 0002 	mla	r0, r7, r2, r0
 801adb6:	9f08      	ldr	r7, [sp, #32]
 801adb8:	f817 8000 	ldrb.w	r8, [r7, r0]
 801adbc:	eb07 0e00 	add.w	lr, r7, r0
 801adc0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801adc4:	eb05 0c08 	add.w	ip, r5, r8
 801adc8:	2b00      	cmp	r3, #0
 801adca:	f000 80d8 	beq.w	801af7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801adce:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801add2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801add6:	442f      	add	r7, r5
 801add8:	2900      	cmp	r1, #0
 801adda:	f000 80d9 	beq.w	801af90 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801adde:	eb0e 0002 	add.w	r0, lr, r2
 801ade2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801ade6:	7840      	ldrb	r0, [r0, #1]
 801ade8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801adec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801adf0:	442a      	add	r2, r5
 801adf2:	4428      	add	r0, r5
 801adf4:	b29b      	uxth	r3, r3
 801adf6:	f815 a008 	ldrb.w	sl, [r5, r8]
 801adfa:	b289      	uxth	r1, r1
 801adfc:	f897 8000 	ldrb.w	r8, [r7]
 801ae00:	fb03 f901 	mul.w	r9, r3, r1
 801ae04:	011b      	lsls	r3, r3, #4
 801ae06:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ae0a:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801ae0e:	eba3 0309 	sub.w	r3, r3, r9
 801ae12:	b289      	uxth	r1, r1
 801ae14:	b29b      	uxth	r3, r3
 801ae16:	ebae 0e01 	sub.w	lr, lr, r1
 801ae1a:	fb03 f808 	mul.w	r8, r3, r8
 801ae1e:	fa1f fe8e 	uxth.w	lr, lr
 801ae22:	fb0e 880a 	mla	r8, lr, sl, r8
 801ae26:	f892 a000 	ldrb.w	sl, [r2]
 801ae2a:	fb01 880a 	mla	r8, r1, sl, r8
 801ae2e:	f890 a000 	ldrb.w	sl, [r0]
 801ae32:	fb09 880a 	mla	r8, r9, sl, r8
 801ae36:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ae3a:	f886 8000 	strb.w	r8, [r6]
 801ae3e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ae42:	f89c a001 	ldrb.w	sl, [ip, #1]
 801ae46:	fb03 f808 	mul.w	r8, r3, r8
 801ae4a:	fb0e 880a 	mla	r8, lr, sl, r8
 801ae4e:	f892 a001 	ldrb.w	sl, [r2, #1]
 801ae52:	fb01 880a 	mla	r8, r1, sl, r8
 801ae56:	f890 a001 	ldrb.w	sl, [r0, #1]
 801ae5a:	fb09 880a 	mla	r8, r9, sl, r8
 801ae5e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ae62:	f886 8001 	strb.w	r8, [r6, #1]
 801ae66:	78bf      	ldrb	r7, [r7, #2]
 801ae68:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ae6c:	437b      	muls	r3, r7
 801ae6e:	7892      	ldrb	r2, [r2, #2]
 801ae70:	fb0e 330c 	mla	r3, lr, ip, r3
 801ae74:	fb01 3102 	mla	r1, r1, r2, r3
 801ae78:	7882      	ldrb	r2, [r0, #2]
 801ae7a:	fb09 1902 	mla	r9, r9, r2, r1
 801ae7e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ae82:	f886 9002 	strb.w	r9, [r6, #2]
 801ae86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ae88:	3603      	adds	r6, #3
 801ae8a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ae8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ae90:	441c      	add	r4, r3
 801ae92:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ae94:	4413      	add	r3, r2
 801ae96:	9318      	str	r3, [sp, #96]	@ 0x60
 801ae98:	e769      	b.n	801ad6e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ae9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ae9c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801ae9e:	441c      	add	r4, r3
 801aea0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801aea2:	443b      	add	r3, r7
 801aea4:	9318      	str	r3, [sp, #96]	@ 0x60
 801aea6:	9b06      	ldr	r3, [sp, #24]
 801aea8:	3b01      	subs	r3, #1
 801aeaa:	9306      	str	r3, [sp, #24]
 801aeac:	9b07      	ldr	r3, [sp, #28]
 801aeae:	3303      	adds	r3, #3
 801aeb0:	9307      	str	r3, [sp, #28]
 801aeb2:	e73e      	b.n	801ad32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801aeb4:	d026      	beq.n	801af04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801aeb6:	9b06      	ldr	r3, [sp, #24]
 801aeb8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801aeba:	3b01      	subs	r3, #1
 801aebc:	fb00 4003 	mla	r0, r0, r3, r4
 801aec0:	1400      	asrs	r0, r0, #16
 801aec2:	f53f af52 	bmi.w	801ad6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801aec6:	3901      	subs	r1, #1
 801aec8:	4288      	cmp	r0, r1
 801aeca:	f6bf af4e 	bge.w	801ad6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801aece:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801aed0:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801aed2:	fb01 0303 	mla	r3, r1, r3, r0
 801aed6:	141b      	asrs	r3, r3, #16
 801aed8:	f53f af47 	bmi.w	801ad6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801aedc:	3a01      	subs	r2, #1
 801aede:	4293      	cmp	r3, r2
 801aee0:	f6bf af43 	bge.w	801ad6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801aee4:	9b07      	ldr	r3, [sp, #28]
 801aee6:	f8dd a018 	ldr.w	sl, [sp, #24]
 801aeea:	f103 0803 	add.w	r8, r3, #3
 801aeee:	f1ba 0f00 	cmp.w	sl, #0
 801aef2:	dc71      	bgt.n	801afd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801aef4:	9b06      	ldr	r3, [sp, #24]
 801aef6:	9a07      	ldr	r2, [sp, #28]
 801aef8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aefc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801af00:	441a      	add	r2, r3
 801af02:	9207      	str	r2, [sp, #28]
 801af04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af06:	2b00      	cmp	r3, #0
 801af08:	f340 80f2 	ble.w	801b0f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801af0c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801af10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801af12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801af16:	eeb0 6a62 	vmov.f32	s12, s5
 801af1a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801af1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801af22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801af26:	ee16 4a10 	vmov	r4, s12
 801af2a:	eeb0 6a43 	vmov.f32	s12, s6
 801af2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801af32:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801af36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801af3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801af3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801af42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801af46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801af4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801af4e:	ee12 2a90 	vmov	r2, s5
 801af52:	eef0 2a47 	vmov.f32	s5, s14
 801af56:	fb92 f3f3 	sdiv	r3, r2, r3
 801af5a:	ee13 2a10 	vmov	r2, s6
 801af5e:	9319      	str	r3, [sp, #100]	@ 0x64
 801af60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801af62:	eeb0 3a67 	vmov.f32	s6, s15
 801af66:	fb92 f3f3 	sdiv	r3, r2, r3
 801af6a:	931a      	str	r3, [sp, #104]	@ 0x68
 801af6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801af70:	3b01      	subs	r3, #1
 801af72:	9309      	str	r3, [sp, #36]	@ 0x24
 801af74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801af76:	bf08      	it	eq
 801af78:	4613      	moveq	r3, r2
 801af7a:	9306      	str	r3, [sp, #24]
 801af7c:	e6cb      	b.n	801ad16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801af7e:	b151      	cbz	r1, 801af96 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801af80:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801af84:	4660      	mov	r0, ip
 801af86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801af8a:	442a      	add	r2, r5
 801af8c:	4667      	mov	r7, ip
 801af8e:	e731      	b.n	801adf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801af90:	4660      	mov	r0, ip
 801af92:	4662      	mov	r2, ip
 801af94:	e72e      	b.n	801adf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801af96:	4660      	mov	r0, ip
 801af98:	4662      	mov	r2, ip
 801af9a:	e7f7      	b.n	801af8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801af9c:	f110 0e01 	adds.w	lr, r0, #1
 801afa0:	f53f af71 	bmi.w	801ae86 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801afa4:	4572      	cmp	r2, lr
 801afa6:	f6ff af6e 	blt.w	801ae86 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801afaa:	f117 0e01 	adds.w	lr, r7, #1
 801afae:	f53f af6a 	bmi.w	801ae86 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801afb2:	45f4      	cmp	ip, lr
 801afb4:	f6ff af67 	blt.w	801ae86 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801afb8:	b212      	sxth	r2, r2
 801afba:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801afbe:	fa0f f38c 	sxth.w	r3, ip
 801afc2:	9200      	str	r2, [sp, #0]
 801afc4:	4631      	mov	r1, r6
 801afc6:	9a08      	ldr	r2, [sp, #32]
 801afc8:	9301      	str	r3, [sp, #4]
 801afca:	462b      	mov	r3, r5
 801afcc:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801afd0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801afd2:	f7ff fde9 	bl	801aba8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801afd6:	e756      	b.n	801ae86 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801afd8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801afda:	1426      	asrs	r6, r4, #16
 801afdc:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801afde:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801afe2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801afe6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801afe8:	1400      	asrs	r0, r0, #16
 801afea:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801afee:	fb02 6000 	mla	r0, r2, r0, r6
 801aff2:	9e08      	ldr	r6, [sp, #32]
 801aff4:	f816 e000 	ldrb.w	lr, [r6, r0]
 801aff8:	eb06 0c00 	add.w	ip, r6, r0
 801affc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b000:	eb05 070e 	add.w	r7, r5, lr
 801b004:	2b00      	cmp	r3, #0
 801b006:	d064      	beq.n	801b0d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801b008:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801b00c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b010:	442e      	add	r6, r5
 801b012:	2900      	cmp	r1, #0
 801b014:	d066      	beq.n	801b0e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801b016:	eb0c 0002 	add.w	r0, ip, r2
 801b01a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b01e:	7840      	ldrb	r0, [r0, #1]
 801b020:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b024:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b028:	442a      	add	r2, r5
 801b02a:	4428      	add	r0, r5
 801b02c:	b29b      	uxth	r3, r3
 801b02e:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801b032:	b289      	uxth	r1, r1
 801b034:	f896 e000 	ldrb.w	lr, [r6]
 801b038:	f108 0803 	add.w	r8, r8, #3
 801b03c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b040:	fb03 f901 	mul.w	r9, r3, r1
 801b044:	011b      	lsls	r3, r3, #4
 801b046:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801b04a:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801b04e:	eba3 0309 	sub.w	r3, r3, r9
 801b052:	b289      	uxth	r1, r1
 801b054:	b29b      	uxth	r3, r3
 801b056:	ebac 0c01 	sub.w	ip, ip, r1
 801b05a:	fb03 fe0e 	mul.w	lr, r3, lr
 801b05e:	fa1f fc8c 	uxth.w	ip, ip
 801b062:	fb0c ee0b 	mla	lr, ip, fp, lr
 801b066:	f892 b000 	ldrb.w	fp, [r2]
 801b06a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801b06e:	f890 b000 	ldrb.w	fp, [r0]
 801b072:	fb09 ee0b 	mla	lr, r9, fp, lr
 801b076:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b07a:	f808 ec06 	strb.w	lr, [r8, #-6]
 801b07e:	f896 e001 	ldrb.w	lr, [r6, #1]
 801b082:	f897 b001 	ldrb.w	fp, [r7, #1]
 801b086:	fb03 fe0e 	mul.w	lr, r3, lr
 801b08a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801b08e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801b092:	fb01 ee0b 	mla	lr, r1, fp, lr
 801b096:	f890 b001 	ldrb.w	fp, [r0, #1]
 801b09a:	fb09 ee0b 	mla	lr, r9, fp, lr
 801b09e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b0a2:	f808 ec05 	strb.w	lr, [r8, #-5]
 801b0a6:	78b6      	ldrb	r6, [r6, #2]
 801b0a8:	78bf      	ldrb	r7, [r7, #2]
 801b0aa:	4373      	muls	r3, r6
 801b0ac:	7896      	ldrb	r6, [r2, #2]
 801b0ae:	7882      	ldrb	r2, [r0, #2]
 801b0b0:	fb0c 3307 	mla	r3, ip, r7, r3
 801b0b4:	fb01 3306 	mla	r3, r1, r6, r3
 801b0b8:	fb09 3902 	mla	r9, r9, r2, r3
 801b0bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b0be:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b0c0:	441c      	add	r4, r3
 801b0c2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b0c4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b0c8:	4413      	add	r3, r2
 801b0ca:	f808 9c04 	strb.w	r9, [r8, #-4]
 801b0ce:	9318      	str	r3, [sp, #96]	@ 0x60
 801b0d0:	e70d      	b.n	801aeee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b0d2:	b151      	cbz	r1, 801b0ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801b0d4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b0d8:	4638      	mov	r0, r7
 801b0da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b0de:	442a      	add	r2, r5
 801b0e0:	463e      	mov	r6, r7
 801b0e2:	e7a3      	b.n	801b02c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801b0e4:	4638      	mov	r0, r7
 801b0e6:	463a      	mov	r2, r7
 801b0e8:	e7a0      	b.n	801b02c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801b0ea:	4638      	mov	r0, r7
 801b0ec:	463a      	mov	r2, r7
 801b0ee:	e7f7      	b.n	801b0e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801b0f0:	b00d      	add	sp, #52	@ 0x34
 801b0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b0f6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801b0f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0fa:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801b0fe:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801b102:	2d00      	cmp	r5, #0
 801b104:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801b108:	fb05 700c 	mla	r0, r5, ip, r7
 801b10c:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801b110:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801b114:	eb02 0800 	add.w	r8, r2, r0
 801b118:	f2c0 8118 	blt.w	801b34c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801b11c:	45a9      	cmp	r9, r5
 801b11e:	f340 8115 	ble.w	801b34c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801b122:	2f00      	cmp	r7, #0
 801b124:	f2c0 8110 	blt.w	801b348 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801b128:	45bc      	cmp	ip, r7
 801b12a:	f340 810d 	ble.w	801b348 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801b12e:	5c12      	ldrb	r2, [r2, r0]
 801b130:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b134:	1c7a      	adds	r2, r7, #1
 801b136:	f100 810c 	bmi.w	801b352 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801b13a:	4594      	cmp	ip, r2
 801b13c:	f340 8109 	ble.w	801b352 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801b140:	2c00      	cmp	r4, #0
 801b142:	f000 8108 	beq.w	801b356 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801b146:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b14a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b14e:	3501      	adds	r5, #1
 801b150:	f100 8105 	bmi.w	801b35e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801b154:	45a9      	cmp	r9, r5
 801b156:	f340 8102 	ble.w	801b35e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801b15a:	f1be 0f00 	cmp.w	lr, #0
 801b15e:	f000 8101 	beq.w	801b364 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801b162:	2f00      	cmp	r7, #0
 801b164:	f2c0 80f9 	blt.w	801b35a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801b168:	45bc      	cmp	ip, r7
 801b16a:	f340 80f6 	ble.w	801b35a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801b16e:	f818 200c 	ldrb.w	r2, [r8, ip]
 801b172:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b176:	3701      	adds	r7, #1
 801b178:	f100 80f7 	bmi.w	801b36a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801b17c:	45bc      	cmp	ip, r7
 801b17e:	f340 80f4 	ble.w	801b36a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801b182:	2c00      	cmp	r4, #0
 801b184:	f000 80f3 	beq.w	801b36e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801b188:	44c4      	add	ip, r8
 801b18a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801b18e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b192:	fa1f fc84 	uxth.w	ip, r4
 801b196:	fa1f f48e 	uxth.w	r4, lr
 801b19a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801b19e:	fb04 fe0c 	mul.w	lr, r4, ip
 801b1a2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801b1a6:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801b1aa:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801b1ae:	ebac 070e 	sub.w	r7, ip, lr
 801b1b2:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801b1b6:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801b1ba:	b2a4      	uxth	r4, r4
 801b1bc:	b2bf      	uxth	r7, r7
 801b1be:	1b1b      	subs	r3, r3, r4
 801b1c0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801b1c4:	fb07 fc0a 	mul.w	ip, r7, sl
 801b1c8:	b29b      	uxth	r3, r3
 801b1ca:	fb03 cc0b 	mla	ip, r3, fp, ip
 801b1ce:	9300      	str	r3, [sp, #0]
 801b1d0:	fb04 cc09 	mla	ip, r4, r9, ip
 801b1d4:	fb0e cc08 	mla	ip, lr, r8, ip
 801b1d8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801b1dc:	9301      	str	r3, [sp, #4]
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	f000 80af 	beq.w	801b342 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801b1e4:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801b1e8:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801b1ec:	fb0b fc0c 	mul.w	ip, fp, ip
 801b1f0:	fb0b f606 	mul.w	r6, fp, r6
 801b1f4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801b1f8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801b1fc:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801b200:	44dc      	add	ip, fp
 801b202:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801b206:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801b20a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b20e:	fb0a fb0b 	mul.w	fp, sl, fp
 801b212:	fb0a fa00 	mul.w	sl, sl, r0
 801b216:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801b21a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801b21e:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801b222:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801b226:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801b22a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b22e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801b232:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b236:	0a36      	lsrs	r6, r6, #8
 801b238:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b23c:	44dc      	add	ip, fp
 801b23e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801b242:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801b246:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801b24a:	fb09 fb0b 	mul.w	fp, r9, fp
 801b24e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b252:	fb09 f905 	mul.w	r9, r9, r5
 801b256:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801b25a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b25e:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801b262:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b266:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801b26a:	fb0c fc07 	mul.w	ip, ip, r7
 801b26e:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801b272:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801b276:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801b27a:	4458      	add	r0, fp
 801b27c:	fb08 f505 	mul.w	r5, r8, r5
 801b280:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b284:	fb08 f802 	mul.w	r8, r8, r2
 801b288:	0a00      	lsrs	r0, r0, #8
 801b28a:	0a2a      	lsrs	r2, r5, #8
 801b28c:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801b290:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801b294:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801b298:	4415      	add	r5, r2
 801b29a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801b29e:	0a2d      	lsrs	r5, r5, #8
 801b2a0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b2a4:	9a00      	ldr	r2, [sp, #0]
 801b2a6:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801b2aa:	fb03 cc02 	mla	ip, r3, r2, ip
 801b2ae:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801b2b2:	9b01      	ldr	r3, [sp, #4]
 801b2b4:	fb05 c50e 	mla	r5, r5, lr, ip
 801b2b8:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801b2bc:	fb00 5004 	mla	r0, r0, r4, r5
 801b2c0:	0a00      	lsrs	r0, r0, #8
 801b2c2:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801b2c6:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801b2ca:	4378      	muls	r0, r7
 801b2cc:	fb02 0006 	mla	r0, r2, r6, r0
 801b2d0:	fb0e 0e08 	mla	lr, lr, r8, r0
 801b2d4:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801b2d8:	fb04 e000 	mla	r0, r4, r0, lr
 801b2dc:	0a00      	lsrs	r0, r0, #8
 801b2de:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801b2e2:	4328      	orrs	r0, r5
 801b2e4:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801b2e8:	b2ad      	uxth	r5, r5
 801b2ea:	b2c4      	uxtb	r4, r0
 801b2ec:	436b      	muls	r3, r5
 801b2ee:	fb14 f405 	smulbb	r4, r4, r5
 801b2f2:	1c5a      	adds	r2, r3, #1
 801b2f4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b2f8:	780b      	ldrb	r3, [r1, #0]
 801b2fa:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801b2fe:	b2d2      	uxtb	r2, r2
 801b300:	fb03 4302 	mla	r3, r3, r2, r4
 801b304:	b29b      	uxth	r3, r3
 801b306:	1c5c      	adds	r4, r3, #1
 801b308:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801b30c:	784c      	ldrb	r4, [r1, #1]
 801b30e:	fb14 f402 	smulbb	r4, r4, r2
 801b312:	121b      	asrs	r3, r3, #8
 801b314:	700b      	strb	r3, [r1, #0]
 801b316:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801b31a:	fb03 4305 	mla	r3, r3, r5, r4
 801b31e:	b29b      	uxth	r3, r3
 801b320:	1c5c      	adds	r4, r3, #1
 801b322:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801b326:	0c04      	lsrs	r4, r0, #16
 801b328:	7888      	ldrb	r0, [r1, #2]
 801b32a:	121b      	asrs	r3, r3, #8
 801b32c:	fb10 f002 	smulbb	r0, r0, r2
 801b330:	704b      	strb	r3, [r1, #1]
 801b332:	fb04 0005 	mla	r0, r4, r5, r0
 801b336:	b280      	uxth	r0, r0
 801b338:	1c43      	adds	r3, r0, #1
 801b33a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801b33e:	1200      	asrs	r0, r0, #8
 801b340:	7088      	strb	r0, [r1, #2]
 801b342:	b003      	add	sp, #12
 801b344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b348:	2600      	movs	r6, #0
 801b34a:	e6f3      	b.n	801b134 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801b34c:	2000      	movs	r0, #0
 801b34e:	4606      	mov	r6, r0
 801b350:	e6fd      	b.n	801b14e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801b352:	2000      	movs	r0, #0
 801b354:	e6fb      	b.n	801b14e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801b356:	4620      	mov	r0, r4
 801b358:	e6f9      	b.n	801b14e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801b35a:	2500      	movs	r5, #0
 801b35c:	e70b      	b.n	801b176 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801b35e:	2200      	movs	r2, #0
 801b360:	4615      	mov	r5, r2
 801b362:	e716      	b.n	801b192 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801b364:	4672      	mov	r2, lr
 801b366:	4675      	mov	r5, lr
 801b368:	e713      	b.n	801b192 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801b36a:	2200      	movs	r2, #0
 801b36c:	e711      	b.n	801b192 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801b36e:	4622      	mov	r2, r4
 801b370:	e70f      	b.n	801b192 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801b372 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b376:	b09f      	sub	sp, #124	@ 0x7c
 801b378:	921b      	str	r2, [sp, #108]	@ 0x6c
 801b37a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b37c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801b37e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801b382:	901d      	str	r0, [sp, #116]	@ 0x74
 801b384:	931c      	str	r3, [sp, #112]	@ 0x70
 801b386:	6850      	ldr	r0, [r2, #4]
 801b388:	9119      	str	r1, [sp, #100]	@ 0x64
 801b38a:	6812      	ldr	r2, [r2, #0]
 801b38c:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801b38e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801b392:	fb00 1303 	mla	r3, r0, r3, r1
 801b396:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b39a:	18d3      	adds	r3, r2, r3
 801b39c:	930c      	str	r3, [sp, #48]	@ 0x30
 801b39e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b3a0:	681b      	ldr	r3, [r3, #0]
 801b3a2:	9312      	str	r3, [sp, #72]	@ 0x48
 801b3a4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b3a6:	685e      	ldr	r6, [r3, #4]
 801b3a8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801b3ac:	3604      	adds	r6, #4
 801b3ae:	930d      	str	r3, [sp, #52]	@ 0x34
 801b3b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	dc03      	bgt.n	801b3be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b3b6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	f340 8378 	ble.w	801baae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801b3be:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b3c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b3c4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b3c8:	1e48      	subs	r0, r1, #1
 801b3ca:	1e57      	subs	r7, r2, #1
 801b3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	f340 818c 	ble.w	801b6ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801b3d4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b3d6:	142b      	asrs	r3, r5, #16
 801b3d8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801b3dc:	d406      	bmi.n	801b3ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b3de:	4584      	cmp	ip, r0
 801b3e0:	da04      	bge.n	801b3ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	db02      	blt.n	801b3ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b3e6:	42bb      	cmp	r3, r7
 801b3e8:	f2c0 8181 	blt.w	801b6ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801b3ec:	f11c 0c01 	adds.w	ip, ip, #1
 801b3f0:	f100 816f 	bmi.w	801b6d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801b3f4:	4561      	cmp	r1, ip
 801b3f6:	f2c0 816c 	blt.w	801b6d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801b3fa:	3301      	adds	r3, #1
 801b3fc:	f100 8169 	bmi.w	801b6d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801b400:	429a      	cmp	r2, r3
 801b402:	f2c0 8166 	blt.w	801b6d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801b406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b408:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801b40a:	931a      	str	r3, [sp, #104]	@ 0x68
 801b40c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801b40e:	2b00      	cmp	r3, #0
 801b410:	f340 818c 	ble.w	801b72c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801b414:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801b416:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801b41a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b41e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b422:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b424:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801b428:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801b42a:	141b      	asrs	r3, r3, #16
 801b42c:	f100 81d0 	bmi.w	801b7d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801b430:	f100 38ff 	add.w	r8, r0, #4294967295
 801b434:	4543      	cmp	r3, r8
 801b436:	f280 81cb 	bge.w	801b7d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801b43a:	f1bc 0f00 	cmp.w	ip, #0
 801b43e:	f2c0 81c7 	blt.w	801b7d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801b442:	f10e 38ff 	add.w	r8, lr, #4294967295
 801b446:	45c4      	cmp	ip, r8
 801b448:	f280 81c2 	bge.w	801b7d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801b44c:	b200      	sxth	r0, r0
 801b44e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b450:	fb0c 3300 	mla	r3, ip, r0, r3
 801b454:	eb04 0803 	add.w	r8, r4, r3
 801b458:	5ce3      	ldrb	r3, [r4, r3]
 801b45a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801b45e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801b462:	2a00      	cmp	r2, #0
 801b464:	f000 81a9 	beq.w	801b7ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801b468:	f898 c001 	ldrb.w	ip, [r8, #1]
 801b46c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801b470:	940e      	str	r4, [sp, #56]	@ 0x38
 801b472:	0e24      	lsrs	r4, r4, #24
 801b474:	9415      	str	r4, [sp, #84]	@ 0x54
 801b476:	b179      	cbz	r1, 801b498 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b478:	eb08 0c00 	add.w	ip, r8, r0
 801b47c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801b480:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801b484:	900a      	str	r0, [sp, #40]	@ 0x28
 801b486:	0e00      	lsrs	r0, r0, #24
 801b488:	9013      	str	r0, [sp, #76]	@ 0x4c
 801b48a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801b48e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801b492:	900f      	str	r0, [sp, #60]	@ 0x3c
 801b494:	0e00      	lsrs	r0, r0, #24
 801b496:	9016      	str	r0, [sp, #88]	@ 0x58
 801b498:	b292      	uxth	r2, r2
 801b49a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801b49c:	b289      	uxth	r1, r1
 801b49e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b4a0:	fb02 f901 	mul.w	r9, r2, r1
 801b4a4:	0112      	lsls	r2, r2, #4
 801b4a6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801b4aa:	eba2 0809 	sub.w	r8, r2, r9
 801b4ae:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801b4b2:	b289      	uxth	r1, r1
 801b4b4:	fa1f f888 	uxth.w	r8, r8
 801b4b8:	1a52      	subs	r2, r2, r1
 801b4ba:	fb08 f000 	mul.w	r0, r8, r0
 801b4be:	b292      	uxth	r2, r2
 801b4c0:	fb02 000e 	mla	r0, r2, lr, r0
 801b4c4:	fb01 0004 	mla	r0, r1, r4, r0
 801b4c8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b4ca:	fb09 0004 	mla	r0, r9, r4, r0
 801b4ce:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b4d2:	2800      	cmp	r0, #0
 801b4d4:	f000 80f2 	beq.w	801b6bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b4d8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801b4dc:	d01b      	beq.n	801b516 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801b4de:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801b4e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b4e6:	fb0e fa0a 	mul.w	sl, lr, sl
 801b4ea:	fb0e fe03 	mul.w	lr, lr, r3
 801b4ee:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b4f2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801b4f6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801b4fa:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b4fe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801b502:	4453      	add	r3, sl
 801b504:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b508:	0a1b      	lsrs	r3, r3, #8
 801b50a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801b50e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b512:	ea43 030c 	orr.w	r3, r3, ip
 801b516:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b518:	2cff      	cmp	r4, #255	@ 0xff
 801b51a:	d021      	beq.n	801b560 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801b51c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b51e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b522:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b524:	fb04 fb0b 	mul.w	fp, r4, fp
 801b528:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b52a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b52e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b530:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b534:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b538:	fb04 fa0a 	mul.w	sl, r4, sl
 801b53c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b540:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b544:	44de      	add	lr, fp
 801b546:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b54a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b54e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b552:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b556:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b55a:	ea4e 040a 	orr.w	r4, lr, sl
 801b55e:	940e      	str	r4, [sp, #56]	@ 0x38
 801b560:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b562:	2cff      	cmp	r4, #255	@ 0xff
 801b564:	d021      	beq.n	801b5aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801b566:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b568:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b56c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b56e:	fb04 fb0b 	mul.w	fp, r4, fp
 801b572:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b574:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b578:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b57a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b57e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b582:	fb04 fa0a 	mul.w	sl, r4, sl
 801b586:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b58a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b58e:	44de      	add	lr, fp
 801b590:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b594:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b598:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b59c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b5a0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b5a4:	ea4e 040a 	orr.w	r4, lr, sl
 801b5a8:	940a      	str	r4, [sp, #40]	@ 0x28
 801b5aa:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b5ac:	2cff      	cmp	r4, #255	@ 0xff
 801b5ae:	d021      	beq.n	801b5f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801b5b0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801b5b2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b5b6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b5b8:	fb04 fb0b 	mul.w	fp, r4, fp
 801b5bc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801b5be:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b5c2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b5c4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b5c8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b5cc:	fb04 fa0a 	mul.w	sl, r4, sl
 801b5d0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b5d4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b5d8:	44de      	add	lr, fp
 801b5da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b5de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b5e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b5e6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b5ea:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b5ee:	ea4e 040a 	orr.w	r4, lr, sl
 801b5f2:	940f      	str	r4, [sp, #60]	@ 0x3c
 801b5f4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b5f6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801b5fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b5fe:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801b602:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b604:	fb08 fc0c 	mul.w	ip, r8, ip
 801b608:	fb02 cc0e 	mla	ip, r2, lr, ip
 801b60c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801b610:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801b612:	fb01 cc0e 	mla	ip, r1, lr, ip
 801b616:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801b61a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b61c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b620:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801b624:	fb08 f80e 	mul.w	r8, r8, lr
 801b628:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b62c:	fb02 8303 	mla	r3, r2, r3, r8
 801b630:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b632:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b636:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801b63a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b63c:	fb01 330a 	mla	r3, r1, sl, r3
 801b640:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801b644:	fb09 3901 	mla	r9, r9, r1, r3
 801b648:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b64a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801b64c:	4343      	muls	r3, r0
 801b64e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b652:	1c58      	adds	r0, r3, #1
 801b654:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801b658:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b65c:	ea4c 0c09 	orr.w	ip, ip, r9
 801b660:	783b      	ldrb	r3, [r7, #0]
 801b662:	fa5f f28c 	uxtb.w	r2, ip
 801b666:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801b66a:	fb12 f201 	smulbb	r2, r2, r1
 801b66e:	b2c0      	uxtb	r0, r0
 801b670:	fb03 2300 	mla	r3, r3, r0, r2
 801b674:	b29b      	uxth	r3, r3
 801b676:	1c5a      	adds	r2, r3, #1
 801b678:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b67c:	787a      	ldrb	r2, [r7, #1]
 801b67e:	fb12 f200 	smulbb	r2, r2, r0
 801b682:	121b      	asrs	r3, r3, #8
 801b684:	703b      	strb	r3, [r7, #0]
 801b686:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801b68a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801b68e:	fb03 2301 	mla	r3, r3, r1, r2
 801b692:	b29b      	uxth	r3, r3
 801b694:	1c5a      	adds	r2, r3, #1
 801b696:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b69a:	121b      	asrs	r3, r3, #8
 801b69c:	707b      	strb	r3, [r7, #1]
 801b69e:	78bb      	ldrb	r3, [r7, #2]
 801b6a0:	fb13 f000 	smulbb	r0, r3, r0
 801b6a4:	fb0c 0c01 	mla	ip, ip, r1, r0
 801b6a8:	fa1f fc8c 	uxth.w	ip, ip
 801b6ac:	f10c 0301 	add.w	r3, ip, #1
 801b6b0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b6b4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b6b8:	f887 c002 	strb.w	ip, [r7, #2]
 801b6bc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801b6be:	3703      	adds	r7, #3
 801b6c0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801b6c2:	441a      	add	r2, r3
 801b6c4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b6c6:	441d      	add	r5, r3
 801b6c8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801b6ca:	9229      	str	r2, [sp, #164]	@ 0xa4
 801b6cc:	3b01      	subs	r3, #1
 801b6ce:	931a      	str	r3, [sp, #104]	@ 0x68
 801b6d0:	e69c      	b.n	801b40c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801b6d2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801b6d4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b6d6:	441c      	add	r4, r3
 801b6d8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b6da:	441d      	add	r5, r3
 801b6dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6de:	9429      	str	r4, [sp, #164]	@ 0xa4
 801b6e0:	3b01      	subs	r3, #1
 801b6e2:	9309      	str	r3, [sp, #36]	@ 0x24
 801b6e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b6e6:	3303      	adds	r3, #3
 801b6e8:	930c      	str	r3, [sp, #48]	@ 0x30
 801b6ea:	e66f      	b.n	801b3cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b6ec:	d026      	beq.n	801b73c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801b6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6f0:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801b6f2:	3b01      	subs	r3, #1
 801b6f4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b6f6:	fb00 4003 	mla	r0, r0, r3, r4
 801b6fa:	1400      	asrs	r0, r0, #16
 801b6fc:	f53f ae83 	bmi.w	801b406 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b700:	3901      	subs	r1, #1
 801b702:	4288      	cmp	r0, r1
 801b704:	f6bf ae7f 	bge.w	801b406 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b708:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801b70a:	fb01 5303 	mla	r3, r1, r3, r5
 801b70e:	141b      	asrs	r3, r3, #16
 801b710:	f53f ae79 	bmi.w	801b406 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b714:	3a01      	subs	r2, #1
 801b716:	4293      	cmp	r3, r2
 801b718:	f6bf ae75 	bge.w	801b406 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b71c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b71e:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801b722:	f103 0e03 	add.w	lr, r3, #3
 801b726:	f1bb 0f00 	cmp.w	fp, #0
 801b72a:	dc71      	bgt.n	801b810 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801b72c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b72e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b732:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b734:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b738:	4423      	add	r3, r4
 801b73a:	930c      	str	r3, [sp, #48]	@ 0x30
 801b73c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b73e:	2b00      	cmp	r3, #0
 801b740:	f340 81b5 	ble.w	801baae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801b744:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b748:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b74a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b74e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b752:	eef0 6a62 	vmov.f32	s13, s5
 801b756:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b75a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b75e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b762:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801b766:	eef0 6a43 	vmov.f32	s13, s6
 801b76a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b76e:	ee16 5a90 	vmov	r5, s13
 801b772:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b776:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b77a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b77e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b782:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b786:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b78a:	ee12 2a90 	vmov	r2, s5
 801b78e:	eef0 2a47 	vmov.f32	s5, s14
 801b792:	fb92 f3f3 	sdiv	r3, r2, r3
 801b796:	ee13 2a10 	vmov	r2, s6
 801b79a:	932b      	str	r3, [sp, #172]	@ 0xac
 801b79c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b79e:	eeb0 3a67 	vmov.f32	s6, s15
 801b7a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801b7a6:	932c      	str	r3, [sp, #176]	@ 0xb0
 801b7a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b7aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801b7ac:	3b01      	subs	r3, #1
 801b7ae:	9319      	str	r3, [sp, #100]	@ 0x64
 801b7b0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b7b2:	bf08      	it	eq
 801b7b4:	4613      	moveq	r3, r2
 801b7b6:	9309      	str	r3, [sp, #36]	@ 0x24
 801b7b8:	e5fa      	b.n	801b3b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b7ba:	2900      	cmp	r1, #0
 801b7bc:	f43f ae6c 	beq.w	801b498 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b7c0:	f818 0000 	ldrb.w	r0, [r8, r0]
 801b7c4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801b7c8:	900a      	str	r0, [sp, #40]	@ 0x28
 801b7ca:	0e00      	lsrs	r0, r0, #24
 801b7cc:	9013      	str	r0, [sp, #76]	@ 0x4c
 801b7ce:	e663      	b.n	801b498 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b7d0:	f113 0801 	adds.w	r8, r3, #1
 801b7d4:	f53f af72 	bmi.w	801b6bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b7d8:	4540      	cmp	r0, r8
 801b7da:	f6ff af6f 	blt.w	801b6bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b7de:	f11c 0801 	adds.w	r8, ip, #1
 801b7e2:	f53f af6b 	bmi.w	801b6bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b7e6:	45c6      	cmp	lr, r8
 801b7e8:	f6ff af68 	blt.w	801b6bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b7ec:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801b7ee:	b200      	sxth	r0, r0
 801b7f0:	9302      	str	r3, [sp, #8]
 801b7f2:	fa0f f38e 	sxth.w	r3, lr
 801b7f6:	9000      	str	r0, [sp, #0]
 801b7f8:	9301      	str	r3, [sp, #4]
 801b7fa:	4633      	mov	r3, r6
 801b7fc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801b7fe:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801b802:	e9cd c203 	strd	ip, r2, [sp, #12]
 801b806:	4639      	mov	r1, r7
 801b808:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b80a:	f7ff fc74 	bl	801b0f6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801b80e:	e755      	b.n	801b6bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b810:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801b812:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b816:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b818:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b81c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b81e:	1427      	asrs	r7, r4, #16
 801b820:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b822:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b826:	142b      	asrs	r3, r5, #16
 801b828:	fb01 7303 	mla	r3, r1, r3, r7
 801b82c:	18e7      	adds	r7, r4, r3
 801b82e:	5ce3      	ldrb	r3, [r4, r3]
 801b830:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801b834:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801b838:	2a00      	cmp	r2, #0
 801b83a:	f000 812e 	beq.w	801ba9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801b83e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801b842:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801b846:	9410      	str	r4, [sp, #64]	@ 0x40
 801b848:	0e24      	lsrs	r4, r4, #24
 801b84a:	9417      	str	r4, [sp, #92]	@ 0x5c
 801b84c:	b170      	cbz	r0, 801b86c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801b84e:	eb07 0801 	add.w	r8, r7, r1
 801b852:	5c79      	ldrb	r1, [r7, r1]
 801b854:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b858:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b85a:	0e09      	lsrs	r1, r1, #24
 801b85c:	9114      	str	r1, [sp, #80]	@ 0x50
 801b85e:	f898 1001 	ldrb.w	r1, [r8, #1]
 801b862:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b866:	9111      	str	r1, [sp, #68]	@ 0x44
 801b868:	0e09      	lsrs	r1, r1, #24
 801b86a:	9118      	str	r1, [sp, #96]	@ 0x60
 801b86c:	b292      	uxth	r2, r2
 801b86e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801b870:	b280      	uxth	r0, r0
 801b872:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b874:	fb02 f900 	mul.w	r9, r2, r0
 801b878:	0112      	lsls	r2, r2, #4
 801b87a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b87e:	eba2 0809 	sub.w	r8, r2, r9
 801b882:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801b886:	b280      	uxth	r0, r0
 801b888:	fa1f f888 	uxth.w	r8, r8
 801b88c:	1a12      	subs	r2, r2, r0
 801b88e:	fb08 f101 	mul.w	r1, r8, r1
 801b892:	b292      	uxth	r2, r2
 801b894:	fb02 110c 	mla	r1, r2, ip, r1
 801b898:	fb00 1104 	mla	r1, r0, r4, r1
 801b89c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801b89e:	fb09 1104 	mla	r1, r9, r4, r1
 801b8a2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b8a6:	2900      	cmp	r1, #0
 801b8a8:	f000 80ec 	beq.w	801ba84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801b8ac:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801b8b0:	d019      	beq.n	801b8e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801b8b2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801b8b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b8ba:	fb0c fa0a 	mul.w	sl, ip, sl
 801b8be:	fb0c fc03 	mul.w	ip, ip, r3
 801b8c2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b8c6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801b8ca:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801b8ce:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b8d2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801b8d6:	4453      	add	r3, sl
 801b8d8:	0a3f      	lsrs	r7, r7, #8
 801b8da:	0a1b      	lsrs	r3, r3, #8
 801b8dc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801b8e0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b8e4:	433b      	orrs	r3, r7
 801b8e6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801b8e8:	2cff      	cmp	r4, #255	@ 0xff
 801b8ea:	d020      	beq.n	801b92e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801b8ec:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b8ee:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801b8f2:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801b8f4:	4367      	muls	r7, r4
 801b8f6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b8f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b8fc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b900:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801b902:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801b906:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b90a:	fb04 fa0a 	mul.w	sl, r4, sl
 801b90e:	44bc      	add	ip, r7
 801b910:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801b914:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b918:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b91c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b920:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b924:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b928:	ea4c 040a 	orr.w	r4, ip, sl
 801b92c:	9410      	str	r4, [sp, #64]	@ 0x40
 801b92e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b930:	2cff      	cmp	r4, #255	@ 0xff
 801b932:	d020      	beq.n	801b976 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801b934:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b936:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801b93a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b93c:	4367      	muls	r7, r4
 801b93e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b940:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b944:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b948:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b94a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801b94e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b952:	fb04 fa0a 	mul.w	sl, r4, sl
 801b956:	44bc      	add	ip, r7
 801b958:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801b95c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b960:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b964:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b968:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b96c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b970:	ea4c 040a 	orr.w	r4, ip, sl
 801b974:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b976:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801b978:	2cff      	cmp	r4, #255	@ 0xff
 801b97a:	d020      	beq.n	801b9be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801b97c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b97e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801b982:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801b984:	4367      	muls	r7, r4
 801b986:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b988:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b98c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b990:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801b992:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801b996:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b99a:	fb04 fa0a 	mul.w	sl, r4, sl
 801b99e:	44bc      	add	ip, r7
 801b9a0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801b9a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b9a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b9ac:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b9b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b9b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b9b8:	ea4c 040a 	orr.w	r4, ip, sl
 801b9bc:	9411      	str	r4, [sp, #68]	@ 0x44
 801b9be:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b9c0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801b9c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b9c8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801b9cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b9ce:	fb08 f707 	mul.w	r7, r8, r7
 801b9d2:	fb02 770c 	mla	r7, r2, ip, r7
 801b9d6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801b9da:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b9dc:	fb00 770c 	mla	r7, r0, ip, r7
 801b9e0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801b9e4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b9e6:	fb09 770c 	mla	r7, r9, ip, r7
 801b9ea:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801b9ee:	fb08 f80c 	mul.w	r8, r8, ip
 801b9f2:	0a3f      	lsrs	r7, r7, #8
 801b9f4:	fb02 8303 	mla	r3, r2, r3, r8
 801b9f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b9fa:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801b9fe:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801ba02:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ba04:	fb00 330a 	mla	r3, r0, sl, r3
 801ba08:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801ba0c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ba0e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ba12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ba14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ba18:	434b      	muls	r3, r1
 801ba1a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ba1e:	1c59      	adds	r1, r3, #1
 801ba20:	ea47 070c 	orr.w	r7, r7, ip
 801ba24:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ba28:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ba2c:	b2fa      	uxtb	r2, r7
 801ba2e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ba32:	fb12 f200 	smulbb	r2, r2, r0
 801ba36:	b2c9      	uxtb	r1, r1
 801ba38:	fb03 2301 	mla	r3, r3, r1, r2
 801ba3c:	b29b      	uxth	r3, r3
 801ba3e:	1c5a      	adds	r2, r3, #1
 801ba40:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ba44:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801ba48:	fb12 f201 	smulbb	r2, r2, r1
 801ba4c:	121b      	asrs	r3, r3, #8
 801ba4e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801ba52:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801ba56:	0c3f      	lsrs	r7, r7, #16
 801ba58:	fb03 2300 	mla	r3, r3, r0, r2
 801ba5c:	b29b      	uxth	r3, r3
 801ba5e:	1c5a      	adds	r2, r3, #1
 801ba60:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ba64:	121b      	asrs	r3, r3, #8
 801ba66:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ba6a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801ba6e:	fb13 f101 	smulbb	r1, r3, r1
 801ba72:	fb07 1700 	mla	r7, r7, r0, r1
 801ba76:	b2bf      	uxth	r7, r7
 801ba78:	1c7b      	adds	r3, r7, #1
 801ba7a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801ba7e:	123f      	asrs	r7, r7, #8
 801ba80:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801ba84:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801ba86:	f10e 0e03 	add.w	lr, lr, #3
 801ba8a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801ba8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ba90:	441a      	add	r2, r3
 801ba92:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ba94:	9229      	str	r2, [sp, #164]	@ 0xa4
 801ba96:	441d      	add	r5, r3
 801ba98:	e645      	b.n	801b726 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801ba9a:	2800      	cmp	r0, #0
 801ba9c:	f43f aee6 	beq.w	801b86c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801baa0:	5c79      	ldrb	r1, [r7, r1]
 801baa2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801baa6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801baa8:	0e09      	lsrs	r1, r1, #24
 801baaa:	9114      	str	r1, [sp, #80]	@ 0x50
 801baac:	e6de      	b.n	801b86c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801baae:	b01f      	add	sp, #124	@ 0x7c
 801bab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bab4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801bab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bab8:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801babc:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801bac0:	2d00      	cmp	r5, #0
 801bac2:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801bac6:	fb05 700e 	mla	r0, r5, lr, r7
 801baca:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801bace:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801bad2:	eb02 0800 	add.w	r8, r2, r0
 801bad6:	f2c0 8105 	blt.w	801bce4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801bada:	45a9      	cmp	r9, r5
 801badc:	f340 8102 	ble.w	801bce4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801bae0:	2f00      	cmp	r7, #0
 801bae2:	f2c0 80fd 	blt.w	801bce0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801bae6:	45be      	cmp	lr, r7
 801bae8:	f340 80fa 	ble.w	801bce0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801baec:	5c12      	ldrb	r2, [r2, r0]
 801baee:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801baf2:	1c7a      	adds	r2, r7, #1
 801baf4:	f100 80f9 	bmi.w	801bcea <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801baf8:	4596      	cmp	lr, r2
 801bafa:	f340 80f6 	ble.w	801bcea <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801bafe:	2c00      	cmp	r4, #0
 801bb00:	f000 80f5 	beq.w	801bcee <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801bb04:	f898 2001 	ldrb.w	r2, [r8, #1]
 801bb08:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801bb0c:	3501      	adds	r5, #1
 801bb0e:	f100 80f2 	bmi.w	801bcf6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801bb12:	45a9      	cmp	r9, r5
 801bb14:	f340 80ef 	ble.w	801bcf6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801bb18:	f1bc 0f00 	cmp.w	ip, #0
 801bb1c:	f000 80ee 	beq.w	801bcfc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801bb20:	2f00      	cmp	r7, #0
 801bb22:	f2c0 80e6 	blt.w	801bcf2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801bb26:	45be      	cmp	lr, r7
 801bb28:	f340 80e3 	ble.w	801bcf2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801bb2c:	f818 200e 	ldrb.w	r2, [r8, lr]
 801bb30:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801bb34:	3701      	adds	r7, #1
 801bb36:	f100 80e4 	bmi.w	801bd02 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801bb3a:	45be      	cmp	lr, r7
 801bb3c:	f340 80e1 	ble.w	801bd02 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801bb40:	2c00      	cmp	r4, #0
 801bb42:	f000 80e0 	beq.w	801bd06 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801bb46:	44c6      	add	lr, r8
 801bb48:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801bb4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801bb50:	b2a3      	uxth	r3, r4
 801bb52:	fa1f fc8c 	uxth.w	ip, ip
 801bb56:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801bb5a:	fb0c fe03 	mul.w	lr, ip, r3
 801bb5e:	011b      	lsls	r3, r3, #4
 801bb60:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801bb64:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801bb68:	eba3 070e 	sub.w	r7, r3, lr
 801bb6c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801bb70:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801bb74:	fa1f f48c 	uxth.w	r4, ip
 801bb78:	b2bf      	uxth	r7, r7
 801bb7a:	1b1b      	subs	r3, r3, r4
 801bb7c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801bb80:	fb07 fc0a 	mul.w	ip, r7, sl
 801bb84:	b29b      	uxth	r3, r3
 801bb86:	fb03 cc0b 	mla	ip, r3, fp, ip
 801bb8a:	9300      	str	r3, [sp, #0]
 801bb8c:	fb04 cc09 	mla	ip, r4, r9, ip
 801bb90:	fb0e cc08 	mla	ip, lr, r8, ip
 801bb94:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801bb98:	9301      	str	r3, [sp, #4]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	f000 809d 	beq.w	801bcda <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801bba0:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801bba4:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801bba8:	fb0b fc0c 	mul.w	ip, fp, ip
 801bbac:	fb0b f606 	mul.w	r6, fp, r6
 801bbb0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801bbb4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801bbb8:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801bbbc:	44dc      	add	ip, fp
 801bbbe:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801bbc2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801bbc6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bbca:	fb0a fb0b 	mul.w	fp, sl, fp
 801bbce:	fb0a fa00 	mul.w	sl, sl, r0
 801bbd2:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801bbd6:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801bbda:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801bbde:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801bbe2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801bbe6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801bbea:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801bbee:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bbf2:	0a36      	lsrs	r6, r6, #8
 801bbf4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bbf8:	44dc      	add	ip, fp
 801bbfa:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801bbfe:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801bc02:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801bc06:	fb09 fb0b 	mul.w	fp, r9, fp
 801bc0a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bc0e:	fb09 f905 	mul.w	r9, r9, r5
 801bc12:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801bc16:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bc1a:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801bc1e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801bc22:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801bc26:	fb0c fc07 	mul.w	ip, ip, r7
 801bc2a:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801bc2e:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801bc32:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801bc36:	4458      	add	r0, fp
 801bc38:	fb08 f505 	mul.w	r5, r8, r5
 801bc3c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801bc40:	fb08 f802 	mul.w	r8, r8, r2
 801bc44:	0a00      	lsrs	r0, r0, #8
 801bc46:	0a2a      	lsrs	r2, r5, #8
 801bc48:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801bc4c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801bc50:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801bc54:	4415      	add	r5, r2
 801bc56:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801bc5a:	0a2d      	lsrs	r5, r5, #8
 801bc5c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801bc60:	9a00      	ldr	r2, [sp, #0]
 801bc62:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801bc66:	fb03 cc02 	mla	ip, r3, r2, ip
 801bc6a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801bc6e:	9b01      	ldr	r3, [sp, #4]
 801bc70:	fb05 c50e 	mla	r5, r5, lr, ip
 801bc74:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801bc78:	43db      	mvns	r3, r3
 801bc7a:	fb00 5004 	mla	r0, r0, r4, r5
 801bc7e:	b2db      	uxtb	r3, r3
 801bc80:	0a00      	lsrs	r0, r0, #8
 801bc82:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801bc86:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801bc8a:	4378      	muls	r0, r7
 801bc8c:	fb02 0006 	mla	r0, r2, r6, r0
 801bc90:	780a      	ldrb	r2, [r1, #0]
 801bc92:	fb0e 0e08 	mla	lr, lr, r8, r0
 801bc96:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801bc9a:	fb04 e000 	mla	r0, r4, r0, lr
 801bc9e:	fb02 f403 	mul.w	r4, r2, r3
 801bca2:	0a00      	lsrs	r0, r0, #8
 801bca4:	1c62      	adds	r2, r4, #1
 801bca6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801bcaa:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801bcae:	4328      	orrs	r0, r5
 801bcb0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801bcb4:	700a      	strb	r2, [r1, #0]
 801bcb6:	784a      	ldrb	r2, [r1, #1]
 801bcb8:	435a      	muls	r2, r3
 801bcba:	1c54      	adds	r4, r2, #1
 801bcbc:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801bcc0:	0a02      	lsrs	r2, r0, #8
 801bcc2:	0c00      	lsrs	r0, r0, #16
 801bcc4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801bcc8:	704a      	strb	r2, [r1, #1]
 801bcca:	788a      	ldrb	r2, [r1, #2]
 801bccc:	4353      	muls	r3, r2
 801bcce:	1c5a      	adds	r2, r3, #1
 801bcd0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bcd4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801bcd8:	7088      	strb	r0, [r1, #2]
 801bcda:	b003      	add	sp, #12
 801bcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bce0:	2600      	movs	r6, #0
 801bce2:	e706      	b.n	801baf2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801bce4:	2000      	movs	r0, #0
 801bce6:	4606      	mov	r6, r0
 801bce8:	e710      	b.n	801bb0c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801bcea:	2000      	movs	r0, #0
 801bcec:	e70e      	b.n	801bb0c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801bcee:	4620      	mov	r0, r4
 801bcf0:	e70c      	b.n	801bb0c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801bcf2:	2500      	movs	r5, #0
 801bcf4:	e71e      	b.n	801bb34 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801bcf6:	2200      	movs	r2, #0
 801bcf8:	4615      	mov	r5, r2
 801bcfa:	e729      	b.n	801bb50 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801bcfc:	4662      	mov	r2, ip
 801bcfe:	4665      	mov	r5, ip
 801bd00:	e726      	b.n	801bb50 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801bd02:	2200      	movs	r2, #0
 801bd04:	e724      	b.n	801bb50 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801bd06:	4622      	mov	r2, r4
 801bd08:	e722      	b.n	801bb50 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801bd0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bd0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd0e:	b09b      	sub	sp, #108	@ 0x6c
 801bd10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bd14:	9218      	str	r2, [sp, #96]	@ 0x60
 801bd16:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801bd18:	9019      	str	r0, [sp, #100]	@ 0x64
 801bd1a:	9116      	str	r1, [sp, #88]	@ 0x58
 801bd1c:	6850      	ldr	r0, [r2, #4]
 801bd1e:	9307      	str	r3, [sp, #28]
 801bd20:	6812      	ldr	r2, [r2, #0]
 801bd22:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801bd24:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801bd28:	fb00 1303 	mla	r3, r0, r3, r1
 801bd2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bd30:	18d3      	adds	r3, r2, r3
 801bd32:	930a      	str	r3, [sp, #40]	@ 0x28
 801bd34:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bd36:	681b      	ldr	r3, [r3, #0]
 801bd38:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bd3a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bd3c:	685e      	ldr	r6, [r3, #4]
 801bd3e:	3604      	adds	r6, #4
 801bd40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	dc03      	bgt.n	801bd4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801bd46:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	f340 834f 	ble.w	801c3ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801bd4e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bd50:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bd54:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bd58:	1e48      	subs	r0, r1, #1
 801bd5a:	1e57      	subs	r7, r2, #1
 801bd5c:	9b07      	ldr	r3, [sp, #28]
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	f340 8178 	ble.w	801c054 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801bd64:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801bd66:	142b      	asrs	r3, r5, #16
 801bd68:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801bd6c:	d406      	bmi.n	801bd7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bd6e:	4584      	cmp	ip, r0
 801bd70:	da04      	bge.n	801bd7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	db02      	blt.n	801bd7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bd76:	42bb      	cmp	r3, r7
 801bd78:	f2c0 816d 	blt.w	801c056 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801bd7c:	f11c 0c01 	adds.w	ip, ip, #1
 801bd80:	f100 815b 	bmi.w	801c03a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801bd84:	4561      	cmp	r1, ip
 801bd86:	f2c0 8158 	blt.w	801c03a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801bd8a:	3301      	adds	r3, #1
 801bd8c:	f100 8155 	bmi.w	801c03a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801bd90:	429a      	cmp	r2, r3
 801bd92:	f2c0 8152 	blt.w	801c03a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801bd96:	9b07      	ldr	r3, [sp, #28]
 801bd98:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801bd9a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801bd9c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	f340 8178 	ble.w	801c094 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801bda4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801bda6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801bdaa:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801bdae:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801bdb2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bdb4:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801bdb8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801bdba:	141b      	asrs	r3, r3, #16
 801bdbc:	f100 81ba 	bmi.w	801c134 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801bdc0:	f101 38ff 	add.w	r8, r1, #4294967295
 801bdc4:	4543      	cmp	r3, r8
 801bdc6:	f280 81b5 	bge.w	801c134 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801bdca:	f1bc 0f00 	cmp.w	ip, #0
 801bdce:	f2c0 81b1 	blt.w	801c134 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801bdd2:	f10e 38ff 	add.w	r8, lr, #4294967295
 801bdd6:	45c4      	cmp	ip, r8
 801bdd8:	f280 81ac 	bge.w	801c134 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801bddc:	b209      	sxth	r1, r1
 801bdde:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801bde0:	fb0c 3301 	mla	r3, ip, r1, r3
 801bde4:	eb04 0803 	add.w	r8, r4, r3
 801bde8:	5ce3      	ldrb	r3, [r4, r3]
 801bdea:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801bdee:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801bdf2:	2a00      	cmp	r2, #0
 801bdf4:	f000 8193 	beq.w	801c11e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801bdf8:	f898 c001 	ldrb.w	ip, [r8, #1]
 801bdfc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801be00:	940b      	str	r4, [sp, #44]	@ 0x2c
 801be02:	0e24      	lsrs	r4, r4, #24
 801be04:	9412      	str	r4, [sp, #72]	@ 0x48
 801be06:	b178      	cbz	r0, 801be28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801be08:	eb08 0c01 	add.w	ip, r8, r1
 801be0c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801be10:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801be14:	9108      	str	r1, [sp, #32]
 801be16:	0e09      	lsrs	r1, r1, #24
 801be18:	9110      	str	r1, [sp, #64]	@ 0x40
 801be1a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801be1e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801be22:	910c      	str	r1, [sp, #48]	@ 0x30
 801be24:	0e09      	lsrs	r1, r1, #24
 801be26:	9113      	str	r1, [sp, #76]	@ 0x4c
 801be28:	b292      	uxth	r2, r2
 801be2a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801be2c:	b280      	uxth	r0, r0
 801be2e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801be30:	fb02 f900 	mul.w	r9, r2, r0
 801be34:	0112      	lsls	r2, r2, #4
 801be36:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801be3a:	eba2 0809 	sub.w	r8, r2, r9
 801be3e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801be42:	b280      	uxth	r0, r0
 801be44:	fa1f f888 	uxth.w	r8, r8
 801be48:	1a12      	subs	r2, r2, r0
 801be4a:	fb08 f101 	mul.w	r1, r8, r1
 801be4e:	b292      	uxth	r2, r2
 801be50:	fb02 110e 	mla	r1, r2, lr, r1
 801be54:	fb00 1104 	mla	r1, r0, r4, r1
 801be58:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801be5a:	fb09 1104 	mla	r1, r9, r4, r1
 801be5e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801be62:	2900      	cmp	r1, #0
 801be64:	f000 80de 	beq.w	801c024 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801be68:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801be6c:	d01b      	beq.n	801bea6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801be6e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801be72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801be76:	fb0e fa0a 	mul.w	sl, lr, sl
 801be7a:	fb0e fe03 	mul.w	lr, lr, r3
 801be7e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801be82:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801be86:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801be8a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801be8e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801be92:	4453      	add	r3, sl
 801be94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801be98:	0a1b      	lsrs	r3, r3, #8
 801be9a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801be9e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801bea2:	ea43 030c 	orr.w	r3, r3, ip
 801bea6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801bea8:	2cff      	cmp	r4, #255	@ 0xff
 801beaa:	d021      	beq.n	801bef0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801beac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801beae:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801beb2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801beb4:	fb04 fb0b 	mul.w	fp, r4, fp
 801beb8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801beba:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bebe:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801bec0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bec4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801bec8:	fb04 fa0a 	mul.w	sl, r4, sl
 801becc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801bed0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801bed4:	44de      	add	lr, fp
 801bed6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801beda:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bede:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bee2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801bee6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801beea:	ea4e 040a 	orr.w	r4, lr, sl
 801beee:	940b      	str	r4, [sp, #44]	@ 0x2c
 801bef0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801bef2:	2cff      	cmp	r4, #255	@ 0xff
 801bef4:	d021      	beq.n	801bf3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801bef6:	9c08      	ldr	r4, [sp, #32]
 801bef8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801befc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801befe:	fb04 fb0b 	mul.w	fp, r4, fp
 801bf02:	9c08      	ldr	r4, [sp, #32]
 801bf04:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bf08:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801bf0a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bf0e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801bf12:	fb04 fa0a 	mul.w	sl, r4, sl
 801bf16:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801bf1a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801bf1e:	44de      	add	lr, fp
 801bf20:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bf24:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bf28:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bf2c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801bf30:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801bf34:	ea4e 040a 	orr.w	r4, lr, sl
 801bf38:	9408      	str	r4, [sp, #32]
 801bf3a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bf3c:	2cff      	cmp	r4, #255	@ 0xff
 801bf3e:	d021      	beq.n	801bf84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801bf40:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801bf42:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801bf46:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bf48:	fb04 fb0b 	mul.w	fp, r4, fp
 801bf4c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801bf4e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bf52:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bf54:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bf58:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801bf5c:	fb04 fa0a 	mul.w	sl, r4, sl
 801bf60:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801bf64:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801bf68:	44de      	add	lr, fp
 801bf6a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bf6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bf72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bf76:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801bf7a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801bf7e:	ea4e 040a 	orr.w	r4, lr, sl
 801bf82:	940c      	str	r4, [sp, #48]	@ 0x30
 801bf84:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bf86:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801bf8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801bf8e:	43c9      	mvns	r1, r1
 801bf90:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801bf94:	9c08      	ldr	r4, [sp, #32]
 801bf96:	b2c9      	uxtb	r1, r1
 801bf98:	fb08 fc0c 	mul.w	ip, r8, ip
 801bf9c:	fb02 cc0e 	mla	ip, r2, lr, ip
 801bfa0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801bfa4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801bfa6:	fb00 cc0e 	mla	ip, r0, lr, ip
 801bfaa:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801bfae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bfb0:	fb09 cc0e 	mla	ip, r9, lr, ip
 801bfb4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801bfb8:	fb08 f80e 	mul.w	r8, r8, lr
 801bfbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bfc0:	fb02 8303 	mla	r3, r2, r3, r8
 801bfc4:	9a08      	ldr	r2, [sp, #32]
 801bfc6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bfca:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801bfce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bfd0:	fb00 330a 	mla	r3, r0, sl, r3
 801bfd4:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801bfd8:	fb09 3900 	mla	r9, r9, r0, r3
 801bfdc:	783b      	ldrb	r3, [r7, #0]
 801bfde:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801bfe2:	fb03 f201 	mul.w	r2, r3, r1
 801bfe6:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801bfea:	1c53      	adds	r3, r2, #1
 801bfec:	ea4c 0c09 	orr.w	ip, ip, r9
 801bff0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801bff4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801bff8:	703b      	strb	r3, [r7, #0]
 801bffa:	787b      	ldrb	r3, [r7, #1]
 801bffc:	434b      	muls	r3, r1
 801bffe:	1c5a      	adds	r2, r3, #1
 801c000:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c004:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801c008:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c00c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c010:	707b      	strb	r3, [r7, #1]
 801c012:	78bb      	ldrb	r3, [r7, #2]
 801c014:	4359      	muls	r1, r3
 801c016:	1c4b      	adds	r3, r1, #1
 801c018:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801c01c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801c020:	f887 c002 	strb.w	ip, [r7, #2]
 801c024:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c026:	3703      	adds	r7, #3
 801c028:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801c02a:	441a      	add	r2, r3
 801c02c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c02e:	441d      	add	r5, r3
 801c030:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c032:	9225      	str	r2, [sp, #148]	@ 0x94
 801c034:	3b01      	subs	r3, #1
 801c036:	9317      	str	r3, [sp, #92]	@ 0x5c
 801c038:	e6b0      	b.n	801bd9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c03a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c03c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801c03e:	441c      	add	r4, r3
 801c040:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c042:	441d      	add	r5, r3
 801c044:	9b07      	ldr	r3, [sp, #28]
 801c046:	9425      	str	r4, [sp, #148]	@ 0x94
 801c048:	3b01      	subs	r3, #1
 801c04a:	9307      	str	r3, [sp, #28]
 801c04c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c04e:	3303      	adds	r3, #3
 801c050:	930a      	str	r3, [sp, #40]	@ 0x28
 801c052:	e683      	b.n	801bd5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c054:	d026      	beq.n	801c0a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801c056:	9b07      	ldr	r3, [sp, #28]
 801c058:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801c05a:	3b01      	subs	r3, #1
 801c05c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801c05e:	fb00 4003 	mla	r0, r0, r3, r4
 801c062:	1400      	asrs	r0, r0, #16
 801c064:	f53f ae97 	bmi.w	801bd96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c068:	3901      	subs	r1, #1
 801c06a:	4288      	cmp	r0, r1
 801c06c:	f6bf ae93 	bge.w	801bd96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c070:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801c072:	fb01 5303 	mla	r3, r1, r3, r5
 801c076:	141b      	asrs	r3, r3, #16
 801c078:	f53f ae8d 	bmi.w	801bd96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c07c:	3a01      	subs	r2, #1
 801c07e:	4293      	cmp	r3, r2
 801c080:	f6bf ae89 	bge.w	801bd96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c086:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801c08a:	f103 0e03 	add.w	lr, r3, #3
 801c08e:	f1bb 0f00 	cmp.w	fp, #0
 801c092:	dc6d      	bgt.n	801c170 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801c094:	9b07      	ldr	r3, [sp, #28]
 801c096:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c09a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c09c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c0a0:	4423      	add	r3, r4
 801c0a2:	930a      	str	r3, [sp, #40]	@ 0x28
 801c0a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	f340 81a0 	ble.w	801c3ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801c0ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c0b0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c0b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c0b6:	eeb0 6a62 	vmov.f32	s12, s5
 801c0ba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c0be:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c0c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c0c6:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 801c0ca:	eeb0 6a43 	vmov.f32	s12, s6
 801c0ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c0d2:	ee16 5a10 	vmov	r5, s12
 801c0d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c0da:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c0de:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c0e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c0e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c0ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c0ee:	ee12 2a90 	vmov	r2, s5
 801c0f2:	eef0 2a47 	vmov.f32	s5, s14
 801c0f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801c0fa:	ee13 2a10 	vmov	r2, s6
 801c0fe:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c100:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c102:	eeb0 3a67 	vmov.f32	s6, s15
 801c106:	fb92 f3f3 	sdiv	r3, r2, r3
 801c10a:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c10c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c10e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c110:	3b01      	subs	r3, #1
 801c112:	9316      	str	r3, [sp, #88]	@ 0x58
 801c114:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c116:	bf08      	it	eq
 801c118:	4613      	moveq	r3, r2
 801c11a:	9307      	str	r3, [sp, #28]
 801c11c:	e610      	b.n	801bd40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c11e:	2800      	cmp	r0, #0
 801c120:	f43f ae82 	beq.w	801be28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801c124:	f818 1001 	ldrb.w	r1, [r8, r1]
 801c128:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c12c:	9108      	str	r1, [sp, #32]
 801c12e:	0e09      	lsrs	r1, r1, #24
 801c130:	9110      	str	r1, [sp, #64]	@ 0x40
 801c132:	e679      	b.n	801be28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801c134:	f113 0801 	adds.w	r8, r3, #1
 801c138:	f53f af74 	bmi.w	801c024 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c13c:	4541      	cmp	r1, r8
 801c13e:	f6ff af71 	blt.w	801c024 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c142:	f11c 0801 	adds.w	r8, ip, #1
 801c146:	f53f af6d 	bmi.w	801c024 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c14a:	45c6      	cmp	lr, r8
 801c14c:	f6ff af6a 	blt.w	801c024 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c150:	b209      	sxth	r1, r1
 801c152:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801c156:	fa0f f38e 	sxth.w	r3, lr
 801c15a:	9100      	str	r1, [sp, #0]
 801c15c:	4639      	mov	r1, r7
 801c15e:	9301      	str	r3, [sp, #4]
 801c160:	4633      	mov	r3, r6
 801c162:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801c166:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c168:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c16a:	f7ff fca3 	bl	801bab4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801c16e:	e759      	b.n	801c024 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c170:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801c172:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801c176:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801c178:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c17c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c17e:	1427      	asrs	r7, r4, #16
 801c180:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801c182:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c186:	142b      	asrs	r3, r5, #16
 801c188:	fb01 7303 	mla	r3, r1, r3, r7
 801c18c:	18e7      	adds	r7, r4, r3
 801c18e:	5ce3      	ldrb	r3, [r4, r3]
 801c190:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c194:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801c198:	2a00      	cmp	r2, #0
 801c19a:	f000 811d 	beq.w	801c3d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801c19e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801c1a2:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801c1a6:	940d      	str	r4, [sp, #52]	@ 0x34
 801c1a8:	0e24      	lsrs	r4, r4, #24
 801c1aa:	9414      	str	r4, [sp, #80]	@ 0x50
 801c1ac:	b170      	cbz	r0, 801c1cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801c1ae:	eb07 0801 	add.w	r8, r7, r1
 801c1b2:	5c79      	ldrb	r1, [r7, r1]
 801c1b4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c1b8:	9109      	str	r1, [sp, #36]	@ 0x24
 801c1ba:	0e09      	lsrs	r1, r1, #24
 801c1bc:	9111      	str	r1, [sp, #68]	@ 0x44
 801c1be:	f898 1001 	ldrb.w	r1, [r8, #1]
 801c1c2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c1c6:	910e      	str	r1, [sp, #56]	@ 0x38
 801c1c8:	0e09      	lsrs	r1, r1, #24
 801c1ca:	9115      	str	r1, [sp, #84]	@ 0x54
 801c1cc:	b292      	uxth	r2, r2
 801c1ce:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c1d0:	b280      	uxth	r0, r0
 801c1d2:	fb02 f900 	mul.w	r9, r2, r0
 801c1d6:	0112      	lsls	r2, r2, #4
 801c1d8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c1dc:	eba2 0809 	sub.w	r8, r2, r9
 801c1e0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801c1e4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c1e6:	b280      	uxth	r0, r0
 801c1e8:	fa1f f888 	uxth.w	r8, r8
 801c1ec:	1a09      	subs	r1, r1, r0
 801c1ee:	fb08 f202 	mul.w	r2, r8, r2
 801c1f2:	b289      	uxth	r1, r1
 801c1f4:	fb01 220c 	mla	r2, r1, ip, r2
 801c1f8:	fb00 2204 	mla	r2, r0, r4, r2
 801c1fc:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c1fe:	fb09 2204 	mla	r2, r9, r4, r2
 801c202:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c206:	2a00      	cmp	r2, #0
 801c208:	f000 80db 	beq.w	801c3c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801c20c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801c210:	d019      	beq.n	801c246 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801c212:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801c216:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c21a:	fb0c fa0a 	mul.w	sl, ip, sl
 801c21e:	fb0c fc03 	mul.w	ip, ip, r3
 801c222:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c226:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801c22a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801c22e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c232:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801c236:	4453      	add	r3, sl
 801c238:	0a3f      	lsrs	r7, r7, #8
 801c23a:	0a1b      	lsrs	r3, r3, #8
 801c23c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801c240:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c244:	433b      	orrs	r3, r7
 801c246:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c248:	2cff      	cmp	r4, #255	@ 0xff
 801c24a:	d020      	beq.n	801c28e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801c24c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c24e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c252:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c254:	4367      	muls	r7, r4
 801c256:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c258:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c25c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c260:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c262:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c266:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c26a:	fb04 fa0a 	mul.w	sl, r4, sl
 801c26e:	44bc      	add	ip, r7
 801c270:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c274:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c278:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c27c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c280:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c284:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c288:	ea4c 040a 	orr.w	r4, ip, sl
 801c28c:	940d      	str	r4, [sp, #52]	@ 0x34
 801c28e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c290:	2cff      	cmp	r4, #255	@ 0xff
 801c292:	d020      	beq.n	801c2d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801c294:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c296:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c29a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c29c:	4367      	muls	r7, r4
 801c29e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c2a0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c2a4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c2a8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c2aa:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c2ae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c2b2:	fb04 fa0a 	mul.w	sl, r4, sl
 801c2b6:	44bc      	add	ip, r7
 801c2b8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c2bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c2c0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c2c4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c2c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c2cc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c2d0:	ea4c 040a 	orr.w	r4, ip, sl
 801c2d4:	9409      	str	r4, [sp, #36]	@ 0x24
 801c2d6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c2d8:	2cff      	cmp	r4, #255	@ 0xff
 801c2da:	d020      	beq.n	801c31e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801c2dc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c2de:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c2e2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c2e4:	4367      	muls	r7, r4
 801c2e6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c2e8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c2ec:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c2f0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c2f2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c2f6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c2fa:	fb04 fa0a 	mul.w	sl, r4, sl
 801c2fe:	44bc      	add	ip, r7
 801c300:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c304:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c308:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c30c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c310:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c314:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c318:	ea4c 040a 	orr.w	r4, ip, sl
 801c31c:	940e      	str	r4, [sp, #56]	@ 0x38
 801c31e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c320:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801c324:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c328:	43d2      	mvns	r2, r2
 801c32a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c32e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c330:	b2d2      	uxtb	r2, r2
 801c332:	fb08 f707 	mul.w	r7, r8, r7
 801c336:	fb01 770c 	mla	r7, r1, ip, r7
 801c33a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801c33e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c340:	fb00 770c 	mla	r7, r0, ip, r7
 801c344:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801c348:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c34a:	fb09 770c 	mla	r7, r9, ip, r7
 801c34e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801c352:	fb08 f80c 	mul.w	r8, r8, ip
 801c356:	0a3f      	lsrs	r7, r7, #8
 801c358:	fb01 8303 	mla	r3, r1, r3, r8
 801c35c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c35e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801c362:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801c366:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c368:	fb00 330a 	mla	r3, r0, sl, r3
 801c36c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801c370:	fb09 3c0c 	mla	ip, r9, ip, r3
 801c374:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801c378:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c37c:	fb03 f102 	mul.w	r1, r3, r2
 801c380:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801c384:	1c4b      	adds	r3, r1, #1
 801c386:	ea47 070c 	orr.w	r7, r7, ip
 801c38a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801c38e:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801c392:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801c396:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801c39a:	4353      	muls	r3, r2
 801c39c:	1c59      	adds	r1, r3, #1
 801c39e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c3a2:	0a3b      	lsrs	r3, r7, #8
 801c3a4:	0c3f      	lsrs	r7, r7, #16
 801c3a6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801c3aa:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801c3ae:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801c3b2:	435a      	muls	r2, r3
 801c3b4:	1c53      	adds	r3, r2, #1
 801c3b6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801c3ba:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801c3be:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801c3c2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c3c4:	f10e 0e03 	add.w	lr, lr, #3
 801c3c8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801c3ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c3ce:	441a      	add	r2, r3
 801c3d0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c3d2:	9225      	str	r2, [sp, #148]	@ 0x94
 801c3d4:	441d      	add	r5, r3
 801c3d6:	e65a      	b.n	801c08e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801c3d8:	2800      	cmp	r0, #0
 801c3da:	f43f aef7 	beq.w	801c1cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801c3de:	5c79      	ldrb	r1, [r7, r1]
 801c3e0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c3e4:	9109      	str	r1, [sp, #36]	@ 0x24
 801c3e6:	0e09      	lsrs	r1, r1, #24
 801c3e8:	9111      	str	r1, [sp, #68]	@ 0x44
 801c3ea:	e6ef      	b.n	801c1cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801c3ec:	b01b      	add	sp, #108	@ 0x6c
 801c3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c3f2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801c3f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3f6:	b08d      	sub	sp, #52	@ 0x34
 801c3f8:	468b      	mov	fp, r1
 801c3fa:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 801c3fe:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 801c402:	fb0c 5703 	mla	r7, ip, r3, r5
 801c406:	f1bc 0f00 	cmp.w	ip, #0
 801c40a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c40c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c410:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 801c414:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 801c418:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 801c41c:	eb02 0607 	add.w	r6, r2, r7
 801c420:	f89b 4000 	ldrb.w	r4, [fp]
 801c424:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801c428:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801c42c:	f2c0 80c1 	blt.w	801c5b2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801c430:	45e6      	cmp	lr, ip
 801c432:	f340 80be 	ble.w	801c5b2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801c436:	2d00      	cmp	r5, #0
 801c438:	f2c0 80b7 	blt.w	801c5aa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801c43c:	42ab      	cmp	r3, r5
 801c43e:	f340 80b4 	ble.w	801c5aa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801c442:	5dd2      	ldrb	r2, [r2, r7]
 801c444:	9205      	str	r2, [sp, #20]
 801c446:	7872      	ldrb	r2, [r6, #1]
 801c448:	9206      	str	r2, [sp, #24]
 801c44a:	78b2      	ldrb	r2, [r6, #2]
 801c44c:	9207      	str	r2, [sp, #28]
 801c44e:	1c6a      	adds	r2, r5, #1
 801c450:	f100 80b6 	bmi.w	801c5c0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801c454:	4293      	cmp	r3, r2
 801c456:	f340 80b3 	ble.w	801c5c0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801c45a:	f1b8 0f00 	cmp.w	r8, #0
 801c45e:	f000 80af 	beq.w	801c5c0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801c462:	78f2      	ldrb	r2, [r6, #3]
 801c464:	9201      	str	r2, [sp, #4]
 801c466:	7932      	ldrb	r2, [r6, #4]
 801c468:	9202      	str	r2, [sp, #8]
 801c46a:	7972      	ldrb	r2, [r6, #5]
 801c46c:	9203      	str	r2, [sp, #12]
 801c46e:	f11c 0c01 	adds.w	ip, ip, #1
 801c472:	f100 80ad 	bmi.w	801c5d0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801c476:	45e6      	cmp	lr, ip
 801c478:	f340 80aa 	ble.w	801c5d0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801c47c:	f1ba 0f00 	cmp.w	sl, #0
 801c480:	f000 80a6 	beq.w	801c5d0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801c484:	2d00      	cmp	r5, #0
 801c486:	f2c0 809f 	blt.w	801c5c8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801c48a:	42ab      	cmp	r3, r5
 801c48c:	f340 809c 	ble.w	801c5c8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801c490:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801c494:	f816 9002 	ldrb.w	r9, [r6, r2]
 801c498:	2203      	movs	r2, #3
 801c49a:	fb03 6c02 	mla	ip, r3, r2, r6
 801c49e:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801c4a2:	f89c e002 	ldrb.w	lr, [ip, #2]
 801c4a6:	9704      	str	r7, [sp, #16]
 801c4a8:	3501      	adds	r5, #1
 801c4aa:	f100 8098 	bmi.w	801c5de <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801c4ae:	42ab      	cmp	r3, r5
 801c4b0:	f340 8095 	ble.w	801c5de <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801c4b4:	f1b8 0f00 	cmp.w	r8, #0
 801c4b8:	f000 8091 	beq.w	801c5de <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801c4bc:	f04f 0c03 	mov.w	ip, #3
 801c4c0:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801c4c4:	5cb5      	ldrb	r5, [r6, r2]
 801c4c6:	fb03 620c 	mla	r2, r3, ip, r6
 801c4ca:	fb03 630c 	mla	r3, r3, ip, r6
 801c4ce:	7912      	ldrb	r2, [r2, #4]
 801c4d0:	795e      	ldrb	r6, [r3, #5]
 801c4d2:	fa1f f388 	uxth.w	r3, r8
 801c4d6:	fa1f fc8a 	uxth.w	ip, sl
 801c4da:	fb03 f70c 	mul.w	r7, r3, ip
 801c4de:	011b      	lsls	r3, r3, #4
 801c4e0:	9708      	str	r7, [sp, #32]
 801c4e2:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801c4e6:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 801c4ea:	1bdb      	subs	r3, r3, r7
 801c4ec:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 801c4f0:	fa1f fc8c 	uxth.w	ip, ip
 801c4f4:	b29b      	uxth	r3, r3
 801c4f6:	9709      	str	r7, [sp, #36]	@ 0x24
 801c4f8:	ebaa 0a0c 	sub.w	sl, sl, ip
 801c4fc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c4fe:	930a      	str	r3, [sp, #40]	@ 0x28
 801c500:	fa1f fa8a 	uxth.w	sl, sl
 801c504:	ea6f 0807 	mvn.w	r8, r7
 801c508:	9f01      	ldr	r7, [sp, #4]
 801c50a:	435f      	muls	r7, r3
 801c50c:	9b05      	ldr	r3, [sp, #20]
 801c50e:	fa5f f888 	uxtb.w	r8, r8
 801c512:	fb0a 7703 	mla	r7, sl, r3, r7
 801c516:	9b08      	ldr	r3, [sp, #32]
 801c518:	fb14 f408 	smulbb	r4, r4, r8
 801c51c:	fb0c 7709 	mla	r7, ip, r9, r7
 801c520:	fb10 f008 	smulbb	r0, r0, r8
 801c524:	fb11 f108 	smulbb	r1, r1, r8
 801c528:	fb03 7705 	mla	r7, r3, r5, r7
 801c52c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c52e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801c532:	fb07 4703 	mla	r7, r7, r3, r4
 801c536:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c538:	b2bf      	uxth	r7, r7
 801c53a:	1c7c      	adds	r4, r7, #1
 801c53c:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801c540:	1224      	asrs	r4, r4, #8
 801c542:	f88b 4000 	strb.w	r4, [fp]
 801c546:	9c02      	ldr	r4, [sp, #8]
 801c548:	435c      	muls	r4, r3
 801c54a:	9b06      	ldr	r3, [sp, #24]
 801c54c:	fb0a 4403 	mla	r4, sl, r3, r4
 801c550:	9b04      	ldr	r3, [sp, #16]
 801c552:	fb0c 4403 	mla	r4, ip, r3, r4
 801c556:	9b08      	ldr	r3, [sp, #32]
 801c558:	fb03 4402 	mla	r4, r3, r2, r4
 801c55c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c55e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c560:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c564:	fb04 0403 	mla	r4, r4, r3, r0
 801c568:	9b03      	ldr	r3, [sp, #12]
 801c56a:	435a      	muls	r2, r3
 801c56c:	b2a4      	uxth	r4, r4
 801c56e:	4613      	mov	r3, r2
 801c570:	9a07      	ldr	r2, [sp, #28]
 801c572:	1c60      	adds	r0, r4, #1
 801c574:	fb0a 3a02 	mla	sl, sl, r2, r3
 801c578:	9b08      	ldr	r3, [sp, #32]
 801c57a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801c57e:	fb0c ac0e 	mla	ip, ip, lr, sl
 801c582:	1224      	asrs	r4, r4, #8
 801c584:	fb03 c606 	mla	r6, r3, r6, ip
 801c588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c58a:	f88b 4001 	strb.w	r4, [fp, #1]
 801c58e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801c592:	fb06 1103 	mla	r1, r6, r3, r1
 801c596:	b289      	uxth	r1, r1
 801c598:	1c4e      	adds	r6, r1, #1
 801c59a:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801c59e:	1209      	asrs	r1, r1, #8
 801c5a0:	f88b 1002 	strb.w	r1, [fp, #2]
 801c5a4:	b00d      	add	sp, #52	@ 0x34
 801c5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c5ae:	9405      	str	r4, [sp, #20]
 801c5b0:	e74d      	b.n	801c44e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801c5b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c5b6:	9401      	str	r4, [sp, #4]
 801c5b8:	9405      	str	r4, [sp, #20]
 801c5ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c5be:	e756      	b.n	801c46e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801c5c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c5c4:	9401      	str	r4, [sp, #4]
 801c5c6:	e752      	b.n	801c46e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801c5c8:	468e      	mov	lr, r1
 801c5ca:	9004      	str	r0, [sp, #16]
 801c5cc:	46a1      	mov	r9, r4
 801c5ce:	e76b      	b.n	801c4a8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801c5d0:	460e      	mov	r6, r1
 801c5d2:	4602      	mov	r2, r0
 801c5d4:	4625      	mov	r5, r4
 801c5d6:	468e      	mov	lr, r1
 801c5d8:	9004      	str	r0, [sp, #16]
 801c5da:	46a1      	mov	r9, r4
 801c5dc:	e779      	b.n	801c4d2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801c5de:	460e      	mov	r6, r1
 801c5e0:	4602      	mov	r2, r0
 801c5e2:	4625      	mov	r5, r4
 801c5e4:	e775      	b.n	801c4d2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801c5e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c5e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5ea:	b09f      	sub	sp, #124	@ 0x7c
 801c5ec:	920e      	str	r2, [sp, #56]	@ 0x38
 801c5ee:	9307      	str	r3, [sp, #28]
 801c5f0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801c5f2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801c5f6:	901d      	str	r0, [sp, #116]	@ 0x74
 801c5f8:	930c      	str	r3, [sp, #48]	@ 0x30
 801c5fa:	6850      	ldr	r0, [r2, #4]
 801c5fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c5fe:	6812      	ldr	r2, [r2, #0]
 801c600:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801c604:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 801c608:	fb00 1303 	mla	r3, r0, r3, r1
 801c60c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c610:	18d3      	adds	r3, r2, r3
 801c612:	9308      	str	r3, [sp, #32]
 801c614:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c616:	681b      	ldr	r3, [r3, #0]
 801c618:	930a      	str	r3, [sp, #40]	@ 0x28
 801c61a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c61c:	43db      	mvns	r3, r3
 801c61e:	b2db      	uxtb	r3, r3
 801c620:	9309      	str	r3, [sp, #36]	@ 0x24
 801c622:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c624:	2b00      	cmp	r3, #0
 801c626:	dc03      	bgt.n	801c630 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c628:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	f340 81f5 	ble.w	801ca1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801c630:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c632:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c636:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c63a:	1e48      	subs	r0, r1, #1
 801c63c:	1e54      	subs	r4, r2, #1
 801c63e:	9b07      	ldr	r3, [sp, #28]
 801c640:	2b00      	cmp	r3, #0
 801c642:	f340 80d5 	ble.w	801c7f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801c646:	ea5f 452a 	movs.w	r5, sl, asr #16
 801c64a:	ea4f 4328 	mov.w	r3, r8, asr #16
 801c64e:	d406      	bmi.n	801c65e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c650:	4285      	cmp	r5, r0
 801c652:	da04      	bge.n	801c65e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c654:	2b00      	cmp	r3, #0
 801c656:	db02      	blt.n	801c65e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c658:	42a3      	cmp	r3, r4
 801c65a:	f2c0 80ca 	blt.w	801c7f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801c65e:	3501      	adds	r5, #1
 801c660:	f100 80bb 	bmi.w	801c7da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c664:	42a9      	cmp	r1, r5
 801c666:	f2c0 80b8 	blt.w	801c7da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c66a:	3301      	adds	r3, #1
 801c66c:	f100 80b5 	bmi.w	801c7da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c670:	429a      	cmp	r2, r3
 801c672:	f2c0 80b2 	blt.w	801c7da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c676:	9b07      	ldr	r3, [sp, #28]
 801c678:	9d08      	ldr	r5, [sp, #32]
 801c67a:	930d      	str	r3, [sp, #52]	@ 0x34
 801c67c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c67e:	2b00      	cmp	r3, #0
 801c680:	f340 80d6 	ble.w	801c830 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801c684:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801c686:	ea4f 4428 	mov.w	r4, r8, asr #16
 801c68a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c68c:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801c690:	68c6      	ldr	r6, [r0, #12]
 801c692:	ea5f 402a 	movs.w	r0, sl, asr #16
 801c696:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801c69a:	689b      	ldr	r3, [r3, #8]
 801c69c:	f100 810f 	bmi.w	801c8be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c6a0:	1e5f      	subs	r7, r3, #1
 801c6a2:	42b8      	cmp	r0, r7
 801c6a4:	f280 810b 	bge.w	801c8be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c6a8:	2c00      	cmp	r4, #0
 801c6aa:	f2c0 8108 	blt.w	801c8be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c6ae:	1e77      	subs	r7, r6, #1
 801c6b0:	42bc      	cmp	r4, r7
 801c6b2:	f280 8104 	bge.w	801c8be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c6b6:	b21b      	sxth	r3, r3
 801c6b8:	fb04 0003 	mla	r0, r4, r3, r0
 801c6bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c6be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c6c2:	1826      	adds	r6, r4, r0
 801c6c4:	5c24      	ldrb	r4, [r4, r0]
 801c6c6:	78b7      	ldrb	r7, [r6, #2]
 801c6c8:	7870      	ldrb	r0, [r6, #1]
 801c6ca:	970f      	str	r7, [sp, #60]	@ 0x3c
 801c6cc:	7977      	ldrb	r7, [r6, #5]
 801c6ce:	f896 e003 	ldrb.w	lr, [r6, #3]
 801c6d2:	f896 c004 	ldrb.w	ip, [r6, #4]
 801c6d6:	9710      	str	r7, [sp, #64]	@ 0x40
 801c6d8:	b1c9      	cbz	r1, 801c70e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c6da:	f04f 0b03 	mov.w	fp, #3
 801c6de:	f06f 0904 	mvn.w	r9, #4
 801c6e2:	3605      	adds	r6, #5
 801c6e4:	fb13 930b 	smlabb	r3, r3, fp, r9
 801c6e8:	eb06 0b03 	add.w	fp, r6, r3
 801c6ec:	5cf3      	ldrb	r3, [r6, r3]
 801c6ee:	9311      	str	r3, [sp, #68]	@ 0x44
 801c6f0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801c6f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c6f6:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801c6fa:	9315      	str	r3, [sp, #84]	@ 0x54
 801c6fc:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801c700:	9312      	str	r3, [sp, #72]	@ 0x48
 801c702:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801c706:	9314      	str	r3, [sp, #80]	@ 0x50
 801c708:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801c70c:	9316      	str	r3, [sp, #88]	@ 0x58
 801c70e:	b292      	uxth	r2, r2
 801c710:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801c712:	b289      	uxth	r1, r1
 801c714:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801c718:	fb02 f601 	mul.w	r6, r2, r1
 801c71c:	0112      	lsls	r2, r2, #4
 801c71e:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801c722:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 801c726:	1b92      	subs	r2, r2, r6
 801c728:	b289      	uxth	r1, r1
 801c72a:	b292      	uxth	r2, r2
 801c72c:	eba9 0901 	sub.w	r9, r9, r1
 801c730:	fb02 fe0e 	mul.w	lr, r2, lr
 801c734:	fa1f f989 	uxth.w	r9, r9
 801c738:	fb02 fc0c 	mul.w	ip, r2, ip
 801c73c:	fb09 e404 	mla	r4, r9, r4, lr
 801c740:	f895 e000 	ldrb.w	lr, [r5]
 801c744:	fb09 c000 	mla	r0, r9, r0, ip
 801c748:	fb01 4407 	mla	r4, r1, r7, r4
 801c74c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801c74e:	fb06 4407 	mla	r4, r6, r7, r4
 801c752:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801c754:	fb1e fe07 	smulbb	lr, lr, r7
 801c758:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c75c:	fb04 e403 	mla	r4, r4, r3, lr
 801c760:	b2a4      	uxth	r4, r4
 801c762:	f104 0e01 	add.w	lr, r4, #1
 801c766:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801c76a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c76c:	fb01 0004 	mla	r0, r1, r4, r0
 801c770:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c772:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c776:	fb06 0004 	mla	r0, r6, r4, r0
 801c77a:	786c      	ldrb	r4, [r5, #1]
 801c77c:	f885 e000 	strb.w	lr, [r5]
 801c780:	fb14 f407 	smulbb	r4, r4, r7
 801c784:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c788:	fb00 4003 	mla	r0, r0, r3, r4
 801c78c:	b280      	uxth	r0, r0
 801c78e:	1c44      	adds	r4, r0, #1
 801c790:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801c794:	1200      	asrs	r0, r0, #8
 801c796:	7068      	strb	r0, [r5, #1]
 801c798:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c79a:	4342      	muls	r2, r0
 801c79c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c79e:	fb09 2200 	mla	r2, r9, r0, r2
 801c7a2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c7a4:	fb01 2100 	mla	r1, r1, r0, r2
 801c7a8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c7aa:	fb06 1602 	mla	r6, r6, r2, r1
 801c7ae:	78a9      	ldrb	r1, [r5, #2]
 801c7b0:	fb11 f107 	smulbb	r1, r1, r7
 801c7b4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801c7b8:	fb06 1303 	mla	r3, r6, r3, r1
 801c7bc:	b29b      	uxth	r3, r3
 801c7be:	1c5e      	adds	r6, r3, #1
 801c7c0:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801c7c4:	121b      	asrs	r3, r3, #8
 801c7c6:	70ab      	strb	r3, [r5, #2]
 801c7c8:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c7ca:	3503      	adds	r5, #3
 801c7cc:	449a      	add	sl, r3
 801c7ce:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c7d0:	4498      	add	r8, r3
 801c7d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c7d4:	3b01      	subs	r3, #1
 801c7d6:	930d      	str	r3, [sp, #52]	@ 0x34
 801c7d8:	e750      	b.n	801c67c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c7da:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c7dc:	449a      	add	sl, r3
 801c7de:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c7e0:	4498      	add	r8, r3
 801c7e2:	9b07      	ldr	r3, [sp, #28]
 801c7e4:	3b01      	subs	r3, #1
 801c7e6:	9307      	str	r3, [sp, #28]
 801c7e8:	9b08      	ldr	r3, [sp, #32]
 801c7ea:	3303      	adds	r3, #3
 801c7ec:	9308      	str	r3, [sp, #32]
 801c7ee:	e726      	b.n	801c63e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c7f0:	d026      	beq.n	801c840 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801c7f2:	9b07      	ldr	r3, [sp, #28]
 801c7f4:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801c7f6:	3b01      	subs	r3, #1
 801c7f8:	fb00 a003 	mla	r0, r0, r3, sl
 801c7fc:	1400      	asrs	r0, r0, #16
 801c7fe:	f53f af3a 	bmi.w	801c676 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c802:	3901      	subs	r1, #1
 801c804:	4288      	cmp	r0, r1
 801c806:	f6bf af36 	bge.w	801c676 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c80a:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801c80c:	fb01 8303 	mla	r3, r1, r3, r8
 801c810:	141b      	asrs	r3, r3, #16
 801c812:	f53f af30 	bmi.w	801c676 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c816:	3a01      	subs	r2, #1
 801c818:	4293      	cmp	r3, r2
 801c81a:	f6bf af2c 	bge.w	801c676 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c81e:	9b08      	ldr	r3, [sp, #32]
 801c820:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801c824:	1cdd      	adds	r5, r3, #3
 801c826:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 801c82a:	f1bc 0f00 	cmp.w	ip, #0
 801c82e:	dc5f      	bgt.n	801c8f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801c830:	9b07      	ldr	r3, [sp, #28]
 801c832:	9a08      	ldr	r2, [sp, #32]
 801c834:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c838:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c83c:	441a      	add	r2, r3
 801c83e:	9208      	str	r2, [sp, #32]
 801c840:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c842:	2b00      	cmp	r3, #0
 801c844:	f340 80e9 	ble.w	801ca1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801c848:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c84c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c84e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c852:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c856:	eef0 6a62 	vmov.f32	s13, s5
 801c85a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c85e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c862:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c866:	ee16 aa90 	vmov	sl, s13
 801c86a:	eef0 6a43 	vmov.f32	s13, s6
 801c86e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c872:	ee16 8a90 	vmov	r8, s13
 801c876:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c87a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c87e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c882:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c886:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c88a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c88e:	ee12 2a90 	vmov	r2, s5
 801c892:	eef0 2a47 	vmov.f32	s5, s14
 801c896:	fb92 f3f3 	sdiv	r3, r2, r3
 801c89a:	ee13 2a10 	vmov	r2, s6
 801c89e:	932b      	str	r3, [sp, #172]	@ 0xac
 801c8a0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c8a2:	eeb0 3a67 	vmov.f32	s6, s15
 801c8a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8aa:	932c      	str	r3, [sp, #176]	@ 0xb0
 801c8ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c8ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c8b0:	3b01      	subs	r3, #1
 801c8b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c8b4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c8b6:	bf08      	it	eq
 801c8b8:	4613      	moveq	r3, r2
 801c8ba:	9307      	str	r3, [sp, #28]
 801c8bc:	e6b1      	b.n	801c622 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c8be:	1c47      	adds	r7, r0, #1
 801c8c0:	d482      	bmi.n	801c7c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c8c2:	42bb      	cmp	r3, r7
 801c8c4:	db80      	blt.n	801c7c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c8c6:	1c67      	adds	r7, r4, #1
 801c8c8:	f53f af7e 	bmi.w	801c7c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c8cc:	42be      	cmp	r6, r7
 801c8ce:	f6ff af7b 	blt.w	801c7c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c8d2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c8d4:	b236      	sxth	r6, r6
 801c8d6:	9001      	str	r0, [sp, #4]
 801c8d8:	b21b      	sxth	r3, r3
 801c8da:	9600      	str	r6, [sp, #0]
 801c8dc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801c8de:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801c8e2:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801c8e6:	4629      	mov	r1, r5
 801c8e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c8ea:	f7ff fd82 	bl	801c3f2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801c8ee:	e76b      	b.n	801c7c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c8f0:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801c8f2:	ea4f 402a 	mov.w	r0, sl, asr #16
 801c8f6:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801c8fa:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801c8fe:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801c902:	ea4f 4128 	mov.w	r1, r8, asr #16
 801c906:	fb07 0101 	mla	r1, r7, r1, r0
 801c90a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c90c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c910:	1844      	adds	r4, r0, r1
 801c912:	5c40      	ldrb	r0, [r0, r1]
 801c914:	78a6      	ldrb	r6, [r4, #2]
 801c916:	7861      	ldrb	r1, [r4, #1]
 801c918:	960f      	str	r6, [sp, #60]	@ 0x3c
 801c91a:	78e6      	ldrb	r6, [r4, #3]
 801c91c:	910d      	str	r1, [sp, #52]	@ 0x34
 801c91e:	9610      	str	r6, [sp, #64]	@ 0x40
 801c920:	f894 9004 	ldrb.w	r9, [r4, #4]
 801c924:	f894 b005 	ldrb.w	fp, [r4, #5]
 801c928:	b192      	cbz	r2, 801c950 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801c92a:	f06f 0604 	mvn.w	r6, #4
 801c92e:	2103      	movs	r1, #3
 801c930:	3405      	adds	r4, #5
 801c932:	fb17 6701 	smlabb	r7, r7, r1, r6
 801c936:	19e6      	adds	r6, r4, r7
 801c938:	5de4      	ldrb	r4, [r4, r7]
 801c93a:	9417      	str	r4, [sp, #92]	@ 0x5c
 801c93c:	7874      	ldrb	r4, [r6, #1]
 801c93e:	9419      	str	r4, [sp, #100]	@ 0x64
 801c940:	78b4      	ldrb	r4, [r6, #2]
 801c942:	941b      	str	r4, [sp, #108]	@ 0x6c
 801c944:	78f4      	ldrb	r4, [r6, #3]
 801c946:	9418      	str	r4, [sp, #96]	@ 0x60
 801c948:	7934      	ldrb	r4, [r6, #4]
 801c94a:	941a      	str	r4, [sp, #104]	@ 0x68
 801c94c:	7974      	ldrb	r4, [r6, #5]
 801c94e:	941c      	str	r4, [sp, #112]	@ 0x70
 801c950:	b29b      	uxth	r3, r3
 801c952:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801c954:	b292      	uxth	r2, r2
 801c956:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c958:	3503      	adds	r5, #3
 801c95a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c95e:	fb03 f402 	mul.w	r4, r3, r2
 801c962:	011b      	lsls	r3, r3, #4
 801c964:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801c968:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 801c96c:	1b1b      	subs	r3, r3, r4
 801c96e:	b292      	uxth	r2, r2
 801c970:	b29b      	uxth	r3, r3
 801c972:	1ab6      	subs	r6, r6, r2
 801c974:	435f      	muls	r7, r3
 801c976:	b2b6      	uxth	r6, r6
 801c978:	fb03 f909 	mul.w	r9, r3, r9
 801c97c:	fb03 fb0b 	mul.w	fp, r3, fp
 801c980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c982:	fb06 7000 	mla	r0, r6, r0, r7
 801c986:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801c988:	fb06 bb03 	mla	fp, r6, r3, fp
 801c98c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801c98e:	fb02 0007 	mla	r0, r2, r7, r0
 801c992:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801c994:	fb02 bb03 	mla	fp, r2, r3, fp
 801c998:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c99a:	fb04 0007 	mla	r0, r4, r7, r0
 801c99e:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801c9a2:	fb17 f701 	smulbb	r7, r7, r1
 801c9a6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c9aa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801c9ac:	fb00 700e 	mla	r0, r0, lr, r7
 801c9b0:	fb06 9101 	mla	r1, r6, r1, r9
 801c9b4:	b280      	uxth	r0, r0
 801c9b6:	1c47      	adds	r7, r0, #1
 801c9b8:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801c9bc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801c9be:	1200      	asrs	r0, r0, #8
 801c9c0:	f805 0c06 	strb.w	r0, [r5, #-6]
 801c9c4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c9c6:	fb02 1100 	mla	r1, r2, r0, r1
 801c9ca:	981a      	ldr	r0, [sp, #104]	@ 0x68
 801c9cc:	fb04 1100 	mla	r1, r4, r0, r1
 801c9d0:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801c9d4:	fb04 b403 	mla	r4, r4, r3, fp
 801c9d8:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801c9dc:	fb10 f007 	smulbb	r0, r0, r7
 801c9e0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c9e4:	fb13 f307 	smulbb	r3, r3, r7
 801c9e8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c9ec:	fb01 010e 	mla	r1, r1, lr, r0
 801c9f0:	fb04 340e 	mla	r4, r4, lr, r3
 801c9f4:	b289      	uxth	r1, r1
 801c9f6:	b2a4      	uxth	r4, r4
 801c9f8:	1c48      	adds	r0, r1, #1
 801c9fa:	1c63      	adds	r3, r4, #1
 801c9fc:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801ca00:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801ca04:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801ca06:	1209      	asrs	r1, r1, #8
 801ca08:	1224      	asrs	r4, r4, #8
 801ca0a:	449a      	add	sl, r3
 801ca0c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ca0e:	f805 1c05 	strb.w	r1, [r5, #-5]
 801ca12:	f805 4c04 	strb.w	r4, [r5, #-4]
 801ca16:	4498      	add	r8, r3
 801ca18:	e707      	b.n	801c82a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801ca1a:	b01f      	add	sp, #124	@ 0x7c
 801ca1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca20 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801ca20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca24:	b087      	sub	sp, #28
 801ca26:	780d      	ldrb	r5, [r1, #0]
 801ca28:	784c      	ldrb	r4, [r1, #1]
 801ca2a:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801ca2e:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 801ca32:	9004      	str	r0, [sp, #16]
 801ca34:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801ca38:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 801ca3c:	9005      	str	r0, [sp, #20]
 801ca3e:	fb06 bc03 	mla	ip, r6, r3, fp
 801ca42:	2e00      	cmp	r6, #0
 801ca44:	7888      	ldrb	r0, [r1, #2]
 801ca46:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ca4a:	eb02 090c 	add.w	r9, r2, ip
 801ca4e:	f2c0 8084 	blt.w	801cb5a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801ca52:	42b7      	cmp	r7, r6
 801ca54:	f340 8081 	ble.w	801cb5a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801ca58:	f1bb 0f00 	cmp.w	fp, #0
 801ca5c:	db79      	blt.n	801cb52 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801ca5e:	455b      	cmp	r3, fp
 801ca60:	dd77      	ble.n	801cb52 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801ca62:	f812 200c 	ldrb.w	r2, [r2, ip]
 801ca66:	9201      	str	r2, [sp, #4]
 801ca68:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ca6c:	9202      	str	r2, [sp, #8]
 801ca6e:	f899 2002 	ldrb.w	r2, [r9, #2]
 801ca72:	9203      	str	r2, [sp, #12]
 801ca74:	f11b 0201 	adds.w	r2, fp, #1
 801ca78:	d476      	bmi.n	801cb68 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801ca7a:	4293      	cmp	r3, r2
 801ca7c:	dd74      	ble.n	801cb68 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801ca7e:	9a04      	ldr	r2, [sp, #16]
 801ca80:	2a00      	cmp	r2, #0
 801ca82:	d071      	beq.n	801cb68 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801ca84:	f899 8003 	ldrb.w	r8, [r9, #3]
 801ca88:	f899 c004 	ldrb.w	ip, [r9, #4]
 801ca8c:	f899 a005 	ldrb.w	sl, [r9, #5]
 801ca90:	3601      	adds	r6, #1
 801ca92:	d471      	bmi.n	801cb78 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801ca94:	42b7      	cmp	r7, r6
 801ca96:	dd6f      	ble.n	801cb78 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801ca98:	9a05      	ldr	r2, [sp, #20]
 801ca9a:	2a00      	cmp	r2, #0
 801ca9c:	d06c      	beq.n	801cb78 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801ca9e:	f1bb 0f00 	cmp.w	fp, #0
 801caa2:	db65      	blt.n	801cb70 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801caa4:	455b      	cmp	r3, fp
 801caa6:	dd63      	ble.n	801cb70 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801caa8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801caac:	f819 e002 	ldrb.w	lr, [r9, r2]
 801cab0:	2203      	movs	r2, #3
 801cab2:	fb03 9602 	mla	r6, r3, r2, r9
 801cab6:	7877      	ldrb	r7, [r6, #1]
 801cab8:	78b6      	ldrb	r6, [r6, #2]
 801caba:	f11b 0b01 	adds.w	fp, fp, #1
 801cabe:	d40c      	bmi.n	801cada <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801cac0:	455b      	cmp	r3, fp
 801cac2:	dd0a      	ble.n	801cada <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801cac4:	9a04      	ldr	r2, [sp, #16]
 801cac6:	b142      	cbz	r2, 801cada <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801cac8:	2203      	movs	r2, #3
 801caca:	fb13 2002 	smlabb	r0, r3, r2, r2
 801cace:	f819 5000 	ldrb.w	r5, [r9, r0]
 801cad2:	fb03 9002 	mla	r0, r3, r2, r9
 801cad6:	7904      	ldrb	r4, [r0, #4]
 801cad8:	7940      	ldrb	r0, [r0, #5]
 801cada:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801cade:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801cae2:	fb03 fb02 	mul.w	fp, r3, r2
 801cae6:	011b      	lsls	r3, r3, #4
 801cae8:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801caec:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 801caf0:	eba3 030b 	sub.w	r3, r3, fp
 801caf4:	b292      	uxth	r2, r2
 801caf6:	b29b      	uxth	r3, r3
 801caf8:	eba9 0902 	sub.w	r9, r9, r2
 801cafc:	9304      	str	r3, [sp, #16]
 801cafe:	fa1f f989 	uxth.w	r9, r9
 801cb02:	fb03 f808 	mul.w	r8, r3, r8
 801cb06:	9b01      	ldr	r3, [sp, #4]
 801cb08:	fb09 8803 	mla	r8, r9, r3, r8
 801cb0c:	9b04      	ldr	r3, [sp, #16]
 801cb0e:	fb03 fc0c 	mul.w	ip, r3, ip
 801cb12:	9b02      	ldr	r3, [sp, #8]
 801cb14:	fb02 880e 	mla	r8, r2, lr, r8
 801cb18:	fb09 cc03 	mla	ip, r9, r3, ip
 801cb1c:	9b04      	ldr	r3, [sp, #16]
 801cb1e:	fb0b 8805 	mla	r8, fp, r5, r8
 801cb22:	fb02 c707 	mla	r7, r2, r7, ip
 801cb26:	fb03 f30a 	mul.w	r3, r3, sl
 801cb2a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cb2e:	fb0b 7404 	mla	r4, fp, r4, r7
 801cb32:	f881 8000 	strb.w	r8, [r1]
 801cb36:	1224      	asrs	r4, r4, #8
 801cb38:	704c      	strb	r4, [r1, #1]
 801cb3a:	9c03      	ldr	r4, [sp, #12]
 801cb3c:	fb09 3904 	mla	r9, r9, r4, r3
 801cb40:	fb02 9206 	mla	r2, r2, r6, r9
 801cb44:	fb0b 2000 	mla	r0, fp, r0, r2
 801cb48:	1200      	asrs	r0, r0, #8
 801cb4a:	7088      	strb	r0, [r1, #2]
 801cb4c:	b007      	add	sp, #28
 801cb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb52:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801cb56:	9501      	str	r5, [sp, #4]
 801cb58:	e78c      	b.n	801ca74 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801cb5a:	4682      	mov	sl, r0
 801cb5c:	46a4      	mov	ip, r4
 801cb5e:	46a8      	mov	r8, r5
 801cb60:	9501      	str	r5, [sp, #4]
 801cb62:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801cb66:	e793      	b.n	801ca90 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801cb68:	4682      	mov	sl, r0
 801cb6a:	46a4      	mov	ip, r4
 801cb6c:	46a8      	mov	r8, r5
 801cb6e:	e78f      	b.n	801ca90 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801cb70:	4606      	mov	r6, r0
 801cb72:	4627      	mov	r7, r4
 801cb74:	46ae      	mov	lr, r5
 801cb76:	e7a0      	b.n	801caba <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801cb78:	4606      	mov	r6, r0
 801cb7a:	4627      	mov	r7, r4
 801cb7c:	46ae      	mov	lr, r5
 801cb7e:	e7ac      	b.n	801cada <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801cb80 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb84:	b09b      	sub	sp, #108	@ 0x6c
 801cb86:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cb88:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801cb8a:	9019      	str	r0, [sp, #100]	@ 0x64
 801cb8c:	9109      	str	r1, [sp, #36]	@ 0x24
 801cb8e:	6850      	ldr	r0, [r2, #4]
 801cb90:	9306      	str	r3, [sp, #24]
 801cb92:	6812      	ldr	r2, [r2, #0]
 801cb94:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801cb98:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 801cb9c:	fb00 1303 	mla	r3, r0, r3, r1
 801cba0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cba4:	18d3      	adds	r3, r2, r3
 801cba6:	9307      	str	r3, [sp, #28]
 801cba8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	9308      	str	r3, [sp, #32]
 801cbae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	dc03      	bgt.n	801cbbc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801cbb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	f340 81ab 	ble.w	801cf12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801cbbc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cbbe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cbc2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cbc6:	1e48      	subs	r0, r1, #1
 801cbc8:	1e55      	subs	r5, r2, #1
 801cbca:	9b06      	ldr	r3, [sp, #24]
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	f340 80b1 	ble.w	801cd34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801cbd2:	ea5f 462b 	movs.w	r6, fp, asr #16
 801cbd6:	ea4f 4324 	mov.w	r3, r4, asr #16
 801cbda:	d406      	bmi.n	801cbea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801cbdc:	4286      	cmp	r6, r0
 801cbde:	da04      	bge.n	801cbea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	db02      	blt.n	801cbea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801cbe4:	42ab      	cmp	r3, r5
 801cbe6:	f2c0 80a6 	blt.w	801cd36 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801cbea:	3601      	adds	r6, #1
 801cbec:	f100 8097 	bmi.w	801cd1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801cbf0:	42b1      	cmp	r1, r6
 801cbf2:	f2c0 8094 	blt.w	801cd1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801cbf6:	3301      	adds	r3, #1
 801cbf8:	f100 8091 	bmi.w	801cd1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801cbfc:	429a      	cmp	r2, r3
 801cbfe:	f2c0 808e 	blt.w	801cd1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801cc02:	9b06      	ldr	r3, [sp, #24]
 801cc04:	9e07      	ldr	r6, [sp, #28]
 801cc06:	930a      	str	r3, [sp, #40]	@ 0x28
 801cc08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	f340 80b0 	ble.w	801cd70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cc10:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801cc12:	1425      	asrs	r5, r4, #16
 801cc14:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cc16:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801cc1a:	68c7      	ldr	r7, [r0, #12]
 801cc1c:	ea5f 402b 	movs.w	r0, fp, asr #16
 801cc20:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801cc24:	689b      	ldr	r3, [r3, #8]
 801cc26:	f100 80ea 	bmi.w	801cdfe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cc2a:	f103 3cff 	add.w	ip, r3, #4294967295
 801cc2e:	4560      	cmp	r0, ip
 801cc30:	f280 80e5 	bge.w	801cdfe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cc34:	2d00      	cmp	r5, #0
 801cc36:	f2c0 80e2 	blt.w	801cdfe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cc3a:	f107 3cff 	add.w	ip, r7, #4294967295
 801cc3e:	4565      	cmp	r5, ip
 801cc40:	f280 80dd 	bge.w	801cdfe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cc44:	b21b      	sxth	r3, r3
 801cc46:	fb05 0003 	mla	r0, r5, r3, r0
 801cc4a:	9d08      	ldr	r5, [sp, #32]
 801cc4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cc50:	182f      	adds	r7, r5, r0
 801cc52:	5c2d      	ldrb	r5, [r5, r0]
 801cc54:	7878      	ldrb	r0, [r7, #1]
 801cc56:	f897 e002 	ldrb.w	lr, [r7, #2]
 801cc5a:	900c      	str	r0, [sp, #48]	@ 0x30
 801cc5c:	f897 9003 	ldrb.w	r9, [r7, #3]
 801cc60:	f897 8004 	ldrb.w	r8, [r7, #4]
 801cc64:	f897 a005 	ldrb.w	sl, [r7, #5]
 801cc68:	b1c9      	cbz	r1, 801cc9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801cc6a:	f04f 0c03 	mov.w	ip, #3
 801cc6e:	f06f 0004 	mvn.w	r0, #4
 801cc72:	3705      	adds	r7, #5
 801cc74:	fb13 030c 	smlabb	r3, r3, ip, r0
 801cc78:	eb07 0c03 	add.w	ip, r7, r3
 801cc7c:	5cfb      	ldrb	r3, [r7, r3]
 801cc7e:	930d      	str	r3, [sp, #52]	@ 0x34
 801cc80:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801cc84:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cc86:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801cc8a:	9311      	str	r3, [sp, #68]	@ 0x44
 801cc8c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801cc90:	930e      	str	r3, [sp, #56]	@ 0x38
 801cc92:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801cc96:	9310      	str	r3, [sp, #64]	@ 0x40
 801cc98:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801cc9c:	9312      	str	r3, [sp, #72]	@ 0x48
 801cc9e:	b292      	uxth	r2, r2
 801cca0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801cca2:	b289      	uxth	r1, r1
 801cca4:	fb02 f301 	mul.w	r3, r2, r1
 801cca8:	0112      	lsls	r2, r2, #4
 801ccaa:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801ccae:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801ccb2:	1ad2      	subs	r2, r2, r3
 801ccb4:	b289      	uxth	r1, r1
 801ccb6:	b292      	uxth	r2, r2
 801ccb8:	1a7f      	subs	r7, r7, r1
 801ccba:	fb02 f909 	mul.w	r9, r2, r9
 801ccbe:	b2bf      	uxth	r7, r7
 801ccc0:	fb02 f808 	mul.w	r8, r2, r8
 801ccc4:	fb02 fa0a 	mul.w	sl, r2, sl
 801ccc8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ccca:	fb07 9905 	mla	r9, r7, r5, r9
 801ccce:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801ccd0:	fb07 8800 	mla	r8, r7, r0, r8
 801ccd4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ccd6:	fb07 aa0e 	mla	sl, r7, lr, sl
 801ccda:	fb01 9905 	mla	r9, r1, r5, r9
 801ccde:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801cce0:	fb01 8800 	mla	r8, r1, r0, r8
 801cce4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801cce6:	fb01 a102 	mla	r1, r1, r2, sl
 801ccea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ccec:	fb03 9905 	mla	r9, r3, r5, r9
 801ccf0:	fb03 8800 	mla	r8, r3, r0, r8
 801ccf4:	fb03 1302 	mla	r3, r3, r2, r1
 801ccf8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ccfc:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cd00:	121b      	asrs	r3, r3, #8
 801cd02:	f886 9000 	strb.w	r9, [r6]
 801cd06:	f886 8001 	strb.w	r8, [r6, #1]
 801cd0a:	70b3      	strb	r3, [r6, #2]
 801cd0c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cd0e:	3603      	adds	r6, #3
 801cd10:	449b      	add	fp, r3
 801cd12:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cd14:	441c      	add	r4, r3
 801cd16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd18:	3b01      	subs	r3, #1
 801cd1a:	930a      	str	r3, [sp, #40]	@ 0x28
 801cd1c:	e774      	b.n	801cc08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801cd1e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cd20:	449b      	add	fp, r3
 801cd22:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cd24:	441c      	add	r4, r3
 801cd26:	9b06      	ldr	r3, [sp, #24]
 801cd28:	3b01      	subs	r3, #1
 801cd2a:	9306      	str	r3, [sp, #24]
 801cd2c:	9b07      	ldr	r3, [sp, #28]
 801cd2e:	3303      	adds	r3, #3
 801cd30:	9307      	str	r3, [sp, #28]
 801cd32:	e74a      	b.n	801cbca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801cd34:	d024      	beq.n	801cd80 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801cd36:	9b06      	ldr	r3, [sp, #24]
 801cd38:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801cd3a:	3b01      	subs	r3, #1
 801cd3c:	fb00 b003 	mla	r0, r0, r3, fp
 801cd40:	1400      	asrs	r0, r0, #16
 801cd42:	f53f af5e 	bmi.w	801cc02 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801cd46:	3901      	subs	r1, #1
 801cd48:	4288      	cmp	r0, r1
 801cd4a:	f6bf af5a 	bge.w	801cc02 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801cd4e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801cd50:	fb01 4303 	mla	r3, r1, r3, r4
 801cd54:	141b      	asrs	r3, r3, #16
 801cd56:	f53f af54 	bmi.w	801cc02 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801cd5a:	3a01      	subs	r2, #1
 801cd5c:	4293      	cmp	r3, r2
 801cd5e:	f6bf af50 	bge.w	801cc02 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801cd62:	9b07      	ldr	r3, [sp, #28]
 801cd64:	f8dd e018 	ldr.w	lr, [sp, #24]
 801cd68:	1cde      	adds	r6, r3, #3
 801cd6a:	f1be 0f00 	cmp.w	lr, #0
 801cd6e:	dc5f      	bgt.n	801ce30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801cd70:	9b06      	ldr	r3, [sp, #24]
 801cd72:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801cd76:	9b07      	ldr	r3, [sp, #28]
 801cd78:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cd7c:	4423      	add	r3, r4
 801cd7e:	9307      	str	r3, [sp, #28]
 801cd80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	f340 80c5 	ble.w	801cf12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801cd88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801cd8c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801cd8e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cd92:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cd96:	eef0 6a62 	vmov.f32	s13, s5
 801cd9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cd9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cda2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cda6:	ee16 ba90 	vmov	fp, s13
 801cdaa:	eef0 6a43 	vmov.f32	s13, s6
 801cdae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cdb2:	ee16 4a90 	vmov	r4, s13
 801cdb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cdba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cdbe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cdc2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cdc6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cdca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cdce:	ee12 2a90 	vmov	r2, s5
 801cdd2:	eef0 2a47 	vmov.f32	s5, s14
 801cdd6:	fb92 f3f3 	sdiv	r3, r2, r3
 801cdda:	ee13 2a10 	vmov	r2, s6
 801cdde:	9327      	str	r3, [sp, #156]	@ 0x9c
 801cde0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801cde2:	eeb0 3a67 	vmov.f32	s6, s15
 801cde6:	fb92 f3f3 	sdiv	r3, r2, r3
 801cdea:	9328      	str	r3, [sp, #160]	@ 0xa0
 801cdec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cdee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cdf0:	3b01      	subs	r3, #1
 801cdf2:	9309      	str	r3, [sp, #36]	@ 0x24
 801cdf4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801cdf6:	bf08      	it	eq
 801cdf8:	4613      	moveq	r3, r2
 801cdfa:	9306      	str	r3, [sp, #24]
 801cdfc:	e6d7      	b.n	801cbae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801cdfe:	f110 0c01 	adds.w	ip, r0, #1
 801ce02:	d483      	bmi.n	801cd0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ce04:	4563      	cmp	r3, ip
 801ce06:	db81      	blt.n	801cd0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ce08:	f115 0c01 	adds.w	ip, r5, #1
 801ce0c:	f53f af7e 	bmi.w	801cd0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ce10:	4567      	cmp	r7, ip
 801ce12:	f6ff af7b 	blt.w	801cd0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ce16:	b23f      	sxth	r7, r7
 801ce18:	b21b      	sxth	r3, r3
 801ce1a:	9700      	str	r7, [sp, #0]
 801ce1c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801ce20:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801ce24:	9a08      	ldr	r2, [sp, #32]
 801ce26:	4631      	mov	r1, r6
 801ce28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801ce2a:	f7ff fdf9 	bl	801ca20 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801ce2e:	e76d      	b.n	801cd0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ce30:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801ce32:	ea4f 402b 	mov.w	r0, fp, asr #16
 801ce36:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801ce3a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801ce3e:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801ce42:	1421      	asrs	r1, r4, #16
 801ce44:	930a      	str	r3, [sp, #40]	@ 0x28
 801ce46:	fb0c 0101 	mla	r1, ip, r1, r0
 801ce4a:	9808      	ldr	r0, [sp, #32]
 801ce4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ce50:	1845      	adds	r5, r0, r1
 801ce52:	5c40      	ldrb	r0, [r0, r1]
 801ce54:	796f      	ldrb	r7, [r5, #5]
 801ce56:	7869      	ldrb	r1, [r5, #1]
 801ce58:	f895 8002 	ldrb.w	r8, [r5, #2]
 801ce5c:	f895 a003 	ldrb.w	sl, [r5, #3]
 801ce60:	f895 9004 	ldrb.w	r9, [r5, #4]
 801ce64:	970c      	str	r7, [sp, #48]	@ 0x30
 801ce66:	b1a2      	cbz	r2, 801ce92 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801ce68:	2703      	movs	r7, #3
 801ce6a:	f06f 0304 	mvn.w	r3, #4
 801ce6e:	3505      	adds	r5, #5
 801ce70:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801ce74:	eb05 070c 	add.w	r7, r5, ip
 801ce78:	f815 500c 	ldrb.w	r5, [r5, ip]
 801ce7c:	9513      	str	r5, [sp, #76]	@ 0x4c
 801ce7e:	787d      	ldrb	r5, [r7, #1]
 801ce80:	9515      	str	r5, [sp, #84]	@ 0x54
 801ce82:	78bd      	ldrb	r5, [r7, #2]
 801ce84:	9517      	str	r5, [sp, #92]	@ 0x5c
 801ce86:	78fd      	ldrb	r5, [r7, #3]
 801ce88:	9514      	str	r5, [sp, #80]	@ 0x50
 801ce8a:	793d      	ldrb	r5, [r7, #4]
 801ce8c:	9516      	str	r5, [sp, #88]	@ 0x58
 801ce8e:	797d      	ldrb	r5, [r7, #5]
 801ce90:	9518      	str	r5, [sp, #96]	@ 0x60
 801ce92:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801ce96:	b292      	uxth	r2, r2
 801ce98:	3603      	adds	r6, #3
 801ce9a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ce9e:	fb03 f502 	mul.w	r5, r3, r2
 801cea2:	011b      	lsls	r3, r3, #4
 801cea4:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801cea8:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 801ceac:	1b5b      	subs	r3, r3, r5
 801ceae:	b292      	uxth	r2, r2
 801ceb0:	b29b      	uxth	r3, r3
 801ceb2:	1abf      	subs	r7, r7, r2
 801ceb4:	fb03 f909 	mul.w	r9, r3, r9
 801ceb8:	b2bf      	uxth	r7, r7
 801ceba:	fb03 fa0a 	mul.w	sl, r3, sl
 801cebe:	fb07 9901 	mla	r9, r7, r1, r9
 801cec2:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801cec4:	fb07 aa00 	mla	sl, r7, r0, sl
 801cec8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ceca:	fb02 9901 	mla	r9, r2, r1, r9
 801cece:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801ced0:	fb02 aa00 	mla	sl, r2, r0, sl
 801ced4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801ced6:	fb05 9901 	mla	r9, r5, r1, r9
 801ceda:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801cedc:	fb05 aa00 	mla	sl, r5, r0, sl
 801cee0:	434b      	muls	r3, r1
 801cee2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801cee4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cee8:	fb07 3308 	mla	r3, r7, r8, r3
 801ceec:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cef0:	f806 ac06 	strb.w	sl, [r6, #-6]
 801cef4:	fb02 3201 	mla	r2, r2, r1, r3
 801cef8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801cefa:	f806 9c05 	strb.w	r9, [r6, #-5]
 801cefe:	fb05 2503 	mla	r5, r5, r3, r2
 801cf02:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cf04:	122d      	asrs	r5, r5, #8
 801cf06:	449b      	add	fp, r3
 801cf08:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cf0a:	f806 5c04 	strb.w	r5, [r6, #-4]
 801cf0e:	441c      	add	r4, r3
 801cf10:	e72b      	b.n	801cd6a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cf12:	b01b      	add	sp, #108	@ 0x6c
 801cf14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cf18 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801cf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf1c:	b087      	sub	sp, #28
 801cf1e:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801cf22:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801cf26:	fb05 7003 	mla	r0, r5, r3, r7
 801cf2a:	2d00      	cmp	r5, #0
 801cf2c:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801cf30:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801cf34:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801cf38:	f2c0 811f 	blt.w	801d17a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801cf3c:	45a8      	cmp	r8, r5
 801cf3e:	f340 811c 	ble.w	801d17a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801cf42:	2f00      	cmp	r7, #0
 801cf44:	f2c0 8117 	blt.w	801d176 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801cf48:	42bb      	cmp	r3, r7
 801cf4a:	f340 8114 	ble.w	801d176 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801cf4e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801cf52:	1c7a      	adds	r2, r7, #1
 801cf54:	f100 8114 	bmi.w	801d180 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801cf58:	4293      	cmp	r3, r2
 801cf5a:	f340 8111 	ble.w	801d180 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801cf5e:	2c00      	cmp	r4, #0
 801cf60:	f000 8110 	beq.w	801d184 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801cf64:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801cf68:	3501      	adds	r5, #1
 801cf6a:	f100 810f 	bmi.w	801d18c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801cf6e:	45a8      	cmp	r8, r5
 801cf70:	f340 810c 	ble.w	801d18c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801cf74:	f1be 0f00 	cmp.w	lr, #0
 801cf78:	f000 810b 	beq.w	801d192 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801cf7c:	2f00      	cmp	r7, #0
 801cf7e:	f2c0 8103 	blt.w	801d188 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801cf82:	42bb      	cmp	r3, r7
 801cf84:	f340 8100 	ble.w	801d188 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801cf88:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801cf8c:	3701      	adds	r7, #1
 801cf8e:	f100 8103 	bmi.w	801d198 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801cf92:	42bb      	cmp	r3, r7
 801cf94:	f340 8100 	ble.w	801d198 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801cf98:	2c00      	cmp	r4, #0
 801cf9a:	f000 80ff 	beq.w	801d19c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801cf9e:	3301      	adds	r3, #1
 801cfa0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801cfa4:	fa1f fc84 	uxth.w	ip, r4
 801cfa8:	fa1f fe8e 	uxth.w	lr, lr
 801cfac:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801cfb0:	fb0c f90e 	mul.w	r9, ip, lr
 801cfb4:	0e13      	lsrs	r3, r2, #24
 801cfb6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801cfba:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801cfbe:	9302      	str	r3, [sp, #8]
 801cfc0:	ebac 0709 	sub.w	r7, ip, r9
 801cfc4:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801cfc8:	fa1f f48e 	uxth.w	r4, lr
 801cfcc:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801cfd0:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801cfd4:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801cfd8:	fb0a fe0e 	mul.w	lr, sl, lr
 801cfdc:	1b1b      	subs	r3, r3, r4
 801cfde:	fb0a f606 	mul.w	r6, sl, r6
 801cfe2:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801cfe6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801cfea:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801cfee:	b29b      	uxth	r3, r3
 801cff0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cff4:	b2bf      	uxth	r7, r7
 801cff6:	9301      	str	r3, [sp, #4]
 801cff8:	44e6      	add	lr, ip
 801cffa:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801cffe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d002:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d006:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801d00a:	9303      	str	r3, [sp, #12]
 801d00c:	0a33      	lsrs	r3, r6, #8
 801d00e:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801d012:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d016:	9304      	str	r3, [sp, #16]
 801d018:	fb0b f606 	mul.w	r6, fp, r6
 801d01c:	fb0b f000 	mul.w	r0, fp, r0
 801d020:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801d024:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d028:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d02c:	44b6      	add	lr, r6
 801d02e:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801d032:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801d036:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801d03a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801d03e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d042:	fb08 f606 	mul.w	r6, r8, r6
 801d046:	0a03      	lsrs	r3, r0, #8
 801d048:	fb08 f505 	mul.w	r5, r8, r5
 801d04c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d050:	0a30      	lsrs	r0, r6, #8
 801d052:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d056:	9305      	str	r3, [sp, #20]
 801d058:	0e13      	lsrs	r3, r2, #24
 801d05a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d05e:	fb0e fe07 	mul.w	lr, lr, r7
 801d062:	4430      	add	r0, r6
 801d064:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801d068:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801d06c:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801d070:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d074:	0a00      	lsrs	r0, r0, #8
 801d076:	435e      	muls	r6, r3
 801d078:	0a2d      	lsrs	r5, r5, #8
 801d07a:	435a      	muls	r2, r3
 801d07c:	9b03      	ldr	r3, [sp, #12]
 801d07e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801d082:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d086:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d08a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d08e:	44b4      	add	ip, r6
 801d090:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801d094:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d098:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801d09c:	9e01      	ldr	r6, [sp, #4]
 801d09e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d0a2:	fb03 ee06 	mla	lr, r3, r6, lr
 801d0a6:	9b04      	ldr	r3, [sp, #16]
 801d0a8:	0a12      	lsrs	r2, r2, #8
 801d0aa:	fb0c ee09 	mla	lr, ip, r9, lr
 801d0ae:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801d0b2:	9b05      	ldr	r3, [sp, #20]
 801d0b4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d0b8:	fb00 ee04 	mla	lr, r0, r4, lr
 801d0bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d0c0:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801d0c4:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801d0c8:	9b01      	ldr	r3, [sp, #4]
 801d0ca:	fb07 fe0e 	mul.w	lr, r7, lr
 801d0ce:	fb07 f70b 	mul.w	r7, r7, fp
 801d0d2:	fb03 ee06 	mla	lr, r3, r6, lr
 801d0d6:	fb03 730a 	mla	r3, r3, sl, r7
 801d0da:	fb09 e202 	mla	r2, r9, r2, lr
 801d0de:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801d0e2:	fb04 2e0e 	mla	lr, r4, lr, r2
 801d0e6:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 801d0ea:	fb04 3408 	mla	r4, r4, r8, r3
 801d0ee:	9b02      	ldr	r3, [sp, #8]
 801d0f0:	b292      	uxth	r2, r2
 801d0f2:	fb09 4903 	mla	r9, r9, r3, r4
 801d0f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d0fa:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801d0fe:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801d102:	fb09 f902 	mul.w	r9, r9, r2
 801d106:	ea40 0e0e 	orr.w	lr, r0, lr
 801d10a:	f109 0301 	add.w	r3, r9, #1
 801d10e:	fa5f f08e 	uxtb.w	r0, lr
 801d112:	fb10 f002 	smulbb	r0, r0, r2
 801d116:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801d11a:	780b      	ldrb	r3, [r1, #0]
 801d11c:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801d120:	fa5f f989 	uxtb.w	r9, r9
 801d124:	fb03 0309 	mla	r3, r3, r9, r0
 801d128:	b29b      	uxth	r3, r3
 801d12a:	1c58      	adds	r0, r3, #1
 801d12c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801d130:	7848      	ldrb	r0, [r1, #1]
 801d132:	fb10 f009 	smulbb	r0, r0, r9
 801d136:	121b      	asrs	r3, r3, #8
 801d138:	700b      	strb	r3, [r1, #0]
 801d13a:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801d13e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801d142:	fb03 0302 	mla	r3, r3, r2, r0
 801d146:	b29b      	uxth	r3, r3
 801d148:	1c58      	adds	r0, r3, #1
 801d14a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801d14e:	121b      	asrs	r3, r3, #8
 801d150:	704b      	strb	r3, [r1, #1]
 801d152:	788b      	ldrb	r3, [r1, #2]
 801d154:	fb13 f909 	smulbb	r9, r3, r9
 801d158:	fb0e 9e02 	mla	lr, lr, r2, r9
 801d15c:	fa1f fe8e 	uxth.w	lr, lr
 801d160:	f10e 0301 	add.w	r3, lr, #1
 801d164:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801d168:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d16c:	f881 e002 	strb.w	lr, [r1, #2]
 801d170:	b007      	add	sp, #28
 801d172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d176:	2600      	movs	r6, #0
 801d178:	e6eb      	b.n	801cf52 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801d17a:	2000      	movs	r0, #0
 801d17c:	4606      	mov	r6, r0
 801d17e:	e6f3      	b.n	801cf68 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801d180:	2000      	movs	r0, #0
 801d182:	e6f1      	b.n	801cf68 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801d184:	4620      	mov	r0, r4
 801d186:	e6ef      	b.n	801cf68 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801d188:	2500      	movs	r5, #0
 801d18a:	e6ff      	b.n	801cf8c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801d18c:	2200      	movs	r2, #0
 801d18e:	4615      	mov	r5, r2
 801d190:	e708      	b.n	801cfa4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801d192:	4672      	mov	r2, lr
 801d194:	4675      	mov	r5, lr
 801d196:	e705      	b.n	801cfa4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801d198:	2200      	movs	r2, #0
 801d19a:	e703      	b.n	801cfa4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801d19c:	4622      	mov	r2, r4
 801d19e:	e701      	b.n	801cfa4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801d1a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1a4:	b09d      	sub	sp, #116	@ 0x74
 801d1a6:	9219      	str	r2, [sp, #100]	@ 0x64
 801d1a8:	9307      	str	r3, [sp, #28]
 801d1aa:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801d1ac:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 801d1b0:	901b      	str	r0, [sp, #108]	@ 0x6c
 801d1b2:	931a      	str	r3, [sp, #104]	@ 0x68
 801d1b4:	6850      	ldr	r0, [r2, #4]
 801d1b6:	9117      	str	r1, [sp, #92]	@ 0x5c
 801d1b8:	6812      	ldr	r2, [r2, #0]
 801d1ba:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 801d1be:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 801d1c2:	fb00 1303 	mla	r3, r0, r3, r1
 801d1c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1ca:	18d3      	adds	r3, r2, r3
 801d1cc:	930a      	str	r3, [sp, #40]	@ 0x28
 801d1ce:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801d1d0:	681b      	ldr	r3, [r3, #0]
 801d1d2:	9310      	str	r3, [sp, #64]	@ 0x40
 801d1d4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801d1d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d1da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d1dc:	2b00      	cmp	r3, #0
 801d1de:	dc03      	bgt.n	801d1e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d1e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	f340 8368 	ble.w	801d8b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801d1e8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801d1ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d1ee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d1f2:	1e48      	subs	r0, r1, #1
 801d1f4:	1e57      	subs	r7, r2, #1
 801d1f6:	9b07      	ldr	r3, [sp, #28]
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	f340 8187 	ble.w	801d50c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801d1fe:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801d202:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d206:	d406      	bmi.n	801d216 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d208:	4584      	cmp	ip, r0
 801d20a:	da04      	bge.n	801d216 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	db02      	blt.n	801d216 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d210:	42bb      	cmp	r3, r7
 801d212:	f2c0 817c 	blt.w	801d50e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801d216:	f11c 0c01 	adds.w	ip, ip, #1
 801d21a:	f100 816c 	bmi.w	801d4f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801d21e:	4561      	cmp	r1, ip
 801d220:	f2c0 8169 	blt.w	801d4f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801d224:	3301      	adds	r3, #1
 801d226:	f100 8166 	bmi.w	801d4f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801d22a:	429a      	cmp	r2, r3
 801d22c:	f2c0 8163 	blt.w	801d4f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801d230:	9b07      	ldr	r3, [sp, #28]
 801d232:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801d234:	9318      	str	r3, [sp, #96]	@ 0x60
 801d236:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d238:	2b00      	cmp	r3, #0
 801d23a:	f340 8186 	ble.w	801d54a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801d23e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801d240:	142a      	asrs	r2, r5, #16
 801d242:	ea4f 4026 	mov.w	r0, r6, asr #16
 801d246:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d24a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801d24e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801d252:	f100 81cb 	bmi.w	801d5ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801d256:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d25a:	4542      	cmp	r2, r8
 801d25c:	f280 81c6 	bge.w	801d5ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801d260:	2800      	cmp	r0, #0
 801d262:	f2c0 81c3 	blt.w	801d5ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801d266:	f103 38ff 	add.w	r8, r3, #4294967295
 801d26a:	4540      	cmp	r0, r8
 801d26c:	f280 81be 	bge.w	801d5ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801d270:	fa0f f38e 	sxth.w	r3, lr
 801d274:	fb00 2203 	mla	r2, r0, r3, r2
 801d278:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d27a:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801d27e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801d282:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801d286:	2900      	cmp	r1, #0
 801d288:	f000 81a6 	beq.w	801d5d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801d28c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d290:	900c      	str	r0, [sp, #48]	@ 0x30
 801d292:	0e00      	lsrs	r0, r0, #24
 801d294:	9013      	str	r0, [sp, #76]	@ 0x4c
 801d296:	f1bc 0f00 	cmp.w	ip, #0
 801d29a:	d00f      	beq.n	801d2bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d29c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801d2a0:	3b01      	subs	r3, #1
 801d2a2:	009b      	lsls	r3, r3, #2
 801d2a4:	3304      	adds	r3, #4
 801d2a6:	eb08 0003 	add.w	r0, r8, r3
 801d2aa:	f858 3003 	ldr.w	r3, [r8, r3]
 801d2ae:	9308      	str	r3, [sp, #32]
 801d2b0:	0e1b      	lsrs	r3, r3, #24
 801d2b2:	9311      	str	r3, [sp, #68]	@ 0x44
 801d2b4:	6843      	ldr	r3, [r0, #4]
 801d2b6:	930d      	str	r3, [sp, #52]	@ 0x34
 801d2b8:	0e1b      	lsrs	r3, r3, #24
 801d2ba:	9314      	str	r3, [sp, #80]	@ 0x50
 801d2bc:	b289      	uxth	r1, r1
 801d2be:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d2c0:	fa1f fc8c 	uxth.w	ip, ip
 801d2c4:	0108      	lsls	r0, r1, #4
 801d2c6:	fb01 f90c 	mul.w	r9, r1, ip
 801d2ca:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801d2ce:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801d2d2:	eba0 0809 	sub.w	r8, r0, r9
 801d2d6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d2d8:	fa1f f18c 	uxth.w	r1, ip
 801d2dc:	fa1f f888 	uxth.w	r8, r8
 801d2e0:	1a5b      	subs	r3, r3, r1
 801d2e2:	fb08 f000 	mul.w	r0, r8, r0
 801d2e6:	b29b      	uxth	r3, r3
 801d2e8:	fb03 000e 	mla	r0, r3, lr, r0
 801d2ec:	fb01 0004 	mla	r0, r1, r4, r0
 801d2f0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d2f2:	fb09 0004 	mla	r0, r9, r4, r0
 801d2f6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d2fa:	2800      	cmp	r0, #0
 801d2fc:	f000 80f2 	beq.w	801d4e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d300:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801d304:	d01b      	beq.n	801d33e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801d306:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801d30a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d30e:	fb0e fa0a 	mul.w	sl, lr, sl
 801d312:	fb0e fe02 	mul.w	lr, lr, r2
 801d316:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801d31a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d31e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801d322:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801d326:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d32a:	4452      	add	r2, sl
 801d32c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d330:	0a12      	lsrs	r2, r2, #8
 801d332:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d336:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801d33a:	ea42 020c 	orr.w	r2, r2, ip
 801d33e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d340:	2cff      	cmp	r4, #255	@ 0xff
 801d342:	d021      	beq.n	801d388 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d344:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d346:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d34a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d34c:	fb04 fb0b 	mul.w	fp, r4, fp
 801d350:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d352:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d356:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d358:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d35c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d360:	fb04 fa0a 	mul.w	sl, r4, sl
 801d364:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d368:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d36c:	44de      	add	lr, fp
 801d36e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d372:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d376:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d37a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d37e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d382:	ea4e 040a 	orr.w	r4, lr, sl
 801d386:	940c      	str	r4, [sp, #48]	@ 0x30
 801d388:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d38a:	2cff      	cmp	r4, #255	@ 0xff
 801d38c:	d021      	beq.n	801d3d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801d38e:	9c08      	ldr	r4, [sp, #32]
 801d390:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d394:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d396:	fb04 fb0b 	mul.w	fp, r4, fp
 801d39a:	9c08      	ldr	r4, [sp, #32]
 801d39c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d3a0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d3a2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d3a6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d3aa:	fb04 fa0a 	mul.w	sl, r4, sl
 801d3ae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d3b2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d3b6:	44de      	add	lr, fp
 801d3b8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d3bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d3c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d3c4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d3c8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d3cc:	ea4e 040a 	orr.w	r4, lr, sl
 801d3d0:	9408      	str	r4, [sp, #32]
 801d3d2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d3d4:	2cff      	cmp	r4, #255	@ 0xff
 801d3d6:	d021      	beq.n	801d41c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801d3d8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d3da:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d3de:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d3e0:	fb04 fb0b 	mul.w	fp, r4, fp
 801d3e4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d3e6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d3ea:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d3ec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d3f0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d3f4:	fb04 fa0a 	mul.w	sl, r4, sl
 801d3f8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d3fc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d400:	44de      	add	lr, fp
 801d402:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d406:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d40a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d40e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d412:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d416:	ea4e 040a 	orr.w	r4, lr, sl
 801d41a:	940d      	str	r4, [sp, #52]	@ 0x34
 801d41c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d41e:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801d422:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d426:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d42a:	9c08      	ldr	r4, [sp, #32]
 801d42c:	fb08 fc0c 	mul.w	ip, r8, ip
 801d430:	fb03 cc0e 	mla	ip, r3, lr, ip
 801d434:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d438:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d43a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d43e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d442:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d444:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d448:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801d44c:	fb08 f80e 	mul.w	r8, r8, lr
 801d450:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d454:	fb03 8202 	mla	r2, r3, r2, r8
 801d458:	9b08      	ldr	r3, [sp, #32]
 801d45a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d45e:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 801d462:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d464:	fb01 220a 	mla	r2, r1, sl, r2
 801d468:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 801d46c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d46e:	fb09 2901 	mla	r9, r9, r1, r2
 801d472:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d474:	4343      	muls	r3, r0
 801d476:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d47a:	1c58      	adds	r0, r3, #1
 801d47c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801d480:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d484:	783b      	ldrb	r3, [r7, #0]
 801d486:	ea4c 0c09 	orr.w	ip, ip, r9
 801d48a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801d48e:	fa5f f28c 	uxtb.w	r2, ip
 801d492:	b2c0      	uxtb	r0, r0
 801d494:	fb12 f201 	smulbb	r2, r2, r1
 801d498:	fb03 2300 	mla	r3, r3, r0, r2
 801d49c:	b29b      	uxth	r3, r3
 801d49e:	1c5a      	adds	r2, r3, #1
 801d4a0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d4a4:	787a      	ldrb	r2, [r7, #1]
 801d4a6:	fb12 f200 	smulbb	r2, r2, r0
 801d4aa:	121b      	asrs	r3, r3, #8
 801d4ac:	703b      	strb	r3, [r7, #0]
 801d4ae:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d4b2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d4b6:	fb03 2301 	mla	r3, r3, r1, r2
 801d4ba:	b29b      	uxth	r3, r3
 801d4bc:	1c5a      	adds	r2, r3, #1
 801d4be:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d4c2:	121b      	asrs	r3, r3, #8
 801d4c4:	707b      	strb	r3, [r7, #1]
 801d4c6:	78bb      	ldrb	r3, [r7, #2]
 801d4c8:	fb13 f000 	smulbb	r0, r3, r0
 801d4cc:	fb0c 0c01 	mla	ip, ip, r1, r0
 801d4d0:	fa1f fc8c 	uxth.w	ip, ip
 801d4d4:	f10c 0301 	add.w	r3, ip, #1
 801d4d8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d4dc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d4e0:	f887 c002 	strb.w	ip, [r7, #2]
 801d4e4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d4e6:	3703      	adds	r7, #3
 801d4e8:	441d      	add	r5, r3
 801d4ea:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d4ec:	441e      	add	r6, r3
 801d4ee:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d4f0:	3b01      	subs	r3, #1
 801d4f2:	9318      	str	r3, [sp, #96]	@ 0x60
 801d4f4:	e69f      	b.n	801d236 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d4f6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d4f8:	441d      	add	r5, r3
 801d4fa:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d4fc:	441e      	add	r6, r3
 801d4fe:	9b07      	ldr	r3, [sp, #28]
 801d500:	3b01      	subs	r3, #1
 801d502:	9307      	str	r3, [sp, #28]
 801d504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d506:	3303      	adds	r3, #3
 801d508:	930a      	str	r3, [sp, #40]	@ 0x28
 801d50a:	e674      	b.n	801d1f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801d50c:	d025      	beq.n	801d55a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801d50e:	9b07      	ldr	r3, [sp, #28]
 801d510:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 801d512:	3b01      	subs	r3, #1
 801d514:	fb00 5003 	mla	r0, r0, r3, r5
 801d518:	1400      	asrs	r0, r0, #16
 801d51a:	f53f ae89 	bmi.w	801d230 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d51e:	3901      	subs	r1, #1
 801d520:	4288      	cmp	r0, r1
 801d522:	f6bf ae85 	bge.w	801d230 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d526:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801d528:	fb01 6303 	mla	r3, r1, r3, r6
 801d52c:	141b      	asrs	r3, r3, #16
 801d52e:	f53f ae7f 	bmi.w	801d230 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d532:	3a01      	subs	r2, #1
 801d534:	4293      	cmp	r3, r2
 801d536:	f6bf ae7b 	bge.w	801d230 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d53a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d53c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d540:	f103 0e03 	add.w	lr, r3, #3
 801d544:	f1bb 0f00 	cmp.w	fp, #0
 801d548:	dc6e      	bgt.n	801d628 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801d54a:	9b07      	ldr	r3, [sp, #28]
 801d54c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d552:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d556:	4423      	add	r3, r4
 801d558:	930a      	str	r3, [sp, #40]	@ 0x28
 801d55a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	f340 81ab 	ble.w	801d8b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801d562:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d566:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d568:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d56c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d570:	eef0 6a62 	vmov.f32	s13, s5
 801d574:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d578:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d57c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d580:	ee16 5a90 	vmov	r5, s13
 801d584:	eef0 6a43 	vmov.f32	s13, s6
 801d588:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d58c:	ee16 6a90 	vmov	r6, s13
 801d590:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d594:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d598:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d59c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d5a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d5a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d5a8:	ee12 2a90 	vmov	r2, s5
 801d5ac:	eef0 2a47 	vmov.f32	s5, s14
 801d5b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5b4:	ee13 2a10 	vmov	r2, s6
 801d5b8:	9329      	str	r3, [sp, #164]	@ 0xa4
 801d5ba:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d5bc:	eeb0 3a67 	vmov.f32	s6, s15
 801d5c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5c4:	932a      	str	r3, [sp, #168]	@ 0xa8
 801d5c6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d5c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d5ca:	3b01      	subs	r3, #1
 801d5cc:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d5ce:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d5d0:	bf08      	it	eq
 801d5d2:	4613      	moveq	r3, r2
 801d5d4:	9307      	str	r3, [sp, #28]
 801d5d6:	e600      	b.n	801d1da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d5d8:	f1bc 0f00 	cmp.w	ip, #0
 801d5dc:	f43f ae6e 	beq.w	801d2bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d5e0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801d5e4:	9308      	str	r3, [sp, #32]
 801d5e6:	0e1b      	lsrs	r3, r3, #24
 801d5e8:	9311      	str	r3, [sp, #68]	@ 0x44
 801d5ea:	e667      	b.n	801d2bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d5ec:	f112 0801 	adds.w	r8, r2, #1
 801d5f0:	f53f af78 	bmi.w	801d4e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d5f4:	45c6      	cmp	lr, r8
 801d5f6:	f6ff af75 	blt.w	801d4e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d5fa:	f110 0801 	adds.w	r8, r0, #1
 801d5fe:	f53f af71 	bmi.w	801d4e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d602:	4543      	cmp	r3, r8
 801d604:	f6ff af6e 	blt.w	801d4e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d608:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801d60a:	b21b      	sxth	r3, r3
 801d60c:	9201      	str	r2, [sp, #4]
 801d60e:	9300      	str	r3, [sp, #0]
 801d610:	fa0f f38e 	sxth.w	r3, lr
 801d614:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d61a:	e9cd c404 	strd	ip, r4, [sp, #16]
 801d61e:	4639      	mov	r1, r7
 801d620:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801d622:	f7ff fc79 	bl	801cf18 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801d626:	e75d      	b.n	801d4e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d628:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801d62a:	142f      	asrs	r7, r5, #16
 801d62c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d62e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d632:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801d636:	1433      	asrs	r3, r6, #16
 801d638:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d63c:	fb02 7303 	mla	r3, r2, r3, r7
 801d640:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801d644:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d648:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d64c:	2900      	cmp	r1, #0
 801d64e:	f000 812a 	beq.w	801d8a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801d652:	687c      	ldr	r4, [r7, #4]
 801d654:	940e      	str	r4, [sp, #56]	@ 0x38
 801d656:	0e24      	lsrs	r4, r4, #24
 801d658:	9415      	str	r4, [sp, #84]	@ 0x54
 801d65a:	b178      	cbz	r0, 801d67c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d65c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801d660:	3a01      	subs	r2, #1
 801d662:	0092      	lsls	r2, r2, #2
 801d664:	3204      	adds	r2, #4
 801d666:	eb07 0802 	add.w	r8, r7, r2
 801d66a:	58ba      	ldr	r2, [r7, r2]
 801d66c:	9209      	str	r2, [sp, #36]	@ 0x24
 801d66e:	0e12      	lsrs	r2, r2, #24
 801d670:	9212      	str	r2, [sp, #72]	@ 0x48
 801d672:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801d676:	920f      	str	r2, [sp, #60]	@ 0x3c
 801d678:	0e12      	lsrs	r2, r2, #24
 801d67a:	9216      	str	r2, [sp, #88]	@ 0x58
 801d67c:	b289      	uxth	r1, r1
 801d67e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d680:	b280      	uxth	r0, r0
 801d682:	fb01 f900 	mul.w	r9, r1, r0
 801d686:	0109      	lsls	r1, r1, #4
 801d688:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d68c:	eba1 0809 	sub.w	r8, r1, r9
 801d690:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 801d694:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801d696:	b280      	uxth	r0, r0
 801d698:	fa1f f888 	uxth.w	r8, r8
 801d69c:	1a12      	subs	r2, r2, r0
 801d69e:	fb08 f101 	mul.w	r1, r8, r1
 801d6a2:	b292      	uxth	r2, r2
 801d6a4:	fb02 110c 	mla	r1, r2, ip, r1
 801d6a8:	fb00 1104 	mla	r1, r0, r4, r1
 801d6ac:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d6ae:	fb09 1104 	mla	r1, r9, r4, r1
 801d6b2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d6b6:	2900      	cmp	r1, #0
 801d6b8:	f000 80ec 	beq.w	801d894 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801d6bc:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801d6c0:	d019      	beq.n	801d6f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801d6c2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d6c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d6ca:	fb0c fa0a 	mul.w	sl, ip, sl
 801d6ce:	fb0c fc03 	mul.w	ip, ip, r3
 801d6d2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d6d6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d6da:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801d6de:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d6e2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d6e6:	4453      	add	r3, sl
 801d6e8:	0a3f      	lsrs	r7, r7, #8
 801d6ea:	0a1b      	lsrs	r3, r3, #8
 801d6ec:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801d6f0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d6f4:	433b      	orrs	r3, r7
 801d6f6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d6f8:	2cff      	cmp	r4, #255	@ 0xff
 801d6fa:	d020      	beq.n	801d73e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801d6fc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d6fe:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d702:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d704:	4367      	muls	r7, r4
 801d706:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d708:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d70c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d710:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d712:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d716:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d71a:	fb04 fa0a 	mul.w	sl, r4, sl
 801d71e:	44bc      	add	ip, r7
 801d720:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d724:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d728:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d72c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d730:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d734:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d738:	ea4c 040a 	orr.w	r4, ip, sl
 801d73c:	940e      	str	r4, [sp, #56]	@ 0x38
 801d73e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d740:	2cff      	cmp	r4, #255	@ 0xff
 801d742:	d020      	beq.n	801d786 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801d744:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d746:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d74a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d74c:	4367      	muls	r7, r4
 801d74e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d750:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d754:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d758:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d75a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d75e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d762:	fb04 fa0a 	mul.w	sl, r4, sl
 801d766:	44bc      	add	ip, r7
 801d768:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d76c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d770:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d774:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d778:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d77c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d780:	ea4c 040a 	orr.w	r4, ip, sl
 801d784:	9409      	str	r4, [sp, #36]	@ 0x24
 801d786:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d788:	2cff      	cmp	r4, #255	@ 0xff
 801d78a:	d020      	beq.n	801d7ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801d78c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d78e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d792:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d794:	4367      	muls	r7, r4
 801d796:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d798:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d79c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d7a0:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d7a2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d7a6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d7aa:	fb04 fa0a 	mul.w	sl, r4, sl
 801d7ae:	44bc      	add	ip, r7
 801d7b0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d7b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d7b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d7bc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d7c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d7c4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d7c8:	ea4c 040a 	orr.w	r4, ip, sl
 801d7cc:	940f      	str	r4, [sp, #60]	@ 0x3c
 801d7ce:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d7d0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801d7d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d7d8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d7dc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d7de:	fb08 f707 	mul.w	r7, r8, r7
 801d7e2:	fb02 770c 	mla	r7, r2, ip, r7
 801d7e6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d7ea:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d7ec:	fb00 770c 	mla	r7, r0, ip, r7
 801d7f0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d7f4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d7f6:	fb09 770c 	mla	r7, r9, ip, r7
 801d7fa:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801d7fe:	fb08 f80c 	mul.w	r8, r8, ip
 801d802:	0a3f      	lsrs	r7, r7, #8
 801d804:	fb02 8303 	mla	r3, r2, r3, r8
 801d808:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d80a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801d80e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801d812:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d814:	fb00 330a 	mla	r3, r0, sl, r3
 801d818:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801d81c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801d81e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d822:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d824:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d828:	434b      	muls	r3, r1
 801d82a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d82e:	1c59      	adds	r1, r3, #1
 801d830:	ea47 070c 	orr.w	r7, r7, ip
 801d834:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d838:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d83c:	b2fa      	uxtb	r2, r7
 801d83e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d842:	fb12 f200 	smulbb	r2, r2, r0
 801d846:	b2c9      	uxtb	r1, r1
 801d848:	fb03 2301 	mla	r3, r3, r1, r2
 801d84c:	b29b      	uxth	r3, r3
 801d84e:	1c5a      	adds	r2, r3, #1
 801d850:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d854:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801d858:	fb12 f201 	smulbb	r2, r2, r1
 801d85c:	121b      	asrs	r3, r3, #8
 801d85e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d862:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801d866:	0c3f      	lsrs	r7, r7, #16
 801d868:	fb03 2300 	mla	r3, r3, r0, r2
 801d86c:	b29b      	uxth	r3, r3
 801d86e:	1c5a      	adds	r2, r3, #1
 801d870:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d874:	121b      	asrs	r3, r3, #8
 801d876:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d87a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801d87e:	fb13 f101 	smulbb	r1, r3, r1
 801d882:	fb07 1700 	mla	r7, r7, r0, r1
 801d886:	b2bf      	uxth	r7, r7
 801d888:	1c79      	adds	r1, r7, #1
 801d88a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801d88e:	123f      	asrs	r7, r7, #8
 801d890:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801d894:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d896:	f10e 0e03 	add.w	lr, lr, #3
 801d89a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d89e:	441d      	add	r5, r3
 801d8a0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d8a2:	441e      	add	r6, r3
 801d8a4:	e64e      	b.n	801d544 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801d8a6:	2800      	cmp	r0, #0
 801d8a8:	f43f aee8 	beq.w	801d67c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d8ac:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801d8b0:	9209      	str	r2, [sp, #36]	@ 0x24
 801d8b2:	0e12      	lsrs	r2, r2, #24
 801d8b4:	9212      	str	r2, [sp, #72]	@ 0x48
 801d8b6:	e6e1      	b.n	801d67c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d8b8:	b01d      	add	sp, #116	@ 0x74
 801d8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d8be <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801d8be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8c2:	b087      	sub	sp, #28
 801d8c4:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801d8c8:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801d8cc:	fb05 7003 	mla	r0, r5, r3, r7
 801d8d0:	2d00      	cmp	r5, #0
 801d8d2:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801d8d6:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801d8da:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801d8de:	f2c0 810a 	blt.w	801daf6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801d8e2:	45a8      	cmp	r8, r5
 801d8e4:	f340 8107 	ble.w	801daf6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801d8e8:	2f00      	cmp	r7, #0
 801d8ea:	f2c0 8102 	blt.w	801daf2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801d8ee:	42bb      	cmp	r3, r7
 801d8f0:	f340 80ff 	ble.w	801daf2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801d8f4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801d8f8:	1c7a      	adds	r2, r7, #1
 801d8fa:	f100 80ff 	bmi.w	801dafc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801d8fe:	4293      	cmp	r3, r2
 801d900:	f340 80fc 	ble.w	801dafc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801d904:	2c00      	cmp	r4, #0
 801d906:	f000 80fb 	beq.w	801db00 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801d90a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d90e:	3501      	adds	r5, #1
 801d910:	f100 80fa 	bmi.w	801db08 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801d914:	45a8      	cmp	r8, r5
 801d916:	f340 80f7 	ble.w	801db08 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801d91a:	f1be 0f00 	cmp.w	lr, #0
 801d91e:	f000 80f6 	beq.w	801db0e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801d922:	2f00      	cmp	r7, #0
 801d924:	f2c0 80ee 	blt.w	801db04 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801d928:	42bb      	cmp	r3, r7
 801d92a:	f340 80eb 	ble.w	801db04 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801d92e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801d932:	3701      	adds	r7, #1
 801d934:	f100 80ee 	bmi.w	801db14 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801d938:	42bb      	cmp	r3, r7
 801d93a:	f340 80eb 	ble.w	801db14 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801d93e:	2c00      	cmp	r4, #0
 801d940:	f000 80ea 	beq.w	801db18 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801d944:	3301      	adds	r3, #1
 801d946:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d94a:	fa1f fc84 	uxth.w	ip, r4
 801d94e:	fa1f fe8e 	uxth.w	lr, lr
 801d952:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801d956:	fb0c f90e 	mul.w	r9, ip, lr
 801d95a:	0e13      	lsrs	r3, r2, #24
 801d95c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801d960:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801d964:	9302      	str	r3, [sp, #8]
 801d966:	ebac 0709 	sub.w	r7, ip, r9
 801d96a:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801d96e:	fa1f f48e 	uxth.w	r4, lr
 801d972:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801d976:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d97a:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801d97e:	fb0a fe0e 	mul.w	lr, sl, lr
 801d982:	1b1b      	subs	r3, r3, r4
 801d984:	fb0a f606 	mul.w	r6, sl, r6
 801d988:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801d98c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801d990:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801d994:	b29b      	uxth	r3, r3
 801d996:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d99a:	b2bf      	uxth	r7, r7
 801d99c:	9301      	str	r3, [sp, #4]
 801d99e:	44e6      	add	lr, ip
 801d9a0:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801d9a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d9a8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d9ac:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801d9b0:	9303      	str	r3, [sp, #12]
 801d9b2:	0a33      	lsrs	r3, r6, #8
 801d9b4:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801d9b8:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d9bc:	9304      	str	r3, [sp, #16]
 801d9be:	fb0b f606 	mul.w	r6, fp, r6
 801d9c2:	fb0b f000 	mul.w	r0, fp, r0
 801d9c6:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801d9ca:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d9ce:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d9d2:	44b6      	add	lr, r6
 801d9d4:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801d9d8:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801d9dc:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801d9e0:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801d9e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d9e8:	fb08 f606 	mul.w	r6, r8, r6
 801d9ec:	0a03      	lsrs	r3, r0, #8
 801d9ee:	fb08 f505 	mul.w	r5, r8, r5
 801d9f2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d9f6:	0a30      	lsrs	r0, r6, #8
 801d9f8:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d9fc:	9305      	str	r3, [sp, #20]
 801d9fe:	0e13      	lsrs	r3, r2, #24
 801da00:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801da04:	fb0e fe07 	mul.w	lr, lr, r7
 801da08:	4430      	add	r0, r6
 801da0a:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801da0e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801da12:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801da16:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801da1a:	0a00      	lsrs	r0, r0, #8
 801da1c:	435e      	muls	r6, r3
 801da1e:	0a2d      	lsrs	r5, r5, #8
 801da20:	435a      	muls	r2, r3
 801da22:	9b03      	ldr	r3, [sp, #12]
 801da24:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801da28:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801da2c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801da30:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801da34:	44b4      	add	ip, r6
 801da36:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801da3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801da3e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801da42:	9e01      	ldr	r6, [sp, #4]
 801da44:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801da48:	fb03 ee06 	mla	lr, r3, r6, lr
 801da4c:	9b04      	ldr	r3, [sp, #16]
 801da4e:	0a12      	lsrs	r2, r2, #8
 801da50:	fb0c ee09 	mla	lr, ip, r9, lr
 801da54:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801da58:	9b05      	ldr	r3, [sp, #20]
 801da5a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801da5e:	fb00 ee04 	mla	lr, r0, r4, lr
 801da62:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801da66:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801da6a:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801da6e:	9b01      	ldr	r3, [sp, #4]
 801da70:	fb07 fe0e 	mul.w	lr, r7, lr
 801da74:	fb07 f70b 	mul.w	r7, r7, fp
 801da78:	fb03 ee06 	mla	lr, r3, r6, lr
 801da7c:	fb03 730a 	mla	r3, r3, sl, r7
 801da80:	fb09 e202 	mla	r2, r9, r2, lr
 801da84:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801da88:	fb04 2e0e 	mla	lr, r4, lr, r2
 801da8c:	fb04 3408 	mla	r4, r4, r8, r3
 801da90:	9b02      	ldr	r3, [sp, #8]
 801da92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801da96:	fb09 4903 	mla	r9, r9, r3, r4
 801da9a:	780b      	ldrb	r3, [r1, #0]
 801da9c:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801daa0:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801daa4:	ea40 0e0e 	orr.w	lr, r0, lr
 801daa8:	fa5f f989 	uxtb.w	r9, r9
 801daac:	fb03 f209 	mul.w	r2, r3, r9
 801dab0:	1c53      	adds	r3, r2, #1
 801dab2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dab6:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801daba:	700b      	strb	r3, [r1, #0]
 801dabc:	784b      	ldrb	r3, [r1, #1]
 801dabe:	fb03 f309 	mul.w	r3, r3, r9
 801dac2:	1c5a      	adds	r2, r3, #1
 801dac4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801dac8:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801dacc:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801dad0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dad4:	704b      	strb	r3, [r1, #1]
 801dad6:	788b      	ldrb	r3, [r1, #2]
 801dad8:	fb03 f909 	mul.w	r9, r3, r9
 801dadc:	f109 0301 	add.w	r3, r9, #1
 801dae0:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801dae4:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801dae8:	f881 e002 	strb.w	lr, [r1, #2]
 801daec:	b007      	add	sp, #28
 801daee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daf2:	2600      	movs	r6, #0
 801daf4:	e700      	b.n	801d8f8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801daf6:	2000      	movs	r0, #0
 801daf8:	4606      	mov	r6, r0
 801dafa:	e708      	b.n	801d90e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801dafc:	2000      	movs	r0, #0
 801dafe:	e706      	b.n	801d90e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801db00:	4620      	mov	r0, r4
 801db02:	e704      	b.n	801d90e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801db04:	2500      	movs	r5, #0
 801db06:	e714      	b.n	801d932 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801db08:	2200      	movs	r2, #0
 801db0a:	4615      	mov	r5, r2
 801db0c:	e71d      	b.n	801d94a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801db0e:	4672      	mov	r2, lr
 801db10:	4675      	mov	r5, lr
 801db12:	e71a      	b.n	801d94a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801db14:	2200      	movs	r2, #0
 801db16:	e718      	b.n	801d94a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801db18:	4622      	mov	r2, r4
 801db1a:	e716      	b.n	801d94a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801db1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801db1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db20:	b099      	sub	sp, #100	@ 0x64
 801db22:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 801db26:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801db28:	9017      	str	r0, [sp, #92]	@ 0x5c
 801db2a:	9306      	str	r3, [sp, #24]
 801db2c:	6850      	ldr	r0, [r2, #4]
 801db2e:	6812      	ldr	r2, [r2, #0]
 801db30:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 801db34:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 801db38:	fb00 1303 	mla	r3, r0, r3, r1
 801db3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db40:	18d3      	adds	r3, r2, r3
 801db42:	9309      	str	r3, [sp, #36]	@ 0x24
 801db44:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801db46:	681b      	ldr	r3, [r3, #0]
 801db48:	930e      	str	r3, [sp, #56]	@ 0x38
 801db4a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	dc03      	bgt.n	801db58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801db50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801db52:	2b00      	cmp	r3, #0
 801db54:	f340 8360 	ble.w	801e218 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801db58:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801db5a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801db5e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801db62:	1e48      	subs	r0, r1, #1
 801db64:	1e57      	subs	r7, r2, #1
 801db66:	9b06      	ldr	r3, [sp, #24]
 801db68:	2b00      	cmp	r3, #0
 801db6a:	f340 817b 	ble.w	801de64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801db6e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801db72:	ea4f 4326 	mov.w	r3, r6, asr #16
 801db76:	d406      	bmi.n	801db86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801db78:	4584      	cmp	ip, r0
 801db7a:	da04      	bge.n	801db86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	db02      	blt.n	801db86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801db80:	42bb      	cmp	r3, r7
 801db82:	f2c0 8170 	blt.w	801de66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801db86:	f11c 0c01 	adds.w	ip, ip, #1
 801db8a:	f100 8160 	bmi.w	801de4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801db8e:	4561      	cmp	r1, ip
 801db90:	f2c0 815d 	blt.w	801de4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801db94:	3301      	adds	r3, #1
 801db96:	f100 815a 	bmi.w	801de4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801db9a:	429a      	cmp	r2, r3
 801db9c:	f2c0 8157 	blt.w	801de4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801dba0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801dba4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801dba6:	f1b8 0f00 	cmp.w	r8, #0
 801dbaa:	f340 8179 	ble.w	801dea0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801dbae:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801dbb0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801dbb4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801dbb6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801dbba:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801dbbe:	142a      	asrs	r2, r5, #16
 801dbc0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801dbc4:	689b      	ldr	r3, [r3, #8]
 801dbc6:	f100 81be 	bmi.w	801df46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801dbca:	f103 39ff 	add.w	r9, r3, #4294967295
 801dbce:	454a      	cmp	r2, r9
 801dbd0:	f280 81b9 	bge.w	801df46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801dbd4:	f1bc 0f00 	cmp.w	ip, #0
 801dbd8:	f2c0 81b5 	blt.w	801df46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801dbdc:	f10e 39ff 	add.w	r9, lr, #4294967295
 801dbe0:	45cc      	cmp	ip, r9
 801dbe2:	f280 81b0 	bge.w	801df46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801dbe6:	b21b      	sxth	r3, r3
 801dbe8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dbea:	fb0c 2203 	mla	r2, ip, r3, r2
 801dbee:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801dbf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801dbf6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801dbfa:	2900      	cmp	r1, #0
 801dbfc:	f000 8197 	beq.w	801df2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801dc00:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801dc04:	940a      	str	r4, [sp, #40]	@ 0x28
 801dc06:	0e24      	lsrs	r4, r4, #24
 801dc08:	9411      	str	r4, [sp, #68]	@ 0x44
 801dc0a:	b180      	cbz	r0, 801dc2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801dc0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801dc10:	3b01      	subs	r3, #1
 801dc12:	009b      	lsls	r3, r3, #2
 801dc14:	3304      	adds	r3, #4
 801dc16:	eb09 0c03 	add.w	ip, r9, r3
 801dc1a:	f859 3003 	ldr.w	r3, [r9, r3]
 801dc1e:	9307      	str	r3, [sp, #28]
 801dc20:	0e1b      	lsrs	r3, r3, #24
 801dc22:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dc24:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801dc28:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dc2a:	0e1b      	lsrs	r3, r3, #24
 801dc2c:	9312      	str	r3, [sp, #72]	@ 0x48
 801dc2e:	b289      	uxth	r1, r1
 801dc30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801dc32:	b280      	uxth	r0, r0
 801dc34:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dc36:	fb01 fa00 	mul.w	sl, r1, r0
 801dc3a:	0109      	lsls	r1, r1, #4
 801dc3c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801dc40:	eba1 090a 	sub.w	r9, r1, sl
 801dc44:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801dc48:	b280      	uxth	r0, r0
 801dc4a:	fa1f f989 	uxth.w	r9, r9
 801dc4e:	1a09      	subs	r1, r1, r0
 801dc50:	fb09 f303 	mul.w	r3, r9, r3
 801dc54:	b289      	uxth	r1, r1
 801dc56:	fb01 330e 	mla	r3, r1, lr, r3
 801dc5a:	fb00 3304 	mla	r3, r0, r4, r3
 801dc5e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dc60:	fb0a 3304 	mla	r3, sl, r4, r3
 801dc64:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dc68:	2b00      	cmp	r3, #0
 801dc6a:	f000 80e8 	beq.w	801de3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801dc6e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801dc72:	d01b      	beq.n	801dcac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801dc74:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 801dc78:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801dc7c:	fb0e fb0b 	mul.w	fp, lr, fp
 801dc80:	fb0e fe02 	mul.w	lr, lr, r2
 801dc84:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801dc88:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dc8c:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801dc90:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801dc94:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801dc98:	445a      	add	r2, fp
 801dc9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dc9e:	0a12      	lsrs	r2, r2, #8
 801dca0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801dca4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801dca8:	ea42 020c 	orr.w	r2, r2, ip
 801dcac:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801dcae:	2cff      	cmp	r4, #255	@ 0xff
 801dcb0:	d021      	beq.n	801dcf6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801dcb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dcb4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801dcb8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801dcba:	fb04 fc0c 	mul.w	ip, r4, ip
 801dcbe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dcc0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801dcc4:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801dcc8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801dcca:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801dcce:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dcd2:	fb04 fb0b 	mul.w	fp, r4, fp
 801dcd6:	44e6      	add	lr, ip
 801dcd8:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801dcdc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dce0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801dce4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dce8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801dcec:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801dcf0:	ea4e 040b 	orr.w	r4, lr, fp
 801dcf4:	940a      	str	r4, [sp, #40]	@ 0x28
 801dcf6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dcf8:	2cff      	cmp	r4, #255	@ 0xff
 801dcfa:	d021      	beq.n	801dd40 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801dcfc:	9c07      	ldr	r4, [sp, #28]
 801dcfe:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801dd02:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dd04:	fb04 fc0c 	mul.w	ip, r4, ip
 801dd08:	9c07      	ldr	r4, [sp, #28]
 801dd0a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801dd0e:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801dd12:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dd14:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801dd18:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd1c:	fb04 fb0b 	mul.w	fp, r4, fp
 801dd20:	44e6      	add	lr, ip
 801dd22:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801dd26:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd2a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801dd2e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd32:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801dd36:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801dd3a:	ea4e 040b 	orr.w	r4, lr, fp
 801dd3e:	9407      	str	r4, [sp, #28]
 801dd40:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dd42:	2cff      	cmp	r4, #255	@ 0xff
 801dd44:	d021      	beq.n	801dd8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801dd46:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dd48:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801dd4c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dd4e:	fb04 fc0c 	mul.w	ip, r4, ip
 801dd52:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dd54:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801dd58:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801dd5c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dd5e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801dd62:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd66:	fb04 fb0b 	mul.w	fp, r4, fp
 801dd6a:	44e6      	add	lr, ip
 801dd6c:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801dd70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd74:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801dd78:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd7c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801dd80:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801dd84:	ea4e 040b 	orr.w	r4, lr, fp
 801dd88:	940b      	str	r4, [sp, #44]	@ 0x2c
 801dd8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dd8c:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801dd90:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801dd94:	2bff      	cmp	r3, #255	@ 0xff
 801dd96:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801dd9a:	9c07      	ldr	r4, [sp, #28]
 801dd9c:	fb09 fc0c 	mul.w	ip, r9, ip
 801dda0:	fb01 cc0e 	mla	ip, r1, lr, ip
 801dda4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801dda8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ddaa:	fb00 cc0e 	mla	ip, r0, lr, ip
 801ddae:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801ddb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ddb4:	fb0a cc0e 	mla	ip, sl, lr, ip
 801ddb8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801ddbc:	fb09 f90e 	mul.w	r9, r9, lr
 801ddc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ddc4:	fb01 9202 	mla	r2, r1, r2, r9
 801ddc8:	9907      	ldr	r1, [sp, #28]
 801ddca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ddce:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 801ddd2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ddd4:	fb00 220b 	mla	r2, r0, fp, r2
 801ddd8:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 801dddc:	fb0a 2a00 	mla	sl, sl, r0, r2
 801dde0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dde4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dde8:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ddec:	fa5f f08c 	uxtb.w	r0, ip
 801ddf0:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801ddf4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ddf8:	f000 80a2 	beq.w	801df40 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801ddfc:	43db      	mvns	r3, r3
 801ddfe:	783a      	ldrb	r2, [r7, #0]
 801de00:	f897 a002 	ldrb.w	sl, [r7, #2]
 801de04:	b2db      	uxtb	r3, r3
 801de06:	fb02 fe03 	mul.w	lr, r2, r3
 801de0a:	fb0a fa03 	mul.w	sl, sl, r3
 801de0e:	f10e 0201 	add.w	r2, lr, #1
 801de12:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801de16:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801de1a:	703a      	strb	r2, [r7, #0]
 801de1c:	787a      	ldrb	r2, [r7, #1]
 801de1e:	fb02 f003 	mul.w	r0, r2, r3
 801de22:	f10a 0301 	add.w	r3, sl, #1
 801de26:	1c42      	adds	r2, r0, #1
 801de28:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801de2c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801de30:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801de34:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801de38:	707a      	strb	r2, [r7, #1]
 801de3a:	f887 c002 	strb.w	ip, [r7, #2]
 801de3e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801de40:	3703      	adds	r7, #3
 801de42:	f108 38ff 	add.w	r8, r8, #4294967295
 801de46:	441d      	add	r5, r3
 801de48:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801de4a:	441e      	add	r6, r3
 801de4c:	e6ab      	b.n	801dba6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801de4e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801de50:	441d      	add	r5, r3
 801de52:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801de54:	441e      	add	r6, r3
 801de56:	9b06      	ldr	r3, [sp, #24]
 801de58:	3b01      	subs	r3, #1
 801de5a:	9306      	str	r3, [sp, #24]
 801de5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de5e:	3303      	adds	r3, #3
 801de60:	9309      	str	r3, [sp, #36]	@ 0x24
 801de62:	e680      	b.n	801db66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801de64:	d024      	beq.n	801deb0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801de66:	9b06      	ldr	r3, [sp, #24]
 801de68:	9825      	ldr	r0, [sp, #148]	@ 0x94
 801de6a:	3b01      	subs	r3, #1
 801de6c:	fb00 5003 	mla	r0, r0, r3, r5
 801de70:	1400      	asrs	r0, r0, #16
 801de72:	f53f ae95 	bmi.w	801dba0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801de76:	3901      	subs	r1, #1
 801de78:	4288      	cmp	r0, r1
 801de7a:	f6bf ae91 	bge.w	801dba0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801de7e:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801de80:	fb01 6303 	mla	r3, r1, r3, r6
 801de84:	141b      	asrs	r3, r3, #16
 801de86:	f53f ae8b 	bmi.w	801dba0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801de8a:	3a01      	subs	r2, #1
 801de8c:	4293      	cmp	r3, r2
 801de8e:	f6bf ae87 	bge.w	801dba0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801de92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de94:	f8dd b018 	ldr.w	fp, [sp, #24]
 801de98:	1cdf      	adds	r7, r3, #3
 801de9a:	f1bb 0f00 	cmp.w	fp, #0
 801de9e:	dc6e      	bgt.n	801df7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801dea0:	9b06      	ldr	r3, [sp, #24]
 801dea2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801dea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dea8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801deac:	4423      	add	r3, r4
 801deae:	9309      	str	r3, [sp, #36]	@ 0x24
 801deb0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	f340 81b0 	ble.w	801e218 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801deb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801debc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801debe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dec2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dec6:	eef0 6a62 	vmov.f32	s13, s5
 801deca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dece:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ded2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ded6:	ee16 5a90 	vmov	r5, s13
 801deda:	eef0 6a43 	vmov.f32	s13, s6
 801dede:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dee2:	ee16 6a90 	vmov	r6, s13
 801dee6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801deea:	ee61 7a27 	vmul.f32	s15, s2, s15
 801deee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801def2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801def6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801defa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801defe:	ee12 2a90 	vmov	r2, s5
 801df02:	eef0 2a47 	vmov.f32	s5, s14
 801df06:	fb92 f3f3 	sdiv	r3, r2, r3
 801df0a:	ee13 2a10 	vmov	r2, s6
 801df0e:	9325      	str	r3, [sp, #148]	@ 0x94
 801df10:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801df12:	eeb0 3a67 	vmov.f32	s6, s15
 801df16:	fb92 f3f3 	sdiv	r3, r2, r3
 801df1a:	9326      	str	r3, [sp, #152]	@ 0x98
 801df1c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801df1e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801df20:	3b01      	subs	r3, #1
 801df22:	9315      	str	r3, [sp, #84]	@ 0x54
 801df24:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801df26:	bf08      	it	eq
 801df28:	4613      	moveq	r3, r2
 801df2a:	9306      	str	r3, [sp, #24]
 801df2c:	e60d      	b.n	801db4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801df2e:	2800      	cmp	r0, #0
 801df30:	f43f ae7d 	beq.w	801dc2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801df34:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801df38:	9307      	str	r3, [sp, #28]
 801df3a:	0e1b      	lsrs	r3, r3, #24
 801df3c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801df3e:	e676      	b.n	801dc2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801df40:	7038      	strb	r0, [r7, #0]
 801df42:	7079      	strb	r1, [r7, #1]
 801df44:	e779      	b.n	801de3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801df46:	f112 0901 	adds.w	r9, r2, #1
 801df4a:	f53f af78 	bmi.w	801de3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801df4e:	454b      	cmp	r3, r9
 801df50:	f6ff af75 	blt.w	801de3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801df54:	f11c 0901 	adds.w	r9, ip, #1
 801df58:	f53f af71 	bmi.w	801de3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801df5c:	45ce      	cmp	lr, r9
 801df5e:	f6ff af6e 	blt.w	801de3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801df62:	b21b      	sxth	r3, r3
 801df64:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801df68:	fa0f f28e 	sxth.w	r2, lr
 801df6c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801df70:	9200      	str	r2, [sp, #0]
 801df72:	4639      	mov	r1, r7
 801df74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801df76:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801df78:	f7ff fca1 	bl	801d8be <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801df7c:	e75f      	b.n	801de3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801df7e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801df80:	1429      	asrs	r1, r5, #16
 801df82:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801df84:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801df88:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801df8c:	1433      	asrs	r3, r6, #16
 801df8e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801df92:	fb0c 1303 	mla	r3, ip, r3, r1
 801df96:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801df98:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801df9c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801dfa0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801dfa4:	2a00      	cmp	r2, #0
 801dfa6:	f000 8129 	beq.w	801e1fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801dfaa:	684c      	ldr	r4, [r1, #4]
 801dfac:	940c      	str	r4, [sp, #48]	@ 0x30
 801dfae:	0e24      	lsrs	r4, r4, #24
 801dfb0:	9413      	str	r4, [sp, #76]	@ 0x4c
 801dfb2:	b198      	cbz	r0, 801dfdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801dfb4:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 801dfb8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dfbc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801dfc0:	f10c 0c04 	add.w	ip, ip, #4
 801dfc4:	eb01 080c 	add.w	r8, r1, ip
 801dfc8:	f851 100c 	ldr.w	r1, [r1, ip]
 801dfcc:	9108      	str	r1, [sp, #32]
 801dfce:	0e09      	lsrs	r1, r1, #24
 801dfd0:	9110      	str	r1, [sp, #64]	@ 0x40
 801dfd2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801dfd6:	910d      	str	r1, [sp, #52]	@ 0x34
 801dfd8:	0e09      	lsrs	r1, r1, #24
 801dfda:	9114      	str	r1, [sp, #80]	@ 0x50
 801dfdc:	b292      	uxth	r2, r2
 801dfde:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801dfe0:	b280      	uxth	r0, r0
 801dfe2:	fb02 f900 	mul.w	r9, r2, r0
 801dfe6:	0112      	lsls	r2, r2, #4
 801dfe8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801dfec:	eba2 0809 	sub.w	r8, r2, r9
 801dff0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801dff4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dff6:	b280      	uxth	r0, r0
 801dff8:	fa1f f888 	uxth.w	r8, r8
 801dffc:	1a09      	subs	r1, r1, r0
 801dffe:	fb08 f202 	mul.w	r2, r8, r2
 801e002:	b289      	uxth	r1, r1
 801e004:	fb01 220e 	mla	r2, r1, lr, r2
 801e008:	fb00 2204 	mla	r2, r0, r4, r2
 801e00c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e00e:	fb09 2204 	mla	r2, r9, r4, r2
 801e012:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e016:	2a00      	cmp	r2, #0
 801e018:	f000 80e8 	beq.w	801e1ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801e01c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801e020:	d01b      	beq.n	801e05a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801e022:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e026:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e02a:	fb0e fa0a 	mul.w	sl, lr, sl
 801e02e:	fb0e fe03 	mul.w	lr, lr, r3
 801e032:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e036:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e03a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801e03e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e042:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e046:	4453      	add	r3, sl
 801e048:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e04c:	0a1b      	lsrs	r3, r3, #8
 801e04e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e052:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e056:	ea43 030c 	orr.w	r3, r3, ip
 801e05a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e05c:	2cff      	cmp	r4, #255	@ 0xff
 801e05e:	d021      	beq.n	801e0a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801e060:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e062:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e066:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e068:	fb04 fc0c 	mul.w	ip, r4, ip
 801e06c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e06e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801e072:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e076:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e078:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e07c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e080:	fb04 fa0a 	mul.w	sl, r4, sl
 801e084:	44e6      	add	lr, ip
 801e086:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e08a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e08e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e092:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e096:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e09a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e09e:	ea4e 040a 	orr.w	r4, lr, sl
 801e0a2:	940c      	str	r4, [sp, #48]	@ 0x30
 801e0a4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e0a6:	2cff      	cmp	r4, #255	@ 0xff
 801e0a8:	d021      	beq.n	801e0ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801e0aa:	9c08      	ldr	r4, [sp, #32]
 801e0ac:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e0b0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e0b2:	fb04 fc0c 	mul.w	ip, r4, ip
 801e0b6:	9c08      	ldr	r4, [sp, #32]
 801e0b8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801e0bc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e0be:	fb04 fa0e 	mul.w	sl, r4, lr
 801e0c2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801e0c6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e0ca:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e0ce:	44e6      	add	lr, ip
 801e0d0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e0d4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e0d8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e0dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e0e0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e0e4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e0e8:	ea4e 040a 	orr.w	r4, lr, sl
 801e0ec:	9408      	str	r4, [sp, #32]
 801e0ee:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e0f0:	2cff      	cmp	r4, #255	@ 0xff
 801e0f2:	d021      	beq.n	801e138 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801e0f4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e0f6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e0fa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e0fc:	fb04 fc0c 	mul.w	ip, r4, ip
 801e100:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e102:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801e106:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e10a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e10c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e110:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e114:	fb04 fa0a 	mul.w	sl, r4, sl
 801e118:	44e6      	add	lr, ip
 801e11a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e11e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e122:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e126:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e12a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e12e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e132:	ea4e 040a 	orr.w	r4, lr, sl
 801e136:	940d      	str	r4, [sp, #52]	@ 0x34
 801e138:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e13a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801e13e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e142:	2aff      	cmp	r2, #255	@ 0xff
 801e144:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e148:	9c08      	ldr	r4, [sp, #32]
 801e14a:	fb08 fc0c 	mul.w	ip, r8, ip
 801e14e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801e152:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e156:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e158:	fb00 cc0e 	mla	ip, r0, lr, ip
 801e15c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e160:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e162:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e166:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801e16a:	fb08 f80e 	mul.w	r8, r8, lr
 801e16e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e172:	fb01 8303 	mla	r3, r1, r3, r8
 801e176:	9908      	ldr	r1, [sp, #32]
 801e178:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e17c:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801e180:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e182:	fb00 330a 	mla	r3, r0, sl, r3
 801e186:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 801e18a:	fb09 3e0e 	mla	lr, r9, lr, r3
 801e18e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e192:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801e196:	ea4c 0c0e 	orr.w	ip, ip, lr
 801e19a:	fa5f f08c 	uxtb.w	r0, ip
 801e19e:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801e1a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e1a6:	d032      	beq.n	801e20e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801e1a8:	43d2      	mvns	r2, r2
 801e1aa:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801e1ae:	b2d2      	uxtb	r2, r2
 801e1b0:	fb0e fe02 	mul.w	lr, lr, r2
 801e1b4:	f10e 0301 	add.w	r3, lr, #1
 801e1b8:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801e1bc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e1c0:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801e1c4:	4350      	muls	r0, r2
 801e1c6:	f807 3c03 	strb.w	r3, [r7, #-3]
 801e1ca:	1c43      	adds	r3, r0, #1
 801e1cc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e1d0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e1d4:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801e1d8:	4353      	muls	r3, r2
 801e1da:	f807 1c02 	strb.w	r1, [r7, #-2]
 801e1de:	1c5a      	adds	r2, r3, #1
 801e1e0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e1e4:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801e1e8:	f807 cc01 	strb.w	ip, [r7, #-1]
 801e1ec:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e1ee:	3703      	adds	r7, #3
 801e1f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e1f4:	441d      	add	r5, r3
 801e1f6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e1f8:	441e      	add	r6, r3
 801e1fa:	e64e      	b.n	801de9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801e1fc:	2800      	cmp	r0, #0
 801e1fe:	f43f aeed 	beq.w	801dfdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801e202:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801e206:	9108      	str	r1, [sp, #32]
 801e208:	0e09      	lsrs	r1, r1, #24
 801e20a:	9110      	str	r1, [sp, #64]	@ 0x40
 801e20c:	e6e6      	b.n	801dfdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801e20e:	f807 0c03 	strb.w	r0, [r7, #-3]
 801e212:	f807 1c02 	strb.w	r1, [r7, #-2]
 801e216:	e7e7      	b.n	801e1e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801e218:	b019      	add	sp, #100	@ 0x64
 801e21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e220 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801e220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e224:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 801e228:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801e22c:	2c00      	cmp	r4, #0
 801e22e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801e232:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 801e236:	fb00 4e03 	mla	lr, r0, r3, r4
 801e23a:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801e23e:	f2c0 80b8 	blt.w	801e3b2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801e242:	45a1      	cmp	r9, r4
 801e244:	f340 80b5 	ble.w	801e3b2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801e248:	2800      	cmp	r0, #0
 801e24a:	f2c0 80b2 	blt.w	801e3b2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801e24e:	4580      	cmp	r8, r0
 801e250:	f340 80af 	ble.w	801e3b2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801e254:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801e258:	f01e 0f01 	tst.w	lr, #1
 801e25c:	5d56      	ldrb	r6, [r2, r5]
 801e25e:	bf0c      	ite	eq
 801e260:	f006 060f 	andeq.w	r6, r6, #15
 801e264:	1136      	asrne	r6, r6, #4
 801e266:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801e26a:	b2f6      	uxtb	r6, r6
 801e26c:	f114 0a01 	adds.w	sl, r4, #1
 801e270:	f100 80a1 	bmi.w	801e3b6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801e274:	45d1      	cmp	r9, sl
 801e276:	f340 809e 	ble.w	801e3b6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801e27a:	2800      	cmp	r0, #0
 801e27c:	f2c0 809b 	blt.w	801e3b6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801e280:	4580      	cmp	r8, r0
 801e282:	f340 8098 	ble.w	801e3b6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801e286:	2f00      	cmp	r7, #0
 801e288:	f000 8097 	beq.w	801e3ba <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801e28c:	f10e 0b01 	add.w	fp, lr, #1
 801e290:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801e294:	f01b 0f01 	tst.w	fp, #1
 801e298:	5d55      	ldrb	r5, [r2, r5]
 801e29a:	bf0c      	ite	eq
 801e29c:	f005 050f 	andeq.w	r5, r5, #15
 801e2a0:	112d      	asrne	r5, r5, #4
 801e2a2:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801e2a6:	b2ed      	uxtb	r5, r5
 801e2a8:	f1bc 0f00 	cmp.w	ip, #0
 801e2ac:	f000 8089 	beq.w	801e3c2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801e2b0:	2c00      	cmp	r4, #0
 801e2b2:	f100 0001 	add.w	r0, r0, #1
 801e2b6:	f2c0 8082 	blt.w	801e3be <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801e2ba:	45a1      	cmp	r9, r4
 801e2bc:	dd7f      	ble.n	801e3be <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801e2be:	2800      	cmp	r0, #0
 801e2c0:	db7d      	blt.n	801e3be <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801e2c2:	4580      	cmp	r8, r0
 801e2c4:	dd7b      	ble.n	801e3be <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801e2c6:	eb03 0b0e 	add.w	fp, r3, lr
 801e2ca:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801e2ce:	f01b 0f01 	tst.w	fp, #1
 801e2d2:	5d14      	ldrb	r4, [r2, r4]
 801e2d4:	bf0c      	ite	eq
 801e2d6:	f004 040f 	andeq.w	r4, r4, #15
 801e2da:	1124      	asrne	r4, r4, #4
 801e2dc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801e2e0:	b2e4      	uxtb	r4, r4
 801e2e2:	f1ba 0f00 	cmp.w	sl, #0
 801e2e6:	db6f      	blt.n	801e3c8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801e2e8:	45d1      	cmp	r9, sl
 801e2ea:	dd6d      	ble.n	801e3c8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801e2ec:	2800      	cmp	r0, #0
 801e2ee:	db6b      	blt.n	801e3c8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801e2f0:	4580      	cmp	r8, r0
 801e2f2:	dd69      	ble.n	801e3c8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801e2f4:	2f00      	cmp	r7, #0
 801e2f6:	d069      	beq.n	801e3cc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801e2f8:	3301      	adds	r3, #1
 801e2fa:	449e      	add	lr, r3
 801e2fc:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801e300:	f01e 0f01 	tst.w	lr, #1
 801e304:	5cd0      	ldrb	r0, [r2, r3]
 801e306:	bf0c      	ite	eq
 801e308:	f000 000f 	andeq.w	r0, r0, #15
 801e30c:	1100      	asrne	r0, r0, #4
 801e30e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e312:	b2c3      	uxtb	r3, r0
 801e314:	b2ba      	uxth	r2, r7
 801e316:	fa1f fc8c 	uxth.w	ip, ip
 801e31a:	fb02 f00c 	mul.w	r0, r2, ip
 801e31e:	0112      	lsls	r2, r2, #4
 801e320:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801e324:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801e328:	1a12      	subs	r2, r2, r0
 801e32a:	fa1f fc8c 	uxth.w	ip, ip
 801e32e:	b292      	uxth	r2, r2
 801e330:	eba7 070c 	sub.w	r7, r7, ip
 801e334:	436a      	muls	r2, r5
 801e336:	b2bf      	uxth	r7, r7
 801e338:	fb06 2207 	mla	r2, r6, r7, r2
 801e33c:	fb0c 2404 	mla	r4, ip, r4, r2
 801e340:	fb00 4303 	mla	r3, r0, r3, r4
 801e344:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e348:	b38b      	cbz	r3, 801e3ae <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801e34a:	4a21      	ldr	r2, [pc, #132]	@ (801e3d0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801e34c:	6814      	ldr	r4, [r2, #0]
 801e34e:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 801e352:	b2e5      	uxtb	r5, r4
 801e354:	4353      	muls	r3, r2
 801e356:	1c5a      	adds	r2, r3, #1
 801e358:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e35c:	1212      	asrs	r2, r2, #8
 801e35e:	b290      	uxth	r0, r2
 801e360:	43d2      	mvns	r2, r2
 801e362:	fb15 f500 	smulbb	r5, r5, r0
 801e366:	b2d3      	uxtb	r3, r2
 801e368:	780a      	ldrb	r2, [r1, #0]
 801e36a:	fb02 5203 	mla	r2, r2, r3, r5
 801e36e:	b292      	uxth	r2, r2
 801e370:	1c55      	adds	r5, r2, #1
 801e372:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801e376:	784d      	ldrb	r5, [r1, #1]
 801e378:	fb15 f503 	smulbb	r5, r5, r3
 801e37c:	1212      	asrs	r2, r2, #8
 801e37e:	700a      	strb	r2, [r1, #0]
 801e380:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801e384:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801e388:	fb02 5200 	mla	r2, r2, r0, r5
 801e38c:	b292      	uxth	r2, r2
 801e38e:	1c55      	adds	r5, r2, #1
 801e390:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801e394:	1212      	asrs	r2, r2, #8
 801e396:	704a      	strb	r2, [r1, #1]
 801e398:	788a      	ldrb	r2, [r1, #2]
 801e39a:	fb12 f303 	smulbb	r3, r2, r3
 801e39e:	fb04 3300 	mla	r3, r4, r0, r3
 801e3a2:	b29b      	uxth	r3, r3
 801e3a4:	1c5a      	adds	r2, r3, #1
 801e3a6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e3aa:	121b      	asrs	r3, r3, #8
 801e3ac:	708b      	strb	r3, [r1, #2]
 801e3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3b2:	2600      	movs	r6, #0
 801e3b4:	e75a      	b.n	801e26c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801e3b6:	2500      	movs	r5, #0
 801e3b8:	e776      	b.n	801e2a8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801e3ba:	463d      	mov	r5, r7
 801e3bc:	e774      	b.n	801e2a8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801e3be:	2400      	movs	r4, #0
 801e3c0:	e78f      	b.n	801e2e2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801e3c2:	4663      	mov	r3, ip
 801e3c4:	4664      	mov	r4, ip
 801e3c6:	e7a5      	b.n	801e314 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801e3c8:	2300      	movs	r3, #0
 801e3ca:	e7a3      	b.n	801e314 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801e3cc:	463b      	mov	r3, r7
 801e3ce:	e7a1      	b.n	801e314 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801e3d0:	24025130 	.word	0x24025130

0801e3d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3d8:	b097      	sub	sp, #92	@ 0x5c
 801e3da:	9214      	str	r2, [sp, #80]	@ 0x50
 801e3dc:	9309      	str	r3, [sp, #36]	@ 0x24
 801e3de:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801e3e0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801e3e4:	9015      	str	r0, [sp, #84]	@ 0x54
 801e3e6:	910c      	str	r1, [sp, #48]	@ 0x30
 801e3e8:	6850      	ldr	r0, [r2, #4]
 801e3ea:	930e      	str	r3, [sp, #56]	@ 0x38
 801e3ec:	6812      	ldr	r2, [r2, #0]
 801e3ee:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 801e3f2:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 801e3f6:	fb00 1303 	mla	r3, r0, r3, r1
 801e3fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e3fe:	eb02 0a03 	add.w	sl, r2, r3
 801e402:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e404:	689b      	ldr	r3, [r3, #8]
 801e406:	3301      	adds	r3, #1
 801e408:	f023 0301 	bic.w	r3, r3, #1
 801e40c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e40e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e410:	681f      	ldr	r7, [r3, #0]
 801e412:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e414:	2b00      	cmp	r3, #0
 801e416:	dc03      	bgt.n	801e420 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e418:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	f340 8247 	ble.w	801e8ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801e420:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e422:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e426:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e42a:	1e48      	subs	r0, r1, #1
 801e42c:	f102 3cff 	add.w	ip, r2, #4294967295
 801e430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e432:	2b00      	cmp	r3, #0
 801e434:	f340 80e5 	ble.w	801e602 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801e438:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801e43c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e440:	d406      	bmi.n	801e450 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e442:	4586      	cmp	lr, r0
 801e444:	da04      	bge.n	801e450 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e446:	2b00      	cmp	r3, #0
 801e448:	db02      	blt.n	801e450 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e44a:	4563      	cmp	r3, ip
 801e44c:	f2c0 80da 	blt.w	801e604 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801e450:	f11e 0e01 	adds.w	lr, lr, #1
 801e454:	f100 80cb 	bmi.w	801e5ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801e458:	4571      	cmp	r1, lr
 801e45a:	f2c0 80c8 	blt.w	801e5ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801e45e:	3301      	adds	r3, #1
 801e460:	f100 80c5 	bmi.w	801e5ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801e464:	429a      	cmp	r2, r3
 801e466:	f2c0 80c2 	blt.w	801e5ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801e46a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e46c:	46d0      	mov	r8, sl
 801e46e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801e472:	930d      	str	r3, [sp, #52]	@ 0x34
 801e474:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e476:	2b00      	cmp	r3, #0
 801e478:	f340 80e3 	ble.w	801e642 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801e47c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e47e:	1430      	asrs	r0, r6, #16
 801e480:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801e484:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801e488:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801e48c:	142b      	asrs	r3, r5, #16
 801e48e:	f100 812e 	bmi.w	801e6ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e492:	f10c 3bff 	add.w	fp, ip, #4294967295
 801e496:	455b      	cmp	r3, fp
 801e498:	f280 8129 	bge.w	801e6ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e49c:	2800      	cmp	r0, #0
 801e49e:	f2c0 8126 	blt.w	801e6ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e4a2:	f10e 3bff 	add.w	fp, lr, #4294967295
 801e4a6:	4558      	cmp	r0, fp
 801e4a8:	f280 8121 	bge.w	801e6ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e4ac:	fb00 3309 	mla	r3, r0, r9, r3
 801e4b0:	0858      	lsrs	r0, r3, #1
 801e4b2:	07dc      	lsls	r4, r3, #31
 801e4b4:	f817 c000 	ldrb.w	ip, [r7, r0]
 801e4b8:	bf54      	ite	pl
 801e4ba:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e4be:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e4c2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e4c6:	fa5f fc8c 	uxtb.w	ip, ip
 801e4ca:	2a00      	cmp	r2, #0
 801e4cc:	f000 80fe 	beq.w	801e6cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801e4d0:	1c58      	adds	r0, r3, #1
 801e4d2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801e4d6:	07c0      	lsls	r0, r0, #31
 801e4d8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801e4dc:	bf54      	ite	pl
 801e4de:	f00e 0e0f 	andpl.w	lr, lr, #15
 801e4e2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801e4e6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801e4ea:	fa5f f08e 	uxtb.w	r0, lr
 801e4ee:	9010      	str	r0, [sp, #64]	@ 0x40
 801e4f0:	b1d9      	cbz	r1, 801e52a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e4f2:	444b      	add	r3, r9
 801e4f4:	0858      	lsrs	r0, r3, #1
 801e4f6:	07dc      	lsls	r4, r3, #31
 801e4f8:	f103 0301 	add.w	r3, r3, #1
 801e4fc:	5c38      	ldrb	r0, [r7, r0]
 801e4fe:	bf54      	ite	pl
 801e500:	f000 000f 	andpl.w	r0, r0, #15
 801e504:	1100      	asrmi	r0, r0, #4
 801e506:	07dc      	lsls	r4, r3, #31
 801e508:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e50c:	b2c0      	uxtb	r0, r0
 801e50e:	900a      	str	r0, [sp, #40]	@ 0x28
 801e510:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801e514:	f817 e000 	ldrb.w	lr, [r7, r0]
 801e518:	bf54      	ite	pl
 801e51a:	f00e 030f 	andpl.w	r3, lr, #15
 801e51e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801e522:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e526:	b2db      	uxtb	r3, r3
 801e528:	9311      	str	r3, [sp, #68]	@ 0x44
 801e52a:	b292      	uxth	r2, r2
 801e52c:	b289      	uxth	r1, r1
 801e52e:	0113      	lsls	r3, r2, #4
 801e530:	fb02 f001 	mul.w	r0, r2, r1
 801e534:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e536:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801e53a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801e53e:	1a1b      	subs	r3, r3, r0
 801e540:	b289      	uxth	r1, r1
 801e542:	b29b      	uxth	r3, r3
 801e544:	ebae 0e01 	sub.w	lr, lr, r1
 801e548:	4353      	muls	r3, r2
 801e54a:	fa1f fe8e 	uxth.w	lr, lr
 801e54e:	fb0c 320e 	mla	r2, ip, lr, r3
 801e552:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e554:	fb01 2203 	mla	r2, r1, r3, r2
 801e558:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e55a:	fb00 2203 	mla	r2, r0, r3, r2
 801e55e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e562:	2a00      	cmp	r2, #0
 801e564:	d039      	beq.n	801e5da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e566:	4bc7      	ldr	r3, [pc, #796]	@ (801e884 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801e568:	6819      	ldr	r1, [r3, #0]
 801e56a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e56c:	fa5f fc81 	uxtb.w	ip, r1
 801e570:	435a      	muls	r2, r3
 801e572:	1c53      	adds	r3, r2, #1
 801e574:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e578:	1212      	asrs	r2, r2, #8
 801e57a:	b290      	uxth	r0, r2
 801e57c:	43d2      	mvns	r2, r2
 801e57e:	fb1c fc00 	smulbb	ip, ip, r0
 801e582:	b2d3      	uxtb	r3, r2
 801e584:	f898 2000 	ldrb.w	r2, [r8]
 801e588:	fb02 c203 	mla	r2, r2, r3, ip
 801e58c:	b292      	uxth	r2, r2
 801e58e:	f102 0c01 	add.w	ip, r2, #1
 801e592:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e596:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e59a:	fb1c fc03 	smulbb	ip, ip, r3
 801e59e:	1212      	asrs	r2, r2, #8
 801e5a0:	f888 2000 	strb.w	r2, [r8]
 801e5a4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801e5a8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801e5ac:	fb02 c200 	mla	r2, r2, r0, ip
 801e5b0:	b292      	uxth	r2, r2
 801e5b2:	f102 0c01 	add.w	ip, r2, #1
 801e5b6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e5ba:	1212      	asrs	r2, r2, #8
 801e5bc:	f888 2001 	strb.w	r2, [r8, #1]
 801e5c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 801e5c4:	fb12 f303 	smulbb	r3, r2, r3
 801e5c8:	fb01 3300 	mla	r3, r1, r0, r3
 801e5cc:	b29b      	uxth	r3, r3
 801e5ce:	1c5a      	adds	r2, r3, #1
 801e5d0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e5d4:	121b      	asrs	r3, r3, #8
 801e5d6:	f888 3002 	strb.w	r3, [r8, #2]
 801e5da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e5dc:	f108 0803 	add.w	r8, r8, #3
 801e5e0:	441d      	add	r5, r3
 801e5e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e5e4:	441e      	add	r6, r3
 801e5e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e5e8:	3b01      	subs	r3, #1
 801e5ea:	930d      	str	r3, [sp, #52]	@ 0x34
 801e5ec:	e742      	b.n	801e474 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e5ee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e5f0:	f10a 0a03 	add.w	sl, sl, #3
 801e5f4:	441d      	add	r5, r3
 801e5f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e5f8:	441e      	add	r6, r3
 801e5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5fc:	3b01      	subs	r3, #1
 801e5fe:	9309      	str	r3, [sp, #36]	@ 0x24
 801e600:	e716      	b.n	801e430 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e602:	d024      	beq.n	801e64e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e606:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801e608:	3b01      	subs	r3, #1
 801e60a:	fb00 5003 	mla	r0, r0, r3, r5
 801e60e:	1400      	asrs	r0, r0, #16
 801e610:	f53f af2b 	bmi.w	801e46a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e614:	3901      	subs	r1, #1
 801e616:	4288      	cmp	r0, r1
 801e618:	f6bf af27 	bge.w	801e46a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e61c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801e61e:	fb01 6303 	mla	r3, r1, r3, r6
 801e622:	141b      	asrs	r3, r3, #16
 801e624:	f53f af21 	bmi.w	801e46a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e628:	3a01      	subs	r2, #1
 801e62a:	4293      	cmp	r3, r2
 801e62c:	f6bf af1d 	bge.w	801e46a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e630:	f10a 0e03 	add.w	lr, sl, #3
 801e634:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 801e638:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801e63c:	f1b8 0f00 	cmp.w	r8, #0
 801e640:	dc76      	bgt.n	801e730 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801e642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e644:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e648:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e64c:	44a2      	add	sl, r4
 801e64e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e650:	2b00      	cmp	r3, #0
 801e652:	f340 812c 	ble.w	801e8ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801e656:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e65a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e65c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e660:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e664:	eef0 6a62 	vmov.f32	s13, s5
 801e668:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e66c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e670:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e674:	ee16 5a90 	vmov	r5, s13
 801e678:	eef0 6a43 	vmov.f32	s13, s6
 801e67c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e680:	ee16 6a90 	vmov	r6, s13
 801e684:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e688:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e68c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e690:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e694:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e698:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e69c:	ee12 2a90 	vmov	r2, s5
 801e6a0:	eef0 2a47 	vmov.f32	s5, s14
 801e6a4:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6a8:	ee13 2a10 	vmov	r2, s6
 801e6ac:	9323      	str	r3, [sp, #140]	@ 0x8c
 801e6ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e6b0:	eeb0 3a67 	vmov.f32	s6, s15
 801e6b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6b8:	9324      	str	r3, [sp, #144]	@ 0x90
 801e6ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e6bc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e6be:	3b01      	subs	r3, #1
 801e6c0:	930c      	str	r3, [sp, #48]	@ 0x30
 801e6c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e6c4:	bf08      	it	eq
 801e6c6:	4613      	moveq	r3, r2
 801e6c8:	9309      	str	r3, [sp, #36]	@ 0x24
 801e6ca:	e6a2      	b.n	801e412 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e6cc:	2900      	cmp	r1, #0
 801e6ce:	f43f af2c 	beq.w	801e52a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e6d2:	eb09 0003 	add.w	r0, r9, r3
 801e6d6:	0843      	lsrs	r3, r0, #1
 801e6d8:	07c0      	lsls	r0, r0, #31
 801e6da:	5cfb      	ldrb	r3, [r7, r3]
 801e6dc:	bf54      	ite	pl
 801e6de:	f003 030f 	andpl.w	r3, r3, #15
 801e6e2:	111b      	asrmi	r3, r3, #4
 801e6e4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e6e8:	b2db      	uxtb	r3, r3
 801e6ea:	930a      	str	r3, [sp, #40]	@ 0x28
 801e6ec:	e71d      	b.n	801e52a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e6ee:	f113 0b01 	adds.w	fp, r3, #1
 801e6f2:	f53f af72 	bmi.w	801e5da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e6f6:	45dc      	cmp	ip, fp
 801e6f8:	f6ff af6f 	blt.w	801e5da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e6fc:	f110 0b01 	adds.w	fp, r0, #1
 801e700:	f53f af6b 	bmi.w	801e5da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e704:	45de      	cmp	lr, fp
 801e706:	f6ff af68 	blt.w	801e5da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e70a:	9302      	str	r3, [sp, #8]
 801e70c:	fa0f f38e 	sxth.w	r3, lr
 801e710:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e712:	9301      	str	r3, [sp, #4]
 801e714:	fa0f f38c 	sxth.w	r3, ip
 801e718:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801e71c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e720:	9300      	str	r3, [sp, #0]
 801e722:	463a      	mov	r2, r7
 801e724:	464b      	mov	r3, r9
 801e726:	4641      	mov	r1, r8
 801e728:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e72a:	f7ff fd79 	bl	801e220 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801e72e:	e754      	b.n	801e5da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e730:	142a      	asrs	r2, r5, #16
 801e732:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e736:	1433      	asrs	r3, r6, #16
 801e738:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e73c:	fb09 2303 	mla	r3, r9, r3, r2
 801e740:	085a      	lsrs	r2, r3, #1
 801e742:	07dc      	lsls	r4, r3, #31
 801e744:	5cba      	ldrb	r2, [r7, r2]
 801e746:	bf54      	ite	pl
 801e748:	f002 020f 	andpl.w	r2, r2, #15
 801e74c:	1112      	asrmi	r2, r2, #4
 801e74e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e752:	b2d2      	uxtb	r2, r2
 801e754:	2900      	cmp	r1, #0
 801e756:	f000 8097 	beq.w	801e888 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801e75a:	f103 0b01 	add.w	fp, r3, #1
 801e75e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801e762:	f01b 0f01 	tst.w	fp, #1
 801e766:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e76a:	bf0c      	ite	eq
 801e76c:	f00c 0c0f 	andeq.w	ip, ip, #15
 801e770:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801e774:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e778:	fa5f f48c 	uxtb.w	r4, ip
 801e77c:	9412      	str	r4, [sp, #72]	@ 0x48
 801e77e:	b300      	cbz	r0, 801e7c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e780:	444b      	add	r3, r9
 801e782:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e786:	07dc      	lsls	r4, r3, #31
 801e788:	f103 0301 	add.w	r3, r3, #1
 801e78c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e790:	bf54      	ite	pl
 801e792:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e796:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e79a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e79e:	fa5f f48c 	uxtb.w	r4, ip
 801e7a2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e7a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e7a8:	07dc      	lsls	r4, r3, #31
 801e7aa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e7ae:	bf54      	ite	pl
 801e7b0:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e7b4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e7b8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e7bc:	fa5f f38c 	uxtb.w	r3, ip
 801e7c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e7c2:	b289      	uxth	r1, r1
 801e7c4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e7c6:	b280      	uxth	r0, r0
 801e7c8:	fb01 f300 	mul.w	r3, r1, r0
 801e7cc:	0109      	lsls	r1, r1, #4
 801e7ce:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801e7d2:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 801e7d6:	1ac9      	subs	r1, r1, r3
 801e7d8:	b280      	uxth	r0, r0
 801e7da:	b289      	uxth	r1, r1
 801e7dc:	ebac 0c00 	sub.w	ip, ip, r0
 801e7e0:	4361      	muls	r1, r4
 801e7e2:	fa1f fc8c 	uxth.w	ip, ip
 801e7e6:	fb02 120c 	mla	r2, r2, ip, r1
 801e7ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e7ec:	fb00 2001 	mla	r0, r0, r1, r2
 801e7f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e7f2:	fb03 0302 	mla	r3, r3, r2, r0
 801e7f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e7fa:	2b00      	cmp	r3, #0
 801e7fc:	d039      	beq.n	801e872 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801e7fe:	4a21      	ldr	r2, [pc, #132]	@ (801e884 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801e800:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801e804:	6810      	ldr	r0, [r2, #0]
 801e806:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e808:	fa5f fc80 	uxtb.w	ip, r0
 801e80c:	4353      	muls	r3, r2
 801e80e:	1c5a      	adds	r2, r3, #1
 801e810:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e814:	121b      	asrs	r3, r3, #8
 801e816:	b29a      	uxth	r2, r3
 801e818:	43db      	mvns	r3, r3
 801e81a:	fb1c fc02 	smulbb	ip, ip, r2
 801e81e:	b2db      	uxtb	r3, r3
 801e820:	fb01 c103 	mla	r1, r1, r3, ip
 801e824:	b289      	uxth	r1, r1
 801e826:	f101 0c01 	add.w	ip, r1, #1
 801e82a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801e82e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801e832:	fb1c fc03 	smulbb	ip, ip, r3
 801e836:	1209      	asrs	r1, r1, #8
 801e838:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801e83c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801e840:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801e844:	fb01 c102 	mla	r1, r1, r2, ip
 801e848:	b289      	uxth	r1, r1
 801e84a:	f101 0c01 	add.w	ip, r1, #1
 801e84e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801e852:	1209      	asrs	r1, r1, #8
 801e854:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801e858:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801e85c:	fb11 f303 	smulbb	r3, r1, r3
 801e860:	fb00 3002 	mla	r0, r0, r2, r3
 801e864:	b280      	uxth	r0, r0
 801e866:	1c42      	adds	r2, r0, #1
 801e868:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e86c:	1200      	asrs	r0, r0, #8
 801e86e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801e872:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e874:	f10e 0e03 	add.w	lr, lr, #3
 801e878:	f108 38ff 	add.w	r8, r8, #4294967295
 801e87c:	441d      	add	r5, r3
 801e87e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e880:	441e      	add	r6, r3
 801e882:	e6db      	b.n	801e63c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801e884:	24025130 	.word	0x24025130
 801e888:	2800      	cmp	r0, #0
 801e88a:	d09a      	beq.n	801e7c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e88c:	444b      	add	r3, r9
 801e88e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e892:	07db      	lsls	r3, r3, #31
 801e894:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e898:	bf54      	ite	pl
 801e89a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e89e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e8a2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e8a6:	fa5f f38c 	uxtb.w	r3, ip
 801e8aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e8ac:	e789      	b.n	801e7c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e8ae:	b017      	add	sp, #92	@ 0x5c
 801e8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e8b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801e8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8b8:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 801e8bc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801e8c0:	2d00      	cmp	r5, #0
 801e8c2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801e8c6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801e8ca:	fb04 5e03 	mla	lr, r4, r3, r5
 801e8ce:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801e8d2:	f2c0 80b1 	blt.w	801ea38 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e8d6:	45a9      	cmp	r9, r5
 801e8d8:	f340 80ae 	ble.w	801ea38 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e8dc:	2c00      	cmp	r4, #0
 801e8de:	f2c0 80ab 	blt.w	801ea38 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e8e2:	45a0      	cmp	r8, r4
 801e8e4:	f340 80a8 	ble.w	801ea38 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e8e8:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801e8ec:	f01e 0f01 	tst.w	lr, #1
 801e8f0:	5d97      	ldrb	r7, [r2, r6]
 801e8f2:	bf0c      	ite	eq
 801e8f4:	f007 070f 	andeq.w	r7, r7, #15
 801e8f8:	113f      	asrne	r7, r7, #4
 801e8fa:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801e8fe:	b2ff      	uxtb	r7, r7
 801e900:	f115 0a01 	adds.w	sl, r5, #1
 801e904:	f100 809a 	bmi.w	801ea3c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e908:	45d1      	cmp	r9, sl
 801e90a:	f340 8097 	ble.w	801ea3c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e90e:	2c00      	cmp	r4, #0
 801e910:	f2c0 8094 	blt.w	801ea3c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e914:	45a0      	cmp	r8, r4
 801e916:	f340 8091 	ble.w	801ea3c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e91a:	2800      	cmp	r0, #0
 801e91c:	f000 8090 	beq.w	801ea40 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801e920:	f10e 0b01 	add.w	fp, lr, #1
 801e924:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801e928:	f01b 0f01 	tst.w	fp, #1
 801e92c:	5d96      	ldrb	r6, [r2, r6]
 801e92e:	bf0c      	ite	eq
 801e930:	f006 060f 	andeq.w	r6, r6, #15
 801e934:	1136      	asrne	r6, r6, #4
 801e936:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801e93a:	b2f6      	uxtb	r6, r6
 801e93c:	f1bc 0f00 	cmp.w	ip, #0
 801e940:	f000 8082 	beq.w	801ea48 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801e944:	2d00      	cmp	r5, #0
 801e946:	f104 0401 	add.w	r4, r4, #1
 801e94a:	db7b      	blt.n	801ea44 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e94c:	45a9      	cmp	r9, r5
 801e94e:	dd79      	ble.n	801ea44 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e950:	2c00      	cmp	r4, #0
 801e952:	db77      	blt.n	801ea44 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e954:	45a0      	cmp	r8, r4
 801e956:	dd75      	ble.n	801ea44 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e958:	eb03 0b0e 	add.w	fp, r3, lr
 801e95c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801e960:	f01b 0f01 	tst.w	fp, #1
 801e964:	5d55      	ldrb	r5, [r2, r5]
 801e966:	bf0c      	ite	eq
 801e968:	f005 050f 	andeq.w	r5, r5, #15
 801e96c:	112d      	asrne	r5, r5, #4
 801e96e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801e972:	b2ed      	uxtb	r5, r5
 801e974:	f1ba 0f00 	cmp.w	sl, #0
 801e978:	db69      	blt.n	801ea4e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e97a:	45d1      	cmp	r9, sl
 801e97c:	dd67      	ble.n	801ea4e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e97e:	2c00      	cmp	r4, #0
 801e980:	db65      	blt.n	801ea4e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e982:	45a0      	cmp	r8, r4
 801e984:	dd63      	ble.n	801ea4e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e986:	2800      	cmp	r0, #0
 801e988:	d063      	beq.n	801ea52 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801e98a:	3301      	adds	r3, #1
 801e98c:	449e      	add	lr, r3
 801e98e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801e992:	f01e 0f01 	tst.w	lr, #1
 801e996:	5cd4      	ldrb	r4, [r2, r3]
 801e998:	bf0c      	ite	eq
 801e99a:	f004 040f 	andeq.w	r4, r4, #15
 801e99e:	1124      	asrne	r4, r4, #4
 801e9a0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801e9a4:	b2e3      	uxtb	r3, r4
 801e9a6:	b282      	uxth	r2, r0
 801e9a8:	fa1f fc8c 	uxth.w	ip, ip
 801e9ac:	fb02 f40c 	mul.w	r4, r2, ip
 801e9b0:	0112      	lsls	r2, r2, #4
 801e9b2:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801e9b6:	fa1f f08c 	uxth.w	r0, ip
 801e9ba:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 801e9be:	1b12      	subs	r2, r2, r4
 801e9c0:	ebac 0c00 	sub.w	ip, ip, r0
 801e9c4:	b292      	uxth	r2, r2
 801e9c6:	fa1f fc8c 	uxth.w	ip, ip
 801e9ca:	4372      	muls	r2, r6
 801e9cc:	fb07 220c 	mla	r2, r7, ip, r2
 801e9d0:	fb00 2005 	mla	r0, r0, r5, r2
 801e9d4:	fb04 0303 	mla	r3, r4, r3, r0
 801e9d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e9dc:	b353      	cbz	r3, 801ea34 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801e9de:	4a1e      	ldr	r2, [pc, #120]	@ (801ea58 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801e9e0:	7808      	ldrb	r0, [r1, #0]
 801e9e2:	6814      	ldr	r4, [r2, #0]
 801e9e4:	b29a      	uxth	r2, r3
 801e9e6:	43db      	mvns	r3, r3
 801e9e8:	b2e5      	uxtb	r5, r4
 801e9ea:	b2db      	uxtb	r3, r3
 801e9ec:	fb15 f502 	smulbb	r5, r5, r2
 801e9f0:	fb00 5003 	mla	r0, r0, r3, r5
 801e9f4:	b280      	uxth	r0, r0
 801e9f6:	1c45      	adds	r5, r0, #1
 801e9f8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801e9fc:	784d      	ldrb	r5, [r1, #1]
 801e9fe:	fb15 f503 	smulbb	r5, r5, r3
 801ea02:	1200      	asrs	r0, r0, #8
 801ea04:	7008      	strb	r0, [r1, #0]
 801ea06:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801ea0a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801ea0e:	fb00 5002 	mla	r0, r0, r2, r5
 801ea12:	b280      	uxth	r0, r0
 801ea14:	1c45      	adds	r5, r0, #1
 801ea16:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801ea1a:	1200      	asrs	r0, r0, #8
 801ea1c:	7048      	strb	r0, [r1, #1]
 801ea1e:	7888      	ldrb	r0, [r1, #2]
 801ea20:	fb10 f303 	smulbb	r3, r0, r3
 801ea24:	fb04 3202 	mla	r2, r4, r2, r3
 801ea28:	b292      	uxth	r2, r2
 801ea2a:	1c53      	adds	r3, r2, #1
 801ea2c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801ea30:	1212      	asrs	r2, r2, #8
 801ea32:	708a      	strb	r2, [r1, #2]
 801ea34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea38:	2700      	movs	r7, #0
 801ea3a:	e761      	b.n	801e900 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801ea3c:	2600      	movs	r6, #0
 801ea3e:	e77d      	b.n	801e93c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801ea40:	4606      	mov	r6, r0
 801ea42:	e77b      	b.n	801e93c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801ea44:	2500      	movs	r5, #0
 801ea46:	e795      	b.n	801e974 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801ea48:	4663      	mov	r3, ip
 801ea4a:	4665      	mov	r5, ip
 801ea4c:	e7ab      	b.n	801e9a6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801ea4e:	2300      	movs	r3, #0
 801ea50:	e7a9      	b.n	801e9a6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801ea52:	4603      	mov	r3, r0
 801ea54:	e7a7      	b.n	801e9a6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801ea56:	bf00      	nop
 801ea58:	24025130 	.word	0x24025130

0801ea5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ea5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea60:	b093      	sub	sp, #76	@ 0x4c
 801ea62:	461c      	mov	r4, r3
 801ea64:	920c      	str	r2, [sp, #48]	@ 0x30
 801ea66:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ea68:	9011      	str	r0, [sp, #68]	@ 0x44
 801ea6a:	9107      	str	r1, [sp, #28]
 801ea6c:	6850      	ldr	r0, [r2, #4]
 801ea6e:	6812      	ldr	r2, [r2, #0]
 801ea70:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801ea74:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 801ea78:	fb00 1303 	mla	r3, r0, r3, r1
 801ea7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea80:	eb02 0b03 	add.w	fp, r2, r3
 801ea84:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ea86:	689b      	ldr	r3, [r3, #8]
 801ea88:	3301      	adds	r3, #1
 801ea8a:	f023 0301 	bic.w	r3, r3, #1
 801ea8e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea90:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ea92:	f8d3 8000 	ldr.w	r8, [r3]
 801ea96:	9b07      	ldr	r3, [sp, #28]
 801ea98:	2b00      	cmp	r3, #0
 801ea9a:	dc03      	bgt.n	801eaa4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ea9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea9e:	2b00      	cmp	r3, #0
 801eaa0:	f340 822b 	ble.w	801eefa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801eaa4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801eaa6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eaaa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801eaae:	1e48      	subs	r0, r1, #1
 801eab0:	1e57      	subs	r7, r2, #1
 801eab2:	2c00      	cmp	r4, #0
 801eab4:	f340 80d7 	ble.w	801ec66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801eab8:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801eabc:	ea4f 4326 	mov.w	r3, r6, asr #16
 801eac0:	d406      	bmi.n	801ead0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801eac2:	4584      	cmp	ip, r0
 801eac4:	da04      	bge.n	801ead0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	db02      	blt.n	801ead0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801eaca:	42bb      	cmp	r3, r7
 801eacc:	f2c0 80cc 	blt.w	801ec68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801ead0:	f11c 0c01 	adds.w	ip, ip, #1
 801ead4:	f100 80bf 	bmi.w	801ec56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ead8:	4561      	cmp	r1, ip
 801eada:	f2c0 80bc 	blt.w	801ec56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801eade:	3301      	adds	r3, #1
 801eae0:	f100 80b9 	bmi.w	801ec56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801eae4:	429a      	cmp	r2, r3
 801eae6:	f2c0 80b6 	blt.w	801ec56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801eaea:	46a2      	mov	sl, r4
 801eaec:	465f      	mov	r7, fp
 801eaee:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801eaf2:	f1ba 0f00 	cmp.w	sl, #0
 801eaf6:	f340 80d4 	ble.w	801eca2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801eafa:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801eafe:	1430      	asrs	r0, r6, #16
 801eb00:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801eb04:	9308      	str	r3, [sp, #32]
 801eb06:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801eb08:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801eb0c:	142b      	asrs	r3, r5, #16
 801eb0e:	f100 8124 	bmi.w	801ed5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801eb12:	f10c 32ff 	add.w	r2, ip, #4294967295
 801eb16:	4293      	cmp	r3, r2
 801eb18:	f280 811f 	bge.w	801ed5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801eb1c:	2800      	cmp	r0, #0
 801eb1e:	f2c0 811c 	blt.w	801ed5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801eb22:	f10e 32ff 	add.w	r2, lr, #4294967295
 801eb26:	4290      	cmp	r0, r2
 801eb28:	f280 8117 	bge.w	801ed5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801eb2c:	fb00 3309 	mla	r3, r0, r9, r3
 801eb30:	0858      	lsrs	r0, r3, #1
 801eb32:	07da      	lsls	r2, r3, #31
 801eb34:	9a08      	ldr	r2, [sp, #32]
 801eb36:	f818 c000 	ldrb.w	ip, [r8, r0]
 801eb3a:	bf54      	ite	pl
 801eb3c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801eb40:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801eb44:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801eb48:	fa5f fc8c 	uxtb.w	ip, ip
 801eb4c:	2a00      	cmp	r2, #0
 801eb4e:	f000 80ed 	beq.w	801ed2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801eb52:	1c58      	adds	r0, r3, #1
 801eb54:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801eb58:	07c0      	lsls	r0, r0, #31
 801eb5a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801eb5e:	bf54      	ite	pl
 801eb60:	f00e 0e0f 	andpl.w	lr, lr, #15
 801eb64:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801eb68:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801eb6c:	fa5f fe8e 	uxtb.w	lr, lr
 801eb70:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 801eb74:	b1c9      	cbz	r1, 801ebaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801eb76:	444b      	add	r3, r9
 801eb78:	0858      	lsrs	r0, r3, #1
 801eb7a:	07da      	lsls	r2, r3, #31
 801eb7c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801eb80:	bf54      	ite	pl
 801eb82:	f000 000f 	andpl.w	r0, r0, #15
 801eb86:	1100      	asrmi	r0, r0, #4
 801eb88:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801eb8c:	b2c0      	uxtb	r0, r0
 801eb8e:	900a      	str	r0, [sp, #40]	@ 0x28
 801eb90:	1c58      	adds	r0, r3, #1
 801eb92:	0843      	lsrs	r3, r0, #1
 801eb94:	07c2      	lsls	r2, r0, #31
 801eb96:	f818 3003 	ldrb.w	r3, [r8, r3]
 801eb9a:	bf54      	ite	pl
 801eb9c:	f003 030f 	andpl.w	r3, r3, #15
 801eba0:	111b      	asrmi	r3, r3, #4
 801eba2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801eba6:	b2db      	uxtb	r3, r3
 801eba8:	930e      	str	r3, [sp, #56]	@ 0x38
 801ebaa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ebae:	b289      	uxth	r1, r1
 801ebb0:	fb02 f301 	mul.w	r3, r2, r1
 801ebb4:	0112      	lsls	r2, r2, #4
 801ebb6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801ebba:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 801ebbe:	1ad2      	subs	r2, r2, r3
 801ebc0:	b289      	uxth	r1, r1
 801ebc2:	b292      	uxth	r2, r2
 801ebc4:	1a40      	subs	r0, r0, r1
 801ebc6:	fa1f fe80 	uxth.w	lr, r0
 801ebca:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ebcc:	4342      	muls	r2, r0
 801ebce:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801ebd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ebd4:	fb01 c102 	mla	r1, r1, r2, ip
 801ebd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ebda:	fb03 1302 	mla	r3, r3, r2, r1
 801ebde:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ebe2:	b383      	cbz	r3, 801ec46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ebe4:	4ac6      	ldr	r2, [pc, #792]	@ (801ef00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801ebe6:	2bff      	cmp	r3, #255	@ 0xff
 801ebe8:	6812      	ldr	r2, [r2, #0]
 801ebea:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801ebee:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801ebf2:	b2d2      	uxtb	r2, r2
 801ebf4:	f000 80ac 	beq.w	801ed50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801ebf8:	b299      	uxth	r1, r3
 801ebfa:	43db      	mvns	r3, r3
 801ebfc:	f897 c000 	ldrb.w	ip, [r7]
 801ec00:	fb12 f201 	smulbb	r2, r2, r1
 801ec04:	b2db      	uxtb	r3, r3
 801ec06:	fb10 f001 	smulbb	r0, r0, r1
 801ec0a:	fb0c 2203 	mla	r2, ip, r3, r2
 801ec0e:	fb1e f101 	smulbb	r1, lr, r1
 801ec12:	b292      	uxth	r2, r2
 801ec14:	f102 0c01 	add.w	ip, r2, #1
 801ec18:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801ec1c:	1212      	asrs	r2, r2, #8
 801ec1e:	703a      	strb	r2, [r7, #0]
 801ec20:	787a      	ldrb	r2, [r7, #1]
 801ec22:	fb02 0003 	mla	r0, r2, r3, r0
 801ec26:	b280      	uxth	r0, r0
 801ec28:	1c42      	adds	r2, r0, #1
 801ec2a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ec2e:	78ba      	ldrb	r2, [r7, #2]
 801ec30:	fb02 1303 	mla	r3, r2, r3, r1
 801ec34:	1200      	asrs	r0, r0, #8
 801ec36:	b29b      	uxth	r3, r3
 801ec38:	7078      	strb	r0, [r7, #1]
 801ec3a:	f103 0e01 	add.w	lr, r3, #1
 801ec3e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801ec42:	121b      	asrs	r3, r3, #8
 801ec44:	70bb      	strb	r3, [r7, #2]
 801ec46:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ec48:	3703      	adds	r7, #3
 801ec4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ec4e:	441d      	add	r5, r3
 801ec50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ec52:	441e      	add	r6, r3
 801ec54:	e74d      	b.n	801eaf2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ec56:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ec58:	3c01      	subs	r4, #1
 801ec5a:	f10b 0b03 	add.w	fp, fp, #3
 801ec5e:	441d      	add	r5, r3
 801ec60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ec62:	441e      	add	r6, r3
 801ec64:	e725      	b.n	801eab2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801ec66:	d021      	beq.n	801ecac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801ec68:	1e63      	subs	r3, r4, #1
 801ec6a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801ec6c:	fb00 5003 	mla	r0, r0, r3, r5
 801ec70:	1400      	asrs	r0, r0, #16
 801ec72:	f53f af3a 	bmi.w	801eaea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ec76:	3901      	subs	r1, #1
 801ec78:	4288      	cmp	r0, r1
 801ec7a:	f6bf af36 	bge.w	801eaea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ec7e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801ec80:	fb01 6303 	mla	r3, r1, r3, r6
 801ec84:	141b      	asrs	r3, r3, #16
 801ec86:	f53f af30 	bmi.w	801eaea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ec8a:	3a01      	subs	r2, #1
 801ec8c:	4293      	cmp	r3, r2
 801ec8e:	f6bf af2c 	bge.w	801eaea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ec92:	f10b 0c03 	add.w	ip, fp, #3
 801ec96:	46a6      	mov	lr, r4
 801ec98:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801ec9c:	f1be 0f00 	cmp.w	lr, #0
 801eca0:	dc79      	bgt.n	801ed96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801eca2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801eca6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ecaa:	44a3      	add	fp, r4
 801ecac:	9b07      	ldr	r3, [sp, #28]
 801ecae:	2b00      	cmp	r3, #0
 801ecb0:	f340 8123 	ble.w	801eefa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801ecb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ecb8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ecba:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ecbe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ecc2:	eef0 6a62 	vmov.f32	s13, s5
 801ecc6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ecca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ecce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ecd2:	ee16 5a90 	vmov	r5, s13
 801ecd6:	eef0 6a43 	vmov.f32	s13, s6
 801ecda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ecde:	ee16 6a90 	vmov	r6, s13
 801ece2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ece6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ecea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ecee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ecf2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ecf6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ecfa:	ee12 2a90 	vmov	r2, s5
 801ecfe:	eef0 2a47 	vmov.f32	s5, s14
 801ed02:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed06:	ee13 2a10 	vmov	r2, s6
 801ed0a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801ed0c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ed0e:	eeb0 3a67 	vmov.f32	s6, s15
 801ed12:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed16:	9320      	str	r3, [sp, #128]	@ 0x80
 801ed18:	9b07      	ldr	r3, [sp, #28]
 801ed1a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ed1c:	3b01      	subs	r3, #1
 801ed1e:	9307      	str	r3, [sp, #28]
 801ed20:	bf08      	it	eq
 801ed22:	4614      	moveq	r4, r2
 801ed24:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ed26:	bf18      	it	ne
 801ed28:	461c      	movne	r4, r3
 801ed2a:	e6b4      	b.n	801ea96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ed2c:	2900      	cmp	r1, #0
 801ed2e:	f43f af3c 	beq.w	801ebaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ed32:	eb09 0003 	add.w	r0, r9, r3
 801ed36:	0843      	lsrs	r3, r0, #1
 801ed38:	07c0      	lsls	r0, r0, #31
 801ed3a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801ed3e:	bf54      	ite	pl
 801ed40:	f003 030f 	andpl.w	r3, r3, #15
 801ed44:	111b      	asrmi	r3, r3, #4
 801ed46:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801ed4a:	b2db      	uxtb	r3, r3
 801ed4c:	930a      	str	r3, [sp, #40]	@ 0x28
 801ed4e:	e72c      	b.n	801ebaa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ed50:	703a      	strb	r2, [r7, #0]
 801ed52:	7078      	strb	r0, [r7, #1]
 801ed54:	f887 e002 	strb.w	lr, [r7, #2]
 801ed58:	e775      	b.n	801ec46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ed5a:	1c5a      	adds	r2, r3, #1
 801ed5c:	f53f af73 	bmi.w	801ec46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ed60:	4594      	cmp	ip, r2
 801ed62:	f6ff af70 	blt.w	801ec46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ed66:	1c42      	adds	r2, r0, #1
 801ed68:	f53f af6d 	bmi.w	801ec46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ed6c:	4596      	cmp	lr, r2
 801ed6e:	f6ff af6a 	blt.w	801ec46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ed72:	9302      	str	r3, [sp, #8]
 801ed74:	fa0f f38e 	sxth.w	r3, lr
 801ed78:	9a08      	ldr	r2, [sp, #32]
 801ed7a:	9301      	str	r3, [sp, #4]
 801ed7c:	fa0f f38c 	sxth.w	r3, ip
 801ed80:	9105      	str	r1, [sp, #20]
 801ed82:	4639      	mov	r1, r7
 801ed84:	9300      	str	r3, [sp, #0]
 801ed86:	464b      	mov	r3, r9
 801ed88:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801ed8c:	4642      	mov	r2, r8
 801ed8e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ed90:	f7ff fd90 	bl	801e8b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801ed94:	e757      	b.n	801ec46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ed96:	142a      	asrs	r2, r5, #16
 801ed98:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ed9c:	1433      	asrs	r3, r6, #16
 801ed9e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801eda2:	fb09 2303 	mla	r3, r9, r3, r2
 801eda6:	085a      	lsrs	r2, r3, #1
 801eda8:	07d9      	lsls	r1, r3, #31
 801edaa:	f818 2002 	ldrb.w	r2, [r8, r2]
 801edae:	bf54      	ite	pl
 801edb0:	f002 020f 	andpl.w	r2, r2, #15
 801edb4:	1112      	asrmi	r2, r2, #4
 801edb6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801edba:	b2d2      	uxtb	r2, r2
 801edbc:	2800      	cmp	r0, #0
 801edbe:	f000 8085 	beq.w	801eecc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801edc2:	f103 0a01 	add.w	sl, r3, #1
 801edc6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801edca:	f01a 0f01 	tst.w	sl, #1
 801edce:	f818 1001 	ldrb.w	r1, [r8, r1]
 801edd2:	bf0c      	ite	eq
 801edd4:	f001 010f 	andeq.w	r1, r1, #15
 801edd8:	1109      	asrne	r1, r1, #4
 801edda:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801edde:	b2c9      	uxtb	r1, r1
 801ede0:	910f      	str	r1, [sp, #60]	@ 0x3c
 801ede2:	b1df      	cbz	r7, 801ee1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801ede4:	444b      	add	r3, r9
 801ede6:	0859      	lsrs	r1, r3, #1
 801ede8:	f013 0f01 	tst.w	r3, #1
 801edec:	f103 0301 	add.w	r3, r3, #1
 801edf0:	f818 1001 	ldrb.w	r1, [r8, r1]
 801edf4:	bf0c      	ite	eq
 801edf6:	f001 010f 	andeq.w	r1, r1, #15
 801edfa:	1109      	asrne	r1, r1, #4
 801edfc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ee00:	b2c9      	uxtb	r1, r1
 801ee02:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ee04:	0859      	lsrs	r1, r3, #1
 801ee06:	07db      	lsls	r3, r3, #31
 801ee08:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ee0c:	bf54      	ite	pl
 801ee0e:	f001 010f 	andpl.w	r1, r1, #15
 801ee12:	1109      	asrmi	r1, r1, #4
 801ee14:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ee18:	b2c9      	uxtb	r1, r1
 801ee1a:	9110      	str	r1, [sp, #64]	@ 0x40
 801ee1c:	b280      	uxth	r0, r0
 801ee1e:	b2bf      	uxth	r7, r7
 801ee20:	fb00 f307 	mul.w	r3, r0, r7
 801ee24:	0100      	lsls	r0, r0, #4
 801ee26:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801ee2a:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 801ee2e:	1ac0      	subs	r0, r0, r3
 801ee30:	b2bf      	uxth	r7, r7
 801ee32:	b280      	uxth	r0, r0
 801ee34:	1bc9      	subs	r1, r1, r7
 801ee36:	fa1f fa81 	uxth.w	sl, r1
 801ee3a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801ee3c:	4348      	muls	r0, r1
 801ee3e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ee40:	fb02 020a 	mla	r2, r2, sl, r0
 801ee44:	fb07 2701 	mla	r7, r7, r1, r2
 801ee48:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ee4a:	fb03 7302 	mla	r3, r3, r2, r7
 801ee4e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ee52:	b393      	cbz	r3, 801eeba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ee54:	4a2a      	ldr	r2, [pc, #168]	@ (801ef00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801ee56:	2bff      	cmp	r3, #255	@ 0xff
 801ee58:	6811      	ldr	r1, [r2, #0]
 801ee5a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801ee5e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801ee62:	b2c9      	uxtb	r1, r1
 801ee64:	d042      	beq.n	801eeec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801ee66:	b298      	uxth	r0, r3
 801ee68:	43db      	mvns	r3, r3
 801ee6a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801ee6e:	fb11 f100 	smulbb	r1, r1, r0
 801ee72:	b2db      	uxtb	r3, r3
 801ee74:	fb17 f700 	smulbb	r7, r7, r0
 801ee78:	fb02 1103 	mla	r1, r2, r3, r1
 801ee7c:	fb1a f000 	smulbb	r0, sl, r0
 801ee80:	b289      	uxth	r1, r1
 801ee82:	1c4a      	adds	r2, r1, #1
 801ee84:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ee88:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801ee8c:	fb02 7703 	mla	r7, r2, r3, r7
 801ee90:	1209      	asrs	r1, r1, #8
 801ee92:	b2bf      	uxth	r7, r7
 801ee94:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801ee98:	1c7a      	adds	r2, r7, #1
 801ee9a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ee9e:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801eea2:	fb02 0303 	mla	r3, r2, r3, r0
 801eea6:	123f      	asrs	r7, r7, #8
 801eea8:	b29b      	uxth	r3, r3
 801eeaa:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801eeae:	1c5a      	adds	r2, r3, #1
 801eeb0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801eeb4:	121b      	asrs	r3, r3, #8
 801eeb6:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801eeba:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801eebc:	f10c 0c03 	add.w	ip, ip, #3
 801eec0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801eec4:	441d      	add	r5, r3
 801eec6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801eec8:	441e      	add	r6, r3
 801eeca:	e6e7      	b.n	801ec9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801eecc:	2f00      	cmp	r7, #0
 801eece:	d0a5      	beq.n	801ee1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801eed0:	444b      	add	r3, r9
 801eed2:	0859      	lsrs	r1, r3, #1
 801eed4:	07db      	lsls	r3, r3, #31
 801eed6:	f818 1001 	ldrb.w	r1, [r8, r1]
 801eeda:	bf54      	ite	pl
 801eedc:	f001 010f 	andpl.w	r1, r1, #15
 801eee0:	1109      	asrmi	r1, r1, #4
 801eee2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801eee6:	b2c9      	uxtb	r1, r1
 801eee8:	910b      	str	r1, [sp, #44]	@ 0x2c
 801eeea:	e797      	b.n	801ee1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801eeec:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801eef0:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801eef4:	f80c ac01 	strb.w	sl, [ip, #-1]
 801eef8:	e7df      	b.n	801eeba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801eefa:	b013      	add	sp, #76	@ 0x4c
 801eefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef00:	24025130 	.word	0x24025130

0801ef04 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 801ef04:	b530      	push	{r4, r5, lr}
 801ef06:	b29d      	uxth	r5, r3
 801ef08:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801ef0c:	780c      	ldrb	r4, [r1, #0]
 801ef0e:	b298      	uxth	r0, r3
 801ef10:	7813      	ldrb	r3, [r2, #0]
 801ef12:	fb14 f405 	smulbb	r4, r4, r5
 801ef16:	fb13 f300 	smulbb	r3, r3, r0
 801ef1a:	441c      	add	r4, r3
 801ef1c:	b2a4      	uxth	r4, r4
 801ef1e:	1c63      	adds	r3, r4, #1
 801ef20:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801ef24:	7853      	ldrb	r3, [r2, #1]
 801ef26:	fb13 f300 	smulbb	r3, r3, r0
 801ef2a:	1224      	asrs	r4, r4, #8
 801ef2c:	7014      	strb	r4, [r2, #0]
 801ef2e:	784c      	ldrb	r4, [r1, #1]
 801ef30:	fb14 f405 	smulbb	r4, r4, r5
 801ef34:	441c      	add	r4, r3
 801ef36:	b2a4      	uxth	r4, r4
 801ef38:	1c63      	adds	r3, r4, #1
 801ef3a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801ef3e:	1224      	asrs	r4, r4, #8
 801ef40:	7054      	strb	r4, [r2, #1]
 801ef42:	788b      	ldrb	r3, [r1, #2]
 801ef44:	7891      	ldrb	r1, [r2, #2]
 801ef46:	fb13 f305 	smulbb	r3, r3, r5
 801ef4a:	fb11 f000 	smulbb	r0, r1, r0
 801ef4e:	4403      	add	r3, r0
 801ef50:	b29b      	uxth	r3, r3
 801ef52:	1c59      	adds	r1, r3, #1
 801ef54:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801ef58:	121b      	asrs	r3, r3, #8
 801ef5a:	7093      	strb	r3, [r2, #2]
 801ef5c:	bd30      	pop	{r4, r5, pc}
	...

0801ef60 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801ef60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef64:	461c      	mov	r4, r3
 801ef66:	b08b      	sub	sp, #44	@ 0x2c
 801ef68:	460e      	mov	r6, r1
 801ef6a:	4615      	mov	r5, r2
 801ef6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ef6e:	4682      	mov	sl, r0
 801ef70:	6861      	ldr	r1, [r4, #4]
 801ef72:	aa06      	add	r2, sp, #24
 801ef74:	6820      	ldr	r0, [r4, #0]
 801ef76:	2702      	movs	r7, #2
 801ef78:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 801ef7c:	3504      	adds	r5, #4
 801ef7e:	c203      	stmia	r2!, {r0, r1}
 801ef80:	6818      	ldr	r0, [r3, #0]
 801ef82:	aa08      	add	r2, sp, #32
 801ef84:	6859      	ldr	r1, [r3, #4]
 801ef86:	c203      	stmia	r2!, {r0, r1}
 801ef88:	a806      	add	r0, sp, #24
 801ef8a:	f7f2 fec7 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ef8e:	4621      	mov	r1, r4
 801ef90:	a808      	add	r0, sp, #32
 801ef92:	f7f2 feeb 	bl	8011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ef96:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ef9a:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 801ef9e:	f002 0301 	and.w	r3, r2, #1
 801efa2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801efa6:	9302      	str	r3, [sp, #8]
 801efa8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801efac:	f003 0101 	and.w	r1, r3, #1
 801efb0:	9101      	str	r1, [sp, #4]
 801efb2:	9801      	ldr	r0, [sp, #4]
 801efb4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801efb8:	4403      	add	r3, r0
 801efba:	fb01 2303 	mla	r3, r1, r3, r2
 801efbe:	fb93 f3f7 	sdiv	r3, r3, r7
 801efc2:	441e      	add	r6, r3
 801efc4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801efc8:	441a      	add	r2, r3
 801efca:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801efce:	4419      	add	r1, r3
 801efd0:	4b70      	ldr	r3, [pc, #448]	@ (801f194 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801efd2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801efd6:	6818      	ldr	r0, [r3, #0]
 801efd8:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 801efdc:	6803      	ldr	r3, [r0, #0]
 801efde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801efe0:	4798      	blx	r3
 801efe2:	4a6d      	ldr	r2, [pc, #436]	@ (801f198 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 801efe4:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801efe8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801efec:	8813      	ldrh	r3, [r2, #0]
 801efee:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801eff2:	fb03 1404 	mla	r4, r3, r4, r1
 801eff6:	4611      	mov	r1, r2
 801eff8:	fb0b f303 	mul.w	r3, fp, r3
 801effc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f000:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f004:	4404      	add	r4, r0
 801f006:	4423      	add	r3, r4
 801f008:	d073      	beq.n	801f0f2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 801f00a:	9705      	str	r7, [sp, #20]
 801f00c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801f010:	9b03      	ldr	r3, [sp, #12]
 801f012:	429c      	cmp	r4, r3
 801f014:	f080 80b5 	bcs.w	801f182 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801f018:	9b02      	ldr	r3, [sp, #8]
 801f01a:	b35b      	cbz	r3, 801f074 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 801f01c:	7831      	ldrb	r1, [r6, #0]
 801f01e:	4622      	mov	r2, r4
 801f020:	1c77      	adds	r7, r6, #1
 801f022:	3403      	adds	r4, #3
 801f024:	f001 010f 	and.w	r1, r1, #15
 801f028:	f108 3bff 	add.w	fp, r8, #4294967295
 801f02c:	464b      	mov	r3, r9
 801f02e:	4650      	mov	r0, sl
 801f030:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f034:	4429      	add	r1, r5
 801f036:	f7ff ff65 	bl	801ef04 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801f03a:	f1bb 0f01 	cmp.w	fp, #1
 801f03e:	dd1c      	ble.n	801f07a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801f040:	7839      	ldrb	r1, [r7, #0]
 801f042:	4622      	mov	r2, r4
 801f044:	464b      	mov	r3, r9
 801f046:	4650      	mov	r0, sl
 801f048:	0909      	lsrs	r1, r1, #4
 801f04a:	f1ab 0b02 	sub.w	fp, fp, #2
 801f04e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f052:	4429      	add	r1, r5
 801f054:	f7ff ff56 	bl	801ef04 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801f058:	f817 1b01 	ldrb.w	r1, [r7], #1
 801f05c:	1ce2      	adds	r2, r4, #3
 801f05e:	464b      	mov	r3, r9
 801f060:	f001 010f 	and.w	r1, r1, #15
 801f064:	4650      	mov	r0, sl
 801f066:	3406      	adds	r4, #6
 801f068:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f06c:	4429      	add	r1, r5
 801f06e:	f7ff ff49 	bl	801ef04 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801f072:	e7e2      	b.n	801f03a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801f074:	4637      	mov	r7, r6
 801f076:	46c3      	mov	fp, r8
 801f078:	e7df      	b.n	801f03a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801f07a:	d10a      	bne.n	801f092 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 801f07c:	7839      	ldrb	r1, [r7, #0]
 801f07e:	4622      	mov	r2, r4
 801f080:	3403      	adds	r4, #3
 801f082:	464b      	mov	r3, r9
 801f084:	0909      	lsrs	r1, r1, #4
 801f086:	4650      	mov	r0, sl
 801f088:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f08c:	4429      	add	r1, r5
 801f08e:	f7ff ff39 	bl	801ef04 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801f092:	9b04      	ldr	r3, [sp, #16]
 801f094:	9a01      	ldr	r2, [sp, #4]
 801f096:	881b      	ldrh	r3, [r3, #0]
 801f098:	eba3 0308 	sub.w	r3, r3, r8
 801f09c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f0a0:	441c      	add	r4, r3
 801f0a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f0a6:	4413      	add	r3, r2
 801f0a8:	9a05      	ldr	r2, [sp, #20]
 801f0aa:	fb93 f3f2 	sdiv	r3, r3, r2
 801f0ae:	441e      	add	r6, r3
 801f0b0:	e7ae      	b.n	801f010 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 801f0b2:	4632      	mov	r2, r6
 801f0b4:	46c4      	mov	ip, r8
 801f0b6:	e037      	b.n	801f128 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801f0b8:	d10e      	bne.n	801f0d8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 801f0ba:	7812      	ldrb	r2, [r2, #0]
 801f0bc:	3003      	adds	r0, #3
 801f0be:	0912      	lsrs	r2, r2, #4
 801f0c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f0c4:	18ac      	adds	r4, r5, r2
 801f0c6:	5caa      	ldrb	r2, [r5, r2]
 801f0c8:	f800 2c03 	strb.w	r2, [r0, #-3]
 801f0cc:	7862      	ldrb	r2, [r4, #1]
 801f0ce:	f800 2c02 	strb.w	r2, [r0, #-2]
 801f0d2:	78a2      	ldrb	r2, [r4, #2]
 801f0d4:	f800 2c01 	strb.w	r2, [r0, #-1]
 801f0d8:	880c      	ldrh	r4, [r1, #0]
 801f0da:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801f0de:	eba4 0408 	sub.w	r4, r4, r8
 801f0e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f0e6:	4404      	add	r4, r0
 801f0e8:	9801      	ldr	r0, [sp, #4]
 801f0ea:	4402      	add	r2, r0
 801f0ec:	fb92 f2f7 	sdiv	r2, r2, r7
 801f0f0:	4416      	add	r6, r2
 801f0f2:	429c      	cmp	r4, r3
 801f0f4:	d245      	bcs.n	801f182 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801f0f6:	9a02      	ldr	r2, [sp, #8]
 801f0f8:	2a00      	cmp	r2, #0
 801f0fa:	d0da      	beq.n	801f0b2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 801f0fc:	7830      	ldrb	r0, [r6, #0]
 801f0fe:	1c72      	adds	r2, r6, #1
 801f100:	3403      	adds	r4, #3
 801f102:	f000 000f 	and.w	r0, r0, #15
 801f106:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f10a:	eb05 0c00 	add.w	ip, r5, r0
 801f10e:	5c28      	ldrb	r0, [r5, r0]
 801f110:	f804 0c03 	strb.w	r0, [r4, #-3]
 801f114:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801f118:	f804 0c02 	strb.w	r0, [r4, #-2]
 801f11c:	f89c 0002 	ldrb.w	r0, [ip, #2]
 801f120:	f108 3cff 	add.w	ip, r8, #4294967295
 801f124:	f804 0c01 	strb.w	r0, [r4, #-1]
 801f128:	f1bc 0f01 	cmp.w	ip, #1
 801f12c:	4620      	mov	r0, r4
 801f12e:	f104 0406 	add.w	r4, r4, #6
 801f132:	ddc1      	ble.n	801f0b8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 801f134:	7810      	ldrb	r0, [r2, #0]
 801f136:	f1ac 0c02 	sub.w	ip, ip, #2
 801f13a:	0900      	lsrs	r0, r0, #4
 801f13c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f140:	eb05 0e00 	add.w	lr, r5, r0
 801f144:	5c28      	ldrb	r0, [r5, r0]
 801f146:	f804 0c06 	strb.w	r0, [r4, #-6]
 801f14a:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801f14e:	f804 0c05 	strb.w	r0, [r4, #-5]
 801f152:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801f156:	f804 0c04 	strb.w	r0, [r4, #-4]
 801f15a:	f812 0b01 	ldrb.w	r0, [r2], #1
 801f15e:	f000 000f 	and.w	r0, r0, #15
 801f162:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f166:	eb05 0e00 	add.w	lr, r5, r0
 801f16a:	5c28      	ldrb	r0, [r5, r0]
 801f16c:	f804 0c03 	strb.w	r0, [r4, #-3]
 801f170:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801f174:	f804 0c02 	strb.w	r0, [r4, #-2]
 801f178:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801f17c:	f804 0c01 	strb.w	r0, [r4, #-1]
 801f180:	e7d2      	b.n	801f128 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801f182:	4b04      	ldr	r3, [pc, #16]	@ (801f194 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801f184:	6818      	ldr	r0, [r3, #0]
 801f186:	6803      	ldr	r3, [r0, #0]
 801f188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f18a:	4798      	blx	r3
 801f18c:	b00b      	add	sp, #44	@ 0x2c
 801f18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f192:	bf00      	nop
 801f194:	24025120 	.word	0x24025120
 801f198:	2402511a 	.word	0x2402511a

0801f19c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 801f19c:	b530      	push	{r4, r5, lr}
 801f19e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 801f1a2:	780d      	ldrb	r5, [r1, #0]
 801f1a4:	28ff      	cmp	r0, #255	@ 0xff
 801f1a6:	d107      	bne.n	801f1b8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801f1a8:	2bff      	cmp	r3, #255	@ 0xff
 801f1aa:	d105      	bne.n	801f1b8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801f1ac:	7015      	strb	r5, [r2, #0]
 801f1ae:	784b      	ldrb	r3, [r1, #1]
 801f1b0:	7053      	strb	r3, [r2, #1]
 801f1b2:	788b      	ldrb	r3, [r1, #2]
 801f1b4:	7093      	strb	r3, [r2, #2]
 801f1b6:	bd30      	pop	{r4, r5, pc}
 801f1b8:	fb10 f003 	smulbb	r0, r0, r3
 801f1bc:	b283      	uxth	r3, r0
 801f1be:	1c58      	adds	r0, r3, #1
 801f1c0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f1c4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f1c8:	b284      	uxth	r4, r0
 801f1ca:	43c0      	mvns	r0, r0
 801f1cc:	fb15 f504 	smulbb	r5, r5, r4
 801f1d0:	b2c3      	uxtb	r3, r0
 801f1d2:	7810      	ldrb	r0, [r2, #0]
 801f1d4:	fb00 5003 	mla	r0, r0, r3, r5
 801f1d8:	b280      	uxth	r0, r0
 801f1da:	1c45      	adds	r5, r0, #1
 801f1dc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f1e0:	7855      	ldrb	r5, [r2, #1]
 801f1e2:	fb15 f503 	smulbb	r5, r5, r3
 801f1e6:	1200      	asrs	r0, r0, #8
 801f1e8:	7010      	strb	r0, [r2, #0]
 801f1ea:	7848      	ldrb	r0, [r1, #1]
 801f1ec:	fb00 5004 	mla	r0, r0, r4, r5
 801f1f0:	b280      	uxth	r0, r0
 801f1f2:	1c45      	adds	r5, r0, #1
 801f1f4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f1f8:	1200      	asrs	r0, r0, #8
 801f1fa:	7050      	strb	r0, [r2, #1]
 801f1fc:	7888      	ldrb	r0, [r1, #2]
 801f1fe:	7891      	ldrb	r1, [r2, #2]
 801f200:	fb11 f303 	smulbb	r3, r1, r3
 801f204:	fb00 3304 	mla	r3, r0, r4, r3
 801f208:	b29b      	uxth	r3, r3
 801f20a:	1c59      	adds	r1, r3, #1
 801f20c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801f210:	121b      	asrs	r3, r3, #8
 801f212:	e7cf      	b.n	801f1b4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

0801f214 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801f214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f218:	461d      	mov	r5, r3
 801f21a:	b08f      	sub	sp, #60	@ 0x3c
 801f21c:	460c      	mov	r4, r1
 801f21e:	4616      	mov	r6, r2
 801f220:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f222:	4680      	mov	r8, r0
 801f224:	6869      	ldr	r1, [r5, #4]
 801f226:	aa0a      	add	r2, sp, #40	@ 0x28
 801f228:	6828      	ldr	r0, [r5, #0]
 801f22a:	3604      	adds	r6, #4
 801f22c:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 801f230:	4f57      	ldr	r7, [pc, #348]	@ (801f390 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 801f232:	c203      	stmia	r2!, {r0, r1}
 801f234:	6818      	ldr	r0, [r3, #0]
 801f236:	aa0c      	add	r2, sp, #48	@ 0x30
 801f238:	6859      	ldr	r1, [r3, #4]
 801f23a:	c203      	stmia	r2!, {r0, r1}
 801f23c:	a80a      	add	r0, sp, #40	@ 0x28
 801f23e:	f7f2 fd6d 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f242:	4629      	mov	r1, r5
 801f244:	a80c      	add	r0, sp, #48	@ 0x30
 801f246:	2502      	movs	r5, #2
 801f248:	f7f2 fd90 	bl	8011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f24c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801f250:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 801f254:	f002 0301 	and.w	r3, r2, #1
 801f258:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 801f25c:	9304      	str	r3, [sp, #16]
 801f25e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801f262:	f003 0101 	and.w	r1, r3, #1
 801f266:	9103      	str	r1, [sp, #12]
 801f268:	9803      	ldr	r0, [sp, #12]
 801f26a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801f26e:	4403      	add	r3, r0
 801f270:	6838      	ldr	r0, [r7, #0]
 801f272:	fb01 2303 	mla	r3, r1, r3, r2
 801f276:	fb93 f3f5 	sdiv	r3, r3, r5
 801f27a:	18e5      	adds	r5, r4, r3
 801f27c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f280:	441a      	add	r2, r3
 801f282:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801f286:	4419      	add	r1, r3
 801f288:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801f28c:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 801f290:	6803      	ldr	r3, [r0, #0]
 801f292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f294:	4798      	blx	r3
 801f296:	4a3f      	ldr	r2, [pc, #252]	@ (801f394 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 801f298:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 801f29c:	8813      	ldrh	r3, [r2, #0]
 801f29e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801f2a2:	9207      	str	r2, [sp, #28]
 801f2a4:	fb03 1404 	mla	r4, r3, r4, r1
 801f2a8:	fb0a f303 	mul.w	r3, sl, r3
 801f2ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f2b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f2b4:	4404      	add	r4, r0
 801f2b6:	18e3      	adds	r3, r4, r3
 801f2b8:	e9cd 3705 	strd	r3, r7, [sp, #20]
 801f2bc:	9b05      	ldr	r3, [sp, #20]
 801f2be:	429c      	cmp	r4, r3
 801f2c0:	d25d      	bcs.n	801f37e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 801f2c2:	9b04      	ldr	r3, [sp, #16]
 801f2c4:	2b00      	cmp	r3, #0
 801f2c6:	d037      	beq.n	801f338 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 801f2c8:	782b      	ldrb	r3, [r5, #0]
 801f2ca:	1c6f      	adds	r7, r5, #1
 801f2cc:	f003 030f 	and.w	r3, r3, #15
 801f2d0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 801f2d6:	0e1b      	lsrs	r3, r3, #24
 801f2d8:	d006      	beq.n	801f2e8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 801f2da:	9300      	str	r3, [sp, #0]
 801f2dc:	4622      	mov	r2, r4
 801f2de:	464b      	mov	r3, r9
 801f2e0:	a909      	add	r1, sp, #36	@ 0x24
 801f2e2:	4640      	mov	r0, r8
 801f2e4:	f7ff ff5a 	bl	801f19c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801f2e8:	3403      	adds	r4, #3
 801f2ea:	f10b 3aff 	add.w	sl, fp, #4294967295
 801f2ee:	f1ba 0f01 	cmp.w	sl, #1
 801f2f2:	dd24      	ble.n	801f33e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 801f2f4:	783b      	ldrb	r3, [r7, #0]
 801f2f6:	091b      	lsrs	r3, r3, #4
 801f2f8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f2fc:	9308      	str	r3, [sp, #32]
 801f2fe:	0e1b      	lsrs	r3, r3, #24
 801f300:	d006      	beq.n	801f310 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 801f302:	9300      	str	r3, [sp, #0]
 801f304:	4622      	mov	r2, r4
 801f306:	464b      	mov	r3, r9
 801f308:	a908      	add	r1, sp, #32
 801f30a:	4640      	mov	r0, r8
 801f30c:	f7ff ff46 	bl	801f19c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801f310:	f817 3b01 	ldrb.w	r3, [r7], #1
 801f314:	f003 030f 	and.w	r3, r3, #15
 801f318:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f31c:	9309      	str	r3, [sp, #36]	@ 0x24
 801f31e:	0e1b      	lsrs	r3, r3, #24
 801f320:	d006      	beq.n	801f330 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 801f322:	9300      	str	r3, [sp, #0]
 801f324:	1ce2      	adds	r2, r4, #3
 801f326:	464b      	mov	r3, r9
 801f328:	a909      	add	r1, sp, #36	@ 0x24
 801f32a:	4640      	mov	r0, r8
 801f32c:	f7ff ff36 	bl	801f19c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801f330:	3406      	adds	r4, #6
 801f332:	f1aa 0a02 	sub.w	sl, sl, #2
 801f336:	e7da      	b.n	801f2ee <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801f338:	462f      	mov	r7, r5
 801f33a:	46da      	mov	sl, fp
 801f33c:	e7d7      	b.n	801f2ee <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801f33e:	d10e      	bne.n	801f35e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 801f340:	783b      	ldrb	r3, [r7, #0]
 801f342:	091b      	lsrs	r3, r3, #4
 801f344:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f348:	9309      	str	r3, [sp, #36]	@ 0x24
 801f34a:	0e1b      	lsrs	r3, r3, #24
 801f34c:	d006      	beq.n	801f35c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 801f34e:	9300      	str	r3, [sp, #0]
 801f350:	4622      	mov	r2, r4
 801f352:	464b      	mov	r3, r9
 801f354:	a909      	add	r1, sp, #36	@ 0x24
 801f356:	4640      	mov	r0, r8
 801f358:	f7ff ff20 	bl	801f19c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801f35c:	3403      	adds	r4, #3
 801f35e:	9b07      	ldr	r3, [sp, #28]
 801f360:	9a03      	ldr	r2, [sp, #12]
 801f362:	881b      	ldrh	r3, [r3, #0]
 801f364:	eba3 030b 	sub.w	r3, r3, fp
 801f368:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f36c:	441c      	add	r4, r3
 801f36e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801f372:	4413      	add	r3, r2
 801f374:	2202      	movs	r2, #2
 801f376:	fb93 f3f2 	sdiv	r3, r3, r2
 801f37a:	441d      	add	r5, r3
 801f37c:	e79e      	b.n	801f2bc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 801f37e:	9b06      	ldr	r3, [sp, #24]
 801f380:	6818      	ldr	r0, [r3, #0]
 801f382:	6803      	ldr	r3, [r0, #0]
 801f384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f386:	4798      	blx	r3
 801f388:	b00f      	add	sp, #60	@ 0x3c
 801f38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f38e:	bf00      	nop
 801f390:	24025120 	.word	0x24025120
 801f394:	2402511a 	.word	0x2402511a

0801f398 <CRC_Lock>:
 801f398:	4a2d      	ldr	r2, [pc, #180]	@ (801f450 <CRC_Lock+0xb8>)
 801f39a:	b530      	push	{r4, r5, lr}
 801f39c:	6813      	ldr	r3, [r2, #0]
 801f39e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 801f3a2:	f023 0301 	bic.w	r3, r3, #1
 801f3a6:	6013      	str	r3, [r2, #0]
 801f3a8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 801f3ac:	4b29      	ldr	r3, [pc, #164]	@ (801f454 <CRC_Lock+0xbc>)
 801f3ae:	681c      	ldr	r4, [r3, #0]
 801f3b0:	4014      	ands	r4, r2
 801f3b2:	42ac      	cmp	r4, r5
 801f3b4:	d005      	beq.n	801f3c2 <CRC_Lock+0x2a>
 801f3b6:	681c      	ldr	r4, [r3, #0]
 801f3b8:	f24c 2570 	movw	r5, #49776	@ 0xc270
 801f3bc:	4014      	ands	r4, r2
 801f3be:	42ac      	cmp	r4, r5
 801f3c0:	d125      	bne.n	801f40e <CRC_Lock+0x76>
 801f3c2:	4b25      	ldr	r3, [pc, #148]	@ (801f458 <CRC_Lock+0xc0>)
 801f3c4:	681b      	ldr	r3, [r3, #0]
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	d139      	bne.n	801f43e <CRC_Lock+0xa6>
 801f3ca:	4b24      	ldr	r3, [pc, #144]	@ (801f45c <CRC_Lock+0xc4>)
 801f3cc:	681a      	ldr	r2, [r3, #0]
 801f3ce:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801f3d2:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 801f3d6:	d00d      	beq.n	801f3f4 <CRC_Lock+0x5c>
 801f3d8:	681a      	ldr	r2, [r3, #0]
 801f3da:	f240 4483 	movw	r4, #1155	@ 0x483
 801f3de:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801f3e2:	42a2      	cmp	r2, r4
 801f3e4:	d006      	beq.n	801f3f4 <CRC_Lock+0x5c>
 801f3e6:	681b      	ldr	r3, [r3, #0]
 801f3e8:	f240 4285 	movw	r2, #1157	@ 0x485
 801f3ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801f3f0:	4293      	cmp	r3, r2
 801f3f2:	d124      	bne.n	801f43e <CRC_Lock+0xa6>
 801f3f4:	4b1a      	ldr	r3, [pc, #104]	@ (801f460 <CRC_Lock+0xc8>)
 801f3f6:	2201      	movs	r2, #1
 801f3f8:	601a      	str	r2, [r3, #0]
 801f3fa:	681a      	ldr	r2, [r3, #0]
 801f3fc:	2a00      	cmp	r2, #0
 801f3fe:	d1fc      	bne.n	801f3fa <CRC_Lock+0x62>
 801f400:	4b18      	ldr	r3, [pc, #96]	@ (801f464 <CRC_Lock+0xcc>)
 801f402:	6018      	str	r0, [r3, #0]
 801f404:	6818      	ldr	r0, [r3, #0]
 801f406:	1a43      	subs	r3, r0, r1
 801f408:	4258      	negs	r0, r3
 801f40a:	4158      	adcs	r0, r3
 801f40c:	e00e      	b.n	801f42c <CRC_Lock+0x94>
 801f40e:	681b      	ldr	r3, [r3, #0]
 801f410:	4013      	ands	r3, r2
 801f412:	f24d 2220 	movw	r2, #53792	@ 0xd220
 801f416:	4293      	cmp	r3, r2
 801f418:	d111      	bne.n	801f43e <CRC_Lock+0xa6>
 801f41a:	4b13      	ldr	r3, [pc, #76]	@ (801f468 <CRC_Lock+0xd0>)
 801f41c:	f240 4286 	movw	r2, #1158	@ 0x486
 801f420:	681b      	ldr	r3, [r3, #0]
 801f422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801f426:	4293      	cmp	r3, r2
 801f428:	d001      	beq.n	801f42e <CRC_Lock+0x96>
 801f42a:	2000      	movs	r0, #0
 801f42c:	bd30      	pop	{r4, r5, pc}
 801f42e:	4b0f      	ldr	r3, [pc, #60]	@ (801f46c <CRC_Lock+0xd4>)
 801f430:	2201      	movs	r2, #1
 801f432:	601a      	str	r2, [r3, #0]
 801f434:	681a      	ldr	r2, [r3, #0]
 801f436:	2a00      	cmp	r2, #0
 801f438:	d1fc      	bne.n	801f434 <CRC_Lock+0x9c>
 801f43a:	4b0d      	ldr	r3, [pc, #52]	@ (801f470 <CRC_Lock+0xd8>)
 801f43c:	e7e1      	b.n	801f402 <CRC_Lock+0x6a>
 801f43e:	4b0d      	ldr	r3, [pc, #52]	@ (801f474 <CRC_Lock+0xdc>)
 801f440:	2201      	movs	r2, #1
 801f442:	601a      	str	r2, [r3, #0]
 801f444:	681a      	ldr	r2, [r3, #0]
 801f446:	2a00      	cmp	r2, #0
 801f448:	d1fc      	bne.n	801f444 <CRC_Lock+0xac>
 801f44a:	4b0b      	ldr	r3, [pc, #44]	@ (801f478 <CRC_Lock+0xe0>)
 801f44c:	e7d9      	b.n	801f402 <CRC_Lock+0x6a>
 801f44e:	bf00      	nop
 801f450:	e0002000 	.word	0xe0002000
 801f454:	e000ed00 	.word	0xe000ed00
 801f458:	e0042000 	.word	0xe0042000
 801f45c:	5c001000 	.word	0x5c001000
 801f460:	58024c08 	.word	0x58024c08
 801f464:	58024c00 	.word	0x58024c00
 801f468:	46008ff0 	.word	0x46008ff0
 801f46c:	46024c08 	.word	0x46024c08
 801f470:	46024c00 	.word	0x46024c00
 801f474:	40023008 	.word	0x40023008
 801f478:	40023000 	.word	0x40023000

0801f47c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801f47c:	6101      	str	r1, [r0, #16]
 801f47e:	4770      	bx	lr

0801f480 <_ZN8touchgfx8Gestures4tickEv>:
 801f480:	7b83      	ldrb	r3, [r0, #14]
 801f482:	b14b      	cbz	r3, 801f498 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801f484:	8903      	ldrh	r3, [r0, #8]
 801f486:	3301      	adds	r3, #1
 801f488:	b29b      	uxth	r3, r3
 801f48a:	2b07      	cmp	r3, #7
 801f48c:	8103      	strh	r3, [r0, #8]
 801f48e:	bf81      	itttt	hi
 801f490:	2300      	movhi	r3, #0
 801f492:	8143      	strhhi	r3, [r0, #10]
 801f494:	8183      	strhhi	r3, [r0, #12]
 801f496:	7383      	strbhi	r3, [r0, #14]
 801f498:	4770      	bx	lr
	...

0801f49c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801f49c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801f4a0:	4698      	mov	r8, r3
 801f4a2:	8883      	ldrh	r3, [r0, #4]
 801f4a4:	4604      	mov	r4, r0
 801f4a6:	4617      	mov	r7, r2
 801f4a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f4ac:	eba8 0303 	sub.w	r3, r8, r3
 801f4b0:	4a19      	ldr	r2, [pc, #100]	@ (801f518 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801f4b2:	460e      	mov	r6, r1
 801f4b4:	b21b      	sxth	r3, r3
 801f4b6:	88c1      	ldrh	r1, [r0, #6]
 801f4b8:	9200      	str	r2, [sp, #0]
 801f4ba:	2000      	movs	r0, #0
 801f4bc:	2b00      	cmp	r3, #0
 801f4be:	8aa2      	ldrh	r2, [r4, #20]
 801f4c0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 801f4c4:	bfb8      	it	lt
 801f4c6:	425b      	neglt	r3, r3
 801f4c8:	f88d 0004 	strb.w	r0, [sp, #4]
 801f4cc:	f8ad 1008 	strh.w	r1, [sp, #8]
 801f4d0:	b21b      	sxth	r3, r3
 801f4d2:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f4d6:	f8ad 500c 	strh.w	r5, [sp, #12]
 801f4da:	4293      	cmp	r3, r2
 801f4dc:	dc07      	bgt.n	801f4ee <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801f4de:	1a69      	subs	r1, r5, r1
 801f4e0:	b209      	sxth	r1, r1
 801f4e2:	2900      	cmp	r1, #0
 801f4e4:	bfb8      	it	lt
 801f4e6:	4249      	neglt	r1, r1
 801f4e8:	b209      	sxth	r1, r1
 801f4ea:	428a      	cmp	r2, r1
 801f4ec:	da10      	bge.n	801f510 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801f4ee:	6920      	ldr	r0, [r4, #16]
 801f4f0:	4669      	mov	r1, sp
 801f4f2:	eba8 0606 	sub.w	r6, r8, r6
 801f4f6:	1bef      	subs	r7, r5, r7
 801f4f8:	6803      	ldr	r3, [r0, #0]
 801f4fa:	685b      	ldr	r3, [r3, #4]
 801f4fc:	4798      	blx	r3
 801f4fe:	2300      	movs	r3, #0
 801f500:	2001      	movs	r0, #1
 801f502:	8166      	strh	r6, [r4, #10]
 801f504:	8123      	strh	r3, [r4, #8]
 801f506:	81a7      	strh	r7, [r4, #12]
 801f508:	f8a4 8004 	strh.w	r8, [r4, #4]
 801f50c:	80e5      	strh	r5, [r4, #6]
 801f50e:	73a0      	strb	r0, [r4, #14]
 801f510:	b004      	add	sp, #16
 801f512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f516:	bf00      	nop
 801f518:	08024524 	.word	0x08024524

0801f51c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801f51c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f51e:	461e      	mov	r6, r3
 801f520:	1e4b      	subs	r3, r1, #1
 801f522:	b085      	sub	sp, #20
 801f524:	4604      	mov	r4, r0
 801f526:	2b01      	cmp	r3, #1
 801f528:	460d      	mov	r5, r1
 801f52a:	4617      	mov	r7, r2
 801f52c:	d84b      	bhi.n	801f5c6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801f52e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f532:	1cd3      	adds	r3, r2, #3
 801f534:	b29b      	uxth	r3, r3
 801f536:	2b06      	cmp	r3, #6
 801f538:	d916      	bls.n	801f568 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801f53a:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 801f5dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801f53e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f542:	f8cd c004 	str.w	ip, [sp, #4]
 801f546:	f04f 0c00 	mov.w	ip, #0
 801f54a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f54e:	6900      	ldr	r0, [r0, #16]
 801f550:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f554:	a901      	add	r1, sp, #4
 801f556:	f88d c008 	strb.w	ip, [sp, #8]
 801f55a:	f8ad 200a 	strh.w	r2, [sp, #10]
 801f55e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f562:	6803      	ldr	r3, [r0, #0]
 801f564:	689b      	ldr	r3, [r3, #8]
 801f566:	4798      	blx	r3
 801f568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f56c:	1cd3      	adds	r3, r2, #3
 801f56e:	b29b      	uxth	r3, r3
 801f570:	2b06      	cmp	r3, #6
 801f572:	d916      	bls.n	801f5a2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801f574:	f8df c064 	ldr.w	ip, [pc, #100]	@ 801f5dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801f578:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f57c:	f8cd c004 	str.w	ip, [sp, #4]
 801f580:	f04f 0c01 	mov.w	ip, #1
 801f584:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f588:	6920      	ldr	r0, [r4, #16]
 801f58a:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f58e:	a901      	add	r1, sp, #4
 801f590:	f88d c008 	strb.w	ip, [sp, #8]
 801f594:	f8ad 200a 	strh.w	r2, [sp, #10]
 801f598:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f59c:	6803      	ldr	r3, [r0, #0]
 801f59e:	689b      	ldr	r3, [r3, #8]
 801f5a0:	4798      	blx	r3
 801f5a2:	4b0d      	ldr	r3, [pc, #52]	@ (801f5d8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801f5a4:	a901      	add	r1, sp, #4
 801f5a6:	6920      	ldr	r0, [r4, #16]
 801f5a8:	9301      	str	r3, [sp, #4]
 801f5aa:	2300      	movs	r3, #0
 801f5ac:	f88d 5008 	strb.w	r5, [sp, #8]
 801f5b0:	f8ad 700a 	strh.w	r7, [sp, #10]
 801f5b4:	f8ad 600c 	strh.w	r6, [sp, #12]
 801f5b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f5bc:	6803      	ldr	r3, [r0, #0]
 801f5be:	681b      	ldr	r3, [r3, #0]
 801f5c0:	4798      	blx	r3
 801f5c2:	b005      	add	sp, #20
 801f5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f5c6:	2900      	cmp	r1, #0
 801f5c8:	d1eb      	bne.n	801f5a2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801f5ca:	80a2      	strh	r2, [r4, #4]
 801f5cc:	80c6      	strh	r6, [r0, #6]
 801f5ce:	60a1      	str	r1, [r4, #8]
 801f5d0:	81a1      	strh	r1, [r4, #12]
 801f5d2:	73a1      	strb	r1, [r4, #14]
 801f5d4:	e7e5      	b.n	801f5a2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801f5d6:	bf00      	nop
 801f5d8:	08024510 	.word	0x08024510
 801f5dc:	08024538 	.word	0x08024538

0801f5e0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 801f5e0:	10c9      	asrs	r1, r1, #3
 801f5e2:	2900      	cmp	r1, #0
 801f5e4:	bfb8      	it	lt
 801f5e6:	4249      	neglt	r1, r1
 801f5e8:	2801      	cmp	r0, #1
 801f5ea:	d108      	bne.n	801f5fe <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 801f5ec:	f3c1 0008 	ubfx	r0, r1, #0, #9
 801f5f0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 801f5f4:	4601      	mov	r1, r0
 801f5f6:	dd02      	ble.n	801f5fe <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 801f5f8:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 801f5fc:	4770      	bx	lr
 801f5fe:	29ff      	cmp	r1, #255	@ 0xff
 801f600:	bfa8      	it	ge
 801f602:	21ff      	movge	r1, #255	@ 0xff
 801f604:	4608      	mov	r0, r1
 801f606:	4770      	bx	lr

0801f608 <_ZN8touchgfx10Rasterizer6lineToEii>:
 801f608:	b410      	push	{r4}
 801f60a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801f60e:	429c      	cmp	r4, r3
 801f610:	d803      	bhi.n	801f61a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 801f612:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f616:	f7f1 bb35 	b.w	8010c84 <_ZN8touchgfx7Outline6lineToEii>
 801f61a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f61e:	4770      	bx	lr

0801f620 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 801f620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f624:	b08b      	sub	sp, #44	@ 0x2c
 801f626:	4606      	mov	r6, r0
 801f628:	468a      	mov	sl, r1
 801f62a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801f62e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801f632:	9308      	str	r3, [sp, #32]
 801f634:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801f638:	9309      	str	r3, [sp, #36]	@ 0x24
 801f63a:	f7f1 fc8e 	bl	8010f5a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 801f63e:	68b5      	ldr	r5, [r6, #8]
 801f640:	4604      	mov	r4, r0
 801f642:	2d00      	cmp	r5, #0
 801f644:	d044      	beq.n	801f6d0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801f646:	6873      	ldr	r3, [r6, #4]
 801f648:	42ab      	cmp	r3, r5
 801f64a:	d33d      	bcc.n	801f6c8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 801f64c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801f650:	f04f 0800 	mov.w	r8, #0
 801f654:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 801f658:	eb02 0b03 	add.w	fp, r2, r3
 801f65c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801f660:	fb02 1203 	mla	r2, r2, r3, r1
 801f664:	9205      	str	r2, [sp, #20]
 801f666:	1e6a      	subs	r2, r5, #1
 801f668:	9204      	str	r2, [sp, #16]
 801f66a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 801f66e:	f9b4 7000 	ldrsh.w	r7, [r4]
 801f672:	454b      	cmp	r3, r9
 801f674:	463a      	mov	r2, r7
 801f676:	d008      	beq.n	801f68a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 801f678:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 801f67c:	eb03 0b09 	add.w	fp, r3, r9
 801f680:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 801f684:	fb03 1309 	mla	r3, r3, r9, r1
 801f688:	9305      	str	r3, [sp, #20]
 801f68a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f68e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801f692:	4498      	add	r8, r3
 801f694:	9b04      	ldr	r3, [sp, #16]
 801f696:	3b01      	subs	r3, #1
 801f698:	9304      	str	r3, [sp, #16]
 801f69a:	9b04      	ldr	r3, [sp, #16]
 801f69c:	3301      	adds	r3, #1
 801f69e:	d015      	beq.n	801f6cc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 801f6a0:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 801f6a4:	42bb      	cmp	r3, r7
 801f6a6:	d117      	bne.n	801f6d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 801f6a8:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801f6ac:	9b04      	ldr	r3, [sp, #16]
 801f6ae:	4548      	cmp	r0, r9
 801f6b0:	f103 33ff 	add.w	r3, r3, #4294967295
 801f6b4:	d17d      	bne.n	801f7b2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 801f6b6:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 801f6ba:	4401      	add	r1, r0
 801f6bc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f6c0:	4480      	add	r8, r0
 801f6c2:	e7e9      	b.n	801f698 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 801f6c4:	461f      	mov	r7, r3
 801f6c6:	e042      	b.n	801f74e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 801f6c8:	2000      	movs	r0, #0
 801f6ca:	e002      	b.n	801f6d2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 801f6cc:	2900      	cmp	r1, #0
 801f6ce:	d16d      	bne.n	801f7ac <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 801f6d0:	2001      	movs	r0, #1
 801f6d2:	b00b      	add	sp, #44	@ 0x2c
 801f6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6d8:	b379      	cbz	r1, 801f73a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 801f6da:	2f00      	cmp	r7, #0
 801f6dc:	db29      	blt.n	801f732 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801f6de:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 801f6e2:	42bb      	cmp	r3, r7
 801f6e4:	dd25      	ble.n	801f732 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801f6e6:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 801f6ea:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 801f6ee:	f7ff ff77 	bl	801f5e0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 801f6f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f6f4:	fb10 f003 	smulbb	r0, r0, r3
 801f6f8:	b280      	uxth	r0, r0
 801f6fa:	1c41      	adds	r1, r0, #1
 801f6fc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f700:	1209      	asrs	r1, r1, #8
 801f702:	f011 0fff 	tst.w	r1, #255	@ 0xff
 801f706:	d014      	beq.n	801f732 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801f708:	b2c9      	uxtb	r1, r1
 801f70a:	9808      	ldr	r0, [sp, #32]
 801f70c:	b2ba      	uxth	r2, r7
 801f70e:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 801f710:	9102      	str	r1, [sp, #8]
 801f712:	2101      	movs	r1, #1
 801f714:	4413      	add	r3, r2
 801f716:	4402      	add	r2, r0
 801f718:	9101      	str	r1, [sp, #4]
 801f71a:	fa0f f18b 	sxth.w	r1, fp
 801f71e:	f8da 0000 	ldr.w	r0, [sl]
 801f722:	b21b      	sxth	r3, r3
 801f724:	9100      	str	r1, [sp, #0]
 801f726:	b212      	sxth	r2, r2
 801f728:	6941      	ldr	r1, [r0, #20]
 801f72a:	4650      	mov	r0, sl
 801f72c:	460d      	mov	r5, r1
 801f72e:	9905      	ldr	r1, [sp, #20]
 801f730:	47a8      	blx	r5
 801f732:	9b04      	ldr	r3, [sp, #16]
 801f734:	1c7a      	adds	r2, r7, #1
 801f736:	3301      	adds	r3, #1
 801f738:	d0ca      	beq.n	801f6d0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801f73a:	f9b4 7000 	ldrsh.w	r7, [r4]
 801f73e:	1abb      	subs	r3, r7, r2
 801f740:	2b00      	cmp	r3, #0
 801f742:	dd31      	ble.n	801f7a8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f744:	2a00      	cmp	r2, #0
 801f746:	dabd      	bge.n	801f6c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 801f748:	2f00      	cmp	r7, #0
 801f74a:	dd2d      	ble.n	801f7a8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f74c:	2200      	movs	r2, #0
 801f74e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 801f752:	19d1      	adds	r1, r2, r7
 801f754:	4299      	cmp	r1, r3
 801f756:	db02      	blt.n	801f75e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 801f758:	1a9f      	subs	r7, r3, r2
 801f75a:	2f00      	cmp	r7, #0
 801f75c:	dd24      	ble.n	801f7a8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f75e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 801f762:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 801f766:	f7ff ff3b 	bl	801f5e0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 801f76a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f76c:	fb10 f003 	smulbb	r0, r0, r3
 801f770:	b280      	uxth	r0, r0
 801f772:	1c41      	adds	r1, r0, #1
 801f774:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f778:	1209      	asrs	r1, r1, #8
 801f77a:	f011 0fff 	tst.w	r1, #255	@ 0xff
 801f77e:	d013      	beq.n	801f7a8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f780:	b292      	uxth	r2, r2
 801f782:	9808      	ldr	r0, [sp, #32]
 801f784:	b2c9      	uxtb	r1, r1
 801f786:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 801f788:	b23f      	sxth	r7, r7
 801f78a:	4413      	add	r3, r2
 801f78c:	9102      	str	r1, [sp, #8]
 801f78e:	4402      	add	r2, r0
 801f790:	fa0f f18b 	sxth.w	r1, fp
 801f794:	f8da 0000 	ldr.w	r0, [sl]
 801f798:	b21b      	sxth	r3, r3
 801f79a:	9100      	str	r1, [sp, #0]
 801f79c:	b212      	sxth	r2, r2
 801f79e:	9701      	str	r7, [sp, #4]
 801f7a0:	9905      	ldr	r1, [sp, #20]
 801f7a2:	6947      	ldr	r7, [r0, #20]
 801f7a4:	4650      	mov	r0, sl
 801f7a6:	47b8      	blx	r7
 801f7a8:	464b      	mov	r3, r9
 801f7aa:	e75e      	b.n	801f66a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 801f7ac:	2f00      	cmp	r7, #0
 801f7ae:	da96      	bge.n	801f6de <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 801f7b0:	e78e      	b.n	801f6d0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801f7b2:	2900      	cmp	r1, #0
 801f7b4:	d0f8      	beq.n	801f7a8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f7b6:	e790      	b.n	801f6da <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0801f7b8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 801f7b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801f7bc:	461e      	mov	r6, r3
 801f7be:	4b36      	ldr	r3, [pc, #216]	@ (801f898 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 801f7c0:	2500      	movs	r5, #0
 801f7c2:	f100 0814 	add.w	r8, r0, #20
 801f7c6:	4604      	mov	r4, r0
 801f7c8:	4617      	mov	r7, r2
 801f7ca:	e9c0 3100 	strd	r3, r1, [r0]
 801f7ce:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801f7d2:	8185      	strh	r5, [r0, #12]
 801f7d4:	8103      	strh	r3, [r0, #8]
 801f7d6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801f7da:	81c5      	strh	r5, [r0, #14]
 801f7dc:	7283      	strb	r3, [r0, #10]
 801f7de:	8205      	strh	r5, [r0, #16]
 801f7e0:	8245      	strh	r5, [r0, #18]
 801f7e2:	4640      	mov	r0, r8
 801f7e4:	f7f0 fd94 	bl	8010310 <_ZN8touchgfx7OutlineC1Ev>
 801f7e8:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 801f7ec:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 801f7f0:	466b      	mov	r3, sp
 801f7f2:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 801f7f6:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 801f7fa:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 801f7fe:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 801f802:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 801f806:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 801f80a:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 801f80e:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 801f812:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 801f816:	6830      	ldr	r0, [r6, #0]
 801f818:	6871      	ldr	r1, [r6, #4]
 801f81a:	8872      	ldrh	r2, [r6, #2]
 801f81c:	8835      	ldrh	r5, [r6, #0]
 801f81e:	c303      	stmia	r3!, {r0, r1}
 801f820:	887b      	ldrh	r3, [r7, #2]
 801f822:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 801f826:	4413      	add	r3, r2
 801f828:	883a      	ldrh	r2, [r7, #0]
 801f82a:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801f82e:	442a      	add	r2, r5
 801f830:	81e3      	strh	r3, [r4, #14]
 801f832:	8220      	strh	r0, [r4, #16]
 801f834:	4668      	mov	r0, sp
 801f836:	81a2      	strh	r2, [r4, #12]
 801f838:	8261      	strh	r1, [r4, #18]
 801f83a:	4639      	mov	r1, r7
 801f83c:	f7f2 fa96 	bl	8011d6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f840:	f104 000c 	add.w	r0, r4, #12
 801f844:	f7f2 fa6a 	bl	8011d1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f848:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801f84c:	f8bd 2000 	ldrh.w	r2, [sp]
 801f850:	4640      	mov	r0, r8
 801f852:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 801f856:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 801f85a:	f7f0 fd3d 	bl	80102d8 <_ZN8touchgfx7Outline5resetEv>
 801f85e:	f9bd 3000 	ldrsh.w	r3, [sp]
 801f862:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 801f866:	4620      	mov	r0, r4
 801f868:	015b      	lsls	r3, r3, #5
 801f86a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801f86c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801f870:	015b      	lsls	r3, r3, #5
 801f872:	6523      	str	r3, [r4, #80]	@ 0x50
 801f874:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801f878:	015b      	lsls	r3, r3, #5
 801f87a:	6563      	str	r3, [r4, #84]	@ 0x54
 801f87c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801f880:	015b      	lsls	r3, r3, #5
 801f882:	65a3      	str	r3, [r4, #88]	@ 0x58
 801f884:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 801f888:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 801f88c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801f890:	b002      	add	sp, #8
 801f892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f896:	bf00      	nop
 801f898:	080247c8 	.word	0x080247c8

0801f89c <_ZN8touchgfx6Canvas5closeEv>:
 801f89c:	b538      	push	{r3, r4, r5, lr}
 801f89e:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 801f8a2:	4604      	mov	r4, r0
 801f8a4:	b193      	cbz	r3, 801f8cc <_ZN8touchgfx6Canvas5closeEv+0x30>
 801f8a6:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 801f8aa:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 801f8ae:	4213      	tst	r3, r2
 801f8b0:	d10c      	bne.n	801f8cc <_ZN8touchgfx6Canvas5closeEv+0x30>
 801f8b2:	f100 0514 	add.w	r5, r0, #20
 801f8b6:	b123      	cbz	r3, 801f8c2 <_ZN8touchgfx6Canvas5closeEv+0x26>
 801f8b8:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 801f8bc:	4628      	mov	r0, r5
 801f8be:	f7ff fea3 	bl	801f608 <_ZN8touchgfx10Rasterizer6lineToEii>
 801f8c2:	4628      	mov	r0, r5
 801f8c4:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 801f8c8:	f7ff fe9e 	bl	801f608 <_ZN8touchgfx10Rasterizer6lineToEii>
 801f8cc:	2300      	movs	r3, #0
 801f8ce:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 801f8d2:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 801f8d6:	4298      	cmp	r0, r3
 801f8d8:	bf34      	ite	cc
 801f8da:	2000      	movcc	r0, #0
 801f8dc:	2001      	movcs	r0, #1
 801f8de:	bd38      	pop	{r3, r4, r5, pc}

0801f8e0 <_ZN8touchgfx6Canvas6renderEh>:
 801f8e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801f8e4:	7a85      	ldrb	r5, [r0, #10]
 801f8e6:	4604      	mov	r4, r0
 801f8e8:	4369      	muls	r1, r5
 801f8ea:	1c4d      	adds	r5, r1, #1
 801f8ec:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801f8f0:	122d      	asrs	r5, r5, #8
 801f8f2:	f000 8098 	beq.w	801fa26 <_ZN8touchgfx6Canvas6renderEh+0x146>
 801f8f6:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 801f8fa:	2b00      	cmp	r3, #0
 801f8fc:	f000 8093 	beq.w	801fa26 <_ZN8touchgfx6Canvas6renderEh+0x146>
 801f900:	f7ff ffcc 	bl	801f89c <_ZN8touchgfx6Canvas5closeEv>
 801f904:	4607      	mov	r7, r0
 801f906:	2800      	cmp	r0, #0
 801f908:	d045      	beq.n	801f996 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 801f90a:	6860      	ldr	r0, [r4, #4]
 801f90c:	4e47      	ldr	r6, [pc, #284]	@ (801fa2c <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 801f90e:	6803      	ldr	r3, [r0, #0]
 801f910:	6837      	ldr	r7, [r6, #0]
 801f912:	689b      	ldr	r3, [r3, #8]
 801f914:	4798      	blx	r3
 801f916:	4601      	mov	r1, r0
 801f918:	4638      	mov	r0, r7
 801f91a:	f7ee fde1 	bl	800e4e0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 801f91e:	4607      	mov	r7, r0
 801f920:	f7e4 f9a6 	bl	8003c70 <_ZN8touchgfx3HAL3lcdEv>
 801f924:	6803      	ldr	r3, [r0, #0]
 801f926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f928:	4798      	blx	r3
 801f92a:	4680      	mov	r8, r0
 801f92c:	f7e4 f9a0 	bl	8003c70 <_ZN8touchgfx3HAL3lcdEv>
 801f930:	6803      	ldr	r3, [r0, #0]
 801f932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f934:	4798      	blx	r3
 801f936:	280b      	cmp	r0, #11
 801f938:	d85a      	bhi.n	801f9f0 <_ZN8touchgfx6Canvas6renderEh+0x110>
 801f93a:	e8df f000 	tbb	[pc, r0]
 801f93e:	5b50      	.short	0x5b50
 801f940:	3059066b 	.word	0x3059066b
 801f944:	64646440 	.word	0x64646440
 801f948:	6464      	.short	0x6464
 801f94a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801f94e:	2208      	movs	r2, #8
 801f950:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f954:	fb91 f2f2 	sdiv	r2, r1, r2
 801f958:	fb08 2303 	mla	r3, r8, r3, r2
 801f95c:	441f      	add	r7, r3
 801f95e:	424b      	negs	r3, r1
 801f960:	f001 0107 	and.w	r1, r1, #7
 801f964:	f003 0307 	and.w	r3, r3, #7
 801f968:	bf58      	it	pl
 801f96a:	4259      	negpl	r1, r3
 801f96c:	b2c9      	uxtb	r1, r1
 801f96e:	b2ed      	uxtb	r5, r5
 801f970:	463a      	mov	r2, r7
 801f972:	fa0f f388 	sxth.w	r3, r8
 801f976:	f104 0014 	add.w	r0, r4, #20
 801f97a:	e9cd 1500 	strd	r1, r5, [sp]
 801f97e:	6861      	ldr	r1, [r4, #4]
 801f980:	f7ff fe4e 	bl	801f620 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 801f984:	4607      	mov	r7, r0
 801f986:	6860      	ldr	r0, [r4, #4]
 801f988:	6803      	ldr	r3, [r0, #0]
 801f98a:	691b      	ldr	r3, [r3, #16]
 801f98c:	4798      	blx	r3
 801f98e:	6830      	ldr	r0, [r6, #0]
 801f990:	6803      	ldr	r3, [r0, #0]
 801f992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f994:	4798      	blx	r3
 801f996:	4638      	mov	r0, r7
 801f998:	b002      	add	sp, #8
 801f99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f99e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801f9a2:	2204      	movs	r2, #4
 801f9a4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f9a8:	fb91 f2f2 	sdiv	r2, r1, r2
 801f9ac:	fb08 2303 	mla	r3, r8, r3, r2
 801f9b0:	441f      	add	r7, r3
 801f9b2:	424b      	negs	r3, r1
 801f9b4:	f001 0103 	and.w	r1, r1, #3
 801f9b8:	f003 0303 	and.w	r3, r3, #3
 801f9bc:	e7d4      	b.n	801f968 <_ZN8touchgfx6Canvas6renderEh+0x88>
 801f9be:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801f9c2:	2202      	movs	r2, #2
 801f9c4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f9c8:	2900      	cmp	r1, #0
 801f9ca:	fb91 f2f2 	sdiv	r2, r1, r2
 801f9ce:	f001 0101 	and.w	r1, r1, #1
 801f9d2:	fb08 2303 	mla	r3, r8, r3, r2
 801f9d6:	bfb8      	it	lt
 801f9d8:	4249      	neglt	r1, r1
 801f9da:	441f      	add	r7, r3
 801f9dc:	e7c6      	b.n	801f96c <_ZN8touchgfx6Canvas6renderEh+0x8c>
 801f9de:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f9e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f9e6:	fb08 f303 	mul.w	r3, r8, r3
 801f9ea:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801f9ee:	441f      	add	r7, r3
 801f9f0:	2100      	movs	r1, #0
 801f9f2:	e7bc      	b.n	801f96e <_ZN8touchgfx6Canvas6renderEh+0x8e>
 801f9f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f9f8:	2103      	movs	r1, #3
 801f9fa:	fb08 f203 	mul.w	r2, r8, r3
 801f9fe:	89a3      	ldrh	r3, [r4, #12]
 801fa00:	fb13 2301 	smlabb	r3, r3, r1, r2
 801fa04:	e7f3      	b.n	801f9ee <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801fa06:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801fa0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fa0e:	fb08 2303 	mla	r3, r8, r3, r2
 801fa12:	e7ec      	b.n	801f9ee <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801fa14:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801fa18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fa1c:	fb08 f303 	mul.w	r3, r8, r3
 801fa20:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801fa24:	e7e3      	b.n	801f9ee <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801fa26:	2701      	movs	r7, #1
 801fa28:	e7b5      	b.n	801f996 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 801fa2a:	bf00      	nop
 801fa2c:	24025120 	.word	0x24025120

0801fa30 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 801fa30:	4b06      	ldr	r3, [pc, #24]	@ (801fa4c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 801fa32:	b510      	push	{r4, lr}
 801fa34:	781b      	ldrb	r3, [r3, #0]
 801fa36:	2b01      	cmp	r3, #1
 801fa38:	d107      	bne.n	801fa4a <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 801fa3a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801fa3e:	680b      	ldr	r3, [r1, #0]
 801fa40:	6814      	ldr	r4, [r2, #0]
 801fa42:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 801fa46:	6013      	str	r3, [r2, #0]
 801fa48:	600c      	str	r4, [r1, #0]
 801fa4a:	bd10      	pop	{r4, pc}
 801fa4c:	24025118 	.word	0x24025118

0801fa50 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 801fa50:	b513      	push	{r0, r1, r4, lr}
 801fa52:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 801fa56:	4604      	mov	r4, r0
 801fa58:	e9cd 2100 	strd	r2, r1, [sp]
 801fa5c:	b9a3      	cbnz	r3, 801fa88 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 801fa5e:	466a      	mov	r2, sp
 801fa60:	a901      	add	r1, sp, #4
 801fa62:	4620      	mov	r0, r4
 801fa64:	f7ff ffe4 	bl	801fa30 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801fa68:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801fa6a:	9901      	ldr	r1, [sp, #4]
 801fa6c:	9a00      	ldr	r2, [sp, #0]
 801fa6e:	1ac9      	subs	r1, r1, r3
 801fa70:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801fa72:	1ad2      	subs	r2, r2, r3
 801fa74:	9101      	str	r1, [sp, #4]
 801fa76:	2a00      	cmp	r2, #0
 801fa78:	9200      	str	r2, [sp, #0]
 801fa7a:	da0b      	bge.n	801fa94 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 801fa7c:	2301      	movs	r3, #1
 801fa7e:	2900      	cmp	r1, #0
 801fa80:	da0e      	bge.n	801faa0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 801fa82:	f043 0304 	orr.w	r3, r3, #4
 801fa86:	e013      	b.n	801fab0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 801fa88:	f7ff ff08 	bl	801f89c <_ZN8touchgfx6Canvas5closeEv>
 801fa8c:	2800      	cmp	r0, #0
 801fa8e:	d1e6      	bne.n	801fa5e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 801fa90:	b002      	add	sp, #8
 801fa92:	bd10      	pop	{r4, pc}
 801fa94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801fa96:	429a      	cmp	r2, r3
 801fa98:	bfac      	ite	ge
 801fa9a:	2302      	movge	r3, #2
 801fa9c:	2300      	movlt	r3, #0
 801fa9e:	e7ee      	b.n	801fa7e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 801faa0:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 801faa2:	4281      	cmp	r1, r0
 801faa4:	bfac      	ite	ge
 801faa6:	2008      	movge	r0, #8
 801faa8:	2000      	movlt	r0, #0
 801faaa:	4318      	orrs	r0, r3
 801faac:	b2c3      	uxtb	r3, r0
 801faae:	b158      	cbz	r0, 801fac8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 801fab0:	2200      	movs	r2, #0
 801fab2:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 801fab6:	9901      	ldr	r1, [sp, #4]
 801fab8:	9a00      	ldr	r2, [sp, #0]
 801faba:	66e1      	str	r1, [r4, #108]	@ 0x6c
 801fabc:	6722      	str	r2, [r4, #112]	@ 0x70
 801fabe:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 801fac2:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 801fac6:	e7e3      	b.n	801fa90 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 801fac8:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 801facc:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 801fad0:	4298      	cmp	r0, r3
 801fad2:	d803      	bhi.n	801fadc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 801fad4:	f104 0014 	add.w	r0, r4, #20
 801fad8:	f7f1 f8ee 	bl	8010cb8 <_ZN8touchgfx7Outline6moveToEii>
 801fadc:	2301      	movs	r3, #1
 801fade:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 801fae2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 801fae6:	2300      	movs	r3, #0
 801fae8:	e7e5      	b.n	801fab6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0801faea <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 801faea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801faec:	ab02      	add	r3, sp, #8
 801faee:	4604      	mov	r4, r0
 801faf0:	9101      	str	r1, [sp, #4]
 801faf2:	a901      	add	r1, sp, #4
 801faf4:	f843 2d08 	str.w	r2, [r3, #-8]!
 801faf8:	461a      	mov	r2, r3
 801fafa:	f7ff ff99 	bl	801fa30 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801fafe:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801fb00:	9901      	ldr	r1, [sp, #4]
 801fb02:	9a00      	ldr	r2, [sp, #0]
 801fb04:	1ac9      	subs	r1, r1, r3
 801fb06:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801fb08:	1ad2      	subs	r2, r2, r3
 801fb0a:	9101      	str	r1, [sp, #4]
 801fb0c:	2a00      	cmp	r2, #0
 801fb0e:	9200      	str	r2, [sp, #0]
 801fb10:	db1c      	blt.n	801fb4c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 801fb12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801fb14:	429a      	cmp	r2, r3
 801fb16:	bfac      	ite	ge
 801fb18:	2002      	movge	r0, #2
 801fb1a:	2000      	movlt	r0, #0
 801fb1c:	2900      	cmp	r1, #0
 801fb1e:	db17      	blt.n	801fb50 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 801fb20:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801fb22:	4299      	cmp	r1, r3
 801fb24:	bfac      	ite	ge
 801fb26:	2308      	movge	r3, #8
 801fb28:	2300      	movlt	r3, #0
 801fb2a:	4303      	orrs	r3, r0
 801fb2c:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 801fb30:	b2dd      	uxtb	r5, r3
 801fb32:	b978      	cbnz	r0, 801fb54 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 801fb34:	f104 0014 	add.w	r0, r4, #20
 801fb38:	f7ff fd66 	bl	801f608 <_ZN8touchgfx10Rasterizer6lineToEii>
 801fb3c:	9b01      	ldr	r3, [sp, #4]
 801fb3e:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 801fb42:	6623      	str	r3, [r4, #96]	@ 0x60
 801fb44:	9b00      	ldr	r3, [sp, #0]
 801fb46:	6663      	str	r3, [r4, #100]	@ 0x64
 801fb48:	b002      	add	sp, #8
 801fb4a:	bd70      	pop	{r4, r5, r6, pc}
 801fb4c:	2001      	movs	r0, #1
 801fb4e:	e7e5      	b.n	801fb1c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 801fb50:	2304      	movs	r3, #4
 801fb52:	e7ea      	b.n	801fb2a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 801fb54:	b113      	cbz	r3, 801fb5c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 801fb56:	ea10 0305 	ands.w	r3, r0, r5
 801fb5a:	d11c      	bne.n	801fb96 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 801fb5c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 801fb60:	f104 0614 	add.w	r6, r4, #20
 801fb64:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 801fb68:	b98b      	cbnz	r3, 801fb8e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 801fb6a:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 801fb6e:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 801fb72:	4298      	cmp	r0, r3
 801fb74:	d802      	bhi.n	801fb7c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 801fb76:	4630      	mov	r0, r6
 801fb78:	f7f1 f89e 	bl	8010cb8 <_ZN8touchgfx7Outline6moveToEii>
 801fb7c:	2301      	movs	r3, #1
 801fb7e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 801fb82:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 801fb86:	4630      	mov	r0, r6
 801fb88:	e9dd 2100 	ldrd	r2, r1, [sp]
 801fb8c:	e7d4      	b.n	801fb38 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 801fb8e:	4630      	mov	r0, r6
 801fb90:	f7ff fd3a 	bl	801f608 <_ZN8touchgfx10Rasterizer6lineToEii>
 801fb94:	e7f7      	b.n	801fb86 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 801fb96:	461d      	mov	r5, r3
 801fb98:	e7d0      	b.n	801fb3c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0801fb9c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 801fb9c:	b538      	push	{r3, r4, r5, lr}
 801fb9e:	ed2d 8b10 	vpush	{d8-d15}
 801fba2:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 801fba6:	4605      	mov	r5, r0
 801fba8:	eeb0 ca40 	vmov.f32	s24, s0
 801fbac:	460c      	mov	r4, r1
 801fbae:	eef0 ca60 	vmov.f32	s25, s1
 801fbb2:	ed9f ba57 	vldr	s22, [pc, #348]	@ 801fd10 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 801fbb6:	eeb0 da41 	vmov.f32	s26, s2
 801fbba:	eef0 da61 	vmov.f32	s27, s3
 801fbbe:	eeb0 ea42 	vmov.f32	s28, s4
 801fbc2:	eef0 ea62 	vmov.f32	s29, s5
 801fbc6:	eef0 aa6b 	vmov.f32	s21, s23
 801fbca:	2c08      	cmp	r4, #8
 801fbcc:	d86e      	bhi.n	801fcac <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 801fbce:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 801fbd2:	ee7d 7aee 	vsub.f32	s15, s27, s29
 801fbd6:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 801fbda:	ee3e 7aec 	vsub.f32	s14, s29, s25
 801fbde:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 801fbe2:	ee3c fa0d 	vadd.f32	s30, s24, s26
 801fbe6:	ee7c faad 	vadd.f32	s31, s25, s27
 801fbea:	eee6 7a07 	vfma.f32	s15, s12, s14
 801fbee:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 801fbf2:	ee3d aaae 	vadd.f32	s20, s27, s29
 801fbf6:	ee2f fa2b 	vmul.f32	s30, s30, s23
 801fbfa:	ee6f faab 	vmul.f32	s31, s31, s23
 801fbfe:	ee69 9aab 	vmul.f32	s19, s19, s23
 801fc02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fc06:	ee2a aa2b 	vmul.f32	s20, s20, s23
 801fc0a:	ee7f 8a29 	vadd.f32	s17, s30, s19
 801fc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc12:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 801fc16:	ee68 8aab 	vmul.f32	s17, s17, s23
 801fc1a:	bf48      	it	mi
 801fc1c:	eef1 7a67 	vnegmi.f32	s15, s15
 801fc20:	ee29 9a2b 	vmul.f32	s18, s18, s23
 801fc24:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 801fc28:	eef4 7acb 	vcmpe.f32	s15, s22
 801fc2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc30:	dd3f      	ble.n	801fcb2 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 801fc32:	ee27 7a07 	vmul.f32	s14, s14, s14
 801fc36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801fc3a:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801fc3e:	ee27 7a06 	vmul.f32	s14, s14, s12
 801fc42:	eef4 7ac7 	vcmpe.f32	s15, s14
 801fc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc4a:	d847      	bhi.n	801fcdc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 801fc4c:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 801fc50:	ee3e 0aed 	vsub.f32	s0, s29, s27
 801fc54:	f000 fa57 	bl	8020106 <atan2f>
 801fc58:	eeb0 8a40 	vmov.f32	s16, s0
 801fc5c:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 801fc60:	ee3d 0aec 	vsub.f32	s0, s27, s25
 801fc64:	f000 fa4f 	bl	8020106 <atan2f>
 801fc68:	ee38 0a40 	vsub.f32	s0, s16, s0
 801fc6c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 801fd14 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 801fc70:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801fc74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc78:	bf48      	it	mi
 801fc7a:	eeb1 0a40 	vnegmi.f32	s0, s0
 801fc7e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801fc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc86:	bfa4      	itt	ge
 801fc88:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 801fd18 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 801fc8c:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 801fc90:	eddf 7a22 	vldr	s15, [pc, #136]	@ 801fd1c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 801fc94:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801fc98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc9c:	d51e      	bpl.n	801fcdc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 801fc9e:	eef0 0a49 	vmov.f32	s1, s18
 801fca2:	4628      	mov	r0, r5
 801fca4:	eeb0 0a68 	vmov.f32	s0, s17
 801fca8:	f7ef fb20 	bl	800f2ec <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801fcac:	ecbd 8b10 	vpop	{d8-d15}
 801fcb0:	bd38      	pop	{r3, r4, r5, pc}
 801fcb2:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 801fcb6:	eeb0 7a68 	vmov.f32	s14, s17
 801fcba:	eef0 6a49 	vmov.f32	s13, s18
 801fcbe:	eea7 7aea 	vfms.f32	s14, s15, s21
 801fcc2:	ee7c 7aae 	vadd.f32	s15, s25, s29
 801fcc6:	eee7 6aea 	vfms.f32	s13, s15, s21
 801fcca:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801fcce:	eee7 7a07 	vfma.f32	s15, s14, s14
 801fcd2:	eef4 7ac6 	vcmpe.f32	s15, s12
 801fcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcda:	d9e0      	bls.n	801fc9e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 801fcdc:	3401      	adds	r4, #1
 801fcde:	eef0 0a6c 	vmov.f32	s1, s25
 801fce2:	eeb0 0a4c 	vmov.f32	s0, s24
 801fce6:	4628      	mov	r0, r5
 801fce8:	4621      	mov	r1, r4
 801fcea:	eef0 2a49 	vmov.f32	s5, s18
 801fcee:	eeb0 2a68 	vmov.f32	s4, s17
 801fcf2:	eef0 1a6f 	vmov.f32	s3, s31
 801fcf6:	eeb0 1a4f 	vmov.f32	s2, s30
 801fcfa:	f7ff ff4f 	bl	801fb9c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 801fcfe:	eef0 da4a 	vmov.f32	s27, s20
 801fd02:	eeb0 da69 	vmov.f32	s26, s19
 801fd06:	eef0 ca49 	vmov.f32	s25, s18
 801fd0a:	eeb0 ca68 	vmov.f32	s24, s17
 801fd0e:	e75c      	b.n	801fbca <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 801fd10:	2edbe6ff 	.word	0x2edbe6ff
 801fd14:	40490fdb 	.word	0x40490fdb
 801fd18:	40c90fdb 	.word	0x40c90fdb
 801fd1c:	3dcccccd 	.word	0x3dcccccd

0801fd20 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 801fd20:	b530      	push	{r4, r5, lr}
 801fd22:	ed2d 8b10 	vpush	{d8-d15}
 801fd26:	eef0 8a40 	vmov.f32	s17, s0
 801fd2a:	b085      	sub	sp, #20
 801fd2c:	eef0 9a60 	vmov.f32	s19, s1
 801fd30:	4604      	mov	r4, r0
 801fd32:	eef0 fa41 	vmov.f32	s31, s2
 801fd36:	460d      	mov	r5, r1
 801fd38:	eeb0 fa61 	vmov.f32	s30, s3
 801fd3c:	eef0 ba42 	vmov.f32	s23, s4
 801fd40:	eeb0 ca62 	vmov.f32	s24, s5
 801fd44:	eef0 aa43 	vmov.f32	s21, s6
 801fd48:	eeb0 ba63 	vmov.f32	s22, s7
 801fd4c:	2d08      	cmp	r5, #8
 801fd4e:	f200 8113 	bhi.w	801ff78 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 801fd52:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801fd56:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 801fd5a:	ee7f 6aab 	vadd.f32	s13, s31, s23
 801fd5e:	ee38 daaf 	vadd.f32	s26, s17, s31
 801fd62:	ee26 6a27 	vmul.f32	s12, s12, s15
 801fd66:	ee7c ca0b 	vadd.f32	s25, s24, s22
 801fd6a:	ee2d da27 	vmul.f32	s26, s26, s15
 801fd6e:	ed8d 6a01 	vstr	s12, [sp, #4]
 801fd72:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801fd76:	ee6c caa7 	vmul.f32	s25, s25, s15
 801fd7a:	eeb0 ea4d 	vmov.f32	s28, s26
 801fd7e:	ee79 da8f 	vadd.f32	s27, s19, s30
 801fd82:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 801fd86:	eea6 eaa7 	vfma.f32	s28, s13, s15
 801fd8a:	ee66 6a27 	vmul.f32	s13, s12, s15
 801fd8e:	ee6d daa7 	vmul.f32	s27, s27, s15
 801fd92:	edcd 6a03 	vstr	s13, [sp, #12]
 801fd96:	eef0 6a6c 	vmov.f32	s13, s25
 801fd9a:	eef0 ea6d 	vmov.f32	s29, s27
 801fd9e:	ee2e ea27 	vmul.f32	s28, s28, s15
 801fda2:	eee7 6a27 	vfma.f32	s13, s14, s15
 801fda6:	eee7 ea27 	vfma.f32	s29, s14, s15
 801fdaa:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801fdae:	ee6e eaa7 	vmul.f32	s29, s29, s15
 801fdb2:	eef0 6a67 	vmov.f32	s13, s15
 801fdb6:	ed8d 7a02 	vstr	s14, [sp, #8]
 801fdba:	ed9d 7a03 	vldr	s14, [sp, #12]
 801fdbe:	ee3e 9a07 	vadd.f32	s18, s28, s14
 801fdc2:	ed9d 7a02 	vldr	s14, [sp, #8]
 801fdc6:	ee3e aa87 	vadd.f32	s20, s29, s14
 801fdca:	ee29 9a27 	vmul.f32	s18, s18, s15
 801fdce:	ee2a aa27 	vmul.f32	s20, s20, s15
 801fdd2:	2d00      	cmp	r5, #0
 801fdd4:	f000 810b 	beq.w	801ffee <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801fdd8:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 801fddc:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8020034 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 801fde0:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 801fde4:	ee7b 7a69 	vsub.f32	s15, s22, s19
 801fde8:	ee3f 6aea 	vsub.f32	s12, s31, s21
 801fdec:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801fdf0:	ee3b 5aea 	vsub.f32	s10, s23, s21
 801fdf4:	eea6 7a27 	vfma.f32	s14, s12, s15
 801fdf8:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 801fdfc:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 801fe00:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801fe04:	eea5 6a27 	vfma.f32	s12, s10, s15
 801fe08:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 801fe0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe10:	bf48      	it	mi
 801fe12:	eeb1 7a47 	vnegmi.f32	s14, s14
 801fe16:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801fe1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe1e:	eeb4 7ae4 	vcmpe.f32	s14, s9
 801fe22:	bf48      	it	mi
 801fe24:	eeb1 6a46 	vnegmi.f32	s12, s12
 801fe28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe2c:	f340 80a8 	ble.w	801ff80 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 801fe30:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801fe34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe38:	dd5a      	ble.n	801fef0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 801fe3a:	ee65 5aa5 	vmul.f32	s11, s11, s11
 801fe3e:	ee37 7a06 	vadd.f32	s14, s14, s12
 801fe42:	eee7 5aa7 	vfma.f32	s11, s15, s15
 801fe46:	ee27 7a07 	vmul.f32	s14, s14, s14
 801fe4a:	ee65 7a85 	vmul.f32	s15, s11, s10
 801fe4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fe52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe56:	f200 80ca 	bhi.w	801ffee <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801fe5a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 801fe5e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 801fe62:	f000 f950 	bl	8020106 <atan2f>
 801fe66:	eeb0 8a40 	vmov.f32	s16, s0
 801fe6a:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 801fe6e:	ee3f 0a69 	vsub.f32	s0, s30, s19
 801fe72:	f000 f948 	bl	8020106 <atan2f>
 801fe76:	ee38 fa40 	vsub.f32	s30, s16, s0
 801fe7a:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 801fe7e:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 801fe82:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 801fe86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe8a:	bf48      	it	mi
 801fe8c:	eeb1 fa4f 	vnegmi.f32	s30, s30
 801fe90:	f000 f939 	bl	8020106 <atan2f>
 801fe94:	ee30 0a48 	vsub.f32	s0, s0, s16
 801fe98:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8020038 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 801fe9c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801fea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fea4:	eeb4 fae7 	vcmpe.f32	s30, s15
 801fea8:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8020038 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 801feac:	bf48      	it	mi
 801feae:	eeb1 0a40 	vnegmi.f32	s0, s0
 801feb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801feb6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801feba:	eddf 7a60 	vldr	s15, [pc, #384]	@ 802003c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 801febe:	bfa4      	itt	ge
 801fec0:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8020040 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 801fec4:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 801fec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fecc:	bfa4      	itt	ge
 801fece:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8020040 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 801fed2:	ee37 0a40 	vsubge.f32	s0, s14, s0
 801fed6:	ee3f 0a00 	vadd.f32	s0, s30, s0
 801feda:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801fede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fee2:	f140 8084 	bpl.w	801ffee <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801fee6:	eef0 0a4a 	vmov.f32	s1, s20
 801feea:	eeb0 0a49 	vmov.f32	s0, s18
 801feee:	e040      	b.n	801ff72 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 801fef0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801fef4:	ee27 7a07 	vmul.f32	s14, s14, s14
 801fef8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801fefc:	ee67 7a85 	vmul.f32	s15, s15, s10
 801ff00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ff04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff08:	d871      	bhi.n	801ffee <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801ff0a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 801ff0e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 801ff12:	f000 f8f8 	bl	8020106 <atan2f>
 801ff16:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 801ff1a:	eeb0 8a40 	vmov.f32	s16, s0
 801ff1e:	ee3f 0a69 	vsub.f32	s0, s30, s19
 801ff22:	f000 f8f0 	bl	8020106 <atan2f>
 801ff26:	ee38 0a40 	vsub.f32	s0, s16, s0
 801ff2a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8020038 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 801ff2e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ff32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff36:	bf48      	it	mi
 801ff38:	eeb1 0a40 	vnegmi.f32	s0, s0
 801ff3c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801ff40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff44:	bfa4      	itt	ge
 801ff46:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8020040 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 801ff4a:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 801ff4e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 802003c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 801ff52:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801ff56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff5a:	d548      	bpl.n	801ffee <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801ff5c:	eef0 0a4f 	vmov.f32	s1, s30
 801ff60:	4620      	mov	r0, r4
 801ff62:	eeb0 0a6f 	vmov.f32	s0, s31
 801ff66:	f7ef f9c1 	bl	800f2ec <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801ff6a:	eef0 0a4c 	vmov.f32	s1, s24
 801ff6e:	eeb0 0a6b 	vmov.f32	s0, s23
 801ff72:	4620      	mov	r0, r4
 801ff74:	f7ef f9ba 	bl	800f2ec <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801ff78:	b005      	add	sp, #20
 801ff7a:	ecbd 8b10 	vpop	{d8-d15}
 801ff7e:	bd30      	pop	{r4, r5, pc}
 801ff80:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8020034 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 801ff84:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801ff88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff8c:	dd19      	ble.n	801ffc2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 801ff8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ff92:	ee26 7a06 	vmul.f32	s14, s12, s12
 801ff96:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801ff9a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801ff9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ffa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffa6:	d822      	bhi.n	801ffee <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801ffa8:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 801ffac:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 801ffb0:	f000 f8a9 	bl	8020106 <atan2f>
 801ffb4:	ee7b 0aef 	vsub.f32	s1, s23, s31
 801ffb8:	eeb0 8a40 	vmov.f32	s16, s0
 801ffbc:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 801ffc0:	e7af      	b.n	801ff22 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 801ffc2:	ee78 7aaa 	vadd.f32	s15, s17, s21
 801ffc6:	eeb0 7a49 	vmov.f32	s14, s18
 801ffca:	eeb0 6a4a 	vmov.f32	s12, s20
 801ffce:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801ffd2:	ee79 7a8b 	vadd.f32	s15, s19, s22
 801ffd6:	eea7 6ae6 	vfms.f32	s12, s15, s13
 801ffda:	ee66 7a06 	vmul.f32	s15, s12, s12
 801ffde:	eee7 7a07 	vfma.f32	s15, s14, s14
 801ffe2:	eef4 7ac5 	vcmpe.f32	s15, s10
 801ffe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffea:	f67f af7c 	bls.w	801fee6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 801ffee:	3501      	adds	r5, #1
 801fff0:	eef0 0a69 	vmov.f32	s1, s19
 801fff4:	eeb0 0a68 	vmov.f32	s0, s17
 801fff8:	4620      	mov	r0, r4
 801fffa:	4629      	mov	r1, r5
 801fffc:	eef0 3a4a 	vmov.f32	s7, s20
 8020000:	eeb0 3a49 	vmov.f32	s6, s18
 8020004:	eef0 2a6e 	vmov.f32	s5, s29
 8020008:	eeb0 2a4e 	vmov.f32	s4, s28
 802000c:	eef0 1a6d 	vmov.f32	s3, s27
 8020010:	eeb0 1a4d 	vmov.f32	s2, s26
 8020014:	f7ff fe84 	bl	801fd20 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8020018:	eeb0 ca6c 	vmov.f32	s24, s25
 802001c:	eddd ba01 	vldr	s23, [sp, #4]
 8020020:	eef0 9a4a 	vmov.f32	s19, s20
 8020024:	ed9d fa02 	vldr	s30, [sp, #8]
 8020028:	eef0 8a49 	vmov.f32	s17, s18
 802002c:	eddd fa03 	vldr	s31, [sp, #12]
 8020030:	e68c      	b.n	801fd4c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8020032:	bf00      	nop
 8020034:	2edbe6ff 	.word	0x2edbe6ff
 8020038:	40490fdb 	.word	0x40490fdb
 802003c:	3dcccccd 	.word	0x3dcccccd
 8020040:	40c90fdb 	.word	0x40c90fdb

08020044 <_ZN8touchgfx6CanvasD1Ev>:
 8020044:	4b04      	ldr	r3, [pc, #16]	@ (8020058 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8020046:	b510      	push	{r4, lr}
 8020048:	4604      	mov	r4, r0
 802004a:	f840 3b14 	str.w	r3, [r0], #20
 802004e:	f7f0 f93b 	bl	80102c8 <_ZN8touchgfx7OutlineD1Ev>
 8020052:	4620      	mov	r0, r4
 8020054:	bd10      	pop	{r4, pc}
 8020056:	bf00      	nop
 8020058:	080247c8 	.word	0x080247c8

0802005c <_ZN8touchgfx6CanvasD0Ev>:
 802005c:	b510      	push	{r4, lr}
 802005e:	4604      	mov	r4, r0
 8020060:	f7ff fff0 	bl	8020044 <_ZN8touchgfx6CanvasD1Ev>
 8020064:	2174      	movs	r1, #116	@ 0x74
 8020066:	4620      	mov	r0, r4
 8020068:	f000 f826 	bl	80200b8 <_ZdlPvj>
 802006c:	4620      	mov	r0, r4
 802006e:	bd10      	pop	{r4, pc}

08020070 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8020070:	790b      	ldrb	r3, [r1, #4]
 8020072:	2b00      	cmp	r3, #0
 8020074:	bf0c      	ite	eq
 8020076:	2301      	moveq	r3, #1
 8020078:	2300      	movne	r3, #0
 802007a:	b570      	push	{r4, r5, r6, lr}
 802007c:	4604      	mov	r4, r0
 802007e:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8020082:	460e      	mov	r6, r1
 8020084:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8020088:	d109      	bne.n	802009e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 802008a:	b14d      	cbz	r5, 80200a0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 802008c:	7933      	ldrb	r3, [r6, #4]
 802008e:	2b01      	cmp	r3, #1
 8020090:	d10c      	bne.n	80200ac <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8020092:	6823      	ldr	r3, [r4, #0]
 8020094:	4620      	mov	r0, r4
 8020096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8020098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802009c:	4718      	bx	r3
 802009e:	b12d      	cbz	r5, 80200ac <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80200a0:	6823      	ldr	r3, [r4, #0]
 80200a2:	4620      	mov	r0, r4
 80200a4:	695b      	ldr	r3, [r3, #20]
 80200a6:	4798      	blx	r3
 80200a8:	2d00      	cmp	r5, #0
 80200aa:	d1ef      	bne.n	802008c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80200ac:	bd70      	pop	{r4, r5, r6, pc}

080200ae <__aeabi_atexit>:
 80200ae:	460b      	mov	r3, r1
 80200b0:	4601      	mov	r1, r0
 80200b2:	4618      	mov	r0, r3
 80200b4:	f000 bc5a 	b.w	802096c <__cxa_atexit>

080200b8 <_ZdlPvj>:
 80200b8:	f000 b812 	b.w	80200e0 <_ZdlPv>

080200bc <__cxa_guard_acquire>:
 80200bc:	6802      	ldr	r2, [r0, #0]
 80200be:	07d2      	lsls	r2, r2, #31
 80200c0:	4603      	mov	r3, r0
 80200c2:	d405      	bmi.n	80200d0 <__cxa_guard_acquire+0x14>
 80200c4:	7842      	ldrb	r2, [r0, #1]
 80200c6:	b102      	cbz	r2, 80200ca <__cxa_guard_acquire+0xe>
 80200c8:	deff      	udf	#255	@ 0xff
 80200ca:	2001      	movs	r0, #1
 80200cc:	7058      	strb	r0, [r3, #1]
 80200ce:	4770      	bx	lr
 80200d0:	2000      	movs	r0, #0
 80200d2:	4770      	bx	lr

080200d4 <__cxa_guard_release>:
 80200d4:	2301      	movs	r3, #1
 80200d6:	6003      	str	r3, [r0, #0]
 80200d8:	4770      	bx	lr

080200da <__cxa_pure_virtual>:
 80200da:	b508      	push	{r3, lr}
 80200dc:	f000 f80e 	bl	80200fc <_ZSt9terminatev>

080200e0 <_ZdlPv>:
 80200e0:	f000 bb8e 	b.w	8020800 <free>

080200e4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80200e4:	b508      	push	{r3, lr}
 80200e6:	4780      	blx	r0
 80200e8:	f000 fb57 	bl	802079a <abort>

080200ec <_ZSt13get_terminatev>:
 80200ec:	4b02      	ldr	r3, [pc, #8]	@ (80200f8 <_ZSt13get_terminatev+0xc>)
 80200ee:	6818      	ldr	r0, [r3, #0]
 80200f0:	f3bf 8f5b 	dmb	ish
 80200f4:	4770      	bx	lr
 80200f6:	bf00      	nop
 80200f8:	240000d8 	.word	0x240000d8

080200fc <_ZSt9terminatev>:
 80200fc:	b508      	push	{r3, lr}
 80200fe:	f7ff fff5 	bl	80200ec <_ZSt13get_terminatev>
 8020102:	f7ff ffef 	bl	80200e4 <_ZN10__cxxabiv111__terminateEPFvvE>

08020106 <atan2f>:
 8020106:	f000 b9cf 	b.w	80204a8 <__ieee754_atan2f>
	...

0802010c <sqrtf>:
 802010c:	b508      	push	{r3, lr}
 802010e:	ed2d 8b02 	vpush	{d8}
 8020112:	eeb0 8a40 	vmov.f32	s16, s0
 8020116:	f000 f9c4 	bl	80204a2 <__ieee754_sqrtf>
 802011a:	eeb4 8a48 	vcmp.f32	s16, s16
 802011e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020122:	d60c      	bvs.n	802013e <sqrtf+0x32>
 8020124:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8020144 <sqrtf+0x38>
 8020128:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802012c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020130:	d505      	bpl.n	802013e <sqrtf+0x32>
 8020132:	f000 fe89 	bl	8020e48 <__errno>
 8020136:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802013a:	2321      	movs	r3, #33	@ 0x21
 802013c:	6003      	str	r3, [r0, #0]
 802013e:	ecbd 8b02 	vpop	{d8}
 8020142:	bd08      	pop	{r3, pc}
 8020144:	00000000 	.word	0x00000000

08020148 <sinf_poly>:
 8020148:	07cb      	lsls	r3, r1, #31
 802014a:	d412      	bmi.n	8020172 <sinf_poly+0x2a>
 802014c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8020150:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8020154:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8020158:	eea6 7b01 	vfma.f64	d7, d6, d1
 802015c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8020160:	ee21 1b05 	vmul.f64	d1, d1, d5
 8020164:	eea6 0b05 	vfma.f64	d0, d6, d5
 8020168:	eea7 0b01 	vfma.f64	d0, d7, d1
 802016c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8020170:	4770      	bx	lr
 8020172:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8020176:	ee21 5b01 	vmul.f64	d5, d1, d1
 802017a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802017e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8020182:	eea1 7b06 	vfma.f64	d7, d1, d6
 8020186:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802018a:	eea1 0b06 	vfma.f64	d0, d1, d6
 802018e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8020192:	ee21 1b05 	vmul.f64	d1, d1, d5
 8020196:	eea5 0b06 	vfma.f64	d0, d5, d6
 802019a:	e7e5      	b.n	8020168 <sinf_poly+0x20>
 802019c:	0000      	movs	r0, r0
	...

080201a0 <sinf>:
 80201a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80201a2:	ee10 4a10 	vmov	r4, s0
 80201a6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80201aa:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80201ae:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80201b2:	eef0 7a40 	vmov.f32	s15, s0
 80201b6:	d218      	bcs.n	80201ea <sinf+0x4a>
 80201b8:	ee26 1b06 	vmul.f64	d1, d6, d6
 80201bc:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80201c0:	d20a      	bcs.n	80201d8 <sinf+0x38>
 80201c2:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80201c6:	d103      	bne.n	80201d0 <sinf+0x30>
 80201c8:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 80201cc:	ed8d 1a01 	vstr	s2, [sp, #4]
 80201d0:	eeb0 0a67 	vmov.f32	s0, s15
 80201d4:	b003      	add	sp, #12
 80201d6:	bd30      	pop	{r4, r5, pc}
 80201d8:	483b      	ldr	r0, [pc, #236]	@ (80202c8 <sinf+0x128>)
 80201da:	eeb0 0b46 	vmov.f64	d0, d6
 80201de:	2100      	movs	r1, #0
 80201e0:	b003      	add	sp, #12
 80201e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80201e6:	f7ff bfaf 	b.w	8020148 <sinf_poly>
 80201ea:	f240 422e 	movw	r2, #1070	@ 0x42e
 80201ee:	4293      	cmp	r3, r2
 80201f0:	d824      	bhi.n	802023c <sinf+0x9c>
 80201f2:	4b35      	ldr	r3, [pc, #212]	@ (80202c8 <sinf+0x128>)
 80201f4:	ed93 7b08 	vldr	d7, [r3, #32]
 80201f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80201fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8020200:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8020204:	ee17 1a90 	vmov	r1, s15
 8020208:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 802020c:	1609      	asrs	r1, r1, #24
 802020e:	ee07 1a90 	vmov	s15, r1
 8020212:	f001 0203 	and.w	r2, r1, #3
 8020216:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802021a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802021e:	ed92 0b00 	vldr	d0, [r2]
 8020222:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8020226:	f011 0f02 	tst.w	r1, #2
 802022a:	eea5 6b47 	vfms.f64	d6, d5, d7
 802022e:	bf08      	it	eq
 8020230:	4618      	moveq	r0, r3
 8020232:	ee26 1b06 	vmul.f64	d1, d6, d6
 8020236:	ee20 0b06 	vmul.f64	d0, d0, d6
 802023a:	e7d1      	b.n	80201e0 <sinf+0x40>
 802023c:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8020240:	d237      	bcs.n	80202b2 <sinf+0x112>
 8020242:	4922      	ldr	r1, [pc, #136]	@ (80202cc <sinf+0x12c>)
 8020244:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8020248:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 802024c:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8020250:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8020254:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8020258:	6a10      	ldr	r0, [r2, #32]
 802025a:	6912      	ldr	r2, [r2, #16]
 802025c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8020260:	40ab      	lsls	r3, r5
 8020262:	fba0 5003 	umull	r5, r0, r0, r3
 8020266:	4359      	muls	r1, r3
 8020268:	fbe3 0102 	umlal	r0, r1, r3, r2
 802026c:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8020270:	0f9d      	lsrs	r5, r3, #30
 8020272:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8020276:	1ac9      	subs	r1, r1, r3
 8020278:	f7e0 fa10 	bl	800069c <__aeabi_l2d>
 802027c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8020280:	4b11      	ldr	r3, [pc, #68]	@ (80202c8 <sinf+0x128>)
 8020282:	f004 0203 	and.w	r2, r4, #3
 8020286:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802028a:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80202c0 <sinf+0x120>
 802028e:	ed92 0b00 	vldr	d0, [r2]
 8020292:	ec41 0b17 	vmov	d7, r0, r1
 8020296:	f014 0f02 	tst.w	r4, #2
 802029a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802029e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80202a2:	4629      	mov	r1, r5
 80202a4:	bf08      	it	eq
 80202a6:	4618      	moveq	r0, r3
 80202a8:	ee27 1b07 	vmul.f64	d1, d7, d7
 80202ac:	ee20 0b07 	vmul.f64	d0, d0, d7
 80202b0:	e796      	b.n	80201e0 <sinf+0x40>
 80202b2:	b003      	add	sp, #12
 80202b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80202b8:	f000 b8e4 	b.w	8020484 <__math_invalidf>
 80202bc:	f3af 8000 	nop.w
 80202c0:	54442d18 	.word	0x54442d18
 80202c4:	3c1921fb 	.word	0x3c1921fb
 80202c8:	08024838 	.word	0x08024838
 80202cc:	080247d4 	.word	0x080247d4

080202d0 <sinf_poly>:
 80202d0:	07cb      	lsls	r3, r1, #31
 80202d2:	d412      	bmi.n	80202fa <sinf_poly+0x2a>
 80202d4:	ee21 5b00 	vmul.f64	d5, d1, d0
 80202d8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80202dc:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80202e0:	eea6 7b01 	vfma.f64	d7, d6, d1
 80202e4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80202e8:	ee21 1b05 	vmul.f64	d1, d1, d5
 80202ec:	eea6 0b05 	vfma.f64	d0, d6, d5
 80202f0:	eea7 0b01 	vfma.f64	d0, d7, d1
 80202f4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80202f8:	4770      	bx	lr
 80202fa:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80202fe:	ee21 5b01 	vmul.f64	d5, d1, d1
 8020302:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8020306:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 802030a:	eea1 7b06 	vfma.f64	d7, d1, d6
 802030e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8020312:	eea1 0b06 	vfma.f64	d0, d1, d6
 8020316:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 802031a:	ee21 1b05 	vmul.f64	d1, d1, d5
 802031e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8020322:	e7e5      	b.n	80202f0 <sinf_poly+0x20>
 8020324:	0000      	movs	r0, r0
	...

08020328 <cosf>:
 8020328:	b538      	push	{r3, r4, r5, lr}
 802032a:	ee10 4a10 	vmov	r4, s0
 802032e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8020332:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8020336:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 802033a:	d21f      	bcs.n	802037c <cosf+0x54>
 802033c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8020340:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8020344:	f0c0 8082 	bcc.w	802044c <cosf+0x124>
 8020348:	ee27 4b07 	vmul.f64	d4, d7, d7
 802034c:	4b44      	ldr	r3, [pc, #272]	@ (8020460 <cosf+0x138>)
 802034e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8020352:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8020356:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 802035a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802035e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8020362:	eea7 0b05 	vfma.f64	d0, d7, d5
 8020366:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 802036a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802036e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8020372:	eea6 0b07 	vfma.f64	d0, d6, d7
 8020376:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802037a:	bd38      	pop	{r3, r4, r5, pc}
 802037c:	f240 422e 	movw	r2, #1070	@ 0x42e
 8020380:	4293      	cmp	r3, r2
 8020382:	d829      	bhi.n	80203d8 <cosf+0xb0>
 8020384:	4b36      	ldr	r3, [pc, #216]	@ (8020460 <cosf+0x138>)
 8020386:	ed93 6b08 	vldr	d6, [r3, #32]
 802038a:	ee27 6b06 	vmul.f64	d6, d7, d6
 802038e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8020392:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8020396:	ee16 1a90 	vmov	r1, s13
 802039a:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 802039e:	1609      	asrs	r1, r1, #24
 80203a0:	ee06 1a90 	vmov	s13, r1
 80203a4:	f001 0203 	and.w	r2, r1, #3
 80203a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80203ac:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80203b0:	ed92 0b00 	vldr	d0, [r2]
 80203b4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80203b8:	f011 0f02 	tst.w	r1, #2
 80203bc:	f081 0101 	eor.w	r1, r1, #1
 80203c0:	eea5 7b46 	vfms.f64	d7, d5, d6
 80203c4:	bf08      	it	eq
 80203c6:	4618      	moveq	r0, r3
 80203c8:	ee27 1b07 	vmul.f64	d1, d7, d7
 80203cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80203d0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80203d4:	f7ff bf7c 	b.w	80202d0 <sinf_poly>
 80203d8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80203dc:	d232      	bcs.n	8020444 <cosf+0x11c>
 80203de:	4921      	ldr	r1, [pc, #132]	@ (8020464 <cosf+0x13c>)
 80203e0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80203e4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80203e8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80203ec:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80203f0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80203f4:	6a10      	ldr	r0, [r2, #32]
 80203f6:	6912      	ldr	r2, [r2, #16]
 80203f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80203fc:	40ab      	lsls	r3, r5
 80203fe:	fba0 5003 	umull	r5, r0, r0, r3
 8020402:	4359      	muls	r1, r3
 8020404:	fbe3 0102 	umlal	r0, r1, r3, r2
 8020408:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802040c:	0f9d      	lsrs	r5, r3, #30
 802040e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8020412:	1ac9      	subs	r1, r1, r3
 8020414:	f7e0 f942 	bl	800069c <__aeabi_l2d>
 8020418:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802041c:	4b10      	ldr	r3, [pc, #64]	@ (8020460 <cosf+0x138>)
 802041e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8020458 <cosf+0x130>
 8020422:	ec41 0b17 	vmov	d7, r0, r1
 8020426:	f004 0203 	and.w	r2, r4, #3
 802042a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802042e:	ed92 0b00 	vldr	d0, [r2]
 8020432:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020436:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802043a:	f014 0f02 	tst.w	r4, #2
 802043e:	f085 0101 	eor.w	r1, r5, #1
 8020442:	e7bf      	b.n	80203c4 <cosf+0x9c>
 8020444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020448:	f000 b81c 	b.w	8020484 <__math_invalidf>
 802044c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8020450:	e793      	b.n	802037a <cosf+0x52>
 8020452:	bf00      	nop
 8020454:	f3af 8000 	nop.w
 8020458:	54442d18 	.word	0x54442d18
 802045c:	3c1921fb 	.word	0x3c1921fb
 8020460:	08024838 	.word	0x08024838
 8020464:	080247d4 	.word	0x080247d4

08020468 <with_errnof>:
 8020468:	b510      	push	{r4, lr}
 802046a:	ed2d 8b02 	vpush	{d8}
 802046e:	eeb0 8a40 	vmov.f32	s16, s0
 8020472:	4604      	mov	r4, r0
 8020474:	f000 fce8 	bl	8020e48 <__errno>
 8020478:	eeb0 0a48 	vmov.f32	s0, s16
 802047c:	ecbd 8b02 	vpop	{d8}
 8020480:	6004      	str	r4, [r0, #0]
 8020482:	bd10      	pop	{r4, pc}

08020484 <__math_invalidf>:
 8020484:	eef0 7a40 	vmov.f32	s15, s0
 8020488:	ee30 7a40 	vsub.f32	s14, s0, s0
 802048c:	eef4 7a67 	vcmp.f32	s15, s15
 8020490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020494:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8020498:	d602      	bvs.n	80204a0 <__math_invalidf+0x1c>
 802049a:	2021      	movs	r0, #33	@ 0x21
 802049c:	f7ff bfe4 	b.w	8020468 <with_errnof>
 80204a0:	4770      	bx	lr

080204a2 <__ieee754_sqrtf>:
 80204a2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80204a6:	4770      	bx	lr

080204a8 <__ieee754_atan2f>:
 80204a8:	ee10 2a90 	vmov	r2, s1
 80204ac:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80204b0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80204b4:	b510      	push	{r4, lr}
 80204b6:	eef0 7a40 	vmov.f32	s15, s0
 80204ba:	d806      	bhi.n	80204ca <__ieee754_atan2f+0x22>
 80204bc:	ee10 0a10 	vmov	r0, s0
 80204c0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80204c4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80204c8:	d904      	bls.n	80204d4 <__ieee754_atan2f+0x2c>
 80204ca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80204ce:	eeb0 0a67 	vmov.f32	s0, s15
 80204d2:	bd10      	pop	{r4, pc}
 80204d4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80204d8:	d103      	bne.n	80204e2 <__ieee754_atan2f+0x3a>
 80204da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80204de:	f000 b881 	b.w	80205e4 <atanf>
 80204e2:	1794      	asrs	r4, r2, #30
 80204e4:	f004 0402 	and.w	r4, r4, #2
 80204e8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80204ec:	b93b      	cbnz	r3, 80204fe <__ieee754_atan2f+0x56>
 80204ee:	2c02      	cmp	r4, #2
 80204f0:	d05c      	beq.n	80205ac <__ieee754_atan2f+0x104>
 80204f2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80205c0 <__ieee754_atan2f+0x118>
 80204f6:	2c03      	cmp	r4, #3
 80204f8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80204fc:	e7e7      	b.n	80204ce <__ieee754_atan2f+0x26>
 80204fe:	b939      	cbnz	r1, 8020510 <__ieee754_atan2f+0x68>
 8020500:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80205c4 <__ieee754_atan2f+0x11c>
 8020504:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80205c8 <__ieee754_atan2f+0x120>
 8020508:	2800      	cmp	r0, #0
 802050a:	fe67 7a27 	vselge.f32	s15, s14, s15
 802050e:	e7de      	b.n	80204ce <__ieee754_atan2f+0x26>
 8020510:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8020514:	d110      	bne.n	8020538 <__ieee754_atan2f+0x90>
 8020516:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802051a:	f104 34ff 	add.w	r4, r4, #4294967295
 802051e:	d107      	bne.n	8020530 <__ieee754_atan2f+0x88>
 8020520:	2c02      	cmp	r4, #2
 8020522:	d846      	bhi.n	80205b2 <__ieee754_atan2f+0x10a>
 8020524:	4b29      	ldr	r3, [pc, #164]	@ (80205cc <__ieee754_atan2f+0x124>)
 8020526:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802052a:	edd3 7a00 	vldr	s15, [r3]
 802052e:	e7ce      	b.n	80204ce <__ieee754_atan2f+0x26>
 8020530:	2c02      	cmp	r4, #2
 8020532:	d841      	bhi.n	80205b8 <__ieee754_atan2f+0x110>
 8020534:	4b26      	ldr	r3, [pc, #152]	@ (80205d0 <__ieee754_atan2f+0x128>)
 8020536:	e7f6      	b.n	8020526 <__ieee754_atan2f+0x7e>
 8020538:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802053c:	d0e0      	beq.n	8020500 <__ieee754_atan2f+0x58>
 802053e:	1a5b      	subs	r3, r3, r1
 8020540:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8020544:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8020548:	da1a      	bge.n	8020580 <__ieee754_atan2f+0xd8>
 802054a:	2a00      	cmp	r2, #0
 802054c:	da01      	bge.n	8020552 <__ieee754_atan2f+0xaa>
 802054e:	313c      	adds	r1, #60	@ 0x3c
 8020550:	db19      	blt.n	8020586 <__ieee754_atan2f+0xde>
 8020552:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8020556:	f000 f919 	bl	802078c <fabsf>
 802055a:	f000 f843 	bl	80205e4 <atanf>
 802055e:	eef0 7a40 	vmov.f32	s15, s0
 8020562:	2c01      	cmp	r4, #1
 8020564:	d012      	beq.n	802058c <__ieee754_atan2f+0xe4>
 8020566:	2c02      	cmp	r4, #2
 8020568:	d017      	beq.n	802059a <__ieee754_atan2f+0xf2>
 802056a:	2c00      	cmp	r4, #0
 802056c:	d0af      	beq.n	80204ce <__ieee754_atan2f+0x26>
 802056e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80205d4 <__ieee754_atan2f+0x12c>
 8020572:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020576:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80205d8 <__ieee754_atan2f+0x130>
 802057a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802057e:	e7a6      	b.n	80204ce <__ieee754_atan2f+0x26>
 8020580:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80205c8 <__ieee754_atan2f+0x120>
 8020584:	e7ed      	b.n	8020562 <__ieee754_atan2f+0xba>
 8020586:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80205dc <__ieee754_atan2f+0x134>
 802058a:	e7ea      	b.n	8020562 <__ieee754_atan2f+0xba>
 802058c:	ee17 3a90 	vmov	r3, s15
 8020590:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8020594:	ee07 3a90 	vmov	s15, r3
 8020598:	e799      	b.n	80204ce <__ieee754_atan2f+0x26>
 802059a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80205d4 <__ieee754_atan2f+0x12c>
 802059e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80205a2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80205d8 <__ieee754_atan2f+0x130>
 80205a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80205aa:	e790      	b.n	80204ce <__ieee754_atan2f+0x26>
 80205ac:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80205d8 <__ieee754_atan2f+0x130>
 80205b0:	e78d      	b.n	80204ce <__ieee754_atan2f+0x26>
 80205b2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80205e0 <__ieee754_atan2f+0x138>
 80205b6:	e78a      	b.n	80204ce <__ieee754_atan2f+0x26>
 80205b8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80205dc <__ieee754_atan2f+0x134>
 80205bc:	e787      	b.n	80204ce <__ieee754_atan2f+0x26>
 80205be:	bf00      	nop
 80205c0:	c0490fdb 	.word	0xc0490fdb
 80205c4:	bfc90fdb 	.word	0xbfc90fdb
 80205c8:	3fc90fdb 	.word	0x3fc90fdb
 80205cc:	08024924 	.word	0x08024924
 80205d0:	08024918 	.word	0x08024918
 80205d4:	33bbbd2e 	.word	0x33bbbd2e
 80205d8:	40490fdb 	.word	0x40490fdb
 80205dc:	00000000 	.word	0x00000000
 80205e0:	3f490fdb 	.word	0x3f490fdb

080205e4 <atanf>:
 80205e4:	b538      	push	{r3, r4, r5, lr}
 80205e6:	ee10 5a10 	vmov	r5, s0
 80205ea:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80205ee:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80205f2:	eef0 7a40 	vmov.f32	s15, s0
 80205f6:	d30f      	bcc.n	8020618 <atanf+0x34>
 80205f8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80205fc:	d904      	bls.n	8020608 <atanf+0x24>
 80205fe:	ee70 7a00 	vadd.f32	s15, s0, s0
 8020602:	eeb0 0a67 	vmov.f32	s0, s15
 8020606:	bd38      	pop	{r3, r4, r5, pc}
 8020608:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8020740 <atanf+0x15c>
 802060c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8020744 <atanf+0x160>
 8020610:	2d00      	cmp	r5, #0
 8020612:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8020616:	e7f4      	b.n	8020602 <atanf+0x1e>
 8020618:	4b4b      	ldr	r3, [pc, #300]	@ (8020748 <atanf+0x164>)
 802061a:	429c      	cmp	r4, r3
 802061c:	d810      	bhi.n	8020640 <atanf+0x5c>
 802061e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8020622:	d20a      	bcs.n	802063a <atanf+0x56>
 8020624:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802074c <atanf+0x168>
 8020628:	ee30 7a07 	vadd.f32	s14, s0, s14
 802062c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020630:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8020634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020638:	dce3      	bgt.n	8020602 <atanf+0x1e>
 802063a:	f04f 33ff 	mov.w	r3, #4294967295
 802063e:	e013      	b.n	8020668 <atanf+0x84>
 8020640:	f000 f8a4 	bl	802078c <fabsf>
 8020644:	4b42      	ldr	r3, [pc, #264]	@ (8020750 <atanf+0x16c>)
 8020646:	429c      	cmp	r4, r3
 8020648:	d84f      	bhi.n	80206ea <atanf+0x106>
 802064a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802064e:	429c      	cmp	r4, r3
 8020650:	d841      	bhi.n	80206d6 <atanf+0xf2>
 8020652:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8020656:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802065a:	eea0 7a27 	vfma.f32	s14, s0, s15
 802065e:	2300      	movs	r3, #0
 8020660:	ee30 0a27 	vadd.f32	s0, s0, s15
 8020664:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020668:	1c5a      	adds	r2, r3, #1
 802066a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802066e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8020754 <atanf+0x170>
 8020672:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8020758 <atanf+0x174>
 8020676:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 802075c <atanf+0x178>
 802067a:	ee66 6a06 	vmul.f32	s13, s12, s12
 802067e:	eee6 5a87 	vfma.f32	s11, s13, s14
 8020682:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8020760 <atanf+0x17c>
 8020686:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802068a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8020764 <atanf+0x180>
 802068e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8020692:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8020768 <atanf+0x184>
 8020696:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802069a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802076c <atanf+0x188>
 802069e:	eee7 5a26 	vfma.f32	s11, s14, s13
 80206a2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8020770 <atanf+0x18c>
 80206a6:	eea6 5a87 	vfma.f32	s10, s13, s14
 80206aa:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8020774 <atanf+0x190>
 80206ae:	eea5 7a26 	vfma.f32	s14, s10, s13
 80206b2:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8020778 <atanf+0x194>
 80206b6:	eea7 5a26 	vfma.f32	s10, s14, s13
 80206ba:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802077c <atanf+0x198>
 80206be:	eea5 7a26 	vfma.f32	s14, s10, s13
 80206c2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80206c6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80206ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80206ce:	d121      	bne.n	8020714 <atanf+0x130>
 80206d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80206d4:	e795      	b.n	8020602 <atanf+0x1e>
 80206d6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80206da:	ee30 7a67 	vsub.f32	s14, s0, s15
 80206de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80206e2:	2301      	movs	r3, #1
 80206e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80206e8:	e7be      	b.n	8020668 <atanf+0x84>
 80206ea:	4b25      	ldr	r3, [pc, #148]	@ (8020780 <atanf+0x19c>)
 80206ec:	429c      	cmp	r4, r3
 80206ee:	d80b      	bhi.n	8020708 <atanf+0x124>
 80206f0:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80206f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80206f8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80206fc:	2302      	movs	r3, #2
 80206fe:	ee70 6a67 	vsub.f32	s13, s0, s15
 8020702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020706:	e7af      	b.n	8020668 <atanf+0x84>
 8020708:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802070c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020710:	2303      	movs	r3, #3
 8020712:	e7a9      	b.n	8020668 <atanf+0x84>
 8020714:	4a1b      	ldr	r2, [pc, #108]	@ (8020784 <atanf+0x1a0>)
 8020716:	491c      	ldr	r1, [pc, #112]	@ (8020788 <atanf+0x1a4>)
 8020718:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802071c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020720:	edd3 6a00 	vldr	s13, [r3]
 8020724:	ee37 7a66 	vsub.f32	s14, s14, s13
 8020728:	2d00      	cmp	r5, #0
 802072a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802072e:	edd2 7a00 	vldr	s15, [r2]
 8020732:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020736:	bfb8      	it	lt
 8020738:	eef1 7a67 	vneglt.f32	s15, s15
 802073c:	e761      	b.n	8020602 <atanf+0x1e>
 802073e:	bf00      	nop
 8020740:	bfc90fdb 	.word	0xbfc90fdb
 8020744:	3fc90fdb 	.word	0x3fc90fdb
 8020748:	3edfffff 	.word	0x3edfffff
 802074c:	7149f2ca 	.word	0x7149f2ca
 8020750:	3f97ffff 	.word	0x3f97ffff
 8020754:	3c8569d7 	.word	0x3c8569d7
 8020758:	3d4bda59 	.word	0x3d4bda59
 802075c:	bd6ef16b 	.word	0xbd6ef16b
 8020760:	3d886b35 	.word	0x3d886b35
 8020764:	3dba2e6e 	.word	0x3dba2e6e
 8020768:	3e124925 	.word	0x3e124925
 802076c:	3eaaaaab 	.word	0x3eaaaaab
 8020770:	bd15a221 	.word	0xbd15a221
 8020774:	bd9d8795 	.word	0xbd9d8795
 8020778:	bde38e38 	.word	0xbde38e38
 802077c:	be4ccccd 	.word	0xbe4ccccd
 8020780:	401bffff 	.word	0x401bffff
 8020784:	08024940 	.word	0x08024940
 8020788:	08024930 	.word	0x08024930

0802078c <fabsf>:
 802078c:	ee10 3a10 	vmov	r3, s0
 8020790:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8020794:	ee00 3a10 	vmov	s0, r3
 8020798:	4770      	bx	lr

0802079a <abort>:
 802079a:	b508      	push	{r3, lr}
 802079c:	2006      	movs	r0, #6
 802079e:	f000 fae1 	bl	8020d64 <raise>
 80207a2:	2001      	movs	r0, #1
 80207a4:	f7e0 ffaa 	bl	80016fc <_exit>

080207a8 <__assert_func>:
 80207a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80207aa:	4614      	mov	r4, r2
 80207ac:	461a      	mov	r2, r3
 80207ae:	4b09      	ldr	r3, [pc, #36]	@ (80207d4 <__assert_func+0x2c>)
 80207b0:	681b      	ldr	r3, [r3, #0]
 80207b2:	4605      	mov	r5, r0
 80207b4:	68d8      	ldr	r0, [r3, #12]
 80207b6:	b14c      	cbz	r4, 80207cc <__assert_func+0x24>
 80207b8:	4b07      	ldr	r3, [pc, #28]	@ (80207d8 <__assert_func+0x30>)
 80207ba:	9100      	str	r1, [sp, #0]
 80207bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80207c0:	4906      	ldr	r1, [pc, #24]	@ (80207dc <__assert_func+0x34>)
 80207c2:	462b      	mov	r3, r5
 80207c4:	f000 f984 	bl	8020ad0 <fiprintf>
 80207c8:	f7ff ffe7 	bl	802079a <abort>
 80207cc:	4b04      	ldr	r3, [pc, #16]	@ (80207e0 <__assert_func+0x38>)
 80207ce:	461c      	mov	r4, r3
 80207d0:	e7f3      	b.n	80207ba <__assert_func+0x12>
 80207d2:	bf00      	nop
 80207d4:	240000e8 	.word	0x240000e8
 80207d8:	080235f4 	.word	0x080235f4
 80207dc:	08023601 	.word	0x08023601
 80207e0:	0802362f 	.word	0x0802362f

080207e4 <atexit>:
 80207e4:	2300      	movs	r3, #0
 80207e6:	4601      	mov	r1, r0
 80207e8:	461a      	mov	r2, r3
 80207ea:	4618      	mov	r0, r3
 80207ec:	f000 bb68 	b.w	8020ec0 <__register_exitproc>

080207f0 <malloc>:
 80207f0:	4b02      	ldr	r3, [pc, #8]	@ (80207fc <malloc+0xc>)
 80207f2:	4601      	mov	r1, r0
 80207f4:	6818      	ldr	r0, [r3, #0]
 80207f6:	f000 b82d 	b.w	8020854 <_malloc_r>
 80207fa:	bf00      	nop
 80207fc:	240000e8 	.word	0x240000e8

08020800 <free>:
 8020800:	4b02      	ldr	r3, [pc, #8]	@ (802080c <free+0xc>)
 8020802:	4601      	mov	r1, r0
 8020804:	6818      	ldr	r0, [r3, #0]
 8020806:	f000 bbb7 	b.w	8020f78 <_free_r>
 802080a:	bf00      	nop
 802080c:	240000e8 	.word	0x240000e8

08020810 <sbrk_aligned>:
 8020810:	b570      	push	{r4, r5, r6, lr}
 8020812:	4e0f      	ldr	r6, [pc, #60]	@ (8020850 <sbrk_aligned+0x40>)
 8020814:	460c      	mov	r4, r1
 8020816:	6831      	ldr	r1, [r6, #0]
 8020818:	4605      	mov	r5, r0
 802081a:	b911      	cbnz	r1, 8020822 <sbrk_aligned+0x12>
 802081c:	f000 faf2 	bl	8020e04 <_sbrk_r>
 8020820:	6030      	str	r0, [r6, #0]
 8020822:	4621      	mov	r1, r4
 8020824:	4628      	mov	r0, r5
 8020826:	f000 faed 	bl	8020e04 <_sbrk_r>
 802082a:	1c43      	adds	r3, r0, #1
 802082c:	d103      	bne.n	8020836 <sbrk_aligned+0x26>
 802082e:	f04f 34ff 	mov.w	r4, #4294967295
 8020832:	4620      	mov	r0, r4
 8020834:	bd70      	pop	{r4, r5, r6, pc}
 8020836:	1cc4      	adds	r4, r0, #3
 8020838:	f024 0403 	bic.w	r4, r4, #3
 802083c:	42a0      	cmp	r0, r4
 802083e:	d0f8      	beq.n	8020832 <sbrk_aligned+0x22>
 8020840:	1a21      	subs	r1, r4, r0
 8020842:	4628      	mov	r0, r5
 8020844:	f000 fade 	bl	8020e04 <_sbrk_r>
 8020848:	3001      	adds	r0, #1
 802084a:	d1f2      	bne.n	8020832 <sbrk_aligned+0x22>
 802084c:	e7ef      	b.n	802082e <sbrk_aligned+0x1e>
 802084e:	bf00      	nop
 8020850:	24025b5c 	.word	0x24025b5c

08020854 <_malloc_r>:
 8020854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020858:	1ccd      	adds	r5, r1, #3
 802085a:	f025 0503 	bic.w	r5, r5, #3
 802085e:	3508      	adds	r5, #8
 8020860:	2d0c      	cmp	r5, #12
 8020862:	bf38      	it	cc
 8020864:	250c      	movcc	r5, #12
 8020866:	2d00      	cmp	r5, #0
 8020868:	4606      	mov	r6, r0
 802086a:	db01      	blt.n	8020870 <_malloc_r+0x1c>
 802086c:	42a9      	cmp	r1, r5
 802086e:	d904      	bls.n	802087a <_malloc_r+0x26>
 8020870:	230c      	movs	r3, #12
 8020872:	6033      	str	r3, [r6, #0]
 8020874:	2000      	movs	r0, #0
 8020876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802087a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8020950 <_malloc_r+0xfc>
 802087e:	f000 f869 	bl	8020954 <__malloc_lock>
 8020882:	f8d8 3000 	ldr.w	r3, [r8]
 8020886:	461c      	mov	r4, r3
 8020888:	bb44      	cbnz	r4, 80208dc <_malloc_r+0x88>
 802088a:	4629      	mov	r1, r5
 802088c:	4630      	mov	r0, r6
 802088e:	f7ff ffbf 	bl	8020810 <sbrk_aligned>
 8020892:	1c43      	adds	r3, r0, #1
 8020894:	4604      	mov	r4, r0
 8020896:	d158      	bne.n	802094a <_malloc_r+0xf6>
 8020898:	f8d8 4000 	ldr.w	r4, [r8]
 802089c:	4627      	mov	r7, r4
 802089e:	2f00      	cmp	r7, #0
 80208a0:	d143      	bne.n	802092a <_malloc_r+0xd6>
 80208a2:	2c00      	cmp	r4, #0
 80208a4:	d04b      	beq.n	802093e <_malloc_r+0xea>
 80208a6:	6823      	ldr	r3, [r4, #0]
 80208a8:	4639      	mov	r1, r7
 80208aa:	4630      	mov	r0, r6
 80208ac:	eb04 0903 	add.w	r9, r4, r3
 80208b0:	f000 faa8 	bl	8020e04 <_sbrk_r>
 80208b4:	4581      	cmp	r9, r0
 80208b6:	d142      	bne.n	802093e <_malloc_r+0xea>
 80208b8:	6821      	ldr	r1, [r4, #0]
 80208ba:	1a6d      	subs	r5, r5, r1
 80208bc:	4629      	mov	r1, r5
 80208be:	4630      	mov	r0, r6
 80208c0:	f7ff ffa6 	bl	8020810 <sbrk_aligned>
 80208c4:	3001      	adds	r0, #1
 80208c6:	d03a      	beq.n	802093e <_malloc_r+0xea>
 80208c8:	6823      	ldr	r3, [r4, #0]
 80208ca:	442b      	add	r3, r5
 80208cc:	6023      	str	r3, [r4, #0]
 80208ce:	f8d8 3000 	ldr.w	r3, [r8]
 80208d2:	685a      	ldr	r2, [r3, #4]
 80208d4:	bb62      	cbnz	r2, 8020930 <_malloc_r+0xdc>
 80208d6:	f8c8 7000 	str.w	r7, [r8]
 80208da:	e00f      	b.n	80208fc <_malloc_r+0xa8>
 80208dc:	6822      	ldr	r2, [r4, #0]
 80208de:	1b52      	subs	r2, r2, r5
 80208e0:	d420      	bmi.n	8020924 <_malloc_r+0xd0>
 80208e2:	2a0b      	cmp	r2, #11
 80208e4:	d917      	bls.n	8020916 <_malloc_r+0xc2>
 80208e6:	1961      	adds	r1, r4, r5
 80208e8:	42a3      	cmp	r3, r4
 80208ea:	6025      	str	r5, [r4, #0]
 80208ec:	bf18      	it	ne
 80208ee:	6059      	strne	r1, [r3, #4]
 80208f0:	6863      	ldr	r3, [r4, #4]
 80208f2:	bf08      	it	eq
 80208f4:	f8c8 1000 	streq.w	r1, [r8]
 80208f8:	5162      	str	r2, [r4, r5]
 80208fa:	604b      	str	r3, [r1, #4]
 80208fc:	4630      	mov	r0, r6
 80208fe:	f000 f82f 	bl	8020960 <__malloc_unlock>
 8020902:	f104 000b 	add.w	r0, r4, #11
 8020906:	1d23      	adds	r3, r4, #4
 8020908:	f020 0007 	bic.w	r0, r0, #7
 802090c:	1ac2      	subs	r2, r0, r3
 802090e:	bf1c      	itt	ne
 8020910:	1a1b      	subne	r3, r3, r0
 8020912:	50a3      	strne	r3, [r4, r2]
 8020914:	e7af      	b.n	8020876 <_malloc_r+0x22>
 8020916:	6862      	ldr	r2, [r4, #4]
 8020918:	42a3      	cmp	r3, r4
 802091a:	bf0c      	ite	eq
 802091c:	f8c8 2000 	streq.w	r2, [r8]
 8020920:	605a      	strne	r2, [r3, #4]
 8020922:	e7eb      	b.n	80208fc <_malloc_r+0xa8>
 8020924:	4623      	mov	r3, r4
 8020926:	6864      	ldr	r4, [r4, #4]
 8020928:	e7ae      	b.n	8020888 <_malloc_r+0x34>
 802092a:	463c      	mov	r4, r7
 802092c:	687f      	ldr	r7, [r7, #4]
 802092e:	e7b6      	b.n	802089e <_malloc_r+0x4a>
 8020930:	461a      	mov	r2, r3
 8020932:	685b      	ldr	r3, [r3, #4]
 8020934:	42a3      	cmp	r3, r4
 8020936:	d1fb      	bne.n	8020930 <_malloc_r+0xdc>
 8020938:	2300      	movs	r3, #0
 802093a:	6053      	str	r3, [r2, #4]
 802093c:	e7de      	b.n	80208fc <_malloc_r+0xa8>
 802093e:	230c      	movs	r3, #12
 8020940:	6033      	str	r3, [r6, #0]
 8020942:	4630      	mov	r0, r6
 8020944:	f000 f80c 	bl	8020960 <__malloc_unlock>
 8020948:	e794      	b.n	8020874 <_malloc_r+0x20>
 802094a:	6005      	str	r5, [r0, #0]
 802094c:	e7d6      	b.n	80208fc <_malloc_r+0xa8>
 802094e:	bf00      	nop
 8020950:	24025b60 	.word	0x24025b60

08020954 <__malloc_lock>:
 8020954:	4801      	ldr	r0, [pc, #4]	@ (802095c <__malloc_lock+0x8>)
 8020956:	f000 baa2 	b.w	8020e9e <__retarget_lock_acquire_recursive>
 802095a:	bf00      	nop
 802095c:	24025ca4 	.word	0x24025ca4

08020960 <__malloc_unlock>:
 8020960:	4801      	ldr	r0, [pc, #4]	@ (8020968 <__malloc_unlock+0x8>)
 8020962:	f000 ba9d 	b.w	8020ea0 <__retarget_lock_release_recursive>
 8020966:	bf00      	nop
 8020968:	24025ca4 	.word	0x24025ca4

0802096c <__cxa_atexit>:
 802096c:	b510      	push	{r4, lr}
 802096e:	4604      	mov	r4, r0
 8020970:	4804      	ldr	r0, [pc, #16]	@ (8020984 <__cxa_atexit+0x18>)
 8020972:	4613      	mov	r3, r2
 8020974:	b120      	cbz	r0, 8020980 <__cxa_atexit+0x14>
 8020976:	460a      	mov	r2, r1
 8020978:	2002      	movs	r0, #2
 802097a:	4621      	mov	r1, r4
 802097c:	f000 faa0 	bl	8020ec0 <__register_exitproc>
 8020980:	bd10      	pop	{r4, pc}
 8020982:	bf00      	nop
 8020984:	08020ec1 	.word	0x08020ec1

08020988 <std>:
 8020988:	2300      	movs	r3, #0
 802098a:	b510      	push	{r4, lr}
 802098c:	4604      	mov	r4, r0
 802098e:	e9c0 3300 	strd	r3, r3, [r0]
 8020992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020996:	6083      	str	r3, [r0, #8]
 8020998:	8181      	strh	r1, [r0, #12]
 802099a:	6643      	str	r3, [r0, #100]	@ 0x64
 802099c:	81c2      	strh	r2, [r0, #14]
 802099e:	6183      	str	r3, [r0, #24]
 80209a0:	4619      	mov	r1, r3
 80209a2:	2208      	movs	r2, #8
 80209a4:	305c      	adds	r0, #92	@ 0x5c
 80209a6:	f000 f99b 	bl	8020ce0 <memset>
 80209aa:	4b0d      	ldr	r3, [pc, #52]	@ (80209e0 <std+0x58>)
 80209ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80209ae:	4b0d      	ldr	r3, [pc, #52]	@ (80209e4 <std+0x5c>)
 80209b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80209b2:	4b0d      	ldr	r3, [pc, #52]	@ (80209e8 <std+0x60>)
 80209b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80209b6:	4b0d      	ldr	r3, [pc, #52]	@ (80209ec <std+0x64>)
 80209b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80209ba:	4b0d      	ldr	r3, [pc, #52]	@ (80209f0 <std+0x68>)
 80209bc:	6224      	str	r4, [r4, #32]
 80209be:	429c      	cmp	r4, r3
 80209c0:	d006      	beq.n	80209d0 <std+0x48>
 80209c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80209c6:	4294      	cmp	r4, r2
 80209c8:	d002      	beq.n	80209d0 <std+0x48>
 80209ca:	33d0      	adds	r3, #208	@ 0xd0
 80209cc:	429c      	cmp	r4, r3
 80209ce:	d105      	bne.n	80209dc <std+0x54>
 80209d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80209d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80209d8:	f000 ba60 	b.w	8020e9c <__retarget_lock_init_recursive>
 80209dc:	bd10      	pop	{r4, pc}
 80209de:	bf00      	nop
 80209e0:	08020b31 	.word	0x08020b31
 80209e4:	08020b53 	.word	0x08020b53
 80209e8:	08020b8b 	.word	0x08020b8b
 80209ec:	08020baf 	.word	0x08020baf
 80209f0:	24025b64 	.word	0x24025b64

080209f4 <stdio_exit_handler>:
 80209f4:	4a02      	ldr	r2, [pc, #8]	@ (8020a00 <stdio_exit_handler+0xc>)
 80209f6:	4903      	ldr	r1, [pc, #12]	@ (8020a04 <stdio_exit_handler+0x10>)
 80209f8:	4803      	ldr	r0, [pc, #12]	@ (8020a08 <stdio_exit_handler+0x14>)
 80209fa:	f000 b87b 	b.w	8020af4 <_fwalk_sglue>
 80209fe:	bf00      	nop
 8020a00:	240000dc 	.word	0x240000dc
 8020a04:	080216b1 	.word	0x080216b1
 8020a08:	240000ec 	.word	0x240000ec

08020a0c <cleanup_stdio>:
 8020a0c:	6841      	ldr	r1, [r0, #4]
 8020a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8020a40 <cleanup_stdio+0x34>)
 8020a10:	4299      	cmp	r1, r3
 8020a12:	b510      	push	{r4, lr}
 8020a14:	4604      	mov	r4, r0
 8020a16:	d001      	beq.n	8020a1c <cleanup_stdio+0x10>
 8020a18:	f000 fe4a 	bl	80216b0 <_fflush_r>
 8020a1c:	68a1      	ldr	r1, [r4, #8]
 8020a1e:	4b09      	ldr	r3, [pc, #36]	@ (8020a44 <cleanup_stdio+0x38>)
 8020a20:	4299      	cmp	r1, r3
 8020a22:	d002      	beq.n	8020a2a <cleanup_stdio+0x1e>
 8020a24:	4620      	mov	r0, r4
 8020a26:	f000 fe43 	bl	80216b0 <_fflush_r>
 8020a2a:	68e1      	ldr	r1, [r4, #12]
 8020a2c:	4b06      	ldr	r3, [pc, #24]	@ (8020a48 <cleanup_stdio+0x3c>)
 8020a2e:	4299      	cmp	r1, r3
 8020a30:	d004      	beq.n	8020a3c <cleanup_stdio+0x30>
 8020a32:	4620      	mov	r0, r4
 8020a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020a38:	f000 be3a 	b.w	80216b0 <_fflush_r>
 8020a3c:	bd10      	pop	{r4, pc}
 8020a3e:	bf00      	nop
 8020a40:	24025b64 	.word	0x24025b64
 8020a44:	24025bcc 	.word	0x24025bcc
 8020a48:	24025c34 	.word	0x24025c34

08020a4c <global_stdio_init.part.0>:
 8020a4c:	b510      	push	{r4, lr}
 8020a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8020a7c <global_stdio_init.part.0+0x30>)
 8020a50:	4c0b      	ldr	r4, [pc, #44]	@ (8020a80 <global_stdio_init.part.0+0x34>)
 8020a52:	4a0c      	ldr	r2, [pc, #48]	@ (8020a84 <global_stdio_init.part.0+0x38>)
 8020a54:	601a      	str	r2, [r3, #0]
 8020a56:	4620      	mov	r0, r4
 8020a58:	2200      	movs	r2, #0
 8020a5a:	2104      	movs	r1, #4
 8020a5c:	f7ff ff94 	bl	8020988 <std>
 8020a60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8020a64:	2201      	movs	r2, #1
 8020a66:	2109      	movs	r1, #9
 8020a68:	f7ff ff8e 	bl	8020988 <std>
 8020a6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8020a70:	2202      	movs	r2, #2
 8020a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020a76:	2112      	movs	r1, #18
 8020a78:	f7ff bf86 	b.w	8020988 <std>
 8020a7c:	24025c9c 	.word	0x24025c9c
 8020a80:	24025b64 	.word	0x24025b64
 8020a84:	080209f5 	.word	0x080209f5

08020a88 <__sfp_lock_acquire>:
 8020a88:	4801      	ldr	r0, [pc, #4]	@ (8020a90 <__sfp_lock_acquire+0x8>)
 8020a8a:	f000 ba08 	b.w	8020e9e <__retarget_lock_acquire_recursive>
 8020a8e:	bf00      	nop
 8020a90:	24025ca6 	.word	0x24025ca6

08020a94 <__sfp_lock_release>:
 8020a94:	4801      	ldr	r0, [pc, #4]	@ (8020a9c <__sfp_lock_release+0x8>)
 8020a96:	f000 ba03 	b.w	8020ea0 <__retarget_lock_release_recursive>
 8020a9a:	bf00      	nop
 8020a9c:	24025ca6 	.word	0x24025ca6

08020aa0 <__sinit>:
 8020aa0:	b510      	push	{r4, lr}
 8020aa2:	4604      	mov	r4, r0
 8020aa4:	f7ff fff0 	bl	8020a88 <__sfp_lock_acquire>
 8020aa8:	6a23      	ldr	r3, [r4, #32]
 8020aaa:	b11b      	cbz	r3, 8020ab4 <__sinit+0x14>
 8020aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020ab0:	f7ff bff0 	b.w	8020a94 <__sfp_lock_release>
 8020ab4:	4b04      	ldr	r3, [pc, #16]	@ (8020ac8 <__sinit+0x28>)
 8020ab6:	6223      	str	r3, [r4, #32]
 8020ab8:	4b04      	ldr	r3, [pc, #16]	@ (8020acc <__sinit+0x2c>)
 8020aba:	681b      	ldr	r3, [r3, #0]
 8020abc:	2b00      	cmp	r3, #0
 8020abe:	d1f5      	bne.n	8020aac <__sinit+0xc>
 8020ac0:	f7ff ffc4 	bl	8020a4c <global_stdio_init.part.0>
 8020ac4:	e7f2      	b.n	8020aac <__sinit+0xc>
 8020ac6:	bf00      	nop
 8020ac8:	08020a0d 	.word	0x08020a0d
 8020acc:	24025c9c 	.word	0x24025c9c

08020ad0 <fiprintf>:
 8020ad0:	b40e      	push	{r1, r2, r3}
 8020ad2:	b503      	push	{r0, r1, lr}
 8020ad4:	4601      	mov	r1, r0
 8020ad6:	ab03      	add	r3, sp, #12
 8020ad8:	4805      	ldr	r0, [pc, #20]	@ (8020af0 <fiprintf+0x20>)
 8020ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8020ade:	6800      	ldr	r0, [r0, #0]
 8020ae0:	9301      	str	r3, [sp, #4]
 8020ae2:	f000 fabd 	bl	8021060 <_vfiprintf_r>
 8020ae6:	b002      	add	sp, #8
 8020ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8020aec:	b003      	add	sp, #12
 8020aee:	4770      	bx	lr
 8020af0:	240000e8 	.word	0x240000e8

08020af4 <_fwalk_sglue>:
 8020af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020af8:	4607      	mov	r7, r0
 8020afa:	4688      	mov	r8, r1
 8020afc:	4614      	mov	r4, r2
 8020afe:	2600      	movs	r6, #0
 8020b00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020b04:	f1b9 0901 	subs.w	r9, r9, #1
 8020b08:	d505      	bpl.n	8020b16 <_fwalk_sglue+0x22>
 8020b0a:	6824      	ldr	r4, [r4, #0]
 8020b0c:	2c00      	cmp	r4, #0
 8020b0e:	d1f7      	bne.n	8020b00 <_fwalk_sglue+0xc>
 8020b10:	4630      	mov	r0, r6
 8020b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020b16:	89ab      	ldrh	r3, [r5, #12]
 8020b18:	2b01      	cmp	r3, #1
 8020b1a:	d907      	bls.n	8020b2c <_fwalk_sglue+0x38>
 8020b1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020b20:	3301      	adds	r3, #1
 8020b22:	d003      	beq.n	8020b2c <_fwalk_sglue+0x38>
 8020b24:	4629      	mov	r1, r5
 8020b26:	4638      	mov	r0, r7
 8020b28:	47c0      	blx	r8
 8020b2a:	4306      	orrs	r6, r0
 8020b2c:	3568      	adds	r5, #104	@ 0x68
 8020b2e:	e7e9      	b.n	8020b04 <_fwalk_sglue+0x10>

08020b30 <__sread>:
 8020b30:	b510      	push	{r4, lr}
 8020b32:	460c      	mov	r4, r1
 8020b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b38:	f000 f93e 	bl	8020db8 <_read_r>
 8020b3c:	2800      	cmp	r0, #0
 8020b3e:	bfab      	itete	ge
 8020b40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8020b42:	89a3      	ldrhlt	r3, [r4, #12]
 8020b44:	181b      	addge	r3, r3, r0
 8020b46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8020b4a:	bfac      	ite	ge
 8020b4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8020b4e:	81a3      	strhlt	r3, [r4, #12]
 8020b50:	bd10      	pop	{r4, pc}

08020b52 <__swrite>:
 8020b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020b56:	461f      	mov	r7, r3
 8020b58:	898b      	ldrh	r3, [r1, #12]
 8020b5a:	05db      	lsls	r3, r3, #23
 8020b5c:	4605      	mov	r5, r0
 8020b5e:	460c      	mov	r4, r1
 8020b60:	4616      	mov	r6, r2
 8020b62:	d505      	bpl.n	8020b70 <__swrite+0x1e>
 8020b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b68:	2302      	movs	r3, #2
 8020b6a:	2200      	movs	r2, #0
 8020b6c:	f000 f912 	bl	8020d94 <_lseek_r>
 8020b70:	89a3      	ldrh	r3, [r4, #12]
 8020b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020b76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8020b7a:	81a3      	strh	r3, [r4, #12]
 8020b7c:	4632      	mov	r2, r6
 8020b7e:	463b      	mov	r3, r7
 8020b80:	4628      	mov	r0, r5
 8020b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020b86:	f000 b94d 	b.w	8020e24 <_write_r>

08020b8a <__sseek>:
 8020b8a:	b510      	push	{r4, lr}
 8020b8c:	460c      	mov	r4, r1
 8020b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b92:	f000 f8ff 	bl	8020d94 <_lseek_r>
 8020b96:	1c43      	adds	r3, r0, #1
 8020b98:	89a3      	ldrh	r3, [r4, #12]
 8020b9a:	bf15      	itete	ne
 8020b9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8020b9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8020ba2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8020ba6:	81a3      	strheq	r3, [r4, #12]
 8020ba8:	bf18      	it	ne
 8020baa:	81a3      	strhne	r3, [r4, #12]
 8020bac:	bd10      	pop	{r4, pc}

08020bae <__sclose>:
 8020bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020bb2:	f000 b8df 	b.w	8020d74 <_close_r>

08020bb6 <__swbuf_r>:
 8020bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bb8:	460e      	mov	r6, r1
 8020bba:	4614      	mov	r4, r2
 8020bbc:	4605      	mov	r5, r0
 8020bbe:	b118      	cbz	r0, 8020bc8 <__swbuf_r+0x12>
 8020bc0:	6a03      	ldr	r3, [r0, #32]
 8020bc2:	b90b      	cbnz	r3, 8020bc8 <__swbuf_r+0x12>
 8020bc4:	f7ff ff6c 	bl	8020aa0 <__sinit>
 8020bc8:	69a3      	ldr	r3, [r4, #24]
 8020bca:	60a3      	str	r3, [r4, #8]
 8020bcc:	89a3      	ldrh	r3, [r4, #12]
 8020bce:	071a      	lsls	r2, r3, #28
 8020bd0:	d501      	bpl.n	8020bd6 <__swbuf_r+0x20>
 8020bd2:	6923      	ldr	r3, [r4, #16]
 8020bd4:	b943      	cbnz	r3, 8020be8 <__swbuf_r+0x32>
 8020bd6:	4621      	mov	r1, r4
 8020bd8:	4628      	mov	r0, r5
 8020bda:	f000 f82b 	bl	8020c34 <__swsetup_r>
 8020bde:	b118      	cbz	r0, 8020be8 <__swbuf_r+0x32>
 8020be0:	f04f 37ff 	mov.w	r7, #4294967295
 8020be4:	4638      	mov	r0, r7
 8020be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020be8:	6823      	ldr	r3, [r4, #0]
 8020bea:	6922      	ldr	r2, [r4, #16]
 8020bec:	1a98      	subs	r0, r3, r2
 8020bee:	6963      	ldr	r3, [r4, #20]
 8020bf0:	b2f6      	uxtb	r6, r6
 8020bf2:	4283      	cmp	r3, r0
 8020bf4:	4637      	mov	r7, r6
 8020bf6:	dc05      	bgt.n	8020c04 <__swbuf_r+0x4e>
 8020bf8:	4621      	mov	r1, r4
 8020bfa:	4628      	mov	r0, r5
 8020bfc:	f000 fd58 	bl	80216b0 <_fflush_r>
 8020c00:	2800      	cmp	r0, #0
 8020c02:	d1ed      	bne.n	8020be0 <__swbuf_r+0x2a>
 8020c04:	68a3      	ldr	r3, [r4, #8]
 8020c06:	3b01      	subs	r3, #1
 8020c08:	60a3      	str	r3, [r4, #8]
 8020c0a:	6823      	ldr	r3, [r4, #0]
 8020c0c:	1c5a      	adds	r2, r3, #1
 8020c0e:	6022      	str	r2, [r4, #0]
 8020c10:	701e      	strb	r6, [r3, #0]
 8020c12:	6962      	ldr	r2, [r4, #20]
 8020c14:	1c43      	adds	r3, r0, #1
 8020c16:	429a      	cmp	r2, r3
 8020c18:	d004      	beq.n	8020c24 <__swbuf_r+0x6e>
 8020c1a:	89a3      	ldrh	r3, [r4, #12]
 8020c1c:	07db      	lsls	r3, r3, #31
 8020c1e:	d5e1      	bpl.n	8020be4 <__swbuf_r+0x2e>
 8020c20:	2e0a      	cmp	r6, #10
 8020c22:	d1df      	bne.n	8020be4 <__swbuf_r+0x2e>
 8020c24:	4621      	mov	r1, r4
 8020c26:	4628      	mov	r0, r5
 8020c28:	f000 fd42 	bl	80216b0 <_fflush_r>
 8020c2c:	2800      	cmp	r0, #0
 8020c2e:	d0d9      	beq.n	8020be4 <__swbuf_r+0x2e>
 8020c30:	e7d6      	b.n	8020be0 <__swbuf_r+0x2a>
	...

08020c34 <__swsetup_r>:
 8020c34:	b538      	push	{r3, r4, r5, lr}
 8020c36:	4b29      	ldr	r3, [pc, #164]	@ (8020cdc <__swsetup_r+0xa8>)
 8020c38:	4605      	mov	r5, r0
 8020c3a:	6818      	ldr	r0, [r3, #0]
 8020c3c:	460c      	mov	r4, r1
 8020c3e:	b118      	cbz	r0, 8020c48 <__swsetup_r+0x14>
 8020c40:	6a03      	ldr	r3, [r0, #32]
 8020c42:	b90b      	cbnz	r3, 8020c48 <__swsetup_r+0x14>
 8020c44:	f7ff ff2c 	bl	8020aa0 <__sinit>
 8020c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020c4c:	0719      	lsls	r1, r3, #28
 8020c4e:	d422      	bmi.n	8020c96 <__swsetup_r+0x62>
 8020c50:	06da      	lsls	r2, r3, #27
 8020c52:	d407      	bmi.n	8020c64 <__swsetup_r+0x30>
 8020c54:	2209      	movs	r2, #9
 8020c56:	602a      	str	r2, [r5, #0]
 8020c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020c5c:	81a3      	strh	r3, [r4, #12]
 8020c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8020c62:	e033      	b.n	8020ccc <__swsetup_r+0x98>
 8020c64:	0758      	lsls	r0, r3, #29
 8020c66:	d512      	bpl.n	8020c8e <__swsetup_r+0x5a>
 8020c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020c6a:	b141      	cbz	r1, 8020c7e <__swsetup_r+0x4a>
 8020c6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020c70:	4299      	cmp	r1, r3
 8020c72:	d002      	beq.n	8020c7a <__swsetup_r+0x46>
 8020c74:	4628      	mov	r0, r5
 8020c76:	f000 f97f 	bl	8020f78 <_free_r>
 8020c7a:	2300      	movs	r3, #0
 8020c7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8020c7e:	89a3      	ldrh	r3, [r4, #12]
 8020c80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8020c84:	81a3      	strh	r3, [r4, #12]
 8020c86:	2300      	movs	r3, #0
 8020c88:	6063      	str	r3, [r4, #4]
 8020c8a:	6923      	ldr	r3, [r4, #16]
 8020c8c:	6023      	str	r3, [r4, #0]
 8020c8e:	89a3      	ldrh	r3, [r4, #12]
 8020c90:	f043 0308 	orr.w	r3, r3, #8
 8020c94:	81a3      	strh	r3, [r4, #12]
 8020c96:	6923      	ldr	r3, [r4, #16]
 8020c98:	b94b      	cbnz	r3, 8020cae <__swsetup_r+0x7a>
 8020c9a:	89a3      	ldrh	r3, [r4, #12]
 8020c9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8020ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020ca4:	d003      	beq.n	8020cae <__swsetup_r+0x7a>
 8020ca6:	4621      	mov	r1, r4
 8020ca8:	4628      	mov	r0, r5
 8020caa:	f000 fd4f 	bl	802174c <__smakebuf_r>
 8020cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020cb2:	f013 0201 	ands.w	r2, r3, #1
 8020cb6:	d00a      	beq.n	8020cce <__swsetup_r+0x9a>
 8020cb8:	2200      	movs	r2, #0
 8020cba:	60a2      	str	r2, [r4, #8]
 8020cbc:	6962      	ldr	r2, [r4, #20]
 8020cbe:	4252      	negs	r2, r2
 8020cc0:	61a2      	str	r2, [r4, #24]
 8020cc2:	6922      	ldr	r2, [r4, #16]
 8020cc4:	b942      	cbnz	r2, 8020cd8 <__swsetup_r+0xa4>
 8020cc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8020cca:	d1c5      	bne.n	8020c58 <__swsetup_r+0x24>
 8020ccc:	bd38      	pop	{r3, r4, r5, pc}
 8020cce:	0799      	lsls	r1, r3, #30
 8020cd0:	bf58      	it	pl
 8020cd2:	6962      	ldrpl	r2, [r4, #20]
 8020cd4:	60a2      	str	r2, [r4, #8]
 8020cd6:	e7f4      	b.n	8020cc2 <__swsetup_r+0x8e>
 8020cd8:	2000      	movs	r0, #0
 8020cda:	e7f7      	b.n	8020ccc <__swsetup_r+0x98>
 8020cdc:	240000e8 	.word	0x240000e8

08020ce0 <memset>:
 8020ce0:	4402      	add	r2, r0
 8020ce2:	4603      	mov	r3, r0
 8020ce4:	4293      	cmp	r3, r2
 8020ce6:	d100      	bne.n	8020cea <memset+0xa>
 8020ce8:	4770      	bx	lr
 8020cea:	f803 1b01 	strb.w	r1, [r3], #1
 8020cee:	e7f9      	b.n	8020ce4 <memset+0x4>

08020cf0 <strncmp>:
 8020cf0:	b510      	push	{r4, lr}
 8020cf2:	b16a      	cbz	r2, 8020d10 <strncmp+0x20>
 8020cf4:	3901      	subs	r1, #1
 8020cf6:	1884      	adds	r4, r0, r2
 8020cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020cfc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8020d00:	429a      	cmp	r2, r3
 8020d02:	d103      	bne.n	8020d0c <strncmp+0x1c>
 8020d04:	42a0      	cmp	r0, r4
 8020d06:	d001      	beq.n	8020d0c <strncmp+0x1c>
 8020d08:	2a00      	cmp	r2, #0
 8020d0a:	d1f5      	bne.n	8020cf8 <strncmp+0x8>
 8020d0c:	1ad0      	subs	r0, r2, r3
 8020d0e:	bd10      	pop	{r4, pc}
 8020d10:	4610      	mov	r0, r2
 8020d12:	e7fc      	b.n	8020d0e <strncmp+0x1e>

08020d14 <_raise_r>:
 8020d14:	291f      	cmp	r1, #31
 8020d16:	b538      	push	{r3, r4, r5, lr}
 8020d18:	4605      	mov	r5, r0
 8020d1a:	460c      	mov	r4, r1
 8020d1c:	d904      	bls.n	8020d28 <_raise_r+0x14>
 8020d1e:	2316      	movs	r3, #22
 8020d20:	6003      	str	r3, [r0, #0]
 8020d22:	f04f 30ff 	mov.w	r0, #4294967295
 8020d26:	bd38      	pop	{r3, r4, r5, pc}
 8020d28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8020d2a:	b112      	cbz	r2, 8020d32 <_raise_r+0x1e>
 8020d2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020d30:	b94b      	cbnz	r3, 8020d46 <_raise_r+0x32>
 8020d32:	4628      	mov	r0, r5
 8020d34:	f000 f864 	bl	8020e00 <_getpid_r>
 8020d38:	4622      	mov	r2, r4
 8020d3a:	4601      	mov	r1, r0
 8020d3c:	4628      	mov	r0, r5
 8020d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020d42:	f000 b84b 	b.w	8020ddc <_kill_r>
 8020d46:	2b01      	cmp	r3, #1
 8020d48:	d00a      	beq.n	8020d60 <_raise_r+0x4c>
 8020d4a:	1c59      	adds	r1, r3, #1
 8020d4c:	d103      	bne.n	8020d56 <_raise_r+0x42>
 8020d4e:	2316      	movs	r3, #22
 8020d50:	6003      	str	r3, [r0, #0]
 8020d52:	2001      	movs	r0, #1
 8020d54:	e7e7      	b.n	8020d26 <_raise_r+0x12>
 8020d56:	2100      	movs	r1, #0
 8020d58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8020d5c:	4620      	mov	r0, r4
 8020d5e:	4798      	blx	r3
 8020d60:	2000      	movs	r0, #0
 8020d62:	e7e0      	b.n	8020d26 <_raise_r+0x12>

08020d64 <raise>:
 8020d64:	4b02      	ldr	r3, [pc, #8]	@ (8020d70 <raise+0xc>)
 8020d66:	4601      	mov	r1, r0
 8020d68:	6818      	ldr	r0, [r3, #0]
 8020d6a:	f7ff bfd3 	b.w	8020d14 <_raise_r>
 8020d6e:	bf00      	nop
 8020d70:	240000e8 	.word	0x240000e8

08020d74 <_close_r>:
 8020d74:	b538      	push	{r3, r4, r5, lr}
 8020d76:	4d06      	ldr	r5, [pc, #24]	@ (8020d90 <_close_r+0x1c>)
 8020d78:	2300      	movs	r3, #0
 8020d7a:	4604      	mov	r4, r0
 8020d7c:	4608      	mov	r0, r1
 8020d7e:	602b      	str	r3, [r5, #0]
 8020d80:	f7e0 fcde 	bl	8001740 <_close>
 8020d84:	1c43      	adds	r3, r0, #1
 8020d86:	d102      	bne.n	8020d8e <_close_r+0x1a>
 8020d88:	682b      	ldr	r3, [r5, #0]
 8020d8a:	b103      	cbz	r3, 8020d8e <_close_r+0x1a>
 8020d8c:	6023      	str	r3, [r4, #0]
 8020d8e:	bd38      	pop	{r3, r4, r5, pc}
 8020d90:	24025ca0 	.word	0x24025ca0

08020d94 <_lseek_r>:
 8020d94:	b538      	push	{r3, r4, r5, lr}
 8020d96:	4d07      	ldr	r5, [pc, #28]	@ (8020db4 <_lseek_r+0x20>)
 8020d98:	4604      	mov	r4, r0
 8020d9a:	4608      	mov	r0, r1
 8020d9c:	4611      	mov	r1, r2
 8020d9e:	2200      	movs	r2, #0
 8020da0:	602a      	str	r2, [r5, #0]
 8020da2:	461a      	mov	r2, r3
 8020da4:	f7e0 fcd6 	bl	8001754 <_lseek>
 8020da8:	1c43      	adds	r3, r0, #1
 8020daa:	d102      	bne.n	8020db2 <_lseek_r+0x1e>
 8020dac:	682b      	ldr	r3, [r5, #0]
 8020dae:	b103      	cbz	r3, 8020db2 <_lseek_r+0x1e>
 8020db0:	6023      	str	r3, [r4, #0]
 8020db2:	bd38      	pop	{r3, r4, r5, pc}
 8020db4:	24025ca0 	.word	0x24025ca0

08020db8 <_read_r>:
 8020db8:	b538      	push	{r3, r4, r5, lr}
 8020dba:	4d07      	ldr	r5, [pc, #28]	@ (8020dd8 <_read_r+0x20>)
 8020dbc:	4604      	mov	r4, r0
 8020dbe:	4608      	mov	r0, r1
 8020dc0:	4611      	mov	r1, r2
 8020dc2:	2200      	movs	r2, #0
 8020dc4:	602a      	str	r2, [r5, #0]
 8020dc6:	461a      	mov	r2, r3
 8020dc8:	f7e0 fc9e 	bl	8001708 <_read>
 8020dcc:	1c43      	adds	r3, r0, #1
 8020dce:	d102      	bne.n	8020dd6 <_read_r+0x1e>
 8020dd0:	682b      	ldr	r3, [r5, #0]
 8020dd2:	b103      	cbz	r3, 8020dd6 <_read_r+0x1e>
 8020dd4:	6023      	str	r3, [r4, #0]
 8020dd6:	bd38      	pop	{r3, r4, r5, pc}
 8020dd8:	24025ca0 	.word	0x24025ca0

08020ddc <_kill_r>:
 8020ddc:	b538      	push	{r3, r4, r5, lr}
 8020dde:	4d07      	ldr	r5, [pc, #28]	@ (8020dfc <_kill_r+0x20>)
 8020de0:	2300      	movs	r3, #0
 8020de2:	4604      	mov	r4, r0
 8020de4:	4608      	mov	r0, r1
 8020de6:	4611      	mov	r1, r2
 8020de8:	602b      	str	r3, [r5, #0]
 8020dea:	f7e0 fc7f 	bl	80016ec <_kill>
 8020dee:	1c43      	adds	r3, r0, #1
 8020df0:	d102      	bne.n	8020df8 <_kill_r+0x1c>
 8020df2:	682b      	ldr	r3, [r5, #0]
 8020df4:	b103      	cbz	r3, 8020df8 <_kill_r+0x1c>
 8020df6:	6023      	str	r3, [r4, #0]
 8020df8:	bd38      	pop	{r3, r4, r5, pc}
 8020dfa:	bf00      	nop
 8020dfc:	24025ca0 	.word	0x24025ca0

08020e00 <_getpid_r>:
 8020e00:	f7e0 bc72 	b.w	80016e8 <_getpid>

08020e04 <_sbrk_r>:
 8020e04:	b538      	push	{r3, r4, r5, lr}
 8020e06:	4d06      	ldr	r5, [pc, #24]	@ (8020e20 <_sbrk_r+0x1c>)
 8020e08:	2300      	movs	r3, #0
 8020e0a:	4604      	mov	r4, r0
 8020e0c:	4608      	mov	r0, r1
 8020e0e:	602b      	str	r3, [r5, #0]
 8020e10:	f7e0 fca2 	bl	8001758 <_sbrk>
 8020e14:	1c43      	adds	r3, r0, #1
 8020e16:	d102      	bne.n	8020e1e <_sbrk_r+0x1a>
 8020e18:	682b      	ldr	r3, [r5, #0]
 8020e1a:	b103      	cbz	r3, 8020e1e <_sbrk_r+0x1a>
 8020e1c:	6023      	str	r3, [r4, #0]
 8020e1e:	bd38      	pop	{r3, r4, r5, pc}
 8020e20:	24025ca0 	.word	0x24025ca0

08020e24 <_write_r>:
 8020e24:	b538      	push	{r3, r4, r5, lr}
 8020e26:	4d07      	ldr	r5, [pc, #28]	@ (8020e44 <_write_r+0x20>)
 8020e28:	4604      	mov	r4, r0
 8020e2a:	4608      	mov	r0, r1
 8020e2c:	4611      	mov	r1, r2
 8020e2e:	2200      	movs	r2, #0
 8020e30:	602a      	str	r2, [r5, #0]
 8020e32:	461a      	mov	r2, r3
 8020e34:	f7e0 fc76 	bl	8001724 <_write>
 8020e38:	1c43      	adds	r3, r0, #1
 8020e3a:	d102      	bne.n	8020e42 <_write_r+0x1e>
 8020e3c:	682b      	ldr	r3, [r5, #0]
 8020e3e:	b103      	cbz	r3, 8020e42 <_write_r+0x1e>
 8020e40:	6023      	str	r3, [r4, #0]
 8020e42:	bd38      	pop	{r3, r4, r5, pc}
 8020e44:	24025ca0 	.word	0x24025ca0

08020e48 <__errno>:
 8020e48:	4b01      	ldr	r3, [pc, #4]	@ (8020e50 <__errno+0x8>)
 8020e4a:	6818      	ldr	r0, [r3, #0]
 8020e4c:	4770      	bx	lr
 8020e4e:	bf00      	nop
 8020e50:	240000e8 	.word	0x240000e8

08020e54 <__libc_init_array>:
 8020e54:	b570      	push	{r4, r5, r6, lr}
 8020e56:	4d0d      	ldr	r5, [pc, #52]	@ (8020e8c <__libc_init_array+0x38>)
 8020e58:	4c0d      	ldr	r4, [pc, #52]	@ (8020e90 <__libc_init_array+0x3c>)
 8020e5a:	1b64      	subs	r4, r4, r5
 8020e5c:	10a4      	asrs	r4, r4, #2
 8020e5e:	2600      	movs	r6, #0
 8020e60:	42a6      	cmp	r6, r4
 8020e62:	d109      	bne.n	8020e78 <__libc_init_array+0x24>
 8020e64:	4d0b      	ldr	r5, [pc, #44]	@ (8020e94 <__libc_init_array+0x40>)
 8020e66:	4c0c      	ldr	r4, [pc, #48]	@ (8020e98 <__libc_init_array+0x44>)
 8020e68:	f000 fcce 	bl	8021808 <_init>
 8020e6c:	1b64      	subs	r4, r4, r5
 8020e6e:	10a4      	asrs	r4, r4, #2
 8020e70:	2600      	movs	r6, #0
 8020e72:	42a6      	cmp	r6, r4
 8020e74:	d105      	bne.n	8020e82 <__libc_init_array+0x2e>
 8020e76:	bd70      	pop	{r4, r5, r6, pc}
 8020e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8020e7c:	4798      	blx	r3
 8020e7e:	3601      	adds	r6, #1
 8020e80:	e7ee      	b.n	8020e60 <__libc_init_array+0xc>
 8020e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8020e86:	4798      	blx	r3
 8020e88:	3601      	adds	r6, #1
 8020e8a:	e7f2      	b.n	8020e72 <__libc_init_array+0x1e>
 8020e8c:	08024b1c 	.word	0x08024b1c
 8020e90:	08024b1c 	.word	0x08024b1c
 8020e94:	08024b1c 	.word	0x08024b1c
 8020e98:	08024b38 	.word	0x08024b38

08020e9c <__retarget_lock_init_recursive>:
 8020e9c:	4770      	bx	lr

08020e9e <__retarget_lock_acquire_recursive>:
 8020e9e:	4770      	bx	lr

08020ea0 <__retarget_lock_release_recursive>:
 8020ea0:	4770      	bx	lr

08020ea2 <memcpy>:
 8020ea2:	440a      	add	r2, r1
 8020ea4:	4291      	cmp	r1, r2
 8020ea6:	f100 33ff 	add.w	r3, r0, #4294967295
 8020eaa:	d100      	bne.n	8020eae <memcpy+0xc>
 8020eac:	4770      	bx	lr
 8020eae:	b510      	push	{r4, lr}
 8020eb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020eb8:	4291      	cmp	r1, r2
 8020eba:	d1f9      	bne.n	8020eb0 <memcpy+0xe>
 8020ebc:	bd10      	pop	{r4, pc}
	...

08020ec0 <__register_exitproc>:
 8020ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020ec4:	4d27      	ldr	r5, [pc, #156]	@ (8020f64 <__register_exitproc+0xa4>)
 8020ec6:	4607      	mov	r7, r0
 8020ec8:	6828      	ldr	r0, [r5, #0]
 8020eca:	4691      	mov	r9, r2
 8020ecc:	460e      	mov	r6, r1
 8020ece:	4698      	mov	r8, r3
 8020ed0:	f7ff ffe5 	bl	8020e9e <__retarget_lock_acquire_recursive>
 8020ed4:	4a24      	ldr	r2, [pc, #144]	@ (8020f68 <__register_exitproc+0xa8>)
 8020ed6:	6814      	ldr	r4, [r2, #0]
 8020ed8:	b93c      	cbnz	r4, 8020eea <__register_exitproc+0x2a>
 8020eda:	4b24      	ldr	r3, [pc, #144]	@ (8020f6c <__register_exitproc+0xac>)
 8020edc:	6013      	str	r3, [r2, #0]
 8020ede:	4a24      	ldr	r2, [pc, #144]	@ (8020f70 <__register_exitproc+0xb0>)
 8020ee0:	b112      	cbz	r2, 8020ee8 <__register_exitproc+0x28>
 8020ee2:	6812      	ldr	r2, [r2, #0]
 8020ee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8020ee8:	4c20      	ldr	r4, [pc, #128]	@ (8020f6c <__register_exitproc+0xac>)
 8020eea:	6863      	ldr	r3, [r4, #4]
 8020eec:	2b1f      	cmp	r3, #31
 8020eee:	dd06      	ble.n	8020efe <__register_exitproc+0x3e>
 8020ef0:	6828      	ldr	r0, [r5, #0]
 8020ef2:	f7ff ffd5 	bl	8020ea0 <__retarget_lock_release_recursive>
 8020ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8020efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020efe:	b32f      	cbz	r7, 8020f4c <__register_exitproc+0x8c>
 8020f00:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8020f04:	b968      	cbnz	r0, 8020f22 <__register_exitproc+0x62>
 8020f06:	4b1b      	ldr	r3, [pc, #108]	@ (8020f74 <__register_exitproc+0xb4>)
 8020f08:	2b00      	cmp	r3, #0
 8020f0a:	d0f1      	beq.n	8020ef0 <__register_exitproc+0x30>
 8020f0c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8020f10:	f7ff fc6e 	bl	80207f0 <malloc>
 8020f14:	2800      	cmp	r0, #0
 8020f16:	d0eb      	beq.n	8020ef0 <__register_exitproc+0x30>
 8020f18:	2300      	movs	r3, #0
 8020f1a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8020f1e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8020f22:	6863      	ldr	r3, [r4, #4]
 8020f24:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8020f28:	2201      	movs	r2, #1
 8020f2a:	409a      	lsls	r2, r3
 8020f2c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8020f30:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8020f34:	4313      	orrs	r3, r2
 8020f36:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8020f3a:	2f02      	cmp	r7, #2
 8020f3c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8020f40:	bf02      	ittt	eq
 8020f42:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8020f46:	4313      	orreq	r3, r2
 8020f48:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8020f4c:	6863      	ldr	r3, [r4, #4]
 8020f4e:	6828      	ldr	r0, [r5, #0]
 8020f50:	1c5a      	adds	r2, r3, #1
 8020f52:	3302      	adds	r3, #2
 8020f54:	6062      	str	r2, [r4, #4]
 8020f56:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8020f5a:	f7ff ffa1 	bl	8020ea0 <__retarget_lock_release_recursive>
 8020f5e:	2000      	movs	r0, #0
 8020f60:	e7cb      	b.n	8020efa <__register_exitproc+0x3a>
 8020f62:	bf00      	nop
 8020f64:	24000138 	.word	0x24000138
 8020f68:	24025d34 	.word	0x24025d34
 8020f6c:	24025ca8 	.word	0x24025ca8
 8020f70:	08024950 	.word	0x08024950
 8020f74:	080207f1 	.word	0x080207f1

08020f78 <_free_r>:
 8020f78:	b538      	push	{r3, r4, r5, lr}
 8020f7a:	4605      	mov	r5, r0
 8020f7c:	2900      	cmp	r1, #0
 8020f7e:	d041      	beq.n	8021004 <_free_r+0x8c>
 8020f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020f84:	1f0c      	subs	r4, r1, #4
 8020f86:	2b00      	cmp	r3, #0
 8020f88:	bfb8      	it	lt
 8020f8a:	18e4      	addlt	r4, r4, r3
 8020f8c:	f7ff fce2 	bl	8020954 <__malloc_lock>
 8020f90:	4a1d      	ldr	r2, [pc, #116]	@ (8021008 <_free_r+0x90>)
 8020f92:	6813      	ldr	r3, [r2, #0]
 8020f94:	b933      	cbnz	r3, 8020fa4 <_free_r+0x2c>
 8020f96:	6063      	str	r3, [r4, #4]
 8020f98:	6014      	str	r4, [r2, #0]
 8020f9a:	4628      	mov	r0, r5
 8020f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020fa0:	f7ff bcde 	b.w	8020960 <__malloc_unlock>
 8020fa4:	42a3      	cmp	r3, r4
 8020fa6:	d908      	bls.n	8020fba <_free_r+0x42>
 8020fa8:	6820      	ldr	r0, [r4, #0]
 8020faa:	1821      	adds	r1, r4, r0
 8020fac:	428b      	cmp	r3, r1
 8020fae:	bf01      	itttt	eq
 8020fb0:	6819      	ldreq	r1, [r3, #0]
 8020fb2:	685b      	ldreq	r3, [r3, #4]
 8020fb4:	1809      	addeq	r1, r1, r0
 8020fb6:	6021      	streq	r1, [r4, #0]
 8020fb8:	e7ed      	b.n	8020f96 <_free_r+0x1e>
 8020fba:	461a      	mov	r2, r3
 8020fbc:	685b      	ldr	r3, [r3, #4]
 8020fbe:	b10b      	cbz	r3, 8020fc4 <_free_r+0x4c>
 8020fc0:	42a3      	cmp	r3, r4
 8020fc2:	d9fa      	bls.n	8020fba <_free_r+0x42>
 8020fc4:	6811      	ldr	r1, [r2, #0]
 8020fc6:	1850      	adds	r0, r2, r1
 8020fc8:	42a0      	cmp	r0, r4
 8020fca:	d10b      	bne.n	8020fe4 <_free_r+0x6c>
 8020fcc:	6820      	ldr	r0, [r4, #0]
 8020fce:	4401      	add	r1, r0
 8020fd0:	1850      	adds	r0, r2, r1
 8020fd2:	4283      	cmp	r3, r0
 8020fd4:	6011      	str	r1, [r2, #0]
 8020fd6:	d1e0      	bne.n	8020f9a <_free_r+0x22>
 8020fd8:	6818      	ldr	r0, [r3, #0]
 8020fda:	685b      	ldr	r3, [r3, #4]
 8020fdc:	6053      	str	r3, [r2, #4]
 8020fde:	4408      	add	r0, r1
 8020fe0:	6010      	str	r0, [r2, #0]
 8020fe2:	e7da      	b.n	8020f9a <_free_r+0x22>
 8020fe4:	d902      	bls.n	8020fec <_free_r+0x74>
 8020fe6:	230c      	movs	r3, #12
 8020fe8:	602b      	str	r3, [r5, #0]
 8020fea:	e7d6      	b.n	8020f9a <_free_r+0x22>
 8020fec:	6820      	ldr	r0, [r4, #0]
 8020fee:	1821      	adds	r1, r4, r0
 8020ff0:	428b      	cmp	r3, r1
 8020ff2:	bf04      	itt	eq
 8020ff4:	6819      	ldreq	r1, [r3, #0]
 8020ff6:	685b      	ldreq	r3, [r3, #4]
 8020ff8:	6063      	str	r3, [r4, #4]
 8020ffa:	bf04      	itt	eq
 8020ffc:	1809      	addeq	r1, r1, r0
 8020ffe:	6021      	streq	r1, [r4, #0]
 8021000:	6054      	str	r4, [r2, #4]
 8021002:	e7ca      	b.n	8020f9a <_free_r+0x22>
 8021004:	bd38      	pop	{r3, r4, r5, pc}
 8021006:	bf00      	nop
 8021008:	24025b60 	.word	0x24025b60

0802100c <__sfputc_r>:
 802100c:	6893      	ldr	r3, [r2, #8]
 802100e:	3b01      	subs	r3, #1
 8021010:	2b00      	cmp	r3, #0
 8021012:	b410      	push	{r4}
 8021014:	6093      	str	r3, [r2, #8]
 8021016:	da08      	bge.n	802102a <__sfputc_r+0x1e>
 8021018:	6994      	ldr	r4, [r2, #24]
 802101a:	42a3      	cmp	r3, r4
 802101c:	db01      	blt.n	8021022 <__sfputc_r+0x16>
 802101e:	290a      	cmp	r1, #10
 8021020:	d103      	bne.n	802102a <__sfputc_r+0x1e>
 8021022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021026:	f7ff bdc6 	b.w	8020bb6 <__swbuf_r>
 802102a:	6813      	ldr	r3, [r2, #0]
 802102c:	1c58      	adds	r0, r3, #1
 802102e:	6010      	str	r0, [r2, #0]
 8021030:	7019      	strb	r1, [r3, #0]
 8021032:	4608      	mov	r0, r1
 8021034:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021038:	4770      	bx	lr

0802103a <__sfputs_r>:
 802103a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802103c:	4606      	mov	r6, r0
 802103e:	460f      	mov	r7, r1
 8021040:	4614      	mov	r4, r2
 8021042:	18d5      	adds	r5, r2, r3
 8021044:	42ac      	cmp	r4, r5
 8021046:	d101      	bne.n	802104c <__sfputs_r+0x12>
 8021048:	2000      	movs	r0, #0
 802104a:	e007      	b.n	802105c <__sfputs_r+0x22>
 802104c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021050:	463a      	mov	r2, r7
 8021052:	4630      	mov	r0, r6
 8021054:	f7ff ffda 	bl	802100c <__sfputc_r>
 8021058:	1c43      	adds	r3, r0, #1
 802105a:	d1f3      	bne.n	8021044 <__sfputs_r+0xa>
 802105c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021060 <_vfiprintf_r>:
 8021060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021064:	460d      	mov	r5, r1
 8021066:	b09d      	sub	sp, #116	@ 0x74
 8021068:	4614      	mov	r4, r2
 802106a:	4698      	mov	r8, r3
 802106c:	4606      	mov	r6, r0
 802106e:	b118      	cbz	r0, 8021078 <_vfiprintf_r+0x18>
 8021070:	6a03      	ldr	r3, [r0, #32]
 8021072:	b90b      	cbnz	r3, 8021078 <_vfiprintf_r+0x18>
 8021074:	f7ff fd14 	bl	8020aa0 <__sinit>
 8021078:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802107a:	07d9      	lsls	r1, r3, #31
 802107c:	d405      	bmi.n	802108a <_vfiprintf_r+0x2a>
 802107e:	89ab      	ldrh	r3, [r5, #12]
 8021080:	059a      	lsls	r2, r3, #22
 8021082:	d402      	bmi.n	802108a <_vfiprintf_r+0x2a>
 8021084:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021086:	f7ff ff0a 	bl	8020e9e <__retarget_lock_acquire_recursive>
 802108a:	89ab      	ldrh	r3, [r5, #12]
 802108c:	071b      	lsls	r3, r3, #28
 802108e:	d501      	bpl.n	8021094 <_vfiprintf_r+0x34>
 8021090:	692b      	ldr	r3, [r5, #16]
 8021092:	b99b      	cbnz	r3, 80210bc <_vfiprintf_r+0x5c>
 8021094:	4629      	mov	r1, r5
 8021096:	4630      	mov	r0, r6
 8021098:	f7ff fdcc 	bl	8020c34 <__swsetup_r>
 802109c:	b170      	cbz	r0, 80210bc <_vfiprintf_r+0x5c>
 802109e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80210a0:	07dc      	lsls	r4, r3, #31
 80210a2:	d504      	bpl.n	80210ae <_vfiprintf_r+0x4e>
 80210a4:	f04f 30ff 	mov.w	r0, #4294967295
 80210a8:	b01d      	add	sp, #116	@ 0x74
 80210aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210ae:	89ab      	ldrh	r3, [r5, #12]
 80210b0:	0598      	lsls	r0, r3, #22
 80210b2:	d4f7      	bmi.n	80210a4 <_vfiprintf_r+0x44>
 80210b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80210b6:	f7ff fef3 	bl	8020ea0 <__retarget_lock_release_recursive>
 80210ba:	e7f3      	b.n	80210a4 <_vfiprintf_r+0x44>
 80210bc:	2300      	movs	r3, #0
 80210be:	9309      	str	r3, [sp, #36]	@ 0x24
 80210c0:	2320      	movs	r3, #32
 80210c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80210c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80210ca:	2330      	movs	r3, #48	@ 0x30
 80210cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802127c <_vfiprintf_r+0x21c>
 80210d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80210d4:	f04f 0901 	mov.w	r9, #1
 80210d8:	4623      	mov	r3, r4
 80210da:	469a      	mov	sl, r3
 80210dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80210e0:	b10a      	cbz	r2, 80210e6 <_vfiprintf_r+0x86>
 80210e2:	2a25      	cmp	r2, #37	@ 0x25
 80210e4:	d1f9      	bne.n	80210da <_vfiprintf_r+0x7a>
 80210e6:	ebba 0b04 	subs.w	fp, sl, r4
 80210ea:	d00b      	beq.n	8021104 <_vfiprintf_r+0xa4>
 80210ec:	465b      	mov	r3, fp
 80210ee:	4622      	mov	r2, r4
 80210f0:	4629      	mov	r1, r5
 80210f2:	4630      	mov	r0, r6
 80210f4:	f7ff ffa1 	bl	802103a <__sfputs_r>
 80210f8:	3001      	adds	r0, #1
 80210fa:	f000 80a7 	beq.w	802124c <_vfiprintf_r+0x1ec>
 80210fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021100:	445a      	add	r2, fp
 8021102:	9209      	str	r2, [sp, #36]	@ 0x24
 8021104:	f89a 3000 	ldrb.w	r3, [sl]
 8021108:	2b00      	cmp	r3, #0
 802110a:	f000 809f 	beq.w	802124c <_vfiprintf_r+0x1ec>
 802110e:	2300      	movs	r3, #0
 8021110:	f04f 32ff 	mov.w	r2, #4294967295
 8021114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021118:	f10a 0a01 	add.w	sl, sl, #1
 802111c:	9304      	str	r3, [sp, #16]
 802111e:	9307      	str	r3, [sp, #28]
 8021120:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021124:	931a      	str	r3, [sp, #104]	@ 0x68
 8021126:	4654      	mov	r4, sl
 8021128:	2205      	movs	r2, #5
 802112a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802112e:	4853      	ldr	r0, [pc, #332]	@ (802127c <_vfiprintf_r+0x21c>)
 8021130:	f7df f8d6 	bl	80002e0 <memchr>
 8021134:	9a04      	ldr	r2, [sp, #16]
 8021136:	b9d8      	cbnz	r0, 8021170 <_vfiprintf_r+0x110>
 8021138:	06d1      	lsls	r1, r2, #27
 802113a:	bf44      	itt	mi
 802113c:	2320      	movmi	r3, #32
 802113e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021142:	0713      	lsls	r3, r2, #28
 8021144:	bf44      	itt	mi
 8021146:	232b      	movmi	r3, #43	@ 0x2b
 8021148:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802114c:	f89a 3000 	ldrb.w	r3, [sl]
 8021150:	2b2a      	cmp	r3, #42	@ 0x2a
 8021152:	d015      	beq.n	8021180 <_vfiprintf_r+0x120>
 8021154:	9a07      	ldr	r2, [sp, #28]
 8021156:	4654      	mov	r4, sl
 8021158:	2000      	movs	r0, #0
 802115a:	f04f 0c0a 	mov.w	ip, #10
 802115e:	4621      	mov	r1, r4
 8021160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021164:	3b30      	subs	r3, #48	@ 0x30
 8021166:	2b09      	cmp	r3, #9
 8021168:	d94b      	bls.n	8021202 <_vfiprintf_r+0x1a2>
 802116a:	b1b0      	cbz	r0, 802119a <_vfiprintf_r+0x13a>
 802116c:	9207      	str	r2, [sp, #28]
 802116e:	e014      	b.n	802119a <_vfiprintf_r+0x13a>
 8021170:	eba0 0308 	sub.w	r3, r0, r8
 8021174:	fa09 f303 	lsl.w	r3, r9, r3
 8021178:	4313      	orrs	r3, r2
 802117a:	9304      	str	r3, [sp, #16]
 802117c:	46a2      	mov	sl, r4
 802117e:	e7d2      	b.n	8021126 <_vfiprintf_r+0xc6>
 8021180:	9b03      	ldr	r3, [sp, #12]
 8021182:	1d19      	adds	r1, r3, #4
 8021184:	681b      	ldr	r3, [r3, #0]
 8021186:	9103      	str	r1, [sp, #12]
 8021188:	2b00      	cmp	r3, #0
 802118a:	bfbb      	ittet	lt
 802118c:	425b      	neglt	r3, r3
 802118e:	f042 0202 	orrlt.w	r2, r2, #2
 8021192:	9307      	strge	r3, [sp, #28]
 8021194:	9307      	strlt	r3, [sp, #28]
 8021196:	bfb8      	it	lt
 8021198:	9204      	strlt	r2, [sp, #16]
 802119a:	7823      	ldrb	r3, [r4, #0]
 802119c:	2b2e      	cmp	r3, #46	@ 0x2e
 802119e:	d10a      	bne.n	80211b6 <_vfiprintf_r+0x156>
 80211a0:	7863      	ldrb	r3, [r4, #1]
 80211a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80211a4:	d132      	bne.n	802120c <_vfiprintf_r+0x1ac>
 80211a6:	9b03      	ldr	r3, [sp, #12]
 80211a8:	1d1a      	adds	r2, r3, #4
 80211aa:	681b      	ldr	r3, [r3, #0]
 80211ac:	9203      	str	r2, [sp, #12]
 80211ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80211b2:	3402      	adds	r4, #2
 80211b4:	9305      	str	r3, [sp, #20]
 80211b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802128c <_vfiprintf_r+0x22c>
 80211ba:	7821      	ldrb	r1, [r4, #0]
 80211bc:	2203      	movs	r2, #3
 80211be:	4650      	mov	r0, sl
 80211c0:	f7df f88e 	bl	80002e0 <memchr>
 80211c4:	b138      	cbz	r0, 80211d6 <_vfiprintf_r+0x176>
 80211c6:	9b04      	ldr	r3, [sp, #16]
 80211c8:	eba0 000a 	sub.w	r0, r0, sl
 80211cc:	2240      	movs	r2, #64	@ 0x40
 80211ce:	4082      	lsls	r2, r0
 80211d0:	4313      	orrs	r3, r2
 80211d2:	3401      	adds	r4, #1
 80211d4:	9304      	str	r3, [sp, #16]
 80211d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80211da:	4829      	ldr	r0, [pc, #164]	@ (8021280 <_vfiprintf_r+0x220>)
 80211dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80211e0:	2206      	movs	r2, #6
 80211e2:	f7df f87d 	bl	80002e0 <memchr>
 80211e6:	2800      	cmp	r0, #0
 80211e8:	d03f      	beq.n	802126a <_vfiprintf_r+0x20a>
 80211ea:	4b26      	ldr	r3, [pc, #152]	@ (8021284 <_vfiprintf_r+0x224>)
 80211ec:	bb1b      	cbnz	r3, 8021236 <_vfiprintf_r+0x1d6>
 80211ee:	9b03      	ldr	r3, [sp, #12]
 80211f0:	3307      	adds	r3, #7
 80211f2:	f023 0307 	bic.w	r3, r3, #7
 80211f6:	3308      	adds	r3, #8
 80211f8:	9303      	str	r3, [sp, #12]
 80211fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80211fc:	443b      	add	r3, r7
 80211fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8021200:	e76a      	b.n	80210d8 <_vfiprintf_r+0x78>
 8021202:	fb0c 3202 	mla	r2, ip, r2, r3
 8021206:	460c      	mov	r4, r1
 8021208:	2001      	movs	r0, #1
 802120a:	e7a8      	b.n	802115e <_vfiprintf_r+0xfe>
 802120c:	2300      	movs	r3, #0
 802120e:	3401      	adds	r4, #1
 8021210:	9305      	str	r3, [sp, #20]
 8021212:	4619      	mov	r1, r3
 8021214:	f04f 0c0a 	mov.w	ip, #10
 8021218:	4620      	mov	r0, r4
 802121a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802121e:	3a30      	subs	r2, #48	@ 0x30
 8021220:	2a09      	cmp	r2, #9
 8021222:	d903      	bls.n	802122c <_vfiprintf_r+0x1cc>
 8021224:	2b00      	cmp	r3, #0
 8021226:	d0c6      	beq.n	80211b6 <_vfiprintf_r+0x156>
 8021228:	9105      	str	r1, [sp, #20]
 802122a:	e7c4      	b.n	80211b6 <_vfiprintf_r+0x156>
 802122c:	fb0c 2101 	mla	r1, ip, r1, r2
 8021230:	4604      	mov	r4, r0
 8021232:	2301      	movs	r3, #1
 8021234:	e7f0      	b.n	8021218 <_vfiprintf_r+0x1b8>
 8021236:	ab03      	add	r3, sp, #12
 8021238:	9300      	str	r3, [sp, #0]
 802123a:	462a      	mov	r2, r5
 802123c:	4b12      	ldr	r3, [pc, #72]	@ (8021288 <_vfiprintf_r+0x228>)
 802123e:	a904      	add	r1, sp, #16
 8021240:	4630      	mov	r0, r6
 8021242:	f3af 8000 	nop.w
 8021246:	4607      	mov	r7, r0
 8021248:	1c78      	adds	r0, r7, #1
 802124a:	d1d6      	bne.n	80211fa <_vfiprintf_r+0x19a>
 802124c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802124e:	07d9      	lsls	r1, r3, #31
 8021250:	d405      	bmi.n	802125e <_vfiprintf_r+0x1fe>
 8021252:	89ab      	ldrh	r3, [r5, #12]
 8021254:	059a      	lsls	r2, r3, #22
 8021256:	d402      	bmi.n	802125e <_vfiprintf_r+0x1fe>
 8021258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802125a:	f7ff fe21 	bl	8020ea0 <__retarget_lock_release_recursive>
 802125e:	89ab      	ldrh	r3, [r5, #12]
 8021260:	065b      	lsls	r3, r3, #25
 8021262:	f53f af1f 	bmi.w	80210a4 <_vfiprintf_r+0x44>
 8021266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021268:	e71e      	b.n	80210a8 <_vfiprintf_r+0x48>
 802126a:	ab03      	add	r3, sp, #12
 802126c:	9300      	str	r3, [sp, #0]
 802126e:	462a      	mov	r2, r5
 8021270:	4b05      	ldr	r3, [pc, #20]	@ (8021288 <_vfiprintf_r+0x228>)
 8021272:	a904      	add	r1, sp, #16
 8021274:	4630      	mov	r0, r6
 8021276:	f000 f879 	bl	802136c <_printf_i>
 802127a:	e7e4      	b.n	8021246 <_vfiprintf_r+0x1e6>
 802127c:	08023630 	.word	0x08023630
 8021280:	0802363a 	.word	0x0802363a
 8021284:	00000000 	.word	0x00000000
 8021288:	0802103b 	.word	0x0802103b
 802128c:	08023636 	.word	0x08023636

08021290 <_printf_common>:
 8021290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021294:	4616      	mov	r6, r2
 8021296:	4698      	mov	r8, r3
 8021298:	688a      	ldr	r2, [r1, #8]
 802129a:	690b      	ldr	r3, [r1, #16]
 802129c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80212a0:	4293      	cmp	r3, r2
 80212a2:	bfb8      	it	lt
 80212a4:	4613      	movlt	r3, r2
 80212a6:	6033      	str	r3, [r6, #0]
 80212a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80212ac:	4607      	mov	r7, r0
 80212ae:	460c      	mov	r4, r1
 80212b0:	b10a      	cbz	r2, 80212b6 <_printf_common+0x26>
 80212b2:	3301      	adds	r3, #1
 80212b4:	6033      	str	r3, [r6, #0]
 80212b6:	6823      	ldr	r3, [r4, #0]
 80212b8:	0699      	lsls	r1, r3, #26
 80212ba:	bf42      	ittt	mi
 80212bc:	6833      	ldrmi	r3, [r6, #0]
 80212be:	3302      	addmi	r3, #2
 80212c0:	6033      	strmi	r3, [r6, #0]
 80212c2:	6825      	ldr	r5, [r4, #0]
 80212c4:	f015 0506 	ands.w	r5, r5, #6
 80212c8:	d106      	bne.n	80212d8 <_printf_common+0x48>
 80212ca:	f104 0a19 	add.w	sl, r4, #25
 80212ce:	68e3      	ldr	r3, [r4, #12]
 80212d0:	6832      	ldr	r2, [r6, #0]
 80212d2:	1a9b      	subs	r3, r3, r2
 80212d4:	42ab      	cmp	r3, r5
 80212d6:	dc26      	bgt.n	8021326 <_printf_common+0x96>
 80212d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80212dc:	6822      	ldr	r2, [r4, #0]
 80212de:	3b00      	subs	r3, #0
 80212e0:	bf18      	it	ne
 80212e2:	2301      	movne	r3, #1
 80212e4:	0692      	lsls	r2, r2, #26
 80212e6:	d42b      	bmi.n	8021340 <_printf_common+0xb0>
 80212e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80212ec:	4641      	mov	r1, r8
 80212ee:	4638      	mov	r0, r7
 80212f0:	47c8      	blx	r9
 80212f2:	3001      	adds	r0, #1
 80212f4:	d01e      	beq.n	8021334 <_printf_common+0xa4>
 80212f6:	6823      	ldr	r3, [r4, #0]
 80212f8:	6922      	ldr	r2, [r4, #16]
 80212fa:	f003 0306 	and.w	r3, r3, #6
 80212fe:	2b04      	cmp	r3, #4
 8021300:	bf02      	ittt	eq
 8021302:	68e5      	ldreq	r5, [r4, #12]
 8021304:	6833      	ldreq	r3, [r6, #0]
 8021306:	1aed      	subeq	r5, r5, r3
 8021308:	68a3      	ldr	r3, [r4, #8]
 802130a:	bf0c      	ite	eq
 802130c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021310:	2500      	movne	r5, #0
 8021312:	4293      	cmp	r3, r2
 8021314:	bfc4      	itt	gt
 8021316:	1a9b      	subgt	r3, r3, r2
 8021318:	18ed      	addgt	r5, r5, r3
 802131a:	2600      	movs	r6, #0
 802131c:	341a      	adds	r4, #26
 802131e:	42b5      	cmp	r5, r6
 8021320:	d11a      	bne.n	8021358 <_printf_common+0xc8>
 8021322:	2000      	movs	r0, #0
 8021324:	e008      	b.n	8021338 <_printf_common+0xa8>
 8021326:	2301      	movs	r3, #1
 8021328:	4652      	mov	r2, sl
 802132a:	4641      	mov	r1, r8
 802132c:	4638      	mov	r0, r7
 802132e:	47c8      	blx	r9
 8021330:	3001      	adds	r0, #1
 8021332:	d103      	bne.n	802133c <_printf_common+0xac>
 8021334:	f04f 30ff 	mov.w	r0, #4294967295
 8021338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802133c:	3501      	adds	r5, #1
 802133e:	e7c6      	b.n	80212ce <_printf_common+0x3e>
 8021340:	18e1      	adds	r1, r4, r3
 8021342:	1c5a      	adds	r2, r3, #1
 8021344:	2030      	movs	r0, #48	@ 0x30
 8021346:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802134a:	4422      	add	r2, r4
 802134c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021350:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8021354:	3302      	adds	r3, #2
 8021356:	e7c7      	b.n	80212e8 <_printf_common+0x58>
 8021358:	2301      	movs	r3, #1
 802135a:	4622      	mov	r2, r4
 802135c:	4641      	mov	r1, r8
 802135e:	4638      	mov	r0, r7
 8021360:	47c8      	blx	r9
 8021362:	3001      	adds	r0, #1
 8021364:	d0e6      	beq.n	8021334 <_printf_common+0xa4>
 8021366:	3601      	adds	r6, #1
 8021368:	e7d9      	b.n	802131e <_printf_common+0x8e>
	...

0802136c <_printf_i>:
 802136c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021370:	7e0f      	ldrb	r7, [r1, #24]
 8021372:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021374:	2f78      	cmp	r7, #120	@ 0x78
 8021376:	4691      	mov	r9, r2
 8021378:	4680      	mov	r8, r0
 802137a:	460c      	mov	r4, r1
 802137c:	469a      	mov	sl, r3
 802137e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8021382:	d807      	bhi.n	8021394 <_printf_i+0x28>
 8021384:	2f62      	cmp	r7, #98	@ 0x62
 8021386:	d80a      	bhi.n	802139e <_printf_i+0x32>
 8021388:	2f00      	cmp	r7, #0
 802138a:	f000 80d1 	beq.w	8021530 <_printf_i+0x1c4>
 802138e:	2f58      	cmp	r7, #88	@ 0x58
 8021390:	f000 80b8 	beq.w	8021504 <_printf_i+0x198>
 8021394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021398:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802139c:	e03a      	b.n	8021414 <_printf_i+0xa8>
 802139e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80213a2:	2b15      	cmp	r3, #21
 80213a4:	d8f6      	bhi.n	8021394 <_printf_i+0x28>
 80213a6:	a101      	add	r1, pc, #4	@ (adr r1, 80213ac <_printf_i+0x40>)
 80213a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80213ac:	08021405 	.word	0x08021405
 80213b0:	08021419 	.word	0x08021419
 80213b4:	08021395 	.word	0x08021395
 80213b8:	08021395 	.word	0x08021395
 80213bc:	08021395 	.word	0x08021395
 80213c0:	08021395 	.word	0x08021395
 80213c4:	08021419 	.word	0x08021419
 80213c8:	08021395 	.word	0x08021395
 80213cc:	08021395 	.word	0x08021395
 80213d0:	08021395 	.word	0x08021395
 80213d4:	08021395 	.word	0x08021395
 80213d8:	08021517 	.word	0x08021517
 80213dc:	08021443 	.word	0x08021443
 80213e0:	080214d1 	.word	0x080214d1
 80213e4:	08021395 	.word	0x08021395
 80213e8:	08021395 	.word	0x08021395
 80213ec:	08021539 	.word	0x08021539
 80213f0:	08021395 	.word	0x08021395
 80213f4:	08021443 	.word	0x08021443
 80213f8:	08021395 	.word	0x08021395
 80213fc:	08021395 	.word	0x08021395
 8021400:	080214d9 	.word	0x080214d9
 8021404:	6833      	ldr	r3, [r6, #0]
 8021406:	1d1a      	adds	r2, r3, #4
 8021408:	681b      	ldr	r3, [r3, #0]
 802140a:	6032      	str	r2, [r6, #0]
 802140c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021410:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021414:	2301      	movs	r3, #1
 8021416:	e09c      	b.n	8021552 <_printf_i+0x1e6>
 8021418:	6833      	ldr	r3, [r6, #0]
 802141a:	6820      	ldr	r0, [r4, #0]
 802141c:	1d19      	adds	r1, r3, #4
 802141e:	6031      	str	r1, [r6, #0]
 8021420:	0606      	lsls	r6, r0, #24
 8021422:	d501      	bpl.n	8021428 <_printf_i+0xbc>
 8021424:	681d      	ldr	r5, [r3, #0]
 8021426:	e003      	b.n	8021430 <_printf_i+0xc4>
 8021428:	0645      	lsls	r5, r0, #25
 802142a:	d5fb      	bpl.n	8021424 <_printf_i+0xb8>
 802142c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021430:	2d00      	cmp	r5, #0
 8021432:	da03      	bge.n	802143c <_printf_i+0xd0>
 8021434:	232d      	movs	r3, #45	@ 0x2d
 8021436:	426d      	negs	r5, r5
 8021438:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802143c:	4858      	ldr	r0, [pc, #352]	@ (80215a0 <_printf_i+0x234>)
 802143e:	230a      	movs	r3, #10
 8021440:	e011      	b.n	8021466 <_printf_i+0xfa>
 8021442:	6821      	ldr	r1, [r4, #0]
 8021444:	6833      	ldr	r3, [r6, #0]
 8021446:	0608      	lsls	r0, r1, #24
 8021448:	f853 5b04 	ldr.w	r5, [r3], #4
 802144c:	d402      	bmi.n	8021454 <_printf_i+0xe8>
 802144e:	0649      	lsls	r1, r1, #25
 8021450:	bf48      	it	mi
 8021452:	b2ad      	uxthmi	r5, r5
 8021454:	2f6f      	cmp	r7, #111	@ 0x6f
 8021456:	4852      	ldr	r0, [pc, #328]	@ (80215a0 <_printf_i+0x234>)
 8021458:	6033      	str	r3, [r6, #0]
 802145a:	bf14      	ite	ne
 802145c:	230a      	movne	r3, #10
 802145e:	2308      	moveq	r3, #8
 8021460:	2100      	movs	r1, #0
 8021462:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8021466:	6866      	ldr	r6, [r4, #4]
 8021468:	60a6      	str	r6, [r4, #8]
 802146a:	2e00      	cmp	r6, #0
 802146c:	db05      	blt.n	802147a <_printf_i+0x10e>
 802146e:	6821      	ldr	r1, [r4, #0]
 8021470:	432e      	orrs	r6, r5
 8021472:	f021 0104 	bic.w	r1, r1, #4
 8021476:	6021      	str	r1, [r4, #0]
 8021478:	d04b      	beq.n	8021512 <_printf_i+0x1a6>
 802147a:	4616      	mov	r6, r2
 802147c:	fbb5 f1f3 	udiv	r1, r5, r3
 8021480:	fb03 5711 	mls	r7, r3, r1, r5
 8021484:	5dc7      	ldrb	r7, [r0, r7]
 8021486:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802148a:	462f      	mov	r7, r5
 802148c:	42bb      	cmp	r3, r7
 802148e:	460d      	mov	r5, r1
 8021490:	d9f4      	bls.n	802147c <_printf_i+0x110>
 8021492:	2b08      	cmp	r3, #8
 8021494:	d10b      	bne.n	80214ae <_printf_i+0x142>
 8021496:	6823      	ldr	r3, [r4, #0]
 8021498:	07df      	lsls	r7, r3, #31
 802149a:	d508      	bpl.n	80214ae <_printf_i+0x142>
 802149c:	6923      	ldr	r3, [r4, #16]
 802149e:	6861      	ldr	r1, [r4, #4]
 80214a0:	4299      	cmp	r1, r3
 80214a2:	bfde      	ittt	le
 80214a4:	2330      	movle	r3, #48	@ 0x30
 80214a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80214aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80214ae:	1b92      	subs	r2, r2, r6
 80214b0:	6122      	str	r2, [r4, #16]
 80214b2:	f8cd a000 	str.w	sl, [sp]
 80214b6:	464b      	mov	r3, r9
 80214b8:	aa03      	add	r2, sp, #12
 80214ba:	4621      	mov	r1, r4
 80214bc:	4640      	mov	r0, r8
 80214be:	f7ff fee7 	bl	8021290 <_printf_common>
 80214c2:	3001      	adds	r0, #1
 80214c4:	d14a      	bne.n	802155c <_printf_i+0x1f0>
 80214c6:	f04f 30ff 	mov.w	r0, #4294967295
 80214ca:	b004      	add	sp, #16
 80214cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214d0:	6823      	ldr	r3, [r4, #0]
 80214d2:	f043 0320 	orr.w	r3, r3, #32
 80214d6:	6023      	str	r3, [r4, #0]
 80214d8:	4832      	ldr	r0, [pc, #200]	@ (80215a4 <_printf_i+0x238>)
 80214da:	2778      	movs	r7, #120	@ 0x78
 80214dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80214e0:	6823      	ldr	r3, [r4, #0]
 80214e2:	6831      	ldr	r1, [r6, #0]
 80214e4:	061f      	lsls	r7, r3, #24
 80214e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80214ea:	d402      	bmi.n	80214f2 <_printf_i+0x186>
 80214ec:	065f      	lsls	r7, r3, #25
 80214ee:	bf48      	it	mi
 80214f0:	b2ad      	uxthmi	r5, r5
 80214f2:	6031      	str	r1, [r6, #0]
 80214f4:	07d9      	lsls	r1, r3, #31
 80214f6:	bf44      	itt	mi
 80214f8:	f043 0320 	orrmi.w	r3, r3, #32
 80214fc:	6023      	strmi	r3, [r4, #0]
 80214fe:	b11d      	cbz	r5, 8021508 <_printf_i+0x19c>
 8021500:	2310      	movs	r3, #16
 8021502:	e7ad      	b.n	8021460 <_printf_i+0xf4>
 8021504:	4826      	ldr	r0, [pc, #152]	@ (80215a0 <_printf_i+0x234>)
 8021506:	e7e9      	b.n	80214dc <_printf_i+0x170>
 8021508:	6823      	ldr	r3, [r4, #0]
 802150a:	f023 0320 	bic.w	r3, r3, #32
 802150e:	6023      	str	r3, [r4, #0]
 8021510:	e7f6      	b.n	8021500 <_printf_i+0x194>
 8021512:	4616      	mov	r6, r2
 8021514:	e7bd      	b.n	8021492 <_printf_i+0x126>
 8021516:	6833      	ldr	r3, [r6, #0]
 8021518:	6825      	ldr	r5, [r4, #0]
 802151a:	6961      	ldr	r1, [r4, #20]
 802151c:	1d18      	adds	r0, r3, #4
 802151e:	6030      	str	r0, [r6, #0]
 8021520:	062e      	lsls	r6, r5, #24
 8021522:	681b      	ldr	r3, [r3, #0]
 8021524:	d501      	bpl.n	802152a <_printf_i+0x1be>
 8021526:	6019      	str	r1, [r3, #0]
 8021528:	e002      	b.n	8021530 <_printf_i+0x1c4>
 802152a:	0668      	lsls	r0, r5, #25
 802152c:	d5fb      	bpl.n	8021526 <_printf_i+0x1ba>
 802152e:	8019      	strh	r1, [r3, #0]
 8021530:	2300      	movs	r3, #0
 8021532:	6123      	str	r3, [r4, #16]
 8021534:	4616      	mov	r6, r2
 8021536:	e7bc      	b.n	80214b2 <_printf_i+0x146>
 8021538:	6833      	ldr	r3, [r6, #0]
 802153a:	1d1a      	adds	r2, r3, #4
 802153c:	6032      	str	r2, [r6, #0]
 802153e:	681e      	ldr	r6, [r3, #0]
 8021540:	6862      	ldr	r2, [r4, #4]
 8021542:	2100      	movs	r1, #0
 8021544:	4630      	mov	r0, r6
 8021546:	f7de fecb 	bl	80002e0 <memchr>
 802154a:	b108      	cbz	r0, 8021550 <_printf_i+0x1e4>
 802154c:	1b80      	subs	r0, r0, r6
 802154e:	6060      	str	r0, [r4, #4]
 8021550:	6863      	ldr	r3, [r4, #4]
 8021552:	6123      	str	r3, [r4, #16]
 8021554:	2300      	movs	r3, #0
 8021556:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802155a:	e7aa      	b.n	80214b2 <_printf_i+0x146>
 802155c:	6923      	ldr	r3, [r4, #16]
 802155e:	4632      	mov	r2, r6
 8021560:	4649      	mov	r1, r9
 8021562:	4640      	mov	r0, r8
 8021564:	47d0      	blx	sl
 8021566:	3001      	adds	r0, #1
 8021568:	d0ad      	beq.n	80214c6 <_printf_i+0x15a>
 802156a:	6823      	ldr	r3, [r4, #0]
 802156c:	079b      	lsls	r3, r3, #30
 802156e:	d413      	bmi.n	8021598 <_printf_i+0x22c>
 8021570:	68e0      	ldr	r0, [r4, #12]
 8021572:	9b03      	ldr	r3, [sp, #12]
 8021574:	4298      	cmp	r0, r3
 8021576:	bfb8      	it	lt
 8021578:	4618      	movlt	r0, r3
 802157a:	e7a6      	b.n	80214ca <_printf_i+0x15e>
 802157c:	2301      	movs	r3, #1
 802157e:	4632      	mov	r2, r6
 8021580:	4649      	mov	r1, r9
 8021582:	4640      	mov	r0, r8
 8021584:	47d0      	blx	sl
 8021586:	3001      	adds	r0, #1
 8021588:	d09d      	beq.n	80214c6 <_printf_i+0x15a>
 802158a:	3501      	adds	r5, #1
 802158c:	68e3      	ldr	r3, [r4, #12]
 802158e:	9903      	ldr	r1, [sp, #12]
 8021590:	1a5b      	subs	r3, r3, r1
 8021592:	42ab      	cmp	r3, r5
 8021594:	dcf2      	bgt.n	802157c <_printf_i+0x210>
 8021596:	e7eb      	b.n	8021570 <_printf_i+0x204>
 8021598:	2500      	movs	r5, #0
 802159a:	f104 0619 	add.w	r6, r4, #25
 802159e:	e7f5      	b.n	802158c <_printf_i+0x220>
 80215a0:	08023641 	.word	0x08023641
 80215a4:	08023652 	.word	0x08023652

080215a8 <__sflush_r>:
 80215a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80215ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80215b0:	0716      	lsls	r6, r2, #28
 80215b2:	4605      	mov	r5, r0
 80215b4:	460c      	mov	r4, r1
 80215b6:	d454      	bmi.n	8021662 <__sflush_r+0xba>
 80215b8:	684b      	ldr	r3, [r1, #4]
 80215ba:	2b00      	cmp	r3, #0
 80215bc:	dc02      	bgt.n	80215c4 <__sflush_r+0x1c>
 80215be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80215c0:	2b00      	cmp	r3, #0
 80215c2:	dd48      	ble.n	8021656 <__sflush_r+0xae>
 80215c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80215c6:	2e00      	cmp	r6, #0
 80215c8:	d045      	beq.n	8021656 <__sflush_r+0xae>
 80215ca:	2300      	movs	r3, #0
 80215cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80215d0:	682f      	ldr	r7, [r5, #0]
 80215d2:	6a21      	ldr	r1, [r4, #32]
 80215d4:	602b      	str	r3, [r5, #0]
 80215d6:	d030      	beq.n	802163a <__sflush_r+0x92>
 80215d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80215da:	89a3      	ldrh	r3, [r4, #12]
 80215dc:	0759      	lsls	r1, r3, #29
 80215de:	d505      	bpl.n	80215ec <__sflush_r+0x44>
 80215e0:	6863      	ldr	r3, [r4, #4]
 80215e2:	1ad2      	subs	r2, r2, r3
 80215e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80215e6:	b10b      	cbz	r3, 80215ec <__sflush_r+0x44>
 80215e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80215ea:	1ad2      	subs	r2, r2, r3
 80215ec:	2300      	movs	r3, #0
 80215ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80215f0:	6a21      	ldr	r1, [r4, #32]
 80215f2:	4628      	mov	r0, r5
 80215f4:	47b0      	blx	r6
 80215f6:	1c43      	adds	r3, r0, #1
 80215f8:	89a3      	ldrh	r3, [r4, #12]
 80215fa:	d106      	bne.n	802160a <__sflush_r+0x62>
 80215fc:	6829      	ldr	r1, [r5, #0]
 80215fe:	291d      	cmp	r1, #29
 8021600:	d82b      	bhi.n	802165a <__sflush_r+0xb2>
 8021602:	4a2a      	ldr	r2, [pc, #168]	@ (80216ac <__sflush_r+0x104>)
 8021604:	40ca      	lsrs	r2, r1
 8021606:	07d6      	lsls	r6, r2, #31
 8021608:	d527      	bpl.n	802165a <__sflush_r+0xb2>
 802160a:	2200      	movs	r2, #0
 802160c:	6062      	str	r2, [r4, #4]
 802160e:	04d9      	lsls	r1, r3, #19
 8021610:	6922      	ldr	r2, [r4, #16]
 8021612:	6022      	str	r2, [r4, #0]
 8021614:	d504      	bpl.n	8021620 <__sflush_r+0x78>
 8021616:	1c42      	adds	r2, r0, #1
 8021618:	d101      	bne.n	802161e <__sflush_r+0x76>
 802161a:	682b      	ldr	r3, [r5, #0]
 802161c:	b903      	cbnz	r3, 8021620 <__sflush_r+0x78>
 802161e:	6560      	str	r0, [r4, #84]	@ 0x54
 8021620:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021622:	602f      	str	r7, [r5, #0]
 8021624:	b1b9      	cbz	r1, 8021656 <__sflush_r+0xae>
 8021626:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802162a:	4299      	cmp	r1, r3
 802162c:	d002      	beq.n	8021634 <__sflush_r+0x8c>
 802162e:	4628      	mov	r0, r5
 8021630:	f7ff fca2 	bl	8020f78 <_free_r>
 8021634:	2300      	movs	r3, #0
 8021636:	6363      	str	r3, [r4, #52]	@ 0x34
 8021638:	e00d      	b.n	8021656 <__sflush_r+0xae>
 802163a:	2301      	movs	r3, #1
 802163c:	4628      	mov	r0, r5
 802163e:	47b0      	blx	r6
 8021640:	4602      	mov	r2, r0
 8021642:	1c50      	adds	r0, r2, #1
 8021644:	d1c9      	bne.n	80215da <__sflush_r+0x32>
 8021646:	682b      	ldr	r3, [r5, #0]
 8021648:	2b00      	cmp	r3, #0
 802164a:	d0c6      	beq.n	80215da <__sflush_r+0x32>
 802164c:	2b1d      	cmp	r3, #29
 802164e:	d001      	beq.n	8021654 <__sflush_r+0xac>
 8021650:	2b16      	cmp	r3, #22
 8021652:	d11e      	bne.n	8021692 <__sflush_r+0xea>
 8021654:	602f      	str	r7, [r5, #0]
 8021656:	2000      	movs	r0, #0
 8021658:	e022      	b.n	80216a0 <__sflush_r+0xf8>
 802165a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802165e:	b21b      	sxth	r3, r3
 8021660:	e01b      	b.n	802169a <__sflush_r+0xf2>
 8021662:	690f      	ldr	r7, [r1, #16]
 8021664:	2f00      	cmp	r7, #0
 8021666:	d0f6      	beq.n	8021656 <__sflush_r+0xae>
 8021668:	0793      	lsls	r3, r2, #30
 802166a:	680e      	ldr	r6, [r1, #0]
 802166c:	bf08      	it	eq
 802166e:	694b      	ldreq	r3, [r1, #20]
 8021670:	600f      	str	r7, [r1, #0]
 8021672:	bf18      	it	ne
 8021674:	2300      	movne	r3, #0
 8021676:	eba6 0807 	sub.w	r8, r6, r7
 802167a:	608b      	str	r3, [r1, #8]
 802167c:	f1b8 0f00 	cmp.w	r8, #0
 8021680:	dde9      	ble.n	8021656 <__sflush_r+0xae>
 8021682:	6a21      	ldr	r1, [r4, #32]
 8021684:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021686:	4643      	mov	r3, r8
 8021688:	463a      	mov	r2, r7
 802168a:	4628      	mov	r0, r5
 802168c:	47b0      	blx	r6
 802168e:	2800      	cmp	r0, #0
 8021690:	dc08      	bgt.n	80216a4 <__sflush_r+0xfc>
 8021692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802169a:	81a3      	strh	r3, [r4, #12]
 802169c:	f04f 30ff 	mov.w	r0, #4294967295
 80216a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80216a4:	4407      	add	r7, r0
 80216a6:	eba8 0800 	sub.w	r8, r8, r0
 80216aa:	e7e7      	b.n	802167c <__sflush_r+0xd4>
 80216ac:	20400001 	.word	0x20400001

080216b0 <_fflush_r>:
 80216b0:	b538      	push	{r3, r4, r5, lr}
 80216b2:	690b      	ldr	r3, [r1, #16]
 80216b4:	4605      	mov	r5, r0
 80216b6:	460c      	mov	r4, r1
 80216b8:	b913      	cbnz	r3, 80216c0 <_fflush_r+0x10>
 80216ba:	2500      	movs	r5, #0
 80216bc:	4628      	mov	r0, r5
 80216be:	bd38      	pop	{r3, r4, r5, pc}
 80216c0:	b118      	cbz	r0, 80216ca <_fflush_r+0x1a>
 80216c2:	6a03      	ldr	r3, [r0, #32]
 80216c4:	b90b      	cbnz	r3, 80216ca <_fflush_r+0x1a>
 80216c6:	f7ff f9eb 	bl	8020aa0 <__sinit>
 80216ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80216ce:	2b00      	cmp	r3, #0
 80216d0:	d0f3      	beq.n	80216ba <_fflush_r+0xa>
 80216d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80216d4:	07d0      	lsls	r0, r2, #31
 80216d6:	d404      	bmi.n	80216e2 <_fflush_r+0x32>
 80216d8:	0599      	lsls	r1, r3, #22
 80216da:	d402      	bmi.n	80216e2 <_fflush_r+0x32>
 80216dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80216de:	f7ff fbde 	bl	8020e9e <__retarget_lock_acquire_recursive>
 80216e2:	4628      	mov	r0, r5
 80216e4:	4621      	mov	r1, r4
 80216e6:	f7ff ff5f 	bl	80215a8 <__sflush_r>
 80216ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80216ec:	07da      	lsls	r2, r3, #31
 80216ee:	4605      	mov	r5, r0
 80216f0:	d4e4      	bmi.n	80216bc <_fflush_r+0xc>
 80216f2:	89a3      	ldrh	r3, [r4, #12]
 80216f4:	059b      	lsls	r3, r3, #22
 80216f6:	d4e1      	bmi.n	80216bc <_fflush_r+0xc>
 80216f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80216fa:	f7ff fbd1 	bl	8020ea0 <__retarget_lock_release_recursive>
 80216fe:	e7dd      	b.n	80216bc <_fflush_r+0xc>

08021700 <__swhatbuf_r>:
 8021700:	b570      	push	{r4, r5, r6, lr}
 8021702:	460c      	mov	r4, r1
 8021704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021708:	2900      	cmp	r1, #0
 802170a:	b096      	sub	sp, #88	@ 0x58
 802170c:	4615      	mov	r5, r2
 802170e:	461e      	mov	r6, r3
 8021710:	da0d      	bge.n	802172e <__swhatbuf_r+0x2e>
 8021712:	89a3      	ldrh	r3, [r4, #12]
 8021714:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021718:	f04f 0100 	mov.w	r1, #0
 802171c:	bf14      	ite	ne
 802171e:	2340      	movne	r3, #64	@ 0x40
 8021720:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021724:	2000      	movs	r0, #0
 8021726:	6031      	str	r1, [r6, #0]
 8021728:	602b      	str	r3, [r5, #0]
 802172a:	b016      	add	sp, #88	@ 0x58
 802172c:	bd70      	pop	{r4, r5, r6, pc}
 802172e:	466a      	mov	r2, sp
 8021730:	f000 f848 	bl	80217c4 <_fstat_r>
 8021734:	2800      	cmp	r0, #0
 8021736:	dbec      	blt.n	8021712 <__swhatbuf_r+0x12>
 8021738:	9901      	ldr	r1, [sp, #4]
 802173a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802173e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021742:	4259      	negs	r1, r3
 8021744:	4159      	adcs	r1, r3
 8021746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802174a:	e7eb      	b.n	8021724 <__swhatbuf_r+0x24>

0802174c <__smakebuf_r>:
 802174c:	898b      	ldrh	r3, [r1, #12]
 802174e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021750:	079d      	lsls	r5, r3, #30
 8021752:	4606      	mov	r6, r0
 8021754:	460c      	mov	r4, r1
 8021756:	d507      	bpl.n	8021768 <__smakebuf_r+0x1c>
 8021758:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802175c:	6023      	str	r3, [r4, #0]
 802175e:	6123      	str	r3, [r4, #16]
 8021760:	2301      	movs	r3, #1
 8021762:	6163      	str	r3, [r4, #20]
 8021764:	b003      	add	sp, #12
 8021766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021768:	ab01      	add	r3, sp, #4
 802176a:	466a      	mov	r2, sp
 802176c:	f7ff ffc8 	bl	8021700 <__swhatbuf_r>
 8021770:	9f00      	ldr	r7, [sp, #0]
 8021772:	4605      	mov	r5, r0
 8021774:	4639      	mov	r1, r7
 8021776:	4630      	mov	r0, r6
 8021778:	f7ff f86c 	bl	8020854 <_malloc_r>
 802177c:	b948      	cbnz	r0, 8021792 <__smakebuf_r+0x46>
 802177e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021782:	059a      	lsls	r2, r3, #22
 8021784:	d4ee      	bmi.n	8021764 <__smakebuf_r+0x18>
 8021786:	f023 0303 	bic.w	r3, r3, #3
 802178a:	f043 0302 	orr.w	r3, r3, #2
 802178e:	81a3      	strh	r3, [r4, #12]
 8021790:	e7e2      	b.n	8021758 <__smakebuf_r+0xc>
 8021792:	89a3      	ldrh	r3, [r4, #12]
 8021794:	6020      	str	r0, [r4, #0]
 8021796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802179a:	81a3      	strh	r3, [r4, #12]
 802179c:	9b01      	ldr	r3, [sp, #4]
 802179e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80217a2:	b15b      	cbz	r3, 80217bc <__smakebuf_r+0x70>
 80217a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80217a8:	4630      	mov	r0, r6
 80217aa:	f000 f81d 	bl	80217e8 <_isatty_r>
 80217ae:	b128      	cbz	r0, 80217bc <__smakebuf_r+0x70>
 80217b0:	89a3      	ldrh	r3, [r4, #12]
 80217b2:	f023 0303 	bic.w	r3, r3, #3
 80217b6:	f043 0301 	orr.w	r3, r3, #1
 80217ba:	81a3      	strh	r3, [r4, #12]
 80217bc:	89a3      	ldrh	r3, [r4, #12]
 80217be:	431d      	orrs	r5, r3
 80217c0:	81a5      	strh	r5, [r4, #12]
 80217c2:	e7cf      	b.n	8021764 <__smakebuf_r+0x18>

080217c4 <_fstat_r>:
 80217c4:	b538      	push	{r3, r4, r5, lr}
 80217c6:	4d07      	ldr	r5, [pc, #28]	@ (80217e4 <_fstat_r+0x20>)
 80217c8:	2300      	movs	r3, #0
 80217ca:	4604      	mov	r4, r0
 80217cc:	4608      	mov	r0, r1
 80217ce:	4611      	mov	r1, r2
 80217d0:	602b      	str	r3, [r5, #0]
 80217d2:	f7df ffb8 	bl	8001746 <_fstat>
 80217d6:	1c43      	adds	r3, r0, #1
 80217d8:	d102      	bne.n	80217e0 <_fstat_r+0x1c>
 80217da:	682b      	ldr	r3, [r5, #0]
 80217dc:	b103      	cbz	r3, 80217e0 <_fstat_r+0x1c>
 80217de:	6023      	str	r3, [r4, #0]
 80217e0:	bd38      	pop	{r3, r4, r5, pc}
 80217e2:	bf00      	nop
 80217e4:	24025ca0 	.word	0x24025ca0

080217e8 <_isatty_r>:
 80217e8:	b538      	push	{r3, r4, r5, lr}
 80217ea:	4d06      	ldr	r5, [pc, #24]	@ (8021804 <_isatty_r+0x1c>)
 80217ec:	2300      	movs	r3, #0
 80217ee:	4604      	mov	r4, r0
 80217f0:	4608      	mov	r0, r1
 80217f2:	602b      	str	r3, [r5, #0]
 80217f4:	f7df ffac 	bl	8001750 <_isatty>
 80217f8:	1c43      	adds	r3, r0, #1
 80217fa:	d102      	bne.n	8021802 <_isatty_r+0x1a>
 80217fc:	682b      	ldr	r3, [r5, #0]
 80217fe:	b103      	cbz	r3, 8021802 <_isatty_r+0x1a>
 8021800:	6023      	str	r3, [r4, #0]
 8021802:	bd38      	pop	{r3, r4, r5, pc}
 8021804:	24025ca0 	.word	0x24025ca0

08021808 <_init>:
 8021808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802180a:	bf00      	nop
 802180c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802180e:	bc08      	pop	{r3}
 8021810:	469e      	mov	lr, r3
 8021812:	4770      	bx	lr

08021814 <_fini>:
 8021814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021816:	bf00      	nop
 8021818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802181a:	bc08      	pop	{r3}
 802181c:	469e      	mov	lr, r3
 802181e:	4770      	bx	lr
